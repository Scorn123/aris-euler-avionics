
main_board_rev2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015704  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080159a4  080159a4  000259a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b54  08015b54  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08015b54  08015b54  00025b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b5c  08015b5c  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b5c  08015b5c  00025b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b60  08015b60  00025b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  24000000  08015b64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d234  240001ec  08015d50  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2401d420  08015d50  0003d420  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c3c9  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007968  00000000  00000000  0007c5e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002a60  00000000  00000000  00083f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002778  00000000  00000000  000869b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000429d6  00000000  00000000  00089128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002abb0  00000000  00000000  000cbafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001908da  00000000  00000000  000f66ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00286f88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b6fc  00000000  00000000  00287004  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801598c 	.word	0x0801598c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	0801598c 	.word	0x0801598c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8000690:	b40f      	push	{r0, r1, r2, r3}
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <UsbPrint+0x60>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f010 fe40 	bl	8011328 <osMutexAcquire>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d118      	bne.n	80006e0 <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	21c8      	movs	r1, #200	; 0xc8
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <UsbPrint+0x64>)
 80006bc:	f014 fe34 	bl	8015328 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <UsbPrint+0x64>)
 80006c2:	f7ff fe0d 	bl	80002e0 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <UsbPrint+0x64>)
 80006ce:	f014 f8b5 	bl	801483c <CDC_Transmit_FS>
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <UsbPrint+0x60>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f010 fe82 	bl	80113e4 <osMutexRelease>
	}
#endif
	return ret;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006ec:	b004      	add	sp, #16
 80006ee:	4770      	bx	lr
 80006f0:	240087f8 	.word	0x240087f8
 80006f4:	24008730 	.word	0x24008730

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f001 fd89 	bl	8002214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 f83f 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f000 fd45 	bl	8001194 <MX_GPIO_Init>
  MX_DMA_Init();
 800070a:	f000 fcc3 	bl	8001094 <MX_DMA_Init>
  MX_ADC1_Init();
 800070e:	f000 f933 	bl	8000978 <MX_ADC1_Init>
  MX_SDMMC1_SD_Init();
 8000712:	f000 f9db 	bl	8000acc <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000716:	f000 f9fb 	bl	8000b10 <MX_SPI1_Init>
  MX_SPI2_Init();
 800071a:	f000 fa49 	bl	8000bb0 <MX_SPI2_Init>
  MX_SPI3_Init();
 800071e:	f000 fa97 	bl	8000c50 <MX_SPI3_Init>
  MX_UART4_Init();
 8000722:	f000 fb3b 	bl	8000d9c <MX_UART4_Init>
  MX_UART7_Init();
 8000726:	f000 fb85 	bl	8000e34 <MX_UART7_Init>
  MX_USART1_UART_Init();
 800072a:	f000 fbcf 	bl	8000ecc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800072e:	f000 fc19 	bl	8000f64 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000732:	f000 fc63 	bl	8000ffc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000736:	f00e fd07 	bl	800f148 <MX_FATFS_Init>
  MX_SPI4_Init();
 800073a:	f000 fad9 	bl	8000cf0 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800073e:	f010 fbd1 	bl	8010ee4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
#ifdef DEBUG
	const osMutexAttr_t print_mutex_attr = {
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <main+0x78>)
 8000744:	463c      	mov	r4, r7
 8000746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					  // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	print_mutex = osMutexNew(&print_mutex_attr);
 800074c:	463b      	mov	r3, r7
 800074e:	4618      	mov	r0, r3
 8000750:	f010 fd50 	bl	80111f4 <osMutexNew>
 8000754:	4602      	mov	r2, r0
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <main+0x7c>)
 8000758:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800075a:	4a07      	ldr	r2, [pc, #28]	; (8000778 <main+0x80>)
 800075c:	2100      	movs	r1, #0
 800075e:	4807      	ldr	r0, [pc, #28]	; (800077c <main+0x84>)
 8000760:	f010 fc74 	bl	801104c <osThreadNew>
 8000764:	4602      	mov	r2, r0
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <main+0x88>)
 8000768:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800076a:	f010 fc11 	bl	8010f90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076e:	e7fe      	b.n	800076e <main+0x76>
 8000770:	08015a40 	.word	0x08015a40
 8000774:	240087f8 	.word	0x240087f8
 8000778:	08015ab8 	.word	0x08015ab8
 800077c:	08001289 	.word	0x08001289
 8000780:	24008878 	.word	0x24008878

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b0cc      	sub	sp, #304	; 0x130
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800078e:	224c      	movs	r2, #76	; 0x4c
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f014 fcdb 	bl	801514e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800079c:	2220      	movs	r2, #32
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f014 fcd4 	bl	801514e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	4618      	mov	r0, r3
 80007ac:	23bc      	movs	r3, #188	; 0xbc
 80007ae:	461a      	mov	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f014 fccc 	bl	801514e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b6:	2002      	movs	r0, #2
 80007b8:	f006 f978 	bl	8006aac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	4b69      	ldr	r3, [pc, #420]	; (8000968 <SystemClock_Config+0x1e4>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a68      	ldr	r2, [pc, #416]	; (8000968 <SystemClock_Config+0x1e4>)
 80007c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b66      	ldr	r3, [pc, #408]	; (8000968 <SystemClock_Config+0x1e4>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	4b64      	ldr	r3, [pc, #400]	; (800096c <SystemClock_Config+0x1e8>)
 80007dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007de:	4a63      	ldr	r2, [pc, #396]	; (800096c <SystemClock_Config+0x1e8>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007e6:	4b61      	ldr	r3, [pc, #388]	; (800096c <SystemClock_Config+0x1e8>)
 80007e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ea:	f003 0201 	and.w	r2, r3, #1
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f6:	bf00      	nop
 80007f8:	4b5b      	ldr	r3, [pc, #364]	; (8000968 <SystemClock_Config+0x1e4>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000804:	d1f8      	bne.n	80007f8 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000806:	4b5a      	ldr	r3, [pc, #360]	; (8000970 <SystemClock_Config+0x1ec>)
 8000808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080a:	f023 0303 	bic.w	r3, r3, #3
 800080e:	4a58      	ldr	r2, [pc, #352]	; (8000970 <SystemClock_Config+0x1ec>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000816:	2301      	movs	r3, #1
 8000818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000820:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	2302      	movs	r3, #2
 800082c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000836:	2378      	movs	r3, #120	; 0x78
 8000838:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000842:	2314      	movs	r3, #20
 8000844:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800084e:	230c      	movs	r3, #12
 8000850:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000854:	2300      	movs	r3, #0
 8000856:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000864:	4618      	mov	r0, r3
 8000866:	f006 f96b 	bl	8006b40 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000870:	f000 fd2c 	bl	80012cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	233f      	movs	r3, #63	; 0x3f
 8000876:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2303      	movs	r3, #3
 800087c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800088e:	2340      	movs	r3, #64	; 0x40
 8000890:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008a2:	2340      	movs	r3, #64	; 0x40
 80008a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008ac:	2104      	movs	r1, #4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f006 fd56 	bl	8007360 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x13a>
  {
    Error_Handler();
 80008ba:	f000 fd07 	bl	80012cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	4a2c      	ldr	r2, [pc, #176]	; (8000974 <SystemClock_Config+0x1f0>)
 80008c4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2201      	movs	r2, #1
 80008cc:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	2212      	movs	r2, #18
 80008d4:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	2201      	movs	r2, #1
 80008dc:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2202      	movs	r2, #2
 80008e4:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2202      	movs	r2, #2
 80008ec:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	22c0      	movs	r2, #192	; 0xc0
 80008f4:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2220      	movs	r2, #32
 80008fc:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	2200      	movs	r2, #0
 800090c:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2200      	movs	r2, #0
 8000914:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	2200      	movs	r2, #0
 800091c:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	2200      	movs	r2, #0
 8000924:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	2200      	movs	r2, #0
 800092c:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2200      	movs	r2, #0
 8000940:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4618      	mov	r0, r3
 800094a:	f007 f8cf 	bl	8007aec <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x1d4>
  {
    Error_Handler();
 8000954:	f000 fcba 	bl	80012cc <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000958:	f006 f8e2 	bl	8006b20 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800095c:	bf00      	nop
 800095e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	58024800 	.word	0x58024800
 800096c:	58000400 	.word	0x58000400
 8000970:	58024400 	.word	0x58024400
 8000974:	000d3003 	.word	0x000d3003

08000978 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800098a:	463b      	mov	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	615a      	str	r2, [r3, #20]
 800099a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800099c:	4b45      	ldr	r3, [pc, #276]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 800099e:	4a46      	ldr	r2, [pc, #280]	; (8000ab8 <MX_ADC1_Init+0x140>)
 80009a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80009a2:	4b44      	ldr	r3, [pc, #272]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80009aa:	4b42      	ldr	r3, [pc, #264]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009b0:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b6:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009b8:	2204      	movs	r2, #4
 80009ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009bc:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009c2:	4b3c      	ldr	r3, [pc, #240]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 4;
 80009c8:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ce:	4b39      	ldr	r3, [pc, #228]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d4:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009da:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009e0:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009e6:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009ec:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009f2:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009fa:	482e      	ldr	r0, [pc, #184]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 80009fc:	f001 fe20 	bl	8002640 <HAL_ADC_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a06:	f000 fc61 	bl	80012cc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 8000a16:	f002 fbe5 	bl	80031e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a20:	f000 fc54 	bl	80012cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a24:	4b25      	ldr	r3, [pc, #148]	; (8000abc <MX_ADC1_Init+0x144>)
 8000a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a28:	2306      	movs	r3, #6
 8000a2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a30:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a34:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a36:	2304      	movs	r3, #4
 8000a38:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4619      	mov	r1, r3
 8000a46:	481b      	ldr	r0, [pc, #108]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 8000a48:	f001 ff9a 	bl	8002980 <HAL_ADC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000a52:	f000 fc3b 	bl	80012cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_ADC1_Init+0x148>)
 8000a58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 8000a64:	f001 ff8c 	bl	8002980 <HAL_ADC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000a6e:	f000 fc2d 	bl	80012cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_ADC1_Init+0x14c>)
 8000a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a76:	2312      	movs	r3, #18
 8000a78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 8000a80:	f001 ff7e 	bl	8002980 <HAL_ADC_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000a8a:	f000 fc1f 	bl	80012cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_ADC1_Init+0x150>)
 8000a90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a92:	2318      	movs	r3, #24
 8000a94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a96:	463b      	mov	r3, r7
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MX_ADC1_Init+0x13c>)
 8000a9c:	f001 ff70 	bl	8002980 <HAL_ADC_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000aa6:	f000 fc11 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2400ce7c 	.word	0x2400ce7c
 8000ab8:	40022000 	.word	0x40022000
 8000abc:	21800100 	.word	0x21800100
 8000ac0:	25b00200 	.word	0x25b00200
 8000ac4:	2a000400 	.word	0x2a000400
 8000ac8:	2e300800 	.word	0x2e300800

08000acc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MX_SDMMC1_SD_Init+0x3c>)
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <MX_SDMMC1_SD_Init+0x40>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_SDMMC1_SD_Init+0x3c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_SDMMC1_SD_Init+0x3c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_SDMMC1_SD_Init+0x3c>)
 8000ae4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ae8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_SDMMC1_SD_Init+0x3c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <MX_SDMMC1_SD_Init+0x3c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <MX_SDMMC1_SD_Init+0x3c>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	2400ac9c 	.word	0x2400ac9c
 8000b0c:	52007000 	.word	0x52007000

08000b10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b16:	4a25      	ldr	r2, [pc, #148]	; (8000bac <MX_SPI1_Init+0x9c>)
 8000b18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000b20:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b22:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_SPI1_Init+0x98>)
 8000b96:	f00a fad9 	bl	800b14c <HAL_SPI_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_SPI1_Init+0x94>
  {
    Error_Handler();
 8000ba0:	f000 fb94 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	24017380 	.word	0x24017380
 8000bac:	40013000 	.word	0x40013000

08000bb0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000bb6:	4a25      	ldr	r2, [pc, #148]	; (8000c4c <MX_SPI2_Init+0x9c>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000bc2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000bca:	2207      	movs	r2, #7
 8000bcc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_SPI2_Init+0x98>)
 8000c36:	f00a fa89 	bl	800b14c <HAL_SPI_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_SPI2_Init+0x94>
  {
    Error_Handler();
 8000c40:	f000 fb44 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	240088f4 	.word	0x240088f4
 8000c4c:	40003800 	.word	0x40003800

08000c50 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000c56:	4a25      	ldr	r2, [pc, #148]	; (8000cec <MX_SPI3_Init+0x9c>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000c62:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c66:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000c6a:	2207      	movs	r2, #7
 8000c6c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c74:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_SPI3_Init+0x98>)
 8000cd6:	f00a fa39 	bl	800b14c <HAL_SPI_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_SPI3_Init+0x94>
  {
    Error_Handler();
 8000ce0:	f000 faf4 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2400cdf4 	.word	0x2400cdf4
 8000cec:	40003c00 	.word	0x40003c00

08000cf0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000cf6:	4a28      	ldr	r2, [pc, #160]	; (8000d98 <MX_SPI4_Init+0xa8>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cfa:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000cfc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d00:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d20:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d28:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_SPI4_Init+0xa4>)
 8000d82:	f00a f9e3 	bl	800b14c <HAL_SPI_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000d8c:	f000 fa9e 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2400f138 	.word	0x2400f138
 8000d98:	40013400 	.word	0x40013400

08000d9c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <MX_UART4_Init+0x90>)
 8000da2:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <MX_UART4_Init+0x94>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <MX_UART4_Init+0x90>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_UART4_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_UART4_Init+0x90>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_UART4_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_UART4_Init+0x90>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_UART4_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_UART4_Init+0x90>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_UART4_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_UART4_Init+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_UART4_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000de4:	4811      	ldr	r0, [pc, #68]	; (8000e2c <MX_UART4_Init+0x90>)
 8000de6:	f00b f81f 	bl	800be28 <HAL_UART_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000df0:	f000 fa6c 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df4:	2100      	movs	r1, #0
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_UART4_Init+0x90>)
 8000df8:	f00b ffb9 	bl	800cd6e <HAL_UARTEx_SetTxFifoThreshold>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000e02:	f000 fa63 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e06:	2100      	movs	r1, #0
 8000e08:	4808      	ldr	r0, [pc, #32]	; (8000e2c <MX_UART4_Init+0x90>)
 8000e0a:	f00b ffee 	bl	800cdea <HAL_UARTEx_SetRxFifoThreshold>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000e14:	f000 fa5a 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_UART4_Init+0x90>)
 8000e1a:	f00b ff6f 	bl	800ccfc <HAL_UARTEx_DisableFifoMode>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e24:	f000 fa52 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	240172f4 	.word	0x240172f4
 8000e30:	40004c00 	.word	0x40004c00

08000e34 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e3a:	4a23      	ldr	r2, [pc, #140]	; (8000ec8 <MX_UART7_Init+0x94>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e7c:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e7e:	f00a ffd3 	bl	800be28 <HAL_UART_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000e88:	f000 fa20 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000e90:	f00b ff6d 	bl	800cd6e <HAL_UARTEx_SetTxFifoThreshold>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000e9a:	f000 fa17 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000ea2:	f00b ffa2 	bl	800cdea <HAL_UARTEx_SetRxFifoThreshold>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f000 fa0e 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_UART7_Init+0x90>)
 8000eb2:	f00b ff23 	bl	800ccfc <HAL_UARTEx_DisableFifoMode>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000ebc:	f000 fa06 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2400897c 	.word	0x2400897c
 8000ec8:	40007800 	.word	0x40007800

08000ecc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000ed2:	4a23      	ldr	r2, [pc, #140]	; (8000f60 <MX_USART1_UART_Init+0x94>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f14:	4811      	ldr	r0, [pc, #68]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f16:	f00a ff87 	bl	800be28 <HAL_UART_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f20:	f000 f9d4 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f24:	2100      	movs	r1, #0
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f28:	f00b ff21 	bl	800cd6e <HAL_UARTEx_SetTxFifoThreshold>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f32:	f000 f9cb 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f36:	2100      	movs	r1, #0
 8000f38:	4808      	ldr	r0, [pc, #32]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f3a:	f00b ff56 	bl	800cdea <HAL_UARTEx_SetRxFifoThreshold>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f44:	f000 f9c2 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f4a:	f00b fed7 	bl	800ccfc <HAL_UARTEx_DisableFifoMode>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f54:	f000 f9ba 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2400f034 	.word	0x2400f034
 8000f60:	40011000 	.word	0x40011000

08000f64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f6a:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fac:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000fae:	f00a ff3b 	bl	800be28 <HAL_UART_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fb8:	f000 f988 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000fc0:	f00b fed5 	bl	800cd6e <HAL_UARTEx_SetTxFifoThreshold>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000fca:	f000 f97f 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000fd2:	f00b ff0a 	bl	800cdea <HAL_UARTEx_SetRxFifoThreshold>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000fdc:	f000 f976 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000fe2:	f00b fe8b 	bl	800ccfc <HAL_UARTEx_DisableFifoMode>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000fec:	f000 f96e 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	24019464 	.word	0x24019464
 8000ff8:	40004400 	.word	0x40004400

08000ffc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <MX_USART3_UART_Init+0x94>)
 8001004:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_USART3_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_USART3_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_USART3_UART_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001046:	f00a feef 	bl	800be28 <HAL_UART_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001050:	f000 f93c 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001058:	f00b fe89 	bl	800cd6e <HAL_UARTEx_SetTxFifoThreshold>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001062:	f000 f933 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <MX_USART3_UART_Init+0x90>)
 800106a:	f00b febe 	bl	800cdea <HAL_UARTEx_SetRxFifoThreshold>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001074:	f000 f92a 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_USART3_UART_Init+0x90>)
 800107a:	f00b fe3f 	bl	800ccfc <HAL_UARTEx_DisableFifoMode>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001084:	f000 f922 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	24008a80 	.word	0x24008a80
 8001090:	40004800 	.word	0x40004800

08001094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800109a:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <MX_DMA_Init+0xfc>)
 800109c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a0:	4a3b      	ldr	r2, [pc, #236]	; (8001190 <MX_DMA_Init+0xfc>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <MX_DMA_Init+0xfc>)
 80010ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b8:	4b35      	ldr	r3, [pc, #212]	; (8001190 <MX_DMA_Init+0xfc>)
 80010ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010be:	4a34      	ldr	r2, [pc, #208]	; (8001190 <MX_DMA_Init+0xfc>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010c8:	4b31      	ldr	r3, [pc, #196]	; (8001190 <MX_DMA_Init+0xfc>)
 80010ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	200b      	movs	r0, #11
 80010dc:	f002 fa14 	bl	8003508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010e0:	200b      	movs	r0, #11
 80010e2:	f002 fa2b 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	200c      	movs	r0, #12
 80010ec:	f002 fa0c 	bl	8003508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010f0:	200c      	movs	r0, #12
 80010f2:	f002 fa23 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	200d      	movs	r0, #13
 80010fc:	f002 fa04 	bl	8003508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001100:	200d      	movs	r0, #13
 8001102:	f002 fa1b 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	200e      	movs	r0, #14
 800110c:	f002 f9fc 	bl	8003508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001110:	200e      	movs	r0, #14
 8001112:	f002 fa13 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	200f      	movs	r0, #15
 800111c:	f002 f9f4 	bl	8003508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001120:	200f      	movs	r0, #15
 8001122:	f002 fa0b 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2010      	movs	r0, #16
 800112c:	f002 f9ec 	bl	8003508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001130:	2010      	movs	r0, #16
 8001132:	f002 fa03 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2011      	movs	r0, #17
 800113c:	f002 f9e4 	bl	8003508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001140:	2011      	movs	r0, #17
 8001142:	f002 f9fb 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	202f      	movs	r0, #47	; 0x2f
 800114c:	f002 f9dc 	bl	8003508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001150:	202f      	movs	r0, #47	; 0x2f
 8001152:	f002 f9f3 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2038      	movs	r0, #56	; 0x38
 800115c:	f002 f9d4 	bl	8003508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001160:	2038      	movs	r0, #56	; 0x38
 8001162:	f002 f9eb 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2039      	movs	r0, #57	; 0x39
 800116c:	f002 f9cc 	bl	8003508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001170:	2039      	movs	r0, #57	; 0x39
 8001172:	f002 f9e3 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	203c      	movs	r0, #60	; 0x3c
 800117c:	f002 f9c4 	bl	8003508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001180:	203c      	movs	r0, #60	; 0x3c
 8001182:	f002 f9db 	bl	800353c <HAL_NVIC_EnableIRQ>

}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	58024400 	.word	0x58024400

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011aa:	4b35      	ldr	r3, [pc, #212]	; (8001280 <MX_GPIO_Init+0xec>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b0:	4a33      	ldr	r2, [pc, #204]	; (8001280 <MX_GPIO_Init+0xec>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ba:	4b31      	ldr	r3, [pc, #196]	; (8001280 <MX_GPIO_Init+0xec>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	61bb      	str	r3, [r7, #24]
 80011c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <MX_GPIO_Init+0xec>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ce:	4a2c      	ldr	r2, [pc, #176]	; (8001280 <MX_GPIO_Init+0xec>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <MX_GPIO_Init+0xec>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MX_GPIO_Init+0xec>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	4a24      	ldr	r2, [pc, #144]	; (8001280 <MX_GPIO_Init+0xec>)
 80011ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_GPIO_Init+0xec>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_GPIO_Init+0xec>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <MX_GPIO_Init+0xec>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_GPIO_Init+0xec>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_GPIO_Init+0xec>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	4a15      	ldr	r2, [pc, #84]	; (8001280 <MX_GPIO_Init+0xec>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_GPIO_Init+0xec>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_GPIO_Init+0xec>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <MX_GPIO_Init+0xec>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_GPIO_Init+0xec>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800125e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_GPIO_Init+0xf0>)
 8001274:	f004 f876 	bl	8005364 <HAL_GPIO_Init>

}
 8001278:	bf00      	nop
 800127a:	3730      	adds	r7, #48	; 0x30
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	58024400 	.word	0x58024400
 8001284:	58020800 	.word	0x58020800

08001288 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001290:	f013 fa14 	bl	80146bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	UsbPrint("asdf");
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <StartDefaultTask+0x1c>)
 8001296:	f7ff f9fb 	bl	8000690 <UsbPrint>
    osDelay(100);
 800129a:	2064      	movs	r0, #100	; 0x64
 800129c:	f00f ff7c 	bl	8011198 <osDelay>
	UsbPrint("asdf");
 80012a0:	e7f8      	b.n	8001294 <StartDefaultTask+0xc>
 80012a2:	bf00      	nop
 80012a4:	08015a50 	.word	0x08015a50

080012a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ba:	f000 ffe7 	bl	800228c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40010000 	.word	0x40010000

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_MspInit+0x30>)
 80012e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012e8:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_MspInit+0x30>)
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_MspInit+0x30>)
 80012f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	58024400 	.word	0x58024400

08001310 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a3d      	ldr	r2, [pc, #244]	; (8001424 <HAL_ADC_MspInit+0x114>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d174      	bne.n	800141c <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <HAL_ADC_MspInit+0x118>)
 8001334:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001338:	4a3b      	ldr	r2, [pc, #236]	; (8001428 <HAL_ADC_MspInit+0x118>)
 800133a:	f043 0320 	orr.w	r3, r3, #32
 800133e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001342:	4b39      	ldr	r3, [pc, #228]	; (8001428 <HAL_ADC_MspInit+0x118>)
 8001344:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001348:	f003 0320 	and.w	r3, r3, #32
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <HAL_ADC_MspInit+0x118>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	4a34      	ldr	r2, [pc, #208]	; (8001428 <HAL_ADC_MspInit+0x118>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001360:	4b31      	ldr	r3, [pc, #196]	; (8001428 <HAL_ADC_MspInit+0x118>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <HAL_ADC_MspInit+0x118>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	4a2c      	ldr	r2, [pc, #176]	; (8001428 <HAL_ADC_MspInit+0x118>)
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_ADC_MspInit+0x118>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_INP10
    PC1     ------> ADC1_INP11
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = VSENS3V3_Pin|VSENSBAT_Pin|CURRBAT1_Pin;
 800138c:	2323      	movs	r3, #35	; 0x23
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001390:	2303      	movs	r3, #3
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4823      	ldr	r0, [pc, #140]	; (800142c <HAL_ADC_MspInit+0x11c>)
 80013a0:	f003 ffe0 	bl	8005364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRBAT2_Pin;
 80013a4:	2301      	movs	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a8:	2303      	movs	r3, #3
 80013aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	481e      	ldr	r0, [pc, #120]	; (8001430 <HAL_ADC_MspInit+0x120>)
 80013b8:	f003 ffd4 	bl	8005364 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <HAL_ADC_MspInit+0x124>)
 80013be:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <HAL_ADC_MspInit+0x128>)
 80013c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_ADC_MspInit+0x124>)
 80013c4:	2209      	movs	r2, #9
 80013c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_ADC_MspInit+0x124>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_ADC_MspInit+0x124>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <HAL_ADC_MspInit+0x124>)
 80013d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_ADC_MspInit+0x124>)
 80013de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_ADC_MspInit+0x124>)
 80013e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_ADC_MspInit+0x124>)
 80013ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_ADC_MspInit+0x124>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_ADC_MspInit+0x124>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <HAL_ADC_MspInit+0x124>)
 8001402:	f002 f8a9 	bl	8003558 <HAL_DMA_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 800140c:	f7ff ff5e 	bl	80012cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_ADC_MspInit+0x124>)
 8001414:	64da      	str	r2, [r3, #76]	; 0x4c
 8001416:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_ADC_MspInit+0x124>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40022000 	.word	0x40022000
 8001428:	58024400 	.word	0x58024400
 800142c:	58020800 	.word	0x58020800
 8001430:	58020400 	.word	0x58020400
 8001434:	2400f1c0 	.word	0x2400f1c0
 8001438:	40020470 	.word	0x40020470

0800143c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <HAL_SD_MspInit+0xd8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d155      	bne.n	800150a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800145e:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <HAL_SD_MspInit+0xdc>)
 8001460:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001464:	4a2c      	ldr	r2, [pc, #176]	; (8001518 <HAL_SD_MspInit+0xdc>)
 8001466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <HAL_SD_MspInit+0xdc>)
 8001470:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_SD_MspInit+0xdc>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	4a25      	ldr	r2, [pc, #148]	; (8001518 <HAL_SD_MspInit+0xdc>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_SD_MspInit+0xdc>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <HAL_SD_MspInit+0xdc>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <HAL_SD_MspInit+0xdc>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_SD_MspInit+0xdc>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014ca:	230c      	movs	r3, #12
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4811      	ldr	r0, [pc, #68]	; (800151c <HAL_SD_MspInit+0xe0>)
 80014d6:	f003 ff45 	bl	8005364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014da:	2304      	movs	r3, #4
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014ea:	230c      	movs	r3, #12
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	480a      	ldr	r0, [pc, #40]	; (8001520 <HAL_SD_MspInit+0xe4>)
 80014f6:	f003 ff35 	bl	8005364 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2031      	movs	r0, #49	; 0x31
 8001500:	f002 f802 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001504:	2031      	movs	r0, #49	; 0x31
 8001506:	f002 f819 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	52007000 	.word	0x52007000
 8001518:	58024400 	.word	0x58024400
 800151c:	58020800 	.word	0x58020800
 8001520:	58020c00 	.word	0x58020c00

08001524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b090      	sub	sp, #64	; 0x40
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a69      	ldr	r2, [pc, #420]	; (80016e8 <HAL_SPI_MspInit+0x1c4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d165      	bne.n	8001612 <HAL_SPI_MspInit+0xee>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001546:	4b69      	ldr	r3, [pc, #420]	; (80016ec <HAL_SPI_MspInit+0x1c8>)
 8001548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800154c:	4a67      	ldr	r2, [pc, #412]	; (80016ec <HAL_SPI_MspInit+0x1c8>)
 800154e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001552:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001556:	4b65      	ldr	r3, [pc, #404]	; (80016ec <HAL_SPI_MspInit+0x1c8>)
 8001558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800155c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
 8001562:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	4b61      	ldr	r3, [pc, #388]	; (80016ec <HAL_SPI_MspInit+0x1c8>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	4a60      	ldr	r2, [pc, #384]	; (80016ec <HAL_SPI_MspInit+0x1c8>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001574:	4b5d      	ldr	r3, [pc, #372]	; (80016ec <HAL_SPI_MspInit+0x1c8>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8001582:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001590:	2301      	movs	r3, #1
 8001592:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001594:	2305      	movs	r3, #5
 8001596:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159c:	4619      	mov	r1, r3
 800159e:	4854      	ldr	r0, [pc, #336]	; (80016f0 <HAL_SPI_MspInit+0x1cc>)
 80015a0:	f003 fee0 	bl	8005364 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80015a4:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015a6:	4a54      	ldr	r2, [pc, #336]	; (80016f8 <HAL_SPI_MspInit+0x1d4>)
 80015a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80015aa:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015ac:	2225      	movs	r2, #37	; 0x25
 80015ae:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b0:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b6:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015bc:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c4:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ca:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80015d0:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015d8:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015de:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80015e4:	4843      	ldr	r0, [pc, #268]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015e6:	f001 ffb7 	bl	8003558 <HAL_DMA_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 80015f0:	f7ff fe6c 	bl	80012cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a3f      	ldr	r2, [pc, #252]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015f8:	67da      	str	r2, [r3, #124]	; 0x7c
 80015fa:	4a3e      	ldr	r2, [pc, #248]	; (80016f4 <HAL_SPI_MspInit+0x1d0>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	2023      	movs	r0, #35	; 0x23
 8001606:	f001 ff7f 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800160a:	2023      	movs	r0, #35	; 0x23
 800160c:	f001 ff96 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001610:	e1ac      	b.n	800196c <HAL_SPI_MspInit+0x448>
  else if(hspi->Instance==SPI2)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a39      	ldr	r2, [pc, #228]	; (80016fc <HAL_SPI_MspInit+0x1d8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d177      	bne.n	800170c <HAL_SPI_MspInit+0x1e8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800161c:	4b33      	ldr	r3, [pc, #204]	; (80016ec <HAL_SPI_MspInit+0x1c8>)
 800161e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001622:	4a32      	ldr	r2, [pc, #200]	; (80016ec <HAL_SPI_MspInit+0x1c8>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800162c:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_SPI_MspInit+0x1c8>)
 800162e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <HAL_SPI_MspInit+0x1c8>)
 800163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001640:	4a2a      	ldr	r2, [pc, #168]	; (80016ec <HAL_SPI_MspInit+0x1c8>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <HAL_SPI_MspInit+0x1c8>)
 800164c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001658:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001666:	2301      	movs	r3, #1
 8001668:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800166a:	2305      	movs	r3, #5
 800166c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001672:	4619      	mov	r1, r3
 8001674:	4822      	ldr	r0, [pc, #136]	; (8001700 <HAL_SPI_MspInit+0x1dc>)
 8001676:	f003 fe75 	bl	8005364 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 800167c:	4a22      	ldr	r2, [pc, #136]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 800167e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 8001682:	2227      	movs	r2, #39	; 0x27
 8001684:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 8001694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001698:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 80016a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ac:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80016ba:	4812      	ldr	r0, [pc, #72]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 80016bc:	f001 ff4c 	bl	8003558 <HAL_DMA_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_SPI_MspInit+0x1a6>
      Error_Handler();
 80016c6:	f7ff fe01 	bl	80012cc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 80016ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80016d0:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2024      	movs	r0, #36	; 0x24
 80016dc:	f001 ff14 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80016e0:	2024      	movs	r0, #36	; 0x24
 80016e2:	f001 ff2b 	bl	800353c <HAL_NVIC_EnableIRQ>
}
 80016e6:	e141      	b.n	800196c <HAL_SPI_MspInit+0x448>
 80016e8:	40013000 	.word	0x40013000
 80016ec:	58024400 	.word	0x58024400
 80016f0:	58020000 	.word	0x58020000
 80016f4:	240194f0 	.word	0x240194f0
 80016f8:	40020010 	.word	0x40020010
 80016fc:	40003800 	.word	0x40003800
 8001700:	58020400 	.word	0x58020400
 8001704:	2400ac24 	.word	0x2400ac24
 8001708:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a98      	ldr	r2, [pc, #608]	; (8001974 <HAL_SPI_MspInit+0x450>)
 8001712:	4293      	cmp	r3, r2
 8001714:	f040 8094 	bne.w	8001840 <HAL_SPI_MspInit+0x31c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001718:	4b97      	ldr	r3, [pc, #604]	; (8001978 <HAL_SPI_MspInit+0x454>)
 800171a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800171e:	4a96      	ldr	r2, [pc, #600]	; (8001978 <HAL_SPI_MspInit+0x454>)
 8001720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001724:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001728:	4b93      	ldr	r3, [pc, #588]	; (8001978 <HAL_SPI_MspInit+0x454>)
 800172a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800172e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b90      	ldr	r3, [pc, #576]	; (8001978 <HAL_SPI_MspInit+0x454>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173c:	4a8e      	ldr	r2, [pc, #568]	; (8001978 <HAL_SPI_MspInit+0x454>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001746:	4b8c      	ldr	r3, [pc, #560]	; (8001978 <HAL_SPI_MspInit+0x454>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	4b88      	ldr	r3, [pc, #544]	; (8001978 <HAL_SPI_MspInit+0x454>)
 8001756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175a:	4a87      	ldr	r2, [pc, #540]	; (8001978 <HAL_SPI_MspInit+0x454>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001764:	4b84      	ldr	r3, [pc, #528]	; (8001978 <HAL_SPI_MspInit+0x454>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001772:	2310      	movs	r3, #16
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800177e:	2301      	movs	r3, #1
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001782:	2306      	movs	r3, #6
 8001784:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178a:	4619      	mov	r1, r3
 800178c:	487b      	ldr	r0, [pc, #492]	; (800197c <HAL_SPI_MspInit+0x458>)
 800178e:	f003 fde9 	bl	8005364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001792:	2304      	movs	r3, #4
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800179e:	2301      	movs	r3, #1
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80017a2:	2307      	movs	r3, #7
 80017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017aa:	4619      	mov	r1, r3
 80017ac:	4874      	ldr	r0, [pc, #464]	; (8001980 <HAL_SPI_MspInit+0x45c>)
 80017ae:	f003 fdd9 	bl	8005364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017b2:	2308      	movs	r3, #8
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017be:	2301      	movs	r3, #1
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017c2:	2306      	movs	r3, #6
 80017c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ca:	4619      	mov	r1, r3
 80017cc:	486c      	ldr	r0, [pc, #432]	; (8001980 <HAL_SPI_MspInit+0x45c>)
 80017ce:	f003 fdc9 	bl	8005364 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream2;
 80017d2:	4b6c      	ldr	r3, [pc, #432]	; (8001984 <HAL_SPI_MspInit+0x460>)
 80017d4:	4a6c      	ldr	r2, [pc, #432]	; (8001988 <HAL_SPI_MspInit+0x464>)
 80017d6:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80017d8:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <HAL_SPI_MspInit+0x460>)
 80017da:	223d      	movs	r2, #61	; 0x3d
 80017dc:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017de:	4b69      	ldr	r3, [pc, #420]	; (8001984 <HAL_SPI_MspInit+0x460>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e4:	4b67      	ldr	r3, [pc, #412]	; (8001984 <HAL_SPI_MspInit+0x460>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ea:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_SPI_MspInit+0x460>)
 80017ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f0:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017f2:	4b64      	ldr	r3, [pc, #400]	; (8001984 <HAL_SPI_MspInit+0x460>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f8:	4b62      	ldr	r3, [pc, #392]	; (8001984 <HAL_SPI_MspInit+0x460>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80017fe:	4b61      	ldr	r3, [pc, #388]	; (8001984 <HAL_SPI_MspInit+0x460>)
 8001800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001804:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001806:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <HAL_SPI_MspInit+0x460>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800180c:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <HAL_SPI_MspInit+0x460>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001812:	485c      	ldr	r0, [pc, #368]	; (8001984 <HAL_SPI_MspInit+0x460>)
 8001814:	f001 fea0 	bl	8003558 <HAL_DMA_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_SPI_MspInit+0x2fe>
      Error_Handler();
 800181e:	f7ff fd55 	bl	80012cc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a57      	ldr	r2, [pc, #348]	; (8001984 <HAL_SPI_MspInit+0x460>)
 8001826:	67da      	str	r2, [r3, #124]	; 0x7c
 8001828:	4a56      	ldr	r2, [pc, #344]	; (8001984 <HAL_SPI_MspInit+0x460>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2033      	movs	r0, #51	; 0x33
 8001834:	f001 fe68 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001838:	2033      	movs	r0, #51	; 0x33
 800183a:	f001 fe7f 	bl	800353c <HAL_NVIC_EnableIRQ>
}
 800183e:	e095      	b.n	800196c <HAL_SPI_MspInit+0x448>
  else if(hspi->Instance==SPI4)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a51      	ldr	r2, [pc, #324]	; (800198c <HAL_SPI_MspInit+0x468>)
 8001846:	4293      	cmp	r3, r2
 8001848:	f040 8090 	bne.w	800196c <HAL_SPI_MspInit+0x448>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800184c:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <HAL_SPI_MspInit+0x454>)
 800184e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001852:	4a49      	ldr	r2, [pc, #292]	; (8001978 <HAL_SPI_MspInit+0x454>)
 8001854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001858:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800185c:	4b46      	ldr	r3, [pc, #280]	; (8001978 <HAL_SPI_MspInit+0x454>)
 800185e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_SPI_MspInit+0x454>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	4a41      	ldr	r2, [pc, #260]	; (8001978 <HAL_SPI_MspInit+0x454>)
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187a:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_SPI_MspInit+0x454>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001888:	2374      	movs	r3, #116	; 0x74
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001898:	2305      	movs	r3, #5
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800189c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a0:	4619      	mov	r1, r3
 80018a2:	483b      	ldr	r0, [pc, #236]	; (8001990 <HAL_SPI_MspInit+0x46c>)
 80018a4:	f003 fd5e 	bl	8005364 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80018a8:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018aa:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <HAL_SPI_MspInit+0x474>)
 80018ac:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80018ae:	4b39      	ldr	r3, [pc, #228]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018b0:	2253      	movs	r2, #83	; 0x53
 80018b2:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b4:	4b37      	ldr	r3, [pc, #220]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ba:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c0:	4b34      	ldr	r3, [pc, #208]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c6:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80018d4:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e0:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80018e6:	482b      	ldr	r0, [pc, #172]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018e8:	f001 fe36 	bl	8003558 <HAL_DMA_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_SPI_MspInit+0x3d2>
      Error_Handler();
 80018f2:	f7ff fceb 	bl	80012cc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a26      	ldr	r2, [pc, #152]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018fa:	67da      	str	r2, [r3, #124]	; 0x7c
 80018fc:	4a25      	ldr	r2, [pc, #148]	; (8001994 <HAL_SPI_MspInit+0x470>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001902:	4b26      	ldr	r3, [pc, #152]	; (800199c <HAL_SPI_MspInit+0x478>)
 8001904:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <HAL_SPI_MspInit+0x47c>)
 8001906:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_SPI_MspInit+0x478>)
 800190a:	2254      	movs	r2, #84	; 0x54
 800190c:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_SPI_MspInit+0x478>)
 8001910:	2240      	movs	r2, #64	; 0x40
 8001912:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_SPI_MspInit+0x478>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_SPI_MspInit+0x478>)
 800191c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001920:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_SPI_MspInit+0x478>)
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <HAL_SPI_MspInit+0x478>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_SPI_MspInit+0x478>)
 8001930:	2200      	movs	r2, #0
 8001932:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_SPI_MspInit+0x478>)
 8001936:	2200      	movs	r2, #0
 8001938:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_SPI_MspInit+0x478>)
 800193c:	2200      	movs	r2, #0
 800193e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001940:	4816      	ldr	r0, [pc, #88]	; (800199c <HAL_SPI_MspInit+0x478>)
 8001942:	f001 fe09 	bl	8003558 <HAL_DMA_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_SPI_MspInit+0x42c>
      Error_Handler();
 800194c:	f7ff fcbe 	bl	80012cc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <HAL_SPI_MspInit+0x478>)
 8001954:	679a      	str	r2, [r3, #120]	; 0x78
 8001956:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_SPI_MspInit+0x478>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2054      	movs	r0, #84	; 0x54
 8001962:	f001 fdd1 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001966:	2054      	movs	r0, #84	; 0x54
 8001968:	f001 fde8 	bl	800353c <HAL_NVIC_EnableIRQ>
}
 800196c:	bf00      	nop
 800196e:	3740      	adds	r7, #64	; 0x40
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40003c00 	.word	0x40003c00
 8001978:	58024400 	.word	0x58024400
 800197c:	58020000 	.word	0x58020000
 8001980:	58020400 	.word	0x58020400
 8001984:	2401b5c8 	.word	0x2401b5c8
 8001988:	40020040 	.word	0x40020040
 800198c:	40013400 	.word	0x40013400
 8001990:	58021000 	.word	0x58021000
 8001994:	2400ad78 	.word	0x2400ad78
 8001998:	40020410 	.word	0x40020410
 800199c:	2400f0c0 	.word	0x2400f0c0
 80019a0:	40020428 	.word	0x40020428

080019a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b092      	sub	sp, #72	; 0x48
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a91      	ldr	r2, [pc, #580]	; (8001c08 <HAL_UART_MspInit+0x264>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d15b      	bne.n	8001a7e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019c6:	4b91      	ldr	r3, [pc, #580]	; (8001c0c <HAL_UART_MspInit+0x268>)
 80019c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019cc:	4a8f      	ldr	r2, [pc, #572]	; (8001c0c <HAL_UART_MspInit+0x268>)
 80019ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019d6:	4b8d      	ldr	r3, [pc, #564]	; (8001c0c <HAL_UART_MspInit+0x268>)
 80019d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
 80019e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b89      	ldr	r3, [pc, #548]	; (8001c0c <HAL_UART_MspInit+0x268>)
 80019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ea:	4a88      	ldr	r2, [pc, #544]	; (8001c0c <HAL_UART_MspInit+0x268>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f4:	4b85      	ldr	r3, [pc, #532]	; (8001c0c <HAL_UART_MspInit+0x268>)
 80019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a02:	2303      	movs	r3, #3
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a12:	2308      	movs	r3, #8
 8001a14:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	487c      	ldr	r0, [pc, #496]	; (8001c10 <HAL_UART_MspInit+0x26c>)
 8001a1e:	f003 fca1 	bl	8005364 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8001a22:	4b7c      	ldr	r3, [pc, #496]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a24:	4a7c      	ldr	r2, [pc, #496]	; (8001c18 <HAL_UART_MspInit+0x274>)
 8001a26:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001a28:	4b7a      	ldr	r3, [pc, #488]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a2a:	223f      	movs	r2, #63	; 0x3f
 8001a2c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2e:	4b79      	ldr	r3, [pc, #484]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a34:	4b77      	ldr	r3, [pc, #476]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3a:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a40:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a42:	4b74      	ldr	r3, [pc, #464]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a48:	4b72      	ldr	r3, [pc, #456]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001a4e:	4b71      	ldr	r3, [pc, #452]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a54:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5a:	4b6e      	ldr	r3, [pc, #440]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001a60:	486c      	ldr	r0, [pc, #432]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a62:	f001 fd79 	bl	8003558 <HAL_DMA_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001a6c:	f7ff fc2e 	bl	80012cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a68      	ldr	r2, [pc, #416]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a74:	679a      	str	r2, [r3, #120]	; 0x78
 8001a76:	4a67      	ldr	r2, [pc, #412]	; (8001c14 <HAL_UART_MspInit+0x270>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a7c:	e19e      	b.n	8001dbc <HAL_UART_MspInit+0x418>
  else if(huart->Instance==UART7)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a66      	ldr	r2, [pc, #408]	; (8001c1c <HAL_UART_MspInit+0x278>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d15c      	bne.n	8001b42 <HAL_UART_MspInit+0x19e>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001a88:	4b60      	ldr	r3, [pc, #384]	; (8001c0c <HAL_UART_MspInit+0x268>)
 8001a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a8e:	4a5f      	ldr	r2, [pc, #380]	; (8001c0c <HAL_UART_MspInit+0x268>)
 8001a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a98:	4b5c      	ldr	r3, [pc, #368]	; (8001c0c <HAL_UART_MspInit+0x268>)
 8001a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aa6:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <HAL_UART_MspInit+0x268>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	4a57      	ldr	r2, [pc, #348]	; (8001c0c <HAL_UART_MspInit+0x268>)
 8001aae:	f043 0310 	orr.w	r3, r3, #16
 8001ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab6:	4b55      	ldr	r3, [pc, #340]	; (8001c0c <HAL_UART_MspInit+0x268>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001ac4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ada:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ade:	4619      	mov	r1, r3
 8001ae0:	484f      	ldr	r0, [pc, #316]	; (8001c20 <HAL_UART_MspInit+0x27c>)
 8001ae2:	f003 fc3f 	bl	8005364 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream4;
 8001ae6:	4b4f      	ldr	r3, [pc, #316]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001ae8:	4a4f      	ldr	r2, [pc, #316]	; (8001c28 <HAL_UART_MspInit+0x284>)
 8001aea:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001aec:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001aee:	224f      	movs	r2, #79	; 0x4f
 8001af0:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af2:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001afe:	4b49      	ldr	r3, [pc, #292]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b04:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b0c:	4b45      	ldr	r3, [pc, #276]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001b12:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b18:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001b24:	483f      	ldr	r0, [pc, #252]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001b26:	f001 fd17 	bl	8003558 <HAL_DMA_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8001b30:	f7ff fbcc 	bl	80012cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a3b      	ldr	r2, [pc, #236]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001b38:	679a      	str	r2, [r3, #120]	; 0x78
 8001b3a:	4a3a      	ldr	r2, [pc, #232]	; (8001c24 <HAL_UART_MspInit+0x280>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b40:	e13c      	b.n	8001dbc <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a39      	ldr	r2, [pc, #228]	; (8001c2c <HAL_UART_MspInit+0x288>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d175      	bne.n	8001c38 <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b4c:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_UART_MspInit+0x268>)
 8001b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b52:	4a2e      	ldr	r2, [pc, #184]	; (8001c0c <HAL_UART_MspInit+0x268>)
 8001b54:	f043 0310 	orr.w	r3, r3, #16
 8001b58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_UART_MspInit+0x268>)
 8001b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	623b      	str	r3, [r7, #32]
 8001b68:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <HAL_UART_MspInit+0x268>)
 8001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_UART_MspInit+0x268>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_UART_MspInit+0x268>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	481a      	ldr	r0, [pc, #104]	; (8001c10 <HAL_UART_MspInit+0x26c>)
 8001ba6:	f003 fbdd 	bl	8005364 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream5;
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001bac:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_UART_MspInit+0x290>)
 8001bae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001bb2:	2229      	movs	r2, #41	; 0x29
 8001bb4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001be8:	4811      	ldr	r0, [pc, #68]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001bea:	f001 fcb5 	bl	8003558 <HAL_DMA_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0x254>
      Error_Handler();
 8001bf4:	f7ff fb6a 	bl	80012cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001bfc:	679a      	str	r2, [r3, #120]	; 0x78
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <HAL_UART_MspInit+0x28c>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c04:	e0da      	b.n	8001dbc <HAL_UART_MspInit+0x418>
 8001c06:	bf00      	nop
 8001c08:	40004c00 	.word	0x40004c00
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	58020000 	.word	0x58020000
 8001c14:	24008800 	.word	0x24008800
 8001c18:	40020058 	.word	0x40020058
 8001c1c:	40007800 	.word	0x40007800
 8001c20:	58021000 	.word	0x58021000
 8001c24:	2400cee0 	.word	0x2400cee0
 8001c28:	40020070 	.word	0x40020070
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	2400cf60 	.word	0x2400cf60
 8001c34:	40020088 	.word	0x40020088
  else if(huart->Instance==USART2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a61      	ldr	r2, [pc, #388]	; (8001dc4 <HAL_UART_MspInit+0x420>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d15b      	bne.n	8001cfa <HAL_UART_MspInit+0x356>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c42:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_UART_MspInit+0x424>)
 8001c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c48:	4a5f      	ldr	r2, [pc, #380]	; (8001dc8 <HAL_UART_MspInit+0x424>)
 8001c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_UART_MspInit+0x424>)
 8001c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_UART_MspInit+0x424>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c66:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <HAL_UART_MspInit+0x424>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c70:	4b55      	ldr	r3, [pc, #340]	; (8001dc8 <HAL_UART_MspInit+0x424>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c7e:	230c      	movs	r3, #12
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c8e:	2307      	movs	r3, #7
 8001c90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c96:	4619      	mov	r1, r3
 8001c98:	484c      	ldr	r0, [pc, #304]	; (8001dcc <HAL_UART_MspInit+0x428>)
 8001c9a:	f003 fb63 	bl	8005364 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream6;
 8001c9e:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001ca0:	4a4c      	ldr	r2, [pc, #304]	; (8001dd4 <HAL_UART_MspInit+0x430>)
 8001ca2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001ca4:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001ca6:	222b      	movs	r2, #43	; 0x2b
 8001ca8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001caa:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb0:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb6:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cbe:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc4:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001cca:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cd0:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001cdc:	483c      	ldr	r0, [pc, #240]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001cde:	f001 fc3b 	bl	8003558 <HAL_DMA_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_UART_MspInit+0x348>
      Error_Handler();
 8001ce8:	f7ff faf0 	bl	80012cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a38      	ldr	r2, [pc, #224]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001cf0:	679a      	str	r2, [r3, #120]	; 0x78
 8001cf2:	4a37      	ldr	r2, [pc, #220]	; (8001dd0 <HAL_UART_MspInit+0x42c>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001cf8:	e060      	b.n	8001dbc <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART3)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a36      	ldr	r2, [pc, #216]	; (8001dd8 <HAL_UART_MspInit+0x434>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d15b      	bne.n	8001dbc <HAL_UART_MspInit+0x418>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d04:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_UART_MspInit+0x424>)
 8001d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d0a:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <HAL_UART_MspInit+0x424>)
 8001d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d14:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <HAL_UART_MspInit+0x424>)
 8001d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d22:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_UART_MspInit+0x424>)
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d28:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <HAL_UART_MspInit+0x424>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d32:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_UART_MspInit+0x424>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d52:	2307      	movs	r3, #7
 8001d54:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	481f      	ldr	r0, [pc, #124]	; (8001ddc <HAL_UART_MspInit+0x438>)
 8001d5e:	f003 fb01 	bl	8005364 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001d64:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_UART_MspInit+0x440>)
 8001d66:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001d6a:	222d      	movs	r2, #45	; 0x2d
 8001d6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d80:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001da0:	480f      	ldr	r0, [pc, #60]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001da2:	f001 fbd9 	bl	8003558 <HAL_DMA_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 8001dac:	f7ff fa8e 	bl	80012cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001db4:	679a      	str	r2, [r3, #120]	; 0x78
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_UART_MspInit+0x43c>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001dbc:	bf00      	nop
 8001dbe:	3748      	adds	r7, #72	; 0x48
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40004400 	.word	0x40004400
 8001dc8:	58024400 	.word	0x58024400
 8001dcc:	58020000 	.word	0x58020000
 8001dd0:	2400887c 	.word	0x2400887c
 8001dd4:	400200a0 	.word	0x400200a0
 8001dd8:	40004800 	.word	0x40004800
 8001ddc:	58020c00 	.word	0x58020c00
 8001de0:	24008a08 	.word	0x24008a08
 8001de4:	400200b8 	.word	0x400200b8

08001de8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08e      	sub	sp, #56	; 0x38
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	2019      	movs	r0, #25
 8001dfe:	f001 fb83 	bl	8003508 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e02:	2019      	movs	r0, #25
 8001e04:	f001 fb9a 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <HAL_InitTick+0xa8>)
 8001e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e0e:	4a20      	ldr	r2, [pc, #128]	; (8001e90 <HAL_InitTick+0xa8>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_InitTick+0xa8>)
 8001e1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e26:	f107 020c 	add.w	r2, r7, #12
 8001e2a:	f107 0310 	add.w	r3, r7, #16
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f005 fe19 	bl	8007a68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001e36:	f005 fe01 	bl	8007a3c <HAL_RCC_GetPCLK2Freq>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e42:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <HAL_InitTick+0xac>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	0c9b      	lsrs	r3, r3, #18
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0xb0>)
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <HAL_InitTick+0xb4>)
 8001e52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_InitTick+0xb0>)
 8001e56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e5a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <HAL_InitTick+0xb0>)
 8001e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e60:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_InitTick+0xb0>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_InitTick+0xb0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e6e:	480a      	ldr	r0, [pc, #40]	; (8001e98 <HAL_InitTick+0xb0>)
 8001e70:	f009 fd43 	bl	800b8fa <HAL_TIM_Base_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d104      	bne.n	8001e84 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e7a:	4807      	ldr	r0, [pc, #28]	; (8001e98 <HAL_InitTick+0xb0>)
 8001e7c:	f009 fd9e 	bl	800b9bc <HAL_TIM_Base_Start_IT>
 8001e80:	4603      	mov	r3, r0
 8001e82:	e000      	b.n	8001e86 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3738      	adds	r7, #56	; 0x38
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	58024400 	.word	0x58024400
 8001e94:	431bde83 	.word	0x431bde83
 8001e98:	2401b648 	.word	0x2401b648
 8001e9c:	40010000 	.word	0x40010000

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <HardFault_Handler+0x4>

08001eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <MemManage_Handler+0x4>

08001eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <DMA1_Stream0_IRQHandler+0x10>)
 8001eda:	f002 f8dd 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	240194f0 	.word	0x240194f0

08001ee8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <DMA1_Stream1_IRQHandler+0x10>)
 8001eee:	f002 f8d3 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2400ac24 	.word	0x2400ac24

08001efc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <DMA1_Stream2_IRQHandler+0x10>)
 8001f02:	f002 f8c9 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2401b5c8 	.word	0x2401b5c8

08001f10 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <DMA1_Stream3_IRQHandler+0x10>)
 8001f16:	f002 f8bf 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	24008800 	.word	0x24008800

08001f24 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <DMA1_Stream4_IRQHandler+0x10>)
 8001f2a:	f002 f8b5 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2400cee0 	.word	0x2400cee0

08001f38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <DMA1_Stream5_IRQHandler+0x10>)
 8001f3e:	f002 f8ab 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	2400cf60 	.word	0x2400cf60

08001f4c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <DMA1_Stream6_IRQHandler+0x10>)
 8001f52:	f002 f8a1 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2400887c 	.word	0x2400887c

08001f60 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <TIM1_UP_IRQHandler+0x10>)
 8001f66:	f009 fd5f 	bl	800ba28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2401b648 	.word	0x2401b648

08001f74 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <SPI1_IRQHandler+0x10>)
 8001f7a:	f009 f9df 	bl	800b33c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	24017380 	.word	0x24017380

08001f88 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <SPI2_IRQHandler+0x10>)
 8001f8e:	f009 f9d5 	bl	800b33c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	240088f4 	.word	0x240088f4

08001f9c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <DMA1_Stream7_IRQHandler+0x10>)
 8001fa2:	f002 f879 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	24008a08 	.word	0x24008a08

08001fb0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <SDMMC1_IRQHandler+0x10>)
 8001fb6:	f007 fed1 	bl	8009d5c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2400ac9c 	.word	0x2400ac9c

08001fc4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <SPI3_IRQHandler+0x10>)
 8001fca:	f009 f9b7 	bl	800b33c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2400cdf4 	.word	0x2400cdf4

08001fd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <DMA2_Stream0_IRQHandler+0x10>)
 8001fde:	f002 f85b 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2400ad78 	.word	0x2400ad78

08001fec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <DMA2_Stream1_IRQHandler+0x10>)
 8001ff2:	f002 f851 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2400f0c0 	.word	0x2400f0c0

08002000 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <DMA2_Stream4_IRQHandler+0x10>)
 8002006:	f002 f847 	bl	8004098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2400f1c0 	.word	0x2400f1c0

08002014 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <SPI4_IRQHandler+0x10>)
 800201a:	f009 f98f 	bl	800b33c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2400f138 	.word	0x2400f138

08002028 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <OTG_FS_IRQHandler+0x10>)
 800202e:	f003 fcb8 	bl	80059a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2401d014 	.word	0x2401d014

0800203c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <_sbrk+0x5c>)
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <_sbrk+0x60>)
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <_sbrk+0x64>)
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <_sbrk+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	429a      	cmp	r2, r3
 800206a:	d207      	bcs.n	800207c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800206c:	f013 f82a 	bl	80150c4 <__errno>
 8002070:	4602      	mov	r2, r0
 8002072:	230c      	movs	r3, #12
 8002074:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	e009      	b.n	8002090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <_sbrk+0x64>)
 800208c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	24080000 	.word	0x24080000
 800209c:	00000800 	.word	0x00000800
 80020a0:	24000208 	.word	0x24000208
 80020a4:	2401d420 	.word	0x2401d420

080020a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020ac:	4b39      	ldr	r3, [pc, #228]	; (8002194 <SystemInit+0xec>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	4a38      	ldr	r2, [pc, #224]	; (8002194 <SystemInit+0xec>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <SystemInit+0xf0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d807      	bhi.n	80020d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020c8:	4b33      	ldr	r3, [pc, #204]	; (8002198 <SystemInit+0xf0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 030f 	bic.w	r3, r3, #15
 80020d0:	4a31      	ldr	r2, [pc, #196]	; (8002198 <SystemInit+0xf0>)
 80020d2:	f043 0307 	orr.w	r3, r3, #7
 80020d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020d8:	4b30      	ldr	r3, [pc, #192]	; (800219c <SystemInit+0xf4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a2f      	ldr	r2, [pc, #188]	; (800219c <SystemInit+0xf4>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <SystemInit+0xf4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020ea:	4b2c      	ldr	r3, [pc, #176]	; (800219c <SystemInit+0xf4>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	492b      	ldr	r1, [pc, #172]	; (800219c <SystemInit+0xf4>)
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <SystemInit+0xf8>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <SystemInit+0xf0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	2b07      	cmp	r3, #7
 8002100:	d907      	bls.n	8002112 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <SystemInit+0xf0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 030f 	bic.w	r3, r3, #15
 800210a:	4a23      	ldr	r2, [pc, #140]	; (8002198 <SystemInit+0xf0>)
 800210c:	f043 0307 	orr.w	r3, r3, #7
 8002110:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <SystemInit+0xf4>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <SystemInit+0xf4>)
 800211a:	2200      	movs	r2, #0
 800211c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800211e:	4b1f      	ldr	r3, [pc, #124]	; (800219c <SystemInit+0xf4>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <SystemInit+0xf4>)
 8002126:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <SystemInit+0xfc>)
 8002128:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <SystemInit+0xf4>)
 800212c:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <SystemInit+0x100>)
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <SystemInit+0xf4>)
 8002132:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <SystemInit+0x104>)
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <SystemInit+0xf4>)
 8002138:	2200      	movs	r2, #0
 800213a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <SystemInit+0xf4>)
 800213e:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <SystemInit+0x104>)
 8002140:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <SystemInit+0xf4>)
 8002144:	2200      	movs	r2, #0
 8002146:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <SystemInit+0xf4>)
 800214a:	4a18      	ldr	r2, [pc, #96]	; (80021ac <SystemInit+0x104>)
 800214c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <SystemInit+0xf4>)
 8002150:	2200      	movs	r2, #0
 8002152:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <SystemInit+0xf4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a10      	ldr	r2, [pc, #64]	; (800219c <SystemInit+0xf4>)
 800215a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <SystemInit+0xf4>)
 8002162:	2200      	movs	r2, #0
 8002164:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <SystemInit+0x108>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <SystemInit+0x10c>)
 800216c:	4013      	ands	r3, r2
 800216e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002172:	d202      	bcs.n	800217a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002174:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <SystemInit+0x110>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <SystemInit+0x114>)
 800217c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002180:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <SystemInit+0xec>)
 8002184:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002188:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00
 8002198:	52002000 	.word	0x52002000
 800219c:	58024400 	.word	0x58024400
 80021a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80021a4:	02020200 	.word	0x02020200
 80021a8:	01ff0000 	.word	0x01ff0000
 80021ac:	01010280 	.word	0x01010280
 80021b0:	5c001000 	.word	0x5c001000
 80021b4:	ffff0000 	.word	0xffff0000
 80021b8:	51008108 	.word	0x51008108
 80021bc:	52004000 	.word	0x52004000

080021c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021c4:	f7ff ff70 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021ca:	e003      	b.n	80021d4 <LoopCopyDataInit>

080021cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80021ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021d2:	3104      	adds	r1, #4

080021d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021d4:	480a      	ldr	r0, [pc, #40]	; (8002200 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80021d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021dc:	d3f6      	bcc.n	80021cc <CopyDataInit>
  ldr  r2, =_sbss
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80021e0:	e002      	b.n	80021e8 <LoopFillZerobss>

080021e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021e4:	f842 3b04 	str.w	r3, [r2], #4

080021e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80021ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021ec:	d3f9      	bcc.n	80021e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ee:	f012 ff6f 	bl	80150d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f2:	f7fe fa81 	bl	80006f8 <main>
  bx  lr    
 80021f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80021fc:	08015b64 	.word	0x08015b64
  ldr  r0, =_sdata
 8002200:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002204:	240001ec 	.word	0x240001ec
  ldr  r2, =_sbss
 8002208:	240001ec 	.word	0x240001ec
  ldr  r3, = _ebss
 800220c:	2401d420 	.word	0x2401d420

08002210 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC3_IRQHandler>
	...

08002214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221a:	2003      	movs	r0, #3
 800221c:	f001 f969 	bl	80034f2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002220:	f005 fa54 	bl	80076cc <HAL_RCC_GetSysClockFreq>
 8002224:	4601      	mov	r1, r0
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_Init+0x68>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	4a13      	ldr	r2, [pc, #76]	; (8002280 <HAL_Init+0x6c>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa21 f303 	lsr.w	r3, r1, r3
 800223c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_Init+0x68>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <HAL_Init+0x6c>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_Init+0x70>)
 8002256:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <HAL_Init+0x74>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800225e:	2000      	movs	r0, #0
 8002260:	f7ff fdc2 	bl	8001de8 <HAL_InitTick>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e002      	b.n	8002274 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800226e:	f7ff f835 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	58024400 	.word	0x58024400
 8002280:	08015adc 	.word	0x08015adc
 8002284:	24000004 	.word	0x24000004
 8002288:	24000000 	.word	0x24000000

0800228c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_IncTick+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x24>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4413      	add	r3, r2
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <HAL_IncTick+0x24>)
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	2400000c 	.word	0x2400000c
 80022b0:	2401b694 	.word	0x2401b694

080022b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <HAL_GetTick+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	2401b694 	.word	0x2401b694

080022cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff ffee 	bl	80022b4 <HAL_GetTick>
 80022d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d005      	beq.n	80022f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_Delay+0x40>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022f2:	bf00      	nop
 80022f4:	f7ff ffde 	bl	80022b4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	429a      	cmp	r2, r3
 8002302:	d8f7      	bhi.n	80022f4 <HAL_Delay+0x28>
  {
  }
}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	2400000c 	.word	0x2400000c

08002310 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_GetREVID+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0c1b      	lsrs	r3, r3, #16
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	5c001000 	.word	0x5c001000

08002328 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	609a      	str	r2, [r3, #8]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3360      	adds	r3, #96	; 0x60
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	430b      	orrs	r3, r1
 80023be:	431a      	orrs	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80023c4:	bf00      	nop
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	431a      	orrs	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	611a      	str	r2, [r3, #16]
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002402:	b480      	push	{r7}
 8002404:	b087      	sub	sp, #28
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3360      	adds	r3, #96	; 0x60
 8002412:	461a      	mov	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	431a      	orrs	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	601a      	str	r2, [r3, #0]
  }
}
 800242c:	bf00      	nop
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3330      	adds	r3, #48	; 0x30
 8002448:	461a      	mov	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	4413      	add	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	211f      	movs	r1, #31
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	f003 011f 	and.w	r1, r3, #31
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	431a      	orrs	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002484:	bf00      	nop
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3314      	adds	r3, #20
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	0e5b      	lsrs	r3, r3, #25
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	4413      	add	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	0d1b      	lsrs	r3, r3, #20
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	2107      	movs	r1, #7
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	401a      	ands	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	0d1b      	lsrs	r3, r3, #20
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	431a      	orrs	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002500:	43db      	mvns	r3, r3
 8002502:	401a      	ands	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0318 	and.w	r3, r3, #24
 800250a:	4908      	ldr	r1, [pc, #32]	; (800252c <LL_ADC_SetChannelSingleDiff+0x44>)
 800250c:	40d9      	lsrs	r1, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	400b      	ands	r3, r1
 8002512:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002516:	431a      	orrs	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	000fffff 	.word	0x000fffff

08002530 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <LL_ADC_DisableDeepPowerDown+0x20>)
 800253e:	4013      	ands	r3, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6093      	str	r3, [r2, #8]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	5fffffc0 	.word	0x5fffffc0

08002554 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002568:	d101      	bne.n	800256e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800258a:	4013      	ands	r3, r2
 800258c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	6fffffc0 	.word	0x6fffffc0

080025a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025b8:	d101      	bne.n	80025be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <LL_ADC_IsEnabled+0x18>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <LL_ADC_IsEnabled+0x1a>
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b04      	cmp	r3, #4
 8002604:	d101      	bne.n	800260a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b08      	cmp	r3, #8
 800262a:	d101      	bne.n	8002630 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e18e      	b.n	8002978 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7fe fe51 	bl	8001310 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff67 	bl	8002554 <LL_ADC_IsDeepPowerDownEnabled>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff4d 	bl	8002530 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff82 	bl	80025a4 <LL_ADC_IsInternalRegulatorEnabled>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d113      	bne.n	80026ce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff66 	bl	800257c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80026b0:	4b9a      	ldr	r3, [pc, #616]	; (800291c <HAL_ADC_Init+0x2dc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	4a9a      	ldr	r2, [pc, #616]	; (8002920 <HAL_ADC_Init+0x2e0>)
 80026b8:	fba2 2303 	umull	r2, r3, r2, r3
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026c0:	e002      	b.n	80026c8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f9      	bne.n	80026c2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff66 	bl	80025a4 <LL_ADC_IsInternalRegulatorEnabled>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	f043 0210 	orr.w	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ff77 	bl	80025f2 <LL_ADC_REG_IsConversionOngoing>
 8002704:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 8129 	bne.w	8002966 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 8125 	bne.w	8002966 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002720:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002724:	f043 0202 	orr.w	r2, r3, #2
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff4b 	bl	80025cc <LL_ADC_IsEnabled>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d136      	bne.n	80027aa <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a78      	ldr	r2, [pc, #480]	; (8002924 <HAL_ADC_Init+0x2e4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_ADC_Init+0x110>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a77      	ldr	r2, [pc, #476]	; (8002928 <HAL_ADC_Init+0x2e8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d10e      	bne.n	800276e <HAL_ADC_Init+0x12e>
 8002750:	4874      	ldr	r0, [pc, #464]	; (8002924 <HAL_ADC_Init+0x2e4>)
 8002752:	f7ff ff3b 	bl	80025cc <LL_ADC_IsEnabled>
 8002756:	4604      	mov	r4, r0
 8002758:	4873      	ldr	r0, [pc, #460]	; (8002928 <HAL_ADC_Init+0x2e8>)
 800275a:	f7ff ff37 	bl	80025cc <LL_ADC_IsEnabled>
 800275e:	4603      	mov	r3, r0
 8002760:	4323      	orrs	r3, r4
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	e008      	b.n	8002780 <HAL_ADC_Init+0x140>
 800276e:	486f      	ldr	r0, [pc, #444]	; (800292c <HAL_ADC_Init+0x2ec>)
 8002770:	f7ff ff2c 	bl	80025cc <LL_ADC_IsEnabled>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	bf0c      	ite	eq
 800277a:	2301      	moveq	r3, #1
 800277c:	2300      	movne	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d012      	beq.n	80027aa <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a66      	ldr	r2, [pc, #408]	; (8002924 <HAL_ADC_Init+0x2e4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_ADC_Init+0x158>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_ADC_Init+0x2e8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_ADC_Init+0x15c>
 8002798:	4a65      	ldr	r2, [pc, #404]	; (8002930 <HAL_ADC_Init+0x2f0>)
 800279a:	e000      	b.n	800279e <HAL_ADC_Init+0x15e>
 800279c:	4a65      	ldr	r2, [pc, #404]	; (8002934 <HAL_ADC_Init+0x2f4>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4610      	mov	r0, r2
 80027a6:	f7ff fdbf 	bl	8002328 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80027aa:	f7ff fdb1 	bl	8002310 <HAL_GetREVID>
 80027ae:	4602      	mov	r2, r0
 80027b0:	f241 0303 	movw	r3, #4099	; 0x1003
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d914      	bls.n	80027e2 <HAL_ADC_Init+0x1a2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d110      	bne.n	80027e2 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	7d5b      	ldrb	r3, [r3, #21]
 80027c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80027d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7f1b      	ldrb	r3, [r3, #28]
 80027d6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80027d8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027da:	f043 030c 	orr.w	r3, r3, #12
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	e00d      	b.n	80027fe <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7d5b      	ldrb	r3, [r3, #21]
 80027e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027ec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80027f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	7f1b      	ldrb	r3, [r3, #28]
 80027f8:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	7f1b      	ldrb	r3, [r3, #28]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d106      	bne.n	8002814 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	3b01      	subs	r3, #1
 800280c:	045b      	lsls	r3, r3, #17
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	2b00      	cmp	r3, #0
 800281a:	d009      	beq.n	8002830 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	4b40      	ldr	r3, [pc, #256]	; (8002938 <HAL_ADC_Init+0x2f8>)
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	69b9      	ldr	r1, [r7, #24]
 8002840:	430b      	orrs	r3, r1
 8002842:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fed2 	bl	80025f2 <LL_ADC_REG_IsConversionOngoing>
 800284e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fedf 	bl	8002618 <LL_ADC_INJ_IsConversionOngoing>
 800285a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d14a      	bne.n	80028f8 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d147      	bne.n	80028f8 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	7d1b      	ldrb	r3, [r3, #20]
 800286c:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_ADC_Init+0x2fc>)
 800287e:	4013      	ands	r3, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	69b9      	ldr	r1, [r7, #24]
 8002886:	430b      	orrs	r3, r1
 8002888:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002890:	2b01      	cmp	r3, #1
 8002892:	d11b      	bne.n	80028cc <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	4b27      	ldr	r3, [pc, #156]	; (8002940 <HAL_ADC_Init+0x300>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028a8:	3a01      	subs	r2, #1
 80028aa:	0411      	lsls	r1, r2, #16
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028b0:	4311      	orrs	r1, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028b6:	4311      	orrs	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028bc:	430a      	orrs	r2, r1
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	611a      	str	r2, [r3, #16]
 80028ca:	e007      	b.n	80028dc <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fb58 	bl	8002fa8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d121      	bne.n	8002944 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f023 010f 	bic.w	r1, r3, #15
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	1e5a      	subs	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
 8002918:	e01c      	b.n	8002954 <HAL_ADC_Init+0x314>
 800291a:	bf00      	nop
 800291c:	24000000 	.word	0x24000000
 8002920:	053e2d63 	.word	0x053e2d63
 8002924:	40022000 	.word	0x40022000
 8002928:	40022100 	.word	0x40022100
 800292c:	58026000 	.word	0x58026000
 8002930:	40022300 	.word	0x40022300
 8002934:	58026300 	.word	0x58026300
 8002938:	fff0c003 	.word	0xfff0c003
 800293c:	ffffbffc 	.word	0xffffbffc
 8002940:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 020f 	bic.w	r2, r2, #15
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f023 0303 	bic.w	r3, r3, #3
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
 8002964:	e007      	b.n	8002976 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f043 0210 	orr.w	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002976:	7ffb      	ldrb	r3, [r7, #31]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3724      	adds	r7, #36	; 0x24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}

08002980 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b099      	sub	sp, #100	; 0x64
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a99      	ldr	r2, [pc, #612]	; (8002c00 <HAL_ADC_ConfigChannel+0x280>)
 800299a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x2a>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e2e6      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x5f8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fe1b 	bl	80025f2 <LL_ADC_REG_IsConversionOngoing>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 82cb 	bne.w	8002f5a <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d108      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x62>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0e9b      	lsrs	r3, r3, #26
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2201      	movs	r2, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	e00f      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x82>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2201      	movs	r2, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	69d1      	ldr	r1, [r2, #28]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f7ff fd0b 	bl	8002438 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fde3 	bl	80025f2 <LL_ADC_REG_IsConversionOngoing>
 8002a2c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fdf0 	bl	8002618 <LL_ADC_INJ_IsConversionOngoing>
 8002a38:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f040 80b3 	bne.w	8002ba8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f040 80af 	bne.w	8002ba8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f7ff fd1a 	bl	8002490 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a5c:	4b69      	ldr	r3, [pc, #420]	; (8002c04 <HAL_ADC_ConfigChannel+0x284>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002a64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a68:	d10b      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x102>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	e01d      	b.n	8002abe <HAL_ADC_ConfigChannel+0x13e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x128>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	e00a      	b.n	8002abe <HAL_ADC_ConfigChannel+0x13e>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d027      	beq.n	8002b18 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6919      	ldr	r1, [r3, #16]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad6:	f7ff fc5b 	bl	8002390 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6919      	ldr	r1, [r3, #16]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	7e5b      	ldrb	r3, [r3, #25]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d102      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x170>
 8002aea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002aee:	e000      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x172>
 8002af0:	2300      	movs	r3, #0
 8002af2:	461a      	mov	r2, r3
 8002af4:	f7ff fc85 	bl	8002402 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6919      	ldr	r1, [r3, #16]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	7e1b      	ldrb	r3, [r3, #24]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d102      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x18e>
 8002b08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b0c:	e000      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x190>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	461a      	mov	r2, r3
 8002b12:	f7ff fc5d 	bl	80023d0 <LL_ADC_SetDataRightShift>
 8002b16:	e047      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	069b      	lsls	r3, r3, #26
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d107      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b3a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	069b      	lsls	r3, r3, #26
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d107      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b5e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	069b      	lsls	r3, r3, #26
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d107      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b82:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	069b      	lsls	r3, r3, #26
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d107      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ba6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fd0d 	bl	80025cc <LL_ADC_IsEnabled>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 81d9 	bne.w	8002f6c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f7ff fc8e 	bl	80024e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <HAL_ADC_ConfigChannel+0x280>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	f040 8101 	bne.w	8002dda <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10f      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x288>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	0e9b      	lsrs	r3, r3, #26
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2b09      	cmp	r3, #9
 8002bf6:	bf94      	ite	ls
 8002bf8:	2301      	movls	r3, #1
 8002bfa:	2300      	movhi	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e016      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x2ae>
 8002c00:	47ff0000 	.word	0x47ff0000
 8002c04:	5c001000 	.word	0x5c001000
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c18:	fab3 f383 	clz	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	2b09      	cmp	r3, #9
 8002c26:	bf94      	ite	ls
 8002c28:	2301      	movls	r3, #1
 8002c2a:	2300      	movhi	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d064      	beq.n	8002cfc <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x2ce>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	0e9b      	lsrs	r3, r3, #26
 8002c44:	3301      	adds	r3, #1
 8002c46:	069b      	lsls	r3, r3, #26
 8002c48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4c:	e00e      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x2ec>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	069b      	lsls	r3, r3, #26
 8002c68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x30c>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	2101      	movs	r1, #1
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	e010      	b.n	8002cae <HAL_ADC_ConfigChannel+0x32e>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	2101      	movs	r1, #1
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	ea42 0103 	orr.w	r1, r2, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x354>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	0e9b      	lsrs	r3, r3, #26
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f003 021f 	and.w	r2, r3, #31
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	051b      	lsls	r3, r3, #20
 8002cd2:	e011      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x378>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	f003 021f 	and.w	r2, r3, #31
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	e069      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x398>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	3301      	adds	r3, #1
 8002d10:	069b      	lsls	r3, r3, #26
 8002d12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d16:	e00e      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x3b6>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	61fb      	str	r3, [r7, #28]
  return result;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	069b      	lsls	r3, r3, #26
 8002d32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x3d6>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	0e9b      	lsrs	r3, r3, #26
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	e010      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x3f8>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	617b      	str	r3, [r7, #20]
  return result;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	2101      	movs	r1, #1
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	ea42 0103 	orr.w	r1, r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10d      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x424>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	0e9b      	lsrs	r3, r3, #26
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	3b1e      	subs	r3, #30
 8002d9c:	051b      	lsls	r3, r3, #20
 8002d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002da2:	e014      	b.n	8002dce <HAL_ADC_ConfigChannel+0x44e>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	60fb      	str	r3, [r7, #12]
  return result;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3b1e      	subs	r3, #30
 8002dc8:	051b      	lsls	r3, r3, #20
 8002dca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	6892      	ldr	r2, [r2, #8]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f7ff fb5b 	bl	8002490 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f280 80c4 	bge.w	8002f6c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a65      	ldr	r2, [pc, #404]	; (8002f80 <HAL_ADC_ConfigChannel+0x600>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <HAL_ADC_ConfigChannel+0x478>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a64      	ldr	r2, [pc, #400]	; (8002f84 <HAL_ADC_ConfigChannel+0x604>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d101      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x47c>
 8002df8:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_ADC_ConfigChannel+0x608>)
 8002dfa:	e000      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x47e>
 8002dfc:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <HAL_ADC_ConfigChannel+0x60c>)
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fab8 	bl	8002374 <LL_ADC_GetCommonPathInternalCh>
 8002e04:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a5d      	ldr	r2, [pc, #372]	; (8002f80 <HAL_ADC_ConfigChannel+0x600>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_ADC_ConfigChannel+0x49a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a5b      	ldr	r2, [pc, #364]	; (8002f84 <HAL_ADC_ConfigChannel+0x604>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10e      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x4b8>
 8002e1a:	4859      	ldr	r0, [pc, #356]	; (8002f80 <HAL_ADC_ConfigChannel+0x600>)
 8002e1c:	f7ff fbd6 	bl	80025cc <LL_ADC_IsEnabled>
 8002e20:	4604      	mov	r4, r0
 8002e22:	4858      	ldr	r0, [pc, #352]	; (8002f84 <HAL_ADC_ConfigChannel+0x604>)
 8002e24:	f7ff fbd2 	bl	80025cc <LL_ADC_IsEnabled>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	4323      	orrs	r3, r4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e008      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x4ca>
 8002e38:	4855      	ldr	r0, [pc, #340]	; (8002f90 <HAL_ADC_ConfigChannel+0x610>)
 8002e3a:	f7ff fbc7 	bl	80025cc <LL_ADC_IsEnabled>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d07b      	beq.n	8002f46 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a50      	ldr	r2, [pc, #320]	; (8002f94 <HAL_ADC_ConfigChannel+0x614>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d12e      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x536>
 8002e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d129      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a4a      	ldr	r2, [pc, #296]	; (8002f90 <HAL_ADC_ConfigChannel+0x610>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d17f      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a43      	ldr	r2, [pc, #268]	; (8002f80 <HAL_ADC_ConfigChannel+0x600>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0x500>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a42      	ldr	r2, [pc, #264]	; (8002f84 <HAL_ADC_ConfigChannel+0x604>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x504>
 8002e80:	4a41      	ldr	r2, [pc, #260]	; (8002f88 <HAL_ADC_ConfigChannel+0x608>)
 8002e82:	e000      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x506>
 8002e84:	4a41      	ldr	r2, [pc, #260]	; (8002f8c <HAL_ADC_ConfigChannel+0x60c>)
 8002e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7ff fa5d 	bl	800234e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e94:	4b40      	ldr	r3, [pc, #256]	; (8002f98 <HAL_ADC_ConfigChannel+0x618>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	4a40      	ldr	r2, [pc, #256]	; (8002f9c <HAL_ADC_ConfigChannel+0x61c>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	099b      	lsrs	r3, r3, #6
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ea6:	e002      	b.n	8002eae <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f9      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb4:	e05a      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a39      	ldr	r2, [pc, #228]	; (8002fa0 <HAL_ADC_ConfigChannel+0x620>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d11e      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x57e>
 8002ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d119      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a30      	ldr	r2, [pc, #192]	; (8002f90 <HAL_ADC_ConfigChannel+0x610>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d14b      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a29      	ldr	r2, [pc, #164]	; (8002f80 <HAL_ADC_ConfigChannel+0x600>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_ADC_ConfigChannel+0x568>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a28      	ldr	r2, [pc, #160]	; (8002f84 <HAL_ADC_ConfigChannel+0x604>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x56c>
 8002ee8:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <HAL_ADC_ConfigChannel+0x608>)
 8002eea:	e000      	b.n	8002eee <HAL_ADC_ConfigChannel+0x56e>
 8002eec:	4a27      	ldr	r2, [pc, #156]	; (8002f8c <HAL_ADC_ConfigChannel+0x60c>)
 8002eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	f7ff fa29 	bl	800234e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002efc:	e036      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <HAL_ADC_ConfigChannel+0x624>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d131      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x5ec>
 8002f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d12c      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <HAL_ADC_ConfigChannel+0x610>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d127      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <HAL_ADC_ConfigChannel+0x600>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d004      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x5b0>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a16      	ldr	r2, [pc, #88]	; (8002f84 <HAL_ADC_ConfigChannel+0x604>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x5b4>
 8002f30:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <HAL_ADC_ConfigChannel+0x608>)
 8002f32:	e000      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x5b6>
 8002f34:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <HAL_ADC_ConfigChannel+0x60c>)
 8002f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f7ff fa05 	bl	800234e <LL_ADC_SetCommonPathInternalCh>
 8002f44:	e012      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	f043 0220 	orr.w	r2, r3, #32
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002f58:	e008      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	f043 0220 	orr.w	r2, r3, #32
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3764      	adds	r7, #100	; 0x64
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd90      	pop	{r4, r7, pc}
 8002f80:	40022000 	.word	0x40022000
 8002f84:	40022100 	.word	0x40022100
 8002f88:	40022300 	.word	0x40022300
 8002f8c:	58026300 	.word	0x58026300
 8002f90:	58026000 	.word	0x58026000
 8002f94:	cb840000 	.word	0xcb840000
 8002f98:	24000000 	.word	0x24000000
 8002f9c:	053e2d63 	.word	0x053e2d63
 8002fa0:	c7520000 	.word	0xc7520000
 8002fa4:	cfb80000 	.word	0xcfb80000

08002fa8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a70      	ldr	r2, [pc, #448]	; (8003178 <ADC_ConfigureBoostMode+0x1d0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <ADC_ConfigureBoostMode+0x1c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a6f      	ldr	r2, [pc, #444]	; (800317c <ADC_ConfigureBoostMode+0x1d4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d109      	bne.n	8002fd8 <ADC_ConfigureBoostMode+0x30>
 8002fc4:	4b6e      	ldr	r3, [pc, #440]	; (8003180 <ADC_ConfigureBoostMode+0x1d8>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf14      	ite	ne
 8002fd0:	2301      	movne	r3, #1
 8002fd2:	2300      	moveq	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e008      	b.n	8002fea <ADC_ConfigureBoostMode+0x42>
 8002fd8:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <ADC_ConfigureBoostMode+0x1dc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d01a      	beq.n	8003024 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002fee:	f004 fcdf 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 8002ff2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ffc:	d006      	beq.n	800300c <ADC_ConfigureBoostMode+0x64>
 8002ffe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003002:	d00b      	beq.n	800301c <ADC_ConfigureBoostMode+0x74>
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d000      	beq.n	800300c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800300a:	e05d      	b.n	80030c8 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	60fb      	str	r3, [r7, #12]
        break;
 800301a:	e055      	b.n	80030c8 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	60fb      	str	r3, [r7, #12]
        break;
 8003022:	e051      	b.n	80030c8 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003024:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003028:	f005 fc4e 	bl	80088c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800302c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003036:	d02a      	beq.n	800308e <ADC_ConfigureBoostMode+0xe6>
 8003038:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800303c:	d813      	bhi.n	8003066 <ADC_ConfigureBoostMode+0xbe>
 800303e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003042:	d024      	beq.n	800308e <ADC_ConfigureBoostMode+0xe6>
 8003044:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003048:	d806      	bhi.n	8003058 <ADC_ConfigureBoostMode+0xb0>
 800304a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800304e:	d01e      	beq.n	800308e <ADC_ConfigureBoostMode+0xe6>
 8003050:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003054:	d01b      	beq.n	800308e <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8003056:	e037      	b.n	80030c8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800305c:	d017      	beq.n	800308e <ADC_ConfigureBoostMode+0xe6>
 800305e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003062:	d014      	beq.n	800308e <ADC_ConfigureBoostMode+0xe6>
        break;
 8003064:	e030      	b.n	80030c8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003066:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800306a:	d021      	beq.n	80030b0 <ADC_ConfigureBoostMode+0x108>
 800306c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003070:	d806      	bhi.n	8003080 <ADC_ConfigureBoostMode+0xd8>
 8003072:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003076:	d013      	beq.n	80030a0 <ADC_ConfigureBoostMode+0xf8>
 8003078:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800307c:	d014      	beq.n	80030a8 <ADC_ConfigureBoostMode+0x100>
        break;
 800307e:	e023      	b.n	80030c8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003080:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003084:	d018      	beq.n	80030b8 <ADC_ConfigureBoostMode+0x110>
 8003086:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800308a:	d019      	beq.n	80030c0 <ADC_ConfigureBoostMode+0x118>
        break;
 800308c:	e01c      	b.n	80030c8 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	0c9b      	lsrs	r3, r3, #18
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	60fb      	str	r3, [r7, #12]
        break;
 800309e:	e013      	b.n	80030c8 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	60fb      	str	r3, [r7, #12]
        break;
 80030a6:	e00f      	b.n	80030c8 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	60fb      	str	r3, [r7, #12]
        break;
 80030ae:	e00b      	b.n	80030c8 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	60fb      	str	r3, [r7, #12]
        break;
 80030b6:	e007      	b.n	80030c8 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	09db      	lsrs	r3, r3, #7
 80030bc:	60fb      	str	r3, [r7, #12]
        break;
 80030be:	e003      	b.n	80030c8 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	60fb      	str	r3, [r7, #12]
        break;
 80030c6:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80030c8:	f7ff f922 	bl	8002310 <HAL_GetREVID>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f241 0303 	movw	r3, #4099	; 0x1003
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d815      	bhi.n	8003102 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <ADC_ConfigureBoostMode+0x1e0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d908      	bls.n	80030f0 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ec:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80030ee:	e03e      	b.n	800316e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030fe:	609a      	str	r2, [r3, #8]
}
 8003100:	e035      	b.n	800316e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a20      	ldr	r2, [pc, #128]	; (800318c <ADC_ConfigureBoostMode+0x1e4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d808      	bhi.n	8003122 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800311e:	609a      	str	r2, [r3, #8]
}
 8003120:	e025      	b.n	800316e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <ADC_ConfigureBoostMode+0x1e8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d80a      	bhi.n	8003140 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313c:	609a      	str	r2, [r3, #8]
}
 800313e:	e016      	b.n	800316e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a14      	ldr	r2, [pc, #80]	; (8003194 <ADC_ConfigureBoostMode+0x1ec>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d80a      	bhi.n	800315e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	609a      	str	r2, [r3, #8]
}
 800315c:	e007      	b.n	800316e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800316c:	609a      	str	r2, [r3, #8]
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40022000 	.word	0x40022000
 800317c:	40022100 	.word	0x40022100
 8003180:	40022300 	.word	0x40022300
 8003184:	58026300 	.word	0x58026300
 8003188:	01312d00 	.word	0x01312d00
 800318c:	005f5e10 	.word	0x005f5e10
 8003190:	00bebc20 	.word	0x00bebc20
 8003194:	017d7840 	.word	0x017d7840

08003198 <LL_ADC_IsEnabled>:
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <LL_ADC_IsEnabled+0x18>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <LL_ADC_IsEnabled+0x1a>
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <LL_ADC_REG_IsConversionOngoing>:
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d101      	bne.n	80031d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b09f      	sub	sp, #124	; 0x7c
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031fe:	2302      	movs	r3, #2
 8003200:	e0ba      	b.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a5c      	ldr	r2, [pc, #368]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d102      	bne.n	800321a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003214:	4b5b      	ldr	r3, [pc, #364]	; (8003384 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	e001      	b.n	800321e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e09d      	b.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff ffbd 	bl	80031be <LL_ADC_REG_IsConversionOngoing>
 8003244:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ffb7 	bl	80031be <LL_ADC_REG_IsConversionOngoing>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d17f      	bne.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003258:	2b00      	cmp	r3, #0
 800325a:	d17c      	bne.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a47      	ldr	r2, [pc, #284]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a46      	ldr	r2, [pc, #280]	; (8003384 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003270:	4b45      	ldr	r3, [pc, #276]	; (8003388 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003272:	e000      	b.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003274:	4b45      	ldr	r3, [pc, #276]	; (800338c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003276:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d039      	beq.n	80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	431a      	orrs	r2, r3
 800328e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003290:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3a      	ldr	r2, [pc, #232]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d004      	beq.n	80032a6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a38      	ldr	r2, [pc, #224]	; (8003384 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10e      	bne.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80032a6:	4836      	ldr	r0, [pc, #216]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80032a8:	f7ff ff76 	bl	8003198 <LL_ADC_IsEnabled>
 80032ac:	4604      	mov	r4, r0
 80032ae:	4835      	ldr	r0, [pc, #212]	; (8003384 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80032b0:	f7ff ff72 	bl	8003198 <LL_ADC_IsEnabled>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4323      	orrs	r3, r4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e008      	b.n	80032d6 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 80032c4:	4832      	ldr	r0, [pc, #200]	; (8003390 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80032c6:	f7ff ff67 	bl	8003198 <LL_ADC_IsEnabled>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d047      	beq.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	4b2d      	ldr	r3, [pc, #180]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	6811      	ldr	r1, [r2, #0]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	6892      	ldr	r2, [r2, #8]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	431a      	orrs	r2, r3
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f2:	e03a      	b.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80032f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1e      	ldr	r2, [pc, #120]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10e      	bne.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003314:	481a      	ldr	r0, [pc, #104]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003316:	f7ff ff3f 	bl	8003198 <LL_ADC_IsEnabled>
 800331a:	4604      	mov	r4, r0
 800331c:	4819      	ldr	r0, [pc, #100]	; (8003384 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800331e:	f7ff ff3b 	bl	8003198 <LL_ADC_IsEnabled>
 8003322:	4603      	mov	r3, r0
 8003324:	4323      	orrs	r3, r4
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	e008      	b.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003332:	4817      	ldr	r0, [pc, #92]	; (8003390 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003334:	f7ff ff30 	bl	8003198 <LL_ADC_IsEnabled>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d010      	beq.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800334e:	4013      	ands	r3, r2
 8003350:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003352:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003354:	e009      	b.n	800336a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003368:	e000      	b.n	800336c <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800336a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003374:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003378:	4618      	mov	r0, r3
 800337a:	377c      	adds	r7, #124	; 0x7c
 800337c:	46bd      	mov	sp, r7
 800337e:	bd90      	pop	{r4, r7, pc}
 8003380:	40022000 	.word	0x40022000
 8003384:	40022100 	.word	0x40022100
 8003388:	40022300 	.word	0x40022300
 800338c:	58026300 	.word	0x58026300
 8003390:	58026000 	.word	0x58026000
 8003394:	fffff0e0 	.word	0xfffff0e0

08003398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <__NVIC_SetPriorityGrouping+0x40>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b4:	4013      	ands	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c6:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <__NVIC_SetPriorityGrouping+0x40>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	60d3      	str	r3, [r2, #12]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00
 80033dc:	05fa0000 	.word	0x05fa0000

080033e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <__NVIC_GetPriorityGrouping+0x18>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	0a1b      	lsrs	r3, r3, #8
 80033ea:	f003 0307 	and.w	r3, r3, #7
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800340a:	2b00      	cmp	r3, #0
 800340c:	db0b      	blt.n	8003426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	f003 021f 	and.w	r2, r3, #31
 8003414:	4907      	ldr	r1, [pc, #28]	; (8003434 <__NVIC_EnableIRQ+0x38>)
 8003416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	2001      	movs	r0, #1
 800341e:	fa00 f202 	lsl.w	r2, r0, r2
 8003422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000e100 	.word	0xe000e100

08003438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003448:	2b00      	cmp	r3, #0
 800344a:	db0a      	blt.n	8003462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	490c      	ldr	r1, [pc, #48]	; (8003484 <__NVIC_SetPriority+0x4c>)
 8003452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003456:	0112      	lsls	r2, r2, #4
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	440b      	add	r3, r1
 800345c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003460:	e00a      	b.n	8003478 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4908      	ldr	r1, [pc, #32]	; (8003488 <__NVIC_SetPriority+0x50>)
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	3b04      	subs	r3, #4
 8003470:	0112      	lsls	r2, r2, #4
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	440b      	add	r3, r1
 8003476:	761a      	strb	r2, [r3, #24]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000e100 	.word	0xe000e100
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	; 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f1c3 0307 	rsb	r3, r3, #7
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	bf28      	it	cs
 80034aa:	2304      	movcs	r3, #4
 80034ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	d902      	bls.n	80034bc <NVIC_EncodePriority+0x30>
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3b03      	subs	r3, #3
 80034ba:	e000      	b.n	80034be <NVIC_EncodePriority+0x32>
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	401a      	ands	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d4:	f04f 31ff 	mov.w	r1, #4294967295
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	fa01 f303 	lsl.w	r3, r1, r3
 80034de:	43d9      	mvns	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e4:	4313      	orrs	r3, r2
         );
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3724      	adds	r7, #36	; 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ff4c 	bl	8003398 <__NVIC_SetPriorityGrouping>
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003516:	f7ff ff63 	bl	80033e0 <__NVIC_GetPriorityGrouping>
 800351a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	6978      	ldr	r0, [r7, #20]
 8003522:	f7ff ffb3 	bl	800348c <NVIC_EncodePriority>
 8003526:	4602      	mov	r2, r0
 8003528:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff82 	bl	8003438 <__NVIC_SetPriority>
}
 8003534:	bf00      	nop
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ff56 	bl	80033fc <__NVIC_EnableIRQ>
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003560:	f7fe fea8 	bl	80022b4 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e316      	b.n	8003b9e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a66      	ldr	r2, [pc, #408]	; (8003710 <HAL_DMA_Init+0x1b8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d04a      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a65      	ldr	r2, [pc, #404]	; (8003714 <HAL_DMA_Init+0x1bc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d045      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a63      	ldr	r2, [pc, #396]	; (8003718 <HAL_DMA_Init+0x1c0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d040      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a62      	ldr	r2, [pc, #392]	; (800371c <HAL_DMA_Init+0x1c4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d03b      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a60      	ldr	r2, [pc, #384]	; (8003720 <HAL_DMA_Init+0x1c8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d036      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a5f      	ldr	r2, [pc, #380]	; (8003724 <HAL_DMA_Init+0x1cc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d031      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a5d      	ldr	r2, [pc, #372]	; (8003728 <HAL_DMA_Init+0x1d0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d02c      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a5c      	ldr	r2, [pc, #368]	; (800372c <HAL_DMA_Init+0x1d4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d027      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a5a      	ldr	r2, [pc, #360]	; (8003730 <HAL_DMA_Init+0x1d8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d022      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a59      	ldr	r2, [pc, #356]	; (8003734 <HAL_DMA_Init+0x1dc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d01d      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a57      	ldr	r2, [pc, #348]	; (8003738 <HAL_DMA_Init+0x1e0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d018      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a56      	ldr	r2, [pc, #344]	; (800373c <HAL_DMA_Init+0x1e4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d013      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a54      	ldr	r2, [pc, #336]	; (8003740 <HAL_DMA_Init+0x1e8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00e      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a53      	ldr	r2, [pc, #332]	; (8003744 <HAL_DMA_Init+0x1ec>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a51      	ldr	r2, [pc, #324]	; (8003748 <HAL_DMA_Init+0x1f0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <HAL_DMA_Init+0xb8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a50      	ldr	r2, [pc, #320]	; (800374c <HAL_DMA_Init+0x1f4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d101      	bne.n	8003614 <HAL_DMA_Init+0xbc>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_DMA_Init+0xbe>
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 813b 	beq.w	8003892 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a37      	ldr	r2, [pc, #220]	; (8003710 <HAL_DMA_Init+0x1b8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d04a      	beq.n	80036cc <HAL_DMA_Init+0x174>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a36      	ldr	r2, [pc, #216]	; (8003714 <HAL_DMA_Init+0x1bc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d045      	beq.n	80036cc <HAL_DMA_Init+0x174>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a34      	ldr	r2, [pc, #208]	; (8003718 <HAL_DMA_Init+0x1c0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d040      	beq.n	80036cc <HAL_DMA_Init+0x174>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a33      	ldr	r2, [pc, #204]	; (800371c <HAL_DMA_Init+0x1c4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d03b      	beq.n	80036cc <HAL_DMA_Init+0x174>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a31      	ldr	r2, [pc, #196]	; (8003720 <HAL_DMA_Init+0x1c8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d036      	beq.n	80036cc <HAL_DMA_Init+0x174>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a30      	ldr	r2, [pc, #192]	; (8003724 <HAL_DMA_Init+0x1cc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d031      	beq.n	80036cc <HAL_DMA_Init+0x174>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2e      	ldr	r2, [pc, #184]	; (8003728 <HAL_DMA_Init+0x1d0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02c      	beq.n	80036cc <HAL_DMA_Init+0x174>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2d      	ldr	r2, [pc, #180]	; (800372c <HAL_DMA_Init+0x1d4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d027      	beq.n	80036cc <HAL_DMA_Init+0x174>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2b      	ldr	r2, [pc, #172]	; (8003730 <HAL_DMA_Init+0x1d8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_DMA_Init+0x174>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a2a      	ldr	r2, [pc, #168]	; (8003734 <HAL_DMA_Init+0x1dc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01d      	beq.n	80036cc <HAL_DMA_Init+0x174>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a28      	ldr	r2, [pc, #160]	; (8003738 <HAL_DMA_Init+0x1e0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_DMA_Init+0x174>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a27      	ldr	r2, [pc, #156]	; (800373c <HAL_DMA_Init+0x1e4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_DMA_Init+0x174>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a25      	ldr	r2, [pc, #148]	; (8003740 <HAL_DMA_Init+0x1e8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_DMA_Init+0x174>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a24      	ldr	r2, [pc, #144]	; (8003744 <HAL_DMA_Init+0x1ec>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_DMA_Init+0x174>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a22      	ldr	r2, [pc, #136]	; (8003748 <HAL_DMA_Init+0x1f0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_Init+0x174>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a21      	ldr	r2, [pc, #132]	; (800374c <HAL_DMA_Init+0x1f4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d108      	bne.n	80036de <HAL_DMA_Init+0x186>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e007      	b.n	80036ee <HAL_DMA_Init+0x196>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036ee:	e02f      	b.n	8003750 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036f0:	f7fe fde0 	bl	80022b4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b05      	cmp	r3, #5
 80036fc:	d928      	bls.n	8003750 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2203      	movs	r2, #3
 8003708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e246      	b.n	8003b9e <HAL_DMA_Init+0x646>
 8003710:	40020010 	.word	0x40020010
 8003714:	40020028 	.word	0x40020028
 8003718:	40020040 	.word	0x40020040
 800371c:	40020058 	.word	0x40020058
 8003720:	40020070 	.word	0x40020070
 8003724:	40020088 	.word	0x40020088
 8003728:	400200a0 	.word	0x400200a0
 800372c:	400200b8 	.word	0x400200b8
 8003730:	40020410 	.word	0x40020410
 8003734:	40020428 	.word	0x40020428
 8003738:	40020440 	.word	0x40020440
 800373c:	40020458 	.word	0x40020458
 8003740:	40020470 	.word	0x40020470
 8003744:	40020488 	.word	0x40020488
 8003748:	400204a0 	.word	0x400204a0
 800374c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1c8      	bne.n	80036f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4b83      	ldr	r3, [pc, #524]	; (8003978 <HAL_DMA_Init+0x420>)
 800376a:	4013      	ands	r3, r2
 800376c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003776:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003782:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d107      	bne.n	80037b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	4313      	orrs	r3, r2
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80037b4:	4b71      	ldr	r3, [pc, #452]	; (800397c <HAL_DMA_Init+0x424>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b71      	ldr	r3, [pc, #452]	; (8003980 <HAL_DMA_Init+0x428>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037c0:	d328      	bcc.n	8003814 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b28      	cmp	r3, #40	; 0x28
 80037c8:	d903      	bls.n	80037d2 <HAL_DMA_Init+0x27a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b2e      	cmp	r3, #46	; 0x2e
 80037d0:	d917      	bls.n	8003802 <HAL_DMA_Init+0x2aa>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b3e      	cmp	r3, #62	; 0x3e
 80037d8:	d903      	bls.n	80037e2 <HAL_DMA_Init+0x28a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b42      	cmp	r3, #66	; 0x42
 80037e0:	d90f      	bls.n	8003802 <HAL_DMA_Init+0x2aa>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b46      	cmp	r3, #70	; 0x46
 80037e8:	d903      	bls.n	80037f2 <HAL_DMA_Init+0x29a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b48      	cmp	r3, #72	; 0x48
 80037f0:	d907      	bls.n	8003802 <HAL_DMA_Init+0x2aa>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b4e      	cmp	r3, #78	; 0x4e
 80037f8:	d905      	bls.n	8003806 <HAL_DMA_Init+0x2ae>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b52      	cmp	r3, #82	; 0x52
 8003800:	d801      	bhi.n	8003806 <HAL_DMA_Init+0x2ae>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_DMA_Init+0x2b0>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003812:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f023 0307 	bic.w	r3, r3, #7
 800382a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	2b04      	cmp	r3, #4
 800383c:	d117      	bne.n	800386e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00e      	beq.n	800386e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f001 fbfd 	bl	8005050 <DMA_CheckFifoParam>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2240      	movs	r2, #64	; 0x40
 8003860:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e197      	b.n	8003b9e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f001 fb38 	bl	8004eec <DMA_CalcBaseAndBitshift>
 800387c:	4603      	mov	r3, r0
 800387e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	223f      	movs	r2, #63	; 0x3f
 800388a:	409a      	lsls	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	e0cd      	b.n	8003a2e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a3b      	ldr	r2, [pc, #236]	; (8003984 <HAL_DMA_Init+0x42c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d022      	beq.n	80038e2 <HAL_DMA_Init+0x38a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a39      	ldr	r2, [pc, #228]	; (8003988 <HAL_DMA_Init+0x430>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01d      	beq.n	80038e2 <HAL_DMA_Init+0x38a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a38      	ldr	r2, [pc, #224]	; (800398c <HAL_DMA_Init+0x434>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d018      	beq.n	80038e2 <HAL_DMA_Init+0x38a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a36      	ldr	r2, [pc, #216]	; (8003990 <HAL_DMA_Init+0x438>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_DMA_Init+0x38a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a35      	ldr	r2, [pc, #212]	; (8003994 <HAL_DMA_Init+0x43c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_DMA_Init+0x38a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a33      	ldr	r2, [pc, #204]	; (8003998 <HAL_DMA_Init+0x440>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_DMA_Init+0x38a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a32      	ldr	r2, [pc, #200]	; (800399c <HAL_DMA_Init+0x444>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_DMA_Init+0x38a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a30      	ldr	r2, [pc, #192]	; (80039a0 <HAL_DMA_Init+0x448>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <HAL_DMA_Init+0x38e>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_DMA_Init+0x390>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8097 	beq.w	8003a1c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a24      	ldr	r2, [pc, #144]	; (8003984 <HAL_DMA_Init+0x42c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d021      	beq.n	800393c <HAL_DMA_Init+0x3e4>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a22      	ldr	r2, [pc, #136]	; (8003988 <HAL_DMA_Init+0x430>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01c      	beq.n	800393c <HAL_DMA_Init+0x3e4>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a21      	ldr	r2, [pc, #132]	; (800398c <HAL_DMA_Init+0x434>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d017      	beq.n	800393c <HAL_DMA_Init+0x3e4>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1f      	ldr	r2, [pc, #124]	; (8003990 <HAL_DMA_Init+0x438>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d012      	beq.n	800393c <HAL_DMA_Init+0x3e4>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <HAL_DMA_Init+0x43c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00d      	beq.n	800393c <HAL_DMA_Init+0x3e4>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <HAL_DMA_Init+0x440>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d008      	beq.n	800393c <HAL_DMA_Init+0x3e4>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1b      	ldr	r2, [pc, #108]	; (800399c <HAL_DMA_Init+0x444>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <HAL_DMA_Init+0x3e4>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <HAL_DMA_Init+0x448>)
 800393a:	4293      	cmp	r3, r2
 800393c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_DMA_Init+0x44c>)
 800395a:	4013      	ands	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d020      	beq.n	80039a8 <HAL_DMA_Init+0x450>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d102      	bne.n	8003974 <HAL_DMA_Init+0x41c>
 800396e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003972:	e01a      	b.n	80039aa <HAL_DMA_Init+0x452>
 8003974:	2300      	movs	r3, #0
 8003976:	e018      	b.n	80039aa <HAL_DMA_Init+0x452>
 8003978:	fe10803f 	.word	0xfe10803f
 800397c:	5c001000 	.word	0x5c001000
 8003980:	ffff0000 	.word	0xffff0000
 8003984:	58025408 	.word	0x58025408
 8003988:	5802541c 	.word	0x5802541c
 800398c:	58025430 	.word	0x58025430
 8003990:	58025444 	.word	0x58025444
 8003994:	58025458 	.word	0x58025458
 8003998:	5802546c 	.word	0x5802546c
 800399c:	58025480 	.word	0x58025480
 80039a0:	58025494 	.word	0x58025494
 80039a4:	fffe000f 	.word	0xfffe000f
 80039a8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039d8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b6e      	ldr	r3, [pc, #440]	; (8003ba8 <HAL_DMA_Init+0x650>)
 80039f0:	4413      	add	r3, r2
 80039f2:	4a6e      	ldr	r2, [pc, #440]	; (8003bac <HAL_DMA_Init+0x654>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	009a      	lsls	r2, r3, #2
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f001 fa73 	bl	8004eec <DMA_CalcBaseAndBitshift>
 8003a06:	4603      	mov	r3, r0
 8003a08:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	2201      	movs	r2, #1
 8003a14:	409a      	lsls	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	e008      	b.n	8003a2e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2240      	movs	r2, #64	; 0x40
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2203      	movs	r2, #3
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0b7      	b.n	8003b9e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a5f      	ldr	r2, [pc, #380]	; (8003bb0 <HAL_DMA_Init+0x658>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d072      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a5d      	ldr	r2, [pc, #372]	; (8003bb4 <HAL_DMA_Init+0x65c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d06d      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a5c      	ldr	r2, [pc, #368]	; (8003bb8 <HAL_DMA_Init+0x660>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d068      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a5a      	ldr	r2, [pc, #360]	; (8003bbc <HAL_DMA_Init+0x664>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d063      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a59      	ldr	r2, [pc, #356]	; (8003bc0 <HAL_DMA_Init+0x668>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d05e      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a57      	ldr	r2, [pc, #348]	; (8003bc4 <HAL_DMA_Init+0x66c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d059      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a56      	ldr	r2, [pc, #344]	; (8003bc8 <HAL_DMA_Init+0x670>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d054      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a54      	ldr	r2, [pc, #336]	; (8003bcc <HAL_DMA_Init+0x674>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d04f      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a53      	ldr	r2, [pc, #332]	; (8003bd0 <HAL_DMA_Init+0x678>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d04a      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a51      	ldr	r2, [pc, #324]	; (8003bd4 <HAL_DMA_Init+0x67c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d045      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a50      	ldr	r2, [pc, #320]	; (8003bd8 <HAL_DMA_Init+0x680>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d040      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a4e      	ldr	r2, [pc, #312]	; (8003bdc <HAL_DMA_Init+0x684>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d03b      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a4d      	ldr	r2, [pc, #308]	; (8003be0 <HAL_DMA_Init+0x688>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d036      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a4b      	ldr	r2, [pc, #300]	; (8003be4 <HAL_DMA_Init+0x68c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d031      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a4a      	ldr	r2, [pc, #296]	; (8003be8 <HAL_DMA_Init+0x690>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d02c      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a48      	ldr	r2, [pc, #288]	; (8003bec <HAL_DMA_Init+0x694>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d027      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a47      	ldr	r2, [pc, #284]	; (8003bf0 <HAL_DMA_Init+0x698>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a45      	ldr	r2, [pc, #276]	; (8003bf4 <HAL_DMA_Init+0x69c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a44      	ldr	r2, [pc, #272]	; (8003bf8 <HAL_DMA_Init+0x6a0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a42      	ldr	r2, [pc, #264]	; (8003bfc <HAL_DMA_Init+0x6a4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a41      	ldr	r2, [pc, #260]	; (8003c00 <HAL_DMA_Init+0x6a8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a3f      	ldr	r2, [pc, #252]	; (8003c04 <HAL_DMA_Init+0x6ac>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a3e      	ldr	r2, [pc, #248]	; (8003c08 <HAL_DMA_Init+0x6b0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_DMA_Init+0x5c6>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3c      	ldr	r2, [pc, #240]	; (8003c0c <HAL_DMA_Init+0x6b4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA_Init+0x5ca>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <HAL_DMA_Init+0x5cc>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d032      	beq.n	8003b8e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f001 fb0d 	bl	8005148 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b80      	cmp	r3, #128	; 0x80
 8003b34:	d102      	bne.n	8003b3c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b50:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d010      	beq.n	8003b7c <HAL_DMA_Init+0x624>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d80c      	bhi.n	8003b7c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f001 fb8a 	bl	800527c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	e008      	b.n	8003b8e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	a7fdabf8 	.word	0xa7fdabf8
 8003bac:	cccccccd 	.word	0xcccccccd
 8003bb0:	40020010 	.word	0x40020010
 8003bb4:	40020028 	.word	0x40020028
 8003bb8:	40020040 	.word	0x40020040
 8003bbc:	40020058 	.word	0x40020058
 8003bc0:	40020070 	.word	0x40020070
 8003bc4:	40020088 	.word	0x40020088
 8003bc8:	400200a0 	.word	0x400200a0
 8003bcc:	400200b8 	.word	0x400200b8
 8003bd0:	40020410 	.word	0x40020410
 8003bd4:	40020428 	.word	0x40020428
 8003bd8:	40020440 	.word	0x40020440
 8003bdc:	40020458 	.word	0x40020458
 8003be0:	40020470 	.word	0x40020470
 8003be4:	40020488 	.word	0x40020488
 8003be8:	400204a0 	.word	0x400204a0
 8003bec:	400204b8 	.word	0x400204b8
 8003bf0:	58025408 	.word	0x58025408
 8003bf4:	5802541c 	.word	0x5802541c
 8003bf8:	58025430 	.word	0x58025430
 8003bfc:	58025444 	.word	0x58025444
 8003c00:	58025458 	.word	0x58025458
 8003c04:	5802546c 	.word	0x5802546c
 8003c08:	58025480 	.word	0x58025480
 8003c0c:	58025494 	.word	0x58025494

08003c10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e205      	b.n	800402e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d004      	beq.n	8003c38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e1fa      	b.n	800402e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a8c      	ldr	r2, [pc, #560]	; (8003e70 <HAL_DMA_Abort_IT+0x260>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d04a      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a8b      	ldr	r2, [pc, #556]	; (8003e74 <HAL_DMA_Abort_IT+0x264>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d045      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a89      	ldr	r2, [pc, #548]	; (8003e78 <HAL_DMA_Abort_IT+0x268>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d040      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a88      	ldr	r2, [pc, #544]	; (8003e7c <HAL_DMA_Abort_IT+0x26c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d03b      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a86      	ldr	r2, [pc, #536]	; (8003e80 <HAL_DMA_Abort_IT+0x270>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d036      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a85      	ldr	r2, [pc, #532]	; (8003e84 <HAL_DMA_Abort_IT+0x274>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d031      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a83      	ldr	r2, [pc, #524]	; (8003e88 <HAL_DMA_Abort_IT+0x278>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d02c      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a82      	ldr	r2, [pc, #520]	; (8003e8c <HAL_DMA_Abort_IT+0x27c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d027      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a80      	ldr	r2, [pc, #512]	; (8003e90 <HAL_DMA_Abort_IT+0x280>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d022      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7f      	ldr	r2, [pc, #508]	; (8003e94 <HAL_DMA_Abort_IT+0x284>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d01d      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7d      	ldr	r2, [pc, #500]	; (8003e98 <HAL_DMA_Abort_IT+0x288>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d018      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7c      	ldr	r2, [pc, #496]	; (8003e9c <HAL_DMA_Abort_IT+0x28c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d013      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a7a      	ldr	r2, [pc, #488]	; (8003ea0 <HAL_DMA_Abort_IT+0x290>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00e      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a79      	ldr	r2, [pc, #484]	; (8003ea4 <HAL_DMA_Abort_IT+0x294>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d009      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a77      	ldr	r2, [pc, #476]	; (8003ea8 <HAL_DMA_Abort_IT+0x298>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d004      	beq.n	8003cd8 <HAL_DMA_Abort_IT+0xc8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a76      	ldr	r2, [pc, #472]	; (8003eac <HAL_DMA_Abort_IT+0x29c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d101      	bne.n	8003cdc <HAL_DMA_Abort_IT+0xcc>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <HAL_DMA_Abort_IT+0xce>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d065      	beq.n	8003dae <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a60      	ldr	r2, [pc, #384]	; (8003e70 <HAL_DMA_Abort_IT+0x260>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d04a      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a5e      	ldr	r2, [pc, #376]	; (8003e74 <HAL_DMA_Abort_IT+0x264>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d045      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a5d      	ldr	r2, [pc, #372]	; (8003e78 <HAL_DMA_Abort_IT+0x268>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d040      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a5b      	ldr	r2, [pc, #364]	; (8003e7c <HAL_DMA_Abort_IT+0x26c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d03b      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a5a      	ldr	r2, [pc, #360]	; (8003e80 <HAL_DMA_Abort_IT+0x270>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d036      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a58      	ldr	r2, [pc, #352]	; (8003e84 <HAL_DMA_Abort_IT+0x274>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d031      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a57      	ldr	r2, [pc, #348]	; (8003e88 <HAL_DMA_Abort_IT+0x278>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d02c      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a55      	ldr	r2, [pc, #340]	; (8003e8c <HAL_DMA_Abort_IT+0x27c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d027      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a54      	ldr	r2, [pc, #336]	; (8003e90 <HAL_DMA_Abort_IT+0x280>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d022      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a52      	ldr	r2, [pc, #328]	; (8003e94 <HAL_DMA_Abort_IT+0x284>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01d      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a51      	ldr	r2, [pc, #324]	; (8003e98 <HAL_DMA_Abort_IT+0x288>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a4f      	ldr	r2, [pc, #316]	; (8003e9c <HAL_DMA_Abort_IT+0x28c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a4e      	ldr	r2, [pc, #312]	; (8003ea0 <HAL_DMA_Abort_IT+0x290>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a4c      	ldr	r2, [pc, #304]	; (8003ea4 <HAL_DMA_Abort_IT+0x294>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a4b      	ldr	r2, [pc, #300]	; (8003ea8 <HAL_DMA_Abort_IT+0x298>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_DMA_Abort_IT+0x17a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a49      	ldr	r2, [pc, #292]	; (8003eac <HAL_DMA_Abort_IT+0x29c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d108      	bne.n	8003d9c <HAL_DMA_Abort_IT+0x18c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e147      	b.n	800402c <HAL_DMA_Abort_IT+0x41c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e13e      	b.n	800402c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 020e 	bic.w	r2, r2, #14
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2b      	ldr	r2, [pc, #172]	; (8003e70 <HAL_DMA_Abort_IT+0x260>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d04a      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <HAL_DMA_Abort_IT+0x264>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d045      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a28      	ldr	r2, [pc, #160]	; (8003e78 <HAL_DMA_Abort_IT+0x268>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d040      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <HAL_DMA_Abort_IT+0x26c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d03b      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a25      	ldr	r2, [pc, #148]	; (8003e80 <HAL_DMA_Abort_IT+0x270>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d036      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a23      	ldr	r2, [pc, #140]	; (8003e84 <HAL_DMA_Abort_IT+0x274>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d031      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a22      	ldr	r2, [pc, #136]	; (8003e88 <HAL_DMA_Abort_IT+0x278>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d02c      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a20      	ldr	r2, [pc, #128]	; (8003e8c <HAL_DMA_Abort_IT+0x27c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d027      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <HAL_DMA_Abort_IT+0x280>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d022      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <HAL_DMA_Abort_IT+0x284>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01d      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <HAL_DMA_Abort_IT+0x288>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d018      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <HAL_DMA_Abort_IT+0x28c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <HAL_DMA_Abort_IT+0x290>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00e      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <HAL_DMA_Abort_IT+0x294>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d009      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a16      	ldr	r2, [pc, #88]	; (8003ea8 <HAL_DMA_Abort_IT+0x298>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d004      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x24e>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a14      	ldr	r2, [pc, #80]	; (8003eac <HAL_DMA_Abort_IT+0x29c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d128      	bne.n	8003eb0 <HAL_DMA_Abort_IT+0x2a0>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0201 	bic.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e027      	b.n	8003ec0 <HAL_DMA_Abort_IT+0x2b0>
 8003e70:	40020010 	.word	0x40020010
 8003e74:	40020028 	.word	0x40020028
 8003e78:	40020040 	.word	0x40020040
 8003e7c:	40020058 	.word	0x40020058
 8003e80:	40020070 	.word	0x40020070
 8003e84:	40020088 	.word	0x40020088
 8003e88:	400200a0 	.word	0x400200a0
 8003e8c:	400200b8 	.word	0x400200b8
 8003e90:	40020410 	.word	0x40020410
 8003e94:	40020428 	.word	0x40020428
 8003e98:	40020440 	.word	0x40020440
 8003e9c:	40020458 	.word	0x40020458
 8003ea0:	40020470 	.word	0x40020470
 8003ea4:	40020488 	.word	0x40020488
 8003ea8:	400204a0 	.word	0x400204a0
 8003eac:	400204b8 	.word	0x400204b8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a5c      	ldr	r2, [pc, #368]	; (8004038 <HAL_DMA_Abort_IT+0x428>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d072      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a5b      	ldr	r2, [pc, #364]	; (800403c <HAL_DMA_Abort_IT+0x42c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d06d      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a59      	ldr	r2, [pc, #356]	; (8004040 <HAL_DMA_Abort_IT+0x430>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d068      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a58      	ldr	r2, [pc, #352]	; (8004044 <HAL_DMA_Abort_IT+0x434>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d063      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a56      	ldr	r2, [pc, #344]	; (8004048 <HAL_DMA_Abort_IT+0x438>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d05e      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a55      	ldr	r2, [pc, #340]	; (800404c <HAL_DMA_Abort_IT+0x43c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d059      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a53      	ldr	r2, [pc, #332]	; (8004050 <HAL_DMA_Abort_IT+0x440>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d054      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a52      	ldr	r2, [pc, #328]	; (8004054 <HAL_DMA_Abort_IT+0x444>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d04f      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a50      	ldr	r2, [pc, #320]	; (8004058 <HAL_DMA_Abort_IT+0x448>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d04a      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a4f      	ldr	r2, [pc, #316]	; (800405c <HAL_DMA_Abort_IT+0x44c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d045      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a4d      	ldr	r2, [pc, #308]	; (8004060 <HAL_DMA_Abort_IT+0x450>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d040      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a4c      	ldr	r2, [pc, #304]	; (8004064 <HAL_DMA_Abort_IT+0x454>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d03b      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a4a      	ldr	r2, [pc, #296]	; (8004068 <HAL_DMA_Abort_IT+0x458>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d036      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a49      	ldr	r2, [pc, #292]	; (800406c <HAL_DMA_Abort_IT+0x45c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d031      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a47      	ldr	r2, [pc, #284]	; (8004070 <HAL_DMA_Abort_IT+0x460>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d02c      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a46      	ldr	r2, [pc, #280]	; (8004074 <HAL_DMA_Abort_IT+0x464>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d027      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a44      	ldr	r2, [pc, #272]	; (8004078 <HAL_DMA_Abort_IT+0x468>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d022      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a43      	ldr	r2, [pc, #268]	; (800407c <HAL_DMA_Abort_IT+0x46c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d01d      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a41      	ldr	r2, [pc, #260]	; (8004080 <HAL_DMA_Abort_IT+0x470>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d018      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a40      	ldr	r2, [pc, #256]	; (8004084 <HAL_DMA_Abort_IT+0x474>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d013      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a3e      	ldr	r2, [pc, #248]	; (8004088 <HAL_DMA_Abort_IT+0x478>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00e      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a3d      	ldr	r2, [pc, #244]	; (800408c <HAL_DMA_Abort_IT+0x47c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d009      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a3b      	ldr	r2, [pc, #236]	; (8004090 <HAL_DMA_Abort_IT+0x480>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_DMA_Abort_IT+0x3a0>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a3a      	ldr	r2, [pc, #232]	; (8004094 <HAL_DMA_Abort_IT+0x484>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <HAL_DMA_Abort_IT+0x3a4>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <HAL_DMA_Abort_IT+0x3a6>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d028      	beq.n	800400c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	2201      	movs	r2, #1
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fe8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00c      	beq.n	800400c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004000:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800400a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40020010 	.word	0x40020010
 800403c:	40020028 	.word	0x40020028
 8004040:	40020040 	.word	0x40020040
 8004044:	40020058 	.word	0x40020058
 8004048:	40020070 	.word	0x40020070
 800404c:	40020088 	.word	0x40020088
 8004050:	400200a0 	.word	0x400200a0
 8004054:	400200b8 	.word	0x400200b8
 8004058:	40020410 	.word	0x40020410
 800405c:	40020428 	.word	0x40020428
 8004060:	40020440 	.word	0x40020440
 8004064:	40020458 	.word	0x40020458
 8004068:	40020470 	.word	0x40020470
 800406c:	40020488 	.word	0x40020488
 8004070:	400204a0 	.word	0x400204a0
 8004074:	400204b8 	.word	0x400204b8
 8004078:	58025408 	.word	0x58025408
 800407c:	5802541c 	.word	0x5802541c
 8004080:	58025430 	.word	0x58025430
 8004084:	58025444 	.word	0x58025444
 8004088:	58025458 	.word	0x58025458
 800408c:	5802546c 	.word	0x5802546c
 8004090:	58025480 	.word	0x58025480
 8004094:	58025494 	.word	0x58025494

08004098 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040a4:	4b67      	ldr	r3, [pc, #412]	; (8004244 <HAL_DMA_IRQHandler+0x1ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a67      	ldr	r2, [pc, #412]	; (8004248 <HAL_DMA_IRQHandler+0x1b0>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	0a9b      	lsrs	r3, r3, #10
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a5f      	ldr	r2, [pc, #380]	; (800424c <HAL_DMA_IRQHandler+0x1b4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d04a      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a5d      	ldr	r2, [pc, #372]	; (8004250 <HAL_DMA_IRQHandler+0x1b8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d045      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a5c      	ldr	r2, [pc, #368]	; (8004254 <HAL_DMA_IRQHandler+0x1bc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d040      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a5a      	ldr	r2, [pc, #360]	; (8004258 <HAL_DMA_IRQHandler+0x1c0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d03b      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a59      	ldr	r2, [pc, #356]	; (800425c <HAL_DMA_IRQHandler+0x1c4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d036      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a57      	ldr	r2, [pc, #348]	; (8004260 <HAL_DMA_IRQHandler+0x1c8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d031      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a56      	ldr	r2, [pc, #344]	; (8004264 <HAL_DMA_IRQHandler+0x1cc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d02c      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a54      	ldr	r2, [pc, #336]	; (8004268 <HAL_DMA_IRQHandler+0x1d0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d027      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a53      	ldr	r2, [pc, #332]	; (800426c <HAL_DMA_IRQHandler+0x1d4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a51      	ldr	r2, [pc, #324]	; (8004270 <HAL_DMA_IRQHandler+0x1d8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01d      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a50      	ldr	r2, [pc, #320]	; (8004274 <HAL_DMA_IRQHandler+0x1dc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a4e      	ldr	r2, [pc, #312]	; (8004278 <HAL_DMA_IRQHandler+0x1e0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a4d      	ldr	r2, [pc, #308]	; (800427c <HAL_DMA_IRQHandler+0x1e4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a4b      	ldr	r2, [pc, #300]	; (8004280 <HAL_DMA_IRQHandler+0x1e8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a4a      	ldr	r2, [pc, #296]	; (8004284 <HAL_DMA_IRQHandler+0x1ec>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_DMA_IRQHandler+0xd2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a48      	ldr	r2, [pc, #288]	; (8004288 <HAL_DMA_IRQHandler+0x1f0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <HAL_DMA_IRQHandler+0xd6>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HAL_DMA_IRQHandler+0xd8>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 842b 	beq.w	80049cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	2208      	movs	r2, #8
 8004180:	409a      	lsls	r2, r3
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80a2 	beq.w	80042d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a2e      	ldr	r2, [pc, #184]	; (800424c <HAL_DMA_IRQHandler+0x1b4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d04a      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a2d      	ldr	r2, [pc, #180]	; (8004250 <HAL_DMA_IRQHandler+0x1b8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d045      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a2b      	ldr	r2, [pc, #172]	; (8004254 <HAL_DMA_IRQHandler+0x1bc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d040      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2a      	ldr	r2, [pc, #168]	; (8004258 <HAL_DMA_IRQHandler+0x1c0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d03b      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a28      	ldr	r2, [pc, #160]	; (800425c <HAL_DMA_IRQHandler+0x1c4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d036      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a27      	ldr	r2, [pc, #156]	; (8004260 <HAL_DMA_IRQHandler+0x1c8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d031      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a25      	ldr	r2, [pc, #148]	; (8004264 <HAL_DMA_IRQHandler+0x1cc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d02c      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a24      	ldr	r2, [pc, #144]	; (8004268 <HAL_DMA_IRQHandler+0x1d0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d027      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a22      	ldr	r2, [pc, #136]	; (800426c <HAL_DMA_IRQHandler+0x1d4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d022      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a21      	ldr	r2, [pc, #132]	; (8004270 <HAL_DMA_IRQHandler+0x1d8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d01d      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <HAL_DMA_IRQHandler+0x1dc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d018      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <HAL_DMA_IRQHandler+0x1e0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1c      	ldr	r2, [pc, #112]	; (800427c <HAL_DMA_IRQHandler+0x1e4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00e      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_DMA_IRQHandler+0x1e8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d009      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a19      	ldr	r2, [pc, #100]	; (8004284 <HAL_DMA_IRQHandler+0x1ec>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_DMA_IRQHandler+0x194>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <HAL_DMA_IRQHandler+0x1f0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d12f      	bne.n	800428c <HAL_DMA_IRQHandler+0x1f4>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	e02e      	b.n	80042a0 <HAL_DMA_IRQHandler+0x208>
 8004242:	bf00      	nop
 8004244:	24000000 	.word	0x24000000
 8004248:	1b4e81b5 	.word	0x1b4e81b5
 800424c:	40020010 	.word	0x40020010
 8004250:	40020028 	.word	0x40020028
 8004254:	40020040 	.word	0x40020040
 8004258:	40020058 	.word	0x40020058
 800425c:	40020070 	.word	0x40020070
 8004260:	40020088 	.word	0x40020088
 8004264:	400200a0 	.word	0x400200a0
 8004268:	400200b8 	.word	0x400200b8
 800426c:	40020410 	.word	0x40020410
 8004270:	40020428 	.word	0x40020428
 8004274:	40020440 	.word	0x40020440
 8004278:	40020458 	.word	0x40020458
 800427c:	40020470 	.word	0x40020470
 8004280:	40020488 	.word	0x40020488
 8004284:	400204a0 	.word	0x400204a0
 8004288:	400204b8 	.word	0x400204b8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	bf14      	ite	ne
 800429a:	2301      	movne	r3, #1
 800429c:	2300      	moveq	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d015      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0204 	bic.w	r2, r2, #4
 80042b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2208      	movs	r2, #8
 80042be:	409a      	lsls	r2, r3
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	f043 0201 	orr.w	r2, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	fa22 f303 	lsr.w	r3, r2, r3
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d06e      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a69      	ldr	r2, [pc, #420]	; (8004490 <HAL_DMA_IRQHandler+0x3f8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d04a      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a67      	ldr	r2, [pc, #412]	; (8004494 <HAL_DMA_IRQHandler+0x3fc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d045      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a66      	ldr	r2, [pc, #408]	; (8004498 <HAL_DMA_IRQHandler+0x400>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d040      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a64      	ldr	r2, [pc, #400]	; (800449c <HAL_DMA_IRQHandler+0x404>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d03b      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a63      	ldr	r2, [pc, #396]	; (80044a0 <HAL_DMA_IRQHandler+0x408>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d036      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a61      	ldr	r2, [pc, #388]	; (80044a4 <HAL_DMA_IRQHandler+0x40c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d031      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a60      	ldr	r2, [pc, #384]	; (80044a8 <HAL_DMA_IRQHandler+0x410>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d02c      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a5e      	ldr	r2, [pc, #376]	; (80044ac <HAL_DMA_IRQHandler+0x414>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d027      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a5d      	ldr	r2, [pc, #372]	; (80044b0 <HAL_DMA_IRQHandler+0x418>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d022      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a5b      	ldr	r2, [pc, #364]	; (80044b4 <HAL_DMA_IRQHandler+0x41c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d01d      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a5a      	ldr	r2, [pc, #360]	; (80044b8 <HAL_DMA_IRQHandler+0x420>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d018      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a58      	ldr	r2, [pc, #352]	; (80044bc <HAL_DMA_IRQHandler+0x424>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a57      	ldr	r2, [pc, #348]	; (80044c0 <HAL_DMA_IRQHandler+0x428>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00e      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a55      	ldr	r2, [pc, #340]	; (80044c4 <HAL_DMA_IRQHandler+0x42c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d009      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a54      	ldr	r2, [pc, #336]	; (80044c8 <HAL_DMA_IRQHandler+0x430>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d004      	beq.n	8004386 <HAL_DMA_IRQHandler+0x2ee>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a52      	ldr	r2, [pc, #328]	; (80044cc <HAL_DMA_IRQHandler+0x434>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10a      	bne.n	800439c <HAL_DMA_IRQHandler+0x304>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf14      	ite	ne
 8004394:	2301      	movne	r3, #1
 8004396:	2300      	moveq	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	e003      	b.n	80043a4 <HAL_DMA_IRQHandler+0x30c>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00d      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	2201      	movs	r2, #1
 80043b2:	409a      	lsls	r2, r3
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	f043 0202 	orr.w	r2, r3, #2
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2204      	movs	r2, #4
 80043ce:	409a      	lsls	r2, r3
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 808f 	beq.w	80044f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a2c      	ldr	r2, [pc, #176]	; (8004490 <HAL_DMA_IRQHandler+0x3f8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d04a      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <HAL_DMA_IRQHandler+0x3fc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d045      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a29      	ldr	r2, [pc, #164]	; (8004498 <HAL_DMA_IRQHandler+0x400>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d040      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a27      	ldr	r2, [pc, #156]	; (800449c <HAL_DMA_IRQHandler+0x404>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d03b      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a26      	ldr	r2, [pc, #152]	; (80044a0 <HAL_DMA_IRQHandler+0x408>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d036      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a24      	ldr	r2, [pc, #144]	; (80044a4 <HAL_DMA_IRQHandler+0x40c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d031      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a23      	ldr	r2, [pc, #140]	; (80044a8 <HAL_DMA_IRQHandler+0x410>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d02c      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a21      	ldr	r2, [pc, #132]	; (80044ac <HAL_DMA_IRQHandler+0x414>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d027      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a20      	ldr	r2, [pc, #128]	; (80044b0 <HAL_DMA_IRQHandler+0x418>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d022      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <HAL_DMA_IRQHandler+0x41c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01d      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <HAL_DMA_IRQHandler+0x420>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d018      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <HAL_DMA_IRQHandler+0x424>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1a      	ldr	r2, [pc, #104]	; (80044c0 <HAL_DMA_IRQHandler+0x428>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00e      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <HAL_DMA_IRQHandler+0x42c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d009      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <HAL_DMA_IRQHandler+0x430>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d004      	beq.n	800447a <HAL_DMA_IRQHandler+0x3e2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a15      	ldr	r2, [pc, #84]	; (80044cc <HAL_DMA_IRQHandler+0x434>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d12a      	bne.n	80044d0 <HAL_DMA_IRQHandler+0x438>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e023      	b.n	80044d8 <HAL_DMA_IRQHandler+0x440>
 8004490:	40020010 	.word	0x40020010
 8004494:	40020028 	.word	0x40020028
 8004498:	40020040 	.word	0x40020040
 800449c:	40020058 	.word	0x40020058
 80044a0:	40020070 	.word	0x40020070
 80044a4:	40020088 	.word	0x40020088
 80044a8:	400200a0 	.word	0x400200a0
 80044ac:	400200b8 	.word	0x400200b8
 80044b0:	40020410 	.word	0x40020410
 80044b4:	40020428 	.word	0x40020428
 80044b8:	40020440 	.word	0x40020440
 80044bc:	40020458 	.word	0x40020458
 80044c0:	40020470 	.word	0x40020470
 80044c4:	40020488 	.word	0x40020488
 80044c8:	400204a0 	.word	0x400204a0
 80044cc:	400204b8 	.word	0x400204b8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00d      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	2204      	movs	r2, #4
 80044e6:	409a      	lsls	r2, r3
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f0:	f043 0204 	orr.w	r2, r3, #4
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2210      	movs	r2, #16
 8004502:	409a      	lsls	r2, r3
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80a6 	beq.w	800465a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a85      	ldr	r2, [pc, #532]	; (8004728 <HAL_DMA_IRQHandler+0x690>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d04a      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a83      	ldr	r2, [pc, #524]	; (800472c <HAL_DMA_IRQHandler+0x694>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d045      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a82      	ldr	r2, [pc, #520]	; (8004730 <HAL_DMA_IRQHandler+0x698>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d040      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a80      	ldr	r2, [pc, #512]	; (8004734 <HAL_DMA_IRQHandler+0x69c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d03b      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a7f      	ldr	r2, [pc, #508]	; (8004738 <HAL_DMA_IRQHandler+0x6a0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d036      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a7d      	ldr	r2, [pc, #500]	; (800473c <HAL_DMA_IRQHandler+0x6a4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d031      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7c      	ldr	r2, [pc, #496]	; (8004740 <HAL_DMA_IRQHandler+0x6a8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d02c      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a7a      	ldr	r2, [pc, #488]	; (8004744 <HAL_DMA_IRQHandler+0x6ac>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d027      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a79      	ldr	r2, [pc, #484]	; (8004748 <HAL_DMA_IRQHandler+0x6b0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d022      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a77      	ldr	r2, [pc, #476]	; (800474c <HAL_DMA_IRQHandler+0x6b4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01d      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a76      	ldr	r2, [pc, #472]	; (8004750 <HAL_DMA_IRQHandler+0x6b8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d018      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a74      	ldr	r2, [pc, #464]	; (8004754 <HAL_DMA_IRQHandler+0x6bc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a73      	ldr	r2, [pc, #460]	; (8004758 <HAL_DMA_IRQHandler+0x6c0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00e      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a71      	ldr	r2, [pc, #452]	; (800475c <HAL_DMA_IRQHandler+0x6c4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a70      	ldr	r2, [pc, #448]	; (8004760 <HAL_DMA_IRQHandler+0x6c8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <HAL_DMA_IRQHandler+0x516>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a6e      	ldr	r2, [pc, #440]	; (8004764 <HAL_DMA_IRQHandler+0x6cc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d10a      	bne.n	80045c4 <HAL_DMA_IRQHandler+0x52c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e009      	b.n	80045d8 <HAL_DMA_IRQHandler+0x540>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bf14      	ite	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	2300      	moveq	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d03e      	beq.n	800465a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	2210      	movs	r2, #16
 80045e6:	409a      	lsls	r2, r3
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d018      	beq.n	800462c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d108      	bne.n	800461a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d024      	beq.n	800465a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	4798      	blx	r3
 8004618:	e01f      	b.n	800465a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01b      	beq.n	800465a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4798      	blx	r3
 800462a:	e016      	b.n	800465a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d107      	bne.n	800464a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0208 	bic.w	r2, r2, #8
 8004648:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	f003 031f 	and.w	r3, r3, #31
 8004662:	2220      	movs	r2, #32
 8004664:	409a      	lsls	r2, r3
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 8110 	beq.w	8004890 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <HAL_DMA_IRQHandler+0x690>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d04a      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2b      	ldr	r2, [pc, #172]	; (800472c <HAL_DMA_IRQHandler+0x694>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d045      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a29      	ldr	r2, [pc, #164]	; (8004730 <HAL_DMA_IRQHandler+0x698>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d040      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a28      	ldr	r2, [pc, #160]	; (8004734 <HAL_DMA_IRQHandler+0x69c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d03b      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a26      	ldr	r2, [pc, #152]	; (8004738 <HAL_DMA_IRQHandler+0x6a0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d036      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a25      	ldr	r2, [pc, #148]	; (800473c <HAL_DMA_IRQHandler+0x6a4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d031      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a23      	ldr	r2, [pc, #140]	; (8004740 <HAL_DMA_IRQHandler+0x6a8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d02c      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a22      	ldr	r2, [pc, #136]	; (8004744 <HAL_DMA_IRQHandler+0x6ac>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d027      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a20      	ldr	r2, [pc, #128]	; (8004748 <HAL_DMA_IRQHandler+0x6b0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d022      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1f      	ldr	r2, [pc, #124]	; (800474c <HAL_DMA_IRQHandler+0x6b4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d01d      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <HAL_DMA_IRQHandler+0x6b8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d018      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <HAL_DMA_IRQHandler+0x6bc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d013      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1a      	ldr	r2, [pc, #104]	; (8004758 <HAL_DMA_IRQHandler+0x6c0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00e      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a19      	ldr	r2, [pc, #100]	; (800475c <HAL_DMA_IRQHandler+0x6c4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d009      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a17      	ldr	r2, [pc, #92]	; (8004760 <HAL_DMA_IRQHandler+0x6c8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d004      	beq.n	8004710 <HAL_DMA_IRQHandler+0x678>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a16      	ldr	r2, [pc, #88]	; (8004764 <HAL_DMA_IRQHandler+0x6cc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d12b      	bne.n	8004768 <HAL_DMA_IRQHandler+0x6d0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	2b00      	cmp	r3, #0
 800471c:	bf14      	ite	ne
 800471e:	2301      	movne	r3, #1
 8004720:	2300      	moveq	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	e02a      	b.n	800477c <HAL_DMA_IRQHandler+0x6e4>
 8004726:	bf00      	nop
 8004728:	40020010 	.word	0x40020010
 800472c:	40020028 	.word	0x40020028
 8004730:	40020040 	.word	0x40020040
 8004734:	40020058 	.word	0x40020058
 8004738:	40020070 	.word	0x40020070
 800473c:	40020088 	.word	0x40020088
 8004740:	400200a0 	.word	0x400200a0
 8004744:	400200b8 	.word	0x400200b8
 8004748:	40020410 	.word	0x40020410
 800474c:	40020428 	.word	0x40020428
 8004750:	40020440 	.word	0x40020440
 8004754:	40020458 	.word	0x40020458
 8004758:	40020470 	.word	0x40020470
 800475c:	40020488 	.word	0x40020488
 8004760:	400204a0 	.word	0x400204a0
 8004764:	400204b8 	.word	0x400204b8
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf14      	ite	ne
 8004776:	2301      	movne	r3, #1
 8004778:	2300      	moveq	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8087 	beq.w	8004890 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2220      	movs	r2, #32
 800478c:	409a      	lsls	r2, r3
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b04      	cmp	r3, #4
 800479c:	d139      	bne.n	8004812 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0216 	bic.w	r2, r2, #22
 80047ac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047bc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d103      	bne.n	80047ce <HAL_DMA_IRQHandler+0x736>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0208 	bic.w	r2, r2, #8
 80047dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	223f      	movs	r2, #63	; 0x3f
 80047e8:	409a      	lsls	r2, r3
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 834a 	beq.w	8004e9c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	4798      	blx	r3
          }
          return;
 8004810:	e344      	b.n	8004e9c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d018      	beq.n	8004852 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d108      	bne.n	8004840 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	2b00      	cmp	r3, #0
 8004834:	d02c      	beq.n	8004890 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	4798      	blx	r3
 800483e:	e027      	b.n	8004890 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d023      	beq.n	8004890 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	4798      	blx	r3
 8004850:	e01e      	b.n	8004890 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10f      	bne.n	8004880 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0210 	bic.w	r2, r2, #16
 800486e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8306 	beq.w	8004ea6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8088 	beq.w	80049b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2204      	movs	r2, #4
 80048ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a7a      	ldr	r2, [pc, #488]	; (8004aa0 <HAL_DMA_IRQHandler+0xa08>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d04a      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a79      	ldr	r2, [pc, #484]	; (8004aa4 <HAL_DMA_IRQHandler+0xa0c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d045      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a77      	ldr	r2, [pc, #476]	; (8004aa8 <HAL_DMA_IRQHandler+0xa10>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d040      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a76      	ldr	r2, [pc, #472]	; (8004aac <HAL_DMA_IRQHandler+0xa14>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d03b      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a74      	ldr	r2, [pc, #464]	; (8004ab0 <HAL_DMA_IRQHandler+0xa18>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d036      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a73      	ldr	r2, [pc, #460]	; (8004ab4 <HAL_DMA_IRQHandler+0xa1c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d031      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a71      	ldr	r2, [pc, #452]	; (8004ab8 <HAL_DMA_IRQHandler+0xa20>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d02c      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a70      	ldr	r2, [pc, #448]	; (8004abc <HAL_DMA_IRQHandler+0xa24>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d027      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a6e      	ldr	r2, [pc, #440]	; (8004ac0 <HAL_DMA_IRQHandler+0xa28>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d022      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6d      	ldr	r2, [pc, #436]	; (8004ac4 <HAL_DMA_IRQHandler+0xa2c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d01d      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a6b      	ldr	r2, [pc, #428]	; (8004ac8 <HAL_DMA_IRQHandler+0xa30>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d018      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6a      	ldr	r2, [pc, #424]	; (8004acc <HAL_DMA_IRQHandler+0xa34>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d013      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a68      	ldr	r2, [pc, #416]	; (8004ad0 <HAL_DMA_IRQHandler+0xa38>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00e      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a67      	ldr	r2, [pc, #412]	; (8004ad4 <HAL_DMA_IRQHandler+0xa3c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d009      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a65      	ldr	r2, [pc, #404]	; (8004ad8 <HAL_DMA_IRQHandler+0xa40>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_DMA_IRQHandler+0x8b8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a64      	ldr	r2, [pc, #400]	; (8004adc <HAL_DMA_IRQHandler+0xa44>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d108      	bne.n	8004962 <HAL_DMA_IRQHandler+0x8ca>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e007      	b.n	8004972 <HAL_DMA_IRQHandler+0x8da>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3301      	adds	r3, #1
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497a:	429a      	cmp	r2, r3
 800497c:	d307      	bcc.n	800498e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f2      	bne.n	8004972 <HAL_DMA_IRQHandler+0x8da>
 800498c:	e000      	b.n	8004990 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800498e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d004      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2203      	movs	r2, #3
 80049aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80049ae:	e003      	b.n	80049b8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 8272 	beq.w	8004ea6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	4798      	blx	r3
 80049ca:	e26c      	b.n	8004ea6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a43      	ldr	r2, [pc, #268]	; (8004ae0 <HAL_DMA_IRQHandler+0xa48>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d022      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x984>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a42      	ldr	r2, [pc, #264]	; (8004ae4 <HAL_DMA_IRQHandler+0xa4c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d01d      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x984>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a40      	ldr	r2, [pc, #256]	; (8004ae8 <HAL_DMA_IRQHandler+0xa50>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d018      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x984>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a3f      	ldr	r2, [pc, #252]	; (8004aec <HAL_DMA_IRQHandler+0xa54>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d013      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x984>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a3d      	ldr	r2, [pc, #244]	; (8004af0 <HAL_DMA_IRQHandler+0xa58>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00e      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x984>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a3c      	ldr	r2, [pc, #240]	; (8004af4 <HAL_DMA_IRQHandler+0xa5c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d009      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x984>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3a      	ldr	r2, [pc, #232]	; (8004af8 <HAL_DMA_IRQHandler+0xa60>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d004      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x984>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a39      	ldr	r2, [pc, #228]	; (8004afc <HAL_DMA_IRQHandler+0xa64>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d101      	bne.n	8004a20 <HAL_DMA_IRQHandler+0x988>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <HAL_DMA_IRQHandler+0x98a>
 8004a20:	2300      	movs	r3, #0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 823f 	beq.w	8004ea6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	2204      	movs	r2, #4
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80cd 	beq.w	8004be0 <HAL_DMA_IRQHandler+0xb48>
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80c7 	beq.w	8004be0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	2204      	movs	r2, #4
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d049      	beq.n	8004b00 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8210 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a88:	e20a      	b.n	8004ea0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8206 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a9c:	e200      	b.n	8004ea0 <HAL_DMA_IRQHandler+0xe08>
 8004a9e:	bf00      	nop
 8004aa0:	40020010 	.word	0x40020010
 8004aa4:	40020028 	.word	0x40020028
 8004aa8:	40020040 	.word	0x40020040
 8004aac:	40020058 	.word	0x40020058
 8004ab0:	40020070 	.word	0x40020070
 8004ab4:	40020088 	.word	0x40020088
 8004ab8:	400200a0 	.word	0x400200a0
 8004abc:	400200b8 	.word	0x400200b8
 8004ac0:	40020410 	.word	0x40020410
 8004ac4:	40020428 	.word	0x40020428
 8004ac8:	40020440 	.word	0x40020440
 8004acc:	40020458 	.word	0x40020458
 8004ad0:	40020470 	.word	0x40020470
 8004ad4:	40020488 	.word	0x40020488
 8004ad8:	400204a0 	.word	0x400204a0
 8004adc:	400204b8 	.word	0x400204b8
 8004ae0:	58025408 	.word	0x58025408
 8004ae4:	5802541c 	.word	0x5802541c
 8004ae8:	58025430 	.word	0x58025430
 8004aec:	58025444 	.word	0x58025444
 8004af0:	58025458 	.word	0x58025458
 8004af4:	5802546c 	.word	0x5802546c
 8004af8:	58025480 	.word	0x58025480
 8004afc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d160      	bne.n	8004bcc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a8c      	ldr	r2, [pc, #560]	; (8004d40 <HAL_DMA_IRQHandler+0xca8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d04a      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a8a      	ldr	r2, [pc, #552]	; (8004d44 <HAL_DMA_IRQHandler+0xcac>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d045      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a89      	ldr	r2, [pc, #548]	; (8004d48 <HAL_DMA_IRQHandler+0xcb0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d040      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a87      	ldr	r2, [pc, #540]	; (8004d4c <HAL_DMA_IRQHandler+0xcb4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d03b      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a86      	ldr	r2, [pc, #536]	; (8004d50 <HAL_DMA_IRQHandler+0xcb8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d036      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a84      	ldr	r2, [pc, #528]	; (8004d54 <HAL_DMA_IRQHandler+0xcbc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d031      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a83      	ldr	r2, [pc, #524]	; (8004d58 <HAL_DMA_IRQHandler+0xcc0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d02c      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a81      	ldr	r2, [pc, #516]	; (8004d5c <HAL_DMA_IRQHandler+0xcc4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d027      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a80      	ldr	r2, [pc, #512]	; (8004d60 <HAL_DMA_IRQHandler+0xcc8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d022      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a7e      	ldr	r2, [pc, #504]	; (8004d64 <HAL_DMA_IRQHandler+0xccc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01d      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a7d      	ldr	r2, [pc, #500]	; (8004d68 <HAL_DMA_IRQHandler+0xcd0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d018      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7b      	ldr	r2, [pc, #492]	; (8004d6c <HAL_DMA_IRQHandler+0xcd4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d013      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a7a      	ldr	r2, [pc, #488]	; (8004d70 <HAL_DMA_IRQHandler+0xcd8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00e      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a78      	ldr	r2, [pc, #480]	; (8004d74 <HAL_DMA_IRQHandler+0xcdc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d009      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a77      	ldr	r2, [pc, #476]	; (8004d78 <HAL_DMA_IRQHandler+0xce0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d004      	beq.n	8004baa <HAL_DMA_IRQHandler+0xb12>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a75      	ldr	r2, [pc, #468]	; (8004d7c <HAL_DMA_IRQHandler+0xce4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d108      	bne.n	8004bbc <HAL_DMA_IRQHandler+0xb24>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0208 	bic.w	r2, r2, #8
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e007      	b.n	8004bcc <HAL_DMA_IRQHandler+0xb34>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0204 	bic.w	r2, r2, #4
 8004bca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8165 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bde:	e15f      	b.n	8004ea0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	2202      	movs	r2, #2
 8004bea:	409a      	lsls	r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80c5 	beq.w	8004d80 <HAL_DMA_IRQHandler+0xce8>
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80bf 	beq.w	8004d80 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	409a      	lsls	r2, r3
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d018      	beq.n	8004c4e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 813a 	beq.w	8004ea4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c38:	e134      	b.n	8004ea4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8130 	beq.w	8004ea4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c4c:	e12a      	b.n	8004ea4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d168      	bne.n	8004d2a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a38      	ldr	r2, [pc, #224]	; (8004d40 <HAL_DMA_IRQHandler+0xca8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d04a      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a37      	ldr	r2, [pc, #220]	; (8004d44 <HAL_DMA_IRQHandler+0xcac>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d045      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a35      	ldr	r2, [pc, #212]	; (8004d48 <HAL_DMA_IRQHandler+0xcb0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d040      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a34      	ldr	r2, [pc, #208]	; (8004d4c <HAL_DMA_IRQHandler+0xcb4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d03b      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a32      	ldr	r2, [pc, #200]	; (8004d50 <HAL_DMA_IRQHandler+0xcb8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d036      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a31      	ldr	r2, [pc, #196]	; (8004d54 <HAL_DMA_IRQHandler+0xcbc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d031      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a2f      	ldr	r2, [pc, #188]	; (8004d58 <HAL_DMA_IRQHandler+0xcc0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d02c      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a2e      	ldr	r2, [pc, #184]	; (8004d5c <HAL_DMA_IRQHandler+0xcc4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d027      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2c      	ldr	r2, [pc, #176]	; (8004d60 <HAL_DMA_IRQHandler+0xcc8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d022      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a2b      	ldr	r2, [pc, #172]	; (8004d64 <HAL_DMA_IRQHandler+0xccc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d01d      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a29      	ldr	r2, [pc, #164]	; (8004d68 <HAL_DMA_IRQHandler+0xcd0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d018      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a28      	ldr	r2, [pc, #160]	; (8004d6c <HAL_DMA_IRQHandler+0xcd4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d013      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <HAL_DMA_IRQHandler+0xcd8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00e      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a25      	ldr	r2, [pc, #148]	; (8004d74 <HAL_DMA_IRQHandler+0xcdc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d009      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a23      	ldr	r2, [pc, #140]	; (8004d78 <HAL_DMA_IRQHandler+0xce0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d004      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xc60>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a22      	ldr	r2, [pc, #136]	; (8004d7c <HAL_DMA_IRQHandler+0xce4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d108      	bne.n	8004d0a <HAL_DMA_IRQHandler+0xc72>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0214 	bic.w	r2, r2, #20
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	e007      	b.n	8004d1a <HAL_DMA_IRQHandler+0xc82>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 020a 	bic.w	r2, r2, #10
 8004d18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80b8 	beq.w	8004ea4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d3c:	e0b2      	b.n	8004ea4 <HAL_DMA_IRQHandler+0xe0c>
 8004d3e:	bf00      	nop
 8004d40:	40020010 	.word	0x40020010
 8004d44:	40020028 	.word	0x40020028
 8004d48:	40020040 	.word	0x40020040
 8004d4c:	40020058 	.word	0x40020058
 8004d50:	40020070 	.word	0x40020070
 8004d54:	40020088 	.word	0x40020088
 8004d58:	400200a0 	.word	0x400200a0
 8004d5c:	400200b8 	.word	0x400200b8
 8004d60:	40020410 	.word	0x40020410
 8004d64:	40020428 	.word	0x40020428
 8004d68:	40020440 	.word	0x40020440
 8004d6c:	40020458 	.word	0x40020458
 8004d70:	40020470 	.word	0x40020470
 8004d74:	40020488 	.word	0x40020488
 8004d78:	400204a0 	.word	0x400204a0
 8004d7c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	2208      	movs	r2, #8
 8004d8a:	409a      	lsls	r2, r3
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 8088 	beq.w	8004ea6 <HAL_DMA_IRQHandler+0xe0e>
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8082 	beq.w	8004ea6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a41      	ldr	r2, [pc, #260]	; (8004eac <HAL_DMA_IRQHandler+0xe14>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d04a      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a3f      	ldr	r2, [pc, #252]	; (8004eb0 <HAL_DMA_IRQHandler+0xe18>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d045      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a3e      	ldr	r2, [pc, #248]	; (8004eb4 <HAL_DMA_IRQHandler+0xe1c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d040      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a3c      	ldr	r2, [pc, #240]	; (8004eb8 <HAL_DMA_IRQHandler+0xe20>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d03b      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a3b      	ldr	r2, [pc, #236]	; (8004ebc <HAL_DMA_IRQHandler+0xe24>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d036      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a39      	ldr	r2, [pc, #228]	; (8004ec0 <HAL_DMA_IRQHandler+0xe28>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d031      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a38      	ldr	r2, [pc, #224]	; (8004ec4 <HAL_DMA_IRQHandler+0xe2c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d02c      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a36      	ldr	r2, [pc, #216]	; (8004ec8 <HAL_DMA_IRQHandler+0xe30>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d027      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a35      	ldr	r2, [pc, #212]	; (8004ecc <HAL_DMA_IRQHandler+0xe34>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d022      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a33      	ldr	r2, [pc, #204]	; (8004ed0 <HAL_DMA_IRQHandler+0xe38>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01d      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a32      	ldr	r2, [pc, #200]	; (8004ed4 <HAL_DMA_IRQHandler+0xe3c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d018      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a30      	ldr	r2, [pc, #192]	; (8004ed8 <HAL_DMA_IRQHandler+0xe40>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a2f      	ldr	r2, [pc, #188]	; (8004edc <HAL_DMA_IRQHandler+0xe44>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a2d      	ldr	r2, [pc, #180]	; (8004ee0 <HAL_DMA_IRQHandler+0xe48>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a2c      	ldr	r2, [pc, #176]	; (8004ee4 <HAL_DMA_IRQHandler+0xe4c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_DMA_IRQHandler+0xdaa>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <HAL_DMA_IRQHandler+0xe50>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d108      	bne.n	8004e54 <HAL_DMA_IRQHandler+0xdbc>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 021c 	bic.w	r2, r2, #28
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e007      	b.n	8004e64 <HAL_DMA_IRQHandler+0xdcc>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 020e 	bic.w	r2, r2, #14
 8004e62:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
 8004e9a:	e004      	b.n	8004ea6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004e9c:	bf00      	nop
 8004e9e:	e002      	b.n	8004ea6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ea0:	bf00      	nop
 8004ea2:	e000      	b.n	8004ea6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ea4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ea6:	3728      	adds	r7, #40	; 0x28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40020010 	.word	0x40020010
 8004eb0:	40020028 	.word	0x40020028
 8004eb4:	40020040 	.word	0x40020040
 8004eb8:	40020058 	.word	0x40020058
 8004ebc:	40020070 	.word	0x40020070
 8004ec0:	40020088 	.word	0x40020088
 8004ec4:	400200a0 	.word	0x400200a0
 8004ec8:	400200b8 	.word	0x400200b8
 8004ecc:	40020410 	.word	0x40020410
 8004ed0:	40020428 	.word	0x40020428
 8004ed4:	40020440 	.word	0x40020440
 8004ed8:	40020458 	.word	0x40020458
 8004edc:	40020470 	.word	0x40020470
 8004ee0:	40020488 	.word	0x40020488
 8004ee4:	400204a0 	.word	0x400204a0
 8004ee8:	400204b8 	.word	0x400204b8

08004eec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a42      	ldr	r2, [pc, #264]	; (8005004 <DMA_CalcBaseAndBitshift+0x118>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d04a      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a41      	ldr	r2, [pc, #260]	; (8005008 <DMA_CalcBaseAndBitshift+0x11c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d045      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a3f      	ldr	r2, [pc, #252]	; (800500c <DMA_CalcBaseAndBitshift+0x120>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d040      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a3e      	ldr	r2, [pc, #248]	; (8005010 <DMA_CalcBaseAndBitshift+0x124>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d03b      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a3c      	ldr	r2, [pc, #240]	; (8005014 <DMA_CalcBaseAndBitshift+0x128>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d036      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3b      	ldr	r2, [pc, #236]	; (8005018 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d031      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a39      	ldr	r2, [pc, #228]	; (800501c <DMA_CalcBaseAndBitshift+0x130>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d02c      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a38      	ldr	r2, [pc, #224]	; (8005020 <DMA_CalcBaseAndBitshift+0x134>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d027      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a36      	ldr	r2, [pc, #216]	; (8005024 <DMA_CalcBaseAndBitshift+0x138>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d022      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a35      	ldr	r2, [pc, #212]	; (8005028 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d01d      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a33      	ldr	r2, [pc, #204]	; (800502c <DMA_CalcBaseAndBitshift+0x140>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d018      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a32      	ldr	r2, [pc, #200]	; (8005030 <DMA_CalcBaseAndBitshift+0x144>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a30      	ldr	r2, [pc, #192]	; (8005034 <DMA_CalcBaseAndBitshift+0x148>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00e      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a2f      	ldr	r2, [pc, #188]	; (8005038 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d009      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a2d      	ldr	r2, [pc, #180]	; (800503c <DMA_CalcBaseAndBitshift+0x150>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d004      	beq.n	8004f94 <DMA_CalcBaseAndBitshift+0xa8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a2c      	ldr	r2, [pc, #176]	; (8005040 <DMA_CalcBaseAndBitshift+0x154>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d101      	bne.n	8004f98 <DMA_CalcBaseAndBitshift+0xac>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <DMA_CalcBaseAndBitshift+0xae>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d024      	beq.n	8004fe8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	3b10      	subs	r3, #16
 8004fa6:	4a27      	ldr	r2, [pc, #156]	; (8005044 <DMA_CalcBaseAndBitshift+0x158>)
 8004fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	4a24      	ldr	r2, [pc, #144]	; (8005048 <DMA_CalcBaseAndBitshift+0x15c>)
 8004fb8:	5cd3      	ldrb	r3, [r2, r3]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d908      	bls.n	8004fd8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4b1f      	ldr	r3, [pc, #124]	; (800504c <DMA_CalcBaseAndBitshift+0x160>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	1d1a      	adds	r2, r3, #4
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	659a      	str	r2, [r3, #88]	; 0x58
 8004fd6:	e00d      	b.n	8004ff4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4b1b      	ldr	r3, [pc, #108]	; (800504c <DMA_CalcBaseAndBitshift+0x160>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe6:	e005      	b.n	8004ff4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40020010 	.word	0x40020010
 8005008:	40020028 	.word	0x40020028
 800500c:	40020040 	.word	0x40020040
 8005010:	40020058 	.word	0x40020058
 8005014:	40020070 	.word	0x40020070
 8005018:	40020088 	.word	0x40020088
 800501c:	400200a0 	.word	0x400200a0
 8005020:	400200b8 	.word	0x400200b8
 8005024:	40020410 	.word	0x40020410
 8005028:	40020428 	.word	0x40020428
 800502c:	40020440 	.word	0x40020440
 8005030:	40020458 	.word	0x40020458
 8005034:	40020470 	.word	0x40020470
 8005038:	40020488 	.word	0x40020488
 800503c:	400204a0 	.word	0x400204a0
 8005040:	400204b8 	.word	0x400204b8
 8005044:	aaaaaaab 	.word	0xaaaaaaab
 8005048:	08015aec 	.word	0x08015aec
 800504c:	fffffc00 	.word	0xfffffc00

08005050 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d120      	bne.n	80050a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	2b03      	cmp	r3, #3
 800506a:	d858      	bhi.n	800511e <DMA_CheckFifoParam+0xce>
 800506c:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <DMA_CheckFifoParam+0x24>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	08005085 	.word	0x08005085
 8005078:	08005097 	.word	0x08005097
 800507c:	08005085 	.word	0x08005085
 8005080:	0800511f 	.word	0x0800511f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d048      	beq.n	8005122 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005094:	e045      	b.n	8005122 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800509e:	d142      	bne.n	8005126 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050a4:	e03f      	b.n	8005126 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ae:	d123      	bne.n	80050f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d838      	bhi.n	800512a <DMA_CheckFifoParam+0xda>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <DMA_CheckFifoParam+0x70>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050d1 	.word	0x080050d1
 80050c4:	080050d7 	.word	0x080050d7
 80050c8:	080050d1 	.word	0x080050d1
 80050cc:	080050e9 	.word	0x080050e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
        break;
 80050d4:	e030      	b.n	8005138 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d025      	beq.n	800512e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050e6:	e022      	b.n	800512e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050f0:	d11f      	bne.n	8005132 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050f6:	e01c      	b.n	8005132 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d902      	bls.n	8005106 <DMA_CheckFifoParam+0xb6>
 8005100:	2b03      	cmp	r3, #3
 8005102:	d003      	beq.n	800510c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005104:	e018      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	73fb      	strb	r3, [r7, #15]
        break;
 800510a:	e015      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00e      	beq.n	8005136 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
    break;
 800511c:	e00b      	b.n	8005136 <DMA_CheckFifoParam+0xe6>
        break;
 800511e:	bf00      	nop
 8005120:	e00a      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
        break;
 8005122:	bf00      	nop
 8005124:	e008      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
        break;
 8005126:	bf00      	nop
 8005128:	e006      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
        break;
 800512a:	bf00      	nop
 800512c:	e004      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
        break;
 800512e:	bf00      	nop
 8005130:	e002      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
        break;
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <DMA_CheckFifoParam+0xe8>
    break;
 8005136:	bf00      	nop
    }
  }

  return status;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop

08005148 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a38      	ldr	r2, [pc, #224]	; (800523c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d022      	beq.n	80051a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a36      	ldr	r2, [pc, #216]	; (8005240 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01d      	beq.n	80051a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a35      	ldr	r2, [pc, #212]	; (8005244 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d018      	beq.n	80051a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a33      	ldr	r2, [pc, #204]	; (8005248 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a32      	ldr	r2, [pc, #200]	; (800524c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00e      	beq.n	80051a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a30      	ldr	r2, [pc, #192]	; (8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d009      	beq.n	80051a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a2f      	ldr	r2, [pc, #188]	; (8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d004      	beq.n	80051a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a2d      	ldr	r2, [pc, #180]	; (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d101      	bne.n	80051aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01a      	beq.n	80051e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	3b08      	subs	r3, #8
 80051b8:	4a28      	ldr	r2, [pc, #160]	; (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4b26      	ldr	r3, [pc, #152]	; (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	461a      	mov	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a24      	ldr	r2, [pc, #144]	; (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	2201      	movs	r2, #1
 80051de:	409a      	lsls	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051e4:	e024      	b.n	8005230 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	3b10      	subs	r3, #16
 80051ee:	4a1e      	ldr	r2, [pc, #120]	; (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4a1c      	ldr	r2, [pc, #112]	; (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d806      	bhi.n	800520e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4a1b      	ldr	r2, [pc, #108]	; (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d902      	bls.n	800520e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3308      	adds	r3, #8
 800520c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4b18      	ldr	r3, [pc, #96]	; (8005274 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	461a      	mov	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a16      	ldr	r2, [pc, #88]	; (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005220:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	2201      	movs	r2, #1
 800522a:	409a      	lsls	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	58025408 	.word	0x58025408
 8005240:	5802541c 	.word	0x5802541c
 8005244:	58025430 	.word	0x58025430
 8005248:	58025444 	.word	0x58025444
 800524c:	58025458 	.word	0x58025458
 8005250:	5802546c 	.word	0x5802546c
 8005254:	58025480 	.word	0x58025480
 8005258:	58025494 	.word	0x58025494
 800525c:	cccccccd 	.word	0xcccccccd
 8005260:	16009600 	.word	0x16009600
 8005264:	58025880 	.word	0x58025880
 8005268:	aaaaaaab 	.word	0xaaaaaaab
 800526c:	400204b8 	.word	0x400204b8
 8005270:	4002040f 	.word	0x4002040f
 8005274:	10008200 	.word	0x10008200
 8005278:	40020880 	.word	0x40020880

0800527c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d04a      	beq.n	8005328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d847      	bhi.n	8005328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a25      	ldr	r2, [pc, #148]	; (8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d022      	beq.n	80052e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a24      	ldr	r2, [pc, #144]	; (8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d01d      	beq.n	80052e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a22      	ldr	r2, [pc, #136]	; (800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d018      	beq.n	80052e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a21      	ldr	r2, [pc, #132]	; (8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d013      	beq.n	80052e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1f      	ldr	r2, [pc, #124]	; (8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00e      	beq.n	80052e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d009      	beq.n	80052e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1c      	ldr	r2, [pc, #112]	; (800534c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d101      	bne.n	80052ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80052ec:	2300      	movs	r3, #0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4b17      	ldr	r3, [pc, #92]	; (8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	461a      	mov	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a15      	ldr	r2, [pc, #84]	; (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005304:	671a      	str	r2, [r3, #112]	; 0x70
 8005306:	e009      	b.n	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4b14      	ldr	r3, [pc, #80]	; (800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a11      	ldr	r2, [pc, #68]	; (8005360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800531a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3b01      	subs	r3, #1
 8005320:	2201      	movs	r2, #1
 8005322:	409a      	lsls	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	58025408 	.word	0x58025408
 8005338:	5802541c 	.word	0x5802541c
 800533c:	58025430 	.word	0x58025430
 8005340:	58025444 	.word	0x58025444
 8005344:	58025458 	.word	0x58025458
 8005348:	5802546c 	.word	0x5802546c
 800534c:	58025480 	.word	0x58025480
 8005350:	58025494 	.word	0x58025494
 8005354:	1600963f 	.word	0x1600963f
 8005358:	58025940 	.word	0x58025940
 800535c:	1000823f 	.word	0x1000823f
 8005360:	40020940 	.word	0x40020940

08005364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005364:	b480      	push	{r7}
 8005366:	b089      	sub	sp, #36	; 0x24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005372:	4b89      	ldr	r3, [pc, #548]	; (8005598 <HAL_GPIO_Init+0x234>)
 8005374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005376:	e194      	b.n	80056a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	2101      	movs	r1, #1
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	fa01 f303 	lsl.w	r3, r1, r3
 8005384:	4013      	ands	r3, r2
 8005386:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 8186 	beq.w	800569c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d00b      	beq.n	80053b0 <HAL_GPIO_Init+0x4c>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d007      	beq.n	80053b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053a4:	2b11      	cmp	r3, #17
 80053a6:	d003      	beq.n	80053b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b12      	cmp	r3, #18
 80053ae:	d130      	bne.n	8005412 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	2203      	movs	r2, #3
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4013      	ands	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053e6:	2201      	movs	r2, #1
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	43db      	mvns	r3, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4013      	ands	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	091b      	lsrs	r3, r3, #4
 80053fc:	f003 0201 	and.w	r2, r3, #1
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	4313      	orrs	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	2203      	movs	r2, #3
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	43db      	mvns	r3, r3
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	4013      	ands	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	4313      	orrs	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d003      	beq.n	8005452 <HAL_GPIO_Init+0xee>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b12      	cmp	r3, #18
 8005450:	d123      	bne.n	800549a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	08da      	lsrs	r2, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3208      	adds	r2, #8
 800545a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800545e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	220f      	movs	r2, #15
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4013      	ands	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4313      	orrs	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	08da      	lsrs	r2, r3, #3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3208      	adds	r2, #8
 8005494:	69b9      	ldr	r1, [r7, #24]
 8005496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	2203      	movs	r2, #3
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43db      	mvns	r3, r3
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	4013      	ands	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f003 0203 	and.w	r2, r3, #3
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80e0 	beq.w	800569c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054dc:	4b2f      	ldr	r3, [pc, #188]	; (800559c <HAL_GPIO_Init+0x238>)
 80054de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054e2:	4a2e      	ldr	r2, [pc, #184]	; (800559c <HAL_GPIO_Init+0x238>)
 80054e4:	f043 0302 	orr.w	r3, r3, #2
 80054e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80054ec:	4b2b      	ldr	r3, [pc, #172]	; (800559c <HAL_GPIO_Init+0x238>)
 80054ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054fa:	4a29      	ldr	r2, [pc, #164]	; (80055a0 <HAL_GPIO_Init+0x23c>)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	089b      	lsrs	r3, r3, #2
 8005500:	3302      	adds	r3, #2
 8005502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	220f      	movs	r2, #15
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4013      	ands	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a20      	ldr	r2, [pc, #128]	; (80055a4 <HAL_GPIO_Init+0x240>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d052      	beq.n	80055cc <HAL_GPIO_Init+0x268>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a1f      	ldr	r2, [pc, #124]	; (80055a8 <HAL_GPIO_Init+0x244>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d031      	beq.n	8005592 <HAL_GPIO_Init+0x22e>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <HAL_GPIO_Init+0x248>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d02b      	beq.n	800558e <HAL_GPIO_Init+0x22a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1d      	ldr	r2, [pc, #116]	; (80055b0 <HAL_GPIO_Init+0x24c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d025      	beq.n	800558a <HAL_GPIO_Init+0x226>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a1c      	ldr	r2, [pc, #112]	; (80055b4 <HAL_GPIO_Init+0x250>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01f      	beq.n	8005586 <HAL_GPIO_Init+0x222>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a1b      	ldr	r2, [pc, #108]	; (80055b8 <HAL_GPIO_Init+0x254>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d019      	beq.n	8005582 <HAL_GPIO_Init+0x21e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a1a      	ldr	r2, [pc, #104]	; (80055bc <HAL_GPIO_Init+0x258>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <HAL_GPIO_Init+0x21a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a19      	ldr	r2, [pc, #100]	; (80055c0 <HAL_GPIO_Init+0x25c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00d      	beq.n	800557a <HAL_GPIO_Init+0x216>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <HAL_GPIO_Init+0x260>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d007      	beq.n	8005576 <HAL_GPIO_Init+0x212>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a17      	ldr	r2, [pc, #92]	; (80055c8 <HAL_GPIO_Init+0x264>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d101      	bne.n	8005572 <HAL_GPIO_Init+0x20e>
 800556e:	2309      	movs	r3, #9
 8005570:	e02d      	b.n	80055ce <HAL_GPIO_Init+0x26a>
 8005572:	230a      	movs	r3, #10
 8005574:	e02b      	b.n	80055ce <HAL_GPIO_Init+0x26a>
 8005576:	2308      	movs	r3, #8
 8005578:	e029      	b.n	80055ce <HAL_GPIO_Init+0x26a>
 800557a:	2307      	movs	r3, #7
 800557c:	e027      	b.n	80055ce <HAL_GPIO_Init+0x26a>
 800557e:	2306      	movs	r3, #6
 8005580:	e025      	b.n	80055ce <HAL_GPIO_Init+0x26a>
 8005582:	2305      	movs	r3, #5
 8005584:	e023      	b.n	80055ce <HAL_GPIO_Init+0x26a>
 8005586:	2304      	movs	r3, #4
 8005588:	e021      	b.n	80055ce <HAL_GPIO_Init+0x26a>
 800558a:	2303      	movs	r3, #3
 800558c:	e01f      	b.n	80055ce <HAL_GPIO_Init+0x26a>
 800558e:	2302      	movs	r3, #2
 8005590:	e01d      	b.n	80055ce <HAL_GPIO_Init+0x26a>
 8005592:	2301      	movs	r3, #1
 8005594:	e01b      	b.n	80055ce <HAL_GPIO_Init+0x26a>
 8005596:	bf00      	nop
 8005598:	58000080 	.word	0x58000080
 800559c:	58024400 	.word	0x58024400
 80055a0:	58000400 	.word	0x58000400
 80055a4:	58020000 	.word	0x58020000
 80055a8:	58020400 	.word	0x58020400
 80055ac:	58020800 	.word	0x58020800
 80055b0:	58020c00 	.word	0x58020c00
 80055b4:	58021000 	.word	0x58021000
 80055b8:	58021400 	.word	0x58021400
 80055bc:	58021800 	.word	0x58021800
 80055c0:	58021c00 	.word	0x58021c00
 80055c4:	58022000 	.word	0x58022000
 80055c8:	58022400 	.word	0x58022400
 80055cc:	2300      	movs	r3, #0
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	f002 0203 	and.w	r2, r2, #3
 80055d4:	0092      	lsls	r2, r2, #2
 80055d6:	4093      	lsls	r3, r2
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4313      	orrs	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055de:	4938      	ldr	r1, [pc, #224]	; (80056c0 <HAL_GPIO_Init+0x35c>)
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	3302      	adds	r3, #2
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	43db      	mvns	r3, r3
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4013      	ands	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	43db      	mvns	r3, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4013      	ands	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	43db      	mvns	r3, r3
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	4013      	ands	r3, r2
 8005650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800566e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	43db      	mvns	r3, r3
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4013      	ands	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	3301      	adds	r3, #1
 80056a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f47f ae63 	bne.w	8005378 <HAL_GPIO_Init+0x14>
  }
}
 80056b2:	bf00      	nop
 80056b4:	3724      	adds	r7, #36	; 0x24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	58000400 	.word	0x58000400

080056c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	887b      	ldrh	r3, [r7, #2]
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
 80056e0:	e001      	b.n	80056e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056f6:	b08f      	sub	sp, #60	; 0x3c
 80056f8:	af0a      	add	r7, sp, #40	; 0x28
 80056fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e116      	b.n	8005934 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f00f f9d1 	bl	8014ac8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2203      	movs	r2, #3
 800572a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f008 faf8 	bl	800dd3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	687e      	ldr	r6, [r7, #4]
 8005752:	466d      	mov	r5, sp
 8005754:	f106 0410 	add.w	r4, r6, #16
 8005758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800575a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800575c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800575e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005760:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005764:	e885 0003 	stmia.w	r5, {r0, r1}
 8005768:	1d33      	adds	r3, r6, #4
 800576a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800576c:	6838      	ldr	r0, [r7, #0]
 800576e:	f008 f9cf 	bl	800db10 <USB_CoreInit>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e0d7      	b.n	8005934 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2100      	movs	r1, #0
 800578a:	4618      	mov	r0, r3
 800578c:	f008 fae6 	bl	800dd5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005790:	2300      	movs	r3, #0
 8005792:	73fb      	strb	r3, [r7, #15]
 8005794:	e04a      	b.n	800582c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005796:	7bfa      	ldrb	r2, [r7, #15]
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	440b      	add	r3, r1
 80057a4:	333d      	adds	r3, #61	; 0x3d
 80057a6:	2201      	movs	r2, #1
 80057a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057aa:	7bfa      	ldrb	r2, [r7, #15]
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	1a9b      	subs	r3, r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	333c      	adds	r3, #60	; 0x3c
 80057ba:	7bfa      	ldrb	r2, [r7, #15]
 80057bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80057be:	7bfa      	ldrb	r2, [r7, #15]
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	b298      	uxth	r0, r3
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	440b      	add	r3, r1
 80057d0:	3342      	adds	r3, #66	; 0x42
 80057d2:	4602      	mov	r2, r0
 80057d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80057d6:	7bfa      	ldrb	r2, [r7, #15]
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	333f      	adds	r3, #63	; 0x3f
 80057e6:	2200      	movs	r2, #0
 80057e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057ea:	7bfa      	ldrb	r2, [r7, #15]
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	1a9b      	subs	r3, r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	3344      	adds	r3, #68	; 0x44
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057fe:	7bfa      	ldrb	r2, [r7, #15]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3348      	adds	r3, #72	; 0x48
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005812:	7bfa      	ldrb	r2, [r7, #15]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	3350      	adds	r3, #80	; 0x50
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	3301      	adds	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
 800582c:	7bfa      	ldrb	r2, [r7, #15]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d3af      	bcc.n	8005796 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
 800583a:	e044      	b.n	80058c6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800583c:	7bfa      	ldrb	r2, [r7, #15]
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	4613      	mov	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800584e:	2200      	movs	r2, #0
 8005850:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005852:	7bfa      	ldrb	r2, [r7, #15]
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	1a9b      	subs	r3, r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005864:	7bfa      	ldrb	r2, [r7, #15]
 8005866:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005868:	7bfa      	ldrb	r2, [r7, #15]
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800587e:	7bfa      	ldrb	r2, [r7, #15]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	440b      	add	r3, r1
 800588c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005894:	7bfa      	ldrb	r2, [r7, #15]
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4613      	mov	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058aa:	7bfa      	ldrb	r2, [r7, #15]
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	3301      	adds	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
 80058c6:	7bfa      	ldrb	r2, [r7, #15]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d3b5      	bcc.n	800583c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	603b      	str	r3, [r7, #0]
 80058d6:	687e      	ldr	r6, [r7, #4]
 80058d8:	466d      	mov	r5, sp
 80058da:	f106 0410 	add.w	r4, r6, #16
 80058de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80058ee:	1d33      	adds	r3, r6, #4
 80058f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058f2:	6838      	ldr	r0, [r7, #0]
 80058f4:	f008 fa5c 	bl	800ddb0 <USB_DevInit>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d005      	beq.n	800590a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e014      	b.n	8005934 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f001 f892 	bl	8006a4c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f009 fa9b 	bl	800ee68 <USB_DevDisconnect>

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800593c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_PCD_Start+0x1c>
 8005954:	2302      	movs	r3, #2
 8005956:	e020      	b.n	800599a <HAL_PCD_Start+0x5e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005964:	2b01      	cmp	r3, #1
 8005966:	d109      	bne.n	800597c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800596c:	2b01      	cmp	r3, #1
 800596e:	d005      	beq.n	800597c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f009 fa59 	bl	800ee38 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f008 f9c4 	bl	800dd18 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059a2:	b590      	push	{r4, r7, lr}
 80059a4:	b08d      	sub	sp, #52	; 0x34
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f009 fb00 	bl	800efbe <USB_GetMode>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f040 83ca 	bne.w	800615a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f009 fa64 	bl	800ee98 <USB_ReadInterrupts>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 83c0 	beq.w	8006158 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f009 fa5b 	bl	800ee98 <USB_ReadInterrupts>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d107      	bne.n	80059fc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f002 0202 	and.w	r2, r2, #2
 80059fa:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f009 fa49 	bl	800ee98 <USB_ReadInterrupts>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d161      	bne.n	8005ad4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0210 	bic.w	r2, r2, #16
 8005a1e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	f003 020f 	and.w	r2, r3, #15
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	0c5b      	lsrs	r3, r3, #17
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d124      	bne.n	8005a96 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005a52:	4013      	ands	r3, r2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d035      	beq.n	8005ac4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	091b      	lsrs	r3, r3, #4
 8005a60:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6a38      	ldr	r0, [r7, #32]
 8005a6c:	f009 f8c1 	bl	800ebf2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a7c:	441a      	add	r2, r3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	091b      	lsrs	r3, r3, #4
 8005a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a8e:	441a      	add	r2, r3
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	619a      	str	r2, [r3, #24]
 8005a94:	e016      	b.n	8005ac4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	0c5b      	lsrs	r3, r3, #17
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	2b06      	cmp	r3, #6
 8005aa0:	d110      	bne.n	8005ac4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6a38      	ldr	r0, [r7, #32]
 8005aae:	f009 f8a0 	bl	800ebf2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005abe:	441a      	add	r2, r3
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699a      	ldr	r2, [r3, #24]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0210 	orr.w	r2, r2, #16
 8005ad2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f009 f9dd 	bl	800ee98 <USB_ReadInterrupts>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ae4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ae8:	d16e      	bne.n	8005bc8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f009 f9e3 	bl	800eebe <USB_ReadDevAllOutEpInterrupt>
 8005af8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005afa:	e062      	b.n	8005bc2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d057      	beq.n	8005bb6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	4611      	mov	r1, r2
 8005b10:	4618      	mov	r0, r3
 8005b12:	f009 fa08 	bl	800ef26 <USB_ReadDevOutEPInterrupt>
 8005b16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2301      	movs	r3, #1
 8005b32:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fdde 	bl	80066f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00c      	beq.n	8005b60 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b52:	461a      	mov	r2, r3
 8005b54:	2308      	movs	r3, #8
 8005b56:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fed8 	bl	8006910 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b76:	461a      	mov	r2, r3
 8005b78:	2310      	movs	r3, #16
 8005b7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d008      	beq.n	8005b98 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b92:	461a      	mov	r2, r3
 8005b94:	2320      	movs	r3, #32
 8005b96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bb4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	3301      	adds	r3, #1
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	085b      	lsrs	r3, r3, #1
 8005bc0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d199      	bne.n	8005afc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f009 f963 	bl	800ee98 <USB_ReadInterrupts>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bdc:	f040 80c0 	bne.w	8005d60 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f009 f984 	bl	800eef2 <USB_ReadDevAllInEpInterrupt>
 8005bea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005bf0:	e0b2      	b.n	8005d58 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 80a7 	beq.w	8005d4c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	4611      	mov	r1, r2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f009 f9aa 	bl	800ef62 <USB_ReadDevInEPInterrupt>
 8005c0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d057      	beq.n	8005cca <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	2201      	movs	r2, #1
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	43db      	mvns	r3, r3
 8005c34:	69f9      	ldr	r1, [r7, #28]
 8005c36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d132      	bne.n	8005cbe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	1a9b      	subs	r3, r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	3348      	adds	r3, #72	; 0x48
 8005c68:	6819      	ldr	r1, [r3, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6e:	4613      	mov	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4403      	add	r3, r0
 8005c78:	3344      	adds	r3, #68	; 0x44
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4419      	add	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c82:	4613      	mov	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4403      	add	r3, r0
 8005c8c:	3348      	adds	r3, #72	; 0x48
 8005c8e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d113      	bne.n	8005cbe <HAL_PCD_IRQHandler+0x31c>
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3350      	adds	r3, #80	; 0x50
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d108      	bne.n	8005cbe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2101      	movs	r1, #1
 8005cba:	f009 f9b3 	bl	800f024 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f00e ff7e 	bl	8014bc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d008      	beq.n	8005ce6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d008      	beq.n	8005d02 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	2310      	movs	r3, #16
 8005d00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	461a      	mov	r2, r3
 8005d1a:	2340      	movs	r3, #64	; 0x40
 8005d1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d008      	beq.n	8005d3a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d34:	461a      	mov	r2, r3
 8005d36:	2302      	movs	r3, #2
 8005d38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fc48 	bl	80065dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	3301      	adds	r3, #1
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f47f af49 	bne.w	8005bf2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f009 f897 	bl	800ee98 <USB_ReadInterrupts>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d74:	d122      	bne.n	8005dbc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d84:	f023 0301 	bic.w	r3, r3, #1
 8005d88:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d108      	bne.n	8005da6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fe78 	bl	8006a94 <HAL_PCDEx_LPM_Callback>
 8005da4:	e002      	b.n	8005dac <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f00e ff84 	bl	8014cb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f009 f869 	bl	800ee98 <USB_ReadInterrupts>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd0:	d112      	bne.n	8005df8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d102      	bne.n	8005de8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f00e ff40 	bl	8014c68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695a      	ldr	r2, [r3, #20]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005df6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f009 f84b 	bl	800ee98 <USB_ReadInterrupts>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e0c:	d121      	bne.n	8005e52 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695a      	ldr	r2, [r3, #20]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005e1c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d111      	bne.n	8005e4c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e36:	089b      	lsrs	r3, r3, #2
 8005e38:	f003 020f 	and.w	r2, r3, #15
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e42:	2101      	movs	r1, #1
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fe25 	bl	8006a94 <HAL_PCDEx_LPM_Callback>
 8005e4a:	e002      	b.n	8005e52 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f00e ff0b 	bl	8014c68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f009 f81e 	bl	800ee98 <USB_ReadInterrupts>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e66:	f040 80c7 	bne.w	8005ff8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2110      	movs	r1, #16
 8005e84:	4618      	mov	r0, r3
 8005e86:	f008 f8f1 	bl	800e06c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e8e:	e056      	b.n	8005f3e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ea2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ec2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ede:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ee2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ef6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f36:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d3a3      	bcc.n	8005e90 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f56:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005f5a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d016      	beq.n	8005f92 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f74:	f043 030b 	orr.w	r3, r3, #11
 8005f78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f8a:	f043 030b 	orr.w	r3, r3, #11
 8005f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8005f90:	e015      	b.n	8005fbe <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f98:	695a      	ldr	r2, [r3, #20]
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	f242 032b 	movw	r3, #8235	; 0x202b
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fb8:	f043 030b 	orr.w	r3, r3, #11
 8005fbc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fcc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fd0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f009 f81e 	bl	800f024 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f008 ff4b 	bl	800ee98 <USB_ReadInterrupts>
 8006002:	4603      	mov	r3, r0
 8006004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800600c:	d124      	bne.n	8006058 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f008 ffe2 	bl	800efdc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f008 f886 	bl	800e12e <USB_GetDevSpeed>
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681c      	ldr	r4, [r3, #0]
 800602e:	f001 fcbf 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 8006032:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006038:	b2db      	uxtb	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	4620      	mov	r0, r4
 800603e:	f007 fdc9 	bl	800dbd4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f00e fde7 	bl	8014c16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695a      	ldr	r2, [r3, #20]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006056:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f008 ff1b 	bl	800ee98 <USB_ReadInterrupts>
 8006062:	4603      	mov	r3, r0
 8006064:	f003 0308 	and.w	r3, r3, #8
 8006068:	2b08      	cmp	r3, #8
 800606a:	d10a      	bne.n	8006082 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f00e fdc4 	bl	8014bfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f002 0208 	and.w	r2, r2, #8
 8006080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f008 ff06 	bl	800ee98 <USB_ReadInterrupts>
 800608c:	4603      	mov	r3, r0
 800608e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006096:	d10f      	bne.n	80060b8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f00e fe26 	bl	8014cf4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695a      	ldr	r2, [r3, #20]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80060b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f008 feeb 	bl	800ee98 <USB_ReadInterrupts>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060cc:	d10f      	bne.n	80060ee <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f00e fdf9 	bl	8014cd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695a      	ldr	r2, [r3, #20]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80060ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f008 fed0 	bl	800ee98 <USB_ReadInterrupts>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006102:	d10a      	bne.n	800611a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f00e fe07 	bl	8014d18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f008 feba 	bl	800ee98 <USB_ReadInterrupts>
 8006124:	4603      	mov	r3, r0
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b04      	cmp	r3, #4
 800612c:	d115      	bne.n	800615a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f00e fdf7 	bl	8014d34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6859      	ldr	r1, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
 8006156:	e000      	b.n	800615a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006158:	bf00      	nop
    }
  }
}
 800615a:	3734      	adds	r7, #52	; 0x34
 800615c:	46bd      	mov	sp, r7
 800615e:	bd90      	pop	{r4, r7, pc}

08006160 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_PCD_SetAddress+0x1a>
 8006176:	2302      	movs	r3, #2
 8006178:	e013      	b.n	80061a2 <HAL_PCD_SetAddress+0x42>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	78fa      	ldrb	r2, [r7, #3]
 8006190:	4611      	mov	r1, r2
 8006192:	4618      	mov	r0, r3
 8006194:	f008 fe2a 	bl	800edec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	4608      	mov	r0, r1
 80061b4:	4611      	mov	r1, r2
 80061b6:	461a      	mov	r2, r3
 80061b8:	4603      	mov	r3, r0
 80061ba:	70fb      	strb	r3, [r7, #3]
 80061bc:	460b      	mov	r3, r1
 80061be:	803b      	strh	r3, [r7, #0]
 80061c0:	4613      	mov	r3, r2
 80061c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80061c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	da0f      	bge.n	80061f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	f003 020f 	and.w	r2, r3, #15
 80061d6:	4613      	mov	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	3338      	adds	r3, #56	; 0x38
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	3304      	adds	r3, #4
 80061e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	705a      	strb	r2, [r3, #1]
 80061ee:	e00f      	b.n	8006210 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	f003 020f 	and.w	r2, r3, #15
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	4413      	add	r3, r2
 8006206:	3304      	adds	r3, #4
 8006208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	b2da      	uxtb	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800621c:	883a      	ldrh	r2, [r7, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	78ba      	ldrb	r2, [r7, #2]
 8006226:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800623a:	78bb      	ldrb	r3, [r7, #2]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d102      	bne.n	8006246 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_PCD_EP_Open+0xaa>
 8006250:	2302      	movs	r3, #2
 8006252:	e00e      	b.n	8006272 <HAL_PCD_EP_Open+0xc8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68f9      	ldr	r1, [r7, #12]
 8006262:	4618      	mov	r0, r3
 8006264:	f007 ff88 	bl	800e178 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006270:	7afb      	ldrb	r3, [r7, #11]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800628a:	2b00      	cmp	r3, #0
 800628c:	da0f      	bge.n	80062ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800628e:	78fb      	ldrb	r3, [r7, #3]
 8006290:	f003 020f 	and.w	r2, r3, #15
 8006294:	4613      	mov	r3, r2
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	3338      	adds	r3, #56	; 0x38
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	4413      	add	r3, r2
 80062a2:	3304      	adds	r3, #4
 80062a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	705a      	strb	r2, [r3, #1]
 80062ac:	e00f      	b.n	80062ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	f003 020f 	and.w	r2, r3, #15
 80062b4:	4613      	mov	r3, r2
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	1a9b      	subs	r3, r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	4413      	add	r3, r2
 80062c4:	3304      	adds	r3, #4
 80062c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_PCD_EP_Close+0x6e>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e00e      	b.n	8006306 <HAL_PCD_EP_Close+0x8c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68f9      	ldr	r1, [r7, #12]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f007 ffc6 	bl	800e288 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b086      	sub	sp, #24
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	460b      	mov	r3, r1
 800631c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800631e:	7afb      	ldrb	r3, [r7, #11]
 8006320:	f003 020f 	and.w	r2, r3, #15
 8006324:	4613      	mov	r3, r2
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	1a9b      	subs	r3, r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4413      	add	r3, r2
 8006334:	3304      	adds	r3, #4
 8006336:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2200      	movs	r2, #0
 8006348:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2200      	movs	r2, #0
 800634e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	b2da      	uxtb	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d102      	bne.n	800636a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800636a:	7afb      	ldrb	r3, [r7, #11]
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	2b00      	cmp	r3, #0
 8006372:	d109      	bne.n	8006388 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	6979      	ldr	r1, [r7, #20]
 8006382:	f008 faa9 	bl	800e8d8 <USB_EP0StartXfer>
 8006386:	e008      	b.n	800639a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	6979      	ldr	r1, [r7, #20]
 8006396:	f008 f853 	bl	800e440 <USB_EPStartXfer>
  }

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	f003 020f 	and.w	r2, r3, #15
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80063c6:	681b      	ldr	r3, [r3, #0]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	607a      	str	r2, [r7, #4]
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	460b      	mov	r3, r1
 80063e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063e4:	7afb      	ldrb	r3, [r7, #11]
 80063e6:	f003 020f 	and.w	r2, r3, #15
 80063ea:	4613      	mov	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	3338      	adds	r3, #56	; 0x38
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	3304      	adds	r3, #4
 80063fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2200      	movs	r2, #0
 800640c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2201      	movs	r2, #1
 8006412:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006414:	7afb      	ldrb	r3, [r7, #11]
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	b2da      	uxtb	r2, r3
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d102      	bne.n	800642e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800642e:	7afb      	ldrb	r3, [r7, #11]
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	2b00      	cmp	r3, #0
 8006436:	d109      	bne.n	800644c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	461a      	mov	r2, r3
 8006444:	6979      	ldr	r1, [r7, #20]
 8006446:	f008 fa47 	bl	800e8d8 <USB_EP0StartXfer>
 800644a:	e008      	b.n	800645e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	6979      	ldr	r1, [r7, #20]
 800645a:	f007 fff1 	bl	800e440 <USB_EPStartXfer>
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	f003 020f 	and.w	r2, r3, #15
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	429a      	cmp	r2, r3
 8006480:	d901      	bls.n	8006486 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e050      	b.n	8006528 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800648a:	2b00      	cmp	r3, #0
 800648c:	da0f      	bge.n	80064ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	f003 020f 	and.w	r2, r3, #15
 8006494:	4613      	mov	r3, r2
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	1a9b      	subs	r3, r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	3338      	adds	r3, #56	; 0x38
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	3304      	adds	r3, #4
 80064a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	705a      	strb	r2, [r3, #1]
 80064ac:	e00d      	b.n	80064ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	4613      	mov	r3, r2
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	4413      	add	r3, r2
 80064c0:	3304      	adds	r3, #4
 80064c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d101      	bne.n	80064ea <HAL_PCD_EP_SetStall+0x82>
 80064e6:	2302      	movs	r3, #2
 80064e8:	e01e      	b.n	8006528 <HAL_PCD_EP_SetStall+0xc0>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68f9      	ldr	r1, [r7, #12]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f008 fba3 	bl	800ec44 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	b2d9      	uxtb	r1, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006518:	461a      	mov	r2, r3
 800651a:	f008 fd83 	bl	800f024 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	f003 020f 	and.w	r2, r3, #15
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	429a      	cmp	r2, r3
 8006548:	d901      	bls.n	800654e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e042      	b.n	80065d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800654e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006552:	2b00      	cmp	r3, #0
 8006554:	da0f      	bge.n	8006576 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	f003 020f 	and.w	r2, r3, #15
 800655c:	4613      	mov	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	1a9b      	subs	r3, r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	3338      	adds	r3, #56	; 0x38
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	4413      	add	r3, r2
 800656a:	3304      	adds	r3, #4
 800656c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	705a      	strb	r2, [r3, #1]
 8006574:	e00f      	b.n	8006596 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	f003 020f 	and.w	r2, r3, #15
 800657c:	4613      	mov	r3, r2
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	4413      	add	r3, r2
 800658c:	3304      	adds	r3, #4
 800658e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_PCD_EP_ClrStall+0x86>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e00e      	b.n	80065d4 <HAL_PCD_EP_ClrStall+0xa4>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f008 fbab 	bl	800ed20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	; 0x28
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	4613      	mov	r3, r2
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	3338      	adds	r3, #56	; 0x38
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	4413      	add	r3, r2
 8006600:	3304      	adds	r3, #4
 8006602:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	429a      	cmp	r2, r3
 800660e:	d901      	bls.n	8006614 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e06c      	b.n	80066ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	695a      	ldr	r2, [r3, #20]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	429a      	cmp	r2, r3
 8006628:	d902      	bls.n	8006630 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	3303      	adds	r3, #3
 8006634:	089b      	lsrs	r3, r3, #2
 8006636:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006638:	e02b      	b.n	8006692 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	695a      	ldr	r2, [r3, #20]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	429a      	cmp	r2, r3
 800664e:	d902      	bls.n	8006656 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	3303      	adds	r3, #3
 800665a:	089b      	lsrs	r3, r3, #2
 800665c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	68d9      	ldr	r1, [r3, #12]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800666e:	b2db      	uxtb	r3, r3
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	4603      	mov	r3, r0
 8006674:	6978      	ldr	r0, [r7, #20]
 8006676:	f008 fa87 	bl	800eb88 <USB_WritePacket>

    ep->xfer_buff  += len;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	441a      	add	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	441a      	add	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d809      	bhi.n	80066bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	699a      	ldr	r2, [r3, #24]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d203      	bcs.n	80066bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1be      	bne.n	800663a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d811      	bhi.n	80066ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	2201      	movs	r2, #1
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	6939      	ldr	r1, [r7, #16]
 80066e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066e8:	4013      	ands	r3, r2
 80066ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3720      	adds	r7, #32
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	333c      	adds	r3, #60	; 0x3c
 8006710:	3304      	adds	r3, #4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b01      	cmp	r3, #1
 800672c:	f040 80a0 	bne.w	8006870 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d015      	beq.n	8006766 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4a72      	ldr	r2, [pc, #456]	; (8006908 <PCD_EP_OutXfrComplete_int+0x210>)
 800673e:	4293      	cmp	r3, r2
 8006740:	f240 80dd 	bls.w	80068fe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 80d7 	beq.w	80068fe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675c:	461a      	mov	r2, r3
 800675e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006762:	6093      	str	r3, [r2, #8]
 8006764:	e0cb      	b.n	80068fe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d009      	beq.n	8006784 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	461a      	mov	r2, r3
 800677e:	2320      	movs	r3, #32
 8006780:	6093      	str	r3, [r2, #8]
 8006782:	e0bc      	b.n	80068fe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	f040 80b7 	bne.w	80068fe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4a5d      	ldr	r2, [pc, #372]	; (8006908 <PCD_EP_OutXfrComplete_int+0x210>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d90f      	bls.n	80067b8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ae:	461a      	mov	r2, r3
 80067b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b4:	6093      	str	r3, [r2, #8]
 80067b6:	e0a2      	b.n	80068fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	1a9b      	subs	r3, r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80067ca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	0159      	lsls	r1, r3, #5
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	440b      	add	r3, r1
 80067d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80067de:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	4613      	mov	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	1a9b      	subs	r3, r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4403      	add	r3, r0
 80067ee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80067f2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	4613      	mov	r3, r2
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	1a9b      	subs	r3, r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006806:	6819      	ldr	r1, [r3, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	4613      	mov	r3, r2
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4403      	add	r3, r0
 8006816:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4419      	add	r1, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	4613      	mov	r3, r2
 8006824:	00db      	lsls	r3, r3, #3
 8006826:	1a9b      	subs	r3, r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4403      	add	r3, r0
 800682c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006830:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d114      	bne.n	8006862 <PCD_EP_OutXfrComplete_int+0x16a>
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	1a9b      	subs	r3, r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d108      	bne.n	8006862 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800685a:	461a      	mov	r2, r3
 800685c:	2101      	movs	r1, #1
 800685e:	f008 fbe1 	bl	800f024 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	b2db      	uxtb	r3, r3
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f00e f991 	bl	8014b90 <HAL_PCD_DataOutStageCallback>
 800686e:	e046      	b.n	80068fe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a26      	ldr	r2, [pc, #152]	; (800690c <PCD_EP_OutXfrComplete_int+0x214>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d124      	bne.n	80068c2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688e:	461a      	mov	r2, r3
 8006890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006894:	6093      	str	r3, [r2, #8]
 8006896:	e032      	b.n	80068fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d008      	beq.n	80068b4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ae:	461a      	mov	r2, r3
 80068b0:	2320      	movs	r3, #32
 80068b2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f00e f968 	bl	8014b90 <HAL_PCD_DataOutStageCallback>
 80068c0:	e01d      	b.n	80068fe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d114      	bne.n	80068f2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	4613      	mov	r3, r2
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	1a9b      	subs	r3, r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	440b      	add	r3, r1
 80068d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d108      	bne.n	80068f2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068ea:	461a      	mov	r2, r3
 80068ec:	2100      	movs	r1, #0
 80068ee:	f008 fb99 	bl	800f024 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f00e f949 	bl	8014b90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	4f54300a 	.word	0x4f54300a
 800690c:	4f54310a 	.word	0x4f54310a

08006910 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	333c      	adds	r3, #60	; 0x3c
 8006928:	3304      	adds	r3, #4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4a15      	ldr	r2, [pc, #84]	; (8006998 <PCD_EP_OutSetupPacket_int+0x88>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d90e      	bls.n	8006964 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	461a      	mov	r2, r3
 800695e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006962:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f00e f901 	bl	8014b6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4a0a      	ldr	r2, [pc, #40]	; (8006998 <PCD_EP_OutSetupPacket_int+0x88>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d90c      	bls.n	800698c <PCD_EP_OutSetupPacket_int+0x7c>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d108      	bne.n	800698c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006984:	461a      	mov	r2, r3
 8006986:	2101      	movs	r1, #1
 8006988:	f008 fb4c 	bl	800f024 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	4f54300a 	.word	0x4f54300a

0800699c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	70fb      	strb	r3, [r7, #3]
 80069a8:	4613      	mov	r3, r2
 80069aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d107      	bne.n	80069ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80069ba:	883b      	ldrh	r3, [r7, #0]
 80069bc:	0419      	lsls	r1, r3, #16
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28
 80069c8:	e028      	b.n	8006a1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d0:	0c1b      	lsrs	r3, r3, #16
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	4413      	add	r3, r2
 80069d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	73fb      	strb	r3, [r7, #15]
 80069dc:	e00d      	b.n	80069fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	3340      	adds	r3, #64	; 0x40
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	0c1b      	lsrs	r3, r3, #16
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	3301      	adds	r3, #1
 80069f8:	73fb      	strb	r3, [r7, #15]
 80069fa:	7bfa      	ldrb	r2, [r7, #15]
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d3ec      	bcc.n	80069de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a04:	883b      	ldrh	r3, [r7, #0]
 8006a06:	0418      	lsls	r0, r3, #16
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6819      	ldr	r1, [r3, #0]
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	4302      	orrs	r2, r0
 8006a14:	3340      	adds	r3, #64	; 0x40
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	887a      	ldrh	r2, [r7, #2]
 8006a3c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a7a:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <HAL_PCDEx_ActivateLPM+0x44>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	10000003 	.word	0x10000003

08006a94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ab4:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <HAL_PWREx_ConfigSupply+0x70>)
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d00a      	beq.n	8006ad6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006ac0:	4b16      	ldr	r3, [pc, #88]	; (8006b1c <HAL_PWREx_ConfigSupply+0x70>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f003 0307 	and.w	r3, r3, #7
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d001      	beq.n	8006ad2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e01f      	b.n	8006b12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e01d      	b.n	8006b12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006ad6:	4b11      	ldr	r3, [pc, #68]	; (8006b1c <HAL_PWREx_ConfigSupply+0x70>)
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f023 0207 	bic.w	r2, r3, #7
 8006ade:	490f      	ldr	r1, [pc, #60]	; (8006b1c <HAL_PWREx_ConfigSupply+0x70>)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006ae6:	f7fb fbe5 	bl	80022b4 <HAL_GetTick>
 8006aea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006aec:	e009      	b.n	8006b02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006aee:	f7fb fbe1 	bl	80022b4 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006afc:	d901      	bls.n	8006b02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e007      	b.n	8006b12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b02:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <HAL_PWREx_ConfigSupply+0x70>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b0e:	d1ee      	bne.n	8006aee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	58024800 	.word	0x58024800

08006b20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006b24:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	4a04      	ldr	r2, [pc, #16]	; (8006b3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b2e:	60d3      	str	r3, [r2, #12]
}
 8006b30:	bf00      	nop
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	58024800 	.word	0x58024800

08006b40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08c      	sub	sp, #48	; 0x30
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e3ff      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 8087 	beq.w	8006c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b60:	4b99      	ldr	r3, [pc, #612]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b6a:	4b97      	ldr	r3, [pc, #604]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	2b10      	cmp	r3, #16
 8006b74:	d007      	beq.n	8006b86 <HAL_RCC_OscConfig+0x46>
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	2b18      	cmp	r3, #24
 8006b7a:	d110      	bne.n	8006b9e <HAL_RCC_OscConfig+0x5e>
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d10b      	bne.n	8006b9e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b86:	4b90      	ldr	r3, [pc, #576]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d06c      	beq.n	8006c6c <HAL_RCC_OscConfig+0x12c>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d168      	bne.n	8006c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e3d9      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba6:	d106      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x76>
 8006ba8:	4b87      	ldr	r3, [pc, #540]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a86      	ldr	r2, [pc, #536]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	e02e      	b.n	8006c14 <HAL_RCC_OscConfig+0xd4>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10c      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x98>
 8006bbe:	4b82      	ldr	r3, [pc, #520]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a81      	ldr	r2, [pc, #516]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	4b7f      	ldr	r3, [pc, #508]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a7e      	ldr	r2, [pc, #504]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bd4:	6013      	str	r3, [r2, #0]
 8006bd6:	e01d      	b.n	8006c14 <HAL_RCC_OscConfig+0xd4>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006be0:	d10c      	bne.n	8006bfc <HAL_RCC_OscConfig+0xbc>
 8006be2:	4b79      	ldr	r3, [pc, #484]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a78      	ldr	r2, [pc, #480]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	4b76      	ldr	r3, [pc, #472]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a75      	ldr	r2, [pc, #468]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	e00b      	b.n	8006c14 <HAL_RCC_OscConfig+0xd4>
 8006bfc:	4b72      	ldr	r3, [pc, #456]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a71      	ldr	r2, [pc, #452]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	4b6f      	ldr	r3, [pc, #444]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a6e      	ldr	r2, [pc, #440]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d013      	beq.n	8006c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1c:	f7fb fb4a 	bl	80022b4 <HAL_GetTick>
 8006c20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c24:	f7fb fb46 	bl	80022b4 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b64      	cmp	r3, #100	; 0x64
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e38d      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c36:	4b64      	ldr	r3, [pc, #400]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0f0      	beq.n	8006c24 <HAL_RCC_OscConfig+0xe4>
 8006c42:	e014      	b.n	8006c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c44:	f7fb fb36 	bl	80022b4 <HAL_GetTick>
 8006c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c4c:	f7fb fb32 	bl	80022b4 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b64      	cmp	r3, #100	; 0x64
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e379      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c5e:	4b5a      	ldr	r3, [pc, #360]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1f0      	bne.n	8006c4c <HAL_RCC_OscConfig+0x10c>
 8006c6a:	e000      	b.n	8006c6e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 80ae 	beq.w	8006dd8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c7c:	4b52      	ldr	r3, [pc, #328]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c86:	4b50      	ldr	r3, [pc, #320]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x162>
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	2b18      	cmp	r3, #24
 8006c96:	d13a      	bne.n	8006d0e <HAL_RCC_OscConfig+0x1ce>
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d135      	bne.n	8006d0e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ca2:	4b49      	ldr	r3, [pc, #292]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_RCC_OscConfig+0x17a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e34b      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cba:	f7fb fb29 	bl	8002310 <HAL_GetREVID>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	f241 0303 	movw	r3, #4099	; 0x1003
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d817      	bhi.n	8006cf8 <HAL_RCC_OscConfig+0x1b8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b40      	cmp	r3, #64	; 0x40
 8006cce:	d108      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x1a2>
 8006cd0:	4b3d      	ldr	r3, [pc, #244]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006cd8:	4a3b      	ldr	r2, [pc, #236]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cde:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ce0:	e07a      	b.n	8006dd8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce2:	4b39      	ldr	r3, [pc, #228]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	031b      	lsls	r3, r3, #12
 8006cf0:	4935      	ldr	r1, [pc, #212]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cf6:	e06f      	b.n	8006dd8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf8:	4b33      	ldr	r3, [pc, #204]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	061b      	lsls	r3, r3, #24
 8006d06:	4930      	ldr	r1, [pc, #192]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d0c:	e064      	b.n	8006dd8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d045      	beq.n	8006da2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d16:	4b2c      	ldr	r3, [pc, #176]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f023 0219 	bic.w	r2, r3, #25
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	4929      	ldr	r1, [pc, #164]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d28:	f7fb fac4 	bl	80022b4 <HAL_GetTick>
 8006d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d30:	f7fb fac0 	bl	80022b4 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e307      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d42:	4b21      	ldr	r3, [pc, #132]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f0      	beq.n	8006d30 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d4e:	f7fb fadf 	bl	8002310 <HAL_GetREVID>
 8006d52:	4602      	mov	r2, r0
 8006d54:	f241 0303 	movw	r3, #4099	; 0x1003
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d817      	bhi.n	8006d8c <HAL_RCC_OscConfig+0x24c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2b40      	cmp	r3, #64	; 0x40
 8006d62:	d108      	bne.n	8006d76 <HAL_RCC_OscConfig+0x236>
 8006d64:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006d6c:	4a16      	ldr	r2, [pc, #88]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d72:	6053      	str	r3, [r2, #4]
 8006d74:	e030      	b.n	8006dd8 <HAL_RCC_OscConfig+0x298>
 8006d76:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	031b      	lsls	r3, r3, #12
 8006d84:	4910      	ldr	r1, [pc, #64]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	604b      	str	r3, [r1, #4]
 8006d8a:	e025      	b.n	8006dd8 <HAL_RCC_OscConfig+0x298>
 8006d8c:	4b0e      	ldr	r3, [pc, #56]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	061b      	lsls	r3, r3, #24
 8006d9a:	490b      	ldr	r1, [pc, #44]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	604b      	str	r3, [r1, #4]
 8006da0:	e01a      	b.n	8006dd8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006da2:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a08      	ldr	r2, [pc, #32]	; (8006dc8 <HAL_RCC_OscConfig+0x288>)
 8006da8:	f023 0301 	bic.w	r3, r3, #1
 8006dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dae:	f7fb fa81 	bl	80022b4 <HAL_GetTick>
 8006db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006db4:	e00a      	b.n	8006dcc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006db6:	f7fb fa7d 	bl	80022b4 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d903      	bls.n	8006dcc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e2c4      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
 8006dc8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dcc:	4ba4      	ldr	r3, [pc, #656]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1ee      	bne.n	8006db6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80a9 	beq.w	8006f38 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006de6:	4b9e      	ldr	r3, [pc, #632]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006df0:	4b9b      	ldr	r3, [pc, #620]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d007      	beq.n	8006e0c <HAL_RCC_OscConfig+0x2cc>
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b18      	cmp	r3, #24
 8006e00:	d13a      	bne.n	8006e78 <HAL_RCC_OscConfig+0x338>
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d135      	bne.n	8006e78 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e0c:	4b94      	ldr	r3, [pc, #592]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_RCC_OscConfig+0x2e4>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	2b80      	cmp	r3, #128	; 0x80
 8006e1e:	d001      	beq.n	8006e24 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e296      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e24:	f7fb fa74 	bl	8002310 <HAL_GetREVID>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	f241 0303 	movw	r3, #4099	; 0x1003
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d817      	bhi.n	8006e62 <HAL_RCC_OscConfig+0x322>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d108      	bne.n	8006e4c <HAL_RCC_OscConfig+0x30c>
 8006e3a:	4b89      	ldr	r3, [pc, #548]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006e42:	4a87      	ldr	r2, [pc, #540]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006e44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e48:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e4a:	e075      	b.n	8006f38 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e4c:	4b84      	ldr	r3, [pc, #528]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	069b      	lsls	r3, r3, #26
 8006e5a:	4981      	ldr	r1, [pc, #516]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e60:	e06a      	b.n	8006f38 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e62:	4b7f      	ldr	r3, [pc, #508]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	061b      	lsls	r3, r3, #24
 8006e70:	497b      	ldr	r1, [pc, #492]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e76:	e05f      	b.n	8006f38 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d042      	beq.n	8006f06 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e80:	4b77      	ldr	r3, [pc, #476]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a76      	ldr	r2, [pc, #472]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8c:	f7fb fa12 	bl	80022b4 <HAL_GetTick>
 8006e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e94:	f7fb fa0e 	bl	80022b4 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e255      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ea6:	4b6e      	ldr	r3, [pc, #440]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0f0      	beq.n	8006e94 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006eb2:	f7fb fa2d 	bl	8002310 <HAL_GetREVID>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	f241 0303 	movw	r3, #4099	; 0x1003
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d817      	bhi.n	8006ef0 <HAL_RCC_OscConfig+0x3b0>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d108      	bne.n	8006eda <HAL_RCC_OscConfig+0x39a>
 8006ec8:	4b65      	ldr	r3, [pc, #404]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ed0:	4a63      	ldr	r2, [pc, #396]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ed6:	6053      	str	r3, [r2, #4]
 8006ed8:	e02e      	b.n	8006f38 <HAL_RCC_OscConfig+0x3f8>
 8006eda:	4b61      	ldr	r3, [pc, #388]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	069b      	lsls	r3, r3, #26
 8006ee8:	495d      	ldr	r1, [pc, #372]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	604b      	str	r3, [r1, #4]
 8006eee:	e023      	b.n	8006f38 <HAL_RCC_OscConfig+0x3f8>
 8006ef0:	4b5b      	ldr	r3, [pc, #364]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	061b      	lsls	r3, r3, #24
 8006efe:	4958      	ldr	r1, [pc, #352]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60cb      	str	r3, [r1, #12]
 8006f04:	e018      	b.n	8006f38 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006f06:	4b56      	ldr	r3, [pc, #344]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a55      	ldr	r2, [pc, #340]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f12:	f7fb f9cf 	bl	80022b4 <HAL_GetTick>
 8006f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f18:	e008      	b.n	8006f2c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f1a:	f7fb f9cb 	bl	80022b4 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e212      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f2c:	4b4c      	ldr	r3, [pc, #304]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1f0      	bne.n	8006f1a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d036      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d019      	beq.n	8006f80 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f4c:	4b44      	ldr	r3, [pc, #272]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f50:	4a43      	ldr	r2, [pc, #268]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006f52:	f043 0301 	orr.w	r3, r3, #1
 8006f56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f58:	f7fb f9ac 	bl	80022b4 <HAL_GetTick>
 8006f5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f60:	f7fb f9a8 	bl	80022b4 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e1ef      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f72:	4b3b      	ldr	r3, [pc, #236]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d0f0      	beq.n	8006f60 <HAL_RCC_OscConfig+0x420>
 8006f7e:	e018      	b.n	8006fb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f80:	4b37      	ldr	r3, [pc, #220]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f84:	4a36      	ldr	r2, [pc, #216]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006f86:	f023 0301 	bic.w	r3, r3, #1
 8006f8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8c:	f7fb f992 	bl	80022b4 <HAL_GetTick>
 8006f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f94:	f7fb f98e 	bl	80022b4 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e1d5      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fa6:	4b2e      	ldr	r3, [pc, #184]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1f0      	bne.n	8006f94 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d036      	beq.n	800702c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d019      	beq.n	8006ffa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fc6:	4b26      	ldr	r3, [pc, #152]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a25      	ldr	r2, [pc, #148]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fd2:	f7fb f96f 	bl	80022b4 <HAL_GetTick>
 8006fd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fd8:	e008      	b.n	8006fec <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006fda:	f7fb f96b 	bl	80022b4 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e1b2      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fec:	4b1c      	ldr	r3, [pc, #112]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0f0      	beq.n	8006fda <HAL_RCC_OscConfig+0x49a>
 8006ff8:	e018      	b.n	800702c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ffa:	4b19      	ldr	r3, [pc, #100]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a18      	ldr	r2, [pc, #96]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8007000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007004:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007006:	f7fb f955 	bl	80022b4 <HAL_GetTick>
 800700a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800700c:	e008      	b.n	8007020 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800700e:	f7fb f951 	bl	80022b4 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e198      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <HAL_RCC_OscConfig+0x520>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1f0      	bne.n	800700e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 8085 	beq.w	8007144 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800703a:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <HAL_RCC_OscConfig+0x524>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a09      	ldr	r2, [pc, #36]	; (8007064 <HAL_RCC_OscConfig+0x524>)
 8007040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007044:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007046:	f7fb f935 	bl	80022b4 <HAL_GetTick>
 800704a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800704c:	e00c      	b.n	8007068 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800704e:	f7fb f931 	bl	80022b4 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b64      	cmp	r3, #100	; 0x64
 800705a:	d905      	bls.n	8007068 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e178      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
 8007060:	58024400 	.word	0x58024400
 8007064:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007068:	4b96      	ldr	r3, [pc, #600]	; (80072c4 <HAL_RCC_OscConfig+0x784>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0ec      	beq.n	800704e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d106      	bne.n	800708a <HAL_RCC_OscConfig+0x54a>
 800707c:	4b92      	ldr	r3, [pc, #584]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800707e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007080:	4a91      	ldr	r2, [pc, #580]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	6713      	str	r3, [r2, #112]	; 0x70
 8007088:	e02d      	b.n	80070e6 <HAL_RCC_OscConfig+0x5a6>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10c      	bne.n	80070ac <HAL_RCC_OscConfig+0x56c>
 8007092:	4b8d      	ldr	r3, [pc, #564]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	4a8c      	ldr	r2, [pc, #560]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007098:	f023 0301 	bic.w	r3, r3, #1
 800709c:	6713      	str	r3, [r2, #112]	; 0x70
 800709e:	4b8a      	ldr	r3, [pc, #552]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80070a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a2:	4a89      	ldr	r2, [pc, #548]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80070a4:	f023 0304 	bic.w	r3, r3, #4
 80070a8:	6713      	str	r3, [r2, #112]	; 0x70
 80070aa:	e01c      	b.n	80070e6 <HAL_RCC_OscConfig+0x5a6>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2b05      	cmp	r3, #5
 80070b2:	d10c      	bne.n	80070ce <HAL_RCC_OscConfig+0x58e>
 80070b4:	4b84      	ldr	r3, [pc, #528]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80070b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b8:	4a83      	ldr	r2, [pc, #524]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80070ba:	f043 0304 	orr.w	r3, r3, #4
 80070be:	6713      	str	r3, [r2, #112]	; 0x70
 80070c0:	4b81      	ldr	r3, [pc, #516]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80070c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c4:	4a80      	ldr	r2, [pc, #512]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80070c6:	f043 0301 	orr.w	r3, r3, #1
 80070ca:	6713      	str	r3, [r2, #112]	; 0x70
 80070cc:	e00b      	b.n	80070e6 <HAL_RCC_OscConfig+0x5a6>
 80070ce:	4b7e      	ldr	r3, [pc, #504]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80070d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d2:	4a7d      	ldr	r2, [pc, #500]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80070d4:	f023 0301 	bic.w	r3, r3, #1
 80070d8:	6713      	str	r3, [r2, #112]	; 0x70
 80070da:	4b7b      	ldr	r3, [pc, #492]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80070dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070de:	4a7a      	ldr	r2, [pc, #488]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80070e0:	f023 0304 	bic.w	r3, r3, #4
 80070e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d015      	beq.n	800711a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ee:	f7fb f8e1 	bl	80022b4 <HAL_GetTick>
 80070f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070f4:	e00a      	b.n	800710c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070f6:	f7fb f8dd 	bl	80022b4 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	f241 3288 	movw	r2, #5000	; 0x1388
 8007104:	4293      	cmp	r3, r2
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e122      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800710c:	4b6e      	ldr	r3, [pc, #440]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800710e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0ee      	beq.n	80070f6 <HAL_RCC_OscConfig+0x5b6>
 8007118:	e014      	b.n	8007144 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800711a:	f7fb f8cb 	bl	80022b4 <HAL_GetTick>
 800711e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007120:	e00a      	b.n	8007138 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007122:	f7fb f8c7 	bl	80022b4 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007130:	4293      	cmp	r3, r2
 8007132:	d901      	bls.n	8007138 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e10c      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007138:	4b63      	ldr	r3, [pc, #396]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800713a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713c:	f003 0302 	and.w	r3, r3, #2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1ee      	bne.n	8007122 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 8101 	beq.w	8007350 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800714e:	4b5e      	ldr	r3, [pc, #376]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007156:	2b18      	cmp	r3, #24
 8007158:	f000 80bc 	beq.w	80072d4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	2b02      	cmp	r3, #2
 8007162:	f040 8095 	bne.w	8007290 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007166:	4b58      	ldr	r3, [pc, #352]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a57      	ldr	r2, [pc, #348]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800716c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007172:	f7fb f89f 	bl	80022b4 <HAL_GetTick>
 8007176:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007178:	e008      	b.n	800718c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800717a:	f7fb f89b 	bl	80022b4 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	2b02      	cmp	r3, #2
 8007186:	d901      	bls.n	800718c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e0e2      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800718c:	4b4e      	ldr	r3, [pc, #312]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1f0      	bne.n	800717a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007198:	4b4b      	ldr	r3, [pc, #300]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800719a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800719c:	4b4b      	ldr	r3, [pc, #300]	; (80072cc <HAL_RCC_OscConfig+0x78c>)
 800719e:	4013      	ands	r3, r2
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071a8:	0112      	lsls	r2, r2, #4
 80071aa:	430a      	orrs	r2, r1
 80071ac:	4946      	ldr	r1, [pc, #280]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	628b      	str	r3, [r1, #40]	; 0x28
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b6:	3b01      	subs	r3, #1
 80071b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c0:	3b01      	subs	r3, #1
 80071c2:	025b      	lsls	r3, r3, #9
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071cc:	3b01      	subs	r3, #1
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071da:	3b01      	subs	r3, #1
 80071dc:	061b      	lsls	r3, r3, #24
 80071de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071e2:	4939      	ldr	r1, [pc, #228]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80071e8:	4b37      	ldr	r3, [pc, #220]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	4a36      	ldr	r2, [pc, #216]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071f4:	4b34      	ldr	r3, [pc, #208]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80071f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f8:	4b35      	ldr	r3, [pc, #212]	; (80072d0 <HAL_RCC_OscConfig+0x790>)
 80071fa:	4013      	ands	r3, r2
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007200:	00d2      	lsls	r2, r2, #3
 8007202:	4931      	ldr	r1, [pc, #196]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007204:	4313      	orrs	r3, r2
 8007206:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007208:	4b2f      	ldr	r3, [pc, #188]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	f023 020c 	bic.w	r2, r3, #12
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	492c      	ldr	r1, [pc, #176]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007216:	4313      	orrs	r3, r2
 8007218:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800721a:	4b2b      	ldr	r3, [pc, #172]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	f023 0202 	bic.w	r2, r3, #2
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007226:	4928      	ldr	r1, [pc, #160]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007228:	4313      	orrs	r3, r2
 800722a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800722c:	4b26      	ldr	r3, [pc, #152]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	4a25      	ldr	r2, [pc, #148]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007238:	4b23      	ldr	r3, [pc, #140]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	4a22      	ldr	r2, [pc, #136]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800723e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007244:	4b20      	ldr	r3, [pc, #128]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007248:	4a1f      	ldr	r2, [pc, #124]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800724a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800724e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007250:	4b1d      	ldr	r3, [pc, #116]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	4a1c      	ldr	r2, [pc, #112]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007256:	f043 0301 	orr.w	r3, r3, #1
 800725a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800725c:	4b1a      	ldr	r3, [pc, #104]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a19      	ldr	r2, [pc, #100]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007268:	f7fb f824 	bl	80022b4 <HAL_GetTick>
 800726c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007270:	f7fb f820 	bl	80022b4 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e067      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007282:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f0      	beq.n	8007270 <HAL_RCC_OscConfig+0x730>
 800728e:	e05f      	b.n	8007350 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007290:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a0c      	ldr	r2, [pc, #48]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 8007296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800729a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729c:	f7fb f80a 	bl	80022b4 <HAL_GetTick>
 80072a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072a4:	f7fb f806 	bl	80022b4 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e04d      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072b6:	4b04      	ldr	r3, [pc, #16]	; (80072c8 <HAL_RCC_OscConfig+0x788>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1f0      	bne.n	80072a4 <HAL_RCC_OscConfig+0x764>
 80072c2:	e045      	b.n	8007350 <HAL_RCC_OscConfig+0x810>
 80072c4:	58024800 	.word	0x58024800
 80072c8:	58024400 	.word	0x58024400
 80072cc:	fffffc0c 	.word	0xfffffc0c
 80072d0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072d4:	4b21      	ldr	r3, [pc, #132]	; (800735c <HAL_RCC_OscConfig+0x81c>)
 80072d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072da:	4b20      	ldr	r3, [pc, #128]	; (800735c <HAL_RCC_OscConfig+0x81c>)
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d031      	beq.n	800734c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f003 0203 	and.w	r2, r3, #3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d12a      	bne.n	800734c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	091b      	lsrs	r3, r3, #4
 80072fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007302:	429a      	cmp	r2, r3
 8007304:	d122      	bne.n	800734c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007312:	429a      	cmp	r2, r3
 8007314:	d11a      	bne.n	800734c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	0a5b      	lsrs	r3, r3, #9
 800731a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007322:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007324:	429a      	cmp	r2, r3
 8007326:	d111      	bne.n	800734c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	0c1b      	lsrs	r3, r3, #16
 800732c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007336:	429a      	cmp	r2, r3
 8007338:	d108      	bne.n	800734c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	0e1b      	lsrs	r3, r3, #24
 800733e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007346:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007348:	429a      	cmp	r2, r3
 800734a:	d001      	beq.n	8007350 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e000      	b.n	8007352 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3730      	adds	r7, #48	; 0x30
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	58024400 	.word	0x58024400

08007360 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e19c      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007374:	4b8a      	ldr	r3, [pc, #552]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 030f 	and.w	r3, r3, #15
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	429a      	cmp	r2, r3
 8007380:	d910      	bls.n	80073a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007382:	4b87      	ldr	r3, [pc, #540]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f023 020f 	bic.w	r2, r3, #15
 800738a:	4985      	ldr	r1, [pc, #532]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	4313      	orrs	r3, r2
 8007390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007392:	4b83      	ldr	r3, [pc, #524]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 030f 	and.w	r3, r3, #15
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d001      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e184      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d010      	beq.n	80073d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	4b7b      	ldr	r3, [pc, #492]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073bc:	429a      	cmp	r2, r3
 80073be:	d908      	bls.n	80073d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073c0:	4b78      	ldr	r3, [pc, #480]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	4975      	ldr	r1, [pc, #468]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d010      	beq.n	8007400 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695a      	ldr	r2, [r3, #20]
 80073e2:	4b70      	ldr	r3, [pc, #448]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d908      	bls.n	8007400 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073ee:	4b6d      	ldr	r3, [pc, #436]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	496a      	ldr	r1, [pc, #424]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0310 	and.w	r3, r3, #16
 8007408:	2b00      	cmp	r3, #0
 800740a:	d010      	beq.n	800742e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699a      	ldr	r2, [r3, #24]
 8007410:	4b64      	ldr	r3, [pc, #400]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007418:	429a      	cmp	r2, r3
 800741a:	d908      	bls.n	800742e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800741c:	4b61      	ldr	r3, [pc, #388]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	495e      	ldr	r1, [pc, #376]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800742a:	4313      	orrs	r3, r2
 800742c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b00      	cmp	r3, #0
 8007438:	d010      	beq.n	800745c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69da      	ldr	r2, [r3, #28]
 800743e:	4b59      	ldr	r3, [pc, #356]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007446:	429a      	cmp	r2, r3
 8007448:	d908      	bls.n	800745c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800744a:	4b56      	ldr	r3, [pc, #344]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	4953      	ldr	r1, [pc, #332]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007458:	4313      	orrs	r3, r2
 800745a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d010      	beq.n	800748a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	4b4d      	ldr	r3, [pc, #308]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	429a      	cmp	r2, r3
 8007476:	d908      	bls.n	800748a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007478:	4b4a      	ldr	r3, [pc, #296]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	f023 020f 	bic.w	r2, r3, #15
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	4947      	ldr	r1, [pc, #284]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007486:	4313      	orrs	r3, r2
 8007488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d055      	beq.n	8007542 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007496:	4b43      	ldr	r3, [pc, #268]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	4940      	ldr	r1, [pc, #256]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d107      	bne.n	80074c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074b0:	4b3c      	ldr	r3, [pc, #240]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d121      	bne.n	8007500 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e0f6      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d107      	bne.n	80074d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074c8:	4b36      	ldr	r3, [pc, #216]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d115      	bne.n	8007500 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0ea      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d107      	bne.n	80074f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074e0:	4b30      	ldr	r3, [pc, #192]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e0de      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074f0:	4b2c      	ldr	r3, [pc, #176]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0d6      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007500:	4b28      	ldr	r3, [pc, #160]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	f023 0207 	bic.w	r2, r3, #7
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	4925      	ldr	r1, [pc, #148]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800750e:	4313      	orrs	r3, r2
 8007510:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007512:	f7fa fecf 	bl	80022b4 <HAL_GetTick>
 8007516:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007518:	e00a      	b.n	8007530 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800751a:	f7fa fecb 	bl	80022b4 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	f241 3288 	movw	r2, #5000	; 0x1388
 8007528:	4293      	cmp	r3, r2
 800752a:	d901      	bls.n	8007530 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e0be      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007530:	4b1c      	ldr	r3, [pc, #112]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	429a      	cmp	r2, r3
 8007540:	d1eb      	bne.n	800751a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d010      	beq.n	8007570 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	429a      	cmp	r2, r3
 800755c:	d208      	bcs.n	8007570 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800755e:	4b11      	ldr	r3, [pc, #68]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	f023 020f 	bic.w	r2, r3, #15
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	490e      	ldr	r1, [pc, #56]	; (80075a4 <HAL_RCC_ClockConfig+0x244>)
 800756c:	4313      	orrs	r3, r2
 800756e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007570:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d214      	bcs.n	80075a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757e:	4b08      	ldr	r3, [pc, #32]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f023 020f 	bic.w	r2, r3, #15
 8007586:	4906      	ldr	r1, [pc, #24]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	4313      	orrs	r3, r2
 800758c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800758e:	4b04      	ldr	r3, [pc, #16]	; (80075a0 <HAL_RCC_ClockConfig+0x240>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 030f 	and.w	r3, r3, #15
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d005      	beq.n	80075a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e086      	b.n	80076ae <HAL_RCC_ClockConfig+0x34e>
 80075a0:	52002000 	.word	0x52002000
 80075a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d010      	beq.n	80075d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	4b3f      	ldr	r3, [pc, #252]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d208      	bcs.n	80075d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075c4:	4b3c      	ldr	r3, [pc, #240]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	4939      	ldr	r1, [pc, #228]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d010      	beq.n	8007604 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	695a      	ldr	r2, [r3, #20]
 80075e6:	4b34      	ldr	r3, [pc, #208]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d208      	bcs.n	8007604 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075f2:	4b31      	ldr	r3, [pc, #196]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	492e      	ldr	r1, [pc, #184]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007600:	4313      	orrs	r3, r2
 8007602:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b00      	cmp	r3, #0
 800760e:	d010      	beq.n	8007632 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699a      	ldr	r2, [r3, #24]
 8007614:	4b28      	ldr	r3, [pc, #160]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800761c:	429a      	cmp	r2, r3
 800761e:	d208      	bcs.n	8007632 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007620:	4b25      	ldr	r3, [pc, #148]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	4922      	ldr	r1, [pc, #136]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 800762e:	4313      	orrs	r3, r2
 8007630:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d010      	beq.n	8007660 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69da      	ldr	r2, [r3, #28]
 8007642:	4b1d      	ldr	r3, [pc, #116]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800764a:	429a      	cmp	r2, r3
 800764c:	d208      	bcs.n	8007660 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800764e:	4b1a      	ldr	r3, [pc, #104]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	4917      	ldr	r1, [pc, #92]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 800765c:	4313      	orrs	r3, r2
 800765e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007660:	f000 f834 	bl	80076cc <HAL_RCC_GetSysClockFreq>
 8007664:	4601      	mov	r1, r0
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	0a1b      	lsrs	r3, r3, #8
 800766c:	f003 030f 	and.w	r3, r3, #15
 8007670:	4a12      	ldr	r2, [pc, #72]	; (80076bc <HAL_RCC_ClockConfig+0x35c>)
 8007672:	5cd3      	ldrb	r3, [r2, r3]
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	fa21 f303 	lsr.w	r3, r1, r3
 800767c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800767e:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <HAL_RCC_ClockConfig+0x358>)
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	4a0d      	ldr	r2, [pc, #52]	; (80076bc <HAL_RCC_ClockConfig+0x35c>)
 8007688:	5cd3      	ldrb	r3, [r2, r3]
 800768a:	f003 031f 	and.w	r3, r3, #31
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	fa22 f303 	lsr.w	r3, r2, r3
 8007694:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <HAL_RCC_ClockConfig+0x360>)
 8007696:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007698:	4a0a      	ldr	r2, [pc, #40]	; (80076c4 <HAL_RCC_ClockConfig+0x364>)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800769e:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <HAL_RCC_ClockConfig+0x368>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fa fba0 	bl	8001de8 <HAL_InitTick>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	58024400 	.word	0x58024400
 80076bc:	08015adc 	.word	0x08015adc
 80076c0:	24000004 	.word	0x24000004
 80076c4:	24000000 	.word	0x24000000
 80076c8:	24000008 	.word	0x24000008

080076cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b089      	sub	sp, #36	; 0x24
 80076d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076d2:	4baf      	ldr	r3, [pc, #700]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076da:	2b18      	cmp	r3, #24
 80076dc:	f200 814e 	bhi.w	800797c <HAL_RCC_GetSysClockFreq+0x2b0>
 80076e0:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	0800774d 	.word	0x0800774d
 80076ec:	0800797d 	.word	0x0800797d
 80076f0:	0800797d 	.word	0x0800797d
 80076f4:	0800797d 	.word	0x0800797d
 80076f8:	0800797d 	.word	0x0800797d
 80076fc:	0800797d 	.word	0x0800797d
 8007700:	0800797d 	.word	0x0800797d
 8007704:	0800797d 	.word	0x0800797d
 8007708:	08007773 	.word	0x08007773
 800770c:	0800797d 	.word	0x0800797d
 8007710:	0800797d 	.word	0x0800797d
 8007714:	0800797d 	.word	0x0800797d
 8007718:	0800797d 	.word	0x0800797d
 800771c:	0800797d 	.word	0x0800797d
 8007720:	0800797d 	.word	0x0800797d
 8007724:	0800797d 	.word	0x0800797d
 8007728:	08007779 	.word	0x08007779
 800772c:	0800797d 	.word	0x0800797d
 8007730:	0800797d 	.word	0x0800797d
 8007734:	0800797d 	.word	0x0800797d
 8007738:	0800797d 	.word	0x0800797d
 800773c:	0800797d 	.word	0x0800797d
 8007740:	0800797d 	.word	0x0800797d
 8007744:	0800797d 	.word	0x0800797d
 8007748:	0800777f 	.word	0x0800777f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800774c:	4b90      	ldr	r3, [pc, #576]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d009      	beq.n	800776c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007758:	4b8d      	ldr	r3, [pc, #564]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	08db      	lsrs	r3, r3, #3
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	4a8c      	ldr	r2, [pc, #560]	; (8007994 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
 8007768:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800776a:	e10a      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800776c:	4b89      	ldr	r3, [pc, #548]	; (8007994 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800776e:	61bb      	str	r3, [r7, #24]
    break;
 8007770:	e107      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007772:	4b89      	ldr	r3, [pc, #548]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007774:	61bb      	str	r3, [r7, #24]
    break;
 8007776:	e104      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007778:	4b88      	ldr	r3, [pc, #544]	; (800799c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800777a:	61bb      	str	r3, [r7, #24]
    break;
 800777c:	e101      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800777e:	4b84      	ldr	r3, [pc, #528]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007788:	4b81      	ldr	r3, [pc, #516]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	091b      	lsrs	r3, r3, #4
 800778e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007792:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007794:	4b7e      	ldr	r3, [pc, #504]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800779e:	4b7c      	ldr	r3, [pc, #496]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80077a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a2:	08db      	lsrs	r3, r3, #3
 80077a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	fb02 f303 	mul.w	r3, r2, r3
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 80da 	beq.w	8007976 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d05a      	beq.n	800787e <HAL_RCC_GetSysClockFreq+0x1b2>
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d302      	bcc.n	80077d2 <HAL_RCC_GetSysClockFreq+0x106>
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d078      	beq.n	80078c2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80077d0:	e099      	b.n	8007906 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077d2:	4b6f      	ldr	r3, [pc, #444]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d02d      	beq.n	800783a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077de:	4b6c      	ldr	r3, [pc, #432]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	08db      	lsrs	r3, r3, #3
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	4a6a      	ldr	r2, [pc, #424]	; (8007994 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80077ea:	fa22 f303 	lsr.w	r3, r2, r3
 80077ee:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	ee07 3a90 	vmov	s15, r3
 8007800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007808:	4b61      	ldr	r3, [pc, #388]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007810:	ee07 3a90 	vmov	s15, r3
 8007814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007818:	ed97 6a02 	vldr	s12, [r7, #8]
 800781c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800782c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007834:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007838:	e087      	b.n	800794a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	ee07 3a90 	vmov	s15, r3
 8007840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007844:	eddf 6a57 	vldr	s13, [pc, #348]	; 80079a4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784c:	4b50      	ldr	r3, [pc, #320]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007854:	ee07 3a90 	vmov	s15, r3
 8007858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007860:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007878:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800787c:	e065      	b.n	800794a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	ee07 3a90 	vmov	s15, r3
 8007884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007888:	eddf 6a47 	vldr	s13, [pc, #284]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2dc>
 800788c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007890:	4b3f      	ldr	r3, [pc, #252]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007898:	ee07 3a90 	vmov	s15, r3
 800789c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80078a4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80078a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078c0:	e043      	b.n	800794a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	ee07 3a90 	vmov	s15, r3
 80078c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078cc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80079ac <HAL_RCC_GetSysClockFreq+0x2e0>
 80078d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d4:	4b2e      	ldr	r3, [pc, #184]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078dc:	ee07 3a90 	vmov	s15, r3
 80078e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80078e8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80078ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007900:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007904:	e021      	b.n	800794a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007910:	eddf 6a25 	vldr	s13, [pc, #148]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007918:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007920:	ee07 3a90 	vmov	s15, r3
 8007924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007928:	ed97 6a02 	vldr	s12, [r7, #8]
 800792c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800793c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007944:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007948:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800794a:	4b11      	ldr	r3, [pc, #68]	; (8007990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800794c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794e:	0a5b      	lsrs	r3, r3, #9
 8007950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007954:	3301      	adds	r3, #1
 8007956:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007962:	edd7 6a07 	vldr	s13, [r7, #28]
 8007966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800796a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800796e:	ee17 3a90 	vmov	r3, s15
 8007972:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007974:	e005      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	61bb      	str	r3, [r7, #24]
    break;
 800797a:	e002      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800797c:	4b06      	ldr	r3, [pc, #24]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800797e:	61bb      	str	r3, [r7, #24]
    break;
 8007980:	bf00      	nop
  }

  return sysclockfreq;
 8007982:	69bb      	ldr	r3, [r7, #24]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3724      	adds	r7, #36	; 0x24
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	58024400 	.word	0x58024400
 8007994:	03d09000 	.word	0x03d09000
 8007998:	003d0900 	.word	0x003d0900
 800799c:	007a1200 	.word	0x007a1200
 80079a0:	46000000 	.word	0x46000000
 80079a4:	4c742400 	.word	0x4c742400
 80079a8:	4a742400 	.word	0x4a742400
 80079ac:	4af42400 	.word	0x4af42400

080079b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80079b6:	f7ff fe89 	bl	80076cc <HAL_RCC_GetSysClockFreq>
 80079ba:	4601      	mov	r1, r0
 80079bc:	4b10      	ldr	r3, [pc, #64]	; (8007a00 <HAL_RCC_GetHCLKFreq+0x50>)
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	0a1b      	lsrs	r3, r3, #8
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	4a0f      	ldr	r2, [pc, #60]	; (8007a04 <HAL_RCC_GetHCLKFreq+0x54>)
 80079c8:	5cd3      	ldrb	r3, [r2, r3]
 80079ca:	f003 031f 	and.w	r3, r3, #31
 80079ce:	fa21 f303 	lsr.w	r3, r1, r3
 80079d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079d4:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <HAL_RCC_GetHCLKFreq+0x50>)
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	4a09      	ldr	r2, [pc, #36]	; (8007a04 <HAL_RCC_GetHCLKFreq+0x54>)
 80079de:	5cd3      	ldrb	r3, [r2, r3]
 80079e0:	f003 031f 	and.w	r3, r3, #31
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ea:	4a07      	ldr	r2, [pc, #28]	; (8007a08 <HAL_RCC_GetHCLKFreq+0x58>)
 80079ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079ee:	4a07      	ldr	r2, [pc, #28]	; (8007a0c <HAL_RCC_GetHCLKFreq+0x5c>)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80079f4:	4b04      	ldr	r3, [pc, #16]	; (8007a08 <HAL_RCC_GetHCLKFreq+0x58>)
 80079f6:	681b      	ldr	r3, [r3, #0]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	58024400 	.word	0x58024400
 8007a04:	08015adc 	.word	0x08015adc
 8007a08:	24000004 	.word	0x24000004
 8007a0c:	24000000 	.word	0x24000000

08007a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a14:	f7ff ffcc 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 8007a18:	4601      	mov	r1, r0
 8007a1a:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	091b      	lsrs	r3, r3, #4
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	4a04      	ldr	r2, [pc, #16]	; (8007a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a26:	5cd3      	ldrb	r3, [r2, r3]
 8007a28:	f003 031f 	and.w	r3, r3, #31
 8007a2c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	58024400 	.word	0x58024400
 8007a38:	08015adc 	.word	0x08015adc

08007a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a40:	f7ff ffb6 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 8007a44:	4601      	mov	r1, r0
 8007a46:	4b06      	ldr	r3, [pc, #24]	; (8007a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	0a1b      	lsrs	r3, r3, #8
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	4a04      	ldr	r2, [pc, #16]	; (8007a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a52:	5cd3      	ldrb	r3, [r2, r3]
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	58024400 	.word	0x58024400
 8007a64:	08015adc 	.word	0x08015adc

08007a68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	223f      	movs	r2, #63	; 0x3f
 8007a76:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a78:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f003 0207 	and.w	r2, r3, #7
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007a84:	4b17      	ldr	r3, [pc, #92]	; (8007ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007a90:	4b14      	ldr	r3, [pc, #80]	; (8007ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	f003 020f 	and.w	r2, r3, #15
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007a9c:	4b11      	ldr	r3, [pc, #68]	; (8007ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007aa8:	4b0e      	ldr	r3, [pc, #56]	; (8007ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007ac0:	4b08      	ldr	r3, [pc, #32]	; (8007ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007acc:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <HAL_RCC_GetClockConfig+0x80>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 020f 	and.w	r2, r3, #15
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	601a      	str	r2, [r3, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	58024400 	.word	0x58024400
 8007ae8:	52002000 	.word	0x52002000

08007aec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007af4:	2300      	movs	r3, #0
 8007af6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007af8:	2300      	movs	r3, #0
 8007afa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d03d      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b10:	d013      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b16:	d802      	bhi.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d007      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007b1c:	e01f      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b22:	d013      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007b24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b28:	d01c      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007b2a:	e018      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b2c:	4baf      	ldr	r3, [pc, #700]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	4aae      	ldr	r2, [pc, #696]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b38:	e015      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	2102      	movs	r1, #2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f001 fd33 	bl	80095ac <RCCEx_PLL2_Config>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b4a:	e00c      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3324      	adds	r3, #36	; 0x24
 8007b50:	2102      	movs	r1, #2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 fddc 	bl	8009710 <RCCEx_PLL3_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b5c:	e003      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	75fb      	strb	r3, [r7, #23]
      break;
 8007b62:	e000      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d109      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b6c:	4b9f      	ldr	r3, [pc, #636]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b78:	499c      	ldr	r1, [pc, #624]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	650b      	str	r3, [r1, #80]	; 0x50
 8007b7e:	e001      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
 8007b82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d03d      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d826      	bhi.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bb5 	.word	0x08007bb5
 8007ba4:	08007bc3 	.word	0x08007bc3
 8007ba8:	08007bd5 	.word	0x08007bd5
 8007bac:	08007bed 	.word	0x08007bed
 8007bb0:	08007bed 	.word	0x08007bed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb4:	4b8d      	ldr	r3, [pc, #564]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a8c      	ldr	r2, [pc, #560]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bc0:	e015      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 fcef 	bl	80095ac <RCCEx_PLL2_Config>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bd2:	e00c      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3324      	adds	r3, #36	; 0x24
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f001 fd98 	bl	8009710 <RCCEx_PLL3_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007be4:	e003      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bea:	e000      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d109      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bf4:	4b7d      	ldr	r3, [pc, #500]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf8:	f023 0207 	bic.w	r2, r3, #7
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c00:	497a      	ldr	r1, [pc, #488]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	650b      	str	r3, [r1, #80]	; 0x50
 8007c06:	e001      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d03e      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1c:	2b80      	cmp	r3, #128	; 0x80
 8007c1e:	d01c      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007c20:	2b80      	cmp	r3, #128	; 0x80
 8007c22:	d804      	bhi.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d008      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007c28:	2b40      	cmp	r3, #64	; 0x40
 8007c2a:	d00d      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007c2c:	e01e      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007c2e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c30:	d01f      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c36:	d01e      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007c38:	e018      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c3a:	4b6c      	ldr	r3, [pc, #432]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3e:	4a6b      	ldr	r2, [pc, #428]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c46:	e017      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f001 fcac 	bl	80095ac <RCCEx_PLL2_Config>
 8007c54:	4603      	mov	r3, r0
 8007c56:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c58:	e00e      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	3324      	adds	r3, #36	; 0x24
 8007c5e:	2100      	movs	r1, #0
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 fd55 	bl	8009710 <RCCEx_PLL3_Config>
 8007c66:	4603      	mov	r3, r0
 8007c68:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c6a:	e005      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c70:	e002      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007c72:	bf00      	nop
 8007c74:	e000      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c7e:	4b5b      	ldr	r3, [pc, #364]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c82:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8a:	4958      	ldr	r1, [pc, #352]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	650b      	str	r3, [r1, #80]	; 0x50
 8007c90:	e001      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d044      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cac:	d01f      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cb2:	d805      	bhi.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00a      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007cb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cbc:	d00e      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007cbe:	e01f      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007cc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007cc4:	d01f      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007cc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cca:	d01e      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007ccc:	e018      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cce:	4b47      	ldr	r3, [pc, #284]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	4a46      	ldr	r2, [pc, #280]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007cda:	e017      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 fc62 	bl	80095ac <RCCEx_PLL2_Config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007cec:	e00e      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3324      	adds	r3, #36	; 0x24
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 fd0b 	bl	8009710 <RCCEx_PLL3_Config>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007cfe:	e005      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	75fb      	strb	r3, [r7, #23]
      break;
 8007d04:	e002      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007d06:	bf00      	nop
 8007d08:	e000      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10a      	bne.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007d12:	4b36      	ldr	r3, [pc, #216]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d16:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d20:	4932      	ldr	r1, [pc, #200]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	658b      	str	r3, [r1, #88]	; 0x58
 8007d26:	e001      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d044      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d42:	d01f      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007d44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d48:	d805      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007d4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d52:	d00e      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007d54:	e01f      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007d56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d5a:	d01f      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d60:	d01e      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007d62:	e018      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d64:	4b21      	ldr	r3, [pc, #132]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	4a20      	ldr	r2, [pc, #128]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d70:	e017      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3304      	adds	r3, #4
 8007d76:	2100      	movs	r1, #0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f001 fc17 	bl	80095ac <RCCEx_PLL2_Config>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007d82:	e00e      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	3324      	adds	r3, #36	; 0x24
 8007d88:	2100      	movs	r1, #0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f001 fcc0 	bl	8009710 <RCCEx_PLL3_Config>
 8007d90:	4603      	mov	r3, r0
 8007d92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d94:	e005      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	75fb      	strb	r3, [r7, #23]
      break;
 8007d9a:	e002      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007d9c:	bf00      	nop
 8007d9e:	e000      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007da8:	4b10      	ldr	r3, [pc, #64]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007db6:	490d      	ldr	r1, [pc, #52]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	658b      	str	r3, [r1, #88]	; 0x58
 8007dbc:	e001      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
 8007dc0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d035      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dd2:	2b10      	cmp	r3, #16
 8007dd4:	d00c      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007dd6:	2b10      	cmp	r3, #16
 8007dd8:	d802      	bhi.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01b      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007dde:	e017      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d00c      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007de4:	2b30      	cmp	r3, #48	; 0x30
 8007de6:	d018      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007de8:	e012      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007dea:	bf00      	nop
 8007dec:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df0:	4baf      	ldr	r3, [pc, #700]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4aae      	ldr	r2, [pc, #696]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007dfc:	e00e      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	2102      	movs	r1, #2
 8007e04:	4618      	mov	r0, r3
 8007e06:	f001 fbd1 	bl	80095ac <RCCEx_PLL2_Config>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007e0e:	e005      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	75fb      	strb	r3, [r7, #23]
      break;
 8007e14:	e002      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007e16:	bf00      	nop
 8007e18:	e000      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d109      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e22:	4ba3      	ldr	r3, [pc, #652]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e2e:	49a0      	ldr	r1, [pc, #640]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e34:	e001      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d042      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e4e:	d01f      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e54:	d805      	bhi.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e5e:	d00e      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007e60:	e01f      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007e62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e66:	d01f      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e6c:	d01e      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007e6e:	e018      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e70:	4b8f      	ldr	r3, [pc, #572]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	4a8e      	ldr	r2, [pc, #568]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e7c:	e017      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3304      	adds	r3, #4
 8007e82:	2100      	movs	r1, #0
 8007e84:	4618      	mov	r0, r3
 8007e86:	f001 fb91 	bl	80095ac <RCCEx_PLL2_Config>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e8e:	e00e      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3324      	adds	r3, #36	; 0x24
 8007e94:	2100      	movs	r1, #0
 8007e96:	4618      	mov	r0, r3
 8007e98:	f001 fc3a 	bl	8009710 <RCCEx_PLL3_Config>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ea0:	e005      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ea6:	e002      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007ea8:	bf00      	nop
 8007eaa:	e000      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d109      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007eb4:	4b7e      	ldr	r3, [pc, #504]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec0:	497b      	ldr	r1, [pc, #492]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	650b      	str	r3, [r1, #80]	; 0x50
 8007ec6:	e001      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
 8007eca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d042      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ee0:	d01b      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ee6:	d805      	bhi.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d022      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef0:	d00a      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007ef2:	e01b      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007ef4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ef8:	d01d      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007efa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007efe:	d01c      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007f00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f04:	d01b      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007f06:	e011      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f001 fb4c 	bl	80095ac <RCCEx_PLL2_Config>
 8007f14:	4603      	mov	r3, r0
 8007f16:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007f18:	e012      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3324      	adds	r3, #36	; 0x24
 8007f1e:	2101      	movs	r1, #1
 8007f20:	4618      	mov	r0, r3
 8007f22:	f001 fbf5 	bl	8009710 <RCCEx_PLL3_Config>
 8007f26:	4603      	mov	r3, r0
 8007f28:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007f2a:	e009      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f30:	e006      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007f32:	bf00      	nop
 8007f34:	e004      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007f36:	bf00      	nop
 8007f38:	e002      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007f3a:	bf00      	nop
 8007f3c:	e000      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f40:	7dfb      	ldrb	r3, [r7, #23]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d109      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f46:	4b5a      	ldr	r3, [pc, #360]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f52:	4957      	ldr	r1, [pc, #348]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	650b      	str	r3, [r1, #80]	; 0x50
 8007f58:	e001      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d044      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f74:	d01b      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f7a:	d805      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d022      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f84:	d00a      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007f86:	e01b      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8c:	d01d      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f92:	d01c      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007f94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f98:	d01b      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007f9a:	e011      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 fb02 	bl	80095ac <RCCEx_PLL2_Config>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007fac:	e012      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3324      	adds	r3, #36	; 0x24
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f001 fbab 	bl	8009710 <RCCEx_PLL3_Config>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007fbe:	e009      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc4:	e006      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007fc6:	bf00      	nop
 8007fc8:	e004      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007fca:	bf00      	nop
 8007fcc:	e002      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007fce:	bf00      	nop
 8007fd0:	e000      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007fda:	4b35      	ldr	r3, [pc, #212]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fde:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fe8:	4931      	ldr	r1, [pc, #196]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	658b      	str	r3, [r1, #88]	; 0x58
 8007fee:	e001      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d02d      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008008:	d005      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800800a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800800e:	d009      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008010:	2b00      	cmp	r3, #0
 8008012:	d013      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008014:	e00f      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008016:	4b26      	ldr	r3, [pc, #152]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801a:	4a25      	ldr	r2, [pc, #148]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800801c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008020:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008022:	e00c      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3304      	adds	r3, #4
 8008028:	2101      	movs	r1, #1
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fabe 	bl	80095ac <RCCEx_PLL2_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008034:	e003      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	75fb      	strb	r3, [r7, #23]
      break;
 800803a:	e000      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800803c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d109      	bne.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008044:	4b1a      	ldr	r3, [pc, #104]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008048:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008050:	4917      	ldr	r1, [pc, #92]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008052:	4313      	orrs	r3, r2
 8008054:	650b      	str	r3, [r1, #80]	; 0x50
 8008056:	e001      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d035      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806c:	2b03      	cmp	r3, #3
 800806e:	d81b      	bhi.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008070:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008076:	bf00      	nop
 8008078:	080080b5 	.word	0x080080b5
 800807c:	08008089 	.word	0x08008089
 8008080:	08008097 	.word	0x08008097
 8008084:	080080b5 	.word	0x080080b5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008088:	4b09      	ldr	r3, [pc, #36]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	4a08      	ldr	r2, [pc, #32]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800808e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008094:	e00f      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	3304      	adds	r3, #4
 800809a:	2102      	movs	r1, #2
 800809c:	4618      	mov	r0, r3
 800809e:	f001 fa85 	bl	80095ac <RCCEx_PLL2_Config>
 80080a2:	4603      	mov	r3, r0
 80080a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80080a6:	e006      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	75fb      	strb	r3, [r7, #23]
      break;
 80080ac:	e003      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80080ae:	bf00      	nop
 80080b0:	58024400 	.word	0x58024400
      break;
 80080b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d109      	bne.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80080bc:	4bba      	ldr	r3, [pc, #744]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80080be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c0:	f023 0203 	bic.w	r2, r3, #3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c8:	49b7      	ldr	r1, [pc, #732]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080ce:	e001      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 8086 	beq.w	80081ee <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080e2:	4bb2      	ldr	r3, [pc, #712]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4ab1      	ldr	r2, [pc, #708]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80080e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080ee:	f7fa f8e1 	bl	80022b4 <HAL_GetTick>
 80080f2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080f4:	e009      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080f6:	f7fa f8dd 	bl	80022b4 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	2b64      	cmp	r3, #100	; 0x64
 8008102:	d902      	bls.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	75fb      	strb	r3, [r7, #23]
        break;
 8008108:	e005      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800810a:	4ba8      	ldr	r3, [pc, #672]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0ef      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d166      	bne.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800811c:	4ba2      	ldr	r3, [pc, #648]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800811e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008126:	4053      	eors	r3, r2
 8008128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800812c:	2b00      	cmp	r3, #0
 800812e:	d013      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008130:	4b9d      	ldr	r3, [pc, #628]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008138:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800813a:	4b9b      	ldr	r3, [pc, #620]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800813c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813e:	4a9a      	ldr	r2, [pc, #616]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008144:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008146:	4b98      	ldr	r3, [pc, #608]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814a:	4a97      	ldr	r2, [pc, #604]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800814c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008150:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008152:	4a95      	ldr	r2, [pc, #596]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800815e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008162:	d115      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008164:	f7fa f8a6 	bl	80022b4 <HAL_GetTick>
 8008168:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800816a:	e00b      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800816c:	f7fa f8a2 	bl	80022b4 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	f241 3288 	movw	r2, #5000	; 0x1388
 800817a:	4293      	cmp	r3, r2
 800817c:	d902      	bls.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	75fb      	strb	r3, [r7, #23]
            break;
 8008182:	e005      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008184:	4b88      	ldr	r3, [pc, #544]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0ed      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d126      	bne.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800819c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081a4:	d10d      	bne.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80081a6:	4b80      	ldr	r3, [pc, #512]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081b4:	0919      	lsrs	r1, r3, #4
 80081b6:	4b7e      	ldr	r3, [pc, #504]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80081b8:	400b      	ands	r3, r1
 80081ba:	497b      	ldr	r1, [pc, #492]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	610b      	str	r3, [r1, #16]
 80081c0:	e005      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80081c2:	4b79      	ldr	r3, [pc, #484]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	4a78      	ldr	r2, [pc, #480]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80081c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80081cc:	6113      	str	r3, [r2, #16]
 80081ce:	4b76      	ldr	r3, [pc, #472]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80081d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081dc:	4972      	ldr	r1, [pc, #456]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	670b      	str	r3, [r1, #112]	; 0x70
 80081e2:	e004      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	75bb      	strb	r3, [r7, #22]
 80081e8:	e001      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d07d      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081fe:	2b28      	cmp	r3, #40	; 0x28
 8008200:	d866      	bhi.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008202:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	080082d7 	.word	0x080082d7
 800820c:	080082d1 	.word	0x080082d1
 8008210:	080082d1 	.word	0x080082d1
 8008214:	080082d1 	.word	0x080082d1
 8008218:	080082d1 	.word	0x080082d1
 800821c:	080082d1 	.word	0x080082d1
 8008220:	080082d1 	.word	0x080082d1
 8008224:	080082d1 	.word	0x080082d1
 8008228:	080082ad 	.word	0x080082ad
 800822c:	080082d1 	.word	0x080082d1
 8008230:	080082d1 	.word	0x080082d1
 8008234:	080082d1 	.word	0x080082d1
 8008238:	080082d1 	.word	0x080082d1
 800823c:	080082d1 	.word	0x080082d1
 8008240:	080082d1 	.word	0x080082d1
 8008244:	080082d1 	.word	0x080082d1
 8008248:	080082bf 	.word	0x080082bf
 800824c:	080082d1 	.word	0x080082d1
 8008250:	080082d1 	.word	0x080082d1
 8008254:	080082d1 	.word	0x080082d1
 8008258:	080082d1 	.word	0x080082d1
 800825c:	080082d1 	.word	0x080082d1
 8008260:	080082d1 	.word	0x080082d1
 8008264:	080082d1 	.word	0x080082d1
 8008268:	080082d7 	.word	0x080082d7
 800826c:	080082d1 	.word	0x080082d1
 8008270:	080082d1 	.word	0x080082d1
 8008274:	080082d1 	.word	0x080082d1
 8008278:	080082d1 	.word	0x080082d1
 800827c:	080082d1 	.word	0x080082d1
 8008280:	080082d1 	.word	0x080082d1
 8008284:	080082d1 	.word	0x080082d1
 8008288:	080082d7 	.word	0x080082d7
 800828c:	080082d1 	.word	0x080082d1
 8008290:	080082d1 	.word	0x080082d1
 8008294:	080082d1 	.word	0x080082d1
 8008298:	080082d1 	.word	0x080082d1
 800829c:	080082d1 	.word	0x080082d1
 80082a0:	080082d1 	.word	0x080082d1
 80082a4:	080082d1 	.word	0x080082d1
 80082a8:	080082d7 	.word	0x080082d7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3304      	adds	r3, #4
 80082b0:	2101      	movs	r1, #1
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 f97a 	bl	80095ac <RCCEx_PLL2_Config>
 80082b8:	4603      	mov	r3, r0
 80082ba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80082bc:	e00c      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3324      	adds	r3, #36	; 0x24
 80082c2:	2101      	movs	r1, #1
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 fa23 	bl	8009710 <RCCEx_PLL3_Config>
 80082ca:	4603      	mov	r3, r0
 80082cc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80082ce:	e003      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	75fb      	strb	r3, [r7, #23]
      break;
 80082d4:	e000      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80082d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082de:	4b32      	ldr	r3, [pc, #200]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082ea:	492f      	ldr	r1, [pc, #188]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	654b      	str	r3, [r1, #84]	; 0x54
 80082f0:	e001      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
 80082f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d037      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008306:	2b05      	cmp	r3, #5
 8008308:	d820      	bhi.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800830a:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	08008353 	.word	0x08008353
 8008314:	08008329 	.word	0x08008329
 8008318:	0800833b 	.word	0x0800833b
 800831c:	08008353 	.word	0x08008353
 8008320:	08008353 	.word	0x08008353
 8008324:	08008353 	.word	0x08008353
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3304      	adds	r3, #4
 800832c:	2101      	movs	r1, #1
 800832e:	4618      	mov	r0, r3
 8008330:	f001 f93c 	bl	80095ac <RCCEx_PLL2_Config>
 8008334:	4603      	mov	r3, r0
 8008336:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008338:	e00c      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3324      	adds	r3, #36	; 0x24
 800833e:	2101      	movs	r1, #1
 8008340:	4618      	mov	r0, r3
 8008342:	f001 f9e5 	bl	8009710 <RCCEx_PLL3_Config>
 8008346:	4603      	mov	r3, r0
 8008348:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800834a:	e003      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	75fb      	strb	r3, [r7, #23]
      break;
 8008350:	e000      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800835a:	4b13      	ldr	r3, [pc, #76]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800835c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835e:	f023 0207 	bic.w	r2, r3, #7
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008366:	4910      	ldr	r1, [pc, #64]	; (80083a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008368:	4313      	orrs	r3, r2
 800836a:	654b      	str	r3, [r1, #84]	; 0x54
 800836c:	e001      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800836e:	7dfb      	ldrb	r3, [r7, #23]
 8008370:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0304 	and.w	r3, r3, #4
 800837a:	2b00      	cmp	r3, #0
 800837c:	d040      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008384:	2b05      	cmp	r3, #5
 8008386:	d827      	bhi.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008388:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800838a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838e:	bf00      	nop
 8008390:	080083df 	.word	0x080083df
 8008394:	080083b5 	.word	0x080083b5
 8008398:	080083c7 	.word	0x080083c7
 800839c:	080083df 	.word	0x080083df
 80083a0:	080083df 	.word	0x080083df
 80083a4:	080083df 	.word	0x080083df
 80083a8:	58024400 	.word	0x58024400
 80083ac:	58024800 	.word	0x58024800
 80083b0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3304      	adds	r3, #4
 80083b8:	2101      	movs	r1, #1
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 f8f6 	bl	80095ac <RCCEx_PLL2_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80083c4:	e00c      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3324      	adds	r3, #36	; 0x24
 80083ca:	2101      	movs	r1, #1
 80083cc:	4618      	mov	r0, r3
 80083ce:	f001 f99f 	bl	8009710 <RCCEx_PLL3_Config>
 80083d2:	4603      	mov	r3, r0
 80083d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80083d6:	e003      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	75fb      	strb	r3, [r7, #23]
      break;
 80083dc:	e000      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80083de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10a      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083e6:	4bb2      	ldr	r3, [pc, #712]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80083e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ea:	f023 0207 	bic.w	r2, r3, #7
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f4:	49ae      	ldr	r1, [pc, #696]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	658b      	str	r3, [r1, #88]	; 0x58
 80083fa:	e001      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d044      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008416:	d01b      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800841c:	d805      	bhi.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800841e:	2b00      	cmp	r3, #0
 8008420:	d022      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008426:	d00a      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008428:	e01b      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800842a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842e:	d01d      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008434:	d01c      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8008436:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800843a:	d01b      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800843c:	e011      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3304      	adds	r3, #4
 8008442:	2100      	movs	r1, #0
 8008444:	4618      	mov	r0, r3
 8008446:	f001 f8b1 	bl	80095ac <RCCEx_PLL2_Config>
 800844a:	4603      	mov	r3, r0
 800844c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800844e:	e012      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3324      	adds	r3, #36	; 0x24
 8008454:	2102      	movs	r1, #2
 8008456:	4618      	mov	r0, r3
 8008458:	f001 f95a 	bl	8009710 <RCCEx_PLL3_Config>
 800845c:	4603      	mov	r3, r0
 800845e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008460:	e009      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	75fb      	strb	r3, [r7, #23]
      break;
 8008466:	e006      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008468:	bf00      	nop
 800846a:	e004      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800846c:	bf00      	nop
 800846e:	e002      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008470:	bf00      	nop
 8008472:	e000      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800847c:	4b8c      	ldr	r3, [pc, #560]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800847e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008480:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800848a:	4989      	ldr	r1, [pc, #548]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800848c:	4313      	orrs	r3, r2
 800848e:	654b      	str	r3, [r1, #84]	; 0x54
 8008490:	e001      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008492:	7dfb      	ldrb	r3, [r7, #23]
 8008494:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d044      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ac:	d01b      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80084ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084b2:	d805      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d022      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80084b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084bc:	d00a      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80084be:	e01b      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80084c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c4:	d01d      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80084c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80084ca:	d01c      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80084cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084d0:	d01b      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80084d2:	e011      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3304      	adds	r3, #4
 80084d8:	2100      	movs	r1, #0
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 f866 	bl	80095ac <RCCEx_PLL2_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80084e4:	e012      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3324      	adds	r3, #36	; 0x24
 80084ea:	2102      	movs	r1, #2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f001 f90f 	bl	8009710 <RCCEx_PLL3_Config>
 80084f2:	4603      	mov	r3, r0
 80084f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80084f6:	e009      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	75fb      	strb	r3, [r7, #23]
      break;
 80084fc:	e006      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80084fe:	bf00      	nop
 8008500:	e004      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008502:	bf00      	nop
 8008504:	e002      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008506:	bf00      	nop
 8008508:	e000      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800850a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008512:	4b67      	ldr	r3, [pc, #412]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008516:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008520:	4963      	ldr	r1, [pc, #396]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008522:	4313      	orrs	r3, r2
 8008524:	658b      	str	r3, [r1, #88]	; 0x58
 8008526:	e001      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008534:	2b00      	cmp	r3, #0
 8008536:	d044      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800853e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008542:	d01b      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8008544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008548:	d805      	bhi.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d022      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800854e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008552:	d00a      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008554:	e01b      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8008556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800855a:	d01d      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800855c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008560:	d01c      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008562:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008566:	d01b      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008568:	e011      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3304      	adds	r3, #4
 800856e:	2100      	movs	r1, #0
 8008570:	4618      	mov	r0, r3
 8008572:	f001 f81b 	bl	80095ac <RCCEx_PLL2_Config>
 8008576:	4603      	mov	r3, r0
 8008578:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800857a:	e012      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3324      	adds	r3, #36	; 0x24
 8008580:	2102      	movs	r1, #2
 8008582:	4618      	mov	r0, r3
 8008584:	f001 f8c4 	bl	8009710 <RCCEx_PLL3_Config>
 8008588:	4603      	mov	r3, r0
 800858a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800858c:	e009      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	75fb      	strb	r3, [r7, #23]
      break;
 8008592:	e006      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008594:	bf00      	nop
 8008596:	e004      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008598:	bf00      	nop
 800859a:	e002      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800859c:	bf00      	nop
 800859e:	e000      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80085a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10a      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80085a8:	4b41      	ldr	r3, [pc, #260]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80085aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085b6:	493e      	ldr	r1, [pc, #248]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	658b      	str	r3, [r1, #88]	; 0x58
 80085bc:	e001      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0308 	and.w	r3, r3, #8
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d01a      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d8:	d10a      	bne.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	3324      	adds	r3, #36	; 0x24
 80085de:	2102      	movs	r1, #2
 80085e0:	4618      	mov	r0, r3
 80085e2:	f001 f895 	bl	8009710 <RCCEx_PLL3_Config>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80085f0:	4b2f      	ldr	r3, [pc, #188]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80085f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085fe:	492c      	ldr	r1, [pc, #176]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008600:	4313      	orrs	r3, r2
 8008602:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0310 	and.w	r3, r3, #16
 800860c:	2b00      	cmp	r3, #0
 800860e:	d01a      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800861a:	d10a      	bne.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3324      	adds	r3, #36	; 0x24
 8008620:	2102      	movs	r1, #2
 8008622:	4618      	mov	r0, r3
 8008624:	f001 f874 	bl	8009710 <RCCEx_PLL3_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008632:	4b1f      	ldr	r3, [pc, #124]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008636:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008640:	491b      	ldr	r1, [pc, #108]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008642:	4313      	orrs	r3, r2
 8008644:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d032      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800865c:	d00d      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800865e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008662:	d016      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8008664:	2b00      	cmp	r3, #0
 8008666:	d111      	bne.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	3304      	adds	r3, #4
 800866c:	2100      	movs	r1, #0
 800866e:	4618      	mov	r0, r3
 8008670:	f000 ff9c 	bl	80095ac <RCCEx_PLL2_Config>
 8008674:	4603      	mov	r3, r0
 8008676:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008678:	e00c      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	3324      	adds	r3, #36	; 0x24
 800867e:	2102      	movs	r1, #2
 8008680:	4618      	mov	r0, r3
 8008682:	f001 f845 	bl	8009710 <RCCEx_PLL3_Config>
 8008686:	4603      	mov	r3, r0
 8008688:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800868a:	e003      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	75fb      	strb	r3, [r7, #23]
      break;
 8008690:	e000      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8008692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10c      	bne.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800869a:	4b05      	ldr	r3, [pc, #20]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800869c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086a8:	4901      	ldr	r1, [pc, #4]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	658b      	str	r3, [r1, #88]	; 0x58
 80086ae:	e003      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80086b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d02f      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086ce:	d00c      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80086d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086d4:	d015      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80086d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086da:	d10f      	bne.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086dc:	4b79      	ldr	r3, [pc, #484]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e0:	4a78      	ldr	r2, [pc, #480]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80086e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80086e8:	e00c      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3324      	adds	r3, #36	; 0x24
 80086ee:	2101      	movs	r1, #1
 80086f0:	4618      	mov	r0, r3
 80086f2:	f001 f80d 	bl	8009710 <RCCEx_PLL3_Config>
 80086f6:	4603      	mov	r3, r0
 80086f8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80086fa:	e003      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008700:	e000      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8008702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800870a:	4b6e      	ldr	r3, [pc, #440]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800870c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008718:	496a      	ldr	r1, [pc, #424]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800871a:	4313      	orrs	r3, r2
 800871c:	654b      	str	r3, [r1, #84]	; 0x54
 800871e:	e001      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d029      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800873c:	d007      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800873e:	e00f      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008740:	4b60      	ldr	r3, [pc, #384]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008744:	4a5f      	ldr	r2, [pc, #380]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800874a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800874c:	e00b      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	3304      	adds	r3, #4
 8008752:	2102      	movs	r1, #2
 8008754:	4618      	mov	r0, r3
 8008756:	f000 ff29 	bl	80095ac <RCCEx_PLL2_Config>
 800875a:	4603      	mov	r3, r0
 800875c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800875e:	e002      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	75fb      	strb	r3, [r7, #23]
      break;
 8008764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008766:	7dfb      	ldrb	r3, [r7, #23]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d109      	bne.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800876c:	4b55      	ldr	r3, [pc, #340]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800876e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008770:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008778:	4952      	ldr	r1, [pc, #328]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800877a:	4313      	orrs	r3, r2
 800877c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800877e:	e001      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00a      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3324      	adds	r3, #36	; 0x24
 8008794:	2102      	movs	r1, #2
 8008796:	4618      	mov	r0, r3
 8008798:	f000 ffba 	bl	8009710 <RCCEx_PLL3_Config>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d02f      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ba:	d00c      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80087bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c0:	d802      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d011      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80087c6:	e00d      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80087c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087cc:	d00f      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80087ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087d2:	d00e      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80087d4:	e006      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087d6:	4b3b      	ldr	r3, [pc, #236]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	4a3a      	ldr	r2, [pc, #232]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80087dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80087e2:	e007      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	75fb      	strb	r3, [r7, #23]
      break;
 80087e8:	e004      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80087ea:	bf00      	nop
 80087ec:	e002      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80087ee:	bf00      	nop
 80087f0:	e000      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80087f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d109      	bne.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80087fa:	4b32      	ldr	r3, [pc, #200]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80087fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008806:	492f      	ldr	r1, [pc, #188]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008808:	4313      	orrs	r3, r2
 800880a:	654b      	str	r3, [r1, #84]	; 0x54
 800880c:	e001      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d008      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800881e:	4b29      	ldr	r3, [pc, #164]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008822:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882a:	4926      	ldr	r1, [pc, #152]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800882c:	4313      	orrs	r3, r2
 800882e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d009      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800883c:	4b21      	ldr	r3, [pc, #132]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800884a:	491e      	ldr	r1, [pc, #120]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800884c:	4313      	orrs	r3, r2
 800884e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d008      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800885c:	4b19      	ldr	r3, [pc, #100]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800885e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008860:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008868:	4916      	ldr	r1, [pc, #88]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800886a:	4313      	orrs	r3, r2
 800886c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00d      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800887a:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	4a11      	ldr	r2, [pc, #68]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008880:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008884:	6113      	str	r3, [r2, #16]
 8008886:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008888:	691a      	ldr	r2, [r3, #16]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008890:	490c      	ldr	r1, [pc, #48]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008892:	4313      	orrs	r3, r2
 8008894:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	da08      	bge.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800889e:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088aa:	4906      	ldr	r1, [pc, #24]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80088b0:	7dbb      	ldrb	r3, [r7, #22]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	e000      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	58024400 	.word	0x58024400

080088c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b090      	sub	sp, #64	; 0x40
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d6:	d150      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80088d8:	4ba1      	ldr	r3, [pc, #644]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80088da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088dc:	f003 0307 	and.w	r3, r3, #7
 80088e0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d844      	bhi.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80088e8:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80088ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ee:	bf00      	nop
 80088f0:	08008905 	.word	0x08008905
 80088f4:	08008915 	.word	0x08008915
 80088f8:	08008925 	.word	0x08008925
 80088fc:	0800896d 	.word	0x0800896d
 8008900:	08008935 	.word	0x08008935
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fd03 	bl	8009314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008912:	e241      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008914:	f107 0318 	add.w	r3, r7, #24
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fa63 	bl	8008de4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008922:	e239      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008924:	f107 030c 	add.w	r3, r7, #12
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fba7 	bl	800907c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008932:	e231      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008934:	4b8a      	ldr	r3, [pc, #552]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800893c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	2b00      	cmp	r3, #0
 8008942:	d102      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008944:	4b87      	ldr	r3, [pc, #540]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008946:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008948:	e226      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008950:	d102      	bne.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008952:	4b85      	ldr	r3, [pc, #532]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008956:	e21f      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800895e:	d102      	bne.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008960:	4b82      	ldr	r3, [pc, #520]	; (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008964:	e218      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800896a:	e215      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800896c:	4b80      	ldr	r3, [pc, #512]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008970:	e212      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008976:	bf00      	nop
 8008978:	e20e      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008980:	d14f      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008982:	4b77      	ldr	r3, [pc, #476]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008986:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800898a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	2b80      	cmp	r3, #128	; 0x80
 8008990:	d01c      	beq.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008992:	2b80      	cmp	r3, #128	; 0x80
 8008994:	d804      	bhi.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008996:	2b00      	cmp	r3, #0
 8008998:	d008      	beq.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800899a:	2b40      	cmp	r3, #64	; 0x40
 800899c:	d00e      	beq.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800899e:	e03c      	b.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80089a0:	2bc0      	cmp	r3, #192	; 0xc0
 80089a2:	d037      	beq.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80089a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089a8:	d018      	beq.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80089aa:	e036      	b.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 fcaf 	bl	8009314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ba:	e1ed      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089bc:	f107 0318 	add.w	r3, r7, #24
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fa0f 	bl	8008de4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ca:	e1e5      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089cc:	f107 030c 	add.w	r3, r7, #12
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 fb53 	bl	800907c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089da:	e1dd      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089dc:	4b60      	ldr	r3, [pc, #384]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80089de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089e4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80089e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d102      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80089ec:	4b5d      	ldr	r3, [pc, #372]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80089ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80089f0:	e1d2      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80089f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089f8:	d102      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80089fa:	4b5b      	ldr	r3, [pc, #364]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80089fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089fe:	e1cb      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a06:	d102      	bne.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008a08:	4b58      	ldr	r3, [pc, #352]	; (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a0c:	e1c4      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a12:	e1c1      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a14:	4b56      	ldr	r3, [pc, #344]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008a16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a18:	e1be      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a1e:	bf00      	nop
 8008a20:	e1ba      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a28:	d153      	bne.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008a2a:	4b4d      	ldr	r3, [pc, #308]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a2e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008a32:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a3a:	d01f      	beq.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a40:	d805      	bhi.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00a      	beq.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a4a:	d00f      	beq.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008a4c:	e03d      	b.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008a4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a52:	d037      	beq.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008a54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a58:	d018      	beq.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008a5a:	e036      	b.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fc57 	bl	8009314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a6a:	e195      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a6c:	f107 0318 	add.w	r3, r7, #24
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 f9b7 	bl	8008de4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a7a:	e18d      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a7c:	f107 030c 	add.w	r3, r7, #12
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fafb 	bl	800907c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a8a:	e185      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a8c:	4b34      	ldr	r3, [pc, #208]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a94:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d102      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008a9c:	4b31      	ldr	r3, [pc, #196]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008aa0:	e17a      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aa8:	d102      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008aaa:	4b2f      	ldr	r3, [pc, #188]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aae:	e173      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ab6:	d102      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008ab8:	4b2c      	ldr	r3, [pc, #176]	; (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008abc:	e16c      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ac2:	e169      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ac4:	4b2a      	ldr	r3, [pc, #168]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ac8:	e166      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ace:	bf00      	nop
 8008ad0:	e162      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ad8:	d15d      	bne.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008ada:	4b21      	ldr	r3, [pc, #132]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ade:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008ae2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008aea:	d01f      	beq.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008aec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008af0:	d805      	bhi.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008af6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008afa:	d00f      	beq.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008afc:	e047      	b.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008afe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b02:	d041      	beq.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008b04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b08:	d018      	beq.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008b0a:	e040      	b.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fbff 	bl	8009314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b1a:	e13d      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b1c:	f107 0318 	add.w	r3, r7, #24
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 f95f 	bl	8008de4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b2a:	e135      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b2c:	f107 030c 	add.w	r3, r7, #12
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 faa3 	bl	800907c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b3a:	e12d      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b3c:	4b08      	ldr	r3, [pc, #32]	; (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b44:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d102      	bne.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008b4c:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008b50:	e122      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b58:	d10c      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008b5a:	4b03      	ldr	r3, [pc, #12]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b5e:	e11b      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008b60:	58024400 	.word	0x58024400
 8008b64:	03d09000 	.word	0x03d09000
 8008b68:	003d0900 	.word	0x003d0900
 8008b6c:	007a1200 	.word	0x007a1200
 8008b70:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b7a:	d102      	bne.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008b7c:	4b89      	ldr	r3, [pc, #548]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b80:	e10a      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b86:	e107      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b88:	4b87      	ldr	r3, [pc, #540]	; (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b8c:	e104      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b92:	bf00      	nop
 8008b94:	e100      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9c:	d153      	bne.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008b9e:	4b83      	ldr	r3, [pc, #524]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008ba6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bae:	d01f      	beq.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bb4:	d805      	bhi.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bbe:	d00f      	beq.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008bc0:	e03d      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008bc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bc6:	d037      	beq.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bcc:	d018      	beq.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008bce:	e036      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fb9d 	bl	8009314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bde:	e0db      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008be0:	f107 0318 	add.w	r3, r7, #24
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 f8fd 	bl	8008de4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bee:	e0d3      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bf0:	f107 030c 	add.w	r3, r7, #12
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 fa41 	bl	800907c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bfe:	e0cb      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c00:	4b6a      	ldr	r3, [pc, #424]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c08:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d102      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008c10:	4b67      	ldr	r3, [pc, #412]	; (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008c14:	e0c0      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c1c:	d102      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008c1e:	4b65      	ldr	r3, [pc, #404]	; (8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c22:	e0b9      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c2a:	d102      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008c2c:	4b5d      	ldr	r3, [pc, #372]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c30:	e0b2      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c36:	e0af      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c38:	4b5b      	ldr	r3, [pc, #364]	; (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c3c:	e0ac      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c42:	bf00      	nop
 8008c44:	e0a8      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c4c:	d13d      	bne.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008c4e:	4b57      	ldr	r3, [pc, #348]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c56:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c5e:	d00c      	beq.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c64:	d011      	beq.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d12b      	bne.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c6a:	f107 0318 	add.w	r3, r7, #24
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f8b8 	bl	8008de4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c78:	e08e      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c7a:	f107 030c 	add.w	r3, r7, #12
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 f9fc 	bl	800907c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c88:	e086      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c8a:	4b48      	ldr	r3, [pc, #288]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c92:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d102      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008c9a:	4b45      	ldr	r3, [pc, #276]	; (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008c9e:	e07b      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ca6:	d102      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8008ca8:	4b42      	ldr	r3, [pc, #264]	; (8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cac:	e074      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cb4:	d102      	bne.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8008cb6:	4b3b      	ldr	r3, [pc, #236]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cba:	e06d      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc0:	e06a      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc6:	bf00      	nop
 8008cc8:	e066      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd0:	d11f      	bne.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008cd2:	4b36      	ldr	r3, [pc, #216]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cda:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce6:	d008      	beq.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008ce8:	e00f      	b.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 fb10 	bl	8009314 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cf8:	e04e      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cfa:	f107 0318 	add.w	r3, r7, #24
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 f870 	bl	8008de4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d08:	e046      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d0e:	bf00      	nop
 8008d10:	e042      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d18:	d13c      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008d1a:	4b24      	ldr	r3, [pc, #144]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008d22:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d2a:	d01e      	beq.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d30:	d805      	bhi.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00d      	beq.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008d36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d3a:	d00e      	beq.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008d3c:	e026      	b.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d42:	d01d      	beq.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d48:	d01d      	beq.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008d4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d4e:	d014      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008d50:	e01c      	b.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008d52:	f000 f831 	bl	8008db8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008d56:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008d58:	e01e      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d5a:	f107 0318 	add.w	r3, r7, #24
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 f840 	bl	8008de4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d68:	e016      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d6a:	f107 030c 	add.w	r3, r7, #12
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 f984 	bl	800907c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d78:	e00e      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008d7a:	4b0d      	ldr	r3, [pc, #52]	; (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d7e:	e00b      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008d80:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d84:	e008      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8008d86:	4b07      	ldr	r3, [pc, #28]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d8a:	e005      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d90:	bf00      	nop
 8008d92:	e001      	b.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3740      	adds	r7, #64	; 0x40
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	007a1200 	.word	0x007a1200
 8008da8:	00bb8000 	.word	0x00bb8000
 8008dac:	58024400 	.word	0x58024400
 8008db0:	03d09000 	.word	0x03d09000
 8008db4:	003d0900 	.word	0x003d0900

08008db8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008dbc:	f7fe fdf8 	bl	80079b0 <HAL_RCC_GetHCLKFreq>
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	091b      	lsrs	r3, r3, #4
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	4a04      	ldr	r2, [pc, #16]	; (8008de0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008dce:	5cd3      	ldrb	r3, [r2, r3]
 8008dd0:	f003 031f 	and.w	r3, r3, #31
 8008dd4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	58024400 	.word	0x58024400
 8008de0:	08015adc 	.word	0x08015adc

08008de4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b089      	sub	sp, #36	; 0x24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dec:	4b9d      	ldr	r3, [pc, #628]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df0:	f003 0303 	and.w	r3, r3, #3
 8008df4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008df6:	4b9b      	ldr	r3, [pc, #620]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfa:	0b1b      	lsrs	r3, r3, #12
 8008dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008e02:	4b98      	ldr	r3, [pc, #608]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	091b      	lsrs	r3, r3, #4
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008e0e:	4b95      	ldr	r3, [pc, #596]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e12:	08db      	lsrs	r3, r3, #3
 8008e14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	fb02 f303 	mul.w	r3, r2, r3
 8008e1e:	ee07 3a90 	vmov	s15, r3
 8008e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 810a 	beq.w	8009046 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d05a      	beq.n	8008eee <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d302      	bcc.n	8008e42 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d078      	beq.n	8008f32 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008e40:	e099      	b.n	8008f76 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e42:	4b88      	ldr	r3, [pc, #544]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d02d      	beq.n	8008eaa <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e4e:	4b85      	ldr	r3, [pc, #532]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	08db      	lsrs	r3, r3, #3
 8008e54:	f003 0303 	and.w	r3, r3, #3
 8008e58:	4a83      	ldr	r2, [pc, #524]	; (8009068 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	ee07 3a90 	vmov	s15, r3
 8008e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	ee07 3a90 	vmov	s15, r3
 8008e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e78:	4b7a      	ldr	r3, [pc, #488]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e80:	ee07 3a90 	vmov	s15, r3
 8008e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e88:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e8c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800906c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008e90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ea4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008ea8:	e087      	b.n	8008fba <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	ee07 3a90 	vmov	s15, r3
 8008eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009070 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008eb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ebc:	4b69      	ldr	r3, [pc, #420]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec4:	ee07 3a90 	vmov	s15, r3
 8008ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ecc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ed0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800906c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008ed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ee8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eec:	e065      	b.n	8008fba <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	ee07 3a90 	vmov	s15, r3
 8008ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f00:	4b58      	ldr	r3, [pc, #352]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f08:	ee07 3a90 	vmov	s15, r3
 8008f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f10:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f14:	eddf 5a55 	vldr	s11, [pc, #340]	; 800906c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f30:	e043      	b.n	8008fba <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	ee07 3a90 	vmov	s15, r3
 8008f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f3c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009078 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f44:	4b47      	ldr	r3, [pc, #284]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f4c:	ee07 3a90 	vmov	s15, r3
 8008f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f54:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f58:	eddf 5a44 	vldr	s11, [pc, #272]	; 800906c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008f5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f74:	e021      	b.n	8008fba <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	ee07 3a90 	vmov	s15, r3
 8008f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f80:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009074 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f88:	4b36      	ldr	r3, [pc, #216]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f90:	ee07 3a90 	vmov	s15, r3
 8008f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f98:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f9c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800906c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008fa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fb8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008fba:	4b2a      	ldr	r3, [pc, #168]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbe:	0a5b      	lsrs	r3, r3, #9
 8008fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fc4:	ee07 3a90 	vmov	s15, r3
 8008fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fe0:	ee17 2a90 	vmov	r2, s15
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008fe8:	4b1e      	ldr	r3, [pc, #120]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fec:	0c1b      	lsrs	r3, r3, #16
 8008fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009002:	edd7 6a07 	vldr	s13, [r7, #28]
 8009006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800900a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800900e:	ee17 2a90 	vmov	r2, s15
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009016:	4b13      	ldr	r3, [pc, #76]	; (8009064 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901a:	0e1b      	lsrs	r3, r3, #24
 800901c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009020:	ee07 3a90 	vmov	s15, r3
 8009024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800902c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009030:	edd7 6a07 	vldr	s13, [r7, #28]
 8009034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800903c:	ee17 2a90 	vmov	r2, s15
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009044:	e008      	b.n	8009058 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	609a      	str	r2, [r3, #8]
}
 8009058:	bf00      	nop
 800905a:	3724      	adds	r7, #36	; 0x24
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	58024400 	.word	0x58024400
 8009068:	03d09000 	.word	0x03d09000
 800906c:	46000000 	.word	0x46000000
 8009070:	4c742400 	.word	0x4c742400
 8009074:	4a742400 	.word	0x4a742400
 8009078:	4af42400 	.word	0x4af42400

0800907c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800907c:	b480      	push	{r7}
 800907e:	b089      	sub	sp, #36	; 0x24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009084:	4b9d      	ldr	r3, [pc, #628]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009088:	f003 0303 	and.w	r3, r3, #3
 800908c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800908e:	4b9b      	ldr	r3, [pc, #620]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009092:	0d1b      	lsrs	r3, r3, #20
 8009094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009098:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800909a:	4b98      	ldr	r3, [pc, #608]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	0a1b      	lsrs	r3, r3, #8
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80090a6:	4b95      	ldr	r3, [pc, #596]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80090a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090aa:	08db      	lsrs	r3, r3, #3
 80090ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	fb02 f303 	mul.w	r3, r2, r3
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 810a 	beq.w	80092de <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d05a      	beq.n	8009186 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d302      	bcc.n	80090da <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d078      	beq.n	80091ca <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80090d8:	e099      	b.n	800920e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090da:	4b88      	ldr	r3, [pc, #544]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0320 	and.w	r3, r3, #32
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d02d      	beq.n	8009142 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090e6:	4b85      	ldr	r3, [pc, #532]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	08db      	lsrs	r3, r3, #3
 80090ec:	f003 0303 	and.w	r3, r3, #3
 80090f0:	4a83      	ldr	r2, [pc, #524]	; (8009300 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80090f2:	fa22 f303 	lsr.w	r3, r2, r3
 80090f6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	ee07 3a90 	vmov	s15, r3
 8009108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009110:	4b7a      	ldr	r3, [pc, #488]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009118:	ee07 3a90 	vmov	s15, r3
 800911c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009120:	ed97 6a03 	vldr	s12, [r7, #12]
 8009124:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800912c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009140:	e087      	b.n	8009252 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	ee07 3a90 	vmov	s15, r3
 8009148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009308 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009154:	4b69      	ldr	r3, [pc, #420]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915c:	ee07 3a90 	vmov	s15, r3
 8009160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009164:	ed97 6a03 	vldr	s12, [r7, #12]
 8009168:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800916c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009180:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009184:	e065      	b.n	8009252 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	ee07 3a90 	vmov	s15, r3
 800918c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009190:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800930c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009198:	4b58      	ldr	r3, [pc, #352]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a0:	ee07 3a90 	vmov	s15, r3
 80091a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80091b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091c8:	e043      	b.n	8009252 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	ee07 3a90 	vmov	s15, r3
 80091d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009310 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80091d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091dc:	4b47      	ldr	r3, [pc, #284]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80091de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e4:	ee07 3a90 	vmov	s15, r3
 80091e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80091f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80091f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009208:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800920c:	e021      	b.n	8009252 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	ee07 3a90 	vmov	s15, r3
 8009214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009218:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800930c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800921c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009220:	4b36      	ldr	r3, [pc, #216]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009228:	ee07 3a90 	vmov	s15, r3
 800922c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009230:	ed97 6a03 	vldr	s12, [r7, #12]
 8009234:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800923c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009250:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009252:	4b2a      	ldr	r3, [pc, #168]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009256:	0a5b      	lsrs	r3, r3, #9
 8009258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800925c:	ee07 3a90 	vmov	s15, r3
 8009260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009264:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009268:	ee37 7a87 	vadd.f32	s14, s15, s14
 800926c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009278:	ee17 2a90 	vmov	r2, s15
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009280:	4b1e      	ldr	r3, [pc, #120]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009284:	0c1b      	lsrs	r3, r3, #16
 8009286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800928a:	ee07 3a90 	vmov	s15, r3
 800928e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800929a:	edd7 6a07 	vldr	s13, [r7, #28]
 800929e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a6:	ee17 2a90 	vmov	r2, s15
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80092ae:	4b13      	ldr	r3, [pc, #76]	; (80092fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80092b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b2:	0e1b      	lsrs	r3, r3, #24
 80092b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b8:	ee07 3a90 	vmov	s15, r3
 80092bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80092cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092d4:	ee17 2a90 	vmov	r2, s15
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80092dc:	e008      	b.n	80092f0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	609a      	str	r2, [r3, #8]
}
 80092f0:	bf00      	nop
 80092f2:	3724      	adds	r7, #36	; 0x24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	58024400 	.word	0x58024400
 8009300:	03d09000 	.word	0x03d09000
 8009304:	46000000 	.word	0x46000000
 8009308:	4c742400 	.word	0x4c742400
 800930c:	4a742400 	.word	0x4a742400
 8009310:	4af42400 	.word	0x4af42400

08009314 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009314:	b480      	push	{r7}
 8009316:	b089      	sub	sp, #36	; 0x24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800931c:	4b9d      	ldr	r3, [pc, #628]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800931e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009320:	f003 0303 	and.w	r3, r3, #3
 8009324:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009326:	4b9b      	ldr	r3, [pc, #620]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932a:	091b      	lsrs	r3, r3, #4
 800932c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009330:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009332:	4b98      	ldr	r3, [pc, #608]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800933c:	4b95      	ldr	r3, [pc, #596]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800933e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009340:	08db      	lsrs	r3, r3, #3
 8009342:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	fb02 f303 	mul.w	r3, r2, r3
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009354:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 810a 	beq.w	8009574 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d05a      	beq.n	800941c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8009366:	2b01      	cmp	r3, #1
 8009368:	d302      	bcc.n	8009370 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800936a:	2b02      	cmp	r3, #2
 800936c:	d078      	beq.n	8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800936e:	e099      	b.n	80094a4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009370:	4b88      	ldr	r3, [pc, #544]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0320 	and.w	r3, r3, #32
 8009378:	2b00      	cmp	r3, #0
 800937a:	d02d      	beq.n	80093d8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800937c:	4b85      	ldr	r3, [pc, #532]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	08db      	lsrs	r3, r3, #3
 8009382:	f003 0303 	and.w	r3, r3, #3
 8009386:	4a84      	ldr	r2, [pc, #528]	; (8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8009388:	fa22 f303 	lsr.w	r3, r2, r3
 800938c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	ee07 3a90 	vmov	s15, r3
 8009394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093a6:	4b7b      	ldr	r3, [pc, #492]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80093a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ae:	ee07 3a90 	vmov	s15, r3
 80093b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800959c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80093be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80093d6:	e087      	b.n	80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80095a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80093e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ea:	4b6a      	ldr	r3, [pc, #424]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80093ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f2:	ee07 3a90 	vmov	s15, r3
 80093f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80093fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800959c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800940e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800941a:	e065      	b.n	80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	ee07 3a90 	vmov	s15, r3
 8009422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009426:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800942a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800942e:	4b59      	ldr	r3, [pc, #356]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009436:	ee07 3a90 	vmov	s15, r3
 800943a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800943e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009442:	eddf 5a56 	vldr	s11, [pc, #344]	; 800959c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800944e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800945e:	e043      	b.n	80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80095a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800946e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009472:	4b48      	ldr	r3, [pc, #288]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947a:	ee07 3a90 	vmov	s15, r3
 800947e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009482:	ed97 6a03 	vldr	s12, [r7, #12]
 8009486:	eddf 5a45 	vldr	s11, [pc, #276]	; 800959c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800948a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800948e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800949a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800949e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094a2:	e021      	b.n	80094e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	ee07 3a90 	vmov	s15, r3
 80094aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80094b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094b6:	4b37      	ldr	r3, [pc, #220]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80094b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094be:	ee07 3a90 	vmov	s15, r3
 80094c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800959c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80094ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094e6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80094e8:	4b2a      	ldr	r3, [pc, #168]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80094ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ec:	0a5b      	lsrs	r3, r3, #9
 80094ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009502:	edd7 6a07 	vldr	s13, [r7, #28]
 8009506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800950a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800950e:	ee17 2a90 	vmov	r2, s15
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009516:	4b1f      	ldr	r3, [pc, #124]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	0c1b      	lsrs	r3, r3, #16
 800951c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009520:	ee07 3a90 	vmov	s15, r3
 8009524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800952c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009530:	edd7 6a07 	vldr	s13, [r7, #28]
 8009534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800953c:	ee17 2a90 	vmov	r2, s15
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009544:	4b13      	ldr	r3, [pc, #76]	; (8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009548:	0e1b      	lsrs	r3, r3, #24
 800954a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800955a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800955e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800956a:	ee17 2a90 	vmov	r2, s15
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009572:	e008      	b.n	8009586 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	609a      	str	r2, [r3, #8]
}
 8009586:	bf00      	nop
 8009588:	3724      	adds	r7, #36	; 0x24
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	58024400 	.word	0x58024400
 8009598:	03d09000 	.word	0x03d09000
 800959c:	46000000 	.word	0x46000000
 80095a0:	4c742400 	.word	0x4c742400
 80095a4:	4a742400 	.word	0x4a742400
 80095a8:	4af42400 	.word	0x4af42400

080095ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095ba:	4b53      	ldr	r3, [pc, #332]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80095bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095be:	f003 0303 	and.w	r3, r3, #3
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d101      	bne.n	80095ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e099      	b.n	80096fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80095ca:	4b4f      	ldr	r3, [pc, #316]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a4e      	ldr	r2, [pc, #312]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80095d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80095d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095d6:	f7f8 fe6d 	bl	80022b4 <HAL_GetTick>
 80095da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095dc:	e008      	b.n	80095f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80095de:	f7f8 fe69 	bl	80022b4 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d901      	bls.n	80095f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e086      	b.n	80096fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095f0:	4b45      	ldr	r3, [pc, #276]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1f0      	bne.n	80095de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80095fc:	4b42      	ldr	r3, [pc, #264]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80095fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009600:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	031b      	lsls	r3, r3, #12
 800960a:	493f      	ldr	r1, [pc, #252]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 800960c:	4313      	orrs	r3, r2
 800960e:	628b      	str	r3, [r1, #40]	; 0x28
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	3b01      	subs	r3, #1
 8009616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	3b01      	subs	r3, #1
 8009620:	025b      	lsls	r3, r3, #9
 8009622:	b29b      	uxth	r3, r3
 8009624:	431a      	orrs	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	3b01      	subs	r3, #1
 800962c:	041b      	lsls	r3, r3, #16
 800962e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	3b01      	subs	r3, #1
 800963a:	061b      	lsls	r3, r3, #24
 800963c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009640:	4931      	ldr	r1, [pc, #196]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 8009642:	4313      	orrs	r3, r2
 8009644:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009646:	4b30      	ldr	r3, [pc, #192]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 8009648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	492d      	ldr	r1, [pc, #180]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 8009654:	4313      	orrs	r3, r2
 8009656:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009658:	4b2b      	ldr	r3, [pc, #172]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	f023 0220 	bic.w	r2, r3, #32
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	4928      	ldr	r1, [pc, #160]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 8009666:	4313      	orrs	r3, r2
 8009668:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800966a:	4b27      	ldr	r3, [pc, #156]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 800966c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966e:	4a26      	ldr	r2, [pc, #152]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 8009670:	f023 0310 	bic.w	r3, r3, #16
 8009674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009676:	4b24      	ldr	r3, [pc, #144]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 8009678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800967a:	4b24      	ldr	r3, [pc, #144]	; (800970c <RCCEx_PLL2_Config+0x160>)
 800967c:	4013      	ands	r3, r2
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	69d2      	ldr	r2, [r2, #28]
 8009682:	00d2      	lsls	r2, r2, #3
 8009684:	4920      	ldr	r1, [pc, #128]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 8009686:	4313      	orrs	r3, r2
 8009688:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800968a:	4b1f      	ldr	r3, [pc, #124]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	4a1e      	ldr	r2, [pc, #120]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 8009690:	f043 0310 	orr.w	r3, r3, #16
 8009694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d106      	bne.n	80096aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800969c:	4b1a      	ldr	r3, [pc, #104]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	4a19      	ldr	r2, [pc, #100]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80096a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096a8:	e00f      	b.n	80096ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d106      	bne.n	80096be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096b0:	4b15      	ldr	r3, [pc, #84]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80096b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b4:	4a14      	ldr	r2, [pc, #80]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80096b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096bc:	e005      	b.n	80096ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096be:	4b12      	ldr	r3, [pc, #72]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80096c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c2:	4a11      	ldr	r2, [pc, #68]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80096c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80096ca:	4b0f      	ldr	r3, [pc, #60]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a0e      	ldr	r2, [pc, #56]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80096d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80096d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096d6:	f7f8 fded 	bl	80022b4 <HAL_GetTick>
 80096da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096dc:	e008      	b.n	80096f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80096de:	f7f8 fde9 	bl	80022b4 <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d901      	bls.n	80096f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e006      	b.n	80096fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096f0:	4b05      	ldr	r3, [pc, #20]	; (8009708 <RCCEx_PLL2_Config+0x15c>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0f0      	beq.n	80096de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	58024400 	.word	0x58024400
 800970c:	ffff0007 	.word	0xffff0007

08009710 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800971e:	4b53      	ldr	r3, [pc, #332]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009722:	f003 0303 	and.w	r3, r3, #3
 8009726:	2b03      	cmp	r3, #3
 8009728:	d101      	bne.n	800972e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e099      	b.n	8009862 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800972e:	4b4f      	ldr	r3, [pc, #316]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a4e      	ldr	r2, [pc, #312]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800973a:	f7f8 fdbb 	bl	80022b4 <HAL_GetTick>
 800973e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009740:	e008      	b.n	8009754 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009742:	f7f8 fdb7 	bl	80022b4 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	2b02      	cmp	r3, #2
 800974e:	d901      	bls.n	8009754 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e086      	b.n	8009862 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009754:	4b45      	ldr	r3, [pc, #276]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1f0      	bne.n	8009742 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009760:	4b42      	ldr	r3, [pc, #264]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009764:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	051b      	lsls	r3, r3, #20
 800976e:	493f      	ldr	r1, [pc, #252]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009770:	4313      	orrs	r3, r2
 8009772:	628b      	str	r3, [r1, #40]	; 0x28
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	3b01      	subs	r3, #1
 800977a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	3b01      	subs	r3, #1
 8009784:	025b      	lsls	r3, r3, #9
 8009786:	b29b      	uxth	r3, r3
 8009788:	431a      	orrs	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	3b01      	subs	r3, #1
 8009790:	041b      	lsls	r3, r3, #16
 8009792:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009796:	431a      	orrs	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	3b01      	subs	r3, #1
 800979e:	061b      	lsls	r3, r3, #24
 80097a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097a4:	4931      	ldr	r1, [pc, #196]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 80097a6:	4313      	orrs	r3, r2
 80097a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097aa:	4b30      	ldr	r3, [pc, #192]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 80097ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	492d      	ldr	r1, [pc, #180]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 80097b8:	4313      	orrs	r3, r2
 80097ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80097bc:	4b2b      	ldr	r3, [pc, #172]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 80097be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	4928      	ldr	r1, [pc, #160]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80097ce:	4b27      	ldr	r3, [pc, #156]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 80097d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d2:	4a26      	ldr	r2, [pc, #152]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 80097d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80097da:	4b24      	ldr	r3, [pc, #144]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 80097dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097de:	4b24      	ldr	r3, [pc, #144]	; (8009870 <RCCEx_PLL3_Config+0x160>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	69d2      	ldr	r2, [r2, #28]
 80097e6:	00d2      	lsls	r2, r2, #3
 80097e8:	4920      	ldr	r1, [pc, #128]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80097ee:	4b1f      	ldr	r3, [pc, #124]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	4a1e      	ldr	r2, [pc, #120]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 80097f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d106      	bne.n	800980e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009800:	4b1a      	ldr	r3, [pc, #104]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	4a19      	ldr	r2, [pc, #100]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009806:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800980a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800980c:	e00f      	b.n	800982e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d106      	bne.n	8009822 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009814:	4b15      	ldr	r3, [pc, #84]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009818:	4a14      	ldr	r2, [pc, #80]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 800981a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800981e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009820:	e005      	b.n	800982e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009822:	4b12      	ldr	r3, [pc, #72]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009826:	4a11      	ldr	r2, [pc, #68]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009828:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800982c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800982e:	4b0f      	ldr	r3, [pc, #60]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a0e      	ldr	r2, [pc, #56]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800983a:	f7f8 fd3b 	bl	80022b4 <HAL_GetTick>
 800983e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009840:	e008      	b.n	8009854 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009842:	f7f8 fd37 	bl	80022b4 <HAL_GetTick>
 8009846:	4602      	mov	r2, r0
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	2b02      	cmp	r3, #2
 800984e:	d901      	bls.n	8009854 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009850:	2303      	movs	r3, #3
 8009852:	e006      	b.n	8009862 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <RCCEx_PLL3_Config+0x15c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d0f0      	beq.n	8009842 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009860:	7bfb      	ldrb	r3, [r7, #15]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	58024400 	.word	0x58024400
 8009870:	ffff0007 	.word	0xffff0007

08009874 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08a      	sub	sp, #40	; 0x28
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e07c      	b.n	8009980 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10c      	bne.n	80098ac <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d102      	bne.n	80098a6 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2202      	movs	r2, #2
 80098a4:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7f7 fdc8 	bl	800143c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2203      	movs	r2, #3
 80098b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f867 	bl	8009988 <HAL_SD_InitCard>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e05d      	b.n	8009980 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80098c4:	f107 0308 	add.w	r3, r7, #8
 80098c8:	4619      	mov	r1, r3
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fdb6 	bl	800a43c <HAL_SD_GetCardStatus>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e052      	b.n	8009980 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80098da:	7e3b      	ldrb	r3, [r7, #24]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80098e0:	7e7b      	ldrb	r3, [r7, #25]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d10a      	bne.n	8009904 <HAL_SD_Init+0x90>
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d102      	bne.n	80098fa <HAL_SD_Init+0x86>
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d004      	beq.n	8009904 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009900:	65da      	str	r2, [r3, #92]	; 0x5c
 8009902:	e00b      	b.n	800991c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009908:	2b01      	cmp	r3, #1
 800990a:	d104      	bne.n	8009916 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009912:	65da      	str	r2, [r3, #92]	; 0x5c
 8009914:	e002      	b.n	800991c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fe6c 	bl	800a600 <HAL_SD_ConfigWideBusOperation>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e026      	b.n	8009980 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009932:	f7f8 fcbf 	bl	80022b4 <HAL_GetTick>
 8009936:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009938:	e011      	b.n	800995e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800993a:	f7f8 fcbb 	bl	80022b4 <HAL_GetTick>
 800993e:	4602      	mov	r2, r0
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009948:	d109      	bne.n	800995e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009950:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	e010      	b.n	8009980 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fef8 	bl	800a754 <HAL_SD_GetCardState>
 8009964:	4603      	mov	r3, r0
 8009966:	2b04      	cmp	r3, #4
 8009968:	d1e7      	bne.n	800993a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3728      	adds	r7, #40	; 0x28
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009988:	b5b0      	push	{r4, r5, r7, lr}
 800998a:	b08e      	sub	sp, #56	; 0x38
 800998c:	af04      	add	r7, sp, #16
 800998e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009990:	2300      	movs	r3, #0
 8009992:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009994:	2300      	movs	r3, #0
 8009996:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009998:	2300      	movs	r3, #0
 800999a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800999c:	2300      	movs	r3, #0
 800999e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80099a0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80099a4:	f7fe ff90 	bl	80088c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80099a8:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	0a1b      	lsrs	r3, r3, #8
 80099ae:	4a40      	ldr	r2, [pc, #256]	; (8009ab0 <HAL_SD_InitCard+0x128>)
 80099b0:	fba2 2303 	umull	r2, r3, r2, r3
 80099b4:	091b      	lsrs	r3, r3, #4
 80099b6:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d107      	bne.n	80099d0 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f042 0210 	orr.w	r2, r2, #16
 80099ce:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681d      	ldr	r5, [r3, #0]
 80099d4:	466c      	mov	r4, sp
 80099d6:	f107 0314 	add.w	r3, r7, #20
 80099da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80099e2:	f107 0308 	add.w	r3, r7, #8
 80099e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099e8:	4628      	mov	r0, r5
 80099ea:	f003 faa5 	bl	800cf38 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f003 fae8 	bl	800cfc8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a02:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d008      	beq.n	8009a1c <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009a0a:	4a2a      	ldr	r2, [pc, #168]	; (8009ab4 <HAL_SD_InitCard+0x12c>)
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a12:	3301      	adds	r3, #1
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7f8 fc59 	bl	80022cc <HAL_Delay>
 8009a1a:	e002      	b.n	8009a22 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8009a1c:	2002      	movs	r0, #2
 8009a1e:	f7f8 fc55 	bl	80022cc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 ff74 	bl	800a910 <SD_PowerON>
 8009a28:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00b      	beq.n	8009a48 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e02e      	b.n	8009aa6 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fea3 	bl	800a794 <SD_InitCard>
 8009a4e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00b      	beq.n	8009a6e <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	431a      	orrs	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e01b      	b.n	8009aa6 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a76:	4618      	mov	r0, r3
 8009a78:	f003 fb3c 	bl	800d0f4 <SDMMC_CmdBlockLength>
 8009a7c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00f      	beq.n	8009aa4 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a0b      	ldr	r2, [pc, #44]	; (8009ab8 <HAL_SD_InitCard+0x130>)
 8009a8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	431a      	orrs	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e000      	b.n	8009aa6 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3728      	adds	r7, #40	; 0x28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bdb0      	pop	{r4, r5, r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	014f8b59 	.word	0x014f8b59
 8009ab4:	00012110 	.word	0x00012110
 8009ab8:	1fe00fff 	.word	0x1fe00fff

08009abc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08c      	sub	sp, #48	; 0x30
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
 8009ac8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d107      	bne.n	8009ae4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e08d      	b.n	8009c00 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	f040 8086 	bne.w	8009bfe <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	441a      	add	r2, r3
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d907      	bls.n	8009b16 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e074      	b.n	8009c00 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2203      	movs	r2, #3
 8009b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2200      	movs	r2, #0
 8009b24:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	025a      	lsls	r2, r3, #9
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d002      	beq.n	8009b42 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	025b      	lsls	r3, r3, #9
 8009b40:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b42:	f04f 33ff 	mov.w	r3, #4294967295
 8009b46:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	025b      	lsls	r3, r3, #9
 8009b4c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009b4e:	2390      	movs	r3, #144	; 0x90
 8009b50:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009b52:	2302      	movs	r3, #2
 8009b54:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f107 0210 	add.w	r2, r7, #16
 8009b66:	4611      	mov	r1, r2
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f003 fa97 	bl	800d09c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68da      	ldr	r2, [r3, #12]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b7c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d90a      	bls.n	8009baa <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2282      	movs	r2, #130	; 0x82
 8009b98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f003 faed 	bl	800d180 <SDMMC_CmdReadMultiBlock>
 8009ba6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009ba8:	e009      	b.n	8009bbe <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2281      	movs	r2, #129	; 0x81
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f003 fabf 	bl	800d13a <SDMMC_CmdReadSingleBlock>
 8009bbc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d012      	beq.n	8009bea <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a0f      	ldr	r2, [pc, #60]	; (8009c08 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009bca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e00a      	b.n	8009c00 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009bf8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e000      	b.n	8009c00 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009bfe:	2302      	movs	r3, #2
  }
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3730      	adds	r7, #48	; 0x30
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	1fe00fff 	.word	0x1fe00fff

08009c0c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b08c      	sub	sp, #48	; 0x30
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d107      	bne.n	8009c34 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e08d      	b.n	8009d50 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	f040 8086 	bne.w	8009d4e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	441a      	add	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d907      	bls.n	8009c66 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e074      	b.n	8009d50 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2203      	movs	r2, #3
 8009c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2200      	movs	r2, #0
 8009c74:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	025a      	lsls	r2, r3, #9
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d002      	beq.n	8009c92 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8e:	025b      	lsls	r3, r3, #9
 8009c90:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c92:	f04f 33ff 	mov.w	r3, #4294967295
 8009c96:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	025b      	lsls	r3, r3, #9
 8009c9c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009c9e:	2390      	movs	r3, #144	; 0x90
 8009ca0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009caa:	2300      	movs	r3, #0
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f107 0210 	add.w	r2, r7, #16
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f003 f9ef 	bl	800d09c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68da      	ldr	r2, [r3, #12]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ccc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d90a      	bls.n	8009cfa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	22a0      	movs	r2, #160	; 0xa0
 8009ce8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f003 fa8b 	bl	800d20c <SDMMC_CmdWriteMultiBlock>
 8009cf6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009cf8:	e009      	b.n	8009d0e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2290      	movs	r2, #144	; 0x90
 8009cfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d06:	4618      	mov	r0, r3
 8009d08:	f003 fa5d 	bl	800d1c6 <SDMMC_CmdWriteSingleBlock>
 8009d0c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d012      	beq.n	8009d3a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a0f      	ldr	r2, [pc, #60]	; (8009d58 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d22:	431a      	orrs	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e00a      	b.n	8009d50 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009d48:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e000      	b.n	8009d50 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009d4e:	2302      	movs	r3, #2
  }
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3730      	adds	r7, #48	; 0x30
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	1fe00fff 	.word	0x1fe00fff

08009d5c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d68:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d008      	beq.n	8009d8a <HAL_SD_IRQHandler+0x2e>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f003 0308 	and.w	r3, r3, #8
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f001 f92a 	bl	800afdc <SD_Read_IT>
 8009d88:	e19a      	b.n	800a0c0 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 80ac 	beq.w	8009ef2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009da2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	4b9d      	ldr	r3, [pc, #628]	; (800a024 <HAL_SD_IRQHandler+0x2c8>)
 8009db0:	400b      	ands	r3, r1
 8009db2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009dc2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68da      	ldr	r2, [r3, #12]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dd2:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f003 0308 	and.w	r3, r3, #8
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d038      	beq.n	8009e50 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f003 0302 	and.w	r3, r3, #2
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d104      	bne.n	8009df2 <HAL_SD_IRQHandler+0x96>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f003 0320 	and.w	r3, r3, #32
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d011      	beq.n	8009e16 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f003 fa2c 	bl	800d254 <SDMMC_CmdStopTransfer>
 8009dfc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d008      	beq.n	8009e16 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f959 	bl	800a0c8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a83      	ldr	r2, [pc, #524]	; (800a028 <HAL_SD_IRQHandler+0x2cc>)
 8009e1c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d104      	bne.n	8009e40 <HAL_SD_IRQHandler+0xe4>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d003      	beq.n	8009e48 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f005 fa15 	bl	800f270 <HAL_SD_RxCpltCallback>
 8009e46:	e13b      	b.n	800a0c0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f005 fa07 	bl	800f25c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009e4e:	e137      	b.n	800a0c0 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f000 8132 	beq.w	800a0c0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2200      	movs	r2, #0
 8009e62:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2200      	movs	r2, #0
 8009e72:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f003 0302 	and.w	r3, r3, #2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d104      	bne.n	8009e88 <HAL_SD_IRQHandler+0x12c>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f003 0320 	and.w	r3, r3, #32
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d011      	beq.n	8009eac <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f003 f9e1 	bl	800d254 <SDMMC_CmdStopTransfer>
 8009e92:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d008      	beq.n	8009eac <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	431a      	orrs	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f90e 	bl	800a0c8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f003 0310 	and.w	r3, r3, #16
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d104      	bne.n	8009ece <HAL_SD_IRQHandler+0x172>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f003 0320 	and.w	r3, r3, #32
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d002      	beq.n	8009ed4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f005 f9c4 	bl	800f25c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d105      	bne.n	8009eea <HAL_SD_IRQHandler+0x18e>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f003 0302 	and.w	r3, r3, #2
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 80eb 	beq.w	800a0c0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f005 f9c0 	bl	800f270 <HAL_SD_RxCpltCallback>
}
 8009ef0:	e0e6      	b.n	800a0c0 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d008      	beq.n	8009f12 <HAL_SD_IRQHandler+0x1b6>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f003 0308 	and.w	r3, r3, #8
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f001 f8ac 	bl	800b068 <SD_Write_IT>
 8009f10:	e0d6      	b.n	800a0c0 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f18:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 80a2 	beq.w	800a066 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f28:	f003 0302 	and.w	r3, r3, #2
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d005      	beq.n	8009f3c <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f34:	f043 0202 	orr.w	r2, r3, #2
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d005      	beq.n	8009f56 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4e:	f043 0208 	orr.w	r2, r3, #8
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5c:	f003 0320 	and.w	r3, r3, #32
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d005      	beq.n	8009f70 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f68:	f043 0220 	orr.w	r2, r3, #32
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f76:	f003 0310 	and.w	r3, r3, #16
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d005      	beq.n	8009f8a <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f82:	f043 0210 	orr.w	r2, r3, #16
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a26      	ldr	r2, [pc, #152]	; (800a028 <HAL_SD_IRQHandler+0x2cc>)
 8009f90:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009fa0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68da      	ldr	r2, [r3, #12]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fb0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68da      	ldr	r2, [r3, #12]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009fd0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f003 f93c 	bl	800d254 <SDMMC_CmdStopTransfer>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe2:	431a      	orrs	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68da      	ldr	r2, [r3, #12]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ff6:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a000:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f003 0308 	and.w	r3, r3, #8
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00f      	beq.n	800a02c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f854 	bl	800a0c8 <HAL_SD_ErrorCallback>
}
 800a020:	e04e      	b.n	800a0c0 <HAL_SD_IRQHandler+0x364>
 800a022:	bf00      	nop
 800a024:	ffff3ec5 	.word	0xffff3ec5
 800a028:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a032:	2b00      	cmp	r3, #0
 800a034:	d044      	beq.n	800a0c0 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d040      	beq.n	800a0c0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a04c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2200      	movs	r2, #0
 800a054:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f832 	bl	800a0c8 <HAL_SD_ErrorCallback>
}
 800a064:	e02c      	b.n	800a0c0 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d025      	beq.n	800a0c0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07c:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10c      	bne.n	800a0a6 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f003 0320 	and.w	r3, r3, #32
 800a092:	2b00      	cmp	r3, #0
 800a094:	d003      	beq.n	800a09e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f001 f84e 	bl	800b138 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a09c:	e010      	b.n	800a0c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f001 f836 	bl	800b110 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a0a4:	e00c      	b.n	800a0c0 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f003 0320 	and.w	r3, r3, #32
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d003      	beq.n	800a0b8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f001 f837 	bl	800b124 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a0b6:	e003      	b.n	800a0c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f001 f81f 	bl	800b0fc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a0be:	e7ff      	b.n	800a0c0 <HAL_SD_IRQHandler+0x364>
 800a0c0:	bf00      	nop
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800a0e6:	bf00      	nop
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a102:	0f9b      	lsrs	r3, r3, #30
 800a104:	b2da      	uxtb	r2, r3
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a10e:	0e9b      	lsrs	r3, r3, #26
 800a110:	b2db      	uxtb	r3, r3
 800a112:	f003 030f 	and.w	r3, r3, #15
 800a116:	b2da      	uxtb	r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a120:	0e1b      	lsrs	r3, r3, #24
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f003 0303 	and.w	r3, r3, #3
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a132:	0c1b      	lsrs	r3, r3, #16
 800a134:	b2da      	uxtb	r2, r3
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a13e:	0a1b      	lsrs	r3, r3, #8
 800a140:	b2da      	uxtb	r2, r3
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a154:	0d1b      	lsrs	r3, r3, #20
 800a156:	b29a      	uxth	r2, r3
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a160:	0c1b      	lsrs	r3, r3, #16
 800a162:	b2db      	uxtb	r3, r3
 800a164:	f003 030f 	and.w	r3, r3, #15
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a172:	0bdb      	lsrs	r3, r3, #15
 800a174:	b2db      	uxtb	r3, r3
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a184:	0b9b      	lsrs	r3, r3, #14
 800a186:	b2db      	uxtb	r3, r3
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a196:	0b5b      	lsrs	r3, r3, #13
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1a8:	0b1b      	lsrs	r3, r3, #12
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d163      	bne.n	800a28c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1c8:	009a      	lsls	r2, r3, #2
 800a1ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a1d4:	0f92      	lsrs	r2, r2, #30
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1e0:	0edb      	lsrs	r3, r3, #27
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1f2:	0e1b      	lsrs	r3, r3, #24
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	f003 0307 	and.w	r3, r3, #7
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a204:	0d5b      	lsrs	r3, r3, #21
 800a206:	b2db      	uxtb	r3, r3
 800a208:	f003 0307 	and.w	r3, r3, #7
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a216:	0c9b      	lsrs	r3, r3, #18
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	f003 0307 	and.w	r3, r3, #7
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a228:	0bdb      	lsrs	r3, r3, #15
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	f003 0307 	and.w	r3, r3, #7
 800a230:	b2da      	uxtb	r2, r3
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	7e1b      	ldrb	r3, [r3, #24]
 800a244:	b2db      	uxtb	r3, r3
 800a246:	f003 0307 	and.w	r3, r3, #7
 800a24a:	3302      	adds	r3, #2
 800a24c:	2201      	movs	r2, #1
 800a24e:	fa02 f303 	lsl.w	r3, r2, r3
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a256:	fb02 f203 	mul.w	r2, r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	7a1b      	ldrb	r3, [r3, #8]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	f003 030f 	and.w	r3, r3, #15
 800a268:	2201      	movs	r2, #1
 800a26a:	409a      	lsls	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a278:	0a52      	lsrs	r2, r2, #9
 800a27a:	fb02 f203 	mul.w	r2, r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a288:	659a      	str	r2, [r3, #88]	; 0x58
 800a28a:	e031      	b.n	800a2f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a290:	2b01      	cmp	r3, #1
 800a292:	d11d      	bne.n	800a2d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a298:	041b      	lsls	r3, r3, #16
 800a29a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2a2:	0c1b      	lsrs	r3, r3, #16
 800a2a4:	431a      	orrs	r2, r3
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	029a      	lsls	r2, r3, #10
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2c4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	659a      	str	r2, [r3, #88]	; 0x58
 800a2ce:	e00f      	b.n	800a2f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a58      	ldr	r2, [pc, #352]	; (800a438 <HAL_SD_GetCardCSD+0x344>)
 800a2d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e09d      	b.n	800a42c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2f4:	0b9b      	lsrs	r3, r3, #14
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a306:	09db      	lsrs	r3, r3, #7
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a328:	0fdb      	lsrs	r3, r3, #31
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a334:	0f5b      	lsrs	r3, r3, #29
 800a336:	b2db      	uxtb	r3, r3
 800a338:	f003 0303 	and.w	r3, r3, #3
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a346:	0e9b      	lsrs	r3, r3, #26
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a358:	0d9b      	lsrs	r3, r3, #22
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	f003 030f 	and.w	r3, r3, #15
 800a360:	b2da      	uxtb	r2, r3
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a36a:	0d5b      	lsrs	r3, r3, #21
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	b2da      	uxtb	r2, r3
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a386:	0c1b      	lsrs	r3, r3, #16
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a39a:	0bdb      	lsrs	r3, r3, #15
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ae:	0b9b      	lsrs	r3, r3, #14
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	f003 0301 	and.w	r3, r3, #1
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3c2:	0b5b      	lsrs	r3, r3, #13
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3d6:	0b1b      	lsrs	r3, r3, #12
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ea:	0a9b      	lsrs	r3, r3, #10
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	f003 0303 	and.w	r3, r3, #3
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3fe:	0a1b      	lsrs	r3, r3, #8
 800a400:	b2db      	uxtb	r3, r3
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	b2da      	uxtb	r2, r3
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a412:	085b      	lsrs	r3, r3, #1
 800a414:	b2db      	uxtb	r3, r3
 800a416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	1fe00fff 	.word	0x1fe00fff

0800a43c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b094      	sub	sp, #80	; 0x50
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a446:	2300      	movs	r3, #0
 800a448:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a44c:	f107 0308 	add.w	r3, r7, #8
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fb64 	bl	800ab20 <SD_SendSDStatus>
 800a458:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a45a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d011      	beq.n	800a484 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a4f      	ldr	r2, [pc, #316]	; (800a5a4 <HAL_SD_GetCardStatus+0x168>)
 800a466:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a46c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a46e:	431a      	orrs	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a482:	e070      	b.n	800a566 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	099b      	lsrs	r3, r3, #6
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	f003 0303 	and.w	r3, r3, #3
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	095b      	lsrs	r3, r3, #5
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	0a1b      	lsrs	r3, r3, #8
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	0e1b      	lsrs	r3, r3, #24
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	061a      	lsls	r2, r3, #24
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	021b      	lsls	r3, r3, #8
 800a4c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4ca:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	0a1b      	lsrs	r3, r3, #8
 800a4d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a4d4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	0e1b      	lsrs	r3, r3, #24
 800a4da:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	0a1b      	lsrs	r3, r3, #8
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	0d1b      	lsrs	r3, r3, #20
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	f003 030f 	and.w	r3, r3, #15
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	0c1b      	lsrs	r3, r3, #16
 800a506:	b29b      	uxth	r3, r3
 800a508:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	b29b      	uxth	r3, r3
 800a512:	b2db      	uxtb	r3, r3
 800a514:	b29b      	uxth	r3, r3
 800a516:	4313      	orrs	r3, r2
 800a518:	b29a      	uxth	r2, r3
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	0a9b      	lsrs	r3, r3, #10
 800a522:	b2db      	uxtb	r3, r3
 800a524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	0a1b      	lsrs	r3, r3, #8
 800a532:	b2db      	uxtb	r3, r3
 800a534:	f003 0303 	and.w	r3, r3, #3
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	091b      	lsrs	r3, r3, #4
 800a542:	b2db      	uxtb	r3, r3
 800a544:	f003 030f 	and.w	r3, r3, #15
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	b2db      	uxtb	r3, r3
 800a552:	f003 030f 	and.w	r3, r3, #15
 800a556:	b2da      	uxtb	r2, r3
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	0e1b      	lsrs	r3, r3, #24
 800a560:	b2da      	uxtb	r2, r3
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a56e:	4618      	mov	r0, r3
 800a570:	f002 fdc0 	bl	800d0f4 <SDMMC_CmdBlockLength>
 800a574:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00d      	beq.n	800a598 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a08      	ldr	r2, [pc, #32]	; (800a5a4 <HAL_SD_GetCardStatus+0x168>)
 800a582:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a588:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800a598:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3750      	adds	r7, #80	; 0x50
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	1fe00fff 	.word	0x1fe00fff

0800a5a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a600:	b5b0      	push	{r4, r5, r7, lr}
 800a602:	b08e      	sub	sp, #56	; 0x38
 800a604:	af04      	add	r7, sp, #16
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2203      	movs	r2, #3
 800a614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d02e      	beq.n	800a67e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a626:	d106      	bne.n	800a636 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	639a      	str	r2, [r3, #56]	; 0x38
 800a634:	e029      	b.n	800a68a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a63c:	d10a      	bne.n	800a654 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fb66 	bl	800ad10 <SD_WideBus_Enable>
 800a644:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a64a:	6a3b      	ldr	r3, [r7, #32]
 800a64c:	431a      	orrs	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	639a      	str	r2, [r3, #56]	; 0x38
 800a652:	e01a      	b.n	800a68a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10a      	bne.n	800a670 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 fba3 	bl	800ada6 <SD_WideBus_Disable>
 800a660:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	431a      	orrs	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	639a      	str	r2, [r3, #56]	; 0x38
 800a66e:	e00c      	b.n	800a68a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a674:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	639a      	str	r2, [r3, #56]	; 0x38
 800a67c:	e005      	b.n	800a68a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a682:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d007      	beq.n	800a6a2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a2e      	ldr	r2, [pc, #184]	; (800a750 <HAL_SD_ConfigWideBusOperation+0x150>)
 800a698:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a6a0:	e034      	b.n	800a70c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	2b03      	cmp	r3, #3
 800a6be:	d903      	bls.n	800a6c8 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	695b      	ldr	r3, [r3, #20]
 800a6c4:	61bb      	str	r3, [r7, #24]
 800a6c6:	e012      	b.n	800a6ee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6d0:	d103      	bne.n	800a6da <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	61bb      	str	r3, [r7, #24]
 800a6d8:	e009      	b.n	800a6ee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6e2:	d102      	bne.n	800a6ea <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	61bb      	str	r3, [r7, #24]
 800a6e8:	e001      	b.n	800a6ee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a6ea:	2304      	movs	r3, #4
 800a6ec:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681d      	ldr	r5, [r3, #0]
 800a6f2:	466c      	mov	r4, sp
 800a6f4:	f107 0314 	add.w	r3, r7, #20
 800a6f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a700:	f107 0308 	add.w	r3, r7, #8
 800a704:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a706:	4628      	mov	r0, r5
 800a708:	f002 fc16 	bl	800cf38 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a714:	4618      	mov	r0, r3
 800a716:	f002 fced 	bl	800d0f4 <SDMMC_CmdBlockLength>
 800a71a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00c      	beq.n	800a73c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a0a      	ldr	r2, [pc, #40]	; (800a750 <HAL_SD_ConfigWideBusOperation+0x150>)
 800a728:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a72e:	6a3b      	ldr	r3, [r7, #32]
 800a730:	431a      	orrs	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3728      	adds	r7, #40	; 0x28
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bdb0      	pop	{r4, r5, r7, pc}
 800a750:	1fe00fff 	.word	0x1fe00fff

0800a754 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a760:	f107 030c 	add.w	r3, r7, #12
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 faaa 	bl	800acc0 <SD_SendStatus>
 800a76c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d005      	beq.n	800a780 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	431a      	orrs	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	0a5b      	lsrs	r3, r3, #9
 800a784:	f003 030f 	and.w	r3, r3, #15
 800a788:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a78a:	693b      	ldr	r3, [r7, #16]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3718      	adds	r7, #24
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a794:	b590      	push	{r4, r7, lr}
 800a796:	b091      	sub	sp, #68	; 0x44
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a79c:	2301      	movs	r3, #1
 800a79e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f002 fc20 	bl	800cfea <SDMMC_GetPowerState>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d102      	bne.n	800a7b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a7b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a7b4:	e0a8      	b.n	800a908 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d02e      	beq.n	800a81c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f002 fe6c 	bl	800d4a0 <SDMMC_CmdSendCID>
 800a7c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <SD_InitCard+0x40>
    {
      return errorstate;
 800a7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d2:	e099      	b.n	800a908 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2100      	movs	r1, #0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f002 fc4b 	bl	800d076 <SDMMC_GetResponse>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2104      	movs	r1, #4
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f002 fc42 	bl	800d076 <SDMMC_GetResponse>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2108      	movs	r1, #8
 800a7fe:	4618      	mov	r0, r3
 800a800:	f002 fc39 	bl	800d076 <SDMMC_GetResponse>
 800a804:	4602      	mov	r2, r0
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	210c      	movs	r1, #12
 800a810:	4618      	mov	r0, r3
 800a812:	f002 fc30 	bl	800d076 <SDMMC_GetResponse>
 800a816:	4602      	mov	r2, r0
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a820:	2b03      	cmp	r3, #3
 800a822:	d00d      	beq.n	800a840 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f107 020e 	add.w	r2, r7, #14
 800a82c:	4611      	mov	r1, r2
 800a82e:	4618      	mov	r0, r3
 800a830:	f002 fe75 	bl	800d51e <SDMMC_CmdSetRelAdd>
 800a834:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <SD_InitCard+0xac>
    {
      return errorstate;
 800a83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a83e:	e063      	b.n	800a908 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a844:	2b03      	cmp	r3, #3
 800a846:	d036      	beq.n	800a8b6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a848:	89fb      	ldrh	r3, [r7, #14]
 800a84a:	461a      	mov	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a858:	041b      	lsls	r3, r3, #16
 800a85a:	4619      	mov	r1, r3
 800a85c:	4610      	mov	r0, r2
 800a85e:	f002 fe3e 	bl	800d4de <SDMMC_CmdSendCSD>
 800a862:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <SD_InitCard+0xda>
    {
      return errorstate;
 800a86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a86c:	e04c      	b.n	800a908 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2100      	movs	r1, #0
 800a874:	4618      	mov	r0, r3
 800a876:	f002 fbfe 	bl	800d076 <SDMMC_GetResponse>
 800a87a:	4602      	mov	r2, r0
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2104      	movs	r1, #4
 800a886:	4618      	mov	r0, r3
 800a888:	f002 fbf5 	bl	800d076 <SDMMC_GetResponse>
 800a88c:	4602      	mov	r2, r0
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2108      	movs	r1, #8
 800a898:	4618      	mov	r0, r3
 800a89a:	f002 fbec 	bl	800d076 <SDMMC_GetResponse>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	210c      	movs	r1, #12
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f002 fbe3 	bl	800d076 <SDMMC_GetResponse>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2104      	movs	r1, #4
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f002 fbda 	bl	800d076 <SDMMC_GetResponse>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	0d1a      	lsrs	r2, r3, #20
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a8ca:	f107 0310 	add.w	r3, r7, #16
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff fc0f 	bl	800a0f4 <HAL_SD_GetCardCSD>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a8e0:	e012      	b.n	800a908 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6819      	ldr	r1, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8ea:	041b      	lsls	r3, r3, #16
 800a8ec:	f04f 0400 	mov.w	r4, #0
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	4623      	mov	r3, r4
 800a8f4:	4608      	mov	r0, r1
 800a8f6:	f002 fce9 	bl	800d2cc <SDMMC_CmdSelDesel>
 800a8fa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d001      	beq.n	800a906 <SD_InitCard+0x172>
  {
    return errorstate;
 800a902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a904:	e000      	b.n	800a908 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3744      	adds	r7, #68	; 0x44
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd90      	pop	{r4, r7, pc}

0800a910 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a918:	2300      	movs	r3, #0
 800a91a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	61fb      	str	r3, [r7, #28]
 800a920:	2300      	movs	r3, #0
 800a922:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800a924:	f7f7 fcc6 	bl	80022b4 <HAL_GetTick>
 800a928:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4618      	mov	r0, r3
 800a930:	f002 fcf0 	bl	800d314 <SDMMC_CmdGoIdleState>
 800a934:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <SD_PowerON+0x30>
  {
    return errorstate;
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	e0e9      	b.n	800ab14 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4618      	mov	r0, r3
 800a946:	f002 fd03 	bl	800d350 <SDMMC_CmdOperCond>
 800a94a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00d      	beq.n	800a96e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f002 fcd9 	bl	800d314 <SDMMC_CmdGoIdleState>
 800a962:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d004      	beq.n	800a974 <SD_PowerON+0x64>
    {
      return errorstate;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	e0d2      	b.n	800ab14 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d137      	bne.n	800a9ec <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2100      	movs	r1, #0
 800a982:	4618      	mov	r0, r3
 800a984:	f002 fd04 	bl	800d390 <SDMMC_CmdAppCommand>
 800a988:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d02d      	beq.n	800a9ec <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a990:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a994:	e0be      	b.n	800ab14 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2100      	movs	r1, #0
 800a99c:	4618      	mov	r0, r3
 800a99e:	f002 fcf7 	bl	800d390 <SDMMC_CmdAppCommand>
 800a9a2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <SD_PowerON+0x9e>
    {
      return errorstate;
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	e0b2      	b.n	800ab14 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	495a      	ldr	r1, [pc, #360]	; (800ab1c <SD_PowerON+0x20c>)
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f002 fd0e 	bl	800d3d6 <SDMMC_CmdAppOperCommand>
 800a9ba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a9c6:	e0a5      	b.n	800ab14 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f002 fb51 	bl	800d076 <SDMMC_GetResponse>
 800a9d4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	0fdb      	lsrs	r3, r3, #31
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d101      	bne.n	800a9e2 <SD_PowerON+0xd2>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e000      	b.n	800a9e4 <SD_PowerON+0xd4>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	61bb      	str	r3, [r7, #24]

    count++;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d802      	bhi.n	800a9fc <SD_PowerON+0xec>
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d0cc      	beq.n	800a996 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d902      	bls.n	800aa0c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800aa06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa0a:	e083      	b.n	800ab14 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d07d      	beq.n	800ab12 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d176      	bne.n	800ab12 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d071      	beq.n	800ab12 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa34:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f042 0208 	orr.w	r2, r2, #8
 800aa44:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f002 fdce 	bl	800d5ec <SDMMC_CmdVoltageSwitch>
 800aa50:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00c      	beq.n	800aa72 <SD_PowerON+0x162>
        {
          return errorstate;
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	e05b      	b.n	800ab14 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aa5c:	f7f7 fc2a 	bl	80022b4 <HAL_GetTick>
 800aa60:	4602      	mov	r2, r0
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa6a:	d102      	bne.n	800aa72 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800aa6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa70:	e050      	b.n	800ab14 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa80:	d1ec      	bne.n	800aa5c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800aa8a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa9a:	d002      	beq.n	800aaa2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800aa9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aaa0:	e038      	b.n	800ab14 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800aaa2:	2001      	movs	r0, #1
 800aaa4:	f7ff fb1a 	bl	800a0dc <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f042 0204 	orr.w	r2, r2, #4
 800aab6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800aab8:	e00a      	b.n	800aad0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aaba:	f7f7 fbfb 	bl	80022b4 <HAL_GetTick>
 800aabe:	4602      	mov	r2, r0
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac8:	d102      	bne.n	800aad0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800aaca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aace:	e021      	b.n	800ab14 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aada:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aade:	d1ec      	bne.n	800aaba <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800aae8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aaf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaf8:	d102      	bne.n	800ab00 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800aafa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aafe:	e009      	b.n	800ab14 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2213      	movs	r2, #19
 800ab06:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab10:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3720      	adds	r7, #32
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	c1100000 	.word	0xc1100000

0800ab20 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08c      	sub	sp, #48	; 0x30
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab2a:	f7f7 fbc3 	bl	80022b4 <HAL_GetTick>
 800ab2e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2100      	movs	r1, #0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f002 fa9b 	bl	800d076 <SDMMC_GetResponse>
 800ab40:	4603      	mov	r3, r0
 800ab42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab4a:	d102      	bne.n	800ab52 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ab4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab50:	e0b0      	b.n	800acb4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2140      	movs	r1, #64	; 0x40
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f002 facb 	bl	800d0f4 <SDMMC_CmdBlockLength>
 800ab5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d005      	beq.n	800ab72 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ab6e:	6a3b      	ldr	r3, [r7, #32]
 800ab70:	e0a0      	b.n	800acb4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab7a:	041b      	lsls	r3, r3, #16
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	4610      	mov	r0, r2
 800ab80:	f002 fc06 	bl	800d390 <SDMMC_CmdAppCommand>
 800ab84:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d005      	beq.n	800ab98 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ab94:	6a3b      	ldr	r3, [r7, #32]
 800ab96:	e08d      	b.n	800acb4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab98:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ab9e:	2340      	movs	r3, #64	; 0x40
 800aba0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800aba2:	2360      	movs	r3, #96	; 0x60
 800aba4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aba6:	2302      	movs	r3, #2
 800aba8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800abaa:	2300      	movs	r3, #0
 800abac:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800abae:	2301      	movs	r3, #1
 800abb0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f107 0208 	add.w	r2, r7, #8
 800abba:	4611      	mov	r1, r2
 800abbc:	4618      	mov	r0, r3
 800abbe:	f002 fa6d 	bl	800d09c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f002 fcee 	bl	800d5a8 <SDMMC_CmdStatusRegister>
 800abcc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d02b      	beq.n	800ac2c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	e069      	b.n	800acb4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d013      	beq.n	800ac16 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800abee:	2300      	movs	r3, #0
 800abf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abf2:	e00d      	b.n	800ac10 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f002 f9c7 	bl	800cf8c <SDMMC_ReadFIFO>
 800abfe:	4602      	mov	r2, r0
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	601a      	str	r2, [r3, #0]
        pData++;
 800ac04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac06:	3304      	adds	r3, #4
 800ac08:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800ac0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac12:	2b07      	cmp	r3, #7
 800ac14:	d9ee      	bls.n	800abf4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac16:	f7f7 fb4d 	bl	80022b4 <HAL_GetTick>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac24:	d102      	bne.n	800ac2c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ac26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac2a:	e043      	b.n	800acb4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac32:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d0d2      	beq.n	800abe0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac40:	f003 0308 	and.w	r3, r3, #8
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ac48:	2308      	movs	r3, #8
 800ac4a:	e033      	b.n	800acb4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac52:	f003 0302 	and.w	r3, r3, #2
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	e02a      	b.n	800acb4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac64:	f003 0320 	and.w	r3, r3, #32
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d017      	beq.n	800ac9c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ac6c:	2320      	movs	r3, #32
 800ac6e:	e021      	b.n	800acb4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f002 f989 	bl	800cf8c <SDMMC_ReadFIFO>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7e:	601a      	str	r2, [r3, #0]
    pData++;
 800ac80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac82:	3304      	adds	r3, #4
 800ac84:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac86:	f7f7 fb15 	bl	80022b4 <HAL_GetTick>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac94:	d102      	bne.n	800ac9c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ac96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac9a:	e00b      	b.n	800acb4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1e2      	bne.n	800ac70 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a03      	ldr	r2, [pc, #12]	; (800acbc <SD_SendSDStatus+0x19c>)
 800acb0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3730      	adds	r7, #48	; 0x30
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	18000f3a 	.word	0x18000f3a

0800acc0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800acd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800acd4:	e018      	b.n	800ad08 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acde:	041b      	lsls	r3, r3, #16
 800ace0:	4619      	mov	r1, r3
 800ace2:	4610      	mov	r0, r2
 800ace4:	f002 fc3d 	bl	800d562 <SDMMC_CmdSendStatus>
 800ace8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d001      	beq.n	800acf4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	e009      	b.n	800ad08 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2100      	movs	r1, #0
 800acfa:	4618      	mov	r0, r3
 800acfc:	f002 f9bb 	bl	800d076 <SDMMC_GetResponse>
 800ad00:	4602      	mov	r2, r0
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ad18:	2300      	movs	r3, #0
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2100      	movs	r1, #0
 800ad26:	4618      	mov	r0, r3
 800ad28:	f002 f9a5 	bl	800d076 <SDMMC_GetResponse>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad36:	d102      	bne.n	800ad3e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ad38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad3c:	e02f      	b.n	800ad9e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ad3e:	f107 030c 	add.w	r3, r7, #12
 800ad42:	4619      	mov	r1, r3
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 f879 	bl	800ae3c <SD_FindSCR>
 800ad4a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d001      	beq.n	800ad56 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	e023      	b.n	800ad9e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d01c      	beq.n	800ad9a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad68:	041b      	lsls	r3, r3, #16
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	f002 fb0f 	bl	800d390 <SDMMC_CmdAppCommand>
 800ad72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	e00f      	b.n	800ad9e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2102      	movs	r1, #2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f002 fb46 	bl	800d416 <SDMMC_CmdBusWidth>
 800ad8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	e003      	b.n	800ad9e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ad96:	2300      	movs	r3, #0
 800ad98:	e001      	b.n	800ad9e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3718      	adds	r7, #24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b086      	sub	sp, #24
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800adae:	2300      	movs	r3, #0
 800adb0:	60fb      	str	r3, [r7, #12]
 800adb2:	2300      	movs	r3, #0
 800adb4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2100      	movs	r1, #0
 800adbc:	4618      	mov	r0, r3
 800adbe:	f002 f95a 	bl	800d076 <SDMMC_GetResponse>
 800adc2:	4603      	mov	r3, r0
 800adc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adcc:	d102      	bne.n	800add4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800adce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800add2:	e02f      	b.n	800ae34 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800add4:	f107 030c 	add.w	r3, r7, #12
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f82e 	bl	800ae3c <SD_FindSCR>
 800ade0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	e023      	b.n	800ae34 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d01c      	beq.n	800ae30 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adfe:	041b      	lsls	r3, r3, #16
 800ae00:	4619      	mov	r1, r3
 800ae02:	4610      	mov	r0, r2
 800ae04:	f002 fac4 	bl	800d390 <SDMMC_CmdAppCommand>
 800ae08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	e00f      	b.n	800ae34 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2100      	movs	r1, #0
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f002 fafb 	bl	800d416 <SDMMC_CmdBusWidth>
 800ae20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	e003      	b.n	800ae34 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	e001      	b.n	800ae34 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae30:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08e      	sub	sp, #56	; 0x38
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ae46:	f7f7 fa35 	bl	80022b4 <HAL_GetTick>
 800ae4a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ae50:	2300      	movs	r3, #0
 800ae52:	60bb      	str	r3, [r7, #8]
 800ae54:	2300      	movs	r3, #0
 800ae56:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2108      	movs	r1, #8
 800ae62:	4618      	mov	r0, r3
 800ae64:	f002 f946 	bl	800d0f4 <SDMMC_CmdBlockLength>
 800ae68:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ae70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae72:	e0ad      	b.n	800afd0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae7c:	041b      	lsls	r3, r3, #16
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4610      	mov	r0, r2
 800ae82:	f002 fa85 	bl	800d390 <SDMMC_CmdAppCommand>
 800ae86:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	e09e      	b.n	800afd0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ae92:	f04f 33ff 	mov.w	r3, #4294967295
 800ae96:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ae98:	2308      	movs	r3, #8
 800ae9a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ae9c:	2330      	movs	r3, #48	; 0x30
 800ae9e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aea0:	2302      	movs	r3, #2
 800aea2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f107 0210 	add.w	r2, r7, #16
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f002 f8f0 	bl	800d09c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f002 facb 	bl	800d45c <SDMMC_CmdSendSCR>
 800aec6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d027      	beq.n	800af1e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	e07e      	b.n	800afd0 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d113      	bne.n	800af08 <SD_FindSCR+0xcc>
 800aee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d110      	bne.n	800af08 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f002 f84e 	bl	800cf8c <SDMMC_ReadFIFO>
 800aef0:	4603      	mov	r3, r0
 800aef2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f002 f847 	bl	800cf8c <SDMMC_ReadFIFO>
 800aefe:	4603      	mov	r3, r0
 800af00:	60fb      	str	r3, [r7, #12]
      index++;
 800af02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af04:	3301      	adds	r3, #1
 800af06:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800af08:	f7f7 f9d4 	bl	80022b4 <HAL_GetTick>
 800af0c:	4602      	mov	r2, r0
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af16:	d102      	bne.n	800af1e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800af18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af1c:	e058      	b.n	800afd0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af24:	f240 532a 	movw	r3, #1322	; 0x52a
 800af28:	4013      	ands	r3, r2
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d0d1      	beq.n	800aed2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af34:	f003 0308 	and.w	r3, r3, #8
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d005      	beq.n	800af48 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2208      	movs	r2, #8
 800af42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800af44:	2308      	movs	r3, #8
 800af46:	e043      	b.n	800afd0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4e:	f003 0302 	and.w	r3, r3, #2
 800af52:	2b00      	cmp	r3, #0
 800af54:	d005      	beq.n	800af62 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2202      	movs	r2, #2
 800af5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800af5e:	2302      	movs	r3, #2
 800af60:	e036      	b.n	800afd0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af68:	f003 0320 	and.w	r3, r3, #32
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d005      	beq.n	800af7c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2220      	movs	r2, #32
 800af76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800af78:	2320      	movs	r3, #32
 800af7a:	e029      	b.n	800afd0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a15      	ldr	r2, [pc, #84]	; (800afd8 <SD_FindSCR+0x19c>)
 800af82:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	061a      	lsls	r2, r3, #24
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	021b      	lsls	r3, r3, #8
 800af8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af90:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	0a1b      	lsrs	r3, r3, #8
 800af96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800af9a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	0e1b      	lsrs	r3, r3, #24
 800afa0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800afa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa4:	601a      	str	r2, [r3, #0]
    scr++;
 800afa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa8:	3304      	adds	r3, #4
 800afaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	061a      	lsls	r2, r3, #24
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	021b      	lsls	r3, r3, #8
 800afb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800afb8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	0a1b      	lsrs	r3, r3, #8
 800afbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800afc2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	0e1b      	lsrs	r3, r3, #24
 800afc8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800afca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afcc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3738      	adds	r7, #56	; 0x38
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	18000f3a 	.word	0x18000f3a

0800afdc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afee:	2b1f      	cmp	r3, #31
 800aff0:	d936      	bls.n	800b060 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800aff2:	2300      	movs	r3, #0
 800aff4:	617b      	str	r3, [r7, #20]
 800aff6:	e027      	b.n	800b048 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4618      	mov	r0, r3
 800affe:	f001 ffc5 	bl	800cf8c <SDMMC_ReadFIFO>
 800b002:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	b2da      	uxtb	r2, r3
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	3301      	adds	r3, #1
 800b010:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	0a1b      	lsrs	r3, r3, #8
 800b016:	b2da      	uxtb	r2, r3
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	3301      	adds	r3, #1
 800b020:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	0c1b      	lsrs	r3, r3, #16
 800b026:	b2da      	uxtb	r2, r3
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	3301      	adds	r3, #1
 800b030:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	0e1b      	lsrs	r3, r3, #24
 800b036:	b2da      	uxtb	r2, r3
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	3301      	adds	r3, #1
 800b040:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	3301      	adds	r3, #1
 800b046:	617b      	str	r3, [r7, #20]
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	2b07      	cmp	r3, #7
 800b04c:	d9d4      	bls.n	800aff8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b058:	f1a3 0220 	sub.w	r2, r3, #32
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b060:	bf00      	nop
 800b062:	3718      	adds	r7, #24
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a1b      	ldr	r3, [r3, #32]
 800b074:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07a:	2b1f      	cmp	r3, #31
 800b07c:	d93a      	bls.n	800b0f4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b07e:	2300      	movs	r3, #0
 800b080:	617b      	str	r3, [r7, #20]
 800b082:	e02b      	b.n	800b0dc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	3301      	adds	r3, #1
 800b08e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	021a      	lsls	r2, r3, #8
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	4313      	orrs	r3, r2
 800b09a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	041a      	lsls	r2, r3, #16
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	061a      	lsls	r2, r3, #24
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f107 020c 	add.w	r2, r7, #12
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f001 ff68 	bl	800cfa6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	617b      	str	r3, [r7, #20]
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	2b07      	cmp	r3, #7
 800b0e0:	d9d0      	bls.n	800b084 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	f1a3 0220 	sub.w	r2, r3, #32
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b0f4:	bf00      	nop
 800b0f6:	3718      	adds	r7, #24
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800b154:	2300      	movs	r3, #0
 800b156:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d101      	bne.n	800b162 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	e0e2      	b.n	800b328 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a70      	ldr	r2, [pc, #448]	; (800b330 <HAL_SPI_Init+0x1e4>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d00f      	beq.n	800b192 <HAL_SPI_Init+0x46>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a6f      	ldr	r2, [pc, #444]	; (800b334 <HAL_SPI_Init+0x1e8>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d00a      	beq.n	800b192 <HAL_SPI_Init+0x46>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a6d      	ldr	r2, [pc, #436]	; (800b338 <HAL_SPI_Init+0x1ec>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d005      	beq.n	800b192 <HAL_SPI_Init+0x46>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	2b0f      	cmp	r3, #15
 800b18c:	d901      	bls.n	800b192 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	e0ca      	b.n	800b328 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fb96 	bl	800b8c4 <SPI_GetPacketSize>
 800b198:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a64      	ldr	r2, [pc, #400]	; (800b330 <HAL_SPI_Init+0x1e4>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d00c      	beq.n	800b1be <HAL_SPI_Init+0x72>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a62      	ldr	r2, [pc, #392]	; (800b334 <HAL_SPI_Init+0x1e8>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d007      	beq.n	800b1be <HAL_SPI_Init+0x72>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a61      	ldr	r2, [pc, #388]	; (800b338 <HAL_SPI_Init+0x1ec>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d002      	beq.n	800b1be <HAL_SPI_Init+0x72>
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b08      	cmp	r3, #8
 800b1bc:	d811      	bhi.n	800b1e2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b1c2:	4a5b      	ldr	r2, [pc, #364]	; (800b330 <HAL_SPI_Init+0x1e4>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d009      	beq.n	800b1dc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a59      	ldr	r2, [pc, #356]	; (800b334 <HAL_SPI_Init+0x1e8>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d004      	beq.n	800b1dc <HAL_SPI_Init+0x90>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a58      	ldr	r2, [pc, #352]	; (800b338 <HAL_SPI_Init+0x1ec>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d104      	bne.n	800b1e6 <HAL_SPI_Init+0x9a>
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	2b10      	cmp	r3, #16
 800b1e0:	d901      	bls.n	800b1e6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e0a0      	b.n	800b328 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7f6 f992 	bl	8001524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2202      	movs	r2, #2
 800b204:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f022 0201 	bic.w	r2, r2, #1
 800b216:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b220:	d110      	bne.n	800b244 <HAL_SPI_Init+0xf8>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b22a:	d10b      	bne.n	800b244 <HAL_SPI_Init+0xf8>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b230:	2b00      	cmp	r3, #0
 800b232:	d107      	bne.n	800b244 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b242:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	69da      	ldr	r2, [r3, #28]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b24c:	431a      	orrs	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	431a      	orrs	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b256:	ea42 0103 	orr.w	r1, r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	68da      	ldr	r2, [r3, #12]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	430a      	orrs	r2, r1
 800b264:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26e:	431a      	orrs	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b274:	431a      	orrs	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	431a      	orrs	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	431a      	orrs	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	431a      	orrs	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a1b      	ldr	r3, [r3, #32]
 800b28c:	431a      	orrs	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	431a      	orrs	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b298:	431a      	orrs	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	431a      	orrs	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2a4:	ea42 0103 	orr.w	r1, r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	430a      	orrs	r2, r1
 800b2b2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d113      	bne.n	800b2e4 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2ce:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b2e2:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f022 0201 	bic.w	r2, r2, #1
 800b2f2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00a      	beq.n	800b316 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	430a      	orrs	r2, r1
 800b314:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	40013000 	.word	0x40013000
 800b334:	40003800 	.word	0x40003800
 800b338:	40003c00 	.word	0x40003c00

0800b33c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08a      	sub	sp, #40	; 0x28
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	695b      	ldr	r3, [r3, #20]
 800b352:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b354:	6a3a      	ldr	r2, [r7, #32]
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	4013      	ands	r3, r2
 800b35a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b364:	2300      	movs	r3, #0
 800b366:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b36e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3330      	adds	r3, #48	; 0x30
 800b376:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d113      	bne.n	800b3aa <HAL_SPI_IRQHandler+0x6e>
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	f003 0320 	and.w	r3, r3, #32
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10e      	bne.n	800b3aa <HAL_SPI_IRQHandler+0x6e>
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	f003 0304 	and.w	r3, r3, #4
 800b392:	2b00      	cmp	r3, #0
 800b394:	d009      	beq.n	800b3aa <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	4798      	blx	r3
    handled = 1UL;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10f      	bne.n	800b3d4 <HAL_SPI_IRQHandler+0x98>
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	f003 0301 	and.w	r3, r3, #1
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00a      	beq.n	800b3d4 <HAL_SPI_IRQHandler+0x98>
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	f003 0304 	and.w	r3, r3, #4
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d105      	bne.n	800b3d4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	4798      	blx	r3
    handled = 1UL;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	f003 0320 	and.w	r3, r3, #32
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10f      	bne.n	800b3fe <HAL_SPI_IRQHandler+0xc2>
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	f003 0302 	and.w	r3, r3, #2
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00a      	beq.n	800b3fe <HAL_SPI_IRQHandler+0xc2>
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	f003 0304 	and.w	r3, r3, #4
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d105      	bne.n	800b3fe <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	4798      	blx	r3
    handled = 1UL;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b400:	2b00      	cmp	r3, #0
 800b402:	f040 8170 	bne.w	800b6e6 <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	f003 0308 	and.w	r3, r3, #8
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f000 80a0 	beq.w	800b552 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	699a      	ldr	r2, [r3, #24]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f042 0208 	orr.w	r2, r2, #8
 800b420:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	699a      	ldr	r2, [r3, #24]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f042 0210 	orr.w	r2, r2, #16
 800b430:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	699a      	ldr	r2, [r3, #24]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b440:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	691a      	ldr	r2, [r3, #16]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f022 0208 	bic.w	r2, r2, #8
 800b450:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00f      	beq.n	800b47c <HAL_SPI_IRQHandler+0x140>
 800b45c:	7cfb      	ldrb	r3, [r7, #19]
 800b45e:	2b04      	cmp	r3, #4
 800b460:	d004      	beq.n	800b46c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b466:	69db      	ldr	r3, [r3, #28]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d007      	beq.n	800b47c <HAL_SPI_IRQHandler+0x140>
 800b46c:	7cfb      	ldrb	r3, [r7, #19]
 800b46e:	2b03      	cmp	r3, #3
 800b470:	d059      	beq.n	800b526 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b476:	69db      	ldr	r3, [r3, #28]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d154      	bne.n	800b526 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d13d      	bne.n	800b506 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800b48a:	e036      	b.n	800b4fa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	2b0f      	cmp	r3, #15
 800b492:	d90b      	bls.n	800b4ac <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b49c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b49e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4a4:	1d1a      	adds	r2, r3, #4
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	665a      	str	r2, [r3, #100]	; 0x64
 800b4aa:	e01d      	b.n	800b4e8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	2b07      	cmp	r3, #7
 800b4b2:	d90b      	bls.n	800b4cc <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	8812      	ldrh	r2, [r2, #0]
 800b4bc:	b292      	uxth	r2, r2
 800b4be:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4c4:	1c9a      	adds	r2, r3, #2
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	665a      	str	r2, [r3, #100]	; 0x64
 800b4ca:	e00d      	b.n	800b4e8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4d8:	7812      	ldrb	r2, [r2, #0]
 800b4da:	b2d2      	uxtb	r2, r2
 800b4dc:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4e2:	1c5a      	adds	r2, r3, #1
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b500:	b29b      	uxth	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1c2      	bne.n	800b48c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f93c 	bl	800b784 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f90c 	bl	800b73c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800b524:	e0e4      	b.n	800b6f0 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b526:	7cfb      	ldrb	r3, [r7, #19]
 800b528:	2b05      	cmp	r3, #5
 800b52a:	d103      	bne.n	800b534 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f8fb 	bl	800b728 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800b532:	e0da      	b.n	800b6ea <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b534:	7cfb      	ldrb	r3, [r7, #19]
 800b536:	2b04      	cmp	r3, #4
 800b538:	d103      	bne.n	800b542 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f8ea 	bl	800b714 <HAL_SPI_RxCpltCallback>
    return;
 800b540:	e0d3      	b.n	800b6ea <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b542:	7cfb      	ldrb	r3, [r7, #19]
 800b544:	2b03      	cmp	r3, #3
 800b546:	f040 80d0 	bne.w	800b6ea <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f8d8 	bl	800b700 <HAL_SPI_TxCpltCallback>
    return;
 800b550:	e0cb      	b.n	800b6ea <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00d      	beq.n	800b578 <HAL_SPI_IRQHandler+0x23c>
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	f003 0308 	and.w	r3, r3, #8
 800b562:	2b00      	cmp	r3, #0
 800b564:	d008      	beq.n	800b578 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	699a      	ldr	r2, [r3, #24]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b574:	619a      	str	r2, [r3, #24]

    return;
 800b576:	e0bb      	b.n	800b6f0 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 80b6 	beq.w	800b6f0 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00f      	beq.n	800b5ae <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b594:	f043 0204 	orr.w	r2, r3, #4
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	699a      	ldr	r2, [r3, #24]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5ac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00f      	beq.n	800b5d8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5be:	f043 0201 	orr.w	r2, r3, #1
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	699a      	ldr	r2, [r3, #24]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5d6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00f      	beq.n	800b602 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5e8:	f043 0208 	orr.w	r2, r3, #8
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	699a      	ldr	r2, [r3, #24]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b600:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	f003 0320 	and.w	r3, r3, #32
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00f      	beq.n	800b62c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b612:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	699a      	ldr	r2, [r3, #24]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f042 0220 	orr.w	r2, r2, #32
 800b62a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b632:	2b00      	cmp	r3, #0
 800b634:	d05b      	beq.n	800b6ee <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f022 0201 	bic.w	r2, r2, #1
 800b644:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	6919      	ldr	r1, [r3, #16]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	4b29      	ldr	r3, [pc, #164]	; (800b6f8 <HAL_SPI_IRQHandler+0x3bc>)
 800b652:	400b      	ands	r3, r1
 800b654:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b65c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b660:	d138      	bne.n	800b6d4 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	689a      	ldr	r2, [r3, #8]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b670:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b676:	2b00      	cmp	r3, #0
 800b678:	d013      	beq.n	800b6a2 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b67e:	4a1f      	ldr	r2, [pc, #124]	; (800b6fc <HAL_SPI_IRQHandler+0x3c0>)
 800b680:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b686:	4618      	mov	r0, r3
 800b688:	f7f8 fac2 	bl	8003c10 <HAL_DMA_Abort_IT>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d007      	beq.n	800b6a2 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b698:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d021      	beq.n	800b6ee <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6ae:	4a13      	ldr	r2, [pc, #76]	; (800b6fc <HAL_SPI_IRQHandler+0x3c0>)
 800b6b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7f8 faaa 	bl	8003c10 <HAL_DMA_Abort_IT>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d015      	beq.n	800b6ee <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b6d2:	e00c      	b.n	800b6ee <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 f82d 	bl	800b73c <HAL_SPI_ErrorCallback>
    return;
 800b6e2:	bf00      	nop
 800b6e4:	e003      	b.n	800b6ee <HAL_SPI_IRQHandler+0x3b2>
    return;
 800b6e6:	bf00      	nop
 800b6e8:	e002      	b.n	800b6f0 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800b6ea:	bf00      	nop
 800b6ec:	e000      	b.n	800b6f0 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800b6ee:	bf00      	nop
  }
}
 800b6f0:	3728      	adds	r7, #40	; 0x28
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	fffffc94 	.word	0xfffffc94
 800b6fc:	0800b751 	.word	0x0800b751

0800b700 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f7ff ffe0 	bl	800b73c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b77c:	bf00      	nop
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	695b      	ldr	r3, [r3, #20]
 800b792:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	699a      	ldr	r2, [r3, #24]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f042 0208 	orr.w	r2, r2, #8
 800b7a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	699a      	ldr	r2, [r3, #24]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f042 0210 	orr.w	r2, r2, #16
 800b7b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f022 0201 	bic.w	r2, r2, #1
 800b7c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	6919      	ldr	r1, [r3, #16]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	4b3c      	ldr	r3, [pc, #240]	; (800b8c0 <SPI_CloseTransfer+0x13c>)
 800b7d0:	400b      	ands	r3, r1
 800b7d2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	689a      	ldr	r2, [r3, #8]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b7e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b04      	cmp	r3, #4
 800b7ee:	d014      	beq.n	800b81a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f003 0320 	and.w	r3, r3, #32
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00f      	beq.n	800b81a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b800:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	699a      	ldr	r2, [r3, #24]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f042 0220 	orr.w	r2, r2, #32
 800b818:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b820:	b2db      	uxtb	r3, r3
 800b822:	2b03      	cmp	r3, #3
 800b824:	d014      	beq.n	800b850 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00f      	beq.n	800b850 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b836:	f043 0204 	orr.w	r2, r3, #4
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	699a      	ldr	r2, [r3, #24]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b84e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00f      	beq.n	800b87a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b860:	f043 0201 	orr.w	r2, r3, #1
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	699a      	ldr	r2, [r3, #24]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b878:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00f      	beq.n	800b8a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b88a:	f043 0208 	orr.w	r2, r3, #8
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	699a      	ldr	r2, [r3, #24]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b8b4:	bf00      	nop
 800b8b6:	3714      	adds	r7, #20
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	fffffc90 	.word	0xfffffc90

0800b8c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d0:	095b      	lsrs	r3, r3, #5
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	3307      	adds	r3, #7
 800b8e2:	08db      	lsrs	r3, r3, #3
 800b8e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	fb02 f303 	mul.w	r3, r2, r3
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b082      	sub	sp, #8
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d101      	bne.n	800b90c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	e049      	b.n	800b9a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b912:	b2db      	uxtb	r3, r3
 800b914:	2b00      	cmp	r3, #0
 800b916:	d106      	bne.n	800b926 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f841 	bl	800b9a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2202      	movs	r2, #2
 800b92a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	3304      	adds	r3, #4
 800b936:	4619      	mov	r1, r3
 800b938:	4610      	mov	r0, r2
 800b93a:	f000 f9bd 	bl	800bcb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2201      	movs	r2, #1
 800b96a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2201      	movs	r2, #1
 800b97a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2201      	movs	r2, #1
 800b992:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b9b0:	bf00      	nop
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d001      	beq.n	800b9d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e021      	b.n	800ba18 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68da      	ldr	r2, [r3, #12]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f042 0201 	orr.w	r2, r2, #1
 800b9ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	689a      	ldr	r2, [r3, #8]
 800b9f2:	4b0c      	ldr	r3, [pc, #48]	; (800ba24 <HAL_TIM_Base_Start_IT+0x68>)
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b06      	cmp	r3, #6
 800b9fc:	d00b      	beq.n	800ba16 <HAL_TIM_Base_Start_IT+0x5a>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba04:	d007      	beq.n	800ba16 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f042 0201 	orr.w	r2, r2, #1
 800ba14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3714      	adds	r7, #20
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	00010007 	.word	0x00010007

0800ba28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	f003 0302 	and.w	r3, r3, #2
 800ba3a:	2b02      	cmp	r3, #2
 800ba3c:	d122      	bne.n	800ba84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	f003 0302 	and.w	r3, r3, #2
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d11b      	bne.n	800ba84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f06f 0202 	mvn.w	r2, #2
 800ba54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	f003 0303 	and.w	r3, r3, #3
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f905 	bl	800bc7a <HAL_TIM_IC_CaptureCallback>
 800ba70:	e005      	b.n	800ba7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f8f7 	bl	800bc66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 f908 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	f003 0304 	and.w	r3, r3, #4
 800ba8e:	2b04      	cmp	r3, #4
 800ba90:	d122      	bne.n	800bad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	f003 0304 	and.w	r3, r3, #4
 800ba9c:	2b04      	cmp	r3, #4
 800ba9e:	d11b      	bne.n	800bad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f06f 0204 	mvn.w	r2, #4
 800baa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2202      	movs	r2, #2
 800baae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	699b      	ldr	r3, [r3, #24]
 800bab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f8db 	bl	800bc7a <HAL_TIM_IC_CaptureCallback>
 800bac4:	e005      	b.n	800bad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 f8cd 	bl	800bc66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f8de 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	f003 0308 	and.w	r3, r3, #8
 800bae2:	2b08      	cmp	r3, #8
 800bae4:	d122      	bne.n	800bb2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	f003 0308 	and.w	r3, r3, #8
 800baf0:	2b08      	cmp	r3, #8
 800baf2:	d11b      	bne.n	800bb2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f06f 0208 	mvn.w	r2, #8
 800bafc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2204      	movs	r2, #4
 800bb02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	69db      	ldr	r3, [r3, #28]
 800bb0a:	f003 0303 	and.w	r3, r3, #3
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d003      	beq.n	800bb1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f8b1 	bl	800bc7a <HAL_TIM_IC_CaptureCallback>
 800bb18:	e005      	b.n	800bb26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f8a3 	bl	800bc66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f8b4 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	f003 0310 	and.w	r3, r3, #16
 800bb36:	2b10      	cmp	r3, #16
 800bb38:	d122      	bne.n	800bb80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	f003 0310 	and.w	r3, r3, #16
 800bb44:	2b10      	cmp	r3, #16
 800bb46:	d11b      	bne.n	800bb80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f06f 0210 	mvn.w	r2, #16
 800bb50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2208      	movs	r2, #8
 800bb56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	69db      	ldr	r3, [r3, #28]
 800bb5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f887 	bl	800bc7a <HAL_TIM_IC_CaptureCallback>
 800bb6c:	e005      	b.n	800bb7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 f879 	bl	800bc66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 f88a 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	f003 0301 	and.w	r3, r3, #1
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d10e      	bne.n	800bbac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	f003 0301 	and.w	r3, r3, #1
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d107      	bne.n	800bbac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f06f 0201 	mvn.w	r2, #1
 800bba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7f5 fb7e 	bl	80012a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	691b      	ldr	r3, [r3, #16]
 800bbb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbb6:	2b80      	cmp	r3, #128	; 0x80
 800bbb8:	d10e      	bne.n	800bbd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc4:	2b80      	cmp	r3, #128	; 0x80
 800bbc6:	d107      	bne.n	800bbd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bbd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f914 	bl	800be00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbe6:	d10e      	bne.n	800bc06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbf2:	2b80      	cmp	r3, #128	; 0x80
 800bbf4:	d107      	bne.n	800bc06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bbfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f907 	bl	800be14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc10:	2b40      	cmp	r3, #64	; 0x40
 800bc12:	d10e      	bne.n	800bc32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1e:	2b40      	cmp	r3, #64	; 0x40
 800bc20:	d107      	bne.n	800bc32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 f838 	bl	800bca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	f003 0320 	and.w	r3, r3, #32
 800bc3c:	2b20      	cmp	r3, #32
 800bc3e:	d10e      	bne.n	800bc5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	f003 0320 	and.w	r3, r3, #32
 800bc4a:	2b20      	cmp	r3, #32
 800bc4c:	d107      	bne.n	800bc5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f06f 0220 	mvn.w	r2, #32
 800bc56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f8c7 	bl	800bdec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc5e:	bf00      	nop
 800bc60:	3708      	adds	r7, #8
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc6e:	bf00      	nop
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b083      	sub	sp, #12
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc82:	bf00      	nop
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b083      	sub	sp, #12
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bca2:	b480      	push	{r7}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bcaa:	bf00      	nop
 800bcac:	370c      	adds	r7, #12
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
	...

0800bcb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a40      	ldr	r2, [pc, #256]	; (800bdcc <TIM_Base_SetConfig+0x114>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d013      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcd6:	d00f      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a3d      	ldr	r2, [pc, #244]	; (800bdd0 <TIM_Base_SetConfig+0x118>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d00b      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a3c      	ldr	r2, [pc, #240]	; (800bdd4 <TIM_Base_SetConfig+0x11c>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d007      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a3b      	ldr	r2, [pc, #236]	; (800bdd8 <TIM_Base_SetConfig+0x120>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d003      	beq.n	800bcf8 <TIM_Base_SetConfig+0x40>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a3a      	ldr	r2, [pc, #232]	; (800bddc <TIM_Base_SetConfig+0x124>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d108      	bne.n	800bd0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a2f      	ldr	r2, [pc, #188]	; (800bdcc <TIM_Base_SetConfig+0x114>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d01f      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd18:	d01b      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a2c      	ldr	r2, [pc, #176]	; (800bdd0 <TIM_Base_SetConfig+0x118>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d017      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a2b      	ldr	r2, [pc, #172]	; (800bdd4 <TIM_Base_SetConfig+0x11c>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d013      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a2a      	ldr	r2, [pc, #168]	; (800bdd8 <TIM_Base_SetConfig+0x120>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d00f      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a29      	ldr	r2, [pc, #164]	; (800bddc <TIM_Base_SetConfig+0x124>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d00b      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a28      	ldr	r2, [pc, #160]	; (800bde0 <TIM_Base_SetConfig+0x128>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d007      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a27      	ldr	r2, [pc, #156]	; (800bde4 <TIM_Base_SetConfig+0x12c>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d003      	beq.n	800bd52 <TIM_Base_SetConfig+0x9a>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a26      	ldr	r2, [pc, #152]	; (800bde8 <TIM_Base_SetConfig+0x130>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d108      	bne.n	800bd64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	689a      	ldr	r2, [r3, #8]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a10      	ldr	r2, [pc, #64]	; (800bdcc <TIM_Base_SetConfig+0x114>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d00f      	beq.n	800bdb0 <TIM_Base_SetConfig+0xf8>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a12      	ldr	r2, [pc, #72]	; (800bddc <TIM_Base_SetConfig+0x124>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d00b      	beq.n	800bdb0 <TIM_Base_SetConfig+0xf8>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a11      	ldr	r2, [pc, #68]	; (800bde0 <TIM_Base_SetConfig+0x128>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d007      	beq.n	800bdb0 <TIM_Base_SetConfig+0xf8>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a10      	ldr	r2, [pc, #64]	; (800bde4 <TIM_Base_SetConfig+0x12c>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d003      	beq.n	800bdb0 <TIM_Base_SetConfig+0xf8>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4a0f      	ldr	r2, [pc, #60]	; (800bde8 <TIM_Base_SetConfig+0x130>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d103      	bne.n	800bdb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	691a      	ldr	r2, [r3, #16]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	615a      	str	r2, [r3, #20]
}
 800bdbe:	bf00      	nop
 800bdc0:	3714      	adds	r7, #20
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	40010000 	.word	0x40010000
 800bdd0:	40000400 	.word	0x40000400
 800bdd4:	40000800 	.word	0x40000800
 800bdd8:	40000c00 	.word	0x40000c00
 800bddc:	40010400 	.word	0x40010400
 800bde0:	40014000 	.word	0x40014000
 800bde4:	40014400 	.word	0x40014400
 800bde8:	40014800 	.word	0x40014800

0800bdec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be1c:	bf00      	nop
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e042      	b.n	800bec0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be40:	2b00      	cmp	r3, #0
 800be42:	d106      	bne.n	800be52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7f5 fda9 	bl	80019a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2224      	movs	r2, #36	; 0x24
 800be56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f022 0201 	bic.w	r2, r2, #1
 800be68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 f82c 	bl	800bec8 <UART_SetConfig>
 800be70:	4603      	mov	r3, r0
 800be72:	2b01      	cmp	r3, #1
 800be74:	d101      	bne.n	800be7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	e022      	b.n	800bec0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d002      	beq.n	800be88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fdd0 	bl	800ca28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	685a      	ldr	r2, [r3, #4]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	689a      	ldr	r2, [r3, #8]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bea6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f042 0201 	orr.w	r2, r2, #1
 800beb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fe57 	bl	800cb6c <UART_CheckIdleState>
 800bebe:	4603      	mov	r3, r0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bec8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800becc:	b08e      	sub	sp, #56	; 0x38
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689a      	ldr	r2, [r3, #8]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	431a      	orrs	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	695b      	ldr	r3, [r3, #20]
 800bee6:	431a      	orrs	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	69db      	ldr	r3, [r3, #28]
 800beec:	4313      	orrs	r3, r2
 800beee:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bef6:	4313      	orrs	r3, r2
 800bef8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	4bc1      	ldr	r3, [pc, #772]	; (800c208 <UART_SetConfig+0x340>)
 800bf02:	4013      	ands	r3, r2
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	6812      	ldr	r2, [r2, #0]
 800bf08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf0a:	430b      	orrs	r3, r1
 800bf0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	68da      	ldr	r2, [r3, #12]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	430a      	orrs	r2, r1
 800bf22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	699b      	ldr	r3, [r3, #24]
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4ab7      	ldr	r2, [pc, #732]	; (800c20c <UART_SetConfig+0x344>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d004      	beq.n	800bf3e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6a1b      	ldr	r3, [r3, #32]
 800bf38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	689a      	ldr	r2, [r3, #8]
 800bf44:	4bb2      	ldr	r3, [pc, #712]	; (800c210 <UART_SetConfig+0x348>)
 800bf46:	4013      	ands	r3, r2
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	6812      	ldr	r2, [r2, #0]
 800bf4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf4e:	430b      	orrs	r3, r1
 800bf50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf58:	f023 010f 	bic.w	r1, r3, #15
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	430a      	orrs	r2, r1
 800bf66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4aa9      	ldr	r2, [pc, #676]	; (800c214 <UART_SetConfig+0x34c>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d177      	bne.n	800c062 <UART_SetConfig+0x19a>
 800bf72:	4ba9      	ldr	r3, [pc, #676]	; (800c218 <UART_SetConfig+0x350>)
 800bf74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf7a:	2b28      	cmp	r3, #40	; 0x28
 800bf7c:	d86c      	bhi.n	800c058 <UART_SetConfig+0x190>
 800bf7e:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <UART_SetConfig+0xbc>)
 800bf80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf84:	0800c029 	.word	0x0800c029
 800bf88:	0800c059 	.word	0x0800c059
 800bf8c:	0800c059 	.word	0x0800c059
 800bf90:	0800c059 	.word	0x0800c059
 800bf94:	0800c059 	.word	0x0800c059
 800bf98:	0800c059 	.word	0x0800c059
 800bf9c:	0800c059 	.word	0x0800c059
 800bfa0:	0800c059 	.word	0x0800c059
 800bfa4:	0800c031 	.word	0x0800c031
 800bfa8:	0800c059 	.word	0x0800c059
 800bfac:	0800c059 	.word	0x0800c059
 800bfb0:	0800c059 	.word	0x0800c059
 800bfb4:	0800c059 	.word	0x0800c059
 800bfb8:	0800c059 	.word	0x0800c059
 800bfbc:	0800c059 	.word	0x0800c059
 800bfc0:	0800c059 	.word	0x0800c059
 800bfc4:	0800c039 	.word	0x0800c039
 800bfc8:	0800c059 	.word	0x0800c059
 800bfcc:	0800c059 	.word	0x0800c059
 800bfd0:	0800c059 	.word	0x0800c059
 800bfd4:	0800c059 	.word	0x0800c059
 800bfd8:	0800c059 	.word	0x0800c059
 800bfdc:	0800c059 	.word	0x0800c059
 800bfe0:	0800c059 	.word	0x0800c059
 800bfe4:	0800c041 	.word	0x0800c041
 800bfe8:	0800c059 	.word	0x0800c059
 800bfec:	0800c059 	.word	0x0800c059
 800bff0:	0800c059 	.word	0x0800c059
 800bff4:	0800c059 	.word	0x0800c059
 800bff8:	0800c059 	.word	0x0800c059
 800bffc:	0800c059 	.word	0x0800c059
 800c000:	0800c059 	.word	0x0800c059
 800c004:	0800c049 	.word	0x0800c049
 800c008:	0800c059 	.word	0x0800c059
 800c00c:	0800c059 	.word	0x0800c059
 800c010:	0800c059 	.word	0x0800c059
 800c014:	0800c059 	.word	0x0800c059
 800c018:	0800c059 	.word	0x0800c059
 800c01c:	0800c059 	.word	0x0800c059
 800c020:	0800c059 	.word	0x0800c059
 800c024:	0800c051 	.word	0x0800c051
 800c028:	2301      	movs	r3, #1
 800c02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c02e:	e233      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c030:	2304      	movs	r3, #4
 800c032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c036:	e22f      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c038:	2308      	movs	r3, #8
 800c03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c03e:	e22b      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c040:	2310      	movs	r3, #16
 800c042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c046:	e227      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c048:	2320      	movs	r3, #32
 800c04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c04e:	e223      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c050:	2340      	movs	r3, #64	; 0x40
 800c052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c056:	e21f      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c058:	2380      	movs	r3, #128	; 0x80
 800c05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c05e:	bf00      	nop
 800c060:	e21a      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a6d      	ldr	r2, [pc, #436]	; (800c21c <UART_SetConfig+0x354>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d132      	bne.n	800c0d2 <UART_SetConfig+0x20a>
 800c06c:	4b6a      	ldr	r3, [pc, #424]	; (800c218 <UART_SetConfig+0x350>)
 800c06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c070:	f003 0307 	and.w	r3, r3, #7
 800c074:	2b05      	cmp	r3, #5
 800c076:	d827      	bhi.n	800c0c8 <UART_SetConfig+0x200>
 800c078:	a201      	add	r2, pc, #4	; (adr r2, 800c080 <UART_SetConfig+0x1b8>)
 800c07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07e:	bf00      	nop
 800c080:	0800c099 	.word	0x0800c099
 800c084:	0800c0a1 	.word	0x0800c0a1
 800c088:	0800c0a9 	.word	0x0800c0a9
 800c08c:	0800c0b1 	.word	0x0800c0b1
 800c090:	0800c0b9 	.word	0x0800c0b9
 800c094:	0800c0c1 	.word	0x0800c0c1
 800c098:	2300      	movs	r3, #0
 800c09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c09e:	e1fb      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c0a0:	2304      	movs	r3, #4
 800c0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0a6:	e1f7      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c0a8:	2308      	movs	r3, #8
 800c0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ae:	e1f3      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c0b0:	2310      	movs	r3, #16
 800c0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0b6:	e1ef      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c0b8:	2320      	movs	r3, #32
 800c0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0be:	e1eb      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c0c0:	2340      	movs	r3, #64	; 0x40
 800c0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0c6:	e1e7      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c0c8:	2380      	movs	r3, #128	; 0x80
 800c0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ce:	bf00      	nop
 800c0d0:	e1e2      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a52      	ldr	r2, [pc, #328]	; (800c220 <UART_SetConfig+0x358>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d132      	bne.n	800c142 <UART_SetConfig+0x27a>
 800c0dc:	4b4e      	ldr	r3, [pc, #312]	; (800c218 <UART_SetConfig+0x350>)
 800c0de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0e0:	f003 0307 	and.w	r3, r3, #7
 800c0e4:	2b05      	cmp	r3, #5
 800c0e6:	d827      	bhi.n	800c138 <UART_SetConfig+0x270>
 800c0e8:	a201      	add	r2, pc, #4	; (adr r2, 800c0f0 <UART_SetConfig+0x228>)
 800c0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ee:	bf00      	nop
 800c0f0:	0800c109 	.word	0x0800c109
 800c0f4:	0800c111 	.word	0x0800c111
 800c0f8:	0800c119 	.word	0x0800c119
 800c0fc:	0800c121 	.word	0x0800c121
 800c100:	0800c129 	.word	0x0800c129
 800c104:	0800c131 	.word	0x0800c131
 800c108:	2300      	movs	r3, #0
 800c10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c10e:	e1c3      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c110:	2304      	movs	r3, #4
 800c112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c116:	e1bf      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c118:	2308      	movs	r3, #8
 800c11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c11e:	e1bb      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c120:	2310      	movs	r3, #16
 800c122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c126:	e1b7      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c128:	2320      	movs	r3, #32
 800c12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c12e:	e1b3      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c130:	2340      	movs	r3, #64	; 0x40
 800c132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c136:	e1af      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c138:	2380      	movs	r3, #128	; 0x80
 800c13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c13e:	bf00      	nop
 800c140:	e1aa      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a37      	ldr	r2, [pc, #220]	; (800c224 <UART_SetConfig+0x35c>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d132      	bne.n	800c1b2 <UART_SetConfig+0x2ea>
 800c14c:	4b32      	ldr	r3, [pc, #200]	; (800c218 <UART_SetConfig+0x350>)
 800c14e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c150:	f003 0307 	and.w	r3, r3, #7
 800c154:	2b05      	cmp	r3, #5
 800c156:	d827      	bhi.n	800c1a8 <UART_SetConfig+0x2e0>
 800c158:	a201      	add	r2, pc, #4	; (adr r2, 800c160 <UART_SetConfig+0x298>)
 800c15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15e:	bf00      	nop
 800c160:	0800c179 	.word	0x0800c179
 800c164:	0800c181 	.word	0x0800c181
 800c168:	0800c189 	.word	0x0800c189
 800c16c:	0800c191 	.word	0x0800c191
 800c170:	0800c199 	.word	0x0800c199
 800c174:	0800c1a1 	.word	0x0800c1a1
 800c178:	2300      	movs	r3, #0
 800c17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c17e:	e18b      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c180:	2304      	movs	r3, #4
 800c182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c186:	e187      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c188:	2308      	movs	r3, #8
 800c18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c18e:	e183      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c190:	2310      	movs	r3, #16
 800c192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c196:	e17f      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c198:	2320      	movs	r3, #32
 800c19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c19e:	e17b      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c1a0:	2340      	movs	r3, #64	; 0x40
 800c1a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1a6:	e177      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c1a8:	2380      	movs	r3, #128	; 0x80
 800c1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ae:	bf00      	nop
 800c1b0:	e172      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a1c      	ldr	r2, [pc, #112]	; (800c228 <UART_SetConfig+0x360>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d144      	bne.n	800c246 <UART_SetConfig+0x37e>
 800c1bc:	4b16      	ldr	r3, [pc, #88]	; (800c218 <UART_SetConfig+0x350>)
 800c1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1c0:	f003 0307 	and.w	r3, r3, #7
 800c1c4:	2b05      	cmp	r3, #5
 800c1c6:	d839      	bhi.n	800c23c <UART_SetConfig+0x374>
 800c1c8:	a201      	add	r2, pc, #4	; (adr r2, 800c1d0 <UART_SetConfig+0x308>)
 800c1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ce:	bf00      	nop
 800c1d0:	0800c1e9 	.word	0x0800c1e9
 800c1d4:	0800c1f1 	.word	0x0800c1f1
 800c1d8:	0800c1f9 	.word	0x0800c1f9
 800c1dc:	0800c201 	.word	0x0800c201
 800c1e0:	0800c22d 	.word	0x0800c22d
 800c1e4:	0800c235 	.word	0x0800c235
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ee:	e153      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c1f0:	2304      	movs	r3, #4
 800c1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1f6:	e14f      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c1f8:	2308      	movs	r3, #8
 800c1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1fe:	e14b      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c200:	2310      	movs	r3, #16
 800c202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c206:	e147      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c208:	cfff69f3 	.word	0xcfff69f3
 800c20c:	58000c00 	.word	0x58000c00
 800c210:	11fff4ff 	.word	0x11fff4ff
 800c214:	40011000 	.word	0x40011000
 800c218:	58024400 	.word	0x58024400
 800c21c:	40004400 	.word	0x40004400
 800c220:	40004800 	.word	0x40004800
 800c224:	40004c00 	.word	0x40004c00
 800c228:	40005000 	.word	0x40005000
 800c22c:	2320      	movs	r3, #32
 800c22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c232:	e131      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c234:	2340      	movs	r3, #64	; 0x40
 800c236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c23a:	e12d      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c23c:	2380      	movs	r3, #128	; 0x80
 800c23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c242:	bf00      	nop
 800c244:	e128      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4ab6      	ldr	r2, [pc, #728]	; (800c524 <UART_SetConfig+0x65c>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d178      	bne.n	800c342 <UART_SetConfig+0x47a>
 800c250:	4bb5      	ldr	r3, [pc, #724]	; (800c528 <UART_SetConfig+0x660>)
 800c252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c254:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c258:	2b28      	cmp	r3, #40	; 0x28
 800c25a:	d86d      	bhi.n	800c338 <UART_SetConfig+0x470>
 800c25c:	a201      	add	r2, pc, #4	; (adr r2, 800c264 <UART_SetConfig+0x39c>)
 800c25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c262:	bf00      	nop
 800c264:	0800c309 	.word	0x0800c309
 800c268:	0800c339 	.word	0x0800c339
 800c26c:	0800c339 	.word	0x0800c339
 800c270:	0800c339 	.word	0x0800c339
 800c274:	0800c339 	.word	0x0800c339
 800c278:	0800c339 	.word	0x0800c339
 800c27c:	0800c339 	.word	0x0800c339
 800c280:	0800c339 	.word	0x0800c339
 800c284:	0800c311 	.word	0x0800c311
 800c288:	0800c339 	.word	0x0800c339
 800c28c:	0800c339 	.word	0x0800c339
 800c290:	0800c339 	.word	0x0800c339
 800c294:	0800c339 	.word	0x0800c339
 800c298:	0800c339 	.word	0x0800c339
 800c29c:	0800c339 	.word	0x0800c339
 800c2a0:	0800c339 	.word	0x0800c339
 800c2a4:	0800c319 	.word	0x0800c319
 800c2a8:	0800c339 	.word	0x0800c339
 800c2ac:	0800c339 	.word	0x0800c339
 800c2b0:	0800c339 	.word	0x0800c339
 800c2b4:	0800c339 	.word	0x0800c339
 800c2b8:	0800c339 	.word	0x0800c339
 800c2bc:	0800c339 	.word	0x0800c339
 800c2c0:	0800c339 	.word	0x0800c339
 800c2c4:	0800c321 	.word	0x0800c321
 800c2c8:	0800c339 	.word	0x0800c339
 800c2cc:	0800c339 	.word	0x0800c339
 800c2d0:	0800c339 	.word	0x0800c339
 800c2d4:	0800c339 	.word	0x0800c339
 800c2d8:	0800c339 	.word	0x0800c339
 800c2dc:	0800c339 	.word	0x0800c339
 800c2e0:	0800c339 	.word	0x0800c339
 800c2e4:	0800c329 	.word	0x0800c329
 800c2e8:	0800c339 	.word	0x0800c339
 800c2ec:	0800c339 	.word	0x0800c339
 800c2f0:	0800c339 	.word	0x0800c339
 800c2f4:	0800c339 	.word	0x0800c339
 800c2f8:	0800c339 	.word	0x0800c339
 800c2fc:	0800c339 	.word	0x0800c339
 800c300:	0800c339 	.word	0x0800c339
 800c304:	0800c331 	.word	0x0800c331
 800c308:	2301      	movs	r3, #1
 800c30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c30e:	e0c3      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c310:	2304      	movs	r3, #4
 800c312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c316:	e0bf      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c318:	2308      	movs	r3, #8
 800c31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c31e:	e0bb      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c320:	2310      	movs	r3, #16
 800c322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c326:	e0b7      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c328:	2320      	movs	r3, #32
 800c32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c32e:	e0b3      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c330:	2340      	movs	r3, #64	; 0x40
 800c332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c336:	e0af      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c338:	2380      	movs	r3, #128	; 0x80
 800c33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c33e:	bf00      	nop
 800c340:	e0aa      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a79      	ldr	r2, [pc, #484]	; (800c52c <UART_SetConfig+0x664>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d132      	bne.n	800c3b2 <UART_SetConfig+0x4ea>
 800c34c:	4b76      	ldr	r3, [pc, #472]	; (800c528 <UART_SetConfig+0x660>)
 800c34e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c350:	f003 0307 	and.w	r3, r3, #7
 800c354:	2b05      	cmp	r3, #5
 800c356:	d827      	bhi.n	800c3a8 <UART_SetConfig+0x4e0>
 800c358:	a201      	add	r2, pc, #4	; (adr r2, 800c360 <UART_SetConfig+0x498>)
 800c35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35e:	bf00      	nop
 800c360:	0800c379 	.word	0x0800c379
 800c364:	0800c381 	.word	0x0800c381
 800c368:	0800c389 	.word	0x0800c389
 800c36c:	0800c391 	.word	0x0800c391
 800c370:	0800c399 	.word	0x0800c399
 800c374:	0800c3a1 	.word	0x0800c3a1
 800c378:	2300      	movs	r3, #0
 800c37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c37e:	e08b      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c380:	2304      	movs	r3, #4
 800c382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c386:	e087      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c388:	2308      	movs	r3, #8
 800c38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c38e:	e083      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c390:	2310      	movs	r3, #16
 800c392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c396:	e07f      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c398:	2320      	movs	r3, #32
 800c39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c39e:	e07b      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c3a0:	2340      	movs	r3, #64	; 0x40
 800c3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3a6:	e077      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c3a8:	2380      	movs	r3, #128	; 0x80
 800c3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ae:	bf00      	nop
 800c3b0:	e072      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a5e      	ldr	r2, [pc, #376]	; (800c530 <UART_SetConfig+0x668>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d132      	bne.n	800c422 <UART_SetConfig+0x55a>
 800c3bc:	4b5a      	ldr	r3, [pc, #360]	; (800c528 <UART_SetConfig+0x660>)
 800c3be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3c0:	f003 0307 	and.w	r3, r3, #7
 800c3c4:	2b05      	cmp	r3, #5
 800c3c6:	d827      	bhi.n	800c418 <UART_SetConfig+0x550>
 800c3c8:	a201      	add	r2, pc, #4	; (adr r2, 800c3d0 <UART_SetConfig+0x508>)
 800c3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ce:	bf00      	nop
 800c3d0:	0800c3e9 	.word	0x0800c3e9
 800c3d4:	0800c3f1 	.word	0x0800c3f1
 800c3d8:	0800c3f9 	.word	0x0800c3f9
 800c3dc:	0800c401 	.word	0x0800c401
 800c3e0:	0800c409 	.word	0x0800c409
 800c3e4:	0800c411 	.word	0x0800c411
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ee:	e053      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c3f0:	2304      	movs	r3, #4
 800c3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3f6:	e04f      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c3f8:	2308      	movs	r3, #8
 800c3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3fe:	e04b      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c400:	2310      	movs	r3, #16
 800c402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c406:	e047      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c408:	2320      	movs	r3, #32
 800c40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c40e:	e043      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c410:	2340      	movs	r3, #64	; 0x40
 800c412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c416:	e03f      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c418:	2380      	movs	r3, #128	; 0x80
 800c41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c41e:	bf00      	nop
 800c420:	e03a      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a43      	ldr	r2, [pc, #268]	; (800c534 <UART_SetConfig+0x66c>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d132      	bne.n	800c492 <UART_SetConfig+0x5ca>
 800c42c:	4b3e      	ldr	r3, [pc, #248]	; (800c528 <UART_SetConfig+0x660>)
 800c42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c430:	f003 0307 	and.w	r3, r3, #7
 800c434:	2b05      	cmp	r3, #5
 800c436:	d827      	bhi.n	800c488 <UART_SetConfig+0x5c0>
 800c438:	a201      	add	r2, pc, #4	; (adr r2, 800c440 <UART_SetConfig+0x578>)
 800c43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43e:	bf00      	nop
 800c440:	0800c459 	.word	0x0800c459
 800c444:	0800c461 	.word	0x0800c461
 800c448:	0800c469 	.word	0x0800c469
 800c44c:	0800c471 	.word	0x0800c471
 800c450:	0800c479 	.word	0x0800c479
 800c454:	0800c481 	.word	0x0800c481
 800c458:	2302      	movs	r3, #2
 800c45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c45e:	e01b      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c460:	2304      	movs	r3, #4
 800c462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c466:	e017      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c468:	2308      	movs	r3, #8
 800c46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c46e:	e013      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c470:	2310      	movs	r3, #16
 800c472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c476:	e00f      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c478:	2320      	movs	r3, #32
 800c47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c47e:	e00b      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c480:	2340      	movs	r3, #64	; 0x40
 800c482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c486:	e007      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c488:	2380      	movs	r3, #128	; 0x80
 800c48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c48e:	bf00      	nop
 800c490:	e002      	b.n	800c498 <UART_SetConfig+0x5d0>
 800c492:	2380      	movs	r3, #128	; 0x80
 800c494:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a25      	ldr	r2, [pc, #148]	; (800c534 <UART_SetConfig+0x66c>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	f040 80b8 	bne.w	800c614 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c4a8:	2b08      	cmp	r3, #8
 800c4aa:	d019      	beq.n	800c4e0 <UART_SetConfig+0x618>
 800c4ac:	2b08      	cmp	r3, #8
 800c4ae:	dc04      	bgt.n	800c4ba <UART_SetConfig+0x5f2>
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d009      	beq.n	800c4c8 <UART_SetConfig+0x600>
 800c4b4:	2b04      	cmp	r3, #4
 800c4b6:	d00b      	beq.n	800c4d0 <UART_SetConfig+0x608>
 800c4b8:	e042      	b.n	800c540 <UART_SetConfig+0x678>
 800c4ba:	2b20      	cmp	r3, #32
 800c4bc:	d02b      	beq.n	800c516 <UART_SetConfig+0x64e>
 800c4be:	2b40      	cmp	r3, #64	; 0x40
 800c4c0:	d02c      	beq.n	800c51c <UART_SetConfig+0x654>
 800c4c2:	2b10      	cmp	r3, #16
 800c4c4:	d014      	beq.n	800c4f0 <UART_SetConfig+0x628>
 800c4c6:	e03b      	b.n	800c540 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c4c8:	f7fc fc76 	bl	8008db8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c4cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c4ce:	e03d      	b.n	800c54c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4d0:	f107 0314 	add.w	r3, r7, #20
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fc fc85 	bl	8008de4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4de:	e035      	b.n	800c54c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4e0:	f107 0308 	add.w	r3, r7, #8
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fc fdc9 	bl	800907c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c4ee:	e02d      	b.n	800c54c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4f0:	4b0d      	ldr	r3, [pc, #52]	; (800c528 <UART_SetConfig+0x660>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 0320 	and.w	r3, r3, #32
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d009      	beq.n	800c510 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4fc:	4b0a      	ldr	r3, [pc, #40]	; (800c528 <UART_SetConfig+0x660>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	08db      	lsrs	r3, r3, #3
 800c502:	f003 0303 	and.w	r3, r3, #3
 800c506:	4a0c      	ldr	r2, [pc, #48]	; (800c538 <UART_SetConfig+0x670>)
 800c508:	fa22 f303 	lsr.w	r3, r2, r3
 800c50c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c50e:	e01d      	b.n	800c54c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800c510:	4b09      	ldr	r3, [pc, #36]	; (800c538 <UART_SetConfig+0x670>)
 800c512:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c514:	e01a      	b.n	800c54c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c516:	4b09      	ldr	r3, [pc, #36]	; (800c53c <UART_SetConfig+0x674>)
 800c518:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c51a:	e017      	b.n	800c54c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c51c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c520:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c522:	e013      	b.n	800c54c <UART_SetConfig+0x684>
 800c524:	40011400 	.word	0x40011400
 800c528:	58024400 	.word	0x58024400
 800c52c:	40007800 	.word	0x40007800
 800c530:	40007c00 	.word	0x40007c00
 800c534:	58000c00 	.word	0x58000c00
 800c538:	03d09000 	.word	0x03d09000
 800c53c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c540:	2300      	movs	r3, #0
 800c542:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c54a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f000 824d 	beq.w	800c9ee <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c558:	4aad      	ldr	r2, [pc, #692]	; (800c810 <UART_SetConfig+0x948>)
 800c55a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c55e:	461a      	mov	r2, r3
 800c560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c562:	fbb3 f3f2 	udiv	r3, r3, r2
 800c566:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	4613      	mov	r3, r2
 800c56e:	005b      	lsls	r3, r3, #1
 800c570:	4413      	add	r3, r2
 800c572:	6a3a      	ldr	r2, [r7, #32]
 800c574:	429a      	cmp	r2, r3
 800c576:	d305      	bcc.n	800c584 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c57e:	6a3a      	ldr	r2, [r7, #32]
 800c580:	429a      	cmp	r2, r3
 800c582:	d903      	bls.n	800c58c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c58a:	e230      	b.n	800c9ee <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58e:	4618      	mov	r0, r3
 800c590:	f04f 0100 	mov.w	r1, #0
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c598:	4a9d      	ldr	r2, [pc, #628]	; (800c810 <UART_SetConfig+0x948>)
 800c59a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	f04f 0400 	mov.w	r4, #0
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	4623      	mov	r3, r4
 800c5a8:	f7f3 fef2 	bl	8000390 <__aeabi_uldivmod>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	4622      	mov	r2, r4
 800c5b4:	f04f 0300 	mov.w	r3, #0
 800c5b8:	f04f 0400 	mov.w	r4, #0
 800c5bc:	0214      	lsls	r4, r2, #8
 800c5be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c5c2:	020b      	lsls	r3, r1, #8
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	6852      	ldr	r2, [r2, #4]
 800c5c8:	0852      	lsrs	r2, r2, #1
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	f04f 0200 	mov.w	r2, #0
 800c5d0:	eb13 0b01 	adds.w	fp, r3, r1
 800c5d4:	eb44 0c02 	adc.w	ip, r4, r2
 800c5d8:	4658      	mov	r0, fp
 800c5da:	4661      	mov	r1, ip
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	f04f 0400 	mov.w	r4, #0
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	4623      	mov	r3, r4
 800c5e8:	f7f3 fed2 	bl	8000390 <__aeabi_uldivmod>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5f8:	d308      	bcc.n	800c60c <UART_SetConfig+0x744>
 800c5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c600:	d204      	bcs.n	800c60c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c608:	60da      	str	r2, [r3, #12]
 800c60a:	e1f0      	b.n	800c9ee <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c612:	e1ec      	b.n	800c9ee <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	69db      	ldr	r3, [r3, #28]
 800c618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c61c:	f040 8100 	bne.w	800c820 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800c620:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c624:	2b40      	cmp	r3, #64	; 0x40
 800c626:	f200 80b7 	bhi.w	800c798 <UART_SetConfig+0x8d0>
 800c62a:	a201      	add	r2, pc, #4	; (adr r2, 800c630 <UART_SetConfig+0x768>)
 800c62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c630:	0800c735 	.word	0x0800c735
 800c634:	0800c73d 	.word	0x0800c73d
 800c638:	0800c799 	.word	0x0800c799
 800c63c:	0800c799 	.word	0x0800c799
 800c640:	0800c745 	.word	0x0800c745
 800c644:	0800c799 	.word	0x0800c799
 800c648:	0800c799 	.word	0x0800c799
 800c64c:	0800c799 	.word	0x0800c799
 800c650:	0800c755 	.word	0x0800c755
 800c654:	0800c799 	.word	0x0800c799
 800c658:	0800c799 	.word	0x0800c799
 800c65c:	0800c799 	.word	0x0800c799
 800c660:	0800c799 	.word	0x0800c799
 800c664:	0800c799 	.word	0x0800c799
 800c668:	0800c799 	.word	0x0800c799
 800c66c:	0800c799 	.word	0x0800c799
 800c670:	0800c765 	.word	0x0800c765
 800c674:	0800c799 	.word	0x0800c799
 800c678:	0800c799 	.word	0x0800c799
 800c67c:	0800c799 	.word	0x0800c799
 800c680:	0800c799 	.word	0x0800c799
 800c684:	0800c799 	.word	0x0800c799
 800c688:	0800c799 	.word	0x0800c799
 800c68c:	0800c799 	.word	0x0800c799
 800c690:	0800c799 	.word	0x0800c799
 800c694:	0800c799 	.word	0x0800c799
 800c698:	0800c799 	.word	0x0800c799
 800c69c:	0800c799 	.word	0x0800c799
 800c6a0:	0800c799 	.word	0x0800c799
 800c6a4:	0800c799 	.word	0x0800c799
 800c6a8:	0800c799 	.word	0x0800c799
 800c6ac:	0800c799 	.word	0x0800c799
 800c6b0:	0800c78b 	.word	0x0800c78b
 800c6b4:	0800c799 	.word	0x0800c799
 800c6b8:	0800c799 	.word	0x0800c799
 800c6bc:	0800c799 	.word	0x0800c799
 800c6c0:	0800c799 	.word	0x0800c799
 800c6c4:	0800c799 	.word	0x0800c799
 800c6c8:	0800c799 	.word	0x0800c799
 800c6cc:	0800c799 	.word	0x0800c799
 800c6d0:	0800c799 	.word	0x0800c799
 800c6d4:	0800c799 	.word	0x0800c799
 800c6d8:	0800c799 	.word	0x0800c799
 800c6dc:	0800c799 	.word	0x0800c799
 800c6e0:	0800c799 	.word	0x0800c799
 800c6e4:	0800c799 	.word	0x0800c799
 800c6e8:	0800c799 	.word	0x0800c799
 800c6ec:	0800c799 	.word	0x0800c799
 800c6f0:	0800c799 	.word	0x0800c799
 800c6f4:	0800c799 	.word	0x0800c799
 800c6f8:	0800c799 	.word	0x0800c799
 800c6fc:	0800c799 	.word	0x0800c799
 800c700:	0800c799 	.word	0x0800c799
 800c704:	0800c799 	.word	0x0800c799
 800c708:	0800c799 	.word	0x0800c799
 800c70c:	0800c799 	.word	0x0800c799
 800c710:	0800c799 	.word	0x0800c799
 800c714:	0800c799 	.word	0x0800c799
 800c718:	0800c799 	.word	0x0800c799
 800c71c:	0800c799 	.word	0x0800c799
 800c720:	0800c799 	.word	0x0800c799
 800c724:	0800c799 	.word	0x0800c799
 800c728:	0800c799 	.word	0x0800c799
 800c72c:	0800c799 	.word	0x0800c799
 800c730:	0800c791 	.word	0x0800c791
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c734:	f7fb f96c 	bl	8007a10 <HAL_RCC_GetPCLK1Freq>
 800c738:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c73a:	e033      	b.n	800c7a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c73c:	f7fb f97e 	bl	8007a3c <HAL_RCC_GetPCLK2Freq>
 800c740:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c742:	e02f      	b.n	800c7a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c744:	f107 0314 	add.w	r3, r7, #20
 800c748:	4618      	mov	r0, r3
 800c74a:	f7fc fb4b 	bl	8008de4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c752:	e027      	b.n	800c7a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c754:	f107 0308 	add.w	r3, r7, #8
 800c758:	4618      	mov	r0, r3
 800c75a:	f7fc fc8f 	bl	800907c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c762:	e01f      	b.n	800c7a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c764:	4b2b      	ldr	r3, [pc, #172]	; (800c814 <UART_SetConfig+0x94c>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f003 0320 	and.w	r3, r3, #32
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d009      	beq.n	800c784 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c770:	4b28      	ldr	r3, [pc, #160]	; (800c814 <UART_SetConfig+0x94c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	08db      	lsrs	r3, r3, #3
 800c776:	f003 0303 	and.w	r3, r3, #3
 800c77a:	4a27      	ldr	r2, [pc, #156]	; (800c818 <UART_SetConfig+0x950>)
 800c77c:	fa22 f303 	lsr.w	r3, r2, r3
 800c780:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c782:	e00f      	b.n	800c7a4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800c784:	4b24      	ldr	r3, [pc, #144]	; (800c818 <UART_SetConfig+0x950>)
 800c786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c788:	e00c      	b.n	800c7a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c78a:	4b24      	ldr	r3, [pc, #144]	; (800c81c <UART_SetConfig+0x954>)
 800c78c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c78e:	e009      	b.n	800c7a4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c796:	e005      	b.n	800c7a4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800c798:	2300      	movs	r3, #0
 800c79a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c79c:	2301      	movs	r3, #1
 800c79e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c7a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f000 8121 	beq.w	800c9ee <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b0:	4a17      	ldr	r2, [pc, #92]	; (800c810 <UART_SetConfig+0x948>)
 800c7b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7be:	005a      	lsls	r2, r3, #1
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	085b      	lsrs	r3, r3, #1
 800c7c6:	441a      	add	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d6:	2b0f      	cmp	r3, #15
 800c7d8:	d916      	bls.n	800c808 <UART_SetConfig+0x940>
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7e0:	d212      	bcs.n	800c808 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	f023 030f 	bic.w	r3, r3, #15
 800c7ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ee:	085b      	lsrs	r3, r3, #1
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	f003 0307 	and.w	r3, r3, #7
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c804:	60da      	str	r2, [r3, #12]
 800c806:	e0f2      	b.n	800c9ee <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800c808:	2301      	movs	r3, #1
 800c80a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c80e:	e0ee      	b.n	800c9ee <UART_SetConfig+0xb26>
 800c810:	08015af4 	.word	0x08015af4
 800c814:	58024400 	.word	0x58024400
 800c818:	03d09000 	.word	0x03d09000
 800c81c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800c820:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c824:	2b40      	cmp	r3, #64	; 0x40
 800c826:	f200 80b7 	bhi.w	800c998 <UART_SetConfig+0xad0>
 800c82a:	a201      	add	r2, pc, #4	; (adr r2, 800c830 <UART_SetConfig+0x968>)
 800c82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c830:	0800c935 	.word	0x0800c935
 800c834:	0800c93d 	.word	0x0800c93d
 800c838:	0800c999 	.word	0x0800c999
 800c83c:	0800c999 	.word	0x0800c999
 800c840:	0800c945 	.word	0x0800c945
 800c844:	0800c999 	.word	0x0800c999
 800c848:	0800c999 	.word	0x0800c999
 800c84c:	0800c999 	.word	0x0800c999
 800c850:	0800c955 	.word	0x0800c955
 800c854:	0800c999 	.word	0x0800c999
 800c858:	0800c999 	.word	0x0800c999
 800c85c:	0800c999 	.word	0x0800c999
 800c860:	0800c999 	.word	0x0800c999
 800c864:	0800c999 	.word	0x0800c999
 800c868:	0800c999 	.word	0x0800c999
 800c86c:	0800c999 	.word	0x0800c999
 800c870:	0800c965 	.word	0x0800c965
 800c874:	0800c999 	.word	0x0800c999
 800c878:	0800c999 	.word	0x0800c999
 800c87c:	0800c999 	.word	0x0800c999
 800c880:	0800c999 	.word	0x0800c999
 800c884:	0800c999 	.word	0x0800c999
 800c888:	0800c999 	.word	0x0800c999
 800c88c:	0800c999 	.word	0x0800c999
 800c890:	0800c999 	.word	0x0800c999
 800c894:	0800c999 	.word	0x0800c999
 800c898:	0800c999 	.word	0x0800c999
 800c89c:	0800c999 	.word	0x0800c999
 800c8a0:	0800c999 	.word	0x0800c999
 800c8a4:	0800c999 	.word	0x0800c999
 800c8a8:	0800c999 	.word	0x0800c999
 800c8ac:	0800c999 	.word	0x0800c999
 800c8b0:	0800c98b 	.word	0x0800c98b
 800c8b4:	0800c999 	.word	0x0800c999
 800c8b8:	0800c999 	.word	0x0800c999
 800c8bc:	0800c999 	.word	0x0800c999
 800c8c0:	0800c999 	.word	0x0800c999
 800c8c4:	0800c999 	.word	0x0800c999
 800c8c8:	0800c999 	.word	0x0800c999
 800c8cc:	0800c999 	.word	0x0800c999
 800c8d0:	0800c999 	.word	0x0800c999
 800c8d4:	0800c999 	.word	0x0800c999
 800c8d8:	0800c999 	.word	0x0800c999
 800c8dc:	0800c999 	.word	0x0800c999
 800c8e0:	0800c999 	.word	0x0800c999
 800c8e4:	0800c999 	.word	0x0800c999
 800c8e8:	0800c999 	.word	0x0800c999
 800c8ec:	0800c999 	.word	0x0800c999
 800c8f0:	0800c999 	.word	0x0800c999
 800c8f4:	0800c999 	.word	0x0800c999
 800c8f8:	0800c999 	.word	0x0800c999
 800c8fc:	0800c999 	.word	0x0800c999
 800c900:	0800c999 	.word	0x0800c999
 800c904:	0800c999 	.word	0x0800c999
 800c908:	0800c999 	.word	0x0800c999
 800c90c:	0800c999 	.word	0x0800c999
 800c910:	0800c999 	.word	0x0800c999
 800c914:	0800c999 	.word	0x0800c999
 800c918:	0800c999 	.word	0x0800c999
 800c91c:	0800c999 	.word	0x0800c999
 800c920:	0800c999 	.word	0x0800c999
 800c924:	0800c999 	.word	0x0800c999
 800c928:	0800c999 	.word	0x0800c999
 800c92c:	0800c999 	.word	0x0800c999
 800c930:	0800c991 	.word	0x0800c991
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c934:	f7fb f86c 	bl	8007a10 <HAL_RCC_GetPCLK1Freq>
 800c938:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c93a:	e033      	b.n	800c9a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c93c:	f7fb f87e 	bl	8007a3c <HAL_RCC_GetPCLK2Freq>
 800c940:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c942:	e02f      	b.n	800c9a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c944:	f107 0314 	add.w	r3, r7, #20
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fc fa4b 	bl	8008de4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c952:	e027      	b.n	800c9a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c954:	f107 0308 	add.w	r3, r7, #8
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fc fb8f 	bl	800907c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c962:	e01f      	b.n	800c9a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c964:	4b2c      	ldr	r3, [pc, #176]	; (800ca18 <UART_SetConfig+0xb50>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f003 0320 	and.w	r3, r3, #32
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d009      	beq.n	800c984 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c970:	4b29      	ldr	r3, [pc, #164]	; (800ca18 <UART_SetConfig+0xb50>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	08db      	lsrs	r3, r3, #3
 800c976:	f003 0303 	and.w	r3, r3, #3
 800c97a:	4a28      	ldr	r2, [pc, #160]	; (800ca1c <UART_SetConfig+0xb54>)
 800c97c:	fa22 f303 	lsr.w	r3, r2, r3
 800c980:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c982:	e00f      	b.n	800c9a4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800c984:	4b25      	ldr	r3, [pc, #148]	; (800ca1c <UART_SetConfig+0xb54>)
 800c986:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c988:	e00c      	b.n	800c9a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c98a:	4b25      	ldr	r3, [pc, #148]	; (800ca20 <UART_SetConfig+0xb58>)
 800c98c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c98e:	e009      	b.n	800c9a4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c994:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c996:	e005      	b.n	800c9a4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800c998:	2300      	movs	r3, #0
 800c99a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c9a2:	bf00      	nop
    }

    if (pclk != 0U)
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d021      	beq.n	800c9ee <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ae:	4a1d      	ldr	r2, [pc, #116]	; (800ca24 <UART_SetConfig+0xb5c>)
 800c9b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	085b      	lsrs	r3, r3, #1
 800c9c2:	441a      	add	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	2b0f      	cmp	r3, #15
 800c9d4:	d908      	bls.n	800c9e8 <UART_SetConfig+0xb20>
 800c9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9dc:	d204      	bcs.n	800c9e8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9e4:	60da      	str	r2, [r3, #12]
 800c9e6:	e002      	b.n	800c9ee <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800ca0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3738      	adds	r7, #56	; 0x38
 800ca12:	46bd      	mov	sp, r7
 800ca14:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800ca18:	58024400 	.word	0x58024400
 800ca1c:	03d09000 	.word	0x03d09000
 800ca20:	003d0900 	.word	0x003d0900
 800ca24:	08015af4 	.word	0x08015af4

0800ca28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca34:	f003 0301 	and.w	r3, r3, #1
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00a      	beq.n	800ca52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	430a      	orrs	r2, r1
 800ca50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca56:	f003 0302 	and.w	r3, r3, #2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00a      	beq.n	800ca74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	430a      	orrs	r2, r1
 800ca72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca78:	f003 0304 	and.w	r3, r3, #4
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00a      	beq.n	800ca96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	430a      	orrs	r2, r1
 800ca94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9a:	f003 0308 	and.w	r3, r3, #8
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00a      	beq.n	800cab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	430a      	orrs	r2, r1
 800cab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cabc:	f003 0310 	and.w	r3, r3, #16
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00a      	beq.n	800cada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	430a      	orrs	r2, r1
 800cad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cade:	f003 0320 	and.w	r3, r3, #32
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00a      	beq.n	800cafc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	430a      	orrs	r2, r1
 800cafa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d01a      	beq.n	800cb3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	430a      	orrs	r2, r1
 800cb1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb26:	d10a      	bne.n	800cb3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	430a      	orrs	r2, r1
 800cb3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00a      	beq.n	800cb60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	430a      	orrs	r2, r1
 800cb5e:	605a      	str	r2, [r3, #4]
  }
}
 800cb60:	bf00      	nop
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	af02      	add	r7, sp, #8
 800cb72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800cb7c:	f7f5 fb9a 	bl	80022b4 <HAL_GetTick>
 800cb80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 0308 	and.w	r3, r3, #8
 800cb8c:	2b08      	cmp	r3, #8
 800cb8e:	d10e      	bne.n	800cbae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f82c 	bl	800cbfc <UART_WaitOnFlagUntilTimeout>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d001      	beq.n	800cbae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbaa:	2303      	movs	r3, #3
 800cbac:	e022      	b.n	800cbf4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0304 	and.w	r3, r3, #4
 800cbb8:	2b04      	cmp	r3, #4
 800cbba:	d10e      	bne.n	800cbda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f816 	bl	800cbfc <UART_WaitOnFlagUntilTimeout>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d001      	beq.n	800cbda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	e00c      	b.n	800cbf4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2220      	movs	r2, #32
 800cbde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2220      	movs	r2, #32
 800cbe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	603b      	str	r3, [r7, #0]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc0c:	e062      	b.n	800ccd4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc14:	d05e      	beq.n	800ccd4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc16:	f7f5 fb4d 	bl	80022b4 <HAL_GetTick>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	1ad3      	subs	r3, r2, r3
 800cc20:	69ba      	ldr	r2, [r7, #24]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d302      	bcc.n	800cc2c <UART_WaitOnFlagUntilTimeout+0x30>
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d11d      	bne.n	800cc68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cc3a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	689a      	ldr	r2, [r3, #8]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f022 0201 	bic.w	r2, r2, #1
 800cc4a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2220      	movs	r2, #32
 800cc50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2220      	movs	r2, #32
 800cc58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800cc64:	2303      	movs	r3, #3
 800cc66:	e045      	b.n	800ccf4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f003 0304 	and.w	r3, r3, #4
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d02e      	beq.n	800ccd4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	69db      	ldr	r3, [r3, #28]
 800cc7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc84:	d126      	bne.n	800ccd4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc8e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cc9e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	689a      	ldr	r2, [r3, #8]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f022 0201 	bic.w	r2, r2, #1
 800ccae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2220      	movs	r2, #32
 800ccb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2220      	movs	r2, #32
 800ccbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2220      	movs	r2, #32
 800ccc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	e00f      	b.n	800ccf4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	69da      	ldr	r2, [r3, #28]
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	4013      	ands	r3, r2
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	bf0c      	ite	eq
 800cce4:	2301      	moveq	r3, #1
 800cce6:	2300      	movne	r3, #0
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	461a      	mov	r2, r3
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d08d      	beq.n	800cc0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d101      	bne.n	800cd12 <HAL_UARTEx_DisableFifoMode+0x16>
 800cd0e:	2302      	movs	r3, #2
 800cd10:	e027      	b.n	800cd62 <HAL_UARTEx_DisableFifoMode+0x66>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2201      	movs	r2, #1
 800cd16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2224      	movs	r2, #36	; 0x24
 800cd1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f022 0201 	bic.w	r2, r2, #1
 800cd38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cd40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2220      	movs	r2, #32
 800cd54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3714      	adds	r7, #20
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b084      	sub	sp, #16
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d101      	bne.n	800cd86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd82:	2302      	movs	r3, #2
 800cd84:	e02d      	b.n	800cde2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2224      	movs	r2, #36	; 0x24
 800cd92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f022 0201 	bic.w	r2, r2, #1
 800cdac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	430a      	orrs	r2, r1
 800cdc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 f850 	bl	800ce68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2220      	movs	r2, #32
 800cdd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b084      	sub	sp, #16
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
 800cdf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d101      	bne.n	800ce02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cdfe:	2302      	movs	r3, #2
 800ce00:	e02d      	b.n	800ce5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2201      	movs	r2, #1
 800ce06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2224      	movs	r2, #36	; 0x24
 800ce0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f022 0201 	bic.w	r2, r2, #1
 800ce28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	683a      	ldr	r2, [r7, #0]
 800ce3a:	430a      	orrs	r2, r1
 800ce3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f812 	bl	800ce68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2220      	movs	r2, #32
 800ce50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
	...

0800ce68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b089      	sub	sp, #36	; 0x24
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ce70:	4a2f      	ldr	r2, [pc, #188]	; (800cf30 <UARTEx_SetNbDataToProcess+0xc8>)
 800ce72:	f107 0314 	add.w	r3, r7, #20
 800ce76:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce7a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ce7e:	4a2d      	ldr	r2, [pc, #180]	; (800cf34 <UARTEx_SetNbDataToProcess+0xcc>)
 800ce80:	f107 030c 	add.w	r3, r7, #12
 800ce84:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce88:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d108      	bne.n	800cea6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cea4:	e03d      	b.n	800cf22 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cea6:	2310      	movs	r3, #16
 800cea8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ceaa:	2310      	movs	r3, #16
 800ceac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	0e5b      	lsrs	r3, r3, #25
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	f003 0307 	and.w	r3, r3, #7
 800cebc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	0f5b      	lsrs	r3, r3, #29
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	f003 0307 	and.w	r3, r3, #7
 800cecc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800cece:	7fbb      	ldrb	r3, [r7, #30]
 800ced0:	7f3a      	ldrb	r2, [r7, #28]
 800ced2:	f107 0120 	add.w	r1, r7, #32
 800ced6:	440a      	add	r2, r1
 800ced8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cedc:	fb02 f303 	mul.w	r3, r2, r3
 800cee0:	7f3a      	ldrb	r2, [r7, #28]
 800cee2:	f107 0120 	add.w	r1, r7, #32
 800cee6:	440a      	add	r2, r1
 800cee8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ceec:	fb93 f3f2 	sdiv	r3, r3, r2
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800cef8:	7ffb      	ldrb	r3, [r7, #31]
 800cefa:	7f7a      	ldrb	r2, [r7, #29]
 800cefc:	f107 0120 	add.w	r1, r7, #32
 800cf00:	440a      	add	r2, r1
 800cf02:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cf06:	fb02 f303 	mul.w	r3, r2, r3
 800cf0a:	7f7a      	ldrb	r2, [r7, #29]
 800cf0c:	f107 0120 	add.w	r1, r7, #32
 800cf10:	440a      	add	r2, r1
 800cf12:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cf16:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cf22:	bf00      	nop
 800cf24:	3724      	adds	r7, #36	; 0x24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	08015a58 	.word	0x08015a58
 800cf34:	08015a60 	.word	0x08015a60

0800cf38 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cf38:	b084      	sub	sp, #16
 800cf3a:	b480      	push	{r7}
 800cf3c:	b085      	sub	sp, #20
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	f107 001c 	add.w	r0, r7, #28
 800cf46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cf4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800cf50:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cf52:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800cf56:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800cf5a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800cf5e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	4b07      	ldr	r3, [pc, #28]	; (800cf88 <SDMMC_Init+0x50>)
 800cf6c:	4013      	ands	r3, r2
 800cf6e:	68fa      	ldr	r2, [r7, #12]
 800cf70:	431a      	orrs	r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3714      	adds	r7, #20
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	b004      	add	sp, #16
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	ffc02c00 	.word	0xffc02c00

0800cf8c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800cfa6:	b480      	push	{r7}
 800cfa8:	b083      	sub	sp, #12
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
 800cfae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfba:	2300      	movs	r3, #0
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f043 0203 	orr.w	r2, r3, #3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	370c      	adds	r7, #12
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800cfea:	b480      	push	{r7}
 800cfec:	b083      	sub	sp, #12
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f003 0303 	and.w	r3, r3, #3
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	370c      	adds	r7, #12
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
	...

0800d008 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d026:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d02c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d032:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	4313      	orrs	r3, r2
 800d038:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	68da      	ldr	r2, [r3, #12]
 800d03e:	4b06      	ldr	r3, [pc, #24]	; (800d058 <SDMMC_SendCommand+0x50>)
 800d040:	4013      	ands	r3, r2
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	431a      	orrs	r2, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d04a:	2300      	movs	r3, #0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3714      	adds	r7, #20
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr
 800d058:	fffee0c0 	.word	0xfffee0c0

0800d05c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	691b      	ldr	r3, [r3, #16]
 800d068:	b2db      	uxtb	r3, r3
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	370c      	adds	r7, #12
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr

0800d076 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d076:	b480      	push	{r7}
 800d078:	b085      	sub	sp, #20
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
 800d07e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	3314      	adds	r3, #20
 800d084:	461a      	mov	r2, r3
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	4413      	add	r3, r2
 800d08a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3714      	adds	r7, #20
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d0c2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d0c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d0ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	431a      	orrs	r2, r3
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d0e6:	2300      	movs	r3, #0

}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3714      	adds	r7, #20
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b088      	sub	sp, #32
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d102:	2310      	movs	r3, #16
 800d104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d10a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d10c:	2300      	movs	r3, #0
 800d10e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d114:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d116:	f107 0308 	add.w	r3, r7, #8
 800d11a:	4619      	mov	r1, r3
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7ff ff73 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d122:	f241 3288 	movw	r2, #5000	; 0x1388
 800d126:	2110      	movs	r1, #16
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 faaf 	bl	800d68c <SDMMC_GetCmdResp1>
 800d12e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d130:	69fb      	ldr	r3, [r7, #28]
}
 800d132:	4618      	mov	r0, r3
 800d134:	3720      	adds	r7, #32
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b088      	sub	sp, #32
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d148:	2311      	movs	r3, #17
 800d14a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d14c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d152:	2300      	movs	r3, #0
 800d154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d15a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d15c:	f107 0308 	add.w	r3, r7, #8
 800d160:	4619      	mov	r1, r3
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7ff ff50 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d168:	f241 3288 	movw	r2, #5000	; 0x1388
 800d16c:	2111      	movs	r1, #17
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 fa8c 	bl	800d68c <SDMMC_GetCmdResp1>
 800d174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d176:	69fb      	ldr	r3, [r7, #28]
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3720      	adds	r7, #32
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b088      	sub	sp, #32
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d18e:	2312      	movs	r3, #18
 800d190:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d192:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d198:	2300      	movs	r3, #0
 800d19a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d19c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1a2:	f107 0308 	add.w	r3, r7, #8
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7ff ff2d 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d1ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1b2:	2112      	movs	r1, #18
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fa69 	bl	800d68c <SDMMC_GetCmdResp1>
 800d1ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1bc:	69fb      	ldr	r3, [r7, #28]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3720      	adds	r7, #32
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b088      	sub	sp, #32
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
 800d1ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d1d4:	2318      	movs	r3, #24
 800d1d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1e8:	f107 0308 	add.w	r3, r7, #8
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff ff0a 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1f8:	2118      	movs	r1, #24
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 fa46 	bl	800d68c <SDMMC_GetCmdResp1>
 800d200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d202:	69fb      	ldr	r3, [r7, #28]
}
 800d204:	4618      	mov	r0, r3
 800d206:	3720      	adds	r7, #32
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b088      	sub	sp, #32
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d21a:	2319      	movs	r3, #25
 800d21c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d21e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d222:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d224:	2300      	movs	r3, #0
 800d226:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d22c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d22e:	f107 0308 	add.w	r3, r7, #8
 800d232:	4619      	mov	r1, r3
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f7ff fee7 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d23a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d23e:	2119      	movs	r1, #25
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 fa23 	bl	800d68c <SDMMC_GetCmdResp1>
 800d246:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d248:	69fb      	ldr	r3, [r7, #28]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3720      	adds	r7, #32
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
	...

0800d254 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b088      	sub	sp, #32
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d25c:	2300      	movs	r3, #0
 800d25e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d260:	230c      	movs	r3, #12
 800d262:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d264:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d268:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d26a:	2300      	movs	r3, #0
 800d26c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d26e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d272:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d28c:	f107 0308 	add.w	r3, r7, #8
 800d290:	4619      	mov	r1, r3
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f7ff feb8 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d298:	4a0b      	ldr	r2, [pc, #44]	; (800d2c8 <SDMMC_CmdStopTransfer+0x74>)
 800d29a:	210c      	movs	r1, #12
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f9f5 	bl	800d68c <SDMMC_GetCmdResp1>
 800d2a2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2b6:	d101      	bne.n	800d2bc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d2bc:	69fb      	ldr	r3, [r7, #28]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3720      	adds	r7, #32
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	05f5e100 	.word	0x05f5e100

0800d2cc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b08a      	sub	sp, #40	; 0x28
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d2dc:	2307      	movs	r3, #7
 800d2de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2e4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2ee:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2f0:	f107 0310 	add.w	r3, r7, #16
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f7ff fe86 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d2fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d300:	2107      	movs	r1, #7
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f000 f9c2 	bl	800d68c <SDMMC_GetCmdResp1>
 800d308:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3728      	adds	r7, #40	; 0x28
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b088      	sub	sp, #32
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d31c:	2300      	movs	r3, #0
 800d31e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d320:	2300      	movs	r3, #0
 800d322:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d324:	2300      	movs	r3, #0
 800d326:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d328:	2300      	movs	r3, #0
 800d32a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d32c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d330:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d332:	f107 0308 	add.w	r3, r7, #8
 800d336:	4619      	mov	r1, r3
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f7ff fe65 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f976 	bl	800d630 <SDMMC_GetCmdError>
 800d344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d346:	69fb      	ldr	r3, [r7, #28]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3720      	adds	r7, #32
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b088      	sub	sp, #32
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d358:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d35c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d35e:	2308      	movs	r3, #8
 800d360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d362:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d368:	2300      	movs	r3, #0
 800d36a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d36c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d370:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d372:	f107 0308 	add.w	r3, r7, #8
 800d376:	4619      	mov	r1, r3
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f7ff fe45 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 fb78 	bl	800da74 <SDMMC_GetCmdResp7>
 800d384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d386:	69fb      	ldr	r3, [r7, #28]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3720      	adds	r7, #32
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b088      	sub	sp, #32
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d39e:	2337      	movs	r3, #55	; 0x37
 800d3a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3b2:	f107 0308 	add.w	r3, r7, #8
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f7ff fe25 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d3be:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3c2:	2137      	movs	r1, #55	; 0x37
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 f961 	bl	800d68c <SDMMC_GetCmdResp1>
 800d3ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3cc:	69fb      	ldr	r3, [r7, #28]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3720      	adds	r7, #32
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b088      	sub	sp, #32
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d3e4:	2329      	movs	r3, #41	; 0x29
 800d3e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3f8:	f107 0308 	add.w	r3, r7, #8
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f7ff fe02 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 fa7d 	bl	800d904 <SDMMC_GetCmdResp3>
 800d40a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d40c:	69fb      	ldr	r3, [r7, #28]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3720      	adds	r7, #32
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b088      	sub	sp, #32
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d424:	2306      	movs	r3, #6
 800d426:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d42c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d42e:	2300      	movs	r3, #0
 800d430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d436:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d438:	f107 0308 	add.w	r3, r7, #8
 800d43c:	4619      	mov	r1, r3
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7ff fde2 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d444:	f241 3288 	movw	r2, #5000	; 0x1388
 800d448:	2106      	movs	r1, #6
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 f91e 	bl	800d68c <SDMMC_GetCmdResp1>
 800d450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d452:	69fb      	ldr	r3, [r7, #28]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3720      	adds	r7, #32
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b088      	sub	sp, #32
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d464:	2300      	movs	r3, #0
 800d466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d468:	2333      	movs	r3, #51	; 0x33
 800d46a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d46c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d472:	2300      	movs	r3, #0
 800d474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d47a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d47c:	f107 0308 	add.w	r3, r7, #8
 800d480:	4619      	mov	r1, r3
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f7ff fdc0 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d488:	f241 3288 	movw	r2, #5000	; 0x1388
 800d48c:	2133      	movs	r1, #51	; 0x33
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f8fc 	bl	800d68c <SDMMC_GetCmdResp1>
 800d494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d496:	69fb      	ldr	r3, [r7, #28]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3720      	adds	r7, #32
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b088      	sub	sp, #32
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d4ac:	2302      	movs	r3, #2
 800d4ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d4b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d4b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4c0:	f107 0308 	add.w	r3, r7, #8
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f7ff fd9e 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 f9cf 	bl	800d870 <SDMMC_GetCmdResp2>
 800d4d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4d4:	69fb      	ldr	r3, [r7, #28]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3720      	adds	r7, #32
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b088      	sub	sp, #32
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
 800d4e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d4ec:	2309      	movs	r3, #9
 800d4ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d4f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d4f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d500:	f107 0308 	add.w	r3, r7, #8
 800d504:	4619      	mov	r1, r3
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f7ff fd7e 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f9af 	bl	800d870 <SDMMC_GetCmdResp2>
 800d512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d514:	69fb      	ldr	r3, [r7, #28]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3720      	adds	r7, #32
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b088      	sub	sp, #32
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
 800d526:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d528:	2300      	movs	r3, #0
 800d52a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d52c:	2303      	movs	r3, #3
 800d52e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d530:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d534:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d536:	2300      	movs	r3, #0
 800d538:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d53e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d540:	f107 0308 	add.w	r3, r7, #8
 800d544:	4619      	mov	r1, r3
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f7ff fd5e 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d54c:	683a      	ldr	r2, [r7, #0]
 800d54e:	2103      	movs	r1, #3
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 fa17 	bl	800d984 <SDMMC_GetCmdResp6>
 800d556:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d558:	69fb      	ldr	r3, [r7, #28]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3720      	adds	r7, #32
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b088      	sub	sp, #32
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d570:	230d      	movs	r3, #13
 800d572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d574:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d57a:	2300      	movs	r3, #0
 800d57c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d57e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d582:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d584:	f107 0308 	add.w	r3, r7, #8
 800d588:	4619      	mov	r1, r3
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f7ff fd3c 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d590:	f241 3288 	movw	r2, #5000	; 0x1388
 800d594:	210d      	movs	r1, #13
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 f878 	bl	800d68c <SDMMC_GetCmdResp1>
 800d59c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d59e:	69fb      	ldr	r3, [r7, #28]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3720      	adds	r7, #32
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b088      	sub	sp, #32
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d5b4:	230d      	movs	r3, #13
 800d5b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5c8:	f107 0308 	add.w	r3, r7, #8
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7ff fd1a 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d5d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5d8:	210d      	movs	r1, #13
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 f856 	bl	800d68c <SDMMC_GetCmdResp1>
 800d5e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5e2:	69fb      	ldr	r3, [r7, #28]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3720      	adds	r7, #32
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b088      	sub	sp, #32
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d5f8:	230b      	movs	r3, #11
 800d5fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d600:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d602:	2300      	movs	r3, #0
 800d604:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d60a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d60c:	f107 0308 	add.w	r3, r7, #8
 800d610:	4619      	mov	r1, r3
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f7ff fcf8 	bl	800d008 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d618:	f241 3288 	movw	r2, #5000	; 0x1388
 800d61c:	210b      	movs	r1, #11
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f834 	bl	800d68c <SDMMC_GetCmdResp1>
 800d624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d626:	69fb      	ldr	r3, [r7, #28]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3720      	adds	r7, #32
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d630:	b480      	push	{r7}
 800d632:	b085      	sub	sp, #20
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d638:	4b11      	ldr	r3, [pc, #68]	; (800d680 <SDMMC_GetCmdError+0x50>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	4a11      	ldr	r2, [pc, #68]	; (800d684 <SDMMC_GetCmdError+0x54>)
 800d63e:	fba2 2303 	umull	r2, r3, r2, r3
 800d642:	0a5b      	lsrs	r3, r3, #9
 800d644:	f241 3288 	movw	r2, #5000	; 0x1388
 800d648:	fb02 f303 	mul.w	r3, r2, r3
 800d64c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	1e5a      	subs	r2, r3, #1
 800d652:	60fa      	str	r2, [r7, #12]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d102      	bne.n	800d65e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d65c:	e009      	b.n	800d672 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d666:	2b00      	cmp	r3, #0
 800d668:	d0f1      	beq.n	800d64e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4a06      	ldr	r2, [pc, #24]	; (800d688 <SDMMC_GetCmdError+0x58>)
 800d66e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3714      	adds	r7, #20
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	24000000 	.word	0x24000000
 800d684:	10624dd3 	.word	0x10624dd3
 800d688:	002000c5 	.word	0x002000c5

0800d68c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b088      	sub	sp, #32
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	460b      	mov	r3, r1
 800d696:	607a      	str	r2, [r7, #4]
 800d698:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d69a:	4b70      	ldr	r3, [pc, #448]	; (800d85c <SDMMC_GetCmdResp1+0x1d0>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a70      	ldr	r2, [pc, #448]	; (800d860 <SDMMC_GetCmdResp1+0x1d4>)
 800d6a0:	fba2 2303 	umull	r2, r3, r2, r3
 800d6a4:	0a5a      	lsrs	r2, r3, #9
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	fb02 f303 	mul.w	r3, r2, r3
 800d6ac:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	1e5a      	subs	r2, r3, #1
 800d6b2:	61fa      	str	r2, [r7, #28]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d102      	bne.n	800d6be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6bc:	e0c9      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d6c4:	69ba      	ldr	r2, [r7, #24]
 800d6c6:	4b67      	ldr	r3, [pc, #412]	; (800d864 <SDMMC_GetCmdResp1+0x1d8>)
 800d6c8:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d0ef      	beq.n	800d6ae <SDMMC_GetCmdResp1+0x22>
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1ea      	bne.n	800d6ae <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6dc:	f003 0304 	and.w	r3, r3, #4
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d004      	beq.n	800d6ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2204      	movs	r2, #4
 800d6e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6ea:	2304      	movs	r3, #4
 800d6ec:	e0b1      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f2:	f003 0301 	and.w	r3, r3, #1
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d004      	beq.n	800d704 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d700:	2301      	movs	r3, #1
 800d702:	e0a6      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4a58      	ldr	r2, [pc, #352]	; (800d868 <SDMMC_GetCmdResp1+0x1dc>)
 800d708:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d70a:	68f8      	ldr	r0, [r7, #12]
 800d70c:	f7ff fca6 	bl	800d05c <SDMMC_GetCommandResponse>
 800d710:	4603      	mov	r3, r0
 800d712:	461a      	mov	r2, r3
 800d714:	7afb      	ldrb	r3, [r7, #11]
 800d716:	4293      	cmp	r3, r2
 800d718:	d001      	beq.n	800d71e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d71a:	2301      	movs	r3, #1
 800d71c:	e099      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d71e:	2100      	movs	r1, #0
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f7ff fca8 	bl	800d076 <SDMMC_GetResponse>
 800d726:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d728:	697a      	ldr	r2, [r7, #20]
 800d72a:	4b50      	ldr	r3, [pc, #320]	; (800d86c <SDMMC_GetCmdResp1+0x1e0>)
 800d72c:	4013      	ands	r3, r2
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d101      	bne.n	800d736 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d732:	2300      	movs	r3, #0
 800d734:	e08d      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	da02      	bge.n	800d742 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d73c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d740:	e087      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d001      	beq.n	800d750 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d74c:	2340      	movs	r3, #64	; 0x40
 800d74e:	e080      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d75a:	2380      	movs	r3, #128	; 0x80
 800d75c:	e079      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d764:	2b00      	cmp	r3, #0
 800d766:	d002      	beq.n	800d76e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d76c:	e071      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d774:	2b00      	cmp	r3, #0
 800d776:	d002      	beq.n	800d77e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d77c:	e069      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d784:	2b00      	cmp	r3, #0
 800d786:	d002      	beq.n	800d78e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d78c:	e061      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d794:	2b00      	cmp	r3, #0
 800d796:	d002      	beq.n	800d79e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d79c:	e059      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d7a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7ac:	e051      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d002      	beq.n	800d7be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d7b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d7bc:	e049      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d7c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d7cc:	e041      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d7d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7dc:	e039      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d002      	beq.n	800d7ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d7e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7ec:	e031      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d002      	beq.n	800d7fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d7f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d7fc:	e029      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d804:	2b00      	cmp	r3, #0
 800d806:	d002      	beq.n	800d80e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d808:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d80c:	e021      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d814:	2b00      	cmp	r3, #0
 800d816:	d002      	beq.n	800d81e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d818:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d81c:	e019      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d828:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d82c:	e011      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d834:	2b00      	cmp	r3, #0
 800d836:	d002      	beq.n	800d83e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d838:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d83c:	e009      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	f003 0308 	and.w	r3, r3, #8
 800d844:	2b00      	cmp	r3, #0
 800d846:	d002      	beq.n	800d84e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d848:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d84c:	e001      	b.n	800d852 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d84e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d852:	4618      	mov	r0, r3
 800d854:	3720      	adds	r7, #32
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
 800d85a:	bf00      	nop
 800d85c:	24000000 	.word	0x24000000
 800d860:	10624dd3 	.word	0x10624dd3
 800d864:	00200045 	.word	0x00200045
 800d868:	002000c5 	.word	0x002000c5
 800d86c:	fdffe008 	.word	0xfdffe008

0800d870 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d870:	b480      	push	{r7}
 800d872:	b085      	sub	sp, #20
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d878:	4b1f      	ldr	r3, [pc, #124]	; (800d8f8 <SDMMC_GetCmdResp2+0x88>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a1f      	ldr	r2, [pc, #124]	; (800d8fc <SDMMC_GetCmdResp2+0x8c>)
 800d87e:	fba2 2303 	umull	r2, r3, r2, r3
 800d882:	0a5b      	lsrs	r3, r3, #9
 800d884:	f241 3288 	movw	r2, #5000	; 0x1388
 800d888:	fb02 f303 	mul.w	r3, r2, r3
 800d88c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	1e5a      	subs	r2, r3, #1
 800d892:	60fa      	str	r2, [r7, #12]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d102      	bne.n	800d89e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d89c:	e026      	b.n	800d8ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d0ef      	beq.n	800d88e <SDMMC_GetCmdResp2+0x1e>
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1ea      	bne.n	800d88e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8bc:	f003 0304 	and.w	r3, r3, #4
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d004      	beq.n	800d8ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2204      	movs	r2, #4
 800d8c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8ca:	2304      	movs	r3, #4
 800d8cc:	e00e      	b.n	800d8ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d2:	f003 0301 	and.w	r3, r3, #1
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d004      	beq.n	800d8e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2201      	movs	r2, #1
 800d8de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e003      	b.n	800d8ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4a06      	ldr	r2, [pc, #24]	; (800d900 <SDMMC_GetCmdResp2+0x90>)
 800d8e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d8ea:	2300      	movs	r3, #0
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3714      	adds	r7, #20
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr
 800d8f8:	24000000 	.word	0x24000000
 800d8fc:	10624dd3 	.word	0x10624dd3
 800d900:	002000c5 	.word	0x002000c5

0800d904 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d904:	b480      	push	{r7}
 800d906:	b085      	sub	sp, #20
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d90c:	4b1a      	ldr	r3, [pc, #104]	; (800d978 <SDMMC_GetCmdResp3+0x74>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a1a      	ldr	r2, [pc, #104]	; (800d97c <SDMMC_GetCmdResp3+0x78>)
 800d912:	fba2 2303 	umull	r2, r3, r2, r3
 800d916:	0a5b      	lsrs	r3, r3, #9
 800d918:	f241 3288 	movw	r2, #5000	; 0x1388
 800d91c:	fb02 f303 	mul.w	r3, r2, r3
 800d920:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	1e5a      	subs	r2, r3, #1
 800d926:	60fa      	str	r2, [r7, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d102      	bne.n	800d932 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d92c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d930:	e01b      	b.n	800d96a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d936:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d0ef      	beq.n	800d922 <SDMMC_GetCmdResp3+0x1e>
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1ea      	bne.n	800d922 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d950:	f003 0304 	and.w	r3, r3, #4
 800d954:	2b00      	cmp	r3, #0
 800d956:	d004      	beq.n	800d962 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2204      	movs	r2, #4
 800d95c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d95e:	2304      	movs	r3, #4
 800d960:	e003      	b.n	800d96a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4a06      	ldr	r2, [pc, #24]	; (800d980 <SDMMC_GetCmdResp3+0x7c>)
 800d966:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d968:	2300      	movs	r3, #0
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3714      	adds	r7, #20
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	24000000 	.word	0x24000000
 800d97c:	10624dd3 	.word	0x10624dd3
 800d980:	002000c5 	.word	0x002000c5

0800d984 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b088      	sub	sp, #32
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	460b      	mov	r3, r1
 800d98e:	607a      	str	r2, [r7, #4]
 800d990:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d992:	4b35      	ldr	r3, [pc, #212]	; (800da68 <SDMMC_GetCmdResp6+0xe4>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a35      	ldr	r2, [pc, #212]	; (800da6c <SDMMC_GetCmdResp6+0xe8>)
 800d998:	fba2 2303 	umull	r2, r3, r2, r3
 800d99c:	0a5b      	lsrs	r3, r3, #9
 800d99e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9a2:	fb02 f303 	mul.w	r3, r2, r3
 800d9a6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	1e5a      	subs	r2, r3, #1
 800d9ac:	61fa      	str	r2, [r7, #28]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d102      	bne.n	800d9b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9b6:	e052      	b.n	800da5e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9bc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d0ef      	beq.n	800d9a8 <SDMMC_GetCmdResp6+0x24>
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1ea      	bne.n	800d9a8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d6:	f003 0304 	and.w	r3, r3, #4
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d004      	beq.n	800d9e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2204      	movs	r2, #4
 800d9e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9e4:	2304      	movs	r3, #4
 800d9e6:	e03a      	b.n	800da5e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ec:	f003 0301 	and.w	r3, r3, #1
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d004      	beq.n	800d9fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	e02f      	b.n	800da5e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f7ff fb2c 	bl	800d05c <SDMMC_GetCommandResponse>
 800da04:	4603      	mov	r3, r0
 800da06:	461a      	mov	r2, r3
 800da08:	7afb      	ldrb	r3, [r7, #11]
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d001      	beq.n	800da12 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da0e:	2301      	movs	r3, #1
 800da10:	e025      	b.n	800da5e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	4a16      	ldr	r2, [pc, #88]	; (800da70 <SDMMC_GetCmdResp6+0xec>)
 800da16:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800da18:	2100      	movs	r1, #0
 800da1a:	68f8      	ldr	r0, [r7, #12]
 800da1c:	f7ff fb2b 	bl	800d076 <SDMMC_GetResponse>
 800da20:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d106      	bne.n	800da3a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	0c1b      	lsrs	r3, r3, #16
 800da30:	b29a      	uxth	r2, r3
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800da36:	2300      	movs	r3, #0
 800da38:	e011      	b.n	800da5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da48:	e009      	b.n	800da5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da50:	2b00      	cmp	r3, #0
 800da52:	d002      	beq.n	800da5a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da58:	e001      	b.n	800da5e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3720      	adds	r7, #32
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	24000000 	.word	0x24000000
 800da6c:	10624dd3 	.word	0x10624dd3
 800da70:	002000c5 	.word	0x002000c5

0800da74 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da7c:	4b22      	ldr	r3, [pc, #136]	; (800db08 <SDMMC_GetCmdResp7+0x94>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a22      	ldr	r2, [pc, #136]	; (800db0c <SDMMC_GetCmdResp7+0x98>)
 800da82:	fba2 2303 	umull	r2, r3, r2, r3
 800da86:	0a5b      	lsrs	r3, r3, #9
 800da88:	f241 3288 	movw	r2, #5000	; 0x1388
 800da8c:	fb02 f303 	mul.w	r3, r2, r3
 800da90:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	1e5a      	subs	r2, r3, #1
 800da96:	60fa      	str	r2, [r7, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d102      	bne.n	800daa2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800daa0:	e02c      	b.n	800dafc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d0ef      	beq.n	800da92 <SDMMC_GetCmdResp7+0x1e>
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1ea      	bne.n	800da92 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac0:	f003 0304 	and.w	r3, r3, #4
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d004      	beq.n	800dad2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2204      	movs	r2, #4
 800dacc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dace:	2304      	movs	r3, #4
 800dad0:	e014      	b.n	800dafc <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad6:	f003 0301 	and.w	r3, r3, #1
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d004      	beq.n	800dae8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2201      	movs	r2, #1
 800dae2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dae4:	2301      	movs	r3, #1
 800dae6:	e009      	b.n	800dafc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2240      	movs	r2, #64	; 0x40
 800daf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dafa:	2300      	movs	r3, #0

}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3714      	adds	r7, #20
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr
 800db08:	24000000 	.word	0x24000000
 800db0c:	10624dd3 	.word	0x10624dd3

0800db10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db10:	b084      	sub	sp, #16
 800db12:	b580      	push	{r7, lr}
 800db14:	b084      	sub	sp, #16
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	f107 001c 	add.w	r0, r7, #28
 800db1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800db22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db24:	2b01      	cmp	r3, #1
 800db26:	d120      	bne.n	800db6a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	68da      	ldr	r2, [r3, #12]
 800db38:	4b25      	ldr	r3, [pc, #148]	; (800dbd0 <USB_CoreInit+0xc0>)
 800db3a:	4013      	ands	r3, r2
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800db4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d105      	bne.n	800db5e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f001 fabe 	bl	800f0e0 <USB_CoreReset>
 800db64:	4603      	mov	r3, r0
 800db66:	73fb      	strb	r3, [r7, #15]
 800db68:	e01a      	b.n	800dba0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f001 fab2 	bl	800f0e0 <USB_CoreReset>
 800db7c:	4603      	mov	r3, r0
 800db7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800db80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db82:	2b00      	cmp	r3, #0
 800db84:	d106      	bne.n	800db94 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	639a      	str	r2, [r3, #56]	; 0x38
 800db92:	e005      	b.n	800dba0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d10b      	bne.n	800dbbe <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	689b      	ldr	r3, [r3, #8]
 800dbaa:	f043 0206 	orr.w	r2, r3, #6
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	f043 0220 	orr.w	r2, r3, #32
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3710      	adds	r7, #16
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dbca:	b004      	add	sp, #16
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop
 800dbd0:	ffbdffbf 	.word	0xffbdffbf

0800dbd4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b087      	sub	sp, #28
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dbe2:	79fb      	ldrb	r3, [r7, #7]
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d165      	bne.n	800dcb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	4a41      	ldr	r2, [pc, #260]	; (800dcf0 <USB_SetTurnaroundTime+0x11c>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d906      	bls.n	800dbfe <USB_SetTurnaroundTime+0x2a>
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	4a40      	ldr	r2, [pc, #256]	; (800dcf4 <USB_SetTurnaroundTime+0x120>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d802      	bhi.n	800dbfe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dbf8:	230f      	movs	r3, #15
 800dbfa:	617b      	str	r3, [r7, #20]
 800dbfc:	e062      	b.n	800dcc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	4a3c      	ldr	r2, [pc, #240]	; (800dcf4 <USB_SetTurnaroundTime+0x120>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d906      	bls.n	800dc14 <USB_SetTurnaroundTime+0x40>
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	4a3b      	ldr	r2, [pc, #236]	; (800dcf8 <USB_SetTurnaroundTime+0x124>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d802      	bhi.n	800dc14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dc0e:	230e      	movs	r3, #14
 800dc10:	617b      	str	r3, [r7, #20]
 800dc12:	e057      	b.n	800dcc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	4a38      	ldr	r2, [pc, #224]	; (800dcf8 <USB_SetTurnaroundTime+0x124>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d906      	bls.n	800dc2a <USB_SetTurnaroundTime+0x56>
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	4a37      	ldr	r2, [pc, #220]	; (800dcfc <USB_SetTurnaroundTime+0x128>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d802      	bhi.n	800dc2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dc24:	230d      	movs	r3, #13
 800dc26:	617b      	str	r3, [r7, #20]
 800dc28:	e04c      	b.n	800dcc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	4a33      	ldr	r2, [pc, #204]	; (800dcfc <USB_SetTurnaroundTime+0x128>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d906      	bls.n	800dc40 <USB_SetTurnaroundTime+0x6c>
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	4a32      	ldr	r2, [pc, #200]	; (800dd00 <USB_SetTurnaroundTime+0x12c>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d802      	bhi.n	800dc40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800dc3a:	230c      	movs	r3, #12
 800dc3c:	617b      	str	r3, [r7, #20]
 800dc3e:	e041      	b.n	800dcc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	4a2f      	ldr	r2, [pc, #188]	; (800dd00 <USB_SetTurnaroundTime+0x12c>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d906      	bls.n	800dc56 <USB_SetTurnaroundTime+0x82>
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	4a2e      	ldr	r2, [pc, #184]	; (800dd04 <USB_SetTurnaroundTime+0x130>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d802      	bhi.n	800dc56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dc50:	230b      	movs	r3, #11
 800dc52:	617b      	str	r3, [r7, #20]
 800dc54:	e036      	b.n	800dcc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	4a2a      	ldr	r2, [pc, #168]	; (800dd04 <USB_SetTurnaroundTime+0x130>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d906      	bls.n	800dc6c <USB_SetTurnaroundTime+0x98>
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	4a29      	ldr	r2, [pc, #164]	; (800dd08 <USB_SetTurnaroundTime+0x134>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d802      	bhi.n	800dc6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dc66:	230a      	movs	r3, #10
 800dc68:	617b      	str	r3, [r7, #20]
 800dc6a:	e02b      	b.n	800dcc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	4a26      	ldr	r2, [pc, #152]	; (800dd08 <USB_SetTurnaroundTime+0x134>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d906      	bls.n	800dc82 <USB_SetTurnaroundTime+0xae>
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	4a25      	ldr	r2, [pc, #148]	; (800dd0c <USB_SetTurnaroundTime+0x138>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d802      	bhi.n	800dc82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dc7c:	2309      	movs	r3, #9
 800dc7e:	617b      	str	r3, [r7, #20]
 800dc80:	e020      	b.n	800dcc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	4a21      	ldr	r2, [pc, #132]	; (800dd0c <USB_SetTurnaroundTime+0x138>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d906      	bls.n	800dc98 <USB_SetTurnaroundTime+0xc4>
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	4a20      	ldr	r2, [pc, #128]	; (800dd10 <USB_SetTurnaroundTime+0x13c>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d802      	bhi.n	800dc98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dc92:	2308      	movs	r3, #8
 800dc94:	617b      	str	r3, [r7, #20]
 800dc96:	e015      	b.n	800dcc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	4a1d      	ldr	r2, [pc, #116]	; (800dd10 <USB_SetTurnaroundTime+0x13c>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d906      	bls.n	800dcae <USB_SetTurnaroundTime+0xda>
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	4a1c      	ldr	r2, [pc, #112]	; (800dd14 <USB_SetTurnaroundTime+0x140>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d802      	bhi.n	800dcae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dca8:	2307      	movs	r3, #7
 800dcaa:	617b      	str	r3, [r7, #20]
 800dcac:	e00a      	b.n	800dcc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dcae:	2306      	movs	r3, #6
 800dcb0:	617b      	str	r3, [r7, #20]
 800dcb2:	e007      	b.n	800dcc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dcb4:	79fb      	ldrb	r3, [r7, #7]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d102      	bne.n	800dcc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800dcba:	2309      	movs	r3, #9
 800dcbc:	617b      	str	r3, [r7, #20]
 800dcbe:	e001      	b.n	800dcc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dcc0:	2309      	movs	r3, #9
 800dcc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	68db      	ldr	r3, [r3, #12]
 800dcc8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	68da      	ldr	r2, [r3, #12]
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	029b      	lsls	r3, r3, #10
 800dcd8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800dcdc:	431a      	orrs	r2, r3
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dce2:	2300      	movs	r3, #0
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	371c      	adds	r7, #28
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr
 800dcf0:	00d8acbf 	.word	0x00d8acbf
 800dcf4:	00e4e1bf 	.word	0x00e4e1bf
 800dcf8:	00f423ff 	.word	0x00f423ff
 800dcfc:	0106737f 	.word	0x0106737f
 800dd00:	011a499f 	.word	0x011a499f
 800dd04:	01312cff 	.word	0x01312cff
 800dd08:	014ca43f 	.word	0x014ca43f
 800dd0c:	016e35ff 	.word	0x016e35ff
 800dd10:	01a6ab1f 	.word	0x01a6ab1f
 800dd14:	01e847ff 	.word	0x01e847ff

0800dd18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	689b      	ldr	r3, [r3, #8]
 800dd24:	f043 0201 	orr.w	r2, r3, #1
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	370c      	adds	r7, #12
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b083      	sub	sp, #12
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	689b      	ldr	r3, [r3, #8]
 800dd46:	f023 0201 	bic.w	r2, r3, #1
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dd4e:	2300      	movs	r3, #0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr

0800dd5c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	460b      	mov	r3, r1
 800dd66:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dd74:	78fb      	ldrb	r3, [r7, #3]
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d106      	bne.n	800dd88 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	60da      	str	r2, [r3, #12]
 800dd86:	e00b      	b.n	800dda0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800dd88:	78fb      	ldrb	r3, [r7, #3]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d106      	bne.n	800dd9c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	60da      	str	r2, [r3, #12]
 800dd9a:	e001      	b.n	800dda0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	e003      	b.n	800dda8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800dda0:	2032      	movs	r0, #50	; 0x32
 800dda2:	f7f4 fa93 	bl	80022cc <HAL_Delay>

  return HAL_OK;
 800dda6:	2300      	movs	r3, #0
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ddb0:	b084      	sub	sp, #16
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b086      	sub	sp, #24
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ddbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ddca:	2300      	movs	r3, #0
 800ddcc:	613b      	str	r3, [r7, #16]
 800ddce:	e009      	b.n	800dde4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	3340      	adds	r3, #64	; 0x40
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	4413      	add	r3, r2
 800ddda:	2200      	movs	r2, #0
 800dddc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	3301      	adds	r3, #1
 800dde2:	613b      	str	r3, [r7, #16]
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	2b0e      	cmp	r3, #14
 800dde8:	d9f2      	bls.n	800ddd0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ddea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d11c      	bne.n	800de2a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ddfe:	f043 0302 	orr.w	r3, r3, #2
 800de02:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de08:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	601a      	str	r2, [r3, #0]
 800de28:	e005      	b.n	800de36 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de3c:	461a      	mov	r2, r3
 800de3e:	2300      	movs	r3, #0
 800de40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de48:	4619      	mov	r1, r3
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de50:	461a      	mov	r2, r3
 800de52:	680b      	ldr	r3, [r1, #0]
 800de54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800de56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d10c      	bne.n	800de76 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800de5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d104      	bne.n	800de6c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800de62:	2100      	movs	r1, #0
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 f949 	bl	800e0fc <USB_SetDevSpeed>
 800de6a:	e008      	b.n	800de7e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800de6c:	2101      	movs	r1, #1
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f000 f944 	bl	800e0fc <USB_SetDevSpeed>
 800de74:	e003      	b.n	800de7e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800de76:	2103      	movs	r1, #3
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 f93f 	bl	800e0fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800de7e:	2110      	movs	r1, #16
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f8f3 	bl	800e06c <USB_FlushTxFifo>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800de8c:	2301      	movs	r3, #1
 800de8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f911 	bl	800e0b8 <USB_FlushRxFifo>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d001      	beq.n	800dea0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800de9c:	2301      	movs	r3, #1
 800de9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dea6:	461a      	mov	r2, r3
 800dea8:	2300      	movs	r3, #0
 800deaa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deb2:	461a      	mov	r2, r3
 800deb4:	2300      	movs	r3, #0
 800deb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800debe:	461a      	mov	r2, r3
 800dec0:	2300      	movs	r3, #0
 800dec2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dec4:	2300      	movs	r3, #0
 800dec6:	613b      	str	r3, [r7, #16]
 800dec8:	e043      	b.n	800df52 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	015a      	lsls	r2, r3, #5
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	4413      	add	r3, r2
 800ded2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dedc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dee0:	d118      	bne.n	800df14 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10a      	bne.n	800defe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	015a      	lsls	r2, r3, #5
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	4413      	add	r3, r2
 800def0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800def4:	461a      	mov	r2, r3
 800def6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800defa:	6013      	str	r3, [r2, #0]
 800defc:	e013      	b.n	800df26 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	015a      	lsls	r2, r3, #5
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	4413      	add	r3, r2
 800df06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df0a:	461a      	mov	r2, r3
 800df0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800df10:	6013      	str	r3, [r2, #0]
 800df12:	e008      	b.n	800df26 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	015a      	lsls	r2, r3, #5
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	4413      	add	r3, r2
 800df1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df20:	461a      	mov	r2, r3
 800df22:	2300      	movs	r3, #0
 800df24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	015a      	lsls	r2, r3, #5
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	4413      	add	r3, r2
 800df2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df32:	461a      	mov	r2, r3
 800df34:	2300      	movs	r3, #0
 800df36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	015a      	lsls	r2, r3, #5
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	4413      	add	r3, r2
 800df40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df44:	461a      	mov	r2, r3
 800df46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800df4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	3301      	adds	r3, #1
 800df50:	613b      	str	r3, [r7, #16]
 800df52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df54:	693a      	ldr	r2, [r7, #16]
 800df56:	429a      	cmp	r2, r3
 800df58:	d3b7      	bcc.n	800deca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df5a:	2300      	movs	r3, #0
 800df5c:	613b      	str	r3, [r7, #16]
 800df5e:	e043      	b.n	800dfe8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	015a      	lsls	r2, r3, #5
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	4413      	add	r3, r2
 800df68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df76:	d118      	bne.n	800dfaa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d10a      	bne.n	800df94 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	015a      	lsls	r2, r3, #5
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	4413      	add	r3, r2
 800df86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df8a:	461a      	mov	r2, r3
 800df8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800df90:	6013      	str	r3, [r2, #0]
 800df92:	e013      	b.n	800dfbc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	015a      	lsls	r2, r3, #5
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	4413      	add	r3, r2
 800df9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dfa6:	6013      	str	r3, [r2, #0]
 800dfa8:	e008      	b.n	800dfbc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	015a      	lsls	r2, r3, #5
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	4413      	add	r3, r2
 800dfb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	2300      	movs	r3, #0
 800dfba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	015a      	lsls	r2, r3, #5
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfc8:	461a      	mov	r2, r3
 800dfca:	2300      	movs	r3, #0
 800dfcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	015a      	lsls	r2, r3, #5
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfda:	461a      	mov	r2, r3
 800dfdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dfe0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	613b      	str	r3, [r7, #16]
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d3b7      	bcc.n	800df60 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dff6:	691b      	ldr	r3, [r3, #16]
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dffe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e002:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e010:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e014:	2b00      	cmp	r3, #0
 800e016:	d105      	bne.n	800e024 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	699b      	ldr	r3, [r3, #24]
 800e01c:	f043 0210 	orr.w	r2, r3, #16
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	699a      	ldr	r2, [r3, #24]
 800e028:	4b0e      	ldr	r3, [pc, #56]	; (800e064 <USB_DevInit+0x2b4>)
 800e02a:	4313      	orrs	r3, r2
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e032:	2b00      	cmp	r3, #0
 800e034:	d005      	beq.n	800e042 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	699b      	ldr	r3, [r3, #24]
 800e03a:	f043 0208 	orr.w	r2, r3, #8
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e044:	2b01      	cmp	r3, #1
 800e046:	d105      	bne.n	800e054 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	699a      	ldr	r2, [r3, #24]
 800e04c:	4b06      	ldr	r3, [pc, #24]	; (800e068 <USB_DevInit+0x2b8>)
 800e04e:	4313      	orrs	r3, r2
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e054:	7dfb      	ldrb	r3, [r7, #23]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3718      	adds	r7, #24
 800e05a:	46bd      	mov	sp, r7
 800e05c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e060:	b004      	add	sp, #16
 800e062:	4770      	bx	lr
 800e064:	803c3800 	.word	0x803c3800
 800e068:	40000004 	.word	0x40000004

0800e06c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e076:	2300      	movs	r3, #0
 800e078:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	019b      	lsls	r3, r3, #6
 800e07e:	f043 0220 	orr.w	r2, r3, #32
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	3301      	adds	r3, #1
 800e08a:	60fb      	str	r3, [r7, #12]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	4a09      	ldr	r2, [pc, #36]	; (800e0b4 <USB_FlushTxFifo+0x48>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d901      	bls.n	800e098 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e094:	2303      	movs	r3, #3
 800e096:	e006      	b.n	800e0a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	691b      	ldr	r3, [r3, #16]
 800e09c:	f003 0320 	and.w	r3, r3, #32
 800e0a0:	2b20      	cmp	r3, #32
 800e0a2:	d0f0      	beq.n	800e086 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3714      	adds	r7, #20
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
 800e0b4:	00030d40 	.word	0x00030d40

0800e0b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2210      	movs	r2, #16
 800e0c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	60fb      	str	r3, [r7, #12]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	4a09      	ldr	r2, [pc, #36]	; (800e0f8 <USB_FlushRxFifo+0x40>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d901      	bls.n	800e0dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e0d8:	2303      	movs	r3, #3
 800e0da:	e006      	b.n	800e0ea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	691b      	ldr	r3, [r3, #16]
 800e0e0:	f003 0310 	and.w	r3, r3, #16
 800e0e4:	2b10      	cmp	r3, #16
 800e0e6:	d0f0      	beq.n	800e0ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e0e8:	2300      	movs	r3, #0
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3714      	adds	r7, #20
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	00030d40 	.word	0x00030d40

0800e0fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	460b      	mov	r3, r1
 800e106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	78fb      	ldrb	r3, [r7, #3]
 800e116:	68f9      	ldr	r1, [r7, #12]
 800e118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e11c:	4313      	orrs	r3, r2
 800e11e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e120:	2300      	movs	r3, #0
}
 800e122:	4618      	mov	r0, r3
 800e124:	3714      	adds	r7, #20
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr

0800e12e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e12e:	b480      	push	{r7}
 800e130:	b087      	sub	sp, #28
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	f003 0306 	and.w	r3, r3, #6
 800e146:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d102      	bne.n	800e154 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e14e:	2300      	movs	r3, #0
 800e150:	75fb      	strb	r3, [r7, #23]
 800e152:	e00a      	b.n	800e16a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2b02      	cmp	r3, #2
 800e158:	d002      	beq.n	800e160 <USB_GetDevSpeed+0x32>
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2b06      	cmp	r3, #6
 800e15e:	d102      	bne.n	800e166 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e160:	2302      	movs	r3, #2
 800e162:	75fb      	strb	r3, [r7, #23]
 800e164:	e001      	b.n	800e16a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e166:	230f      	movs	r3, #15
 800e168:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	371c      	adds	r7, #28
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	785b      	ldrb	r3, [r3, #1]
 800e190:	2b01      	cmp	r3, #1
 800e192:	d139      	bne.n	800e208 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e19a:	69da      	ldr	r2, [r3, #28]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	f003 030f 	and.w	r3, r3, #15
 800e1a4:	2101      	movs	r1, #1
 800e1a6:	fa01 f303 	lsl.w	r3, r1, r3
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	68f9      	ldr	r1, [r7, #12]
 800e1ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	015a      	lsls	r2, r3, #5
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	4413      	add	r3, r2
 800e1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d153      	bne.n	800e274 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	015a      	lsls	r2, r3, #5
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	689b      	ldr	r3, [r3, #8]
 800e1de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	78db      	ldrb	r3, [r3, #3]
 800e1e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e1e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	059b      	lsls	r3, r3, #22
 800e1ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e1f0:	431a      	orrs	r2, r3
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	0159      	lsls	r1, r3, #5
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	440b      	add	r3, r1
 800e1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1fe:	4619      	mov	r1, r3
 800e200:	4b20      	ldr	r3, [pc, #128]	; (800e284 <USB_ActivateEndpoint+0x10c>)
 800e202:	4313      	orrs	r3, r2
 800e204:	600b      	str	r3, [r1, #0]
 800e206:	e035      	b.n	800e274 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e20e:	69da      	ldr	r2, [r3, #28]
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	f003 030f 	and.w	r3, r3, #15
 800e218:	2101      	movs	r1, #1
 800e21a:	fa01 f303 	lsl.w	r3, r1, r3
 800e21e:	041b      	lsls	r3, r3, #16
 800e220:	68f9      	ldr	r1, [r7, #12]
 800e222:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e226:	4313      	orrs	r3, r2
 800e228:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	015a      	lsls	r2, r3, #5
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	4413      	add	r3, r2
 800e232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d119      	bne.n	800e274 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	015a      	lsls	r2, r3, #5
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	4413      	add	r3, r2
 800e248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	689b      	ldr	r3, [r3, #8]
 800e252:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	78db      	ldrb	r3, [r3, #3]
 800e25a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e25c:	430b      	orrs	r3, r1
 800e25e:	431a      	orrs	r2, r3
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	0159      	lsls	r1, r3, #5
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	440b      	add	r3, r1
 800e268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e26c:	4619      	mov	r1, r3
 800e26e:	4b05      	ldr	r3, [pc, #20]	; (800e284 <USB_ActivateEndpoint+0x10c>)
 800e270:	4313      	orrs	r3, r2
 800e272:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e274:	2300      	movs	r3, #0
}
 800e276:	4618      	mov	r0, r3
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	10008000 	.word	0x10008000

0800e288 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	785b      	ldrb	r3, [r3, #1]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d161      	bne.n	800e368 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	015a      	lsls	r2, r3, #5
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e2b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e2ba:	d11f      	bne.n	800e2fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	015a      	lsls	r2, r3, #5
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	68ba      	ldr	r2, [r7, #8]
 800e2cc:	0151      	lsls	r1, r2, #5
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	440a      	add	r2, r1
 800e2d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e2da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	015a      	lsls	r2, r3, #5
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	68ba      	ldr	r2, [r7, #8]
 800e2ec:	0151      	lsls	r1, r2, #5
 800e2ee:	68fa      	ldr	r2, [r7, #12]
 800e2f0:	440a      	add	r2, r1
 800e2f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e2fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	f003 030f 	and.w	r3, r3, #15
 800e30c:	2101      	movs	r1, #1
 800e30e:	fa01 f303 	lsl.w	r3, r1, r3
 800e312:	b29b      	uxth	r3, r3
 800e314:	43db      	mvns	r3, r3
 800e316:	68f9      	ldr	r1, [r7, #12]
 800e318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e31c:	4013      	ands	r3, r2
 800e31e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e326:	69da      	ldr	r2, [r3, #28]
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	f003 030f 	and.w	r3, r3, #15
 800e330:	2101      	movs	r1, #1
 800e332:	fa01 f303 	lsl.w	r3, r1, r3
 800e336:	b29b      	uxth	r3, r3
 800e338:	43db      	mvns	r3, r3
 800e33a:	68f9      	ldr	r1, [r7, #12]
 800e33c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e340:	4013      	ands	r3, r2
 800e342:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	015a      	lsls	r2, r3, #5
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	4413      	add	r3, r2
 800e34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	0159      	lsls	r1, r3, #5
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	440b      	add	r3, r1
 800e35a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e35e:	4619      	mov	r1, r3
 800e360:	4b35      	ldr	r3, [pc, #212]	; (800e438 <USB_DeactivateEndpoint+0x1b0>)
 800e362:	4013      	ands	r3, r2
 800e364:	600b      	str	r3, [r1, #0]
 800e366:	e060      	b.n	800e42a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	015a      	lsls	r2, r3, #5
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	4413      	add	r3, r2
 800e370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e37a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e37e:	d11f      	bne.n	800e3c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	015a      	lsls	r2, r3, #5
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	4413      	add	r3, r2
 800e388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	0151      	lsls	r1, r2, #5
 800e392:	68fa      	ldr	r2, [r7, #12]
 800e394:	440a      	add	r2, r1
 800e396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e39a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e39e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	015a      	lsls	r2, r3, #5
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	4413      	add	r3, r2
 800e3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	68ba      	ldr	r2, [r7, #8]
 800e3b0:	0151      	lsls	r1, r2, #5
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	440a      	add	r2, r1
 800e3b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e3be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	f003 030f 	and.w	r3, r3, #15
 800e3d0:	2101      	movs	r1, #1
 800e3d2:	fa01 f303 	lsl.w	r3, r1, r3
 800e3d6:	041b      	lsls	r3, r3, #16
 800e3d8:	43db      	mvns	r3, r3
 800e3da:	68f9      	ldr	r1, [r7, #12]
 800e3dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3ea:	69da      	ldr	r2, [r3, #28]
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	f003 030f 	and.w	r3, r3, #15
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	fa01 f303 	lsl.w	r3, r1, r3
 800e3fa:	041b      	lsls	r3, r3, #16
 800e3fc:	43db      	mvns	r3, r3
 800e3fe:	68f9      	ldr	r1, [r7, #12]
 800e400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e404:	4013      	ands	r3, r2
 800e406:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	015a      	lsls	r2, r3, #5
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	4413      	add	r3, r2
 800e410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	0159      	lsls	r1, r3, #5
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	440b      	add	r3, r1
 800e41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e422:	4619      	mov	r1, r3
 800e424:	4b05      	ldr	r3, [pc, #20]	; (800e43c <USB_DeactivateEndpoint+0x1b4>)
 800e426:	4013      	ands	r3, r2
 800e428:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e42a:	2300      	movs	r3, #0
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3714      	adds	r7, #20
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr
 800e438:	ec337800 	.word	0xec337800
 800e43c:	eff37800 	.word	0xeff37800

0800e440 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b08a      	sub	sp, #40	; 0x28
 800e444:	af02      	add	r7, sp, #8
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	4613      	mov	r3, r2
 800e44c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	785b      	ldrb	r3, [r3, #1]
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	f040 8163 	bne.w	800e728 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	695b      	ldr	r3, [r3, #20]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d132      	bne.n	800e4d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	015a      	lsls	r2, r3, #5
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	4413      	add	r3, r2
 800e472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e476:	691a      	ldr	r2, [r3, #16]
 800e478:	69bb      	ldr	r3, [r7, #24]
 800e47a:	0159      	lsls	r1, r3, #5
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	440b      	add	r3, r1
 800e480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e484:	4619      	mov	r1, r3
 800e486:	4ba5      	ldr	r3, [pc, #660]	; (800e71c <USB_EPStartXfer+0x2dc>)
 800e488:	4013      	ands	r3, r2
 800e48a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	015a      	lsls	r2, r3, #5
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	4413      	add	r3, r2
 800e494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e498:	691b      	ldr	r3, [r3, #16]
 800e49a:	69ba      	ldr	r2, [r7, #24]
 800e49c:	0151      	lsls	r1, r2, #5
 800e49e:	69fa      	ldr	r2, [r7, #28]
 800e4a0:	440a      	add	r2, r1
 800e4a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e4aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	015a      	lsls	r2, r3, #5
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4b8:	691a      	ldr	r2, [r3, #16]
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	0159      	lsls	r1, r3, #5
 800e4be:	69fb      	ldr	r3, [r7, #28]
 800e4c0:	440b      	add	r3, r1
 800e4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	4b95      	ldr	r3, [pc, #596]	; (800e720 <USB_EPStartXfer+0x2e0>)
 800e4ca:	4013      	ands	r3, r2
 800e4cc:	610b      	str	r3, [r1, #16]
 800e4ce:	e074      	b.n	800e5ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	015a      	lsls	r2, r3, #5
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4dc:	691a      	ldr	r2, [r3, #16]
 800e4de:	69bb      	ldr	r3, [r7, #24]
 800e4e0:	0159      	lsls	r1, r3, #5
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	440b      	add	r3, r1
 800e4e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4b8c      	ldr	r3, [pc, #560]	; (800e720 <USB_EPStartXfer+0x2e0>)
 800e4ee:	4013      	ands	r3, r2
 800e4f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e4f2:	69bb      	ldr	r3, [r7, #24]
 800e4f4:	015a      	lsls	r2, r3, #5
 800e4f6:	69fb      	ldr	r3, [r7, #28]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4fe:	691a      	ldr	r2, [r3, #16]
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	0159      	lsls	r1, r3, #5
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	440b      	add	r3, r1
 800e508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e50c:	4619      	mov	r1, r3
 800e50e:	4b83      	ldr	r3, [pc, #524]	; (800e71c <USB_EPStartXfer+0x2dc>)
 800e510:	4013      	ands	r3, r2
 800e512:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e514:	69bb      	ldr	r3, [r7, #24]
 800e516:	015a      	lsls	r2, r3, #5
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	4413      	add	r3, r2
 800e51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e520:	691a      	ldr	r2, [r3, #16]
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	6959      	ldr	r1, [r3, #20]
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	440b      	add	r3, r1
 800e52c:	1e59      	subs	r1, r3, #1
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	fbb1 f3f3 	udiv	r3, r1, r3
 800e536:	04d9      	lsls	r1, r3, #19
 800e538:	4b7a      	ldr	r3, [pc, #488]	; (800e724 <USB_EPStartXfer+0x2e4>)
 800e53a:	400b      	ands	r3, r1
 800e53c:	69b9      	ldr	r1, [r7, #24]
 800e53e:	0148      	lsls	r0, r1, #5
 800e540:	69f9      	ldr	r1, [r7, #28]
 800e542:	4401      	add	r1, r0
 800e544:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e548:	4313      	orrs	r3, r2
 800e54a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	015a      	lsls	r2, r3, #5
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	4413      	add	r3, r2
 800e554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e558:	691a      	ldr	r2, [r3, #16]
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	695b      	ldr	r3, [r3, #20]
 800e55e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e562:	69b9      	ldr	r1, [r7, #24]
 800e564:	0148      	lsls	r0, r1, #5
 800e566:	69f9      	ldr	r1, [r7, #28]
 800e568:	4401      	add	r1, r0
 800e56a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e56e:	4313      	orrs	r3, r2
 800e570:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	78db      	ldrb	r3, [r3, #3]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d11f      	bne.n	800e5ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e57a:	69bb      	ldr	r3, [r7, #24]
 800e57c:	015a      	lsls	r2, r3, #5
 800e57e:	69fb      	ldr	r3, [r7, #28]
 800e580:	4413      	add	r3, r2
 800e582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e586:	691b      	ldr	r3, [r3, #16]
 800e588:	69ba      	ldr	r2, [r7, #24]
 800e58a:	0151      	lsls	r1, r2, #5
 800e58c:	69fa      	ldr	r2, [r7, #28]
 800e58e:	440a      	add	r2, r1
 800e590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e594:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e598:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	015a      	lsls	r2, r3, #5
 800e59e:	69fb      	ldr	r3, [r7, #28]
 800e5a0:	4413      	add	r3, r2
 800e5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5a6:	691b      	ldr	r3, [r3, #16]
 800e5a8:	69ba      	ldr	r2, [r7, #24]
 800e5aa:	0151      	lsls	r1, r2, #5
 800e5ac:	69fa      	ldr	r2, [r7, #28]
 800e5ae:	440a      	add	r2, r1
 800e5b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e5b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e5ba:	79fb      	ldrb	r3, [r7, #7]
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d14b      	bne.n	800e658 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	691b      	ldr	r3, [r3, #16]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d009      	beq.n	800e5dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	015a      	lsls	r2, r3, #5
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	691b      	ldr	r3, [r3, #16]
 800e5da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	78db      	ldrb	r3, [r3, #3]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d128      	bne.n	800e636 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e5e4:	69fb      	ldr	r3, [r7, #28]
 800e5e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d110      	bne.n	800e616 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e5f4:	69bb      	ldr	r3, [r7, #24]
 800e5f6:	015a      	lsls	r2, r3, #5
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	4413      	add	r3, r2
 800e5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	69ba      	ldr	r2, [r7, #24]
 800e604:	0151      	lsls	r1, r2, #5
 800e606:	69fa      	ldr	r2, [r7, #28]
 800e608:	440a      	add	r2, r1
 800e60a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e60e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e612:	6013      	str	r3, [r2, #0]
 800e614:	e00f      	b.n	800e636 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	015a      	lsls	r2, r3, #5
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	4413      	add	r3, r2
 800e61e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	69ba      	ldr	r2, [r7, #24]
 800e626:	0151      	lsls	r1, r2, #5
 800e628:	69fa      	ldr	r2, [r7, #28]
 800e62a:	440a      	add	r2, r1
 800e62c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e634:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	015a      	lsls	r2, r3, #5
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	4413      	add	r3, r2
 800e63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	69ba      	ldr	r2, [r7, #24]
 800e646:	0151      	lsls	r1, r2, #5
 800e648:	69fa      	ldr	r2, [r7, #28]
 800e64a:	440a      	add	r2, r1
 800e64c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e650:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e654:	6013      	str	r3, [r2, #0]
 800e656:	e133      	b.n	800e8c0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e658:	69bb      	ldr	r3, [r7, #24]
 800e65a:	015a      	lsls	r2, r3, #5
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	4413      	add	r3, r2
 800e660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	69ba      	ldr	r2, [r7, #24]
 800e668:	0151      	lsls	r1, r2, #5
 800e66a:	69fa      	ldr	r2, [r7, #28]
 800e66c:	440a      	add	r2, r1
 800e66e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e672:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e676:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	78db      	ldrb	r3, [r3, #3]
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d015      	beq.n	800e6ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	695b      	ldr	r3, [r3, #20]
 800e684:	2b00      	cmp	r3, #0
 800e686:	f000 811b 	beq.w	800e8c0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	f003 030f 	and.w	r3, r3, #15
 800e69a:	2101      	movs	r1, #1
 800e69c:	fa01 f303 	lsl.w	r3, r1, r3
 800e6a0:	69f9      	ldr	r1, [r7, #28]
 800e6a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	634b      	str	r3, [r1, #52]	; 0x34
 800e6aa:	e109      	b.n	800e8c0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d110      	bne.n	800e6de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e6bc:	69bb      	ldr	r3, [r7, #24]
 800e6be:	015a      	lsls	r2, r3, #5
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	4413      	add	r3, r2
 800e6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	69ba      	ldr	r2, [r7, #24]
 800e6cc:	0151      	lsls	r1, r2, #5
 800e6ce:	69fa      	ldr	r2, [r7, #28]
 800e6d0:	440a      	add	r2, r1
 800e6d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e6da:	6013      	str	r3, [r2, #0]
 800e6dc:	e00f      	b.n	800e6fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	015a      	lsls	r2, r3, #5
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	69ba      	ldr	r2, [r7, #24]
 800e6ee:	0151      	lsls	r1, r2, #5
 800e6f0:	69fa      	ldr	r2, [r7, #28]
 800e6f2:	440a      	add	r2, r1
 800e6f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	68d9      	ldr	r1, [r3, #12]
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	781a      	ldrb	r2, [r3, #0]
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	695b      	ldr	r3, [r3, #20]
 800e70a:	b298      	uxth	r0, r3
 800e70c:	79fb      	ldrb	r3, [r7, #7]
 800e70e:	9300      	str	r3, [sp, #0]
 800e710:	4603      	mov	r3, r0
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f000 fa38 	bl	800eb88 <USB_WritePacket>
 800e718:	e0d2      	b.n	800e8c0 <USB_EPStartXfer+0x480>
 800e71a:	bf00      	nop
 800e71c:	e007ffff 	.word	0xe007ffff
 800e720:	fff80000 	.word	0xfff80000
 800e724:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	015a      	lsls	r2, r3, #5
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	4413      	add	r3, r2
 800e730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e734:	691a      	ldr	r2, [r3, #16]
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	0159      	lsls	r1, r3, #5
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	440b      	add	r3, r1
 800e73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e742:	4619      	mov	r1, r3
 800e744:	4b61      	ldr	r3, [pc, #388]	; (800e8cc <USB_EPStartXfer+0x48c>)
 800e746:	4013      	ands	r3, r2
 800e748:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	015a      	lsls	r2, r3, #5
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	4413      	add	r3, r2
 800e752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e756:	691a      	ldr	r2, [r3, #16]
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	0159      	lsls	r1, r3, #5
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	440b      	add	r3, r1
 800e760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e764:	4619      	mov	r1, r3
 800e766:	4b5a      	ldr	r3, [pc, #360]	; (800e8d0 <USB_EPStartXfer+0x490>)
 800e768:	4013      	ands	r3, r2
 800e76a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	695b      	ldr	r3, [r3, #20]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d123      	bne.n	800e7bc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	015a      	lsls	r2, r3, #5
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	4413      	add	r3, r2
 800e77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e780:	691a      	ldr	r2, [r3, #16]
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	689b      	ldr	r3, [r3, #8]
 800e786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e78a:	69b9      	ldr	r1, [r7, #24]
 800e78c:	0148      	lsls	r0, r1, #5
 800e78e:	69f9      	ldr	r1, [r7, #28]
 800e790:	4401      	add	r1, r0
 800e792:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e796:	4313      	orrs	r3, r2
 800e798:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	015a      	lsls	r2, r3, #5
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7a6:	691b      	ldr	r3, [r3, #16]
 800e7a8:	69ba      	ldr	r2, [r7, #24]
 800e7aa:	0151      	lsls	r1, r2, #5
 800e7ac:	69fa      	ldr	r2, [r7, #28]
 800e7ae:	440a      	add	r2, r1
 800e7b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e7b8:	6113      	str	r3, [r2, #16]
 800e7ba:	e033      	b.n	800e824 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	695a      	ldr	r2, [r3, #20]
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	689b      	ldr	r3, [r3, #8]
 800e7c4:	4413      	add	r3, r2
 800e7c6:	1e5a      	subs	r2, r3, #1
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	689b      	ldr	r3, [r3, #8]
 800e7cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7d0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	015a      	lsls	r2, r3, #5
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	4413      	add	r3, r2
 800e7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7de:	691a      	ldr	r2, [r3, #16]
 800e7e0:	8afb      	ldrh	r3, [r7, #22]
 800e7e2:	04d9      	lsls	r1, r3, #19
 800e7e4:	4b3b      	ldr	r3, [pc, #236]	; (800e8d4 <USB_EPStartXfer+0x494>)
 800e7e6:	400b      	ands	r3, r1
 800e7e8:	69b9      	ldr	r1, [r7, #24]
 800e7ea:	0148      	lsls	r0, r1, #5
 800e7ec:	69f9      	ldr	r1, [r7, #28]
 800e7ee:	4401      	add	r1, r0
 800e7f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	015a      	lsls	r2, r3, #5
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	4413      	add	r3, r2
 800e800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e804:	691a      	ldr	r2, [r3, #16]
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	8af9      	ldrh	r1, [r7, #22]
 800e80c:	fb01 f303 	mul.w	r3, r1, r3
 800e810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e814:	69b9      	ldr	r1, [r7, #24]
 800e816:	0148      	lsls	r0, r1, #5
 800e818:	69f9      	ldr	r1, [r7, #28]
 800e81a:	4401      	add	r1, r0
 800e81c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e820:	4313      	orrs	r3, r2
 800e822:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e824:	79fb      	ldrb	r3, [r7, #7]
 800e826:	2b01      	cmp	r3, #1
 800e828:	d10d      	bne.n	800e846 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	68db      	ldr	r3, [r3, #12]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d009      	beq.n	800e846 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	68d9      	ldr	r1, [r3, #12]
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	015a      	lsls	r2, r3, #5
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	4413      	add	r3, r2
 800e83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e842:	460a      	mov	r2, r1
 800e844:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	78db      	ldrb	r3, [r3, #3]
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d128      	bne.n	800e8a0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d110      	bne.n	800e880 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	015a      	lsls	r2, r3, #5
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	4413      	add	r3, r2
 800e866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	69ba      	ldr	r2, [r7, #24]
 800e86e:	0151      	lsls	r1, r2, #5
 800e870:	69fa      	ldr	r2, [r7, #28]
 800e872:	440a      	add	r2, r1
 800e874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e878:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e87c:	6013      	str	r3, [r2, #0]
 800e87e:	e00f      	b.n	800e8a0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	015a      	lsls	r2, r3, #5
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	4413      	add	r3, r2
 800e888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	69ba      	ldr	r2, [r7, #24]
 800e890:	0151      	lsls	r1, r2, #5
 800e892:	69fa      	ldr	r2, [r7, #28]
 800e894:	440a      	add	r2, r1
 800e896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e89a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e89e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	015a      	lsls	r2, r3, #5
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	69ba      	ldr	r2, [r7, #24]
 800e8b0:	0151      	lsls	r1, r2, #5
 800e8b2:	69fa      	ldr	r2, [r7, #28]
 800e8b4:	440a      	add	r2, r1
 800e8b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e8be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e8c0:	2300      	movs	r3, #0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3720      	adds	r7, #32
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	fff80000 	.word	0xfff80000
 800e8d0:	e007ffff 	.word	0xe007ffff
 800e8d4:	1ff80000 	.word	0x1ff80000

0800e8d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b087      	sub	sp, #28
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	4613      	mov	r3, r2
 800e8e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	785b      	ldrb	r3, [r3, #1]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	f040 80cd 	bne.w	800ea94 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	695b      	ldr	r3, [r3, #20]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d132      	bne.n	800e968 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	015a      	lsls	r2, r3, #5
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	4413      	add	r3, r2
 800e90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e90e:	691a      	ldr	r2, [r3, #16]
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	0159      	lsls	r1, r3, #5
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	440b      	add	r3, r1
 800e918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e91c:	4619      	mov	r1, r3
 800e91e:	4b98      	ldr	r3, [pc, #608]	; (800eb80 <USB_EP0StartXfer+0x2a8>)
 800e920:	4013      	ands	r3, r2
 800e922:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	015a      	lsls	r2, r3, #5
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	4413      	add	r3, r2
 800e92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e930:	691b      	ldr	r3, [r3, #16]
 800e932:	693a      	ldr	r2, [r7, #16]
 800e934:	0151      	lsls	r1, r2, #5
 800e936:	697a      	ldr	r2, [r7, #20]
 800e938:	440a      	add	r2, r1
 800e93a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e93e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e942:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	015a      	lsls	r2, r3, #5
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	4413      	add	r3, r2
 800e94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e950:	691a      	ldr	r2, [r3, #16]
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	0159      	lsls	r1, r3, #5
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	440b      	add	r3, r1
 800e95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e95e:	4619      	mov	r1, r3
 800e960:	4b88      	ldr	r3, [pc, #544]	; (800eb84 <USB_EP0StartXfer+0x2ac>)
 800e962:	4013      	ands	r3, r2
 800e964:	610b      	str	r3, [r1, #16]
 800e966:	e04e      	b.n	800ea06 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	015a      	lsls	r2, r3, #5
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	4413      	add	r3, r2
 800e970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e974:	691a      	ldr	r2, [r3, #16]
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	0159      	lsls	r1, r3, #5
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	440b      	add	r3, r1
 800e97e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e982:	4619      	mov	r1, r3
 800e984:	4b7f      	ldr	r3, [pc, #508]	; (800eb84 <USB_EP0StartXfer+0x2ac>)
 800e986:	4013      	ands	r3, r2
 800e988:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	015a      	lsls	r2, r3, #5
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	4413      	add	r3, r2
 800e992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e996:	691a      	ldr	r2, [r3, #16]
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	0159      	lsls	r1, r3, #5
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	440b      	add	r3, r1
 800e9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	4b76      	ldr	r3, [pc, #472]	; (800eb80 <USB_EP0StartXfer+0x2a8>)
 800e9a8:	4013      	ands	r3, r2
 800e9aa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	695a      	ldr	r2, [r3, #20]
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	689b      	ldr	r3, [r3, #8]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d903      	bls.n	800e9c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	689a      	ldr	r2, [r3, #8]
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	015a      	lsls	r2, r3, #5
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9cc:	691b      	ldr	r3, [r3, #16]
 800e9ce:	693a      	ldr	r2, [r7, #16]
 800e9d0:	0151      	lsls	r1, r2, #5
 800e9d2:	697a      	ldr	r2, [r7, #20]
 800e9d4:	440a      	add	r2, r1
 800e9d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e9de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	015a      	lsls	r2, r3, #5
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	4413      	add	r3, r2
 800e9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9ec:	691a      	ldr	r2, [r3, #16]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e9f6:	6939      	ldr	r1, [r7, #16]
 800e9f8:	0148      	lsls	r0, r1, #5
 800e9fa:	6979      	ldr	r1, [r7, #20]
 800e9fc:	4401      	add	r1, r0
 800e9fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ea02:	4313      	orrs	r3, r2
 800ea04:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ea06:	79fb      	ldrb	r3, [r7, #7]
 800ea08:	2b01      	cmp	r3, #1
 800ea0a:	d11e      	bne.n	800ea4a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	691b      	ldr	r3, [r3, #16]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d009      	beq.n	800ea28 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	015a      	lsls	r2, r3, #5
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	4413      	add	r3, r2
 800ea1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea20:	461a      	mov	r2, r3
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	691b      	ldr	r3, [r3, #16]
 800ea26:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	015a      	lsls	r2, r3, #5
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	4413      	add	r3, r2
 800ea30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	693a      	ldr	r2, [r7, #16]
 800ea38:	0151      	lsls	r1, r2, #5
 800ea3a:	697a      	ldr	r2, [r7, #20]
 800ea3c:	440a      	add	r2, r1
 800ea3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea46:	6013      	str	r3, [r2, #0]
 800ea48:	e092      	b.n	800eb70 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	015a      	lsls	r2, r3, #5
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	4413      	add	r3, r2
 800ea52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	693a      	ldr	r2, [r7, #16]
 800ea5a:	0151      	lsls	r1, r2, #5
 800ea5c:	697a      	ldr	r2, [r7, #20]
 800ea5e:	440a      	add	r2, r1
 800ea60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea68:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	695b      	ldr	r3, [r3, #20]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d07e      	beq.n	800eb70 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	f003 030f 	and.w	r3, r3, #15
 800ea82:	2101      	movs	r1, #1
 800ea84:	fa01 f303 	lsl.w	r3, r1, r3
 800ea88:	6979      	ldr	r1, [r7, #20]
 800ea8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	634b      	str	r3, [r1, #52]	; 0x34
 800ea92:	e06d      	b.n	800eb70 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	015a      	lsls	r2, r3, #5
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaa0:	691a      	ldr	r2, [r3, #16]
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	0159      	lsls	r1, r3, #5
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	440b      	add	r3, r1
 800eaaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaae:	4619      	mov	r1, r3
 800eab0:	4b34      	ldr	r3, [pc, #208]	; (800eb84 <USB_EP0StartXfer+0x2ac>)
 800eab2:	4013      	ands	r3, r2
 800eab4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	015a      	lsls	r2, r3, #5
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	4413      	add	r3, r2
 800eabe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eac2:	691a      	ldr	r2, [r3, #16]
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	0159      	lsls	r1, r3, #5
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	440b      	add	r3, r1
 800eacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ead0:	4619      	mov	r1, r3
 800ead2:	4b2b      	ldr	r3, [pc, #172]	; (800eb80 <USB_EP0StartXfer+0x2a8>)
 800ead4:	4013      	ands	r3, r2
 800ead6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	695b      	ldr	r3, [r3, #20]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d003      	beq.n	800eae8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	689a      	ldr	r2, [r3, #8]
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	015a      	lsls	r2, r3, #5
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	4413      	add	r3, r2
 800eaf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaf4:	691b      	ldr	r3, [r3, #16]
 800eaf6:	693a      	ldr	r2, [r7, #16]
 800eaf8:	0151      	lsls	r1, r2, #5
 800eafa:	697a      	ldr	r2, [r7, #20]
 800eafc:	440a      	add	r2, r1
 800eafe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	015a      	lsls	r2, r3, #5
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	4413      	add	r3, r2
 800eb10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb14:	691a      	ldr	r2, [r3, #16]
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	689b      	ldr	r3, [r3, #8]
 800eb1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb1e:	6939      	ldr	r1, [r7, #16]
 800eb20:	0148      	lsls	r0, r1, #5
 800eb22:	6979      	ldr	r1, [r7, #20]
 800eb24:	4401      	add	r1, r0
 800eb26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800eb2e:	79fb      	ldrb	r3, [r7, #7]
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d10d      	bne.n	800eb50 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d009      	beq.n	800eb50 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	68d9      	ldr	r1, [r3, #12]
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	015a      	lsls	r2, r3, #5
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	4413      	add	r3, r2
 800eb48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb4c:	460a      	mov	r2, r1
 800eb4e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	015a      	lsls	r2, r3, #5
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	4413      	add	r3, r2
 800eb58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	693a      	ldr	r2, [r7, #16]
 800eb60:	0151      	lsls	r1, r2, #5
 800eb62:	697a      	ldr	r2, [r7, #20]
 800eb64:	440a      	add	r2, r1
 800eb66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eb70:	2300      	movs	r3, #0
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	371c      	adds	r7, #28
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr
 800eb7e:	bf00      	nop
 800eb80:	e007ffff 	.word	0xe007ffff
 800eb84:	fff80000 	.word	0xfff80000

0800eb88 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b089      	sub	sp, #36	; 0x24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	4611      	mov	r1, r2
 800eb94:	461a      	mov	r2, r3
 800eb96:	460b      	mov	r3, r1
 800eb98:	71fb      	strb	r3, [r7, #7]
 800eb9a:	4613      	mov	r3, r2
 800eb9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800eba6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d11a      	bne.n	800ebe4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ebae:	88bb      	ldrh	r3, [r7, #4]
 800ebb0:	3303      	adds	r3, #3
 800ebb2:	089b      	lsrs	r3, r3, #2
 800ebb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	61bb      	str	r3, [r7, #24]
 800ebba:	e00f      	b.n	800ebdc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ebbc:	79fb      	ldrb	r3, [r7, #7]
 800ebbe:	031a      	lsls	r2, r3, #12
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebc8:	461a      	mov	r2, r3
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ebd6:	69bb      	ldr	r3, [r7, #24]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	61bb      	str	r3, [r7, #24]
 800ebdc:	69ba      	ldr	r2, [r7, #24]
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d3eb      	bcc.n	800ebbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3724      	adds	r7, #36	; 0x24
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr

0800ebf2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ebf2:	b480      	push	{r7}
 800ebf4:	b089      	sub	sp, #36	; 0x24
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	60f8      	str	r0, [r7, #12]
 800ebfa:	60b9      	str	r1, [r7, #8]
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ec08:	88fb      	ldrh	r3, [r7, #6]
 800ec0a:	3303      	adds	r3, #3
 800ec0c:	089b      	lsrs	r3, r3, #2
 800ec0e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ec10:	2300      	movs	r3, #0
 800ec12:	61bb      	str	r3, [r7, #24]
 800ec14:	e00b      	b.n	800ec2e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	601a      	str	r2, [r3, #0]
    pDest++;
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	3304      	adds	r3, #4
 800ec26:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	61bb      	str	r3, [r7, #24]
 800ec2e:	69ba      	ldr	r2, [r7, #24]
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d3ef      	bcc.n	800ec16 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ec36:	69fb      	ldr	r3, [r7, #28]
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3724      	adds	r7, #36	; 0x24
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	785b      	ldrb	r3, [r3, #1]
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d12c      	bne.n	800ecba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	015a      	lsls	r2, r3, #5
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	4413      	add	r3, r2
 800ec68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	db12      	blt.n	800ec98 <USB_EPSetStall+0x54>
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00f      	beq.n	800ec98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	015a      	lsls	r2, r3, #5
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	4413      	add	r3, r2
 800ec80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	68ba      	ldr	r2, [r7, #8]
 800ec88:	0151      	lsls	r1, r2, #5
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	440a      	add	r2, r1
 800ec8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ec96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	015a      	lsls	r2, r3, #5
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	4413      	add	r3, r2
 800eca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	68ba      	ldr	r2, [r7, #8]
 800eca8:	0151      	lsls	r1, r2, #5
 800ecaa:	68fa      	ldr	r2, [r7, #12]
 800ecac:	440a      	add	r2, r1
 800ecae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ecb6:	6013      	str	r3, [r2, #0]
 800ecb8:	e02b      	b.n	800ed12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	015a      	lsls	r2, r3, #5
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	db12      	blt.n	800ecf2 <USB_EPSetStall+0xae>
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d00f      	beq.n	800ecf2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	015a      	lsls	r2, r3, #5
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	4413      	add	r3, r2
 800ecda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	68ba      	ldr	r2, [r7, #8]
 800ece2:	0151      	lsls	r1, r2, #5
 800ece4:	68fa      	ldr	r2, [r7, #12]
 800ece6:	440a      	add	r2, r1
 800ece8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ecf0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	015a      	lsls	r2, r3, #5
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	4413      	add	r3, r2
 800ecfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68ba      	ldr	r2, [r7, #8]
 800ed02:	0151      	lsls	r1, r2, #5
 800ed04:	68fa      	ldr	r2, [r7, #12]
 800ed06:	440a      	add	r2, r1
 800ed08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ed10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ed12:	2300      	movs	r3, #0
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3714      	adds	r7, #20
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b085      	sub	sp, #20
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	785b      	ldrb	r3, [r3, #1]
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d128      	bne.n	800ed8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	015a      	lsls	r2, r3, #5
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	4413      	add	r3, r2
 800ed44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	68ba      	ldr	r2, [r7, #8]
 800ed4c:	0151      	lsls	r1, r2, #5
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	440a      	add	r2, r1
 800ed52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ed5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	78db      	ldrb	r3, [r3, #3]
 800ed60:	2b03      	cmp	r3, #3
 800ed62:	d003      	beq.n	800ed6c <USB_EPClearStall+0x4c>
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	78db      	ldrb	r3, [r3, #3]
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d138      	bne.n	800edde <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	015a      	lsls	r2, r3, #5
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	4413      	add	r3, r2
 800ed74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68ba      	ldr	r2, [r7, #8]
 800ed7c:	0151      	lsls	r1, r2, #5
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	440a      	add	r2, r1
 800ed82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed8a:	6013      	str	r3, [r2, #0]
 800ed8c:	e027      	b.n	800edde <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	015a      	lsls	r2, r3, #5
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	4413      	add	r3, r2
 800ed96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	68ba      	ldr	r2, [r7, #8]
 800ed9e:	0151      	lsls	r1, r2, #5
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	440a      	add	r2, r1
 800eda4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eda8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800edac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	78db      	ldrb	r3, [r3, #3]
 800edb2:	2b03      	cmp	r3, #3
 800edb4:	d003      	beq.n	800edbe <USB_EPClearStall+0x9e>
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	78db      	ldrb	r3, [r3, #3]
 800edba:	2b02      	cmp	r3, #2
 800edbc:	d10f      	bne.n	800edde <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	015a      	lsls	r2, r3, #5
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	4413      	add	r3, r2
 800edc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68ba      	ldr	r2, [r7, #8]
 800edce:	0151      	lsls	r1, r2, #5
 800edd0:	68fa      	ldr	r2, [r7, #12]
 800edd2:	440a      	add	r2, r1
 800edd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eddc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800edde:	2300      	movs	r3, #0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3714      	adds	r7, #20
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr

0800edec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800edec:	b480      	push	{r7}
 800edee:	b085      	sub	sp, #20
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ee0e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	78fb      	ldrb	r3, [r7, #3]
 800ee1a:	011b      	lsls	r3, r3, #4
 800ee1c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ee20:	68f9      	ldr	r1, [r7, #12]
 800ee22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee26:	4313      	orrs	r3, r2
 800ee28:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ee2a:	2300      	movs	r3, #0
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3714      	adds	r7, #20
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	68fa      	ldr	r2, [r7, #12]
 800ee4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee52:	f023 0302 	bic.w	r3, r3, #2
 800ee56:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ee58:	2003      	movs	r0, #3
 800ee5a:	f7f3 fa37 	bl	80022cc <HAL_Delay>

  return HAL_OK;
 800ee5e:	2300      	movs	r3, #0
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3710      	adds	r7, #16
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	68fa      	ldr	r2, [r7, #12]
 800ee7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee82:	f043 0302 	orr.w	r3, r3, #2
 800ee86:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ee88:	2003      	movs	r0, #3
 800ee8a:	f7f3 fa1f 	bl	80022cc <HAL_Delay>

  return HAL_OK;
 800ee8e:	2300      	movs	r3, #0
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b085      	sub	sp, #20
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	695b      	ldr	r3, [r3, #20]
 800eea4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	699b      	ldr	r3, [r3, #24]
 800eeaa:	68fa      	ldr	r2, [r7, #12]
 800eeac:	4013      	ands	r3, r2
 800eeae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eebe:	b480      	push	{r7}
 800eec0:	b085      	sub	sp, #20
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eed0:	699b      	ldr	r3, [r3, #24]
 800eed2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeda:	69db      	ldr	r3, [r3, #28]
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	4013      	ands	r3, r2
 800eee0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	0c1b      	lsrs	r3, r3, #16
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3714      	adds	r7, #20
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr

0800eef2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eef2:	b480      	push	{r7}
 800eef4:	b085      	sub	sp, #20
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef04:	699b      	ldr	r3, [r3, #24]
 800ef06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef0e:	69db      	ldr	r3, [r3, #28]
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	4013      	ands	r3, r2
 800ef14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	b29b      	uxth	r3, r3
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3714      	adds	r7, #20
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr

0800ef26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ef26:	b480      	push	{r7}
 800ef28:	b085      	sub	sp, #20
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
 800ef2e:	460b      	mov	r3, r1
 800ef30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ef36:	78fb      	ldrb	r3, [r7, #3]
 800ef38:	015a      	lsls	r2, r3, #5
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef4c:	695b      	ldr	r3, [r3, #20]
 800ef4e:	68ba      	ldr	r2, [r7, #8]
 800ef50:	4013      	ands	r3, r2
 800ef52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ef54:	68bb      	ldr	r3, [r7, #8]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3714      	adds	r7, #20
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr

0800ef62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ef62:	b480      	push	{r7}
 800ef64:	b087      	sub	sp, #28
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
 800ef6a:	460b      	mov	r3, r1
 800ef6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef78:	691b      	ldr	r3, [r3, #16]
 800ef7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ef86:	78fb      	ldrb	r3, [r7, #3]
 800ef88:	f003 030f 	and.w	r3, r3, #15
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ef92:	01db      	lsls	r3, r3, #7
 800ef94:	b2db      	uxtb	r3, r3
 800ef96:	693a      	ldr	r2, [r7, #16]
 800ef98:	4313      	orrs	r3, r2
 800ef9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ef9c:	78fb      	ldrb	r3, [r7, #3]
 800ef9e:	015a      	lsls	r2, r3, #5
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	4413      	add	r3, r2
 800efa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efa8:	689b      	ldr	r3, [r3, #8]
 800efaa:	693a      	ldr	r2, [r7, #16]
 800efac:	4013      	ands	r3, r2
 800efae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800efb0:	68bb      	ldr	r3, [r7, #8]
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	371c      	adds	r7, #28
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr

0800efbe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800efbe:	b480      	push	{r7}
 800efc0:	b083      	sub	sp, #12
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	695b      	ldr	r3, [r3, #20]
 800efca:	f003 0301 	and.w	r3, r3, #1
}
 800efce:	4618      	mov	r0, r3
 800efd0:	370c      	adds	r7, #12
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr
	...

0800efdc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800efdc:	b480      	push	{r7}
 800efde:	b085      	sub	sp, #20
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eff6:	4619      	mov	r1, r3
 800eff8:	4b09      	ldr	r3, [pc, #36]	; (800f020 <USB_ActivateSetup+0x44>)
 800effa:	4013      	ands	r3, r2
 800effc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f00c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f010:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f012:	2300      	movs	r3, #0
}
 800f014:	4618      	mov	r0, r3
 800f016:	3714      	adds	r7, #20
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr
 800f020:	fffff800 	.word	0xfffff800

0800f024 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f024:	b480      	push	{r7}
 800f026:	b087      	sub	sp, #28
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	460b      	mov	r3, r1
 800f02e:	607a      	str	r2, [r7, #4]
 800f030:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	333c      	adds	r3, #60	; 0x3c
 800f03a:	3304      	adds	r3, #4
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	4a26      	ldr	r2, [pc, #152]	; (800f0dc <USB_EP0_OutStart+0xb8>)
 800f044:	4293      	cmp	r3, r2
 800f046:	d90a      	bls.n	800f05e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f058:	d101      	bne.n	800f05e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f05a:	2300      	movs	r3, #0
 800f05c:	e037      	b.n	800f0ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f064:	461a      	mov	r2, r3
 800f066:	2300      	movs	r3, #0
 800f068:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f070:	691b      	ldr	r3, [r3, #16]
 800f072:	697a      	ldr	r2, [r7, #20]
 800f074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f078:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f07c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f084:	691b      	ldr	r3, [r3, #16]
 800f086:	697a      	ldr	r2, [r7, #20]
 800f088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f08c:	f043 0318 	orr.w	r3, r3, #24
 800f090:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	697a      	ldr	r2, [r7, #20]
 800f09c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f0a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f0a6:	7afb      	ldrb	r3, [r7, #11]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d10f      	bne.n	800f0cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	697a      	ldr	r2, [r7, #20]
 800f0c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f0ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f0cc:	2300      	movs	r3, #0
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	371c      	adds	r7, #28
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	4f54300a 	.word	0x4f54300a

0800f0e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b085      	sub	sp, #20
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	60fb      	str	r3, [r7, #12]
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	4a13      	ldr	r2, [pc, #76]	; (800f144 <USB_CoreReset+0x64>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d901      	bls.n	800f0fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f0fa:	2303      	movs	r3, #3
 800f0fc:	e01b      	b.n	800f136 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	691b      	ldr	r3, [r3, #16]
 800f102:	2b00      	cmp	r3, #0
 800f104:	daf2      	bge.n	800f0ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f106:	2300      	movs	r3, #0
 800f108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	f043 0201 	orr.w	r2, r3, #1
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	3301      	adds	r3, #1
 800f11a:	60fb      	str	r3, [r7, #12]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	4a09      	ldr	r2, [pc, #36]	; (800f144 <USB_CoreReset+0x64>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d901      	bls.n	800f128 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f124:	2303      	movs	r3, #3
 800f126:	e006      	b.n	800f136 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	691b      	ldr	r3, [r3, #16]
 800f12c:	f003 0301 	and.w	r3, r3, #1
 800f130:	2b01      	cmp	r3, #1
 800f132:	d0f0      	beq.n	800f116 <USB_CoreReset+0x36>

  return HAL_OK;
 800f134:	2300      	movs	r3, #0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3714      	adds	r7, #20
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr
 800f142:	bf00      	nop
 800f144:	00030d40 	.word	0x00030d40

0800f148 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f14c:	4904      	ldr	r1, [pc, #16]	; (800f160 <MX_FATFS_Init+0x18>)
 800f14e:	4805      	ldr	r0, [pc, #20]	; (800f164 <MX_FATFS_Init+0x1c>)
 800f150:	f001 feb2 	bl	8010eb8 <FATFS_LinkDriver>
 800f154:	4603      	mov	r3, r0
 800f156:	461a      	mov	r2, r3
 800f158:	4b03      	ldr	r3, [pc, #12]	; (800f168 <MX_FATFS_Init+0x20>)
 800f15a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f15c:	bf00      	nop
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	2401b69c 	.word	0x2401b69c
 800f164:	08015b0c 	.word	0x08015b0c
 800f168:	2401b698 	.word	0x2401b698

0800f16c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b082      	sub	sp, #8
 800f170:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f172:	2300      	movs	r3, #0
 800f174:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f176:	f000 f885 	bl	800f284 <BSP_SD_IsDetected>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d001      	beq.n	800f184 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f180:	2302      	movs	r3, #2
 800f182:	e012      	b.n	800f1aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f184:	480b      	ldr	r0, [pc, #44]	; (800f1b4 <BSP_SD_Init+0x48>)
 800f186:	f7fa fb75 	bl	8009874 <HAL_SD_Init>
 800f18a:	4603      	mov	r3, r0
 800f18c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f18e:	79fb      	ldrb	r3, [r7, #7]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d109      	bne.n	800f1a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f194:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f198:	4806      	ldr	r0, [pc, #24]	; (800f1b4 <BSP_SD_Init+0x48>)
 800f19a:	f7fb fa31 	bl	800a600 <HAL_SD_ConfigWideBusOperation>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d001      	beq.n	800f1a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f1a8:	79fb      	ldrb	r3, [r7, #7]
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3708      	adds	r7, #8
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	2400ac9c 	.word	0x2400ac9c

0800f1b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b086      	sub	sp, #24
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	60b9      	str	r1, [r7, #8]
 800f1c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	68ba      	ldr	r2, [r7, #8]
 800f1cc:	68f9      	ldr	r1, [r7, #12]
 800f1ce:	4806      	ldr	r0, [pc, #24]	; (800f1e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f1d0:	f7fa fc74 	bl	8009abc <HAL_SD_ReadBlocks_DMA>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d001      	beq.n	800f1de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f1da:	2301      	movs	r3, #1
 800f1dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f1de:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3718      	adds	r7, #24
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	2400ac9c 	.word	0x2400ac9c

0800f1ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b086      	sub	sp, #24
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	60f8      	str	r0, [r7, #12]
 800f1f4:	60b9      	str	r1, [r7, #8]
 800f1f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	68ba      	ldr	r2, [r7, #8]
 800f200:	68f9      	ldr	r1, [r7, #12]
 800f202:	4806      	ldr	r0, [pc, #24]	; (800f21c <BSP_SD_WriteBlocks_DMA+0x30>)
 800f204:	f7fa fd02 	bl	8009c0c <HAL_SD_WriteBlocks_DMA>
 800f208:	4603      	mov	r3, r0
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d001      	beq.n	800f212 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f20e:	2301      	movs	r3, #1
 800f210:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f212:	7dfb      	ldrb	r3, [r7, #23]
}
 800f214:	4618      	mov	r0, r3
 800f216:	3718      	adds	r7, #24
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	2400ac9c 	.word	0x2400ac9c

0800f220 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f224:	4805      	ldr	r0, [pc, #20]	; (800f23c <BSP_SD_GetCardState+0x1c>)
 800f226:	f7fb fa95 	bl	800a754 <HAL_SD_GetCardState>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b04      	cmp	r3, #4
 800f22e:	bf14      	ite	ne
 800f230:	2301      	movne	r3, #1
 800f232:	2300      	moveq	r3, #0
 800f234:	b2db      	uxtb	r3, r3
}
 800f236:	4618      	mov	r0, r3
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	2400ac9c 	.word	0x2400ac9c

0800f240 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f248:	6879      	ldr	r1, [r7, #4]
 800f24a:	4803      	ldr	r0, [pc, #12]	; (800f258 <BSP_SD_GetCardInfo+0x18>)
 800f24c:	f7fb f9ac 	bl	800a5a8 <HAL_SD_GetCardInfo>
}
 800f250:	bf00      	nop
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	2400ac9c 	.word	0x2400ac9c

0800f25c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f264:	f000 f9ac 	bl	800f5c0 <BSP_SD_WriteCpltCallback>
}
 800f268:	bf00      	nop
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f278:	f000 f9b4 	bl	800f5e4 <BSP_SD_ReadCpltCallback>
}
 800f27c:	bf00      	nop
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f28a:	2301      	movs	r3, #1
 800f28c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f28e:	f000 f80b 	bl	800f2a8 <BSP_PlatformIsDetected>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d101      	bne.n	800f29c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f298:	2300      	movs	r3, #0
 800f29a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f29c:	79fb      	ldrb	r3, [r7, #7]
 800f29e:	b2db      	uxtb	r3, r3
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f2b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f2b6:	4806      	ldr	r0, [pc, #24]	; (800f2d0 <BSP_PlatformIsDetected+0x28>)
 800f2b8:	f7f6 fa04 	bl	80056c4 <HAL_GPIO_ReadPin>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d001      	beq.n	800f2c6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f2c6:	79fb      	ldrb	r3, [r7, #7]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	58020800 	.word	0x58020800

0800f2d4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800f2dc:	f001 fe8e 	bl	8010ffc <osKernelGetTickCount>
 800f2e0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800f2e2:	e006      	b.n	800f2f2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f2e4:	f7ff ff9c 	bl	800f220 <BSP_SD_GetCardState>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d101      	bne.n	800f2f2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	e009      	b.n	800f306 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800f2f2:	f001 fe83 	bl	8010ffc <osKernelGetTickCount>
 800f2f6:	4602      	mov	r2, r0
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d8f0      	bhi.n	800f2e4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f302:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f306:	4618      	mov	r0, r3
 800f308:	3710      	adds	r7, #16
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
	...

0800f310 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	4603      	mov	r3, r0
 800f318:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f31a:	4b0b      	ldr	r3, [pc, #44]	; (800f348 <SD_CheckStatus+0x38>)
 800f31c:	2201      	movs	r2, #1
 800f31e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f320:	f7ff ff7e 	bl	800f220 <BSP_SD_GetCardState>
 800f324:	4603      	mov	r3, r0
 800f326:	2b00      	cmp	r3, #0
 800f328:	d107      	bne.n	800f33a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f32a:	4b07      	ldr	r3, [pc, #28]	; (800f348 <SD_CheckStatus+0x38>)
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	f023 0301 	bic.w	r3, r3, #1
 800f334:	b2da      	uxtb	r2, r3
 800f336:	4b04      	ldr	r3, [pc, #16]	; (800f348 <SD_CheckStatus+0x38>)
 800f338:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f33a:	4b03      	ldr	r3, [pc, #12]	; (800f348 <SD_CheckStatus+0x38>)
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	b2db      	uxtb	r3, r3
}
 800f340:	4618      	mov	r0, r3
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	2400000d 	.word	0x2400000d

0800f34c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	4603      	mov	r3, r0
 800f354:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f356:	4b1c      	ldr	r3, [pc, #112]	; (800f3c8 <SD_initialize+0x7c>)
 800f358:	2201      	movs	r2, #1
 800f35a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800f35c:	f001 fdf6 	bl	8010f4c <osKernelGetState>
 800f360:	4603      	mov	r3, r0
 800f362:	2b02      	cmp	r3, #2
 800f364:	d129      	bne.n	800f3ba <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f366:	f7ff ff01 	bl	800f16c <BSP_SD_Init>
 800f36a:	4603      	mov	r3, r0
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d107      	bne.n	800f380 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f370:	79fb      	ldrb	r3, [r7, #7]
 800f372:	4618      	mov	r0, r3
 800f374:	f7ff ffcc 	bl	800f310 <SD_CheckStatus>
 800f378:	4603      	mov	r3, r0
 800f37a:	461a      	mov	r2, r3
 800f37c:	4b12      	ldr	r3, [pc, #72]	; (800f3c8 <SD_initialize+0x7c>)
 800f37e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f380:	4b11      	ldr	r3, [pc, #68]	; (800f3c8 <SD_initialize+0x7c>)
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	b2db      	uxtb	r3, r3
 800f386:	2b01      	cmp	r3, #1
 800f388:	d017      	beq.n	800f3ba <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800f38a:	4b10      	ldr	r3, [pc, #64]	; (800f3cc <SD_initialize+0x80>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d107      	bne.n	800f3a2 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800f392:	2200      	movs	r2, #0
 800f394:	2102      	movs	r1, #2
 800f396:	200a      	movs	r0, #10
 800f398:	f002 f874 	bl	8011484 <osMessageQueueNew>
 800f39c:	4602      	mov	r2, r0
 800f39e:	4b0b      	ldr	r3, [pc, #44]	; (800f3cc <SD_initialize+0x80>)
 800f3a0:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800f3a2:	4b0a      	ldr	r3, [pc, #40]	; (800f3cc <SD_initialize+0x80>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d107      	bne.n	800f3ba <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800f3aa:	4b07      	ldr	r3, [pc, #28]	; (800f3c8 <SD_initialize+0x7c>)
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	f043 0301 	orr.w	r3, r3, #1
 800f3b4:	b2da      	uxtb	r2, r3
 800f3b6:	4b04      	ldr	r3, [pc, #16]	; (800f3c8 <SD_initialize+0x7c>)
 800f3b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f3ba:	4b03      	ldr	r3, [pc, #12]	; (800f3c8 <SD_initialize+0x7c>)
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	b2db      	uxtb	r3, r3
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	2400000d 	.word	0x2400000d
 800f3cc:	2400020c 	.word	0x2400020c

0800f3d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f3da:	79fb      	ldrb	r3, [r7, #7]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7ff ff97 	bl	800f310 <SD_CheckStatus>
 800f3e2:	4603      	mov	r3, r0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3708      	adds	r7, #8
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b088      	sub	sp, #32
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60b9      	str	r1, [r7, #8]
 800f3f4:	607a      	str	r2, [r7, #4]
 800f3f6:	603b      	str	r3, [r7, #0]
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f400:	f247 5030 	movw	r0, #30000	; 0x7530
 800f404:	f7ff ff66 	bl	800f2d4 <SD_CheckStatusWithTimeout>
 800f408:	4603      	mov	r3, r0
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	da01      	bge.n	800f412 <SD_read+0x26>
  {
    return res;
 800f40e:	7ffb      	ldrb	r3, [r7, #31]
 800f410:	e02f      	b.n	800f472 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f412:	683a      	ldr	r2, [r7, #0]
 800f414:	6879      	ldr	r1, [r7, #4]
 800f416:	68b8      	ldr	r0, [r7, #8]
 800f418:	f7ff fece 	bl	800f1b8 <BSP_SD_ReadBlocks_DMA>
 800f41c:	4603      	mov	r3, r0
 800f41e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800f420:	7fbb      	ldrb	r3, [r7, #30]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d124      	bne.n	800f470 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f426:	4b15      	ldr	r3, [pc, #84]	; (800f47c <SD_read+0x90>)
 800f428:	6818      	ldr	r0, [r3, #0]
 800f42a:	f107 0112 	add.w	r1, r7, #18
 800f42e:	f247 5330 	movw	r3, #30000	; 0x7530
 800f432:	2200      	movs	r2, #0
 800f434:	f002 f920 	bl	8011678 <osMessageQueueGet>
 800f438:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d117      	bne.n	800f470 <SD_read+0x84>
 800f440:	8a7b      	ldrh	r3, [r7, #18]
 800f442:	2b01      	cmp	r3, #1
 800f444:	d114      	bne.n	800f470 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800f446:	f001 fdd9 	bl	8010ffc <osKernelGetTickCount>
 800f44a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f44c:	e007      	b.n	800f45e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f44e:	f7ff fee7 	bl	800f220 <BSP_SD_GetCardState>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	d102      	bne.n	800f45e <SD_read+0x72>
              {
                res = RES_OK;
 800f458:	2300      	movs	r3, #0
 800f45a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f45c:	e008      	b.n	800f470 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f45e:	f001 fdcd 	bl	8010ffc <osKernelGetTickCount>
 800f462:	4602      	mov	r2, r0
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	1ad3      	subs	r3, r2, r3
 800f468:	f247 522f 	movw	r2, #29999	; 0x752f
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d9ee      	bls.n	800f44e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f470:	7ffb      	ldrb	r3, [r7, #31]
}
 800f472:	4618      	mov	r0, r3
 800f474:	3720      	adds	r7, #32
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	2400020c 	.word	0x2400020c

0800f480 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b088      	sub	sp, #32
 800f484:	af00      	add	r7, sp, #0
 800f486:	60b9      	str	r1, [r7, #8]
 800f488:	607a      	str	r2, [r7, #4]
 800f48a:	603b      	str	r3, [r7, #0]
 800f48c:	4603      	mov	r3, r0
 800f48e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f490:	2301      	movs	r3, #1
 800f492:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f494:	f247 5030 	movw	r0, #30000	; 0x7530
 800f498:	f7ff ff1c 	bl	800f2d4 <SD_CheckStatusWithTimeout>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	da01      	bge.n	800f4a6 <SD_write+0x26>
  {
    return res;
 800f4a2:	7ffb      	ldrb	r3, [r7, #31]
 800f4a4:	e02d      	b.n	800f502 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f4a6:	683a      	ldr	r2, [r7, #0]
 800f4a8:	6879      	ldr	r1, [r7, #4]
 800f4aa:	68b8      	ldr	r0, [r7, #8]
 800f4ac:	f7ff fe9e 	bl	800f1ec <BSP_SD_WriteBlocks_DMA>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d124      	bne.n	800f500 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f4b6:	4b15      	ldr	r3, [pc, #84]	; (800f50c <SD_write+0x8c>)
 800f4b8:	6818      	ldr	r0, [r3, #0]
 800f4ba:	f107 0112 	add.w	r1, r7, #18
 800f4be:	f247 5330 	movw	r3, #30000	; 0x7530
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f002 f8d8 	bl	8011678 <osMessageQueueGet>
 800f4c8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d117      	bne.n	800f500 <SD_write+0x80>
 800f4d0:	8a7b      	ldrh	r3, [r7, #18]
 800f4d2:	2b02      	cmp	r3, #2
 800f4d4:	d114      	bne.n	800f500 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800f4d6:	f001 fd91 	bl	8010ffc <osKernelGetTickCount>
 800f4da:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f4dc:	e007      	b.n	800f4ee <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f4de:	f7ff fe9f 	bl	800f220 <BSP_SD_GetCardState>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d102      	bne.n	800f4ee <SD_write+0x6e>
          {
            res = RES_OK;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	77fb      	strb	r3, [r7, #31]
            break;
 800f4ec:	e008      	b.n	800f500 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f4ee:	f001 fd85 	bl	8010ffc <osKernelGetTickCount>
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	1ad3      	subs	r3, r2, r3
 800f4f8:	f247 522f 	movw	r2, #29999	; 0x752f
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d9ee      	bls.n	800f4de <SD_write+0x5e>
    }

  }
#endif

  return res;
 800f500:	7ffb      	ldrb	r3, [r7, #31]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3720      	adds	r7, #32
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	2400020c 	.word	0x2400020c

0800f510 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b08c      	sub	sp, #48	; 0x30
 800f514:	af00      	add	r7, sp, #0
 800f516:	4603      	mov	r3, r0
 800f518:	603a      	str	r2, [r7, #0]
 800f51a:	71fb      	strb	r3, [r7, #7]
 800f51c:	460b      	mov	r3, r1
 800f51e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f520:	2301      	movs	r3, #1
 800f522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f526:	4b25      	ldr	r3, [pc, #148]	; (800f5bc <SD_ioctl+0xac>)
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	f003 0301 	and.w	r3, r3, #1
 800f530:	2b00      	cmp	r3, #0
 800f532:	d001      	beq.n	800f538 <SD_ioctl+0x28>
 800f534:	2303      	movs	r3, #3
 800f536:	e03c      	b.n	800f5b2 <SD_ioctl+0xa2>

  switch (cmd)
 800f538:	79bb      	ldrb	r3, [r7, #6]
 800f53a:	2b03      	cmp	r3, #3
 800f53c:	d834      	bhi.n	800f5a8 <SD_ioctl+0x98>
 800f53e:	a201      	add	r2, pc, #4	; (adr r2, 800f544 <SD_ioctl+0x34>)
 800f540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f544:	0800f555 	.word	0x0800f555
 800f548:	0800f55d 	.word	0x0800f55d
 800f54c:	0800f575 	.word	0x0800f575
 800f550:	0800f58f 	.word	0x0800f58f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f554:	2300      	movs	r3, #0
 800f556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f55a:	e028      	b.n	800f5ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f55c:	f107 0308 	add.w	r3, r7, #8
 800f560:	4618      	mov	r0, r3
 800f562:	f7ff fe6d 	bl	800f240 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f566:	6a3a      	ldr	r2, [r7, #32]
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f56c:	2300      	movs	r3, #0
 800f56e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f572:	e01c      	b.n	800f5ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f574:	f107 0308 	add.w	r3, r7, #8
 800f578:	4618      	mov	r0, r3
 800f57a:	f7ff fe61 	bl	800f240 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f580:	b29a      	uxth	r2, r3
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f586:	2300      	movs	r3, #0
 800f588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f58c:	e00f      	b.n	800f5ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f58e:	f107 0308 	add.w	r3, r7, #8
 800f592:	4618      	mov	r0, r3
 800f594:	f7ff fe54 	bl	800f240 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59a:	0a5a      	lsrs	r2, r3, #9
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f5a6:	e002      	b.n	800f5ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f5a8:	2304      	movs	r3, #4
 800f5aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f5ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3730      	adds	r7, #48	; 0x30
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	2400000d 	.word	0x2400000d

0800f5c0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800f5c6:	2302      	movs	r3, #2
 800f5c8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f5ca:	4b05      	ldr	r3, [pc, #20]	; (800f5e0 <BSP_SD_WriteCpltCallback+0x20>)
 800f5cc:	6818      	ldr	r0, [r3, #0]
 800f5ce:	1db9      	adds	r1, r7, #6
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f001 ffdc 	bl	8011590 <osMessageQueuePut>
#endif
}
 800f5d8:	bf00      	nop
 800f5da:	3708      	adds	r7, #8
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}
 800f5e0:	2400020c 	.word	0x2400020c

0800f5e4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f5ee:	4b05      	ldr	r3, [pc, #20]	; (800f604 <BSP_SD_ReadCpltCallback+0x20>)
 800f5f0:	6818      	ldr	r0, [r3, #0]
 800f5f2:	1db9      	adds	r1, r7, #6
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f001 ffca 	bl	8011590 <osMessageQueuePut>
#endif
}
 800f5fc:	bf00      	nop
 800f5fe:	3708      	adds	r7, #8
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	2400020c 	.word	0x2400020c

0800f608 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	460b      	mov	r3, r1
 800f612:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f614:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f618:	f005 fd7e 	bl	8015118 <malloc>
 800f61c:	4603      	mov	r3, r0
 800f61e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d105      	bne.n	800f632 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2200      	movs	r2, #0
 800f62a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f62e:	2302      	movs	r3, #2
 800f630:	e066      	b.n	800f700 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	7c1b      	ldrb	r3, [r3, #16]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d119      	bne.n	800f676 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f642:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f646:	2202      	movs	r2, #2
 800f648:	2181      	movs	r1, #129	; 0x81
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f005 fbeb 	bl	8014e26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2201      	movs	r2, #1
 800f654:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f65a:	2202      	movs	r2, #2
 800f65c:	2101      	movs	r1, #1
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f005 fbe1 	bl	8014e26 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2201      	movs	r2, #1
 800f668:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2210      	movs	r2, #16
 800f670:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f674:	e016      	b.n	800f6a4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f676:	2340      	movs	r3, #64	; 0x40
 800f678:	2202      	movs	r2, #2
 800f67a:	2181      	movs	r1, #129	; 0x81
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f005 fbd2 	bl	8014e26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2201      	movs	r2, #1
 800f686:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f688:	2340      	movs	r3, #64	; 0x40
 800f68a:	2202      	movs	r2, #2
 800f68c:	2101      	movs	r1, #1
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f005 fbc9 	bl	8014e26 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2201      	movs	r2, #1
 800f698:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2210      	movs	r2, #16
 800f6a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f6a4:	2308      	movs	r3, #8
 800f6a6:	2203      	movs	r2, #3
 800f6a8:	2182      	movs	r1, #130	; 0x82
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f005 fbbb 	bl	8014e26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	7c1b      	ldrb	r3, [r3, #16]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d109      	bne.n	800f6ee <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f6e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f6e4:	2101      	movs	r1, #1
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f005 fc8c 	bl	8015004 <USBD_LL_PrepareReceive>
 800f6ec:	e007      	b.n	800f6fe <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f6f4:	2340      	movs	r3, #64	; 0x40
 800f6f6:	2101      	movs	r1, #1
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f005 fc83 	bl	8015004 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f6fe:	2300      	movs	r3, #0
}
 800f700:	4618      	mov	r0, r3
 800f702:	3710      	adds	r7, #16
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	460b      	mov	r3, r1
 800f712:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800f714:	2300      	movs	r3, #0
 800f716:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f718:	2181      	movs	r1, #129	; 0x81
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f005 fba9 	bl	8014e72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f726:	2101      	movs	r1, #1
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f005 fba2 	bl	8014e72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2200      	movs	r2, #0
 800f732:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f736:	2182      	movs	r1, #130	; 0x82
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f005 fb9a 	bl	8014e72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2200      	movs	r2, #0
 800f742:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2200      	movs	r2, #0
 800f74a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f754:	2b00      	cmp	r3, #0
 800f756:	d00e      	beq.n	800f776 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f75e:	685b      	ldr	r3, [r3, #4]
 800f760:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f768:	4618      	mov	r0, r3
 800f76a:	f005 fcdd 	bl	8015128 <free>
    pdev->pClassData = NULL;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2200      	movs	r2, #0
 800f772:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800f776:	7bfb      	ldrb	r3, [r7, #15]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3710      	adds	r7, #16
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b086      	sub	sp, #24
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f790:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800f792:	2300      	movs	r3, #0
 800f794:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800f796:	2300      	movs	r3, #0
 800f798:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800f79a:	2300      	movs	r3, #0
 800f79c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d03a      	beq.n	800f820 <USBD_CDC_Setup+0xa0>
 800f7aa:	2b20      	cmp	r3, #32
 800f7ac:	f040 8097 	bne.w	800f8de <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	88db      	ldrh	r3, [r3, #6]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d029      	beq.n	800f80c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	b25b      	sxtb	r3, r3
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	da11      	bge.n	800f7e6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f7c8:	689b      	ldr	r3, [r3, #8]
 800f7ca:	683a      	ldr	r2, [r7, #0]
 800f7cc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800f7ce:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f7d0:	683a      	ldr	r2, [r7, #0]
 800f7d2:	88d2      	ldrh	r2, [r2, #6]
 800f7d4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f7d6:	6939      	ldr	r1, [r7, #16]
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	88db      	ldrh	r3, [r3, #6]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f001 fa9d 	bl	8010d1e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800f7e4:	e082      	b.n	800f8ec <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	785a      	ldrb	r2, [r3, #1]
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	88db      	ldrh	r3, [r3, #6]
 800f7f4:	b2da      	uxtb	r2, r3
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f7fc:	6939      	ldr	r1, [r7, #16]
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	88db      	ldrh	r3, [r3, #6]
 800f802:	461a      	mov	r2, r3
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f001 fab6 	bl	8010d76 <USBD_CtlPrepareRx>
    break;
 800f80a:	e06f      	b.n	800f8ec <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f812:	689b      	ldr	r3, [r3, #8]
 800f814:	683a      	ldr	r2, [r7, #0]
 800f816:	7850      	ldrb	r0, [r2, #1]
 800f818:	2200      	movs	r2, #0
 800f81a:	6839      	ldr	r1, [r7, #0]
 800f81c:	4798      	blx	r3
    break;
 800f81e:	e065      	b.n	800f8ec <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	785b      	ldrb	r3, [r3, #1]
 800f824:	2b0b      	cmp	r3, #11
 800f826:	d84f      	bhi.n	800f8c8 <USBD_CDC_Setup+0x148>
 800f828:	a201      	add	r2, pc, #4	; (adr r2, 800f830 <USBD_CDC_Setup+0xb0>)
 800f82a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f82e:	bf00      	nop
 800f830:	0800f861 	.word	0x0800f861
 800f834:	0800f8d7 	.word	0x0800f8d7
 800f838:	0800f8c9 	.word	0x0800f8c9
 800f83c:	0800f8c9 	.word	0x0800f8c9
 800f840:	0800f8c9 	.word	0x0800f8c9
 800f844:	0800f8c9 	.word	0x0800f8c9
 800f848:	0800f8c9 	.word	0x0800f8c9
 800f84c:	0800f8c9 	.word	0x0800f8c9
 800f850:	0800f8c9 	.word	0x0800f8c9
 800f854:	0800f8c9 	.word	0x0800f8c9
 800f858:	0800f889 	.word	0x0800f889
 800f85c:	0800f8b1 	.word	0x0800f8b1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f866:	2b03      	cmp	r3, #3
 800f868:	d107      	bne.n	800f87a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f86a:	f107 030c 	add.w	r3, r7, #12
 800f86e:	2202      	movs	r2, #2
 800f870:	4619      	mov	r1, r3
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f001 fa53 	bl	8010d1e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f878:	e030      	b.n	800f8dc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800f87a:	6839      	ldr	r1, [r7, #0]
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f001 f9dd 	bl	8010c3c <USBD_CtlError>
        ret = USBD_FAIL;
 800f882:	2303      	movs	r3, #3
 800f884:	75fb      	strb	r3, [r7, #23]
      break;
 800f886:	e029      	b.n	800f8dc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f88e:	2b03      	cmp	r3, #3
 800f890:	d107      	bne.n	800f8a2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f892:	f107 030f 	add.w	r3, r7, #15
 800f896:	2201      	movs	r2, #1
 800f898:	4619      	mov	r1, r3
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f001 fa3f 	bl	8010d1e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f8a0:	e01c      	b.n	800f8dc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800f8a2:	6839      	ldr	r1, [r7, #0]
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f001 f9c9 	bl	8010c3c <USBD_CtlError>
        ret = USBD_FAIL;
 800f8aa:	2303      	movs	r3, #3
 800f8ac:	75fb      	strb	r3, [r7, #23]
      break;
 800f8ae:	e015      	b.n	800f8dc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8b6:	2b03      	cmp	r3, #3
 800f8b8:	d00f      	beq.n	800f8da <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800f8ba:	6839      	ldr	r1, [r7, #0]
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f001 f9bd 	bl	8010c3c <USBD_CtlError>
        ret = USBD_FAIL;
 800f8c2:	2303      	movs	r3, #3
 800f8c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800f8c6:	e008      	b.n	800f8da <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800f8c8:	6839      	ldr	r1, [r7, #0]
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f001 f9b6 	bl	8010c3c <USBD_CtlError>
      ret = USBD_FAIL;
 800f8d0:	2303      	movs	r3, #3
 800f8d2:	75fb      	strb	r3, [r7, #23]
      break;
 800f8d4:	e002      	b.n	800f8dc <USBD_CDC_Setup+0x15c>
      break;
 800f8d6:	bf00      	nop
 800f8d8:	e008      	b.n	800f8ec <USBD_CDC_Setup+0x16c>
      break;
 800f8da:	bf00      	nop
    }
    break;
 800f8dc:	e006      	b.n	800f8ec <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800f8de:	6839      	ldr	r1, [r7, #0]
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f001 f9ab 	bl	8010c3c <USBD_CtlError>
    ret = USBD_FAIL;
 800f8e6:	2303      	movs	r3, #3
 800f8e8:	75fb      	strb	r3, [r7, #23]
    break;
 800f8ea:	bf00      	nop
  }

  return (uint8_t)ret;
 800f8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3718      	adds	r7, #24
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop

0800f8f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	460b      	mov	r3, r1
 800f902:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f90a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f912:	2b00      	cmp	r3, #0
 800f914:	d101      	bne.n	800f91a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f916:	2303      	movs	r3, #3
 800f918:	e049      	b.n	800f9ae <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f920:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f922:	78fa      	ldrb	r2, [r7, #3]
 800f924:	6879      	ldr	r1, [r7, #4]
 800f926:	4613      	mov	r3, r2
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	4413      	add	r3, r2
 800f92c:	009b      	lsls	r3, r3, #2
 800f92e:	440b      	add	r3, r1
 800f930:	3318      	adds	r3, #24
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d029      	beq.n	800f98c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f938:	78fa      	ldrb	r2, [r7, #3]
 800f93a:	6879      	ldr	r1, [r7, #4]
 800f93c:	4613      	mov	r3, r2
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	4413      	add	r3, r2
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	440b      	add	r3, r1
 800f946:	3318      	adds	r3, #24
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	78f9      	ldrb	r1, [r7, #3]
 800f94c:	68f8      	ldr	r0, [r7, #12]
 800f94e:	460b      	mov	r3, r1
 800f950:	00db      	lsls	r3, r3, #3
 800f952:	1a5b      	subs	r3, r3, r1
 800f954:	009b      	lsls	r3, r3, #2
 800f956:	4403      	add	r3, r0
 800f958:	3344      	adds	r3, #68	; 0x44
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	fbb2 f1f3 	udiv	r1, r2, r3
 800f960:	fb03 f301 	mul.w	r3, r3, r1
 800f964:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f966:	2b00      	cmp	r3, #0
 800f968:	d110      	bne.n	800f98c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f96a:	78fa      	ldrb	r2, [r7, #3]
 800f96c:	6879      	ldr	r1, [r7, #4]
 800f96e:	4613      	mov	r3, r2
 800f970:	009b      	lsls	r3, r3, #2
 800f972:	4413      	add	r3, r2
 800f974:	009b      	lsls	r3, r3, #2
 800f976:	440b      	add	r3, r1
 800f978:	3318      	adds	r3, #24
 800f97a:	2200      	movs	r2, #0
 800f97c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f97e:	78f9      	ldrb	r1, [r7, #3]
 800f980:	2300      	movs	r3, #0
 800f982:	2200      	movs	r2, #0
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f005 fb1c 	bl	8014fc2 <USBD_LL_Transmit>
 800f98a:	e00f      	b.n	800f9ac <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	2200      	movs	r2, #0
 800f990:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f99a:	691b      	ldr	r3, [r3, #16]
 800f99c:	68ba      	ldr	r2, [r7, #8]
 800f99e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f9a2:	68ba      	ldr	r2, [r7, #8]
 800f9a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f9a8:	78fa      	ldrb	r2, [r7, #3]
 800f9aa:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800f9ac:	2300      	movs	r3, #0
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3710      	adds	r7, #16
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b084      	sub	sp, #16
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
 800f9be:	460b      	mov	r3, r1
 800f9c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d101      	bne.n	800f9d8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f9d4:	2303      	movs	r3, #3
 800f9d6:	e015      	b.n	800fa04 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f9d8:	78fb      	ldrb	r3, [r7, #3]
 800f9da:	4619      	mov	r1, r3
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f005 fb32 	bl	8015046 <USBD_LL_GetRxDataSize>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f9fe:	4611      	mov	r1, r2
 800fa00:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fa02:	2300      	movs	r3, #0
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3710      	adds	r7, #16
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fa1a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d015      	beq.n	800fa52 <USBD_CDC_EP0_RxReady+0x46>
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fa2c:	2bff      	cmp	r3, #255	; 0xff
 800fa2e:	d010      	beq.n	800fa52 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fa36:	689b      	ldr	r3, [r3, #8]
 800fa38:	68fa      	ldr	r2, [r7, #12]
 800fa3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800fa3e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800fa46:	b292      	uxth	r2, r2
 800fa48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	22ff      	movs	r2, #255	; 0xff
 800fa4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800fa52:	2300      	movs	r3, #0
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2243      	movs	r2, #67	; 0x43
 800fa68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800fa6a:	4b03      	ldr	r3, [pc, #12]	; (800fa78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	370c      	adds	r7, #12
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr
 800fa78:	24000098 	.word	0x24000098

0800fa7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	b083      	sub	sp, #12
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2243      	movs	r2, #67	; 0x43
 800fa88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800fa8a:	4b03      	ldr	r3, [pc, #12]	; (800fa98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr
 800fa98:	24000054 	.word	0x24000054

0800fa9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2243      	movs	r2, #67	; 0x43
 800faa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800faaa:	4b03      	ldr	r3, [pc, #12]	; (800fab8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800faac:	4618      	mov	r0, r3
 800faae:	370c      	adds	r7, #12
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr
 800fab8:	240000dc 	.word	0x240000dc

0800fabc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	220a      	movs	r2, #10
 800fac8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800faca:	4b03      	ldr	r3, [pc, #12]	; (800fad8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800facc:	4618      	mov	r0, r3
 800face:	370c      	adds	r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr
 800fad8:	24000010 	.word	0x24000010

0800fadc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fadc:	b480      	push	{r7}
 800fade:	b083      	sub	sp, #12
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d101      	bne.n	800faf0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800faec:	2303      	movs	r3, #3
 800faee:	e004      	b.n	800fafa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	683a      	ldr	r2, [r7, #0]
 800faf4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800faf8:	2300      	movs	r3, #0
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	370c      	adds	r7, #12
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr

0800fb06 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fb06:	b480      	push	{r7}
 800fb08:	b087      	sub	sp, #28
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	60f8      	str	r0, [r7, #12]
 800fb0e:	60b9      	str	r1, [r7, #8]
 800fb10:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb18:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	68ba      	ldr	r2, [r7, #8]
 800fb1e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800fb2a:	2300      	movs	r3, #0
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	371c      	adds	r7, #28
 800fb30:	46bd      	mov	sp, r7
 800fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb36:	4770      	bx	lr

0800fb38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b085      	sub	sp, #20
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb48:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	683a      	ldr	r2, [r7, #0]
 800fb4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800fb52:	2300      	movs	r3, #0
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3714      	adds	r7, #20
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr

0800fb60 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb6e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800fb70:	2301      	movs	r3, #1
 800fb72:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d101      	bne.n	800fb82 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fb7e:	2303      	movs	r3, #3
 800fb80:	e01a      	b.n	800fbb8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d114      	bne.n	800fbb6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	2201      	movs	r2, #1
 800fb90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fbaa:	2181      	movs	r1, #129	; 0x81
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f005 fa08 	bl	8014fc2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3710      	adds	r7, #16
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fbce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d101      	bne.n	800fbde <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fbda:	2303      	movs	r3, #3
 800fbdc:	e016      	b.n	800fc0c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	7c1b      	ldrb	r3, [r3, #16]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d109      	bne.n	800fbfa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fbec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fbf0:	2101      	movs	r1, #1
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f005 fa06 	bl	8015004 <USBD_LL_PrepareReceive>
 800fbf8:	e007      	b.n	800fc0a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fc00:	2340      	movs	r3, #64	; 0x40
 800fc02:	2101      	movs	r1, #1
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f005 f9fd 	bl	8015004 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3710      	adds	r7, #16
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b086      	sub	sp, #24
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	4613      	mov	r3, r2
 800fc20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d101      	bne.n	800fc2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fc28:	2303      	movs	r3, #3
 800fc2a:	e025      	b.n	800fc78 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d003      	beq.n	800fc3e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d003      	beq.n	800fc50 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d003      	beq.n	800fc5e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	68ba      	ldr	r2, [r7, #8]
 800fc5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2201      	movs	r2, #1
 800fc62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	79fa      	ldrb	r2, [r7, #7]
 800fc6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f005 f86f 	bl	8014d50 <USBD_LL_Init>
 800fc72:	4603      	mov	r3, r0
 800fc74:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fc76:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3718      	adds	r7, #24
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d101      	bne.n	800fc98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800fc94:	2303      	movs	r3, #3
 800fc96:	e010      	b.n	800fcba <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	683a      	ldr	r2, [r7, #0]
 800fc9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fca8:	f107 020e 	add.w	r2, r7, #14
 800fcac:	4610      	mov	r0, r2
 800fcae:	4798      	blx	r3
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800fcb8:	2300      	movs	r3, #0
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b082      	sub	sp, #8
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f005 f890 	bl	8014df0 <USBD_LL_Start>
 800fcd0:	4603      	mov	r3, r0
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3708      	adds	r7, #8
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800fcda:	b480      	push	{r7}
 800fcdc:	b083      	sub	sp, #12
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fce2:	2300      	movs	r3, #0
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	370c      	adds	r7, #12
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr

0800fcf0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fcfc:	2303      	movs	r3, #3
 800fcfe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d009      	beq.n	800fd1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	78fa      	ldrb	r2, [r7, #3]
 800fd14:	4611      	mov	r1, r2
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	4798      	blx	r3
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800fd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3710      	adds	r7, #16
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	460b      	mov	r3, r1
 800fd32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d007      	beq.n	800fd4e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	78fa      	ldrb	r2, [r7, #3]
 800fd48:	4611      	mov	r1, r2
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	4798      	blx	r3
  }

  return USBD_OK;
 800fd4e:	2300      	movs	r3, #0
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	3708      	adds	r7, #8
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b084      	sub	sp, #16
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fd68:	6839      	ldr	r1, [r7, #0]
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f000 ff2c 	bl	8010bc8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2201      	movs	r2, #1
 800fd74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800fd7e:	461a      	mov	r2, r3
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fd8c:	f003 031f 	and.w	r3, r3, #31
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d00e      	beq.n	800fdb2 <USBD_LL_SetupStage+0x5a>
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d302      	bcc.n	800fd9e <USBD_LL_SetupStage+0x46>
 800fd98:	2b02      	cmp	r3, #2
 800fd9a:	d014      	beq.n	800fdc6 <USBD_LL_SetupStage+0x6e>
 800fd9c:	e01d      	b.n	800fdda <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fda4:	4619      	mov	r1, r3
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 fa18 	bl	80101dc <USBD_StdDevReq>
 800fdac:	4603      	mov	r3, r0
 800fdae:	73fb      	strb	r3, [r7, #15]
      break;
 800fdb0:	e020      	b.n	800fdf4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fdb8:	4619      	mov	r1, r3
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 fa7c 	bl	80102b8 <USBD_StdItfReq>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	73fb      	strb	r3, [r7, #15]
      break;
 800fdc4:	e016      	b.n	800fdf4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fdcc:	4619      	mov	r1, r3
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f000 fab8 	bl	8010344 <USBD_StdEPReq>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	73fb      	strb	r3, [r7, #15]
      break;
 800fdd8:	e00c      	b.n	800fdf4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fde0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fde4:	b2db      	uxtb	r3, r3
 800fde6:	4619      	mov	r1, r3
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f005 f861 	bl	8014eb0 <USBD_LL_StallEP>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	73fb      	strb	r3, [r7, #15]
      break;
 800fdf2:	bf00      	nop
  }

  return ret;
 800fdf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3710      	adds	r7, #16
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}

0800fdfe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b086      	sub	sp, #24
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	60f8      	str	r0, [r7, #12]
 800fe06:	460b      	mov	r3, r1
 800fe08:	607a      	str	r2, [r7, #4]
 800fe0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fe0c:	7afb      	ldrb	r3, [r7, #11]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d137      	bne.n	800fe82 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fe18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe20:	2b03      	cmp	r3, #3
 800fe22:	d14a      	bne.n	800feba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	689a      	ldr	r2, [r3, #8]
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	68db      	ldr	r3, [r3, #12]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d913      	bls.n	800fe58 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	689a      	ldr	r2, [r3, #8]
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	1ad2      	subs	r2, r2, r3
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	68da      	ldr	r2, [r3, #12]
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	689b      	ldr	r3, [r3, #8]
 800fe46:	4293      	cmp	r3, r2
 800fe48:	bf28      	it	cs
 800fe4a:	4613      	movcs	r3, r2
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	6879      	ldr	r1, [r7, #4]
 800fe50:	68f8      	ldr	r0, [r7, #12]
 800fe52:	f000 ffad 	bl	8010db0 <USBD_CtlContinueRx>
 800fe56:	e030      	b.n	800feba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe5e:	691b      	ldr	r3, [r3, #16]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d00a      	beq.n	800fe7a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800fe6a:	2b03      	cmp	r3, #3
 800fe6c:	d105      	bne.n	800fe7a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe74:	691b      	ldr	r3, [r3, #16]
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800fe7a:	68f8      	ldr	r0, [r7, #12]
 800fe7c:	f000 ffa9 	bl	8010dd2 <USBD_CtlSendStatus>
 800fe80:	e01b      	b.n	800feba <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe88:	699b      	ldr	r3, [r3, #24]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d013      	beq.n	800feb6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800fe94:	2b03      	cmp	r3, #3
 800fe96:	d10e      	bne.n	800feb6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe9e:	699b      	ldr	r3, [r3, #24]
 800fea0:	7afa      	ldrb	r2, [r7, #11]
 800fea2:	4611      	mov	r1, r2
 800fea4:	68f8      	ldr	r0, [r7, #12]
 800fea6:	4798      	blx	r3
 800fea8:	4603      	mov	r3, r0
 800feaa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800feac:	7dfb      	ldrb	r3, [r7, #23]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d003      	beq.n	800feba <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800feb2:	7dfb      	ldrb	r3, [r7, #23]
 800feb4:	e002      	b.n	800febc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800feb6:	2303      	movs	r3, #3
 800feb8:	e000      	b.n	800febc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800feba:	2300      	movs	r3, #0
}
 800febc:	4618      	mov	r0, r3
 800febe:	3718      	adds	r7, #24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b086      	sub	sp, #24
 800fec8:	af00      	add	r7, sp, #0
 800feca:	60f8      	str	r0, [r7, #12]
 800fecc:	460b      	mov	r3, r1
 800fece:	607a      	str	r2, [r7, #4]
 800fed0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fed2:	7afb      	ldrb	r3, [r7, #11]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d16a      	bne.n	800ffae <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	3314      	adds	r3, #20
 800fedc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	d155      	bne.n	800ff94 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	689a      	ldr	r2, [r3, #8]
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d914      	bls.n	800ff1e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	689a      	ldr	r2, [r3, #8]
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	1ad2      	subs	r2, r2, r3
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	689b      	ldr	r3, [r3, #8]
 800ff06:	461a      	mov	r2, r3
 800ff08:	6879      	ldr	r1, [r7, #4]
 800ff0a:	68f8      	ldr	r0, [r7, #12]
 800ff0c:	f000 ff22 	bl	8010d54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ff10:	2300      	movs	r3, #0
 800ff12:	2200      	movs	r2, #0
 800ff14:	2100      	movs	r1, #0
 800ff16:	68f8      	ldr	r0, [r7, #12]
 800ff18:	f005 f874 	bl	8015004 <USBD_LL_PrepareReceive>
 800ff1c:	e03a      	b.n	800ff94 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	68da      	ldr	r2, [r3, #12]
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	689b      	ldr	r3, [r3, #8]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d11c      	bne.n	800ff64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	685a      	ldr	r2, [r3, #4]
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d316      	bcc.n	800ff64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	685a      	ldr	r2, [r3, #4]
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d20f      	bcs.n	800ff64 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ff44:	2200      	movs	r2, #0
 800ff46:	2100      	movs	r1, #0
 800ff48:	68f8      	ldr	r0, [r7, #12]
 800ff4a:	f000 ff03 	bl	8010d54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	2200      	movs	r2, #0
 800ff52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ff56:	2300      	movs	r3, #0
 800ff58:	2200      	movs	r2, #0
 800ff5a:	2100      	movs	r1, #0
 800ff5c:	68f8      	ldr	r0, [r7, #12]
 800ff5e:	f005 f851 	bl	8015004 <USBD_LL_PrepareReceive>
 800ff62:	e017      	b.n	800ff94 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d00a      	beq.n	800ff86 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ff76:	2b03      	cmp	r3, #3
 800ff78:	d105      	bne.n	800ff86 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff80:	68db      	ldr	r3, [r3, #12]
 800ff82:	68f8      	ldr	r0, [r7, #12]
 800ff84:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff86:	2180      	movs	r1, #128	; 0x80
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f004 ff91 	bl	8014eb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	f000 ff32 	bl	8010df8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d123      	bne.n	800ffe6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	f7ff fe9b 	bl	800fcda <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ffac:	e01b      	b.n	800ffe6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffb4:	695b      	ldr	r3, [r3, #20]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d013      	beq.n	800ffe2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ffc0:	2b03      	cmp	r3, #3
 800ffc2:	d10e      	bne.n	800ffe2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffca:	695b      	ldr	r3, [r3, #20]
 800ffcc:	7afa      	ldrb	r2, [r7, #11]
 800ffce:	4611      	mov	r1, r2
 800ffd0:	68f8      	ldr	r0, [r7, #12]
 800ffd2:	4798      	blx	r3
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ffd8:	7dfb      	ldrb	r3, [r7, #23]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d003      	beq.n	800ffe6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ffde:	7dfb      	ldrb	r3, [r7, #23]
 800ffe0:	e002      	b.n	800ffe8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ffe2:	2303      	movs	r3, #3
 800ffe4:	e000      	b.n	800ffe8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ffe6:	2300      	movs	r3, #0
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3718      	adds	r7, #24
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b082      	sub	sp, #8
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2201      	movs	r2, #1
 800fffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2200      	movs	r2, #0
 8010012:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801001c:	2b00      	cmp	r3, #0
 801001e:	d009      	beq.n	8010034 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	6852      	ldr	r2, [r2, #4]
 801002c:	b2d2      	uxtb	r2, r2
 801002e:	4611      	mov	r1, r2
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010034:	2340      	movs	r3, #64	; 0x40
 8010036:	2200      	movs	r2, #0
 8010038:	2100      	movs	r1, #0
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f004 fef3 	bl	8014e26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2201      	movs	r2, #1
 8010044:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2240      	movs	r2, #64	; 0x40
 801004c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010050:	2340      	movs	r3, #64	; 0x40
 8010052:	2200      	movs	r2, #0
 8010054:	2180      	movs	r1, #128	; 0x80
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f004 fee5 	bl	8014e26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2201      	movs	r2, #1
 8010060:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2240      	movs	r2, #64	; 0x40
 8010066:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010068:	2300      	movs	r3, #0
}
 801006a:	4618      	mov	r0, r3
 801006c:	3708      	adds	r7, #8
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}

08010072 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010072:	b480      	push	{r7}
 8010074:	b083      	sub	sp, #12
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
 801007a:	460b      	mov	r3, r1
 801007c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	78fa      	ldrb	r2, [r7, #3]
 8010082:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010084:	2300      	movs	r3, #0
}
 8010086:	4618      	mov	r0, r3
 8010088:	370c      	adds	r7, #12
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr

08010092 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010092:	b480      	push	{r7}
 8010094:	b083      	sub	sp, #12
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2204      	movs	r2, #4
 80100aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80100ae:	2300      	movs	r3, #0
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr

080100bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80100bc:	b480      	push	{r7}
 80100be:	b083      	sub	sp, #12
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100ca:	2b04      	cmp	r3, #4
 80100cc:	d105      	bne.n	80100da <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80100da:	2300      	movs	r3, #0
}
 80100dc:	4618      	mov	r0, r3
 80100de:	370c      	adds	r7, #12
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr

080100e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100f6:	2b03      	cmp	r3, #3
 80100f8:	d10b      	bne.n	8010112 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010100:	69db      	ldr	r3, [r3, #28]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d005      	beq.n	8010112 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801010c:	69db      	ldr	r3, [r3, #28]
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010112:	2300      	movs	r3, #0
}
 8010114:	4618      	mov	r0, r3
 8010116:	3708      	adds	r7, #8
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	460b      	mov	r3, r1
 8010126:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010128:	2300      	movs	r3, #0
}
 801012a:	4618      	mov	r0, r3
 801012c:	370c      	adds	r7, #12
 801012e:	46bd      	mov	sp, r7
 8010130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010134:	4770      	bx	lr

08010136 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010136:	b480      	push	{r7}
 8010138:	b083      	sub	sp, #12
 801013a:	af00      	add	r7, sp, #0
 801013c:	6078      	str	r0, [r7, #4]
 801013e:	460b      	mov	r3, r1
 8010140:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010142:	2300      	movs	r3, #0
}
 8010144:	4618      	mov	r0, r3
 8010146:	370c      	adds	r7, #12
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr

08010150 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010150:	b480      	push	{r7}
 8010152:	b083      	sub	sp, #12
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010158:	2300      	movs	r3, #0
}
 801015a:	4618      	mov	r0, r3
 801015c:	370c      	adds	r7, #12
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr

08010166 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b082      	sub	sp, #8
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2201      	movs	r2, #1
 8010172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801017c:	2b00      	cmp	r3, #0
 801017e:	d009      	beq.n	8010194 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	6852      	ldr	r2, [r2, #4]
 801018c:	b2d2      	uxtb	r2, r2
 801018e:	4611      	mov	r1, r2
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	4798      	blx	r3
  }

  return USBD_OK;
 8010194:	2300      	movs	r3, #0
}
 8010196:	4618      	mov	r0, r3
 8010198:	3708      	adds	r7, #8
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}

0801019e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801019e:	b480      	push	{r7}
 80101a0:	b087      	sub	sp, #28
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	3301      	adds	r3, #1
 80101b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80101bc:	8a3b      	ldrh	r3, [r7, #16]
 80101be:	021b      	lsls	r3, r3, #8
 80101c0:	b21a      	sxth	r2, r3
 80101c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80101c6:	4313      	orrs	r3, r2
 80101c8:	b21b      	sxth	r3, r3
 80101ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80101cc:	89fb      	ldrh	r3, [r7, #14]
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	371c      	adds	r7, #28
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr
	...

080101dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80101e6:	2300      	movs	r3, #0
 80101e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80101f2:	2b20      	cmp	r3, #32
 80101f4:	d004      	beq.n	8010200 <USBD_StdDevReq+0x24>
 80101f6:	2b40      	cmp	r3, #64	; 0x40
 80101f8:	d002      	beq.n	8010200 <USBD_StdDevReq+0x24>
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d00a      	beq.n	8010214 <USBD_StdDevReq+0x38>
 80101fe:	e050      	b.n	80102a2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	6839      	ldr	r1, [r7, #0]
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	4798      	blx	r3
 801020e:	4603      	mov	r3, r0
 8010210:	73fb      	strb	r3, [r7, #15]
    break;
 8010212:	e04b      	b.n	80102ac <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	785b      	ldrb	r3, [r3, #1]
 8010218:	2b09      	cmp	r3, #9
 801021a:	d83c      	bhi.n	8010296 <USBD_StdDevReq+0xba>
 801021c:	a201      	add	r2, pc, #4	; (adr r2, 8010224 <USBD_StdDevReq+0x48>)
 801021e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010222:	bf00      	nop
 8010224:	08010279 	.word	0x08010279
 8010228:	0801028d 	.word	0x0801028d
 801022c:	08010297 	.word	0x08010297
 8010230:	08010283 	.word	0x08010283
 8010234:	08010297 	.word	0x08010297
 8010238:	08010257 	.word	0x08010257
 801023c:	0801024d 	.word	0x0801024d
 8010240:	08010297 	.word	0x08010297
 8010244:	0801026f 	.word	0x0801026f
 8010248:	08010261 	.word	0x08010261
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 801024c:	6839      	ldr	r1, [r7, #0]
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 f9ce 	bl	80105f0 <USBD_GetDescriptor>
      break;
 8010254:	e024      	b.n	80102a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8010256:	6839      	ldr	r1, [r7, #0]
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f000 fb33 	bl	80108c4 <USBD_SetAddress>
      break;
 801025e:	e01f      	b.n	80102a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8010260:	6839      	ldr	r1, [r7, #0]
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 fb70 	bl	8010948 <USBD_SetConfig>
 8010268:	4603      	mov	r3, r0
 801026a:	73fb      	strb	r3, [r7, #15]
      break;
 801026c:	e018      	b.n	80102a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801026e:	6839      	ldr	r1, [r7, #0]
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f000 fc0d 	bl	8010a90 <USBD_GetConfig>
      break;
 8010276:	e013      	b.n	80102a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8010278:	6839      	ldr	r1, [r7, #0]
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 fc3c 	bl	8010af8 <USBD_GetStatus>
      break;
 8010280:	e00e      	b.n	80102a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8010282:	6839      	ldr	r1, [r7, #0]
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 fc6a 	bl	8010b5e <USBD_SetFeature>
      break;
 801028a:	e009      	b.n	80102a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801028c:	6839      	ldr	r1, [r7, #0]
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f000 fc79 	bl	8010b86 <USBD_ClrFeature>
      break;
 8010294:	e004      	b.n	80102a0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8010296:	6839      	ldr	r1, [r7, #0]
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 fccf 	bl	8010c3c <USBD_CtlError>
      break;
 801029e:	bf00      	nop
    }
    break;
 80102a0:	e004      	b.n	80102ac <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80102a2:	6839      	ldr	r1, [r7, #0]
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f000 fcc9 	bl	8010c3c <USBD_CtlError>
    break;
 80102aa:	bf00      	nop
  }

  return ret;
 80102ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop

080102b8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b084      	sub	sp, #16
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80102c2:	2300      	movs	r3, #0
 80102c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80102ce:	2b20      	cmp	r3, #32
 80102d0:	d003      	beq.n	80102da <USBD_StdItfReq+0x22>
 80102d2:	2b40      	cmp	r3, #64	; 0x40
 80102d4:	d001      	beq.n	80102da <USBD_StdItfReq+0x22>
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d12a      	bne.n	8010330 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102e0:	3b01      	subs	r3, #1
 80102e2:	2b02      	cmp	r3, #2
 80102e4:	d81d      	bhi.n	8010322 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	889b      	ldrh	r3, [r3, #4]
 80102ea:	b2db      	uxtb	r3, r3
 80102ec:	2b01      	cmp	r3, #1
 80102ee:	d813      	bhi.n	8010318 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102f6:	689b      	ldr	r3, [r3, #8]
 80102f8:	6839      	ldr	r1, [r7, #0]
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	4798      	blx	r3
 80102fe:	4603      	mov	r3, r0
 8010300:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	88db      	ldrh	r3, [r3, #6]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d110      	bne.n	801032c <USBD_StdItfReq+0x74>
 801030a:	7bfb      	ldrb	r3, [r7, #15]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d10d      	bne.n	801032c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f000 fd5e 	bl	8010dd2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010316:	e009      	b.n	801032c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8010318:	6839      	ldr	r1, [r7, #0]
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 fc8e 	bl	8010c3c <USBD_CtlError>
      break;
 8010320:	e004      	b.n	801032c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8010322:	6839      	ldr	r1, [r7, #0]
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f000 fc89 	bl	8010c3c <USBD_CtlError>
      break;
 801032a:	e000      	b.n	801032e <USBD_StdItfReq+0x76>
      break;
 801032c:	bf00      	nop
    }
    break;
 801032e:	e004      	b.n	801033a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8010330:	6839      	ldr	r1, [r7, #0]
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f000 fc82 	bl	8010c3c <USBD_CtlError>
    break;
 8010338:	bf00      	nop
  }

  return ret;
 801033a:	7bfb      	ldrb	r3, [r7, #15]
}
 801033c:	4618      	mov	r0, r3
 801033e:	3710      	adds	r7, #16
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801034e:	2300      	movs	r3, #0
 8010350:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	889b      	ldrh	r3, [r3, #4]
 8010356:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010360:	2b20      	cmp	r3, #32
 8010362:	d004      	beq.n	801036e <USBD_StdEPReq+0x2a>
 8010364:	2b40      	cmp	r3, #64	; 0x40
 8010366:	d002      	beq.n	801036e <USBD_StdEPReq+0x2a>
 8010368:	2b00      	cmp	r3, #0
 801036a:	d00a      	beq.n	8010382 <USBD_StdEPReq+0x3e>
 801036c:	e135      	b.n	80105da <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010374:	689b      	ldr	r3, [r3, #8]
 8010376:	6839      	ldr	r1, [r7, #0]
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	4798      	blx	r3
 801037c:	4603      	mov	r3, r0
 801037e:	73fb      	strb	r3, [r7, #15]
    break;
 8010380:	e130      	b.n	80105e4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	785b      	ldrb	r3, [r3, #1]
 8010386:	2b01      	cmp	r3, #1
 8010388:	d03e      	beq.n	8010408 <USBD_StdEPReq+0xc4>
 801038a:	2b03      	cmp	r3, #3
 801038c:	d002      	beq.n	8010394 <USBD_StdEPReq+0x50>
 801038e:	2b00      	cmp	r3, #0
 8010390:	d077      	beq.n	8010482 <USBD_StdEPReq+0x13e>
 8010392:	e11c      	b.n	80105ce <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801039a:	2b02      	cmp	r3, #2
 801039c:	d002      	beq.n	80103a4 <USBD_StdEPReq+0x60>
 801039e:	2b03      	cmp	r3, #3
 80103a0:	d015      	beq.n	80103ce <USBD_StdEPReq+0x8a>
 80103a2:	e02b      	b.n	80103fc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80103a4:	7bbb      	ldrb	r3, [r7, #14]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00c      	beq.n	80103c4 <USBD_StdEPReq+0x80>
 80103aa:	7bbb      	ldrb	r3, [r7, #14]
 80103ac:	2b80      	cmp	r3, #128	; 0x80
 80103ae:	d009      	beq.n	80103c4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80103b0:	7bbb      	ldrb	r3, [r7, #14]
 80103b2:	4619      	mov	r1, r3
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f004 fd7b 	bl	8014eb0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80103ba:	2180      	movs	r1, #128	; 0x80
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f004 fd77 	bl	8014eb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80103c2:	e020      	b.n	8010406 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80103c4:	6839      	ldr	r1, [r7, #0]
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f000 fc38 	bl	8010c3c <USBD_CtlError>
        break;
 80103cc:	e01b      	b.n	8010406 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	885b      	ldrh	r3, [r3, #2]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d10e      	bne.n	80103f4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80103d6:	7bbb      	ldrb	r3, [r7, #14]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d00b      	beq.n	80103f4 <USBD_StdEPReq+0xb0>
 80103dc:	7bbb      	ldrb	r3, [r7, #14]
 80103de:	2b80      	cmp	r3, #128	; 0x80
 80103e0:	d008      	beq.n	80103f4 <USBD_StdEPReq+0xb0>
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	88db      	ldrh	r3, [r3, #6]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d104      	bne.n	80103f4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80103ea:	7bbb      	ldrb	r3, [r7, #14]
 80103ec:	4619      	mov	r1, r3
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f004 fd5e 	bl	8014eb0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f000 fcec 	bl	8010dd2 <USBD_CtlSendStatus>

        break;
 80103fa:	e004      	b.n	8010406 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80103fc:	6839      	ldr	r1, [r7, #0]
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 fc1c 	bl	8010c3c <USBD_CtlError>
        break;
 8010404:	bf00      	nop
      }
      break;
 8010406:	e0e7      	b.n	80105d8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801040e:	2b02      	cmp	r3, #2
 8010410:	d002      	beq.n	8010418 <USBD_StdEPReq+0xd4>
 8010412:	2b03      	cmp	r3, #3
 8010414:	d015      	beq.n	8010442 <USBD_StdEPReq+0xfe>
 8010416:	e02d      	b.n	8010474 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010418:	7bbb      	ldrb	r3, [r7, #14]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d00c      	beq.n	8010438 <USBD_StdEPReq+0xf4>
 801041e:	7bbb      	ldrb	r3, [r7, #14]
 8010420:	2b80      	cmp	r3, #128	; 0x80
 8010422:	d009      	beq.n	8010438 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010424:	7bbb      	ldrb	r3, [r7, #14]
 8010426:	4619      	mov	r1, r3
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f004 fd41 	bl	8014eb0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801042e:	2180      	movs	r1, #128	; 0x80
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f004 fd3d 	bl	8014eb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010436:	e023      	b.n	8010480 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8010438:	6839      	ldr	r1, [r7, #0]
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f000 fbfe 	bl	8010c3c <USBD_CtlError>
        break;
 8010440:	e01e      	b.n	8010480 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	885b      	ldrh	r3, [r3, #2]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d119      	bne.n	801047e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801044a:	7bbb      	ldrb	r3, [r7, #14]
 801044c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010450:	2b00      	cmp	r3, #0
 8010452:	d004      	beq.n	801045e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010454:	7bbb      	ldrb	r3, [r7, #14]
 8010456:	4619      	mov	r1, r3
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f004 fd48 	bl	8014eee <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 fcb7 	bl	8010dd2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	6839      	ldr	r1, [r7, #0]
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	4798      	blx	r3
        }
        break;
 8010472:	e004      	b.n	801047e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8010474:	6839      	ldr	r1, [r7, #0]
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 fbe0 	bl	8010c3c <USBD_CtlError>
        break;
 801047c:	e000      	b.n	8010480 <USBD_StdEPReq+0x13c>
        break;
 801047e:	bf00      	nop
      }
      break;
 8010480:	e0aa      	b.n	80105d8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010488:	2b02      	cmp	r3, #2
 801048a:	d002      	beq.n	8010492 <USBD_StdEPReq+0x14e>
 801048c:	2b03      	cmp	r3, #3
 801048e:	d032      	beq.n	80104f6 <USBD_StdEPReq+0x1b2>
 8010490:	e097      	b.n	80105c2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010492:	7bbb      	ldrb	r3, [r7, #14]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d007      	beq.n	80104a8 <USBD_StdEPReq+0x164>
 8010498:	7bbb      	ldrb	r3, [r7, #14]
 801049a:	2b80      	cmp	r3, #128	; 0x80
 801049c:	d004      	beq.n	80104a8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 801049e:	6839      	ldr	r1, [r7, #0]
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f000 fbcb 	bl	8010c3c <USBD_CtlError>
          break;
 80104a6:	e091      	b.n	80105cc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80104a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	da0b      	bge.n	80104c8 <USBD_StdEPReq+0x184>
 80104b0:	7bbb      	ldrb	r3, [r7, #14]
 80104b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80104b6:	4613      	mov	r3, r2
 80104b8:	009b      	lsls	r3, r3, #2
 80104ba:	4413      	add	r3, r2
 80104bc:	009b      	lsls	r3, r3, #2
 80104be:	3310      	adds	r3, #16
 80104c0:	687a      	ldr	r2, [r7, #4]
 80104c2:	4413      	add	r3, r2
 80104c4:	3304      	adds	r3, #4
 80104c6:	e00b      	b.n	80104e0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80104c8:	7bbb      	ldrb	r3, [r7, #14]
 80104ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80104ce:	4613      	mov	r3, r2
 80104d0:	009b      	lsls	r3, r3, #2
 80104d2:	4413      	add	r3, r2
 80104d4:	009b      	lsls	r3, r3, #2
 80104d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	4413      	add	r3, r2
 80104de:	3304      	adds	r3, #4
 80104e0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	2200      	movs	r2, #0
 80104e6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	2202      	movs	r2, #2
 80104ec:	4619      	mov	r1, r3
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 fc15 	bl	8010d1e <USBD_CtlSendData>
        break;
 80104f4:	e06a      	b.n	80105cc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80104f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	da11      	bge.n	8010522 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80104fe:	7bbb      	ldrb	r3, [r7, #14]
 8010500:	f003 020f 	and.w	r2, r3, #15
 8010504:	6879      	ldr	r1, [r7, #4]
 8010506:	4613      	mov	r3, r2
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	4413      	add	r3, r2
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	440b      	add	r3, r1
 8010510:	3324      	adds	r3, #36	; 0x24
 8010512:	881b      	ldrh	r3, [r3, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d117      	bne.n	8010548 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8010518:	6839      	ldr	r1, [r7, #0]
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f000 fb8e 	bl	8010c3c <USBD_CtlError>
            break;
 8010520:	e054      	b.n	80105cc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010522:	7bbb      	ldrb	r3, [r7, #14]
 8010524:	f003 020f 	and.w	r2, r3, #15
 8010528:	6879      	ldr	r1, [r7, #4]
 801052a:	4613      	mov	r3, r2
 801052c:	009b      	lsls	r3, r3, #2
 801052e:	4413      	add	r3, r2
 8010530:	009b      	lsls	r3, r3, #2
 8010532:	440b      	add	r3, r1
 8010534:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010538:	881b      	ldrh	r3, [r3, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d104      	bne.n	8010548 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 801053e:	6839      	ldr	r1, [r7, #0]
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 fb7b 	bl	8010c3c <USBD_CtlError>
            break;
 8010546:	e041      	b.n	80105cc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801054c:	2b00      	cmp	r3, #0
 801054e:	da0b      	bge.n	8010568 <USBD_StdEPReq+0x224>
 8010550:	7bbb      	ldrb	r3, [r7, #14]
 8010552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010556:	4613      	mov	r3, r2
 8010558:	009b      	lsls	r3, r3, #2
 801055a:	4413      	add	r3, r2
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	3310      	adds	r3, #16
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	4413      	add	r3, r2
 8010564:	3304      	adds	r3, #4
 8010566:	e00b      	b.n	8010580 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8010568:	7bbb      	ldrb	r3, [r7, #14]
 801056a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801056e:	4613      	mov	r3, r2
 8010570:	009b      	lsls	r3, r3, #2
 8010572:	4413      	add	r3, r2
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801057a:	687a      	ldr	r2, [r7, #4]
 801057c:	4413      	add	r3, r2
 801057e:	3304      	adds	r3, #4
 8010580:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010582:	7bbb      	ldrb	r3, [r7, #14]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d002      	beq.n	801058e <USBD_StdEPReq+0x24a>
 8010588:	7bbb      	ldrb	r3, [r7, #14]
 801058a:	2b80      	cmp	r3, #128	; 0x80
 801058c:	d103      	bne.n	8010596 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	2200      	movs	r2, #0
 8010592:	601a      	str	r2, [r3, #0]
 8010594:	e00e      	b.n	80105b4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010596:	7bbb      	ldrb	r3, [r7, #14]
 8010598:	4619      	mov	r1, r3
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f004 fcc6 	bl	8014f2c <USBD_LL_IsStallEP>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d003      	beq.n	80105ae <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	2201      	movs	r2, #1
 80105aa:	601a      	str	r2, [r3, #0]
 80105ac:	e002      	b.n	80105b4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	2200      	movs	r2, #0
 80105b2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	2202      	movs	r2, #2
 80105b8:	4619      	mov	r1, r3
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 fbaf 	bl	8010d1e <USBD_CtlSendData>
          break;
 80105c0:	e004      	b.n	80105cc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80105c2:	6839      	ldr	r1, [r7, #0]
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f000 fb39 	bl	8010c3c <USBD_CtlError>
        break;
 80105ca:	bf00      	nop
      }
      break;
 80105cc:	e004      	b.n	80105d8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80105ce:	6839      	ldr	r1, [r7, #0]
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f000 fb33 	bl	8010c3c <USBD_CtlError>
      break;
 80105d6:	bf00      	nop
    }
    break;
 80105d8:	e004      	b.n	80105e4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80105da:	6839      	ldr	r1, [r7, #0]
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f000 fb2d 	bl	8010c3c <USBD_CtlError>
    break;
 80105e2:	bf00      	nop
  }

  return ret;
 80105e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3710      	adds	r7, #16
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
	...

080105f0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b084      	sub	sp, #16
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80105fa:	2300      	movs	r3, #0
 80105fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80105fe:	2300      	movs	r3, #0
 8010600:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010602:	2300      	movs	r3, #0
 8010604:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	885b      	ldrh	r3, [r3, #2]
 801060a:	0a1b      	lsrs	r3, r3, #8
 801060c:	b29b      	uxth	r3, r3
 801060e:	3b01      	subs	r3, #1
 8010610:	2b06      	cmp	r3, #6
 8010612:	f200 8128 	bhi.w	8010866 <USBD_GetDescriptor+0x276>
 8010616:	a201      	add	r2, pc, #4	; (adr r2, 801061c <USBD_GetDescriptor+0x2c>)
 8010618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801061c:	08010639 	.word	0x08010639
 8010620:	08010651 	.word	0x08010651
 8010624:	08010691 	.word	0x08010691
 8010628:	08010867 	.word	0x08010867
 801062c:	08010867 	.word	0x08010867
 8010630:	08010807 	.word	0x08010807
 8010634:	08010833 	.word	0x08010833
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	7c12      	ldrb	r2, [r2, #16]
 8010644:	f107 0108 	add.w	r1, r7, #8
 8010648:	4610      	mov	r0, r2
 801064a:	4798      	blx	r3
 801064c:	60f8      	str	r0, [r7, #12]
    break;
 801064e:	e112      	b.n	8010876 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	7c1b      	ldrb	r3, [r3, #16]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d10d      	bne.n	8010674 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801065e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010660:	f107 0208 	add.w	r2, r7, #8
 8010664:	4610      	mov	r0, r2
 8010666:	4798      	blx	r3
 8010668:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	3301      	adds	r3, #1
 801066e:	2202      	movs	r2, #2
 8010670:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8010672:	e100      	b.n	8010876 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801067a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801067c:	f107 0208 	add.w	r2, r7, #8
 8010680:	4610      	mov	r0, r2
 8010682:	4798      	blx	r3
 8010684:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	3301      	adds	r3, #1
 801068a:	2202      	movs	r2, #2
 801068c:	701a      	strb	r2, [r3, #0]
    break;
 801068e:	e0f2      	b.n	8010876 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	885b      	ldrh	r3, [r3, #2]
 8010694:	b2db      	uxtb	r3, r3
 8010696:	2b05      	cmp	r3, #5
 8010698:	f200 80ac 	bhi.w	80107f4 <USBD_GetDescriptor+0x204>
 801069c:	a201      	add	r2, pc, #4	; (adr r2, 80106a4 <USBD_GetDescriptor+0xb4>)
 801069e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106a2:	bf00      	nop
 80106a4:	080106bd 	.word	0x080106bd
 80106a8:	080106f1 	.word	0x080106f1
 80106ac:	08010725 	.word	0x08010725
 80106b0:	08010759 	.word	0x08010759
 80106b4:	0801078d 	.word	0x0801078d
 80106b8:	080107c1 	.word	0x080107c1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d00b      	beq.n	80106e0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	7c12      	ldrb	r2, [r2, #16]
 80106d4:	f107 0108 	add.w	r1, r7, #8
 80106d8:	4610      	mov	r0, r2
 80106da:	4798      	blx	r3
 80106dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80106de:	e091      	b.n	8010804 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80106e0:	6839      	ldr	r1, [r7, #0]
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f000 faaa 	bl	8010c3c <USBD_CtlError>
        err++;
 80106e8:	7afb      	ldrb	r3, [r7, #11]
 80106ea:	3301      	adds	r3, #1
 80106ec:	72fb      	strb	r3, [r7, #11]
      break;
 80106ee:	e089      	b.n	8010804 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106f6:	689b      	ldr	r3, [r3, #8]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d00b      	beq.n	8010714 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	7c12      	ldrb	r2, [r2, #16]
 8010708:	f107 0108 	add.w	r1, r7, #8
 801070c:	4610      	mov	r0, r2
 801070e:	4798      	blx	r3
 8010710:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010712:	e077      	b.n	8010804 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010714:	6839      	ldr	r1, [r7, #0]
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 fa90 	bl	8010c3c <USBD_CtlError>
        err++;
 801071c:	7afb      	ldrb	r3, [r7, #11]
 801071e:	3301      	adds	r3, #1
 8010720:	72fb      	strb	r3, [r7, #11]
      break;
 8010722:	e06f      	b.n	8010804 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801072a:	68db      	ldr	r3, [r3, #12]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d00b      	beq.n	8010748 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010736:	68db      	ldr	r3, [r3, #12]
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	7c12      	ldrb	r2, [r2, #16]
 801073c:	f107 0108 	add.w	r1, r7, #8
 8010740:	4610      	mov	r0, r2
 8010742:	4798      	blx	r3
 8010744:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010746:	e05d      	b.n	8010804 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010748:	6839      	ldr	r1, [r7, #0]
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 fa76 	bl	8010c3c <USBD_CtlError>
        err++;
 8010750:	7afb      	ldrb	r3, [r7, #11]
 8010752:	3301      	adds	r3, #1
 8010754:	72fb      	strb	r3, [r7, #11]
      break;
 8010756:	e055      	b.n	8010804 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801075e:	691b      	ldr	r3, [r3, #16]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d00b      	beq.n	801077c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801076a:	691b      	ldr	r3, [r3, #16]
 801076c:	687a      	ldr	r2, [r7, #4]
 801076e:	7c12      	ldrb	r2, [r2, #16]
 8010770:	f107 0108 	add.w	r1, r7, #8
 8010774:	4610      	mov	r0, r2
 8010776:	4798      	blx	r3
 8010778:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801077a:	e043      	b.n	8010804 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801077c:	6839      	ldr	r1, [r7, #0]
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f000 fa5c 	bl	8010c3c <USBD_CtlError>
        err++;
 8010784:	7afb      	ldrb	r3, [r7, #11]
 8010786:	3301      	adds	r3, #1
 8010788:	72fb      	strb	r3, [r7, #11]
      break;
 801078a:	e03b      	b.n	8010804 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010792:	695b      	ldr	r3, [r3, #20]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d00b      	beq.n	80107b0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801079e:	695b      	ldr	r3, [r3, #20]
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	7c12      	ldrb	r2, [r2, #16]
 80107a4:	f107 0108 	add.w	r1, r7, #8
 80107a8:	4610      	mov	r0, r2
 80107aa:	4798      	blx	r3
 80107ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80107ae:	e029      	b.n	8010804 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80107b0:	6839      	ldr	r1, [r7, #0]
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 fa42 	bl	8010c3c <USBD_CtlError>
        err++;
 80107b8:	7afb      	ldrb	r3, [r7, #11]
 80107ba:	3301      	adds	r3, #1
 80107bc:	72fb      	strb	r3, [r7, #11]
      break;
 80107be:	e021      	b.n	8010804 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80107c6:	699b      	ldr	r3, [r3, #24]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d00b      	beq.n	80107e4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80107d2:	699b      	ldr	r3, [r3, #24]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	7c12      	ldrb	r2, [r2, #16]
 80107d8:	f107 0108 	add.w	r1, r7, #8
 80107dc:	4610      	mov	r0, r2
 80107de:	4798      	blx	r3
 80107e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80107e2:	e00f      	b.n	8010804 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80107e4:	6839      	ldr	r1, [r7, #0]
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 fa28 	bl	8010c3c <USBD_CtlError>
        err++;
 80107ec:	7afb      	ldrb	r3, [r7, #11]
 80107ee:	3301      	adds	r3, #1
 80107f0:	72fb      	strb	r3, [r7, #11]
      break;
 80107f2:	e007      	b.n	8010804 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80107f4:	6839      	ldr	r1, [r7, #0]
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f000 fa20 	bl	8010c3c <USBD_CtlError>
      err++;
 80107fc:	7afb      	ldrb	r3, [r7, #11]
 80107fe:	3301      	adds	r3, #1
 8010800:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8010802:	bf00      	nop
    }
    break;
 8010804:	e037      	b.n	8010876 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	7c1b      	ldrb	r3, [r3, #16]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d109      	bne.n	8010822 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010816:	f107 0208 	add.w	r2, r7, #8
 801081a:	4610      	mov	r0, r2
 801081c:	4798      	blx	r3
 801081e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010820:	e029      	b.n	8010876 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8010822:	6839      	ldr	r1, [r7, #0]
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f000 fa09 	bl	8010c3c <USBD_CtlError>
      err++;
 801082a:	7afb      	ldrb	r3, [r7, #11]
 801082c:	3301      	adds	r3, #1
 801082e:	72fb      	strb	r3, [r7, #11]
    break;
 8010830:	e021      	b.n	8010876 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	7c1b      	ldrb	r3, [r3, #16]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d10d      	bne.n	8010856 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010842:	f107 0208 	add.w	r2, r7, #8
 8010846:	4610      	mov	r0, r2
 8010848:	4798      	blx	r3
 801084a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	3301      	adds	r3, #1
 8010850:	2207      	movs	r2, #7
 8010852:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010854:	e00f      	b.n	8010876 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8010856:	6839      	ldr	r1, [r7, #0]
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 f9ef 	bl	8010c3c <USBD_CtlError>
      err++;
 801085e:	7afb      	ldrb	r3, [r7, #11]
 8010860:	3301      	adds	r3, #1
 8010862:	72fb      	strb	r3, [r7, #11]
    break;
 8010864:	e007      	b.n	8010876 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8010866:	6839      	ldr	r1, [r7, #0]
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f000 f9e7 	bl	8010c3c <USBD_CtlError>
    err++;
 801086e:	7afb      	ldrb	r3, [r7, #11]
 8010870:	3301      	adds	r3, #1
 8010872:	72fb      	strb	r3, [r7, #11]
    break;
 8010874:	bf00      	nop
  }

  if (err != 0U)
 8010876:	7afb      	ldrb	r3, [r7, #11]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d11e      	bne.n	80108ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	88db      	ldrh	r3, [r3, #6]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d016      	beq.n	80108b2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8010884:	893b      	ldrh	r3, [r7, #8]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d00e      	beq.n	80108a8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	88da      	ldrh	r2, [r3, #6]
 801088e:	893b      	ldrh	r3, [r7, #8]
 8010890:	4293      	cmp	r3, r2
 8010892:	bf28      	it	cs
 8010894:	4613      	movcs	r3, r2
 8010896:	b29b      	uxth	r3, r3
 8010898:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801089a:	893b      	ldrh	r3, [r7, #8]
 801089c:	461a      	mov	r2, r3
 801089e:	68f9      	ldr	r1, [r7, #12]
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f000 fa3c 	bl	8010d1e <USBD_CtlSendData>
 80108a6:	e009      	b.n	80108bc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80108a8:	6839      	ldr	r1, [r7, #0]
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f000 f9c6 	bl	8010c3c <USBD_CtlError>
 80108b0:	e004      	b.n	80108bc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f000 fa8d 	bl	8010dd2 <USBD_CtlSendStatus>
 80108b8:	e000      	b.n	80108bc <USBD_GetDescriptor+0x2cc>
    return;
 80108ba:	bf00      	nop
    }
  }
}
 80108bc:	3710      	adds	r7, #16
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop

080108c4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	889b      	ldrh	r3, [r3, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d130      	bne.n	8010938 <USBD_SetAddress+0x74>
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	88db      	ldrh	r3, [r3, #6]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d12c      	bne.n	8010938 <USBD_SetAddress+0x74>
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	885b      	ldrh	r3, [r3, #2]
 80108e2:	2b7f      	cmp	r3, #127	; 0x7f
 80108e4:	d828      	bhi.n	8010938 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	885b      	ldrh	r3, [r3, #2]
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108f8:	2b03      	cmp	r3, #3
 80108fa:	d104      	bne.n	8010906 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80108fc:	6839      	ldr	r1, [r7, #0]
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f000 f99c 	bl	8010c3c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010904:	e01c      	b.n	8010940 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	7bfa      	ldrb	r2, [r7, #15]
 801090a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801090e:	7bfb      	ldrb	r3, [r7, #15]
 8010910:	4619      	mov	r1, r3
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f004 fb36 	bl	8014f84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f000 fa5a 	bl	8010dd2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801091e:	7bfb      	ldrb	r3, [r7, #15]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d004      	beq.n	801092e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2202      	movs	r2, #2
 8010928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801092c:	e008      	b.n	8010940 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2201      	movs	r2, #1
 8010932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010936:	e003      	b.n	8010940 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010938:	6839      	ldr	r1, [r7, #0]
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f000 f97e 	bl	8010c3c <USBD_CtlError>
  }
}
 8010940:	bf00      	nop
 8010942:	3710      	adds	r7, #16
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}

08010948 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010952:	2300      	movs	r3, #0
 8010954:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	885b      	ldrh	r3, [r3, #2]
 801095a:	b2da      	uxtb	r2, r3
 801095c:	4b4b      	ldr	r3, [pc, #300]	; (8010a8c <USBD_SetConfig+0x144>)
 801095e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010960:	4b4a      	ldr	r3, [pc, #296]	; (8010a8c <USBD_SetConfig+0x144>)
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	2b01      	cmp	r3, #1
 8010966:	d905      	bls.n	8010974 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010968:	6839      	ldr	r1, [r7, #0]
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 f966 	bl	8010c3c <USBD_CtlError>
    return USBD_FAIL;
 8010970:	2303      	movs	r3, #3
 8010972:	e087      	b.n	8010a84 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801097a:	2b02      	cmp	r3, #2
 801097c:	d002      	beq.n	8010984 <USBD_SetConfig+0x3c>
 801097e:	2b03      	cmp	r3, #3
 8010980:	d025      	beq.n	80109ce <USBD_SetConfig+0x86>
 8010982:	e071      	b.n	8010a68 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8010984:	4b41      	ldr	r3, [pc, #260]	; (8010a8c <USBD_SetConfig+0x144>)
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d01c      	beq.n	80109c6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 801098c:	4b3f      	ldr	r3, [pc, #252]	; (8010a8c <USBD_SetConfig+0x144>)
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	461a      	mov	r2, r3
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010996:	4b3d      	ldr	r3, [pc, #244]	; (8010a8c <USBD_SetConfig+0x144>)
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	4619      	mov	r1, r3
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7ff f9a7 	bl	800fcf0 <USBD_SetClassConfig>
 80109a2:	4603      	mov	r3, r0
 80109a4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80109a6:	7bfb      	ldrb	r3, [r7, #15]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d004      	beq.n	80109b6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80109ac:	6839      	ldr	r1, [r7, #0]
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f000 f944 	bl	8010c3c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80109b4:	e065      	b.n	8010a82 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f000 fa0b 	bl	8010dd2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2203      	movs	r2, #3
 80109c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80109c4:	e05d      	b.n	8010a82 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f000 fa03 	bl	8010dd2 <USBD_CtlSendStatus>
    break;
 80109cc:	e059      	b.n	8010a82 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80109ce:	4b2f      	ldr	r3, [pc, #188]	; (8010a8c <USBD_SetConfig+0x144>)
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d112      	bne.n	80109fc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2202      	movs	r2, #2
 80109da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80109de:	4b2b      	ldr	r3, [pc, #172]	; (8010a8c <USBD_SetConfig+0x144>)
 80109e0:	781b      	ldrb	r3, [r3, #0]
 80109e2:	461a      	mov	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80109e8:	4b28      	ldr	r3, [pc, #160]	; (8010a8c <USBD_SetConfig+0x144>)
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	4619      	mov	r1, r3
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f7ff f99a 	bl	800fd28 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 f9ec 	bl	8010dd2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80109fa:	e042      	b.n	8010a82 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80109fc:	4b23      	ldr	r3, [pc, #140]	; (8010a8c <USBD_SetConfig+0x144>)
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	461a      	mov	r2, r3
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	685b      	ldr	r3, [r3, #4]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d02a      	beq.n	8010a60 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	4619      	mov	r1, r3
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7ff f988 	bl	800fd28 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8010a18:	4b1c      	ldr	r3, [pc, #112]	; (8010a8c <USBD_SetConfig+0x144>)
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010a22:	4b1a      	ldr	r3, [pc, #104]	; (8010a8c <USBD_SetConfig+0x144>)
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	4619      	mov	r1, r3
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f7ff f961 	bl	800fcf0 <USBD_SetClassConfig>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8010a32:	7bfb      	ldrb	r3, [r7, #15]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d00f      	beq.n	8010a58 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8010a38:	6839      	ldr	r1, [r7, #0]
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 f8fe 	bl	8010c3c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	b2db      	uxtb	r3, r3
 8010a46:	4619      	mov	r1, r3
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f7ff f96d 	bl	800fd28 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2202      	movs	r2, #2
 8010a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8010a56:	e014      	b.n	8010a82 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f000 f9ba 	bl	8010dd2 <USBD_CtlSendStatus>
    break;
 8010a5e:	e010      	b.n	8010a82 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f000 f9b6 	bl	8010dd2 <USBD_CtlSendStatus>
    break;
 8010a66:	e00c      	b.n	8010a82 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8010a68:	6839      	ldr	r1, [r7, #0]
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f000 f8e6 	bl	8010c3c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010a70:	4b06      	ldr	r3, [pc, #24]	; (8010a8c <USBD_SetConfig+0x144>)
 8010a72:	781b      	ldrb	r3, [r3, #0]
 8010a74:	4619      	mov	r1, r3
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f7ff f956 	bl	800fd28 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8010a7c:	2303      	movs	r3, #3
 8010a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8010a80:	bf00      	nop
  }

  return ret;
 8010a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3710      	adds	r7, #16
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	24000210 	.word	0x24000210

08010a90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	88db      	ldrh	r3, [r3, #6]
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d004      	beq.n	8010aac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010aa2:	6839      	ldr	r1, [r7, #0]
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f000 f8c9 	bl	8010c3c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8010aaa:	e021      	b.n	8010af0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ab2:	2b01      	cmp	r3, #1
 8010ab4:	db17      	blt.n	8010ae6 <USBD_GetConfig+0x56>
 8010ab6:	2b02      	cmp	r3, #2
 8010ab8:	dd02      	ble.n	8010ac0 <USBD_GetConfig+0x30>
 8010aba:	2b03      	cmp	r3, #3
 8010abc:	d00b      	beq.n	8010ad6 <USBD_GetConfig+0x46>
 8010abe:	e012      	b.n	8010ae6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	3308      	adds	r3, #8
 8010aca:	2201      	movs	r2, #1
 8010acc:	4619      	mov	r1, r3
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 f925 	bl	8010d1e <USBD_CtlSendData>
      break;
 8010ad4:	e00c      	b.n	8010af0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	3304      	adds	r3, #4
 8010ada:	2201      	movs	r2, #1
 8010adc:	4619      	mov	r1, r3
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f000 f91d 	bl	8010d1e <USBD_CtlSendData>
      break;
 8010ae4:	e004      	b.n	8010af0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8010ae6:	6839      	ldr	r1, [r7, #0]
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f000 f8a7 	bl	8010c3c <USBD_CtlError>
      break;
 8010aee:	bf00      	nop
}
 8010af0:	bf00      	nop
 8010af2:	3708      	adds	r7, #8
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b08:	3b01      	subs	r3, #1
 8010b0a:	2b02      	cmp	r3, #2
 8010b0c:	d81e      	bhi.n	8010b4c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	88db      	ldrh	r3, [r3, #6]
 8010b12:	2b02      	cmp	r3, #2
 8010b14:	d004      	beq.n	8010b20 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8010b16:	6839      	ldr	r1, [r7, #0]
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f000 f88f 	bl	8010c3c <USBD_CtlError>
      break;
 8010b1e:	e01a      	b.n	8010b56 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2201      	movs	r2, #1
 8010b24:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d005      	beq.n	8010b3c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	f043 0202 	orr.w	r2, r3, #2
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	330c      	adds	r3, #12
 8010b40:	2202      	movs	r2, #2
 8010b42:	4619      	mov	r1, r3
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f000 f8ea 	bl	8010d1e <USBD_CtlSendData>
    break;
 8010b4a:	e004      	b.n	8010b56 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8010b4c:	6839      	ldr	r1, [r7, #0]
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 f874 	bl	8010c3c <USBD_CtlError>
    break;
 8010b54:	bf00      	nop
  }
}
 8010b56:	bf00      	nop
 8010b58:	3708      	adds	r7, #8
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b082      	sub	sp, #8
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
 8010b66:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	885b      	ldrh	r3, [r3, #2]
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d106      	bne.n	8010b7e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2201      	movs	r2, #1
 8010b74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f000 f92a 	bl	8010dd2 <USBD_CtlSendStatus>
  }
}
 8010b7e:	bf00      	nop
 8010b80:	3708      	adds	r7, #8
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b082      	sub	sp, #8
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b96:	3b01      	subs	r3, #1
 8010b98:	2b02      	cmp	r3, #2
 8010b9a:	d80b      	bhi.n	8010bb4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	885b      	ldrh	r3, [r3, #2]
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d10c      	bne.n	8010bbe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f000 f910 	bl	8010dd2 <USBD_CtlSendStatus>
      }
      break;
 8010bb2:	e004      	b.n	8010bbe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8010bb4:	6839      	ldr	r1, [r7, #0]
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 f840 	bl	8010c3c <USBD_CtlError>
      break;
 8010bbc:	e000      	b.n	8010bc0 <USBD_ClrFeature+0x3a>
      break;
 8010bbe:	bf00      	nop
  }
}
 8010bc0:	bf00      	nop
 8010bc2:	3708      	adds	r7, #8
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b084      	sub	sp, #16
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	781a      	ldrb	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	3301      	adds	r3, #1
 8010be2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	781a      	ldrb	r2, [r3, #0]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f7ff fad3 	bl	801019e <SWAPBYTE>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	3301      	adds	r3, #1
 8010c04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f7ff fac6 	bl	801019e <SWAPBYTE>
 8010c12:	4603      	mov	r3, r0
 8010c14:	461a      	mov	r2, r3
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	3301      	adds	r3, #1
 8010c24:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010c26:	68f8      	ldr	r0, [r7, #12]
 8010c28:	f7ff fab9 	bl	801019e <SWAPBYTE>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	461a      	mov	r2, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	80da      	strh	r2, [r3, #6]
}
 8010c34:	bf00      	nop
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b082      	sub	sp, #8
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c46:	2180      	movs	r1, #128	; 0x80
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f004 f931 	bl	8014eb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010c4e:	2100      	movs	r1, #0
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f004 f92d 	bl	8014eb0 <USBD_LL_StallEP>
}
 8010c56:	bf00      	nop
 8010c58:	3708      	adds	r7, #8
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b086      	sub	sp, #24
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	60f8      	str	r0, [r7, #12]
 8010c66:	60b9      	str	r1, [r7, #8]
 8010c68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d036      	beq.n	8010ce2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010c78:	6938      	ldr	r0, [r7, #16]
 8010c7a:	f000 f836 	bl	8010cea <USBD_GetLen>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	3301      	adds	r3, #1
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	005b      	lsls	r3, r3, #1
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010c8c:	7dfb      	ldrb	r3, [r7, #23]
 8010c8e:	68ba      	ldr	r2, [r7, #8]
 8010c90:	4413      	add	r3, r2
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	7812      	ldrb	r2, [r2, #0]
 8010c96:	701a      	strb	r2, [r3, #0]
  idx++;
 8010c98:	7dfb      	ldrb	r3, [r7, #23]
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010c9e:	7dfb      	ldrb	r3, [r7, #23]
 8010ca0:	68ba      	ldr	r2, [r7, #8]
 8010ca2:	4413      	add	r3, r2
 8010ca4:	2203      	movs	r2, #3
 8010ca6:	701a      	strb	r2, [r3, #0]
  idx++;
 8010ca8:	7dfb      	ldrb	r3, [r7, #23]
 8010caa:	3301      	adds	r3, #1
 8010cac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010cae:	e013      	b.n	8010cd8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010cb0:	7dfb      	ldrb	r3, [r7, #23]
 8010cb2:	68ba      	ldr	r2, [r7, #8]
 8010cb4:	4413      	add	r3, r2
 8010cb6:	693a      	ldr	r2, [r7, #16]
 8010cb8:	7812      	ldrb	r2, [r2, #0]
 8010cba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	3301      	adds	r3, #1
 8010cc0:	613b      	str	r3, [r7, #16]
    idx++;
 8010cc2:	7dfb      	ldrb	r3, [r7, #23]
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010cc8:	7dfb      	ldrb	r3, [r7, #23]
 8010cca:	68ba      	ldr	r2, [r7, #8]
 8010ccc:	4413      	add	r3, r2
 8010cce:	2200      	movs	r2, #0
 8010cd0:	701a      	strb	r2, [r3, #0]
    idx++;
 8010cd2:	7dfb      	ldrb	r3, [r7, #23]
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d1e7      	bne.n	8010cb0 <USBD_GetString+0x52>
 8010ce0:	e000      	b.n	8010ce4 <USBD_GetString+0x86>
    return;
 8010ce2:	bf00      	nop
  }
}
 8010ce4:	3718      	adds	r7, #24
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}

08010cea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010cea:	b480      	push	{r7}
 8010cec:	b085      	sub	sp, #20
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010cfa:	e005      	b.n	8010d08 <USBD_GetLen+0x1e>
  {
    len++;
 8010cfc:	7bfb      	ldrb	r3, [r7, #15]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	3301      	adds	r3, #1
 8010d06:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d1f5      	bne.n	8010cfc <USBD_GetLen+0x12>
  }

  return len;
 8010d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3714      	adds	r7, #20
 8010d16:	46bd      	mov	sp, r7
 8010d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1c:	4770      	bx	lr

08010d1e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010d1e:	b580      	push	{r7, lr}
 8010d20:	b084      	sub	sp, #16
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	60f8      	str	r0, [r7, #12]
 8010d26:	60b9      	str	r1, [r7, #8]
 8010d28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	2202      	movs	r2, #2
 8010d2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	687a      	ldr	r2, [r7, #4]
 8010d3c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	68ba      	ldr	r2, [r7, #8]
 8010d42:	2100      	movs	r1, #0
 8010d44:	68f8      	ldr	r0, [r7, #12]
 8010d46:	f004 f93c 	bl	8014fc2 <USBD_LL_Transmit>

  return USBD_OK;
 8010d4a:	2300      	movs	r3, #0
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3710      	adds	r7, #16
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}

08010d54 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b084      	sub	sp, #16
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	68ba      	ldr	r2, [r7, #8]
 8010d64:	2100      	movs	r1, #0
 8010d66:	68f8      	ldr	r0, [r7, #12]
 8010d68:	f004 f92b 	bl	8014fc2 <USBD_LL_Transmit>

  return USBD_OK;
 8010d6c:	2300      	movs	r3, #0
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3710      	adds	r7, #16
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}

08010d76 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010d76:	b580      	push	{r7, lr}
 8010d78:	b084      	sub	sp, #16
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	60f8      	str	r0, [r7, #12]
 8010d7e:	60b9      	str	r1, [r7, #8]
 8010d80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	2203      	movs	r2, #3
 8010d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	687a      	ldr	r2, [r7, #4]
 8010d8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	2100      	movs	r1, #0
 8010da0:	68f8      	ldr	r0, [r7, #12]
 8010da2:	f004 f92f 	bl	8015004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010da6:	2300      	movs	r3, #0
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3710      	adds	r7, #16
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	60f8      	str	r0, [r7, #12]
 8010db8:	60b9      	str	r1, [r7, #8]
 8010dba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	68ba      	ldr	r2, [r7, #8]
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	68f8      	ldr	r0, [r7, #12]
 8010dc4:	f004 f91e 	bl	8015004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010dc8:	2300      	movs	r3, #0
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3710      	adds	r7, #16
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b082      	sub	sp, #8
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2204      	movs	r2, #4
 8010dde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010de2:	2300      	movs	r3, #0
 8010de4:	2200      	movs	r2, #0
 8010de6:	2100      	movs	r1, #0
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f004 f8ea 	bl	8014fc2 <USBD_LL_Transmit>

  return USBD_OK;
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3708      	adds	r7, #8
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b082      	sub	sp, #8
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2205      	movs	r2, #5
 8010e04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010e08:	2300      	movs	r3, #0
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	2100      	movs	r1, #0
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f004 f8f8 	bl	8015004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010e14:	2300      	movs	r3, #0
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3708      	adds	r7, #8
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
	...

08010e20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b087      	sub	sp, #28
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	60f8      	str	r0, [r7, #12]
 8010e28:	60b9      	str	r1, [r7, #8]
 8010e2a:	4613      	mov	r3, r2
 8010e2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010e32:	2300      	movs	r3, #0
 8010e34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010e36:	4b1f      	ldr	r3, [pc, #124]	; (8010eb4 <FATFS_LinkDriverEx+0x94>)
 8010e38:	7a5b      	ldrb	r3, [r3, #9]
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d131      	bne.n	8010ea4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010e40:	4b1c      	ldr	r3, [pc, #112]	; (8010eb4 <FATFS_LinkDriverEx+0x94>)
 8010e42:	7a5b      	ldrb	r3, [r3, #9]
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	461a      	mov	r2, r3
 8010e48:	4b1a      	ldr	r3, [pc, #104]	; (8010eb4 <FATFS_LinkDriverEx+0x94>)
 8010e4a:	2100      	movs	r1, #0
 8010e4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010e4e:	4b19      	ldr	r3, [pc, #100]	; (8010eb4 <FATFS_LinkDriverEx+0x94>)
 8010e50:	7a5b      	ldrb	r3, [r3, #9]
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	4a17      	ldr	r2, [pc, #92]	; (8010eb4 <FATFS_LinkDriverEx+0x94>)
 8010e56:	009b      	lsls	r3, r3, #2
 8010e58:	4413      	add	r3, r2
 8010e5a:	68fa      	ldr	r2, [r7, #12]
 8010e5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010e5e:	4b15      	ldr	r3, [pc, #84]	; (8010eb4 <FATFS_LinkDriverEx+0x94>)
 8010e60:	7a5b      	ldrb	r3, [r3, #9]
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	461a      	mov	r2, r3
 8010e66:	4b13      	ldr	r3, [pc, #76]	; (8010eb4 <FATFS_LinkDriverEx+0x94>)
 8010e68:	4413      	add	r3, r2
 8010e6a:	79fa      	ldrb	r2, [r7, #7]
 8010e6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010e6e:	4b11      	ldr	r3, [pc, #68]	; (8010eb4 <FATFS_LinkDriverEx+0x94>)
 8010e70:	7a5b      	ldrb	r3, [r3, #9]
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	1c5a      	adds	r2, r3, #1
 8010e76:	b2d1      	uxtb	r1, r2
 8010e78:	4a0e      	ldr	r2, [pc, #56]	; (8010eb4 <FATFS_LinkDriverEx+0x94>)
 8010e7a:	7251      	strb	r1, [r2, #9]
 8010e7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010e7e:	7dbb      	ldrb	r3, [r7, #22]
 8010e80:	3330      	adds	r3, #48	; 0x30
 8010e82:	b2da      	uxtb	r2, r3
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	223a      	movs	r2, #58	; 0x3a
 8010e8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	3302      	adds	r3, #2
 8010e94:	222f      	movs	r2, #47	; 0x2f
 8010e96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	3303      	adds	r3, #3
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	371c      	adds	r7, #28
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr
 8010eb2:	bf00      	nop
 8010eb4:	24000214 	.word	0x24000214

08010eb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	6839      	ldr	r1, [r7, #0]
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f7ff ffaa 	bl	8010e20 <FATFS_LinkDriverEx>
 8010ecc:	4603      	mov	r3, r0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3708      	adds	r7, #8
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010ed6:	b480      	push	{r7}
 8010ed8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8010eda:	bf00      	nop
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr

08010ee4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010ee4:	b480      	push	{r7}
 8010ee6:	b085      	sub	sp, #20
 8010ee8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010eea:	f3ef 8305 	mrs	r3, IPSR
 8010eee:	60bb      	str	r3, [r7, #8]
  return(result);
 8010ef0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d10f      	bne.n	8010f16 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8010efa:	607b      	str	r3, [r7, #4]
  return(result);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d105      	bne.n	8010f0e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f02:	f3ef 8311 	mrs	r3, BASEPRI
 8010f06:	603b      	str	r3, [r7, #0]
  return(result);
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d007      	beq.n	8010f1e <osKernelInitialize+0x3a>
 8010f0e:	4b0e      	ldr	r3, [pc, #56]	; (8010f48 <osKernelInitialize+0x64>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	2b02      	cmp	r3, #2
 8010f14:	d103      	bne.n	8010f1e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010f16:	f06f 0305 	mvn.w	r3, #5
 8010f1a:	60fb      	str	r3, [r7, #12]
 8010f1c:	e00c      	b.n	8010f38 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010f1e:	4b0a      	ldr	r3, [pc, #40]	; (8010f48 <osKernelInitialize+0x64>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d105      	bne.n	8010f32 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010f26:	4b08      	ldr	r3, [pc, #32]	; (8010f48 <osKernelInitialize+0x64>)
 8010f28:	2201      	movs	r2, #1
 8010f2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	60fb      	str	r3, [r7, #12]
 8010f30:	e002      	b.n	8010f38 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010f32:	f04f 33ff 	mov.w	r3, #4294967295
 8010f36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010f38:	68fb      	ldr	r3, [r7, #12]
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3714      	adds	r7, #20
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	24000220 	.word	0x24000220

08010f4c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8010f52:	f002 fa7b 	bl	801344c <xTaskGetSchedulerState>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d004      	beq.n	8010f66 <osKernelGetState+0x1a>
 8010f5c:	2b02      	cmp	r3, #2
 8010f5e:	d105      	bne.n	8010f6c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8010f60:	2302      	movs	r3, #2
 8010f62:	607b      	str	r3, [r7, #4]
      break;
 8010f64:	e00c      	b.n	8010f80 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8010f66:	2303      	movs	r3, #3
 8010f68:	607b      	str	r3, [r7, #4]
      break;
 8010f6a:	e009      	b.n	8010f80 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8010f6c:	4b07      	ldr	r3, [pc, #28]	; (8010f8c <osKernelGetState+0x40>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d102      	bne.n	8010f7a <osKernelGetState+0x2e>
        state = osKernelReady;
 8010f74:	2301      	movs	r3, #1
 8010f76:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8010f78:	e001      	b.n	8010f7e <osKernelGetState+0x32>
        state = osKernelInactive;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	607b      	str	r3, [r7, #4]
      break;
 8010f7e:	bf00      	nop
  }

  return (state);
 8010f80:	687b      	ldr	r3, [r7, #4]
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3708      	adds	r7, #8
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}
 8010f8a:	bf00      	nop
 8010f8c:	24000220 	.word	0x24000220

08010f90 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f96:	f3ef 8305 	mrs	r3, IPSR
 8010f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8010f9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d10f      	bne.n	8010fc2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8010fa6:	607b      	str	r3, [r7, #4]
  return(result);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d105      	bne.n	8010fba <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010fae:	f3ef 8311 	mrs	r3, BASEPRI
 8010fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d007      	beq.n	8010fca <osKernelStart+0x3a>
 8010fba:	4b0f      	ldr	r3, [pc, #60]	; (8010ff8 <osKernelStart+0x68>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	2b02      	cmp	r3, #2
 8010fc0:	d103      	bne.n	8010fca <osKernelStart+0x3a>
    stat = osErrorISR;
 8010fc2:	f06f 0305 	mvn.w	r3, #5
 8010fc6:	60fb      	str	r3, [r7, #12]
 8010fc8:	e010      	b.n	8010fec <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010fca:	4b0b      	ldr	r3, [pc, #44]	; (8010ff8 <osKernelStart+0x68>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2b01      	cmp	r3, #1
 8010fd0:	d109      	bne.n	8010fe6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010fd2:	f7ff ff80 	bl	8010ed6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010fd6:	4b08      	ldr	r3, [pc, #32]	; (8010ff8 <osKernelStart+0x68>)
 8010fd8:	2202      	movs	r2, #2
 8010fda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010fdc:	f001 fdde 	bl	8012b9c <vTaskStartScheduler>
      stat = osOK;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	60fb      	str	r3, [r7, #12]
 8010fe4:	e002      	b.n	8010fec <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8010fea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010fec:	68fb      	ldr	r3, [r7, #12]
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3710      	adds	r7, #16
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	24000220 	.word	0x24000220

08010ffc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011002:	f3ef 8305 	mrs	r3, IPSR
 8011006:	60bb      	str	r3, [r7, #8]
  return(result);
 8011008:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 801100a:	2b00      	cmp	r3, #0
 801100c:	d10f      	bne.n	801102e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801100e:	f3ef 8310 	mrs	r3, PRIMASK
 8011012:	607b      	str	r3, [r7, #4]
  return(result);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d105      	bne.n	8011026 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801101a:	f3ef 8311 	mrs	r3, BASEPRI
 801101e:	603b      	str	r3, [r7, #0]
  return(result);
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d007      	beq.n	8011036 <osKernelGetTickCount+0x3a>
 8011026:	4b08      	ldr	r3, [pc, #32]	; (8011048 <osKernelGetTickCount+0x4c>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	2b02      	cmp	r3, #2
 801102c:	d103      	bne.n	8011036 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 801102e:	f001 fed3 	bl	8012dd8 <xTaskGetTickCountFromISR>
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	e002      	b.n	801103c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8011036:	f001 febf 	bl	8012db8 <xTaskGetTickCount>
 801103a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 801103c:	68fb      	ldr	r3, [r7, #12]
}
 801103e:	4618      	mov	r0, r3
 8011040:	3710      	adds	r7, #16
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}
 8011046:	bf00      	nop
 8011048:	24000220 	.word	0x24000220

0801104c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801104c:	b580      	push	{r7, lr}
 801104e:	b090      	sub	sp, #64	; 0x40
 8011050:	af04      	add	r7, sp, #16
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	60b9      	str	r1, [r7, #8]
 8011056:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011058:	2300      	movs	r3, #0
 801105a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801105c:	f3ef 8305 	mrs	r3, IPSR
 8011060:	61fb      	str	r3, [r7, #28]
  return(result);
 8011062:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011064:	2b00      	cmp	r3, #0
 8011066:	f040 808f 	bne.w	8011188 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801106a:	f3ef 8310 	mrs	r3, PRIMASK
 801106e:	61bb      	str	r3, [r7, #24]
  return(result);
 8011070:	69bb      	ldr	r3, [r7, #24]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d105      	bne.n	8011082 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011076:	f3ef 8311 	mrs	r3, BASEPRI
 801107a:	617b      	str	r3, [r7, #20]
  return(result);
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d003      	beq.n	801108a <osThreadNew+0x3e>
 8011082:	4b44      	ldr	r3, [pc, #272]	; (8011194 <osThreadNew+0x148>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2b02      	cmp	r3, #2
 8011088:	d07e      	beq.n	8011188 <osThreadNew+0x13c>
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d07b      	beq.n	8011188 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011090:	2380      	movs	r3, #128	; 0x80
 8011092:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011094:	2318      	movs	r3, #24
 8011096:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011098:	2300      	movs	r3, #0
 801109a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 801109c:	f04f 33ff 	mov.w	r3, #4294967295
 80110a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d045      	beq.n	8011134 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d002      	beq.n	80110b6 <osThreadNew+0x6a>
        name = attr->name;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	699b      	ldr	r3, [r3, #24]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d002      	beq.n	80110c4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	699b      	ldr	r3, [r3, #24]
 80110c2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80110c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d008      	beq.n	80110dc <osThreadNew+0x90>
 80110ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110cc:	2b38      	cmp	r3, #56	; 0x38
 80110ce:	d805      	bhi.n	80110dc <osThreadNew+0x90>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	f003 0301 	and.w	r3, r3, #1
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d001      	beq.n	80110e0 <osThreadNew+0x94>
        return (NULL);
 80110dc:	2300      	movs	r3, #0
 80110de:	e054      	b.n	801118a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	695b      	ldr	r3, [r3, #20]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d003      	beq.n	80110f0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	695b      	ldr	r3, [r3, #20]
 80110ec:	089b      	lsrs	r3, r3, #2
 80110ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d00e      	beq.n	8011116 <osThreadNew+0xca>
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	2b5b      	cmp	r3, #91	; 0x5b
 80110fe:	d90a      	bls.n	8011116 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011104:	2b00      	cmp	r3, #0
 8011106:	d006      	beq.n	8011116 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	695b      	ldr	r3, [r3, #20]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d002      	beq.n	8011116 <osThreadNew+0xca>
        mem = 1;
 8011110:	2301      	movs	r3, #1
 8011112:	623b      	str	r3, [r7, #32]
 8011114:	e010      	b.n	8011138 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	689b      	ldr	r3, [r3, #8]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d10c      	bne.n	8011138 <osThreadNew+0xec>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	68db      	ldr	r3, [r3, #12]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d108      	bne.n	8011138 <osThreadNew+0xec>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	691b      	ldr	r3, [r3, #16]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d104      	bne.n	8011138 <osThreadNew+0xec>
          mem = 0;
 801112e:	2300      	movs	r3, #0
 8011130:	623b      	str	r3, [r7, #32]
 8011132:	e001      	b.n	8011138 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8011134:	2300      	movs	r3, #0
 8011136:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011138:	6a3b      	ldr	r3, [r7, #32]
 801113a:	2b01      	cmp	r3, #1
 801113c:	d110      	bne.n	8011160 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8011142:	687a      	ldr	r2, [r7, #4]
 8011144:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011146:	9202      	str	r2, [sp, #8]
 8011148:	9301      	str	r3, [sp, #4]
 801114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114c:	9300      	str	r3, [sp, #0]
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011154:	68f8      	ldr	r0, [r7, #12]
 8011156:	f001 fb4f 	bl	80127f8 <xTaskCreateStatic>
 801115a:	4603      	mov	r3, r0
 801115c:	613b      	str	r3, [r7, #16]
 801115e:	e013      	b.n	8011188 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8011160:	6a3b      	ldr	r3, [r7, #32]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d110      	bne.n	8011188 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011168:	b29a      	uxth	r2, r3
 801116a:	f107 0310 	add.w	r3, r7, #16
 801116e:	9301      	str	r3, [sp, #4]
 8011170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011172:	9300      	str	r3, [sp, #0]
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011178:	68f8      	ldr	r0, [r7, #12]
 801117a:	f001 fb97 	bl	80128ac <xTaskCreate>
 801117e:	4603      	mov	r3, r0
 8011180:	2b01      	cmp	r3, #1
 8011182:	d001      	beq.n	8011188 <osThreadNew+0x13c>
          hTask = NULL;
 8011184:	2300      	movs	r3, #0
 8011186:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011188:	693b      	ldr	r3, [r7, #16]
}
 801118a:	4618      	mov	r0, r3
 801118c:	3730      	adds	r7, #48	; 0x30
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop
 8011194:	24000220 	.word	0x24000220

08011198 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8011198:	b580      	push	{r7, lr}
 801119a:	b086      	sub	sp, #24
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111a0:	f3ef 8305 	mrs	r3, IPSR
 80111a4:	613b      	str	r3, [r7, #16]
  return(result);
 80111a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d10f      	bne.n	80111cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111ac:	f3ef 8310 	mrs	r3, PRIMASK
 80111b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d105      	bne.n	80111c4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80111b8:	f3ef 8311 	mrs	r3, BASEPRI
 80111bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d007      	beq.n	80111d4 <osDelay+0x3c>
 80111c4:	4b0a      	ldr	r3, [pc, #40]	; (80111f0 <osDelay+0x58>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b02      	cmp	r3, #2
 80111ca:	d103      	bne.n	80111d4 <osDelay+0x3c>
    stat = osErrorISR;
 80111cc:	f06f 0305 	mvn.w	r3, #5
 80111d0:	617b      	str	r3, [r7, #20]
 80111d2:	e007      	b.n	80111e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80111d4:	2300      	movs	r3, #0
 80111d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d002      	beq.n	80111e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f001 fca8 	bl	8012b34 <vTaskDelay>
    }
  }

  return (stat);
 80111e4:	697b      	ldr	r3, [r7, #20]
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3718      	adds	r7, #24
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	24000220 	.word	0x24000220

080111f4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b08a      	sub	sp, #40	; 0x28
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80111fc:	2300      	movs	r3, #0
 80111fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011200:	f3ef 8305 	mrs	r3, IPSR
 8011204:	613b      	str	r3, [r7, #16]
  return(result);
 8011206:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8011208:	2b00      	cmp	r3, #0
 801120a:	f040 8085 	bne.w	8011318 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801120e:	f3ef 8310 	mrs	r3, PRIMASK
 8011212:	60fb      	str	r3, [r7, #12]
  return(result);
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d105      	bne.n	8011226 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801121a:	f3ef 8311 	mrs	r3, BASEPRI
 801121e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d003      	beq.n	801122e <osMutexNew+0x3a>
 8011226:	4b3f      	ldr	r3, [pc, #252]	; (8011324 <osMutexNew+0x130>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	2b02      	cmp	r3, #2
 801122c:	d074      	beq.n	8011318 <osMutexNew+0x124>
    if (attr != NULL) {
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d003      	beq.n	801123c <osMutexNew+0x48>
      type = attr->attr_bits;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	623b      	str	r3, [r7, #32]
 801123a:	e001      	b.n	8011240 <osMutexNew+0x4c>
    } else {
      type = 0U;
 801123c:	2300      	movs	r3, #0
 801123e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8011240:	6a3b      	ldr	r3, [r7, #32]
 8011242:	f003 0301 	and.w	r3, r3, #1
 8011246:	2b00      	cmp	r3, #0
 8011248:	d002      	beq.n	8011250 <osMutexNew+0x5c>
      rmtx = 1U;
 801124a:	2301      	movs	r3, #1
 801124c:	61fb      	str	r3, [r7, #28]
 801124e:	e001      	b.n	8011254 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8011250:	2300      	movs	r3, #0
 8011252:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8011254:	6a3b      	ldr	r3, [r7, #32]
 8011256:	f003 0308 	and.w	r3, r3, #8
 801125a:	2b00      	cmp	r3, #0
 801125c:	d15c      	bne.n	8011318 <osMutexNew+0x124>
      mem = -1;
 801125e:	f04f 33ff 	mov.w	r3, #4294967295
 8011262:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d015      	beq.n	8011296 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	689b      	ldr	r3, [r3, #8]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d006      	beq.n	8011280 <osMutexNew+0x8c>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	2b4f      	cmp	r3, #79	; 0x4f
 8011278:	d902      	bls.n	8011280 <osMutexNew+0x8c>
          mem = 1;
 801127a:	2301      	movs	r3, #1
 801127c:	61bb      	str	r3, [r7, #24]
 801127e:	e00c      	b.n	801129a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	689b      	ldr	r3, [r3, #8]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d108      	bne.n	801129a <osMutexNew+0xa6>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d104      	bne.n	801129a <osMutexNew+0xa6>
            mem = 0;
 8011290:	2300      	movs	r3, #0
 8011292:	61bb      	str	r3, [r7, #24]
 8011294:	e001      	b.n	801129a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8011296:	2300      	movs	r3, #0
 8011298:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 801129a:	69bb      	ldr	r3, [r7, #24]
 801129c:	2b01      	cmp	r3, #1
 801129e:	d112      	bne.n	80112c6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d007      	beq.n	80112b6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	689b      	ldr	r3, [r3, #8]
 80112aa:	4619      	mov	r1, r3
 80112ac:	2004      	movs	r0, #4
 80112ae:	f000 fcac 	bl	8011c0a <xQueueCreateMutexStatic>
 80112b2:	6278      	str	r0, [r7, #36]	; 0x24
 80112b4:	e016      	b.n	80112e4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	689b      	ldr	r3, [r3, #8]
 80112ba:	4619      	mov	r1, r3
 80112bc:	2001      	movs	r0, #1
 80112be:	f000 fca4 	bl	8011c0a <xQueueCreateMutexStatic>
 80112c2:	6278      	str	r0, [r7, #36]	; 0x24
 80112c4:	e00e      	b.n	80112e4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d10b      	bne.n	80112e4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80112cc:	69fb      	ldr	r3, [r7, #28]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d004      	beq.n	80112dc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80112d2:	2004      	movs	r0, #4
 80112d4:	f000 fc81 	bl	8011bda <xQueueCreateMutex>
 80112d8:	6278      	str	r0, [r7, #36]	; 0x24
 80112da:	e003      	b.n	80112e4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80112dc:	2001      	movs	r0, #1
 80112de:	f000 fc7c 	bl	8011bda <xQueueCreateMutex>
 80112e2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80112e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d00c      	beq.n	8011304 <osMutexNew+0x110>
        if (attr != NULL) {
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d003      	beq.n	80112f8 <osMutexNew+0x104>
          name = attr->name;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	617b      	str	r3, [r7, #20]
 80112f6:	e001      	b.n	80112fc <osMutexNew+0x108>
        } else {
          name = NULL;
 80112f8:	2300      	movs	r3, #0
 80112fa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80112fc:	6979      	ldr	r1, [r7, #20]
 80112fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011300:	f001 fa1e 	bl	8012740 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	2b00      	cmp	r3, #0
 8011308:	d006      	beq.n	8011318 <osMutexNew+0x124>
 801130a:	69fb      	ldr	r3, [r7, #28]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d003      	beq.n	8011318 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8011310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011312:	f043 0301 	orr.w	r3, r3, #1
 8011316:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8011318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801131a:	4618      	mov	r0, r3
 801131c:	3728      	adds	r7, #40	; 0x28
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	24000220 	.word	0x24000220

08011328 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8011328:	b580      	push	{r7, lr}
 801132a:	b088      	sub	sp, #32
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f023 0301 	bic.w	r3, r3, #1
 8011338:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f003 0301 	and.w	r3, r3, #1
 8011340:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8011342:	2300      	movs	r3, #0
 8011344:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011346:	f3ef 8305 	mrs	r3, IPSR
 801134a:	613b      	str	r3, [r7, #16]
  return(result);
 801134c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801134e:	2b00      	cmp	r3, #0
 8011350:	d10f      	bne.n	8011372 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011352:	f3ef 8310 	mrs	r3, PRIMASK
 8011356:	60fb      	str	r3, [r7, #12]
  return(result);
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d105      	bne.n	801136a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801135e:	f3ef 8311 	mrs	r3, BASEPRI
 8011362:	60bb      	str	r3, [r7, #8]
  return(result);
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d007      	beq.n	801137a <osMutexAcquire+0x52>
 801136a:	4b1d      	ldr	r3, [pc, #116]	; (80113e0 <osMutexAcquire+0xb8>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	2b02      	cmp	r3, #2
 8011370:	d103      	bne.n	801137a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8011372:	f06f 0305 	mvn.w	r3, #5
 8011376:	61fb      	str	r3, [r7, #28]
 8011378:	e02c      	b.n	80113d4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 801137a:	69bb      	ldr	r3, [r7, #24]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d103      	bne.n	8011388 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8011380:	f06f 0303 	mvn.w	r3, #3
 8011384:	61fb      	str	r3, [r7, #28]
 8011386:	e025      	b.n	80113d4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d011      	beq.n	80113b2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801138e:	6839      	ldr	r1, [r7, #0]
 8011390:	69b8      	ldr	r0, [r7, #24]
 8011392:	f000 fc88 	bl	8011ca6 <xQueueTakeMutexRecursive>
 8011396:	4603      	mov	r3, r0
 8011398:	2b01      	cmp	r3, #1
 801139a:	d01b      	beq.n	80113d4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d003      	beq.n	80113aa <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80113a2:	f06f 0301 	mvn.w	r3, #1
 80113a6:	61fb      	str	r3, [r7, #28]
 80113a8:	e014      	b.n	80113d4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80113aa:	f06f 0302 	mvn.w	r3, #2
 80113ae:	61fb      	str	r3, [r7, #28]
 80113b0:	e010      	b.n	80113d4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80113b2:	6839      	ldr	r1, [r7, #0]
 80113b4:	69b8      	ldr	r0, [r7, #24]
 80113b6:	f000 ff15 	bl	80121e4 <xQueueSemaphoreTake>
 80113ba:	4603      	mov	r3, r0
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d009      	beq.n	80113d4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d003      	beq.n	80113ce <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80113c6:	f06f 0301 	mvn.w	r3, #1
 80113ca:	61fb      	str	r3, [r7, #28]
 80113cc:	e002      	b.n	80113d4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80113ce:	f06f 0302 	mvn.w	r3, #2
 80113d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80113d4:	69fb      	ldr	r3, [r7, #28]
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3720      	adds	r7, #32
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
 80113de:	bf00      	nop
 80113e0:	24000220 	.word	0x24000220

080113e4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b088      	sub	sp, #32
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f023 0301 	bic.w	r3, r3, #1
 80113f2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f003 0301 	and.w	r3, r3, #1
 80113fa:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80113fc:	2300      	movs	r3, #0
 80113fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011400:	f3ef 8305 	mrs	r3, IPSR
 8011404:	613b      	str	r3, [r7, #16]
  return(result);
 8011406:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8011408:	2b00      	cmp	r3, #0
 801140a:	d10f      	bne.n	801142c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801140c:	f3ef 8310 	mrs	r3, PRIMASK
 8011410:	60fb      	str	r3, [r7, #12]
  return(result);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d105      	bne.n	8011424 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011418:	f3ef 8311 	mrs	r3, BASEPRI
 801141c:	60bb      	str	r3, [r7, #8]
  return(result);
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d007      	beq.n	8011434 <osMutexRelease+0x50>
 8011424:	4b16      	ldr	r3, [pc, #88]	; (8011480 <osMutexRelease+0x9c>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	2b02      	cmp	r3, #2
 801142a:	d103      	bne.n	8011434 <osMutexRelease+0x50>
    stat = osErrorISR;
 801142c:	f06f 0305 	mvn.w	r3, #5
 8011430:	61fb      	str	r3, [r7, #28]
 8011432:	e01f      	b.n	8011474 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8011434:	69bb      	ldr	r3, [r7, #24]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d103      	bne.n	8011442 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801143a:	f06f 0303 	mvn.w	r3, #3
 801143e:	61fb      	str	r3, [r7, #28]
 8011440:	e018      	b.n	8011474 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d009      	beq.n	801145c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8011448:	69b8      	ldr	r0, [r7, #24]
 801144a:	f000 fbf9 	bl	8011c40 <xQueueGiveMutexRecursive>
 801144e:	4603      	mov	r3, r0
 8011450:	2b01      	cmp	r3, #1
 8011452:	d00f      	beq.n	8011474 <osMutexRelease+0x90>
        stat = osErrorResource;
 8011454:	f06f 0302 	mvn.w	r3, #2
 8011458:	61fb      	str	r3, [r7, #28]
 801145a:	e00b      	b.n	8011474 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801145c:	2300      	movs	r3, #0
 801145e:	2200      	movs	r2, #0
 8011460:	2100      	movs	r1, #0
 8011462:	69b8      	ldr	r0, [r7, #24]
 8011464:	f000 fc54 	bl	8011d10 <xQueueGenericSend>
 8011468:	4603      	mov	r3, r0
 801146a:	2b01      	cmp	r3, #1
 801146c:	d002      	beq.n	8011474 <osMutexRelease+0x90>
        stat = osErrorResource;
 801146e:	f06f 0302 	mvn.w	r3, #2
 8011472:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8011474:	69fb      	ldr	r3, [r7, #28]
}
 8011476:	4618      	mov	r0, r3
 8011478:	3720      	adds	r7, #32
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	bf00      	nop
 8011480:	24000220 	.word	0x24000220

08011484 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011484:	b580      	push	{r7, lr}
 8011486:	b08c      	sub	sp, #48	; 0x30
 8011488:	af02      	add	r7, sp, #8
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	60b9      	str	r1, [r7, #8]
 801148e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011490:	2300      	movs	r3, #0
 8011492:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011494:	f3ef 8305 	mrs	r3, IPSR
 8011498:	61bb      	str	r3, [r7, #24]
  return(result);
 801149a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801149c:	2b00      	cmp	r3, #0
 801149e:	d170      	bne.n	8011582 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114a0:	f3ef 8310 	mrs	r3, PRIMASK
 80114a4:	617b      	str	r3, [r7, #20]
  return(result);
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d105      	bne.n	80114b8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80114ac:	f3ef 8311 	mrs	r3, BASEPRI
 80114b0:	613b      	str	r3, [r7, #16]
  return(result);
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d003      	beq.n	80114c0 <osMessageQueueNew+0x3c>
 80114b8:	4b34      	ldr	r3, [pc, #208]	; (801158c <osMessageQueueNew+0x108>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	2b02      	cmp	r3, #2
 80114be:	d060      	beq.n	8011582 <osMessageQueueNew+0xfe>
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d05d      	beq.n	8011582 <osMessageQueueNew+0xfe>
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d05a      	beq.n	8011582 <osMessageQueueNew+0xfe>
    mem = -1;
 80114cc:	f04f 33ff 	mov.w	r3, #4294967295
 80114d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d029      	beq.n	801152c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d012      	beq.n	8011506 <osMessageQueueNew+0x82>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	68db      	ldr	r3, [r3, #12]
 80114e4:	2b4f      	cmp	r3, #79	; 0x4f
 80114e6:	d90e      	bls.n	8011506 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d00a      	beq.n	8011506 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	695a      	ldr	r2, [r3, #20]
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	68b9      	ldr	r1, [r7, #8]
 80114f8:	fb01 f303 	mul.w	r3, r1, r3
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d302      	bcc.n	8011506 <osMessageQueueNew+0x82>
        mem = 1;
 8011500:	2301      	movs	r3, #1
 8011502:	623b      	str	r3, [r7, #32]
 8011504:	e014      	b.n	8011530 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	689b      	ldr	r3, [r3, #8]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d110      	bne.n	8011530 <osMessageQueueNew+0xac>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	68db      	ldr	r3, [r3, #12]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d10c      	bne.n	8011530 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801151a:	2b00      	cmp	r3, #0
 801151c:	d108      	bne.n	8011530 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	695b      	ldr	r3, [r3, #20]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d104      	bne.n	8011530 <osMessageQueueNew+0xac>
          mem = 0;
 8011526:	2300      	movs	r3, #0
 8011528:	623b      	str	r3, [r7, #32]
 801152a:	e001      	b.n	8011530 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 801152c:	2300      	movs	r3, #0
 801152e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011530:	6a3b      	ldr	r3, [r7, #32]
 8011532:	2b01      	cmp	r3, #1
 8011534:	d10c      	bne.n	8011550 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	691a      	ldr	r2, [r3, #16]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6899      	ldr	r1, [r3, #8]
 801153e:	2300      	movs	r3, #0
 8011540:	9300      	str	r3, [sp, #0]
 8011542:	460b      	mov	r3, r1
 8011544:	68b9      	ldr	r1, [r7, #8]
 8011546:	68f8      	ldr	r0, [r7, #12]
 8011548:	f000 fa58 	bl	80119fc <xQueueGenericCreateStatic>
 801154c:	6278      	str	r0, [r7, #36]	; 0x24
 801154e:	e008      	b.n	8011562 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8011550:	6a3b      	ldr	r3, [r7, #32]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d105      	bne.n	8011562 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8011556:	2200      	movs	r2, #0
 8011558:	68b9      	ldr	r1, [r7, #8]
 801155a:	68f8      	ldr	r0, [r7, #12]
 801155c:	f000 fac1 	bl	8011ae2 <xQueueGenericCreate>
 8011560:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011564:	2b00      	cmp	r3, #0
 8011566:	d00c      	beq.n	8011582 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d003      	beq.n	8011576 <osMessageQueueNew+0xf2>
        name = attr->name;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	61fb      	str	r3, [r7, #28]
 8011574:	e001      	b.n	801157a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8011576:	2300      	movs	r3, #0
 8011578:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801157a:	69f9      	ldr	r1, [r7, #28]
 801157c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801157e:	f001 f8df 	bl	8012740 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011584:	4618      	mov	r0, r3
 8011586:	3728      	adds	r7, #40	; 0x28
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}
 801158c:	24000220 	.word	0x24000220

08011590 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011590:	b580      	push	{r7, lr}
 8011592:	b08a      	sub	sp, #40	; 0x28
 8011594:	af00      	add	r7, sp, #0
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	603b      	str	r3, [r7, #0]
 801159c:	4613      	mov	r3, r2
 801159e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80115a4:	2300      	movs	r3, #0
 80115a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115a8:	f3ef 8305 	mrs	r3, IPSR
 80115ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80115ae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d10f      	bne.n	80115d4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115b4:	f3ef 8310 	mrs	r3, PRIMASK
 80115b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80115ba:	69bb      	ldr	r3, [r7, #24]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d105      	bne.n	80115cc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80115c0:	f3ef 8311 	mrs	r3, BASEPRI
 80115c4:	617b      	str	r3, [r7, #20]
  return(result);
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d02c      	beq.n	8011626 <osMessageQueuePut+0x96>
 80115cc:	4b28      	ldr	r3, [pc, #160]	; (8011670 <osMessageQueuePut+0xe0>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	2b02      	cmp	r3, #2
 80115d2:	d128      	bne.n	8011626 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80115d4:	6a3b      	ldr	r3, [r7, #32]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d005      	beq.n	80115e6 <osMessageQueuePut+0x56>
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d002      	beq.n	80115e6 <osMessageQueuePut+0x56>
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d003      	beq.n	80115ee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80115e6:	f06f 0303 	mvn.w	r3, #3
 80115ea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80115ec:	e039      	b.n	8011662 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80115ee:	2300      	movs	r3, #0
 80115f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80115f2:	f107 0210 	add.w	r2, r7, #16
 80115f6:	2300      	movs	r3, #0
 80115f8:	68b9      	ldr	r1, [r7, #8]
 80115fa:	6a38      	ldr	r0, [r7, #32]
 80115fc:	f000 fc82 	bl	8011f04 <xQueueGenericSendFromISR>
 8011600:	4603      	mov	r3, r0
 8011602:	2b01      	cmp	r3, #1
 8011604:	d003      	beq.n	801160e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8011606:	f06f 0302 	mvn.w	r3, #2
 801160a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801160c:	e029      	b.n	8011662 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d026      	beq.n	8011662 <osMessageQueuePut+0xd2>
 8011614:	4b17      	ldr	r3, [pc, #92]	; (8011674 <osMessageQueuePut+0xe4>)
 8011616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801161a:	601a      	str	r2, [r3, #0]
 801161c:	f3bf 8f4f 	dsb	sy
 8011620:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011624:	e01d      	b.n	8011662 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011626:	6a3b      	ldr	r3, [r7, #32]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d002      	beq.n	8011632 <osMessageQueuePut+0xa2>
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d103      	bne.n	801163a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8011632:	f06f 0303 	mvn.w	r3, #3
 8011636:	627b      	str	r3, [r7, #36]	; 0x24
 8011638:	e014      	b.n	8011664 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801163a:	2300      	movs	r3, #0
 801163c:	683a      	ldr	r2, [r7, #0]
 801163e:	68b9      	ldr	r1, [r7, #8]
 8011640:	6a38      	ldr	r0, [r7, #32]
 8011642:	f000 fb65 	bl	8011d10 <xQueueGenericSend>
 8011646:	4603      	mov	r3, r0
 8011648:	2b01      	cmp	r3, #1
 801164a:	d00b      	beq.n	8011664 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d003      	beq.n	801165a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8011652:	f06f 0301 	mvn.w	r3, #1
 8011656:	627b      	str	r3, [r7, #36]	; 0x24
 8011658:	e004      	b.n	8011664 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801165a:	f06f 0302 	mvn.w	r3, #2
 801165e:	627b      	str	r3, [r7, #36]	; 0x24
 8011660:	e000      	b.n	8011664 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011662:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8011664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011666:	4618      	mov	r0, r3
 8011668:	3728      	adds	r7, #40	; 0x28
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	bf00      	nop
 8011670:	24000220 	.word	0x24000220
 8011674:	e000ed04 	.word	0xe000ed04

08011678 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011678:	b580      	push	{r7, lr}
 801167a:	b08a      	sub	sp, #40	; 0x28
 801167c:	af00      	add	r7, sp, #0
 801167e:	60f8      	str	r0, [r7, #12]
 8011680:	60b9      	str	r1, [r7, #8]
 8011682:	607a      	str	r2, [r7, #4]
 8011684:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801168a:	2300      	movs	r3, #0
 801168c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801168e:	f3ef 8305 	mrs	r3, IPSR
 8011692:	61fb      	str	r3, [r7, #28]
  return(result);
 8011694:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8011696:	2b00      	cmp	r3, #0
 8011698:	d10f      	bne.n	80116ba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801169a:	f3ef 8310 	mrs	r3, PRIMASK
 801169e:	61bb      	str	r3, [r7, #24]
  return(result);
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d105      	bne.n	80116b2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80116a6:	f3ef 8311 	mrs	r3, BASEPRI
 80116aa:	617b      	str	r3, [r7, #20]
  return(result);
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d02c      	beq.n	801170c <osMessageQueueGet+0x94>
 80116b2:	4b28      	ldr	r3, [pc, #160]	; (8011754 <osMessageQueueGet+0xdc>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	2b02      	cmp	r3, #2
 80116b8:	d128      	bne.n	801170c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80116ba:	6a3b      	ldr	r3, [r7, #32]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d005      	beq.n	80116cc <osMessageQueueGet+0x54>
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d002      	beq.n	80116cc <osMessageQueueGet+0x54>
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d003      	beq.n	80116d4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80116cc:	f06f 0303 	mvn.w	r3, #3
 80116d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80116d2:	e038      	b.n	8011746 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80116d4:	2300      	movs	r3, #0
 80116d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80116d8:	f107 0310 	add.w	r3, r7, #16
 80116dc:	461a      	mov	r2, r3
 80116de:	68b9      	ldr	r1, [r7, #8]
 80116e0:	6a38      	ldr	r0, [r7, #32]
 80116e2:	f000 fe87 	bl	80123f4 <xQueueReceiveFromISR>
 80116e6:	4603      	mov	r3, r0
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d003      	beq.n	80116f4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80116ec:	f06f 0302 	mvn.w	r3, #2
 80116f0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80116f2:	e028      	b.n	8011746 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d025      	beq.n	8011746 <osMessageQueueGet+0xce>
 80116fa:	4b17      	ldr	r3, [pc, #92]	; (8011758 <osMessageQueueGet+0xe0>)
 80116fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011700:	601a      	str	r2, [r3, #0]
 8011702:	f3bf 8f4f 	dsb	sy
 8011706:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801170a:	e01c      	b.n	8011746 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801170c:	6a3b      	ldr	r3, [r7, #32]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d002      	beq.n	8011718 <osMessageQueueGet+0xa0>
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d103      	bne.n	8011720 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8011718:	f06f 0303 	mvn.w	r3, #3
 801171c:	627b      	str	r3, [r7, #36]	; 0x24
 801171e:	e013      	b.n	8011748 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011720:	683a      	ldr	r2, [r7, #0]
 8011722:	68b9      	ldr	r1, [r7, #8]
 8011724:	6a38      	ldr	r0, [r7, #32]
 8011726:	f000 fc81 	bl	801202c <xQueueReceive>
 801172a:	4603      	mov	r3, r0
 801172c:	2b01      	cmp	r3, #1
 801172e:	d00b      	beq.n	8011748 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d003      	beq.n	801173e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8011736:	f06f 0301 	mvn.w	r3, #1
 801173a:	627b      	str	r3, [r7, #36]	; 0x24
 801173c:	e004      	b.n	8011748 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801173e:	f06f 0302 	mvn.w	r3, #2
 8011742:	627b      	str	r3, [r7, #36]	; 0x24
 8011744:	e000      	b.n	8011748 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011746:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8011748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801174a:	4618      	mov	r0, r3
 801174c:	3728      	adds	r7, #40	; 0x28
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	24000220 	.word	0x24000220
 8011758:	e000ed04 	.word	0xe000ed04

0801175c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801175c:	b480      	push	{r7}
 801175e:	b085      	sub	sp, #20
 8011760:	af00      	add	r7, sp, #0
 8011762:	60f8      	str	r0, [r7, #12]
 8011764:	60b9      	str	r1, [r7, #8]
 8011766:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	4a07      	ldr	r2, [pc, #28]	; (8011788 <vApplicationGetIdleTaskMemory+0x2c>)
 801176c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	4a06      	ldr	r2, [pc, #24]	; (801178c <vApplicationGetIdleTaskMemory+0x30>)
 8011772:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2280      	movs	r2, #128	; 0x80
 8011778:	601a      	str	r2, [r3, #0]
}
 801177a:	bf00      	nop
 801177c:	3714      	adds	r7, #20
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr
 8011786:	bf00      	nop
 8011788:	24000224 	.word	0x24000224
 801178c:	24000280 	.word	0x24000280

08011790 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	60f8      	str	r0, [r7, #12]
 8011798:	60b9      	str	r1, [r7, #8]
 801179a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	4a07      	ldr	r2, [pc, #28]	; (80117bc <vApplicationGetTimerTaskMemory+0x2c>)
 80117a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	4a06      	ldr	r2, [pc, #24]	; (80117c0 <vApplicationGetTimerTaskMemory+0x30>)
 80117a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80117ae:	601a      	str	r2, [r3, #0]
}
 80117b0:	bf00      	nop
 80117b2:	3714      	adds	r7, #20
 80117b4:	46bd      	mov	sp, r7
 80117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ba:	4770      	bx	lr
 80117bc:	24000480 	.word	0x24000480
 80117c0:	240004dc 	.word	0x240004dc

080117c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80117c4:	b480      	push	{r7}
 80117c6:	b083      	sub	sp, #12
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f103 0208 	add.w	r2, r3, #8
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f04f 32ff 	mov.w	r2, #4294967295
 80117dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f103 0208 	add.w	r2, r3, #8
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f103 0208 	add.w	r2, r3, #8
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2200      	movs	r2, #0
 80117f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80117f8:	bf00      	nop
 80117fa:	370c      	adds	r7, #12
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr

08011804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011804:	b480      	push	{r7}
 8011806:	b083      	sub	sp, #12
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2200      	movs	r2, #0
 8011810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011812:	bf00      	nop
 8011814:	370c      	adds	r7, #12
 8011816:	46bd      	mov	sp, r7
 8011818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181c:	4770      	bx	lr

0801181e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801181e:	b480      	push	{r7}
 8011820:	b085      	sub	sp, #20
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
 8011826:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	68fa      	ldr	r2, [r7, #12]
 8011832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	689a      	ldr	r2, [r3, #8]
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	689b      	ldr	r3, [r3, #8]
 8011840:	683a      	ldr	r2, [r7, #0]
 8011842:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	683a      	ldr	r2, [r7, #0]
 8011848:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	687a      	ldr	r2, [r7, #4]
 801184e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	1c5a      	adds	r2, r3, #1
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	601a      	str	r2, [r3, #0]
}
 801185a:	bf00      	nop
 801185c:	3714      	adds	r7, #20
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr

08011866 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011866:	b480      	push	{r7}
 8011868:	b085      	sub	sp, #20
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
 801186e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	f1b3 3fff 	cmp.w	r3, #4294967295
 801187c:	d103      	bne.n	8011886 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	691b      	ldr	r3, [r3, #16]
 8011882:	60fb      	str	r3, [r7, #12]
 8011884:	e00c      	b.n	80118a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	3308      	adds	r3, #8
 801188a:	60fb      	str	r3, [r7, #12]
 801188c:	e002      	b.n	8011894 <vListInsert+0x2e>
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	60fb      	str	r3, [r7, #12]
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	68ba      	ldr	r2, [r7, #8]
 801189c:	429a      	cmp	r2, r3
 801189e:	d2f6      	bcs.n	801188e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	685a      	ldr	r2, [r3, #4]
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	685b      	ldr	r3, [r3, #4]
 80118ac:	683a      	ldr	r2, [r7, #0]
 80118ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	683a      	ldr	r2, [r7, #0]
 80118ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	687a      	ldr	r2, [r7, #4]
 80118c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	1c5a      	adds	r2, r3, #1
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	601a      	str	r2, [r3, #0]
}
 80118cc:	bf00      	nop
 80118ce:	3714      	adds	r7, #20
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80118d8:	b480      	push	{r7}
 80118da:	b085      	sub	sp, #20
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	691b      	ldr	r3, [r3, #16]
 80118e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	685b      	ldr	r3, [r3, #4]
 80118ea:	687a      	ldr	r2, [r7, #4]
 80118ec:	6892      	ldr	r2, [r2, #8]
 80118ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	689b      	ldr	r3, [r3, #8]
 80118f4:	687a      	ldr	r2, [r7, #4]
 80118f6:	6852      	ldr	r2, [r2, #4]
 80118f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	685b      	ldr	r3, [r3, #4]
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	429a      	cmp	r2, r3
 8011902:	d103      	bne.n	801190c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	689a      	ldr	r2, [r3, #8]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2200      	movs	r2, #0
 8011910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	1e5a      	subs	r2, r3, #1
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	681b      	ldr	r3, [r3, #0]
}
 8011920:	4618      	mov	r0, r3
 8011922:	3714      	adds	r7, #20
 8011924:	46bd      	mov	sp, r7
 8011926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192a:	4770      	bx	lr

0801192c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b084      	sub	sp, #16
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d109      	bne.n	8011954 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011944:	f383 8811 	msr	BASEPRI, r3
 8011948:	f3bf 8f6f 	isb	sy
 801194c:	f3bf 8f4f 	dsb	sy
 8011950:	60bb      	str	r3, [r7, #8]
 8011952:	e7fe      	b.n	8011952 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8011954:	f002 fbc2 	bl	80140dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	681a      	ldr	r2, [r3, #0]
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011960:	68f9      	ldr	r1, [r7, #12]
 8011962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011964:	fb01 f303 	mul.w	r3, r1, r3
 8011968:	441a      	add	r2, r3
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	2200      	movs	r2, #0
 8011972:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	681a      	ldr	r2, [r3, #0]
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011984:	3b01      	subs	r3, #1
 8011986:	68f9      	ldr	r1, [r7, #12]
 8011988:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801198a:	fb01 f303 	mul.w	r3, r1, r3
 801198e:	441a      	add	r2, r3
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	22ff      	movs	r2, #255	; 0xff
 8011998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	22ff      	movs	r2, #255	; 0xff
 80119a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d114      	bne.n	80119d4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	691b      	ldr	r3, [r3, #16]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d01a      	beq.n	80119e8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	3310      	adds	r3, #16
 80119b6:	4618      	mov	r0, r3
 80119b8:	f001 fb82 	bl	80130c0 <xTaskRemoveFromEventList>
 80119bc:	4603      	mov	r3, r0
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d012      	beq.n	80119e8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80119c2:	4b0d      	ldr	r3, [pc, #52]	; (80119f8 <xQueueGenericReset+0xcc>)
 80119c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119c8:	601a      	str	r2, [r3, #0]
 80119ca:	f3bf 8f4f 	dsb	sy
 80119ce:	f3bf 8f6f 	isb	sy
 80119d2:	e009      	b.n	80119e8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	3310      	adds	r3, #16
 80119d8:	4618      	mov	r0, r3
 80119da:	f7ff fef3 	bl	80117c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	3324      	adds	r3, #36	; 0x24
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ff feee 	bl	80117c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80119e8:	f002 fba6 	bl	8014138 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80119ec:	2301      	movs	r3, #1
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3710      	adds	r7, #16
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop
 80119f8:	e000ed04 	.word	0xe000ed04

080119fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b08e      	sub	sp, #56	; 0x38
 8011a00:	af02      	add	r7, sp, #8
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	607a      	str	r2, [r7, #4]
 8011a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d109      	bne.n	8011a24 <xQueueGenericCreateStatic+0x28>
 8011a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a14:	f383 8811 	msr	BASEPRI, r3
 8011a18:	f3bf 8f6f 	isb	sy
 8011a1c:	f3bf 8f4f 	dsb	sy
 8011a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a22:	e7fe      	b.n	8011a22 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d109      	bne.n	8011a3e <xQueueGenericCreateStatic+0x42>
 8011a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a2e:	f383 8811 	msr	BASEPRI, r3
 8011a32:	f3bf 8f6f 	isb	sy
 8011a36:	f3bf 8f4f 	dsb	sy
 8011a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8011a3c:	e7fe      	b.n	8011a3c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d002      	beq.n	8011a4a <xQueueGenericCreateStatic+0x4e>
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d001      	beq.n	8011a4e <xQueueGenericCreateStatic+0x52>
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	e000      	b.n	8011a50 <xQueueGenericCreateStatic+0x54>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d109      	bne.n	8011a68 <xQueueGenericCreateStatic+0x6c>
 8011a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a58:	f383 8811 	msr	BASEPRI, r3
 8011a5c:	f3bf 8f6f 	isb	sy
 8011a60:	f3bf 8f4f 	dsb	sy
 8011a64:	623b      	str	r3, [r7, #32]
 8011a66:	e7fe      	b.n	8011a66 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d102      	bne.n	8011a74 <xQueueGenericCreateStatic+0x78>
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d101      	bne.n	8011a78 <xQueueGenericCreateStatic+0x7c>
 8011a74:	2301      	movs	r3, #1
 8011a76:	e000      	b.n	8011a7a <xQueueGenericCreateStatic+0x7e>
 8011a78:	2300      	movs	r3, #0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d109      	bne.n	8011a92 <xQueueGenericCreateStatic+0x96>
 8011a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a82:	f383 8811 	msr	BASEPRI, r3
 8011a86:	f3bf 8f6f 	isb	sy
 8011a8a:	f3bf 8f4f 	dsb	sy
 8011a8e:	61fb      	str	r3, [r7, #28]
 8011a90:	e7fe      	b.n	8011a90 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011a92:	2350      	movs	r3, #80	; 0x50
 8011a94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	2b50      	cmp	r3, #80	; 0x50
 8011a9a:	d009      	beq.n	8011ab0 <xQueueGenericCreateStatic+0xb4>
 8011a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa0:	f383 8811 	msr	BASEPRI, r3
 8011aa4:	f3bf 8f6f 	isb	sy
 8011aa8:	f3bf 8f4f 	dsb	sy
 8011aac:	61bb      	str	r3, [r7, #24]
 8011aae:	e7fe      	b.n	8011aae <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011ab0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d00d      	beq.n	8011ad8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011abe:	2201      	movs	r2, #1
 8011ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011ac4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	4613      	mov	r3, r2
 8011ace:	687a      	ldr	r2, [r7, #4]
 8011ad0:	68b9      	ldr	r1, [r7, #8]
 8011ad2:	68f8      	ldr	r0, [r7, #12]
 8011ad4:	f000 f844 	bl	8011b60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3730      	adds	r7, #48	; 0x30
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}

08011ae2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011ae2:	b580      	push	{r7, lr}
 8011ae4:	b08a      	sub	sp, #40	; 0x28
 8011ae6:	af02      	add	r7, sp, #8
 8011ae8:	60f8      	str	r0, [r7, #12]
 8011aea:	60b9      	str	r1, [r7, #8]
 8011aec:	4613      	mov	r3, r2
 8011aee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d109      	bne.n	8011b0a <xQueueGenericCreate+0x28>
 8011af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011afa:	f383 8811 	msr	BASEPRI, r3
 8011afe:	f3bf 8f6f 	isb	sy
 8011b02:	f3bf 8f4f 	dsb	sy
 8011b06:	613b      	str	r3, [r7, #16]
 8011b08:	e7fe      	b.n	8011b08 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d102      	bne.n	8011b16 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011b10:	2300      	movs	r3, #0
 8011b12:	61fb      	str	r3, [r7, #28]
 8011b14:	e004      	b.n	8011b20 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	68ba      	ldr	r2, [r7, #8]
 8011b1a:	fb02 f303 	mul.w	r3, r2, r3
 8011b1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011b20:	69fb      	ldr	r3, [r7, #28]
 8011b22:	3350      	adds	r3, #80	; 0x50
 8011b24:	4618      	mov	r0, r3
 8011b26:	f002 fbf3 	bl	8014310 <pvPortMalloc>
 8011b2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011b2c:	69bb      	ldr	r3, [r7, #24]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d011      	beq.n	8011b56 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	3350      	adds	r3, #80	; 0x50
 8011b3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011b3c:	69bb      	ldr	r3, [r7, #24]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011b44:	79fa      	ldrb	r2, [r7, #7]
 8011b46:	69bb      	ldr	r3, [r7, #24]
 8011b48:	9300      	str	r3, [sp, #0]
 8011b4a:	4613      	mov	r3, r2
 8011b4c:	697a      	ldr	r2, [r7, #20]
 8011b4e:	68b9      	ldr	r1, [r7, #8]
 8011b50:	68f8      	ldr	r0, [r7, #12]
 8011b52:	f000 f805 	bl	8011b60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011b56:	69bb      	ldr	r3, [r7, #24]
	}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3720      	adds	r7, #32
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}

08011b60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b084      	sub	sp, #16
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	607a      	str	r2, [r7, #4]
 8011b6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d103      	bne.n	8011b7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011b74:	69bb      	ldr	r3, [r7, #24]
 8011b76:	69ba      	ldr	r2, [r7, #24]
 8011b78:	601a      	str	r2, [r3, #0]
 8011b7a:	e002      	b.n	8011b82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	687a      	ldr	r2, [r7, #4]
 8011b80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011b82:	69bb      	ldr	r3, [r7, #24]
 8011b84:	68fa      	ldr	r2, [r7, #12]
 8011b86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	68ba      	ldr	r2, [r7, #8]
 8011b8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011b8e:	2101      	movs	r1, #1
 8011b90:	69b8      	ldr	r0, [r7, #24]
 8011b92:	f7ff fecb 	bl	801192c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	78fa      	ldrb	r2, [r7, #3]
 8011b9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011b9e:	bf00      	nop
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}

08011ba6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011ba6:	b580      	push	{r7, lr}
 8011ba8:	b082      	sub	sp, #8
 8011baa:	af00      	add	r7, sp, #0
 8011bac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d00e      	beq.n	8011bd2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	2200      	movs	r2, #0
 8011bca:	2100      	movs	r1, #0
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f000 f89f 	bl	8011d10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011bd2:	bf00      	nop
 8011bd4:	3708      	adds	r7, #8
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}

08011bda <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011bda:	b580      	push	{r7, lr}
 8011bdc:	b086      	sub	sp, #24
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	4603      	mov	r3, r0
 8011be2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011be4:	2301      	movs	r3, #1
 8011be6:	617b      	str	r3, [r7, #20]
 8011be8:	2300      	movs	r3, #0
 8011bea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011bec:	79fb      	ldrb	r3, [r7, #7]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	6939      	ldr	r1, [r7, #16]
 8011bf2:	6978      	ldr	r0, [r7, #20]
 8011bf4:	f7ff ff75 	bl	8011ae2 <xQueueGenericCreate>
 8011bf8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011bfa:	68f8      	ldr	r0, [r7, #12]
 8011bfc:	f7ff ffd3 	bl	8011ba6 <prvInitialiseMutex>

		return xNewQueue;
 8011c00:	68fb      	ldr	r3, [r7, #12]
	}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3718      	adds	r7, #24
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}

08011c0a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011c0a:	b580      	push	{r7, lr}
 8011c0c:	b088      	sub	sp, #32
 8011c0e:	af02      	add	r7, sp, #8
 8011c10:	4603      	mov	r3, r0
 8011c12:	6039      	str	r1, [r7, #0]
 8011c14:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011c16:	2301      	movs	r3, #1
 8011c18:	617b      	str	r3, [r7, #20]
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011c1e:	79fb      	ldrb	r3, [r7, #7]
 8011c20:	9300      	str	r3, [sp, #0]
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	2200      	movs	r2, #0
 8011c26:	6939      	ldr	r1, [r7, #16]
 8011c28:	6978      	ldr	r0, [r7, #20]
 8011c2a:	f7ff fee7 	bl	80119fc <xQueueGenericCreateStatic>
 8011c2e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011c30:	68f8      	ldr	r0, [r7, #12]
 8011c32:	f7ff ffb8 	bl	8011ba6 <prvInitialiseMutex>

		return xNewQueue;
 8011c36:	68fb      	ldr	r3, [r7, #12]
	}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3718      	adds	r7, #24
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011c40:	b590      	push	{r4, r7, lr}
 8011c42:	b087      	sub	sp, #28
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d109      	bne.n	8011c66 <xQueueGiveMutexRecursive+0x26>
 8011c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c56:	f383 8811 	msr	BASEPRI, r3
 8011c5a:	f3bf 8f6f 	isb	sy
 8011c5e:	f3bf 8f4f 	dsb	sy
 8011c62:	60fb      	str	r3, [r7, #12]
 8011c64:	e7fe      	b.n	8011c64 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	689c      	ldr	r4, [r3, #8]
 8011c6a:	f001 fbdf 	bl	801342c <xTaskGetCurrentTaskHandle>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	429c      	cmp	r4, r3
 8011c72:	d111      	bne.n	8011c98 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011c74:	693b      	ldr	r3, [r7, #16]
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	1e5a      	subs	r2, r3, #1
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	68db      	ldr	r3, [r3, #12]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d105      	bne.n	8011c92 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011c86:	2300      	movs	r3, #0
 8011c88:	2200      	movs	r2, #0
 8011c8a:	2100      	movs	r1, #0
 8011c8c:	6938      	ldr	r0, [r7, #16]
 8011c8e:	f000 f83f 	bl	8011d10 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8011c92:	2301      	movs	r3, #1
 8011c94:	617b      	str	r3, [r7, #20]
 8011c96:	e001      	b.n	8011c9c <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8011c9c:	697b      	ldr	r3, [r7, #20]
	}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	371c      	adds	r7, #28
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd90      	pop	{r4, r7, pc}

08011ca6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011ca6:	b590      	push	{r4, r7, lr}
 8011ca8:	b087      	sub	sp, #28
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	6078      	str	r0, [r7, #4]
 8011cae:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011cb4:	693b      	ldr	r3, [r7, #16]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d109      	bne.n	8011cce <xQueueTakeMutexRecursive+0x28>
 8011cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cbe:	f383 8811 	msr	BASEPRI, r3
 8011cc2:	f3bf 8f6f 	isb	sy
 8011cc6:	f3bf 8f4f 	dsb	sy
 8011cca:	60fb      	str	r3, [r7, #12]
 8011ccc:	e7fe      	b.n	8011ccc <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	689c      	ldr	r4, [r3, #8]
 8011cd2:	f001 fbab 	bl	801342c <xTaskGetCurrentTaskHandle>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	429c      	cmp	r4, r3
 8011cda:	d107      	bne.n	8011cec <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011cdc:	693b      	ldr	r3, [r7, #16]
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	1c5a      	adds	r2, r3, #1
 8011ce2:	693b      	ldr	r3, [r7, #16]
 8011ce4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	617b      	str	r3, [r7, #20]
 8011cea:	e00c      	b.n	8011d06 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011cec:	6839      	ldr	r1, [r7, #0]
 8011cee:	6938      	ldr	r0, [r7, #16]
 8011cf0:	f000 fa78 	bl	80121e4 <xQueueSemaphoreTake>
 8011cf4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d004      	beq.n	8011d06 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	68db      	ldr	r3, [r3, #12]
 8011d00:	1c5a      	adds	r2, r3, #1
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011d06:	697b      	ldr	r3, [r7, #20]
	}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	371c      	adds	r7, #28
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd90      	pop	{r4, r7, pc}

08011d10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b08e      	sub	sp, #56	; 0x38
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	60f8      	str	r0, [r7, #12]
 8011d18:	60b9      	str	r1, [r7, #8]
 8011d1a:	607a      	str	r2, [r7, #4]
 8011d1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d109      	bne.n	8011d40 <xQueueGenericSend+0x30>
 8011d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d30:	f383 8811 	msr	BASEPRI, r3
 8011d34:	f3bf 8f6f 	isb	sy
 8011d38:	f3bf 8f4f 	dsb	sy
 8011d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d3e:	e7fe      	b.n	8011d3e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d103      	bne.n	8011d4e <xQueueGenericSend+0x3e>
 8011d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d101      	bne.n	8011d52 <xQueueGenericSend+0x42>
 8011d4e:	2301      	movs	r3, #1
 8011d50:	e000      	b.n	8011d54 <xQueueGenericSend+0x44>
 8011d52:	2300      	movs	r3, #0
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d109      	bne.n	8011d6c <xQueueGenericSend+0x5c>
 8011d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d5c:	f383 8811 	msr	BASEPRI, r3
 8011d60:	f3bf 8f6f 	isb	sy
 8011d64:	f3bf 8f4f 	dsb	sy
 8011d68:	627b      	str	r3, [r7, #36]	; 0x24
 8011d6a:	e7fe      	b.n	8011d6a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	2b02      	cmp	r3, #2
 8011d70:	d103      	bne.n	8011d7a <xQueueGenericSend+0x6a>
 8011d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d101      	bne.n	8011d7e <xQueueGenericSend+0x6e>
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	e000      	b.n	8011d80 <xQueueGenericSend+0x70>
 8011d7e:	2300      	movs	r3, #0
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d109      	bne.n	8011d98 <xQueueGenericSend+0x88>
 8011d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d88:	f383 8811 	msr	BASEPRI, r3
 8011d8c:	f3bf 8f6f 	isb	sy
 8011d90:	f3bf 8f4f 	dsb	sy
 8011d94:	623b      	str	r3, [r7, #32]
 8011d96:	e7fe      	b.n	8011d96 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d98:	f001 fb58 	bl	801344c <xTaskGetSchedulerState>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d102      	bne.n	8011da8 <xQueueGenericSend+0x98>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d101      	bne.n	8011dac <xQueueGenericSend+0x9c>
 8011da8:	2301      	movs	r3, #1
 8011daa:	e000      	b.n	8011dae <xQueueGenericSend+0x9e>
 8011dac:	2300      	movs	r3, #0
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d109      	bne.n	8011dc6 <xQueueGenericSend+0xb6>
 8011db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db6:	f383 8811 	msr	BASEPRI, r3
 8011dba:	f3bf 8f6f 	isb	sy
 8011dbe:	f3bf 8f4f 	dsb	sy
 8011dc2:	61fb      	str	r3, [r7, #28]
 8011dc4:	e7fe      	b.n	8011dc4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011dc6:	f002 f989 	bl	80140dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d302      	bcc.n	8011ddc <xQueueGenericSend+0xcc>
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	2b02      	cmp	r3, #2
 8011dda:	d129      	bne.n	8011e30 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011ddc:	683a      	ldr	r2, [r7, #0]
 8011dde:	68b9      	ldr	r1, [r7, #8]
 8011de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011de2:	f000 fb9c 	bl	801251e <prvCopyDataToQueue>
 8011de6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d010      	beq.n	8011e12 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df2:	3324      	adds	r3, #36	; 0x24
 8011df4:	4618      	mov	r0, r3
 8011df6:	f001 f963 	bl	80130c0 <xTaskRemoveFromEventList>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d013      	beq.n	8011e28 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011e00:	4b3f      	ldr	r3, [pc, #252]	; (8011f00 <xQueueGenericSend+0x1f0>)
 8011e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e06:	601a      	str	r2, [r3, #0]
 8011e08:	f3bf 8f4f 	dsb	sy
 8011e0c:	f3bf 8f6f 	isb	sy
 8011e10:	e00a      	b.n	8011e28 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d007      	beq.n	8011e28 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011e18:	4b39      	ldr	r3, [pc, #228]	; (8011f00 <xQueueGenericSend+0x1f0>)
 8011e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e1e:	601a      	str	r2, [r3, #0]
 8011e20:	f3bf 8f4f 	dsb	sy
 8011e24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011e28:	f002 f986 	bl	8014138 <vPortExitCritical>
				return pdPASS;
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	e063      	b.n	8011ef8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d103      	bne.n	8011e3e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e36:	f002 f97f 	bl	8014138 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	e05c      	b.n	8011ef8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d106      	bne.n	8011e52 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e44:	f107 0314 	add.w	r3, r7, #20
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f001 f99b 	bl	8013184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e4e:	2301      	movs	r3, #1
 8011e50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e52:	f002 f971 	bl	8014138 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e56:	f000 ff05 	bl	8012c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e5a:	f002 f93f 	bl	80140dc <vPortEnterCritical>
 8011e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e64:	b25b      	sxtb	r3, r3
 8011e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e6a:	d103      	bne.n	8011e74 <xQueueGenericSend+0x164>
 8011e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6e:	2200      	movs	r2, #0
 8011e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e7a:	b25b      	sxtb	r3, r3
 8011e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e80:	d103      	bne.n	8011e8a <xQueueGenericSend+0x17a>
 8011e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e84:	2200      	movs	r2, #0
 8011e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e8a:	f002 f955 	bl	8014138 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e8e:	1d3a      	adds	r2, r7, #4
 8011e90:	f107 0314 	add.w	r3, r7, #20
 8011e94:	4611      	mov	r1, r2
 8011e96:	4618      	mov	r0, r3
 8011e98:	f001 f98a 	bl	80131b0 <xTaskCheckForTimeOut>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d124      	bne.n	8011eec <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ea4:	f000 fc33 	bl	801270e <prvIsQueueFull>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d018      	beq.n	8011ee0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb0:	3310      	adds	r3, #16
 8011eb2:	687a      	ldr	r2, [r7, #4]
 8011eb4:	4611      	mov	r1, r2
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f001 f8b4 	bl	8013024 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ebe:	f000 fbbe 	bl	801263e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011ec2:	f000 fedd 	bl	8012c80 <xTaskResumeAll>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	f47f af7c 	bne.w	8011dc6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8011ece:	4b0c      	ldr	r3, [pc, #48]	; (8011f00 <xQueueGenericSend+0x1f0>)
 8011ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ed4:	601a      	str	r2, [r3, #0]
 8011ed6:	f3bf 8f4f 	dsb	sy
 8011eda:	f3bf 8f6f 	isb	sy
 8011ede:	e772      	b.n	8011dc6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ee2:	f000 fbac 	bl	801263e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ee6:	f000 fecb 	bl	8012c80 <xTaskResumeAll>
 8011eea:	e76c      	b.n	8011dc6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011eee:	f000 fba6 	bl	801263e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ef2:	f000 fec5 	bl	8012c80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011ef6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3738      	adds	r7, #56	; 0x38
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	e000ed04 	.word	0xe000ed04

08011f04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b08e      	sub	sp, #56	; 0x38
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	60f8      	str	r0, [r7, #12]
 8011f0c:	60b9      	str	r1, [r7, #8]
 8011f0e:	607a      	str	r2, [r7, #4]
 8011f10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d109      	bne.n	8011f30 <xQueueGenericSendFromISR+0x2c>
 8011f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f20:	f383 8811 	msr	BASEPRI, r3
 8011f24:	f3bf 8f6f 	isb	sy
 8011f28:	f3bf 8f4f 	dsb	sy
 8011f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8011f2e:	e7fe      	b.n	8011f2e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d103      	bne.n	8011f3e <xQueueGenericSendFromISR+0x3a>
 8011f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d101      	bne.n	8011f42 <xQueueGenericSendFromISR+0x3e>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	e000      	b.n	8011f44 <xQueueGenericSendFromISR+0x40>
 8011f42:	2300      	movs	r3, #0
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d109      	bne.n	8011f5c <xQueueGenericSendFromISR+0x58>
 8011f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f4c:	f383 8811 	msr	BASEPRI, r3
 8011f50:	f3bf 8f6f 	isb	sy
 8011f54:	f3bf 8f4f 	dsb	sy
 8011f58:	623b      	str	r3, [r7, #32]
 8011f5a:	e7fe      	b.n	8011f5a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	2b02      	cmp	r3, #2
 8011f60:	d103      	bne.n	8011f6a <xQueueGenericSendFromISR+0x66>
 8011f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d101      	bne.n	8011f6e <xQueueGenericSendFromISR+0x6a>
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	e000      	b.n	8011f70 <xQueueGenericSendFromISR+0x6c>
 8011f6e:	2300      	movs	r3, #0
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d109      	bne.n	8011f88 <xQueueGenericSendFromISR+0x84>
 8011f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f78:	f383 8811 	msr	BASEPRI, r3
 8011f7c:	f3bf 8f6f 	isb	sy
 8011f80:	f3bf 8f4f 	dsb	sy
 8011f84:	61fb      	str	r3, [r7, #28]
 8011f86:	e7fe      	b.n	8011f86 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f88:	f002 f984 	bl	8014294 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011f8c:	f3ef 8211 	mrs	r2, BASEPRI
 8011f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f94:	f383 8811 	msr	BASEPRI, r3
 8011f98:	f3bf 8f6f 	isb	sy
 8011f9c:	f3bf 8f4f 	dsb	sy
 8011fa0:	61ba      	str	r2, [r7, #24]
 8011fa2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011fa4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d302      	bcc.n	8011fba <xQueueGenericSendFromISR+0xb6>
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	2b02      	cmp	r3, #2
 8011fb8:	d12c      	bne.n	8012014 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011fc4:	683a      	ldr	r2, [r7, #0]
 8011fc6:	68b9      	ldr	r1, [r7, #8]
 8011fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fca:	f000 faa8 	bl	801251e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011fce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fd6:	d112      	bne.n	8011ffe <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d016      	beq.n	801200e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe2:	3324      	adds	r3, #36	; 0x24
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f001 f86b 	bl	80130c0 <xTaskRemoveFromEventList>
 8011fea:	4603      	mov	r3, r0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d00e      	beq.n	801200e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d00b      	beq.n	801200e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	601a      	str	r2, [r3, #0]
 8011ffc:	e007      	b.n	801200e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011ffe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012002:	3301      	adds	r3, #1
 8012004:	b2db      	uxtb	r3, r3
 8012006:	b25a      	sxtb	r2, r3
 8012008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801200a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801200e:	2301      	movs	r3, #1
 8012010:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012012:	e001      	b.n	8012018 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012014:	2300      	movs	r3, #0
 8012016:	637b      	str	r3, [r7, #52]	; 0x34
 8012018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801201a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012024:	4618      	mov	r0, r3
 8012026:	3738      	adds	r7, #56	; 0x38
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b08c      	sub	sp, #48	; 0x30
 8012030:	af00      	add	r7, sp, #0
 8012032:	60f8      	str	r0, [r7, #12]
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012038:	2300      	movs	r3, #0
 801203a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012042:	2b00      	cmp	r3, #0
 8012044:	d109      	bne.n	801205a <xQueueReceive+0x2e>
	__asm volatile
 8012046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801204a:	f383 8811 	msr	BASEPRI, r3
 801204e:	f3bf 8f6f 	isb	sy
 8012052:	f3bf 8f4f 	dsb	sy
 8012056:	623b      	str	r3, [r7, #32]
 8012058:	e7fe      	b.n	8012058 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d103      	bne.n	8012068 <xQueueReceive+0x3c>
 8012060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012064:	2b00      	cmp	r3, #0
 8012066:	d101      	bne.n	801206c <xQueueReceive+0x40>
 8012068:	2301      	movs	r3, #1
 801206a:	e000      	b.n	801206e <xQueueReceive+0x42>
 801206c:	2300      	movs	r3, #0
 801206e:	2b00      	cmp	r3, #0
 8012070:	d109      	bne.n	8012086 <xQueueReceive+0x5a>
 8012072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012076:	f383 8811 	msr	BASEPRI, r3
 801207a:	f3bf 8f6f 	isb	sy
 801207e:	f3bf 8f4f 	dsb	sy
 8012082:	61fb      	str	r3, [r7, #28]
 8012084:	e7fe      	b.n	8012084 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012086:	f001 f9e1 	bl	801344c <xTaskGetSchedulerState>
 801208a:	4603      	mov	r3, r0
 801208c:	2b00      	cmp	r3, #0
 801208e:	d102      	bne.n	8012096 <xQueueReceive+0x6a>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d101      	bne.n	801209a <xQueueReceive+0x6e>
 8012096:	2301      	movs	r3, #1
 8012098:	e000      	b.n	801209c <xQueueReceive+0x70>
 801209a:	2300      	movs	r3, #0
 801209c:	2b00      	cmp	r3, #0
 801209e:	d109      	bne.n	80120b4 <xQueueReceive+0x88>
 80120a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a4:	f383 8811 	msr	BASEPRI, r3
 80120a8:	f3bf 8f6f 	isb	sy
 80120ac:	f3bf 8f4f 	dsb	sy
 80120b0:	61bb      	str	r3, [r7, #24]
 80120b2:	e7fe      	b.n	80120b2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80120b4:	f002 f812 	bl	80140dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80120b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120bc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80120be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d01f      	beq.n	8012104 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80120c4:	68b9      	ldr	r1, [r7, #8]
 80120c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120c8:	f000 fa93 	bl	80125f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80120cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ce:	1e5a      	subs	r2, r3, #1
 80120d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80120d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d6:	691b      	ldr	r3, [r3, #16]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d00f      	beq.n	80120fc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80120dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120de:	3310      	adds	r3, #16
 80120e0:	4618      	mov	r0, r3
 80120e2:	f000 ffed 	bl	80130c0 <xTaskRemoveFromEventList>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d007      	beq.n	80120fc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80120ec:	4b3c      	ldr	r3, [pc, #240]	; (80121e0 <xQueueReceive+0x1b4>)
 80120ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120f2:	601a      	str	r2, [r3, #0]
 80120f4:	f3bf 8f4f 	dsb	sy
 80120f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80120fc:	f002 f81c 	bl	8014138 <vPortExitCritical>
				return pdPASS;
 8012100:	2301      	movs	r3, #1
 8012102:	e069      	b.n	80121d8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d103      	bne.n	8012112 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801210a:	f002 f815 	bl	8014138 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801210e:	2300      	movs	r3, #0
 8012110:	e062      	b.n	80121d8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012114:	2b00      	cmp	r3, #0
 8012116:	d106      	bne.n	8012126 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012118:	f107 0310 	add.w	r3, r7, #16
 801211c:	4618      	mov	r0, r3
 801211e:	f001 f831 	bl	8013184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012122:	2301      	movs	r3, #1
 8012124:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012126:	f002 f807 	bl	8014138 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801212a:	f000 fd9b 	bl	8012c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801212e:	f001 ffd5 	bl	80140dc <vPortEnterCritical>
 8012132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012138:	b25b      	sxtb	r3, r3
 801213a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801213e:	d103      	bne.n	8012148 <xQueueReceive+0x11c>
 8012140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012142:	2200      	movs	r2, #0
 8012144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801214a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801214e:	b25b      	sxtb	r3, r3
 8012150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012154:	d103      	bne.n	801215e <xQueueReceive+0x132>
 8012156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012158:	2200      	movs	r2, #0
 801215a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801215e:	f001 ffeb 	bl	8014138 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012162:	1d3a      	adds	r2, r7, #4
 8012164:	f107 0310 	add.w	r3, r7, #16
 8012168:	4611      	mov	r1, r2
 801216a:	4618      	mov	r0, r3
 801216c:	f001 f820 	bl	80131b0 <xTaskCheckForTimeOut>
 8012170:	4603      	mov	r3, r0
 8012172:	2b00      	cmp	r3, #0
 8012174:	d123      	bne.n	80121be <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012178:	f000 fab3 	bl	80126e2 <prvIsQueueEmpty>
 801217c:	4603      	mov	r3, r0
 801217e:	2b00      	cmp	r3, #0
 8012180:	d017      	beq.n	80121b2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012184:	3324      	adds	r3, #36	; 0x24
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	4611      	mov	r1, r2
 801218a:	4618      	mov	r0, r3
 801218c:	f000 ff4a 	bl	8013024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012192:	f000 fa54 	bl	801263e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012196:	f000 fd73 	bl	8012c80 <xTaskResumeAll>
 801219a:	4603      	mov	r3, r0
 801219c:	2b00      	cmp	r3, #0
 801219e:	d189      	bne.n	80120b4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80121a0:	4b0f      	ldr	r3, [pc, #60]	; (80121e0 <xQueueReceive+0x1b4>)
 80121a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121a6:	601a      	str	r2, [r3, #0]
 80121a8:	f3bf 8f4f 	dsb	sy
 80121ac:	f3bf 8f6f 	isb	sy
 80121b0:	e780      	b.n	80120b4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80121b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121b4:	f000 fa43 	bl	801263e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80121b8:	f000 fd62 	bl	8012c80 <xTaskResumeAll>
 80121bc:	e77a      	b.n	80120b4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80121be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121c0:	f000 fa3d 	bl	801263e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80121c4:	f000 fd5c 	bl	8012c80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80121c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121ca:	f000 fa8a 	bl	80126e2 <prvIsQueueEmpty>
 80121ce:	4603      	mov	r3, r0
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	f43f af6f 	beq.w	80120b4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80121d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3730      	adds	r7, #48	; 0x30
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}
 80121e0:	e000ed04 	.word	0xe000ed04

080121e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b08e      	sub	sp, #56	; 0x38
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80121ee:	2300      	movs	r3, #0
 80121f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80121f6:	2300      	movs	r3, #0
 80121f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80121fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d109      	bne.n	8012214 <xQueueSemaphoreTake+0x30>
 8012200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012204:	f383 8811 	msr	BASEPRI, r3
 8012208:	f3bf 8f6f 	isb	sy
 801220c:	f3bf 8f4f 	dsb	sy
 8012210:	623b      	str	r3, [r7, #32]
 8012212:	e7fe      	b.n	8012212 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012218:	2b00      	cmp	r3, #0
 801221a:	d009      	beq.n	8012230 <xQueueSemaphoreTake+0x4c>
 801221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012220:	f383 8811 	msr	BASEPRI, r3
 8012224:	f3bf 8f6f 	isb	sy
 8012228:	f3bf 8f4f 	dsb	sy
 801222c:	61fb      	str	r3, [r7, #28]
 801222e:	e7fe      	b.n	801222e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012230:	f001 f90c 	bl	801344c <xTaskGetSchedulerState>
 8012234:	4603      	mov	r3, r0
 8012236:	2b00      	cmp	r3, #0
 8012238:	d102      	bne.n	8012240 <xQueueSemaphoreTake+0x5c>
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d101      	bne.n	8012244 <xQueueSemaphoreTake+0x60>
 8012240:	2301      	movs	r3, #1
 8012242:	e000      	b.n	8012246 <xQueueSemaphoreTake+0x62>
 8012244:	2300      	movs	r3, #0
 8012246:	2b00      	cmp	r3, #0
 8012248:	d109      	bne.n	801225e <xQueueSemaphoreTake+0x7a>
 801224a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224e:	f383 8811 	msr	BASEPRI, r3
 8012252:	f3bf 8f6f 	isb	sy
 8012256:	f3bf 8f4f 	dsb	sy
 801225a:	61bb      	str	r3, [r7, #24]
 801225c:	e7fe      	b.n	801225c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801225e:	f001 ff3d 	bl	80140dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012266:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801226a:	2b00      	cmp	r3, #0
 801226c:	d024      	beq.n	80122b8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012270:	1e5a      	subs	r2, r3, #1
 8012272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012274:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d104      	bne.n	8012288 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801227e:	f001 fa57 	bl	8013730 <pvTaskIncrementMutexHeldCount>
 8012282:	4602      	mov	r2, r0
 8012284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012286:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228a:	691b      	ldr	r3, [r3, #16]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d00f      	beq.n	80122b0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012292:	3310      	adds	r3, #16
 8012294:	4618      	mov	r0, r3
 8012296:	f000 ff13 	bl	80130c0 <xTaskRemoveFromEventList>
 801229a:	4603      	mov	r3, r0
 801229c:	2b00      	cmp	r3, #0
 801229e:	d007      	beq.n	80122b0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80122a0:	4b53      	ldr	r3, [pc, #332]	; (80123f0 <xQueueSemaphoreTake+0x20c>)
 80122a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122a6:	601a      	str	r2, [r3, #0]
 80122a8:	f3bf 8f4f 	dsb	sy
 80122ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80122b0:	f001 ff42 	bl	8014138 <vPortExitCritical>
				return pdPASS;
 80122b4:	2301      	movs	r3, #1
 80122b6:	e096      	b.n	80123e6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d110      	bne.n	80122e0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80122be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d009      	beq.n	80122d8 <xQueueSemaphoreTake+0xf4>
 80122c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c8:	f383 8811 	msr	BASEPRI, r3
 80122cc:	f3bf 8f6f 	isb	sy
 80122d0:	f3bf 8f4f 	dsb	sy
 80122d4:	617b      	str	r3, [r7, #20]
 80122d6:	e7fe      	b.n	80122d6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80122d8:	f001 ff2e 	bl	8014138 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80122dc:	2300      	movs	r3, #0
 80122de:	e082      	b.n	80123e6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80122e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d106      	bne.n	80122f4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80122e6:	f107 030c 	add.w	r3, r7, #12
 80122ea:	4618      	mov	r0, r3
 80122ec:	f000 ff4a 	bl	8013184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80122f0:	2301      	movs	r3, #1
 80122f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80122f4:	f001 ff20 	bl	8014138 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80122f8:	f000 fcb4 	bl	8012c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80122fc:	f001 feee 	bl	80140dc <vPortEnterCritical>
 8012300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012306:	b25b      	sxtb	r3, r3
 8012308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801230c:	d103      	bne.n	8012316 <xQueueSemaphoreTake+0x132>
 801230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012310:	2200      	movs	r2, #0
 8012312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801231c:	b25b      	sxtb	r3, r3
 801231e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012322:	d103      	bne.n	801232c <xQueueSemaphoreTake+0x148>
 8012324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012326:	2200      	movs	r2, #0
 8012328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801232c:	f001 ff04 	bl	8014138 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012330:	463a      	mov	r2, r7
 8012332:	f107 030c 	add.w	r3, r7, #12
 8012336:	4611      	mov	r1, r2
 8012338:	4618      	mov	r0, r3
 801233a:	f000 ff39 	bl	80131b0 <xTaskCheckForTimeOut>
 801233e:	4603      	mov	r3, r0
 8012340:	2b00      	cmp	r3, #0
 8012342:	d132      	bne.n	80123aa <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012346:	f000 f9cc 	bl	80126e2 <prvIsQueueEmpty>
 801234a:	4603      	mov	r3, r0
 801234c:	2b00      	cmp	r3, #0
 801234e:	d026      	beq.n	801239e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d109      	bne.n	801236c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8012358:	f001 fec0 	bl	80140dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235e:	689b      	ldr	r3, [r3, #8]
 8012360:	4618      	mov	r0, r3
 8012362:	f001 f891 	bl	8013488 <xTaskPriorityInherit>
 8012366:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012368:	f001 fee6 	bl	8014138 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801236c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801236e:	3324      	adds	r3, #36	; 0x24
 8012370:	683a      	ldr	r2, [r7, #0]
 8012372:	4611      	mov	r1, r2
 8012374:	4618      	mov	r0, r3
 8012376:	f000 fe55 	bl	8013024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801237a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801237c:	f000 f95f 	bl	801263e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012380:	f000 fc7e 	bl	8012c80 <xTaskResumeAll>
 8012384:	4603      	mov	r3, r0
 8012386:	2b00      	cmp	r3, #0
 8012388:	f47f af69 	bne.w	801225e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 801238c:	4b18      	ldr	r3, [pc, #96]	; (80123f0 <xQueueSemaphoreTake+0x20c>)
 801238e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012392:	601a      	str	r2, [r3, #0]
 8012394:	f3bf 8f4f 	dsb	sy
 8012398:	f3bf 8f6f 	isb	sy
 801239c:	e75f      	b.n	801225e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801239e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80123a0:	f000 f94d 	bl	801263e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80123a4:	f000 fc6c 	bl	8012c80 <xTaskResumeAll>
 80123a8:	e759      	b.n	801225e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80123aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80123ac:	f000 f947 	bl	801263e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80123b0:	f000 fc66 	bl	8012c80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80123b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80123b6:	f000 f994 	bl	80126e2 <prvIsQueueEmpty>
 80123ba:	4603      	mov	r3, r0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	f43f af4e 	beq.w	801225e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80123c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d00d      	beq.n	80123e4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80123c8:	f001 fe88 	bl	80140dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80123cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80123ce:	f000 f88e 	bl	80124ee <prvGetDisinheritPriorityAfterTimeout>
 80123d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80123d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d6:	689b      	ldr	r3, [r3, #8]
 80123d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80123da:	4618      	mov	r0, r3
 80123dc:	f001 f928 	bl	8013630 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80123e0:	f001 feaa 	bl	8014138 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80123e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3738      	adds	r7, #56	; 0x38
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	e000ed04 	.word	0xe000ed04

080123f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b08e      	sub	sp, #56	; 0x38
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	60f8      	str	r0, [r7, #12]
 80123fc:	60b9      	str	r1, [r7, #8]
 80123fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012406:	2b00      	cmp	r3, #0
 8012408:	d109      	bne.n	801241e <xQueueReceiveFromISR+0x2a>
 801240a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801240e:	f383 8811 	msr	BASEPRI, r3
 8012412:	f3bf 8f6f 	isb	sy
 8012416:	f3bf 8f4f 	dsb	sy
 801241a:	623b      	str	r3, [r7, #32]
 801241c:	e7fe      	b.n	801241c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d103      	bne.n	801242c <xQueueReceiveFromISR+0x38>
 8012424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012428:	2b00      	cmp	r3, #0
 801242a:	d101      	bne.n	8012430 <xQueueReceiveFromISR+0x3c>
 801242c:	2301      	movs	r3, #1
 801242e:	e000      	b.n	8012432 <xQueueReceiveFromISR+0x3e>
 8012430:	2300      	movs	r3, #0
 8012432:	2b00      	cmp	r3, #0
 8012434:	d109      	bne.n	801244a <xQueueReceiveFromISR+0x56>
 8012436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801243a:	f383 8811 	msr	BASEPRI, r3
 801243e:	f3bf 8f6f 	isb	sy
 8012442:	f3bf 8f4f 	dsb	sy
 8012446:	61fb      	str	r3, [r7, #28]
 8012448:	e7fe      	b.n	8012448 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801244a:	f001 ff23 	bl	8014294 <vPortValidateInterruptPriority>
	__asm volatile
 801244e:	f3ef 8211 	mrs	r2, BASEPRI
 8012452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012456:	f383 8811 	msr	BASEPRI, r3
 801245a:	f3bf 8f6f 	isb	sy
 801245e:	f3bf 8f4f 	dsb	sy
 8012462:	61ba      	str	r2, [r7, #24]
 8012464:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012466:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012468:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801246e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012472:	2b00      	cmp	r3, #0
 8012474:	d02f      	beq.n	80124d6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801247c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012480:	68b9      	ldr	r1, [r7, #8]
 8012482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012484:	f000 f8b5 	bl	80125f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248a:	1e5a      	subs	r2, r3, #1
 801248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801248e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012490:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012498:	d112      	bne.n	80124c0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801249c:	691b      	ldr	r3, [r3, #16]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d016      	beq.n	80124d0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a4:	3310      	adds	r3, #16
 80124a6:	4618      	mov	r0, r3
 80124a8:	f000 fe0a 	bl	80130c0 <xTaskRemoveFromEventList>
 80124ac:	4603      	mov	r3, r0
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d00e      	beq.n	80124d0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00b      	beq.n	80124d0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2201      	movs	r2, #1
 80124bc:	601a      	str	r2, [r3, #0]
 80124be:	e007      	b.n	80124d0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80124c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124c4:	3301      	adds	r3, #1
 80124c6:	b2db      	uxtb	r3, r3
 80124c8:	b25a      	sxtb	r2, r3
 80124ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80124d0:	2301      	movs	r3, #1
 80124d2:	637b      	str	r3, [r7, #52]	; 0x34
 80124d4:	e001      	b.n	80124da <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80124d6:	2300      	movs	r3, #0
 80124d8:	637b      	str	r3, [r7, #52]	; 0x34
 80124da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80124e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3738      	adds	r7, #56	; 0x38
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80124ee:	b480      	push	{r7}
 80124f0:	b085      	sub	sp, #20
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d006      	beq.n	801250c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012508:	60fb      	str	r3, [r7, #12]
 801250a:	e001      	b.n	8012510 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801250c:	2300      	movs	r3, #0
 801250e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012510:	68fb      	ldr	r3, [r7, #12]
	}
 8012512:	4618      	mov	r0, r3
 8012514:	3714      	adds	r7, #20
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr

0801251e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801251e:	b580      	push	{r7, lr}
 8012520:	b086      	sub	sp, #24
 8012522:	af00      	add	r7, sp, #0
 8012524:	60f8      	str	r0, [r7, #12]
 8012526:	60b9      	str	r1, [r7, #8]
 8012528:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801252a:	2300      	movs	r3, #0
 801252c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012532:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012538:	2b00      	cmp	r3, #0
 801253a:	d10d      	bne.n	8012558 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d14d      	bne.n	80125e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	689b      	ldr	r3, [r3, #8]
 8012548:	4618      	mov	r0, r3
 801254a:	f001 f805 	bl	8013558 <xTaskPriorityDisinherit>
 801254e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2200      	movs	r2, #0
 8012554:	609a      	str	r2, [r3, #8]
 8012556:	e043      	b.n	80125e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d119      	bne.n	8012592 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	6858      	ldr	r0, [r3, #4]
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012566:	461a      	mov	r2, r3
 8012568:	68b9      	ldr	r1, [r7, #8]
 801256a:	f002 fde5 	bl	8015138 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	685a      	ldr	r2, [r3, #4]
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012576:	441a      	add	r2, r3
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	685a      	ldr	r2, [r3, #4]
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	689b      	ldr	r3, [r3, #8]
 8012584:	429a      	cmp	r2, r3
 8012586:	d32b      	bcc.n	80125e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681a      	ldr	r2, [r3, #0]
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	605a      	str	r2, [r3, #4]
 8012590:	e026      	b.n	80125e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	68d8      	ldr	r0, [r3, #12]
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801259a:	461a      	mov	r2, r3
 801259c:	68b9      	ldr	r1, [r7, #8]
 801259e:	f002 fdcb 	bl	8015138 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	68da      	ldr	r2, [r3, #12]
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125aa:	425b      	negs	r3, r3
 80125ac:	441a      	add	r2, r3
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	68da      	ldr	r2, [r3, #12]
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d207      	bcs.n	80125ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	689a      	ldr	r2, [r3, #8]
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125c6:	425b      	negs	r3, r3
 80125c8:	441a      	add	r2, r3
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2b02      	cmp	r3, #2
 80125d2:	d105      	bne.n	80125e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d002      	beq.n	80125e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	3b01      	subs	r3, #1
 80125de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80125e0:	693b      	ldr	r3, [r7, #16]
 80125e2:	1c5a      	adds	r2, r3, #1
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80125e8:	697b      	ldr	r3, [r7, #20]
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3718      	adds	r7, #24
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}

080125f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80125f2:	b580      	push	{r7, lr}
 80125f4:	b082      	sub	sp, #8
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
 80125fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012600:	2b00      	cmp	r3, #0
 8012602:	d018      	beq.n	8012636 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	68da      	ldr	r2, [r3, #12]
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801260c:	441a      	add	r2, r3
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	68da      	ldr	r2, [r3, #12]
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	689b      	ldr	r3, [r3, #8]
 801261a:	429a      	cmp	r2, r3
 801261c:	d303      	bcc.n	8012626 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	68d9      	ldr	r1, [r3, #12]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801262e:	461a      	mov	r2, r3
 8012630:	6838      	ldr	r0, [r7, #0]
 8012632:	f002 fd81 	bl	8015138 <memcpy>
	}
}
 8012636:	bf00      	nop
 8012638:	3708      	adds	r7, #8
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}

0801263e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801263e:	b580      	push	{r7, lr}
 8012640:	b084      	sub	sp, #16
 8012642:	af00      	add	r7, sp, #0
 8012644:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012646:	f001 fd49 	bl	80140dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012650:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012652:	e011      	b.n	8012678 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012658:	2b00      	cmp	r3, #0
 801265a:	d012      	beq.n	8012682 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	3324      	adds	r3, #36	; 0x24
 8012660:	4618      	mov	r0, r3
 8012662:	f000 fd2d 	bl	80130c0 <xTaskRemoveFromEventList>
 8012666:	4603      	mov	r3, r0
 8012668:	2b00      	cmp	r3, #0
 801266a:	d001      	beq.n	8012670 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801266c:	f000 fe00 	bl	8013270 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012670:	7bfb      	ldrb	r3, [r7, #15]
 8012672:	3b01      	subs	r3, #1
 8012674:	b2db      	uxtb	r3, r3
 8012676:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801267c:	2b00      	cmp	r3, #0
 801267e:	dce9      	bgt.n	8012654 <prvUnlockQueue+0x16>
 8012680:	e000      	b.n	8012684 <prvUnlockQueue+0x46>
					break;
 8012682:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	22ff      	movs	r2, #255	; 0xff
 8012688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801268c:	f001 fd54 	bl	8014138 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012690:	f001 fd24 	bl	80140dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801269a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801269c:	e011      	b.n	80126c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	691b      	ldr	r3, [r3, #16]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d012      	beq.n	80126cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	3310      	adds	r3, #16
 80126aa:	4618      	mov	r0, r3
 80126ac:	f000 fd08 	bl	80130c0 <xTaskRemoveFromEventList>
 80126b0:	4603      	mov	r3, r0
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d001      	beq.n	80126ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80126b6:	f000 fddb 	bl	8013270 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80126ba:	7bbb      	ldrb	r3, [r7, #14]
 80126bc:	3b01      	subs	r3, #1
 80126be:	b2db      	uxtb	r3, r3
 80126c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80126c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	dce9      	bgt.n	801269e <prvUnlockQueue+0x60>
 80126ca:	e000      	b.n	80126ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80126cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	22ff      	movs	r2, #255	; 0xff
 80126d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80126d6:	f001 fd2f 	bl	8014138 <vPortExitCritical>
}
 80126da:	bf00      	nop
 80126dc:	3710      	adds	r7, #16
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}

080126e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80126e2:	b580      	push	{r7, lr}
 80126e4:	b084      	sub	sp, #16
 80126e6:	af00      	add	r7, sp, #0
 80126e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80126ea:	f001 fcf7 	bl	80140dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d102      	bne.n	80126fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80126f6:	2301      	movs	r3, #1
 80126f8:	60fb      	str	r3, [r7, #12]
 80126fa:	e001      	b.n	8012700 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80126fc:	2300      	movs	r3, #0
 80126fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012700:	f001 fd1a 	bl	8014138 <vPortExitCritical>

	return xReturn;
 8012704:	68fb      	ldr	r3, [r7, #12]
}
 8012706:	4618      	mov	r0, r3
 8012708:	3710      	adds	r7, #16
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}

0801270e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801270e:	b580      	push	{r7, lr}
 8012710:	b084      	sub	sp, #16
 8012712:	af00      	add	r7, sp, #0
 8012714:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012716:	f001 fce1 	bl	80140dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012722:	429a      	cmp	r2, r3
 8012724:	d102      	bne.n	801272c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012726:	2301      	movs	r3, #1
 8012728:	60fb      	str	r3, [r7, #12]
 801272a:	e001      	b.n	8012730 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801272c:	2300      	movs	r3, #0
 801272e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012730:	f001 fd02 	bl	8014138 <vPortExitCritical>

	return xReturn;
 8012734:	68fb      	ldr	r3, [r7, #12]
}
 8012736:	4618      	mov	r0, r3
 8012738:	3710      	adds	r7, #16
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}
	...

08012740 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012740:	b480      	push	{r7}
 8012742:	b085      	sub	sp, #20
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801274a:	2300      	movs	r3, #0
 801274c:	60fb      	str	r3, [r7, #12]
 801274e:	e014      	b.n	801277a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012750:	4a0e      	ldr	r2, [pc, #56]	; (801278c <vQueueAddToRegistry+0x4c>)
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d10b      	bne.n	8012774 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801275c:	490b      	ldr	r1, [pc, #44]	; (801278c <vQueueAddToRegistry+0x4c>)
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	683a      	ldr	r2, [r7, #0]
 8012762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012766:	4a09      	ldr	r2, [pc, #36]	; (801278c <vQueueAddToRegistry+0x4c>)
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	00db      	lsls	r3, r3, #3
 801276c:	4413      	add	r3, r2
 801276e:	687a      	ldr	r2, [r7, #4]
 8012770:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012772:	e005      	b.n	8012780 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	3301      	adds	r3, #1
 8012778:	60fb      	str	r3, [r7, #12]
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	2b07      	cmp	r3, #7
 801277e:	d9e7      	bls.n	8012750 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012780:	bf00      	nop
 8012782:	3714      	adds	r7, #20
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr
 801278c:	2401bb04 	.word	0x2401bb04

08012790 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012790:	b580      	push	{r7, lr}
 8012792:	b086      	sub	sp, #24
 8012794:	af00      	add	r7, sp, #0
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	60b9      	str	r1, [r7, #8]
 801279a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80127a0:	f001 fc9c 	bl	80140dc <vPortEnterCritical>
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127aa:	b25b      	sxtb	r3, r3
 80127ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127b0:	d103      	bne.n	80127ba <vQueueWaitForMessageRestricted+0x2a>
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	2200      	movs	r2, #0
 80127b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127c0:	b25b      	sxtb	r3, r3
 80127c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127c6:	d103      	bne.n	80127d0 <vQueueWaitForMessageRestricted+0x40>
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	2200      	movs	r2, #0
 80127cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127d0:	f001 fcb2 	bl	8014138 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d106      	bne.n	80127ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	3324      	adds	r3, #36	; 0x24
 80127e0:	687a      	ldr	r2, [r7, #4]
 80127e2:	68b9      	ldr	r1, [r7, #8]
 80127e4:	4618      	mov	r0, r3
 80127e6:	f000 fc41 	bl	801306c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80127ea:	6978      	ldr	r0, [r7, #20]
 80127ec:	f7ff ff27 	bl	801263e <prvUnlockQueue>
	}
 80127f0:	bf00      	nop
 80127f2:	3718      	adds	r7, #24
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b08e      	sub	sp, #56	; 0x38
 80127fc:	af04      	add	r7, sp, #16
 80127fe:	60f8      	str	r0, [r7, #12]
 8012800:	60b9      	str	r1, [r7, #8]
 8012802:	607a      	str	r2, [r7, #4]
 8012804:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012808:	2b00      	cmp	r3, #0
 801280a:	d109      	bne.n	8012820 <xTaskCreateStatic+0x28>
	__asm volatile
 801280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012810:	f383 8811 	msr	BASEPRI, r3
 8012814:	f3bf 8f6f 	isb	sy
 8012818:	f3bf 8f4f 	dsb	sy
 801281c:	623b      	str	r3, [r7, #32]
 801281e:	e7fe      	b.n	801281e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8012820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012822:	2b00      	cmp	r3, #0
 8012824:	d109      	bne.n	801283a <xTaskCreateStatic+0x42>
 8012826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801282a:	f383 8811 	msr	BASEPRI, r3
 801282e:	f3bf 8f6f 	isb	sy
 8012832:	f3bf 8f4f 	dsb	sy
 8012836:	61fb      	str	r3, [r7, #28]
 8012838:	e7fe      	b.n	8012838 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801283a:	235c      	movs	r3, #92	; 0x5c
 801283c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	2b5c      	cmp	r3, #92	; 0x5c
 8012842:	d009      	beq.n	8012858 <xTaskCreateStatic+0x60>
 8012844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012848:	f383 8811 	msr	BASEPRI, r3
 801284c:	f3bf 8f6f 	isb	sy
 8012850:	f3bf 8f4f 	dsb	sy
 8012854:	61bb      	str	r3, [r7, #24]
 8012856:	e7fe      	b.n	8012856 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012858:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285c:	2b00      	cmp	r3, #0
 801285e:	d01e      	beq.n	801289e <xTaskCreateStatic+0xa6>
 8012860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012862:	2b00      	cmp	r3, #0
 8012864:	d01b      	beq.n	801289e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012868:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801286e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012872:	2202      	movs	r2, #2
 8012874:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012878:	2300      	movs	r3, #0
 801287a:	9303      	str	r3, [sp, #12]
 801287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287e:	9302      	str	r3, [sp, #8]
 8012880:	f107 0314 	add.w	r3, r7, #20
 8012884:	9301      	str	r3, [sp, #4]
 8012886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012888:	9300      	str	r3, [sp, #0]
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	687a      	ldr	r2, [r7, #4]
 801288e:	68b9      	ldr	r1, [r7, #8]
 8012890:	68f8      	ldr	r0, [r7, #12]
 8012892:	f000 f850 	bl	8012936 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012898:	f000 f8dc 	bl	8012a54 <prvAddNewTaskToReadyList>
 801289c:	e001      	b.n	80128a2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801289e:	2300      	movs	r3, #0
 80128a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80128a2:	697b      	ldr	r3, [r7, #20]
	}
 80128a4:	4618      	mov	r0, r3
 80128a6:	3728      	adds	r7, #40	; 0x28
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}

080128ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b08c      	sub	sp, #48	; 0x30
 80128b0:	af04      	add	r7, sp, #16
 80128b2:	60f8      	str	r0, [r7, #12]
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	603b      	str	r3, [r7, #0]
 80128b8:	4613      	mov	r3, r2
 80128ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80128bc:	88fb      	ldrh	r3, [r7, #6]
 80128be:	009b      	lsls	r3, r3, #2
 80128c0:	4618      	mov	r0, r3
 80128c2:	f001 fd25 	bl	8014310 <pvPortMalloc>
 80128c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d00e      	beq.n	80128ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80128ce:	205c      	movs	r0, #92	; 0x5c
 80128d0:	f001 fd1e 	bl	8014310 <pvPortMalloc>
 80128d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80128d6:	69fb      	ldr	r3, [r7, #28]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d003      	beq.n	80128e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80128dc:	69fb      	ldr	r3, [r7, #28]
 80128de:	697a      	ldr	r2, [r7, #20]
 80128e0:	631a      	str	r2, [r3, #48]	; 0x30
 80128e2:	e005      	b.n	80128f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80128e4:	6978      	ldr	r0, [r7, #20]
 80128e6:	f001 fdd5 	bl	8014494 <vPortFree>
 80128ea:	e001      	b.n	80128f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80128ec:	2300      	movs	r3, #0
 80128ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d017      	beq.n	8012926 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80128f6:	69fb      	ldr	r3, [r7, #28]
 80128f8:	2200      	movs	r2, #0
 80128fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80128fe:	88fa      	ldrh	r2, [r7, #6]
 8012900:	2300      	movs	r3, #0
 8012902:	9303      	str	r3, [sp, #12]
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	9302      	str	r3, [sp, #8]
 8012908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290a:	9301      	str	r3, [sp, #4]
 801290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801290e:	9300      	str	r3, [sp, #0]
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	68b9      	ldr	r1, [r7, #8]
 8012914:	68f8      	ldr	r0, [r7, #12]
 8012916:	f000 f80e 	bl	8012936 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801291a:	69f8      	ldr	r0, [r7, #28]
 801291c:	f000 f89a 	bl	8012a54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012920:	2301      	movs	r3, #1
 8012922:	61bb      	str	r3, [r7, #24]
 8012924:	e002      	b.n	801292c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012926:	f04f 33ff 	mov.w	r3, #4294967295
 801292a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801292c:	69bb      	ldr	r3, [r7, #24]
	}
 801292e:	4618      	mov	r0, r3
 8012930:	3720      	adds	r7, #32
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012936:	b580      	push	{r7, lr}
 8012938:	b088      	sub	sp, #32
 801293a:	af00      	add	r7, sp, #0
 801293c:	60f8      	str	r0, [r7, #12]
 801293e:	60b9      	str	r1, [r7, #8]
 8012940:	607a      	str	r2, [r7, #4]
 8012942:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012946:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	009b      	lsls	r3, r3, #2
 801294c:	461a      	mov	r2, r3
 801294e:	21a5      	movs	r1, #165	; 0xa5
 8012950:	f002 fbfd 	bl	801514e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012958:	6879      	ldr	r1, [r7, #4]
 801295a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801295e:	440b      	add	r3, r1
 8012960:	009b      	lsls	r3, r3, #2
 8012962:	4413      	add	r3, r2
 8012964:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012966:	69bb      	ldr	r3, [r7, #24]
 8012968:	f023 0307 	bic.w	r3, r3, #7
 801296c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801296e:	69bb      	ldr	r3, [r7, #24]
 8012970:	f003 0307 	and.w	r3, r3, #7
 8012974:	2b00      	cmp	r3, #0
 8012976:	d009      	beq.n	801298c <prvInitialiseNewTask+0x56>
 8012978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297c:	f383 8811 	msr	BASEPRI, r3
 8012980:	f3bf 8f6f 	isb	sy
 8012984:	f3bf 8f4f 	dsb	sy
 8012988:	617b      	str	r3, [r7, #20]
 801298a:	e7fe      	b.n	801298a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d01f      	beq.n	80129d2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012992:	2300      	movs	r3, #0
 8012994:	61fb      	str	r3, [r7, #28]
 8012996:	e012      	b.n	80129be <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012998:	68ba      	ldr	r2, [r7, #8]
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	4413      	add	r3, r2
 801299e:	7819      	ldrb	r1, [r3, #0]
 80129a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129a2:	69fb      	ldr	r3, [r7, #28]
 80129a4:	4413      	add	r3, r2
 80129a6:	3334      	adds	r3, #52	; 0x34
 80129a8:	460a      	mov	r2, r1
 80129aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80129ac:	68ba      	ldr	r2, [r7, #8]
 80129ae:	69fb      	ldr	r3, [r7, #28]
 80129b0:	4413      	add	r3, r2
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d006      	beq.n	80129c6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80129b8:	69fb      	ldr	r3, [r7, #28]
 80129ba:	3301      	adds	r3, #1
 80129bc:	61fb      	str	r3, [r7, #28]
 80129be:	69fb      	ldr	r3, [r7, #28]
 80129c0:	2b0f      	cmp	r3, #15
 80129c2:	d9e9      	bls.n	8012998 <prvInitialiseNewTask+0x62>
 80129c4:	e000      	b.n	80129c8 <prvInitialiseNewTask+0x92>
			{
				break;
 80129c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80129c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ca:	2200      	movs	r2, #0
 80129cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80129d0:	e003      	b.n	80129da <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80129d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d4:	2200      	movs	r2, #0
 80129d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80129da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129dc:	2b37      	cmp	r3, #55	; 0x37
 80129de:	d901      	bls.n	80129e4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80129e0:	2337      	movs	r3, #55	; 0x37
 80129e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80129e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80129ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80129f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f2:	2200      	movs	r2, #0
 80129f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80129f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f8:	3304      	adds	r3, #4
 80129fa:	4618      	mov	r0, r3
 80129fc:	f7fe ff02 	bl	8011804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a02:	3318      	adds	r3, #24
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7fe fefd 	bl	8011804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a22:	2200      	movs	r2, #0
 8012a24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	2200      	movs	r2, #0
 8012a2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012a2e:	683a      	ldr	r2, [r7, #0]
 8012a30:	68f9      	ldr	r1, [r7, #12]
 8012a32:	69b8      	ldr	r0, [r7, #24]
 8012a34:	f001 fa2a 	bl	8013e8c <pxPortInitialiseStack>
 8012a38:	4602      	mov	r2, r0
 8012a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d002      	beq.n	8012a4a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a4a:	bf00      	nop
 8012a4c:	3720      	adds	r7, #32
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
	...

08012a54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012a5c:	f001 fb3e 	bl	80140dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012a60:	4b2d      	ldr	r3, [pc, #180]	; (8012b18 <prvAddNewTaskToReadyList+0xc4>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	3301      	adds	r3, #1
 8012a66:	4a2c      	ldr	r2, [pc, #176]	; (8012b18 <prvAddNewTaskToReadyList+0xc4>)
 8012a68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012a6a:	4b2c      	ldr	r3, [pc, #176]	; (8012b1c <prvAddNewTaskToReadyList+0xc8>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d109      	bne.n	8012a86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012a72:	4a2a      	ldr	r2, [pc, #168]	; (8012b1c <prvAddNewTaskToReadyList+0xc8>)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012a78:	4b27      	ldr	r3, [pc, #156]	; (8012b18 <prvAddNewTaskToReadyList+0xc4>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	2b01      	cmp	r3, #1
 8012a7e:	d110      	bne.n	8012aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012a80:	f000 fc1a 	bl	80132b8 <prvInitialiseTaskLists>
 8012a84:	e00d      	b.n	8012aa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012a86:	4b26      	ldr	r3, [pc, #152]	; (8012b20 <prvAddNewTaskToReadyList+0xcc>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d109      	bne.n	8012aa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012a8e:	4b23      	ldr	r3, [pc, #140]	; (8012b1c <prvAddNewTaskToReadyList+0xc8>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d802      	bhi.n	8012aa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012a9c:	4a1f      	ldr	r2, [pc, #124]	; (8012b1c <prvAddNewTaskToReadyList+0xc8>)
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012aa2:	4b20      	ldr	r3, [pc, #128]	; (8012b24 <prvAddNewTaskToReadyList+0xd0>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	4a1e      	ldr	r2, [pc, #120]	; (8012b24 <prvAddNewTaskToReadyList+0xd0>)
 8012aaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012aac:	4b1d      	ldr	r3, [pc, #116]	; (8012b24 <prvAddNewTaskToReadyList+0xd0>)
 8012aae:	681a      	ldr	r2, [r3, #0]
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ab8:	4b1b      	ldr	r3, [pc, #108]	; (8012b28 <prvAddNewTaskToReadyList+0xd4>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d903      	bls.n	8012ac8 <prvAddNewTaskToReadyList+0x74>
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ac4:	4a18      	ldr	r2, [pc, #96]	; (8012b28 <prvAddNewTaskToReadyList+0xd4>)
 8012ac6:	6013      	str	r3, [r2, #0]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012acc:	4613      	mov	r3, r2
 8012ace:	009b      	lsls	r3, r3, #2
 8012ad0:	4413      	add	r3, r2
 8012ad2:	009b      	lsls	r3, r3, #2
 8012ad4:	4a15      	ldr	r2, [pc, #84]	; (8012b2c <prvAddNewTaskToReadyList+0xd8>)
 8012ad6:	441a      	add	r2, r3
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	3304      	adds	r3, #4
 8012adc:	4619      	mov	r1, r3
 8012ade:	4610      	mov	r0, r2
 8012ae0:	f7fe fe9d 	bl	801181e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012ae4:	f001 fb28 	bl	8014138 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012ae8:	4b0d      	ldr	r3, [pc, #52]	; (8012b20 <prvAddNewTaskToReadyList+0xcc>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d00e      	beq.n	8012b0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012af0:	4b0a      	ldr	r3, [pc, #40]	; (8012b1c <prvAddNewTaskToReadyList+0xc8>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d207      	bcs.n	8012b0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012afe:	4b0c      	ldr	r3, [pc, #48]	; (8012b30 <prvAddNewTaskToReadyList+0xdc>)
 8012b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b04:	601a      	str	r2, [r3, #0]
 8012b06:	f3bf 8f4f 	dsb	sy
 8012b0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b0e:	bf00      	nop
 8012b10:	3708      	adds	r7, #8
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}
 8012b16:	bf00      	nop
 8012b18:	24000db0 	.word	0x24000db0
 8012b1c:	240008dc 	.word	0x240008dc
 8012b20:	24000dbc 	.word	0x24000dbc
 8012b24:	24000dcc 	.word	0x24000dcc
 8012b28:	24000db8 	.word	0x24000db8
 8012b2c:	240008e0 	.word	0x240008e0
 8012b30:	e000ed04 	.word	0xe000ed04

08012b34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d016      	beq.n	8012b74 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012b46:	4b13      	ldr	r3, [pc, #76]	; (8012b94 <vTaskDelay+0x60>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d009      	beq.n	8012b62 <vTaskDelay+0x2e>
 8012b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b52:	f383 8811 	msr	BASEPRI, r3
 8012b56:	f3bf 8f6f 	isb	sy
 8012b5a:	f3bf 8f4f 	dsb	sy
 8012b5e:	60bb      	str	r3, [r7, #8]
 8012b60:	e7fe      	b.n	8012b60 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012b62:	f000 f87f 	bl	8012c64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012b66:	2100      	movs	r1, #0
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f000 fdf5 	bl	8013758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012b6e:	f000 f887 	bl	8012c80 <xTaskResumeAll>
 8012b72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d107      	bne.n	8012b8a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8012b7a:	4b07      	ldr	r3, [pc, #28]	; (8012b98 <vTaskDelay+0x64>)
 8012b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b80:	601a      	str	r2, [r3, #0]
 8012b82:	f3bf 8f4f 	dsb	sy
 8012b86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b8a:	bf00      	nop
 8012b8c:	3710      	adds	r7, #16
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	24000dd8 	.word	0x24000dd8
 8012b98:	e000ed04 	.word	0xe000ed04

08012b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b08a      	sub	sp, #40	; 0x28
 8012ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012baa:	463a      	mov	r2, r7
 8012bac:	1d39      	adds	r1, r7, #4
 8012bae:	f107 0308 	add.w	r3, r7, #8
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7fe fdd2 	bl	801175c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012bb8:	6839      	ldr	r1, [r7, #0]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	68ba      	ldr	r2, [r7, #8]
 8012bbe:	9202      	str	r2, [sp, #8]
 8012bc0:	9301      	str	r3, [sp, #4]
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	9300      	str	r3, [sp, #0]
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	460a      	mov	r2, r1
 8012bca:	4920      	ldr	r1, [pc, #128]	; (8012c4c <vTaskStartScheduler+0xb0>)
 8012bcc:	4820      	ldr	r0, [pc, #128]	; (8012c50 <vTaskStartScheduler+0xb4>)
 8012bce:	f7ff fe13 	bl	80127f8 <xTaskCreateStatic>
 8012bd2:	4602      	mov	r2, r0
 8012bd4:	4b1f      	ldr	r3, [pc, #124]	; (8012c54 <vTaskStartScheduler+0xb8>)
 8012bd6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012bd8:	4b1e      	ldr	r3, [pc, #120]	; (8012c54 <vTaskStartScheduler+0xb8>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d002      	beq.n	8012be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012be0:	2301      	movs	r3, #1
 8012be2:	617b      	str	r3, [r7, #20]
 8012be4:	e001      	b.n	8012bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012be6:	2300      	movs	r3, #0
 8012be8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	2b01      	cmp	r3, #1
 8012bee:	d102      	bne.n	8012bf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012bf0:	f000 fe06 	bl	8013800 <xTimerCreateTimerTask>
 8012bf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	d115      	bne.n	8012c28 <vTaskStartScheduler+0x8c>
 8012bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c00:	f383 8811 	msr	BASEPRI, r3
 8012c04:	f3bf 8f6f 	isb	sy
 8012c08:	f3bf 8f4f 	dsb	sy
 8012c0c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012c0e:	4b12      	ldr	r3, [pc, #72]	; (8012c58 <vTaskStartScheduler+0xbc>)
 8012c10:	f04f 32ff 	mov.w	r2, #4294967295
 8012c14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012c16:	4b11      	ldr	r3, [pc, #68]	; (8012c5c <vTaskStartScheduler+0xc0>)
 8012c18:	2201      	movs	r2, #1
 8012c1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012c1c:	4b10      	ldr	r3, [pc, #64]	; (8012c60 <vTaskStartScheduler+0xc4>)
 8012c1e:	2200      	movs	r2, #0
 8012c20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012c22:	f001 f9bd 	bl	8013fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012c26:	e00d      	b.n	8012c44 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c2e:	d109      	bne.n	8012c44 <vTaskStartScheduler+0xa8>
 8012c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c34:	f383 8811 	msr	BASEPRI, r3
 8012c38:	f3bf 8f6f 	isb	sy
 8012c3c:	f3bf 8f4f 	dsb	sy
 8012c40:	60fb      	str	r3, [r7, #12]
 8012c42:	e7fe      	b.n	8012c42 <vTaskStartScheduler+0xa6>
}
 8012c44:	bf00      	nop
 8012c46:	3718      	adds	r7, #24
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	08015a68 	.word	0x08015a68
 8012c50:	08013289 	.word	0x08013289
 8012c54:	24000dd4 	.word	0x24000dd4
 8012c58:	24000dd0 	.word	0x24000dd0
 8012c5c:	24000dbc 	.word	0x24000dbc
 8012c60:	24000db4 	.word	0x24000db4

08012c64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012c64:	b480      	push	{r7}
 8012c66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012c68:	4b04      	ldr	r3, [pc, #16]	; (8012c7c <vTaskSuspendAll+0x18>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	3301      	adds	r3, #1
 8012c6e:	4a03      	ldr	r2, [pc, #12]	; (8012c7c <vTaskSuspendAll+0x18>)
 8012c70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012c72:	bf00      	nop
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr
 8012c7c:	24000dd8 	.word	0x24000dd8

08012c80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012c86:	2300      	movs	r3, #0
 8012c88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012c8e:	4b41      	ldr	r3, [pc, #260]	; (8012d94 <xTaskResumeAll+0x114>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d109      	bne.n	8012caa <xTaskResumeAll+0x2a>
 8012c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c9a:	f383 8811 	msr	BASEPRI, r3
 8012c9e:	f3bf 8f6f 	isb	sy
 8012ca2:	f3bf 8f4f 	dsb	sy
 8012ca6:	603b      	str	r3, [r7, #0]
 8012ca8:	e7fe      	b.n	8012ca8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012caa:	f001 fa17 	bl	80140dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012cae:	4b39      	ldr	r3, [pc, #228]	; (8012d94 <xTaskResumeAll+0x114>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	3b01      	subs	r3, #1
 8012cb4:	4a37      	ldr	r2, [pc, #220]	; (8012d94 <xTaskResumeAll+0x114>)
 8012cb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012cb8:	4b36      	ldr	r3, [pc, #216]	; (8012d94 <xTaskResumeAll+0x114>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d162      	bne.n	8012d86 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012cc0:	4b35      	ldr	r3, [pc, #212]	; (8012d98 <xTaskResumeAll+0x118>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d05e      	beq.n	8012d86 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012cc8:	e02f      	b.n	8012d2a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cca:	4b34      	ldr	r3, [pc, #208]	; (8012d9c <xTaskResumeAll+0x11c>)
 8012ccc:	68db      	ldr	r3, [r3, #12]
 8012cce:	68db      	ldr	r3, [r3, #12]
 8012cd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	3318      	adds	r3, #24
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7fe fdfe 	bl	80118d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	3304      	adds	r3, #4
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7fe fdf9 	bl	80118d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cea:	4b2d      	ldr	r3, [pc, #180]	; (8012da0 <xTaskResumeAll+0x120>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d903      	bls.n	8012cfa <xTaskResumeAll+0x7a>
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cf6:	4a2a      	ldr	r2, [pc, #168]	; (8012da0 <xTaskResumeAll+0x120>)
 8012cf8:	6013      	str	r3, [r2, #0]
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cfe:	4613      	mov	r3, r2
 8012d00:	009b      	lsls	r3, r3, #2
 8012d02:	4413      	add	r3, r2
 8012d04:	009b      	lsls	r3, r3, #2
 8012d06:	4a27      	ldr	r2, [pc, #156]	; (8012da4 <xTaskResumeAll+0x124>)
 8012d08:	441a      	add	r2, r3
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	3304      	adds	r3, #4
 8012d0e:	4619      	mov	r1, r3
 8012d10:	4610      	mov	r0, r2
 8012d12:	f7fe fd84 	bl	801181e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d1a:	4b23      	ldr	r3, [pc, #140]	; (8012da8 <xTaskResumeAll+0x128>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d302      	bcc.n	8012d2a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012d24:	4b21      	ldr	r3, [pc, #132]	; (8012dac <xTaskResumeAll+0x12c>)
 8012d26:	2201      	movs	r2, #1
 8012d28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d2a:	4b1c      	ldr	r3, [pc, #112]	; (8012d9c <xTaskResumeAll+0x11c>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d1cb      	bne.n	8012cca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d001      	beq.n	8012d3c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012d38:	f000 fb58 	bl	80133ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012d3c:	4b1c      	ldr	r3, [pc, #112]	; (8012db0 <xTaskResumeAll+0x130>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d010      	beq.n	8012d6a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012d48:	f000 f858 	bl	8012dfc <xTaskIncrementTick>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d002      	beq.n	8012d58 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012d52:	4b16      	ldr	r3, [pc, #88]	; (8012dac <xTaskResumeAll+0x12c>)
 8012d54:	2201      	movs	r2, #1
 8012d56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	3b01      	subs	r3, #1
 8012d5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d1f1      	bne.n	8012d48 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8012d64:	4b12      	ldr	r3, [pc, #72]	; (8012db0 <xTaskResumeAll+0x130>)
 8012d66:	2200      	movs	r2, #0
 8012d68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012d6a:	4b10      	ldr	r3, [pc, #64]	; (8012dac <xTaskResumeAll+0x12c>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d009      	beq.n	8012d86 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012d72:	2301      	movs	r3, #1
 8012d74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012d76:	4b0f      	ldr	r3, [pc, #60]	; (8012db4 <xTaskResumeAll+0x134>)
 8012d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d7c:	601a      	str	r2, [r3, #0]
 8012d7e:	f3bf 8f4f 	dsb	sy
 8012d82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012d86:	f001 f9d7 	bl	8014138 <vPortExitCritical>

	return xAlreadyYielded;
 8012d8a:	68bb      	ldr	r3, [r7, #8]
}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3710      	adds	r7, #16
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}
 8012d94:	24000dd8 	.word	0x24000dd8
 8012d98:	24000db0 	.word	0x24000db0
 8012d9c:	24000d70 	.word	0x24000d70
 8012da0:	24000db8 	.word	0x24000db8
 8012da4:	240008e0 	.word	0x240008e0
 8012da8:	240008dc 	.word	0x240008dc
 8012dac:	24000dc4 	.word	0x24000dc4
 8012db0:	24000dc0 	.word	0x24000dc0
 8012db4:	e000ed04 	.word	0xe000ed04

08012db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012db8:	b480      	push	{r7}
 8012dba:	b083      	sub	sp, #12
 8012dbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012dbe:	4b05      	ldr	r3, [pc, #20]	; (8012dd4 <xTaskGetTickCount+0x1c>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012dc4:	687b      	ldr	r3, [r7, #4]
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	370c      	adds	r7, #12
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd0:	4770      	bx	lr
 8012dd2:	bf00      	nop
 8012dd4:	24000db4 	.word	0x24000db4

08012dd8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b082      	sub	sp, #8
 8012ddc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012dde:	f001 fa59 	bl	8014294 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012de2:	2300      	movs	r3, #0
 8012de4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012de6:	4b04      	ldr	r3, [pc, #16]	; (8012df8 <xTaskGetTickCountFromISR+0x20>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012dec:	683b      	ldr	r3, [r7, #0]
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3708      	adds	r7, #8
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop
 8012df8:	24000db4 	.word	0x24000db4

08012dfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b086      	sub	sp, #24
 8012e00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012e02:	2300      	movs	r3, #0
 8012e04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e06:	4b4e      	ldr	r3, [pc, #312]	; (8012f40 <xTaskIncrementTick+0x144>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	f040 8088 	bne.w	8012f20 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012e10:	4b4c      	ldr	r3, [pc, #304]	; (8012f44 <xTaskIncrementTick+0x148>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	3301      	adds	r3, #1
 8012e16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012e18:	4a4a      	ldr	r2, [pc, #296]	; (8012f44 <xTaskIncrementTick+0x148>)
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d11f      	bne.n	8012e64 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012e24:	4b48      	ldr	r3, [pc, #288]	; (8012f48 <xTaskIncrementTick+0x14c>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d009      	beq.n	8012e42 <xTaskIncrementTick+0x46>
 8012e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e32:	f383 8811 	msr	BASEPRI, r3
 8012e36:	f3bf 8f6f 	isb	sy
 8012e3a:	f3bf 8f4f 	dsb	sy
 8012e3e:	603b      	str	r3, [r7, #0]
 8012e40:	e7fe      	b.n	8012e40 <xTaskIncrementTick+0x44>
 8012e42:	4b41      	ldr	r3, [pc, #260]	; (8012f48 <xTaskIncrementTick+0x14c>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	60fb      	str	r3, [r7, #12]
 8012e48:	4b40      	ldr	r3, [pc, #256]	; (8012f4c <xTaskIncrementTick+0x150>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	4a3e      	ldr	r2, [pc, #248]	; (8012f48 <xTaskIncrementTick+0x14c>)
 8012e4e:	6013      	str	r3, [r2, #0]
 8012e50:	4a3e      	ldr	r2, [pc, #248]	; (8012f4c <xTaskIncrementTick+0x150>)
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	6013      	str	r3, [r2, #0]
 8012e56:	4b3e      	ldr	r3, [pc, #248]	; (8012f50 <xTaskIncrementTick+0x154>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	4a3c      	ldr	r2, [pc, #240]	; (8012f50 <xTaskIncrementTick+0x154>)
 8012e5e:	6013      	str	r3, [r2, #0]
 8012e60:	f000 fac4 	bl	80133ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012e64:	4b3b      	ldr	r3, [pc, #236]	; (8012f54 <xTaskIncrementTick+0x158>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	693a      	ldr	r2, [r7, #16]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d349      	bcc.n	8012f02 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e6e:	4b36      	ldr	r3, [pc, #216]	; (8012f48 <xTaskIncrementTick+0x14c>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d104      	bne.n	8012e82 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e78:	4b36      	ldr	r3, [pc, #216]	; (8012f54 <xTaskIncrementTick+0x158>)
 8012e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8012e7e:	601a      	str	r2, [r3, #0]
					break;
 8012e80:	e03f      	b.n	8012f02 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e82:	4b31      	ldr	r3, [pc, #196]	; (8012f48 <xTaskIncrementTick+0x14c>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	68db      	ldr	r3, [r3, #12]
 8012e88:	68db      	ldr	r3, [r3, #12]
 8012e8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	685b      	ldr	r3, [r3, #4]
 8012e90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012e92:	693a      	ldr	r2, [r7, #16]
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d203      	bcs.n	8012ea2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012e9a:	4a2e      	ldr	r2, [pc, #184]	; (8012f54 <xTaskIncrementTick+0x158>)
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012ea0:	e02f      	b.n	8012f02 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	3304      	adds	r3, #4
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7fe fd16 	bl	80118d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d004      	beq.n	8012ebe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	3318      	adds	r3, #24
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7fe fd0d 	bl	80118d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ec2:	4b25      	ldr	r3, [pc, #148]	; (8012f58 <xTaskIncrementTick+0x15c>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	429a      	cmp	r2, r3
 8012ec8:	d903      	bls.n	8012ed2 <xTaskIncrementTick+0xd6>
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ece:	4a22      	ldr	r2, [pc, #136]	; (8012f58 <xTaskIncrementTick+0x15c>)
 8012ed0:	6013      	str	r3, [r2, #0]
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ed6:	4613      	mov	r3, r2
 8012ed8:	009b      	lsls	r3, r3, #2
 8012eda:	4413      	add	r3, r2
 8012edc:	009b      	lsls	r3, r3, #2
 8012ede:	4a1f      	ldr	r2, [pc, #124]	; (8012f5c <xTaskIncrementTick+0x160>)
 8012ee0:	441a      	add	r2, r3
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	3304      	adds	r3, #4
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	4610      	mov	r0, r2
 8012eea:	f7fe fc98 	bl	801181e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ef2:	4b1b      	ldr	r3, [pc, #108]	; (8012f60 <xTaskIncrementTick+0x164>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d3b8      	bcc.n	8012e6e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012efc:	2301      	movs	r3, #1
 8012efe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f00:	e7b5      	b.n	8012e6e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012f02:	4b17      	ldr	r3, [pc, #92]	; (8012f60 <xTaskIncrementTick+0x164>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f08:	4914      	ldr	r1, [pc, #80]	; (8012f5c <xTaskIncrementTick+0x160>)
 8012f0a:	4613      	mov	r3, r2
 8012f0c:	009b      	lsls	r3, r3, #2
 8012f0e:	4413      	add	r3, r2
 8012f10:	009b      	lsls	r3, r3, #2
 8012f12:	440b      	add	r3, r1
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	2b01      	cmp	r3, #1
 8012f18:	d907      	bls.n	8012f2a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	617b      	str	r3, [r7, #20]
 8012f1e:	e004      	b.n	8012f2a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012f20:	4b10      	ldr	r3, [pc, #64]	; (8012f64 <xTaskIncrementTick+0x168>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	3301      	adds	r3, #1
 8012f26:	4a0f      	ldr	r2, [pc, #60]	; (8012f64 <xTaskIncrementTick+0x168>)
 8012f28:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012f2a:	4b0f      	ldr	r3, [pc, #60]	; (8012f68 <xTaskIncrementTick+0x16c>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d001      	beq.n	8012f36 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8012f32:	2301      	movs	r3, #1
 8012f34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012f36:	697b      	ldr	r3, [r7, #20]
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3718      	adds	r7, #24
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}
 8012f40:	24000dd8 	.word	0x24000dd8
 8012f44:	24000db4 	.word	0x24000db4
 8012f48:	24000d68 	.word	0x24000d68
 8012f4c:	24000d6c 	.word	0x24000d6c
 8012f50:	24000dc8 	.word	0x24000dc8
 8012f54:	24000dd0 	.word	0x24000dd0
 8012f58:	24000db8 	.word	0x24000db8
 8012f5c:	240008e0 	.word	0x240008e0
 8012f60:	240008dc 	.word	0x240008dc
 8012f64:	24000dc0 	.word	0x24000dc0
 8012f68:	24000dc4 	.word	0x24000dc4

08012f6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b085      	sub	sp, #20
 8012f70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012f72:	4b27      	ldr	r3, [pc, #156]	; (8013010 <vTaskSwitchContext+0xa4>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d003      	beq.n	8012f82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012f7a:	4b26      	ldr	r3, [pc, #152]	; (8013014 <vTaskSwitchContext+0xa8>)
 8012f7c:	2201      	movs	r2, #1
 8012f7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012f80:	e040      	b.n	8013004 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8012f82:	4b24      	ldr	r3, [pc, #144]	; (8013014 <vTaskSwitchContext+0xa8>)
 8012f84:	2200      	movs	r2, #0
 8012f86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f88:	4b23      	ldr	r3, [pc, #140]	; (8013018 <vTaskSwitchContext+0xac>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	60fb      	str	r3, [r7, #12]
 8012f8e:	e00f      	b.n	8012fb0 <vTaskSwitchContext+0x44>
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d109      	bne.n	8012faa <vTaskSwitchContext+0x3e>
 8012f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f9a:	f383 8811 	msr	BASEPRI, r3
 8012f9e:	f3bf 8f6f 	isb	sy
 8012fa2:	f3bf 8f4f 	dsb	sy
 8012fa6:	607b      	str	r3, [r7, #4]
 8012fa8:	e7fe      	b.n	8012fa8 <vTaskSwitchContext+0x3c>
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	3b01      	subs	r3, #1
 8012fae:	60fb      	str	r3, [r7, #12]
 8012fb0:	491a      	ldr	r1, [pc, #104]	; (801301c <vTaskSwitchContext+0xb0>)
 8012fb2:	68fa      	ldr	r2, [r7, #12]
 8012fb4:	4613      	mov	r3, r2
 8012fb6:	009b      	lsls	r3, r3, #2
 8012fb8:	4413      	add	r3, r2
 8012fba:	009b      	lsls	r3, r3, #2
 8012fbc:	440b      	add	r3, r1
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d0e5      	beq.n	8012f90 <vTaskSwitchContext+0x24>
 8012fc4:	68fa      	ldr	r2, [r7, #12]
 8012fc6:	4613      	mov	r3, r2
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	4413      	add	r3, r2
 8012fcc:	009b      	lsls	r3, r3, #2
 8012fce:	4a13      	ldr	r2, [pc, #76]	; (801301c <vTaskSwitchContext+0xb0>)
 8012fd0:	4413      	add	r3, r2
 8012fd2:	60bb      	str	r3, [r7, #8]
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	685b      	ldr	r3, [r3, #4]
 8012fd8:	685a      	ldr	r2, [r3, #4]
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	605a      	str	r2, [r3, #4]
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	685a      	ldr	r2, [r3, #4]
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	3308      	adds	r3, #8
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d104      	bne.n	8012ff4 <vTaskSwitchContext+0x88>
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	685b      	ldr	r3, [r3, #4]
 8012fee:	685a      	ldr	r2, [r3, #4]
 8012ff0:	68bb      	ldr	r3, [r7, #8]
 8012ff2:	605a      	str	r2, [r3, #4]
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	68db      	ldr	r3, [r3, #12]
 8012ffa:	4a09      	ldr	r2, [pc, #36]	; (8013020 <vTaskSwitchContext+0xb4>)
 8012ffc:	6013      	str	r3, [r2, #0]
 8012ffe:	4a06      	ldr	r2, [pc, #24]	; (8013018 <vTaskSwitchContext+0xac>)
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	6013      	str	r3, [r2, #0]
}
 8013004:	bf00      	nop
 8013006:	3714      	adds	r7, #20
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr
 8013010:	24000dd8 	.word	0x24000dd8
 8013014:	24000dc4 	.word	0x24000dc4
 8013018:	24000db8 	.word	0x24000db8
 801301c:	240008e0 	.word	0x240008e0
 8013020:	240008dc 	.word	0x240008dc

08013024 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b084      	sub	sp, #16
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d109      	bne.n	8013048 <vTaskPlaceOnEventList+0x24>
 8013034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013038:	f383 8811 	msr	BASEPRI, r3
 801303c:	f3bf 8f6f 	isb	sy
 8013040:	f3bf 8f4f 	dsb	sy
 8013044:	60fb      	str	r3, [r7, #12]
 8013046:	e7fe      	b.n	8013046 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013048:	4b07      	ldr	r3, [pc, #28]	; (8013068 <vTaskPlaceOnEventList+0x44>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	3318      	adds	r3, #24
 801304e:	4619      	mov	r1, r3
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f7fe fc08 	bl	8011866 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013056:	2101      	movs	r1, #1
 8013058:	6838      	ldr	r0, [r7, #0]
 801305a:	f000 fb7d 	bl	8013758 <prvAddCurrentTaskToDelayedList>
}
 801305e:	bf00      	nop
 8013060:	3710      	adds	r7, #16
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}
 8013066:	bf00      	nop
 8013068:	240008dc 	.word	0x240008dc

0801306c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801306c:	b580      	push	{r7, lr}
 801306e:	b086      	sub	sp, #24
 8013070:	af00      	add	r7, sp, #0
 8013072:	60f8      	str	r0, [r7, #12]
 8013074:	60b9      	str	r1, [r7, #8]
 8013076:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d109      	bne.n	8013092 <vTaskPlaceOnEventListRestricted+0x26>
 801307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013082:	f383 8811 	msr	BASEPRI, r3
 8013086:	f3bf 8f6f 	isb	sy
 801308a:	f3bf 8f4f 	dsb	sy
 801308e:	617b      	str	r3, [r7, #20]
 8013090:	e7fe      	b.n	8013090 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013092:	4b0a      	ldr	r3, [pc, #40]	; (80130bc <vTaskPlaceOnEventListRestricted+0x50>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	3318      	adds	r3, #24
 8013098:	4619      	mov	r1, r3
 801309a:	68f8      	ldr	r0, [r7, #12]
 801309c:	f7fe fbbf 	bl	801181e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d002      	beq.n	80130ac <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80130a6:	f04f 33ff 	mov.w	r3, #4294967295
 80130aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80130ac:	6879      	ldr	r1, [r7, #4]
 80130ae:	68b8      	ldr	r0, [r7, #8]
 80130b0:	f000 fb52 	bl	8013758 <prvAddCurrentTaskToDelayedList>
	}
 80130b4:	bf00      	nop
 80130b6:	3718      	adds	r7, #24
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}
 80130bc:	240008dc 	.word	0x240008dc

080130c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b086      	sub	sp, #24
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	68db      	ldr	r3, [r3, #12]
 80130cc:	68db      	ldr	r3, [r3, #12]
 80130ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d109      	bne.n	80130ea <xTaskRemoveFromEventList+0x2a>
 80130d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130da:	f383 8811 	msr	BASEPRI, r3
 80130de:	f3bf 8f6f 	isb	sy
 80130e2:	f3bf 8f4f 	dsb	sy
 80130e6:	60fb      	str	r3, [r7, #12]
 80130e8:	e7fe      	b.n	80130e8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	3318      	adds	r3, #24
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7fe fbf2 	bl	80118d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80130f4:	4b1d      	ldr	r3, [pc, #116]	; (801316c <xTaskRemoveFromEventList+0xac>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d11d      	bne.n	8013138 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	3304      	adds	r3, #4
 8013100:	4618      	mov	r0, r3
 8013102:	f7fe fbe9 	bl	80118d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801310a:	4b19      	ldr	r3, [pc, #100]	; (8013170 <xTaskRemoveFromEventList+0xb0>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	429a      	cmp	r2, r3
 8013110:	d903      	bls.n	801311a <xTaskRemoveFromEventList+0x5a>
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013116:	4a16      	ldr	r2, [pc, #88]	; (8013170 <xTaskRemoveFromEventList+0xb0>)
 8013118:	6013      	str	r3, [r2, #0]
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801311e:	4613      	mov	r3, r2
 8013120:	009b      	lsls	r3, r3, #2
 8013122:	4413      	add	r3, r2
 8013124:	009b      	lsls	r3, r3, #2
 8013126:	4a13      	ldr	r2, [pc, #76]	; (8013174 <xTaskRemoveFromEventList+0xb4>)
 8013128:	441a      	add	r2, r3
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	3304      	adds	r3, #4
 801312e:	4619      	mov	r1, r3
 8013130:	4610      	mov	r0, r2
 8013132:	f7fe fb74 	bl	801181e <vListInsertEnd>
 8013136:	e005      	b.n	8013144 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	3318      	adds	r3, #24
 801313c:	4619      	mov	r1, r3
 801313e:	480e      	ldr	r0, [pc, #56]	; (8013178 <xTaskRemoveFromEventList+0xb8>)
 8013140:	f7fe fb6d 	bl	801181e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013148:	4b0c      	ldr	r3, [pc, #48]	; (801317c <xTaskRemoveFromEventList+0xbc>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801314e:	429a      	cmp	r2, r3
 8013150:	d905      	bls.n	801315e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013152:	2301      	movs	r3, #1
 8013154:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013156:	4b0a      	ldr	r3, [pc, #40]	; (8013180 <xTaskRemoveFromEventList+0xc0>)
 8013158:	2201      	movs	r2, #1
 801315a:	601a      	str	r2, [r3, #0]
 801315c:	e001      	b.n	8013162 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801315e:	2300      	movs	r3, #0
 8013160:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013162:	697b      	ldr	r3, [r7, #20]
}
 8013164:	4618      	mov	r0, r3
 8013166:	3718      	adds	r7, #24
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	24000dd8 	.word	0x24000dd8
 8013170:	24000db8 	.word	0x24000db8
 8013174:	240008e0 	.word	0x240008e0
 8013178:	24000d70 	.word	0x24000d70
 801317c:	240008dc 	.word	0x240008dc
 8013180:	24000dc4 	.word	0x24000dc4

08013184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013184:	b480      	push	{r7}
 8013186:	b083      	sub	sp, #12
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801318c:	4b06      	ldr	r3, [pc, #24]	; (80131a8 <vTaskInternalSetTimeOutState+0x24>)
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013194:	4b05      	ldr	r3, [pc, #20]	; (80131ac <vTaskInternalSetTimeOutState+0x28>)
 8013196:	681a      	ldr	r2, [r3, #0]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	605a      	str	r2, [r3, #4]
}
 801319c:	bf00      	nop
 801319e:	370c      	adds	r7, #12
 80131a0:	46bd      	mov	sp, r7
 80131a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a6:	4770      	bx	lr
 80131a8:	24000dc8 	.word	0x24000dc8
 80131ac:	24000db4 	.word	0x24000db4

080131b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b088      	sub	sp, #32
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d109      	bne.n	80131d4 <xTaskCheckForTimeOut+0x24>
 80131c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131c4:	f383 8811 	msr	BASEPRI, r3
 80131c8:	f3bf 8f6f 	isb	sy
 80131cc:	f3bf 8f4f 	dsb	sy
 80131d0:	613b      	str	r3, [r7, #16]
 80131d2:	e7fe      	b.n	80131d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d109      	bne.n	80131ee <xTaskCheckForTimeOut+0x3e>
 80131da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131de:	f383 8811 	msr	BASEPRI, r3
 80131e2:	f3bf 8f6f 	isb	sy
 80131e6:	f3bf 8f4f 	dsb	sy
 80131ea:	60fb      	str	r3, [r7, #12]
 80131ec:	e7fe      	b.n	80131ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80131ee:	f000 ff75 	bl	80140dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80131f2:	4b1d      	ldr	r3, [pc, #116]	; (8013268 <xTaskCheckForTimeOut+0xb8>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	685b      	ldr	r3, [r3, #4]
 80131fc:	69ba      	ldr	r2, [r7, #24]
 80131fe:	1ad3      	subs	r3, r2, r3
 8013200:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	f1b3 3fff 	cmp.w	r3, #4294967295
 801320a:	d102      	bne.n	8013212 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801320c:	2300      	movs	r3, #0
 801320e:	61fb      	str	r3, [r7, #28]
 8013210:	e023      	b.n	801325a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681a      	ldr	r2, [r3, #0]
 8013216:	4b15      	ldr	r3, [pc, #84]	; (801326c <xTaskCheckForTimeOut+0xbc>)
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	429a      	cmp	r2, r3
 801321c:	d007      	beq.n	801322e <xTaskCheckForTimeOut+0x7e>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	685b      	ldr	r3, [r3, #4]
 8013222:	69ba      	ldr	r2, [r7, #24]
 8013224:	429a      	cmp	r2, r3
 8013226:	d302      	bcc.n	801322e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013228:	2301      	movs	r3, #1
 801322a:	61fb      	str	r3, [r7, #28]
 801322c:	e015      	b.n	801325a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	697a      	ldr	r2, [r7, #20]
 8013234:	429a      	cmp	r2, r3
 8013236:	d20b      	bcs.n	8013250 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	681a      	ldr	r2, [r3, #0]
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	1ad2      	subs	r2, r2, r3
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f7ff ff9d 	bl	8013184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801324a:	2300      	movs	r3, #0
 801324c:	61fb      	str	r3, [r7, #28]
 801324e:	e004      	b.n	801325a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	2200      	movs	r2, #0
 8013254:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013256:	2301      	movs	r3, #1
 8013258:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801325a:	f000 ff6d 	bl	8014138 <vPortExitCritical>

	return xReturn;
 801325e:	69fb      	ldr	r3, [r7, #28]
}
 8013260:	4618      	mov	r0, r3
 8013262:	3720      	adds	r7, #32
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}
 8013268:	24000db4 	.word	0x24000db4
 801326c:	24000dc8 	.word	0x24000dc8

08013270 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013270:	b480      	push	{r7}
 8013272:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013274:	4b03      	ldr	r3, [pc, #12]	; (8013284 <vTaskMissedYield+0x14>)
 8013276:	2201      	movs	r2, #1
 8013278:	601a      	str	r2, [r3, #0]
}
 801327a:	bf00      	nop
 801327c:	46bd      	mov	sp, r7
 801327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013282:	4770      	bx	lr
 8013284:	24000dc4 	.word	0x24000dc4

08013288 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013290:	f000 f852 	bl	8013338 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013294:	4b06      	ldr	r3, [pc, #24]	; (80132b0 <prvIdleTask+0x28>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	2b01      	cmp	r3, #1
 801329a:	d9f9      	bls.n	8013290 <prvIdleTask+0x8>
			{
				taskYIELD();
 801329c:	4b05      	ldr	r3, [pc, #20]	; (80132b4 <prvIdleTask+0x2c>)
 801329e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132a2:	601a      	str	r2, [r3, #0]
 80132a4:	f3bf 8f4f 	dsb	sy
 80132a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80132ac:	e7f0      	b.n	8013290 <prvIdleTask+0x8>
 80132ae:	bf00      	nop
 80132b0:	240008e0 	.word	0x240008e0
 80132b4:	e000ed04 	.word	0xe000ed04

080132b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b082      	sub	sp, #8
 80132bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80132be:	2300      	movs	r3, #0
 80132c0:	607b      	str	r3, [r7, #4]
 80132c2:	e00c      	b.n	80132de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80132c4:	687a      	ldr	r2, [r7, #4]
 80132c6:	4613      	mov	r3, r2
 80132c8:	009b      	lsls	r3, r3, #2
 80132ca:	4413      	add	r3, r2
 80132cc:	009b      	lsls	r3, r3, #2
 80132ce:	4a12      	ldr	r2, [pc, #72]	; (8013318 <prvInitialiseTaskLists+0x60>)
 80132d0:	4413      	add	r3, r2
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7fe fa76 	bl	80117c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	3301      	adds	r3, #1
 80132dc:	607b      	str	r3, [r7, #4]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2b37      	cmp	r3, #55	; 0x37
 80132e2:	d9ef      	bls.n	80132c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80132e4:	480d      	ldr	r0, [pc, #52]	; (801331c <prvInitialiseTaskLists+0x64>)
 80132e6:	f7fe fa6d 	bl	80117c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80132ea:	480d      	ldr	r0, [pc, #52]	; (8013320 <prvInitialiseTaskLists+0x68>)
 80132ec:	f7fe fa6a 	bl	80117c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80132f0:	480c      	ldr	r0, [pc, #48]	; (8013324 <prvInitialiseTaskLists+0x6c>)
 80132f2:	f7fe fa67 	bl	80117c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80132f6:	480c      	ldr	r0, [pc, #48]	; (8013328 <prvInitialiseTaskLists+0x70>)
 80132f8:	f7fe fa64 	bl	80117c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80132fc:	480b      	ldr	r0, [pc, #44]	; (801332c <prvInitialiseTaskLists+0x74>)
 80132fe:	f7fe fa61 	bl	80117c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013302:	4b0b      	ldr	r3, [pc, #44]	; (8013330 <prvInitialiseTaskLists+0x78>)
 8013304:	4a05      	ldr	r2, [pc, #20]	; (801331c <prvInitialiseTaskLists+0x64>)
 8013306:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013308:	4b0a      	ldr	r3, [pc, #40]	; (8013334 <prvInitialiseTaskLists+0x7c>)
 801330a:	4a05      	ldr	r2, [pc, #20]	; (8013320 <prvInitialiseTaskLists+0x68>)
 801330c:	601a      	str	r2, [r3, #0]
}
 801330e:	bf00      	nop
 8013310:	3708      	adds	r7, #8
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	240008e0 	.word	0x240008e0
 801331c:	24000d40 	.word	0x24000d40
 8013320:	24000d54 	.word	0x24000d54
 8013324:	24000d70 	.word	0x24000d70
 8013328:	24000d84 	.word	0x24000d84
 801332c:	24000d9c 	.word	0x24000d9c
 8013330:	24000d68 	.word	0x24000d68
 8013334:	24000d6c 	.word	0x24000d6c

08013338 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b082      	sub	sp, #8
 801333c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801333e:	e019      	b.n	8013374 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013340:	f000 fecc 	bl	80140dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013344:	4b0f      	ldr	r3, [pc, #60]	; (8013384 <prvCheckTasksWaitingTermination+0x4c>)
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	3304      	adds	r3, #4
 8013350:	4618      	mov	r0, r3
 8013352:	f7fe fac1 	bl	80118d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013356:	4b0c      	ldr	r3, [pc, #48]	; (8013388 <prvCheckTasksWaitingTermination+0x50>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	3b01      	subs	r3, #1
 801335c:	4a0a      	ldr	r2, [pc, #40]	; (8013388 <prvCheckTasksWaitingTermination+0x50>)
 801335e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013360:	4b0a      	ldr	r3, [pc, #40]	; (801338c <prvCheckTasksWaitingTermination+0x54>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	3b01      	subs	r3, #1
 8013366:	4a09      	ldr	r2, [pc, #36]	; (801338c <prvCheckTasksWaitingTermination+0x54>)
 8013368:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801336a:	f000 fee5 	bl	8014138 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f000 f80e 	bl	8013390 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013374:	4b05      	ldr	r3, [pc, #20]	; (801338c <prvCheckTasksWaitingTermination+0x54>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d1e1      	bne.n	8013340 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801337c:	bf00      	nop
 801337e:	3708      	adds	r7, #8
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}
 8013384:	24000d84 	.word	0x24000d84
 8013388:	24000db0 	.word	0x24000db0
 801338c:	24000d98 	.word	0x24000d98

08013390 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013390:	b580      	push	{r7, lr}
 8013392:	b084      	sub	sp, #16
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d108      	bne.n	80133b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133a6:	4618      	mov	r0, r3
 80133a8:	f001 f874 	bl	8014494 <vPortFree>
				vPortFree( pxTCB );
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f001 f871 	bl	8014494 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80133b2:	e017      	b.n	80133e4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d103      	bne.n	80133c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f001 f868 	bl	8014494 <vPortFree>
	}
 80133c4:	e00e      	b.n	80133e4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80133cc:	2b02      	cmp	r3, #2
 80133ce:	d009      	beq.n	80133e4 <prvDeleteTCB+0x54>
 80133d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d4:	f383 8811 	msr	BASEPRI, r3
 80133d8:	f3bf 8f6f 	isb	sy
 80133dc:	f3bf 8f4f 	dsb	sy
 80133e0:	60fb      	str	r3, [r7, #12]
 80133e2:	e7fe      	b.n	80133e2 <prvDeleteTCB+0x52>
	}
 80133e4:	bf00      	nop
 80133e6:	3710      	adds	r7, #16
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80133f2:	4b0c      	ldr	r3, [pc, #48]	; (8013424 <prvResetNextTaskUnblockTime+0x38>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d104      	bne.n	8013406 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80133fc:	4b0a      	ldr	r3, [pc, #40]	; (8013428 <prvResetNextTaskUnblockTime+0x3c>)
 80133fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013402:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013404:	e008      	b.n	8013418 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013406:	4b07      	ldr	r3, [pc, #28]	; (8013424 <prvResetNextTaskUnblockTime+0x38>)
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	4a04      	ldr	r2, [pc, #16]	; (8013428 <prvResetNextTaskUnblockTime+0x3c>)
 8013416:	6013      	str	r3, [r2, #0]
}
 8013418:	bf00      	nop
 801341a:	370c      	adds	r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr
 8013424:	24000d68 	.word	0x24000d68
 8013428:	24000dd0 	.word	0x24000dd0

0801342c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801342c:	b480      	push	{r7}
 801342e:	b083      	sub	sp, #12
 8013430:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8013432:	4b05      	ldr	r3, [pc, #20]	; (8013448 <xTaskGetCurrentTaskHandle+0x1c>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	607b      	str	r3, [r7, #4]

		return xReturn;
 8013438:	687b      	ldr	r3, [r7, #4]
	}
 801343a:	4618      	mov	r0, r3
 801343c:	370c      	adds	r7, #12
 801343e:	46bd      	mov	sp, r7
 8013440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013444:	4770      	bx	lr
 8013446:	bf00      	nop
 8013448:	240008dc 	.word	0x240008dc

0801344c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801344c:	b480      	push	{r7}
 801344e:	b083      	sub	sp, #12
 8013450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013452:	4b0b      	ldr	r3, [pc, #44]	; (8013480 <xTaskGetSchedulerState+0x34>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d102      	bne.n	8013460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801345a:	2301      	movs	r3, #1
 801345c:	607b      	str	r3, [r7, #4]
 801345e:	e008      	b.n	8013472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013460:	4b08      	ldr	r3, [pc, #32]	; (8013484 <xTaskGetSchedulerState+0x38>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d102      	bne.n	801346e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013468:	2302      	movs	r3, #2
 801346a:	607b      	str	r3, [r7, #4]
 801346c:	e001      	b.n	8013472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801346e:	2300      	movs	r3, #0
 8013470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013472:	687b      	ldr	r3, [r7, #4]
	}
 8013474:	4618      	mov	r0, r3
 8013476:	370c      	adds	r7, #12
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr
 8013480:	24000dbc 	.word	0x24000dbc
 8013484:	24000dd8 	.word	0x24000dd8

08013488 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013488:	b580      	push	{r7, lr}
 801348a:	b084      	sub	sp, #16
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013494:	2300      	movs	r3, #0
 8013496:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d051      	beq.n	8013542 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134a2:	4b2a      	ldr	r3, [pc, #168]	; (801354c <xTaskPriorityInherit+0xc4>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d241      	bcs.n	8013530 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	699b      	ldr	r3, [r3, #24]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	db06      	blt.n	80134c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134b4:	4b25      	ldr	r3, [pc, #148]	; (801354c <xTaskPriorityInherit+0xc4>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80134be:	68bb      	ldr	r3, [r7, #8]
 80134c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	6959      	ldr	r1, [r3, #20]
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134ca:	4613      	mov	r3, r2
 80134cc:	009b      	lsls	r3, r3, #2
 80134ce:	4413      	add	r3, r2
 80134d0:	009b      	lsls	r3, r3, #2
 80134d2:	4a1f      	ldr	r2, [pc, #124]	; (8013550 <xTaskPriorityInherit+0xc8>)
 80134d4:	4413      	add	r3, r2
 80134d6:	4299      	cmp	r1, r3
 80134d8:	d122      	bne.n	8013520 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	3304      	adds	r3, #4
 80134de:	4618      	mov	r0, r3
 80134e0:	f7fe f9fa 	bl	80118d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80134e4:	4b19      	ldr	r3, [pc, #100]	; (801354c <xTaskPriorityInherit+0xc4>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134f2:	4b18      	ldr	r3, [pc, #96]	; (8013554 <xTaskPriorityInherit+0xcc>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d903      	bls.n	8013502 <xTaskPriorityInherit+0x7a>
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134fe:	4a15      	ldr	r2, [pc, #84]	; (8013554 <xTaskPriorityInherit+0xcc>)
 8013500:	6013      	str	r3, [r2, #0]
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013506:	4613      	mov	r3, r2
 8013508:	009b      	lsls	r3, r3, #2
 801350a:	4413      	add	r3, r2
 801350c:	009b      	lsls	r3, r3, #2
 801350e:	4a10      	ldr	r2, [pc, #64]	; (8013550 <xTaskPriorityInherit+0xc8>)
 8013510:	441a      	add	r2, r3
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	3304      	adds	r3, #4
 8013516:	4619      	mov	r1, r3
 8013518:	4610      	mov	r0, r2
 801351a:	f7fe f980 	bl	801181e <vListInsertEnd>
 801351e:	e004      	b.n	801352a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013520:	4b0a      	ldr	r3, [pc, #40]	; (801354c <xTaskPriorityInherit+0xc4>)
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801352a:	2301      	movs	r3, #1
 801352c:	60fb      	str	r3, [r7, #12]
 801352e:	e008      	b.n	8013542 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013534:	4b05      	ldr	r3, [pc, #20]	; (801354c <xTaskPriorityInherit+0xc4>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801353a:	429a      	cmp	r2, r3
 801353c:	d201      	bcs.n	8013542 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801353e:	2301      	movs	r3, #1
 8013540:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013542:	68fb      	ldr	r3, [r7, #12]
	}
 8013544:	4618      	mov	r0, r3
 8013546:	3710      	adds	r7, #16
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}
 801354c:	240008dc 	.word	0x240008dc
 8013550:	240008e0 	.word	0x240008e0
 8013554:	24000db8 	.word	0x24000db8

08013558 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013558:	b580      	push	{r7, lr}
 801355a:	b086      	sub	sp, #24
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013564:	2300      	movs	r3, #0
 8013566:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d054      	beq.n	8013618 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801356e:	4b2d      	ldr	r3, [pc, #180]	; (8013624 <xTaskPriorityDisinherit+0xcc>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	693a      	ldr	r2, [r7, #16]
 8013574:	429a      	cmp	r2, r3
 8013576:	d009      	beq.n	801358c <xTaskPriorityDisinherit+0x34>
 8013578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801357c:	f383 8811 	msr	BASEPRI, r3
 8013580:	f3bf 8f6f 	isb	sy
 8013584:	f3bf 8f4f 	dsb	sy
 8013588:	60fb      	str	r3, [r7, #12]
 801358a:	e7fe      	b.n	801358a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013590:	2b00      	cmp	r3, #0
 8013592:	d109      	bne.n	80135a8 <xTaskPriorityDisinherit+0x50>
 8013594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013598:	f383 8811 	msr	BASEPRI, r3
 801359c:	f3bf 8f6f 	isb	sy
 80135a0:	f3bf 8f4f 	dsb	sy
 80135a4:	60bb      	str	r3, [r7, #8]
 80135a6:	e7fe      	b.n	80135a6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135ac:	1e5a      	subs	r2, r3, #1
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80135ba:	429a      	cmp	r2, r3
 80135bc:	d02c      	beq.n	8013618 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80135be:	693b      	ldr	r3, [r7, #16]
 80135c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d128      	bne.n	8013618 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	3304      	adds	r3, #4
 80135ca:	4618      	mov	r0, r3
 80135cc:	f7fe f984 	bl	80118d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135d8:	693b      	ldr	r3, [r7, #16]
 80135da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135e8:	4b0f      	ldr	r3, [pc, #60]	; (8013628 <xTaskPriorityDisinherit+0xd0>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d903      	bls.n	80135f8 <xTaskPriorityDisinherit+0xa0>
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f4:	4a0c      	ldr	r2, [pc, #48]	; (8013628 <xTaskPriorityDisinherit+0xd0>)
 80135f6:	6013      	str	r3, [r2, #0]
 80135f8:	693b      	ldr	r3, [r7, #16]
 80135fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135fc:	4613      	mov	r3, r2
 80135fe:	009b      	lsls	r3, r3, #2
 8013600:	4413      	add	r3, r2
 8013602:	009b      	lsls	r3, r3, #2
 8013604:	4a09      	ldr	r2, [pc, #36]	; (801362c <xTaskPriorityDisinherit+0xd4>)
 8013606:	441a      	add	r2, r3
 8013608:	693b      	ldr	r3, [r7, #16]
 801360a:	3304      	adds	r3, #4
 801360c:	4619      	mov	r1, r3
 801360e:	4610      	mov	r0, r2
 8013610:	f7fe f905 	bl	801181e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013614:	2301      	movs	r3, #1
 8013616:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013618:	697b      	ldr	r3, [r7, #20]
	}
 801361a:	4618      	mov	r0, r3
 801361c:	3718      	adds	r7, #24
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
 8013622:	bf00      	nop
 8013624:	240008dc 	.word	0x240008dc
 8013628:	24000db8 	.word	0x24000db8
 801362c:	240008e0 	.word	0x240008e0

08013630 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013630:	b580      	push	{r7, lr}
 8013632:	b088      	sub	sp, #32
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801363e:	2301      	movs	r3, #1
 8013640:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d068      	beq.n	801371a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013648:	69bb      	ldr	r3, [r7, #24]
 801364a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801364c:	2b00      	cmp	r3, #0
 801364e:	d109      	bne.n	8013664 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8013650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013654:	f383 8811 	msr	BASEPRI, r3
 8013658:	f3bf 8f6f 	isb	sy
 801365c:	f3bf 8f4f 	dsb	sy
 8013660:	60fb      	str	r3, [r7, #12]
 8013662:	e7fe      	b.n	8013662 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013664:	69bb      	ldr	r3, [r7, #24]
 8013666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013668:	683a      	ldr	r2, [r7, #0]
 801366a:	429a      	cmp	r2, r3
 801366c:	d902      	bls.n	8013674 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	61fb      	str	r3, [r7, #28]
 8013672:	e002      	b.n	801367a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013674:	69bb      	ldr	r3, [r7, #24]
 8013676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013678:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801367e:	69fa      	ldr	r2, [r7, #28]
 8013680:	429a      	cmp	r2, r3
 8013682:	d04a      	beq.n	801371a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013688:	697a      	ldr	r2, [r7, #20]
 801368a:	429a      	cmp	r2, r3
 801368c:	d145      	bne.n	801371a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801368e:	4b25      	ldr	r3, [pc, #148]	; (8013724 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	69ba      	ldr	r2, [r7, #24]
 8013694:	429a      	cmp	r2, r3
 8013696:	d109      	bne.n	80136ac <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8013698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801369c:	f383 8811 	msr	BASEPRI, r3
 80136a0:	f3bf 8f6f 	isb	sy
 80136a4:	f3bf 8f4f 	dsb	sy
 80136a8:	60bb      	str	r3, [r7, #8]
 80136aa:	e7fe      	b.n	80136aa <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80136ac:	69bb      	ldr	r3, [r7, #24]
 80136ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80136b2:	69bb      	ldr	r3, [r7, #24]
 80136b4:	69fa      	ldr	r2, [r7, #28]
 80136b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80136b8:	69bb      	ldr	r3, [r7, #24]
 80136ba:	699b      	ldr	r3, [r3, #24]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	db04      	blt.n	80136ca <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80136c6:	69bb      	ldr	r3, [r7, #24]
 80136c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80136ca:	69bb      	ldr	r3, [r7, #24]
 80136cc:	6959      	ldr	r1, [r3, #20]
 80136ce:	693a      	ldr	r2, [r7, #16]
 80136d0:	4613      	mov	r3, r2
 80136d2:	009b      	lsls	r3, r3, #2
 80136d4:	4413      	add	r3, r2
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	4a13      	ldr	r2, [pc, #76]	; (8013728 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80136da:	4413      	add	r3, r2
 80136dc:	4299      	cmp	r1, r3
 80136de:	d11c      	bne.n	801371a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	3304      	adds	r3, #4
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7fe f8f7 	bl	80118d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80136ea:	69bb      	ldr	r3, [r7, #24]
 80136ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136ee:	4b0f      	ldr	r3, [pc, #60]	; (801372c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d903      	bls.n	80136fe <vTaskPriorityDisinheritAfterTimeout+0xce>
 80136f6:	69bb      	ldr	r3, [r7, #24]
 80136f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136fa:	4a0c      	ldr	r2, [pc, #48]	; (801372c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80136fc:	6013      	str	r3, [r2, #0]
 80136fe:	69bb      	ldr	r3, [r7, #24]
 8013700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013702:	4613      	mov	r3, r2
 8013704:	009b      	lsls	r3, r3, #2
 8013706:	4413      	add	r3, r2
 8013708:	009b      	lsls	r3, r3, #2
 801370a:	4a07      	ldr	r2, [pc, #28]	; (8013728 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801370c:	441a      	add	r2, r3
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	3304      	adds	r3, #4
 8013712:	4619      	mov	r1, r3
 8013714:	4610      	mov	r0, r2
 8013716:	f7fe f882 	bl	801181e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801371a:	bf00      	nop
 801371c:	3720      	adds	r7, #32
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}
 8013722:	bf00      	nop
 8013724:	240008dc 	.word	0x240008dc
 8013728:	240008e0 	.word	0x240008e0
 801372c:	24000db8 	.word	0x24000db8

08013730 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013730:	b480      	push	{r7}
 8013732:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013734:	4b07      	ldr	r3, [pc, #28]	; (8013754 <pvTaskIncrementMutexHeldCount+0x24>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d004      	beq.n	8013746 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801373c:	4b05      	ldr	r3, [pc, #20]	; (8013754 <pvTaskIncrementMutexHeldCount+0x24>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013742:	3201      	adds	r2, #1
 8013744:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8013746:	4b03      	ldr	r3, [pc, #12]	; (8013754 <pvTaskIncrementMutexHeldCount+0x24>)
 8013748:	681b      	ldr	r3, [r3, #0]
	}
 801374a:	4618      	mov	r0, r3
 801374c:	46bd      	mov	sp, r7
 801374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013752:	4770      	bx	lr
 8013754:	240008dc 	.word	0x240008dc

08013758 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b084      	sub	sp, #16
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013762:	4b21      	ldr	r3, [pc, #132]	; (80137e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013768:	4b20      	ldr	r3, [pc, #128]	; (80137ec <prvAddCurrentTaskToDelayedList+0x94>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	3304      	adds	r3, #4
 801376e:	4618      	mov	r0, r3
 8013770:	f7fe f8b2 	bl	80118d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801377a:	d10a      	bne.n	8013792 <prvAddCurrentTaskToDelayedList+0x3a>
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d007      	beq.n	8013792 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013782:	4b1a      	ldr	r3, [pc, #104]	; (80137ec <prvAddCurrentTaskToDelayedList+0x94>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	3304      	adds	r3, #4
 8013788:	4619      	mov	r1, r3
 801378a:	4819      	ldr	r0, [pc, #100]	; (80137f0 <prvAddCurrentTaskToDelayedList+0x98>)
 801378c:	f7fe f847 	bl	801181e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013790:	e026      	b.n	80137e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013792:	68fa      	ldr	r2, [r7, #12]
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	4413      	add	r3, r2
 8013798:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801379a:	4b14      	ldr	r3, [pc, #80]	; (80137ec <prvAddCurrentTaskToDelayedList+0x94>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	68ba      	ldr	r2, [r7, #8]
 80137a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80137a2:	68ba      	ldr	r2, [r7, #8]
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	429a      	cmp	r2, r3
 80137a8:	d209      	bcs.n	80137be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137aa:	4b12      	ldr	r3, [pc, #72]	; (80137f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80137ac:	681a      	ldr	r2, [r3, #0]
 80137ae:	4b0f      	ldr	r3, [pc, #60]	; (80137ec <prvAddCurrentTaskToDelayedList+0x94>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	3304      	adds	r3, #4
 80137b4:	4619      	mov	r1, r3
 80137b6:	4610      	mov	r0, r2
 80137b8:	f7fe f855 	bl	8011866 <vListInsert>
}
 80137bc:	e010      	b.n	80137e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137be:	4b0e      	ldr	r3, [pc, #56]	; (80137f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80137c0:	681a      	ldr	r2, [r3, #0]
 80137c2:	4b0a      	ldr	r3, [pc, #40]	; (80137ec <prvAddCurrentTaskToDelayedList+0x94>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	3304      	adds	r3, #4
 80137c8:	4619      	mov	r1, r3
 80137ca:	4610      	mov	r0, r2
 80137cc:	f7fe f84b 	bl	8011866 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80137d0:	4b0a      	ldr	r3, [pc, #40]	; (80137fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	68ba      	ldr	r2, [r7, #8]
 80137d6:	429a      	cmp	r2, r3
 80137d8:	d202      	bcs.n	80137e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80137da:	4a08      	ldr	r2, [pc, #32]	; (80137fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	6013      	str	r3, [r2, #0]
}
 80137e0:	bf00      	nop
 80137e2:	3710      	adds	r7, #16
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}
 80137e8:	24000db4 	.word	0x24000db4
 80137ec:	240008dc 	.word	0x240008dc
 80137f0:	24000d9c 	.word	0x24000d9c
 80137f4:	24000d6c 	.word	0x24000d6c
 80137f8:	24000d68 	.word	0x24000d68
 80137fc:	24000dd0 	.word	0x24000dd0

08013800 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b08a      	sub	sp, #40	; 0x28
 8013804:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013806:	2300      	movs	r3, #0
 8013808:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801380a:	f000 faff 	bl	8013e0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801380e:	4b1c      	ldr	r3, [pc, #112]	; (8013880 <xTimerCreateTimerTask+0x80>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d021      	beq.n	801385a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013816:	2300      	movs	r3, #0
 8013818:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801381a:	2300      	movs	r3, #0
 801381c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801381e:	1d3a      	adds	r2, r7, #4
 8013820:	f107 0108 	add.w	r1, r7, #8
 8013824:	f107 030c 	add.w	r3, r7, #12
 8013828:	4618      	mov	r0, r3
 801382a:	f7fd ffb1 	bl	8011790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801382e:	6879      	ldr	r1, [r7, #4]
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	68fa      	ldr	r2, [r7, #12]
 8013834:	9202      	str	r2, [sp, #8]
 8013836:	9301      	str	r3, [sp, #4]
 8013838:	2302      	movs	r3, #2
 801383a:	9300      	str	r3, [sp, #0]
 801383c:	2300      	movs	r3, #0
 801383e:	460a      	mov	r2, r1
 8013840:	4910      	ldr	r1, [pc, #64]	; (8013884 <xTimerCreateTimerTask+0x84>)
 8013842:	4811      	ldr	r0, [pc, #68]	; (8013888 <xTimerCreateTimerTask+0x88>)
 8013844:	f7fe ffd8 	bl	80127f8 <xTaskCreateStatic>
 8013848:	4602      	mov	r2, r0
 801384a:	4b10      	ldr	r3, [pc, #64]	; (801388c <xTimerCreateTimerTask+0x8c>)
 801384c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801384e:	4b0f      	ldr	r3, [pc, #60]	; (801388c <xTimerCreateTimerTask+0x8c>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d001      	beq.n	801385a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013856:	2301      	movs	r3, #1
 8013858:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d109      	bne.n	8013874 <xTimerCreateTimerTask+0x74>
 8013860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013864:	f383 8811 	msr	BASEPRI, r3
 8013868:	f3bf 8f6f 	isb	sy
 801386c:	f3bf 8f4f 	dsb	sy
 8013870:	613b      	str	r3, [r7, #16]
 8013872:	e7fe      	b.n	8013872 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8013874:	697b      	ldr	r3, [r7, #20]
}
 8013876:	4618      	mov	r0, r3
 8013878:	3718      	adds	r7, #24
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}
 801387e:	bf00      	nop
 8013880:	24000e0c 	.word	0x24000e0c
 8013884:	08015a70 	.word	0x08015a70
 8013888:	080139c1 	.word	0x080139c1
 801388c:	24000e10 	.word	0x24000e10

08013890 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b08a      	sub	sp, #40	; 0x28
 8013894:	af00      	add	r7, sp, #0
 8013896:	60f8      	str	r0, [r7, #12]
 8013898:	60b9      	str	r1, [r7, #8]
 801389a:	607a      	str	r2, [r7, #4]
 801389c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801389e:	2300      	movs	r3, #0
 80138a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d109      	bne.n	80138bc <xTimerGenericCommand+0x2c>
 80138a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ac:	f383 8811 	msr	BASEPRI, r3
 80138b0:	f3bf 8f6f 	isb	sy
 80138b4:	f3bf 8f4f 	dsb	sy
 80138b8:	623b      	str	r3, [r7, #32]
 80138ba:	e7fe      	b.n	80138ba <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80138bc:	4b19      	ldr	r3, [pc, #100]	; (8013924 <xTimerGenericCommand+0x94>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d02a      	beq.n	801391a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	2b05      	cmp	r3, #5
 80138d4:	dc18      	bgt.n	8013908 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80138d6:	f7ff fdb9 	bl	801344c <xTaskGetSchedulerState>
 80138da:	4603      	mov	r3, r0
 80138dc:	2b02      	cmp	r3, #2
 80138de:	d109      	bne.n	80138f4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80138e0:	4b10      	ldr	r3, [pc, #64]	; (8013924 <xTimerGenericCommand+0x94>)
 80138e2:	6818      	ldr	r0, [r3, #0]
 80138e4:	f107 0110 	add.w	r1, r7, #16
 80138e8:	2300      	movs	r3, #0
 80138ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138ec:	f7fe fa10 	bl	8011d10 <xQueueGenericSend>
 80138f0:	6278      	str	r0, [r7, #36]	; 0x24
 80138f2:	e012      	b.n	801391a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80138f4:	4b0b      	ldr	r3, [pc, #44]	; (8013924 <xTimerGenericCommand+0x94>)
 80138f6:	6818      	ldr	r0, [r3, #0]
 80138f8:	f107 0110 	add.w	r1, r7, #16
 80138fc:	2300      	movs	r3, #0
 80138fe:	2200      	movs	r2, #0
 8013900:	f7fe fa06 	bl	8011d10 <xQueueGenericSend>
 8013904:	6278      	str	r0, [r7, #36]	; 0x24
 8013906:	e008      	b.n	801391a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013908:	4b06      	ldr	r3, [pc, #24]	; (8013924 <xTimerGenericCommand+0x94>)
 801390a:	6818      	ldr	r0, [r3, #0]
 801390c:	f107 0110 	add.w	r1, r7, #16
 8013910:	2300      	movs	r3, #0
 8013912:	683a      	ldr	r2, [r7, #0]
 8013914:	f7fe faf6 	bl	8011f04 <xQueueGenericSendFromISR>
 8013918:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801391c:	4618      	mov	r0, r3
 801391e:	3728      	adds	r7, #40	; 0x28
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}
 8013924:	24000e0c 	.word	0x24000e0c

08013928 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b088      	sub	sp, #32
 801392c:	af02      	add	r7, sp, #8
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013932:	4b22      	ldr	r3, [pc, #136]	; (80139bc <prvProcessExpiredTimer+0x94>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	68db      	ldr	r3, [r3, #12]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	3304      	adds	r3, #4
 8013940:	4618      	mov	r0, r3
 8013942:	f7fd ffc9 	bl	80118d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801394c:	f003 0304 	and.w	r3, r3, #4
 8013950:	2b00      	cmp	r3, #0
 8013952:	d021      	beq.n	8013998 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	699a      	ldr	r2, [r3, #24]
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	18d1      	adds	r1, r2, r3
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	683a      	ldr	r2, [r7, #0]
 8013960:	6978      	ldr	r0, [r7, #20]
 8013962:	f000 f8d1 	bl	8013b08 <prvInsertTimerInActiveList>
 8013966:	4603      	mov	r3, r0
 8013968:	2b00      	cmp	r3, #0
 801396a:	d01e      	beq.n	80139aa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801396c:	2300      	movs	r3, #0
 801396e:	9300      	str	r3, [sp, #0]
 8013970:	2300      	movs	r3, #0
 8013972:	687a      	ldr	r2, [r7, #4]
 8013974:	2100      	movs	r1, #0
 8013976:	6978      	ldr	r0, [r7, #20]
 8013978:	f7ff ff8a 	bl	8013890 <xTimerGenericCommand>
 801397c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801397e:	693b      	ldr	r3, [r7, #16]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d112      	bne.n	80139aa <prvProcessExpiredTimer+0x82>
 8013984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013988:	f383 8811 	msr	BASEPRI, r3
 801398c:	f3bf 8f6f 	isb	sy
 8013990:	f3bf 8f4f 	dsb	sy
 8013994:	60fb      	str	r3, [r7, #12]
 8013996:	e7fe      	b.n	8013996 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013998:	697b      	ldr	r3, [r7, #20]
 801399a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801399e:	f023 0301 	bic.w	r3, r3, #1
 80139a2:	b2da      	uxtb	r2, r3
 80139a4:	697b      	ldr	r3, [r7, #20]
 80139a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	6a1b      	ldr	r3, [r3, #32]
 80139ae:	6978      	ldr	r0, [r7, #20]
 80139b0:	4798      	blx	r3
}
 80139b2:	bf00      	nop
 80139b4:	3718      	adds	r7, #24
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}
 80139ba:	bf00      	nop
 80139bc:	24000e04 	.word	0x24000e04

080139c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80139c8:	f107 0308 	add.w	r3, r7, #8
 80139cc:	4618      	mov	r0, r3
 80139ce:	f000 f857 	bl	8013a80 <prvGetNextExpireTime>
 80139d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	4619      	mov	r1, r3
 80139d8:	68f8      	ldr	r0, [r7, #12]
 80139da:	f000 f803 	bl	80139e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80139de:	f000 f8d5 	bl	8013b8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80139e2:	e7f1      	b.n	80139c8 <prvTimerTask+0x8>

080139e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b084      	sub	sp, #16
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80139ee:	f7ff f939 	bl	8012c64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80139f2:	f107 0308 	add.w	r3, r7, #8
 80139f6:	4618      	mov	r0, r3
 80139f8:	f000 f866 	bl	8013ac8 <prvSampleTimeNow>
 80139fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d130      	bne.n	8013a66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d10a      	bne.n	8013a20 <prvProcessTimerOrBlockTask+0x3c>
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d806      	bhi.n	8013a20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013a12:	f7ff f935 	bl	8012c80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013a16:	68f9      	ldr	r1, [r7, #12]
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f7ff ff85 	bl	8013928 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013a1e:	e024      	b.n	8013a6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d008      	beq.n	8013a38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013a26:	4b13      	ldr	r3, [pc, #76]	; (8013a74 <prvProcessTimerOrBlockTask+0x90>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d101      	bne.n	8013a34 <prvProcessTimerOrBlockTask+0x50>
 8013a30:	2301      	movs	r3, #1
 8013a32:	e000      	b.n	8013a36 <prvProcessTimerOrBlockTask+0x52>
 8013a34:	2300      	movs	r3, #0
 8013a36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013a38:	4b0f      	ldr	r3, [pc, #60]	; (8013a78 <prvProcessTimerOrBlockTask+0x94>)
 8013a3a:	6818      	ldr	r0, [r3, #0]
 8013a3c:	687a      	ldr	r2, [r7, #4]
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	1ad3      	subs	r3, r2, r3
 8013a42:	683a      	ldr	r2, [r7, #0]
 8013a44:	4619      	mov	r1, r3
 8013a46:	f7fe fea3 	bl	8012790 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013a4a:	f7ff f919 	bl	8012c80 <xTaskResumeAll>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d10a      	bne.n	8013a6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013a54:	4b09      	ldr	r3, [pc, #36]	; (8013a7c <prvProcessTimerOrBlockTask+0x98>)
 8013a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a5a:	601a      	str	r2, [r3, #0]
 8013a5c:	f3bf 8f4f 	dsb	sy
 8013a60:	f3bf 8f6f 	isb	sy
}
 8013a64:	e001      	b.n	8013a6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013a66:	f7ff f90b 	bl	8012c80 <xTaskResumeAll>
}
 8013a6a:	bf00      	nop
 8013a6c:	3710      	adds	r7, #16
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}
 8013a72:	bf00      	nop
 8013a74:	24000e08 	.word	0x24000e08
 8013a78:	24000e0c 	.word	0x24000e0c
 8013a7c:	e000ed04 	.word	0xe000ed04

08013a80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013a80:	b480      	push	{r7}
 8013a82:	b085      	sub	sp, #20
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013a88:	4b0e      	ldr	r3, [pc, #56]	; (8013ac4 <prvGetNextExpireTime+0x44>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d101      	bne.n	8013a96 <prvGetNextExpireTime+0x16>
 8013a92:	2201      	movs	r2, #1
 8013a94:	e000      	b.n	8013a98 <prvGetNextExpireTime+0x18>
 8013a96:	2200      	movs	r2, #0
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d105      	bne.n	8013ab0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013aa4:	4b07      	ldr	r3, [pc, #28]	; (8013ac4 <prvGetNextExpireTime+0x44>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	68db      	ldr	r3, [r3, #12]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	60fb      	str	r3, [r7, #12]
 8013aae:	e001      	b.n	8013ab4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3714      	adds	r7, #20
 8013aba:	46bd      	mov	sp, r7
 8013abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac0:	4770      	bx	lr
 8013ac2:	bf00      	nop
 8013ac4:	24000e04 	.word	0x24000e04

08013ac8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013ad0:	f7ff f972 	bl	8012db8 <xTaskGetTickCount>
 8013ad4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013ad6:	4b0b      	ldr	r3, [pc, #44]	; (8013b04 <prvSampleTimeNow+0x3c>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	68fa      	ldr	r2, [r7, #12]
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d205      	bcs.n	8013aec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013ae0:	f000 f930 	bl	8013d44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2201      	movs	r2, #1
 8013ae8:	601a      	str	r2, [r3, #0]
 8013aea:	e002      	b.n	8013af2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2200      	movs	r2, #0
 8013af0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013af2:	4a04      	ldr	r2, [pc, #16]	; (8013b04 <prvSampleTimeNow+0x3c>)
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013af8:	68fb      	ldr	r3, [r7, #12]
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3710      	adds	r7, #16
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}
 8013b02:	bf00      	nop
 8013b04:	24000e14 	.word	0x24000e14

08013b08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b086      	sub	sp, #24
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	60f8      	str	r0, [r7, #12]
 8013b10:	60b9      	str	r1, [r7, #8]
 8013b12:	607a      	str	r2, [r7, #4]
 8013b14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013b16:	2300      	movs	r3, #0
 8013b18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	68ba      	ldr	r2, [r7, #8]
 8013b1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	68fa      	ldr	r2, [r7, #12]
 8013b24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013b26:	68ba      	ldr	r2, [r7, #8]
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d812      	bhi.n	8013b54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	1ad2      	subs	r2, r2, r3
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	699b      	ldr	r3, [r3, #24]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d302      	bcc.n	8013b42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013b3c:	2301      	movs	r3, #1
 8013b3e:	617b      	str	r3, [r7, #20]
 8013b40:	e01b      	b.n	8013b7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013b42:	4b10      	ldr	r3, [pc, #64]	; (8013b84 <prvInsertTimerInActiveList+0x7c>)
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	3304      	adds	r3, #4
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	4610      	mov	r0, r2
 8013b4e:	f7fd fe8a 	bl	8011866 <vListInsert>
 8013b52:	e012      	b.n	8013b7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013b54:	687a      	ldr	r2, [r7, #4]
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d206      	bcs.n	8013b6a <prvInsertTimerInActiveList+0x62>
 8013b5c:	68ba      	ldr	r2, [r7, #8]
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d302      	bcc.n	8013b6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013b64:	2301      	movs	r3, #1
 8013b66:	617b      	str	r3, [r7, #20]
 8013b68:	e007      	b.n	8013b7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013b6a:	4b07      	ldr	r3, [pc, #28]	; (8013b88 <prvInsertTimerInActiveList+0x80>)
 8013b6c:	681a      	ldr	r2, [r3, #0]
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	3304      	adds	r3, #4
 8013b72:	4619      	mov	r1, r3
 8013b74:	4610      	mov	r0, r2
 8013b76:	f7fd fe76 	bl	8011866 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013b7a:	697b      	ldr	r3, [r7, #20]
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3718      	adds	r7, #24
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	24000e08 	.word	0x24000e08
 8013b88:	24000e04 	.word	0x24000e04

08013b8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b08e      	sub	sp, #56	; 0x38
 8013b90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013b92:	e0c6      	b.n	8013d22 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	da17      	bge.n	8013bca <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013b9a:	1d3b      	adds	r3, r7, #4
 8013b9c:	3304      	adds	r3, #4
 8013b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d109      	bne.n	8013bba <prvProcessReceivedCommands+0x2e>
 8013ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013baa:	f383 8811 	msr	BASEPRI, r3
 8013bae:	f3bf 8f6f 	isb	sy
 8013bb2:	f3bf 8f4f 	dsb	sy
 8013bb6:	61fb      	str	r3, [r7, #28]
 8013bb8:	e7fe      	b.n	8013bb8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bc0:	6850      	ldr	r0, [r2, #4]
 8013bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bc4:	6892      	ldr	r2, [r2, #8]
 8013bc6:	4611      	mov	r1, r2
 8013bc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	f2c0 80a7 	blt.w	8013d20 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd8:	695b      	ldr	r3, [r3, #20]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d004      	beq.n	8013be8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be0:	3304      	adds	r3, #4
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7fd fe78 	bl	80118d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013be8:	463b      	mov	r3, r7
 8013bea:	4618      	mov	r0, r3
 8013bec:	f7ff ff6c 	bl	8013ac8 <prvSampleTimeNow>
 8013bf0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	2b09      	cmp	r3, #9
 8013bf6:	f200 8094 	bhi.w	8013d22 <prvProcessReceivedCommands+0x196>
 8013bfa:	a201      	add	r2, pc, #4	; (adr r2, 8013c00 <prvProcessReceivedCommands+0x74>)
 8013bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c00:	08013c29 	.word	0x08013c29
 8013c04:	08013c29 	.word	0x08013c29
 8013c08:	08013c29 	.word	0x08013c29
 8013c0c:	08013c9b 	.word	0x08013c9b
 8013c10:	08013caf 	.word	0x08013caf
 8013c14:	08013cf7 	.word	0x08013cf7
 8013c18:	08013c29 	.word	0x08013c29
 8013c1c:	08013c29 	.word	0x08013c29
 8013c20:	08013c9b 	.word	0x08013c9b
 8013c24:	08013caf 	.word	0x08013caf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c2e:	f043 0301 	orr.w	r3, r3, #1
 8013c32:	b2da      	uxtb	r2, r3
 8013c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013c3a:	68ba      	ldr	r2, [r7, #8]
 8013c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c3e:	699b      	ldr	r3, [r3, #24]
 8013c40:	18d1      	adds	r1, r2, r3
 8013c42:	68bb      	ldr	r3, [r7, #8]
 8013c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c48:	f7ff ff5e 	bl	8013b08 <prvInsertTimerInActiveList>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d067      	beq.n	8013d22 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c54:	6a1b      	ldr	r3, [r3, #32]
 8013c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c60:	f003 0304 	and.w	r3, r3, #4
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d05c      	beq.n	8013d22 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013c68:	68ba      	ldr	r2, [r7, #8]
 8013c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6c:	699b      	ldr	r3, [r3, #24]
 8013c6e:	441a      	add	r2, r3
 8013c70:	2300      	movs	r3, #0
 8013c72:	9300      	str	r3, [sp, #0]
 8013c74:	2300      	movs	r3, #0
 8013c76:	2100      	movs	r1, #0
 8013c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c7a:	f7ff fe09 	bl	8013890 <xTimerGenericCommand>
 8013c7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013c80:	6a3b      	ldr	r3, [r7, #32]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d14d      	bne.n	8013d22 <prvProcessReceivedCommands+0x196>
 8013c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c8a:	f383 8811 	msr	BASEPRI, r3
 8013c8e:	f3bf 8f6f 	isb	sy
 8013c92:	f3bf 8f4f 	dsb	sy
 8013c96:	61bb      	str	r3, [r7, #24]
 8013c98:	e7fe      	b.n	8013c98 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ca0:	f023 0301 	bic.w	r3, r3, #1
 8013ca4:	b2da      	uxtb	r2, r3
 8013ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013cac:	e039      	b.n	8013d22 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cb4:	f043 0301 	orr.w	r3, r3, #1
 8013cb8:	b2da      	uxtb	r2, r3
 8013cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013cc0:	68ba      	ldr	r2, [r7, #8]
 8013cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc8:	699b      	ldr	r3, [r3, #24]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d109      	bne.n	8013ce2 <prvProcessReceivedCommands+0x156>
 8013cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd2:	f383 8811 	msr	BASEPRI, r3
 8013cd6:	f3bf 8f6f 	isb	sy
 8013cda:	f3bf 8f4f 	dsb	sy
 8013cde:	617b      	str	r3, [r7, #20]
 8013ce0:	e7fe      	b.n	8013ce0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce4:	699a      	ldr	r2, [r3, #24]
 8013ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce8:	18d1      	adds	r1, r2, r3
 8013cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cf0:	f7ff ff0a 	bl	8013b08 <prvInsertTimerInActiveList>
					break;
 8013cf4:	e015      	b.n	8013d22 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cfc:	f003 0302 	and.w	r3, r3, #2
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d103      	bne.n	8013d0c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8013d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d06:	f000 fbc5 	bl	8014494 <vPortFree>
 8013d0a:	e00a      	b.n	8013d22 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d12:	f023 0301 	bic.w	r3, r3, #1
 8013d16:	b2da      	uxtb	r2, r3
 8013d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013d1e:	e000      	b.n	8013d22 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013d20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013d22:	4b07      	ldr	r3, [pc, #28]	; (8013d40 <prvProcessReceivedCommands+0x1b4>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	1d39      	adds	r1, r7, #4
 8013d28:	2200      	movs	r2, #0
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7fe f97e 	bl	801202c <xQueueReceive>
 8013d30:	4603      	mov	r3, r0
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	f47f af2e 	bne.w	8013b94 <prvProcessReceivedCommands+0x8>
	}
}
 8013d38:	bf00      	nop
 8013d3a:	3730      	adds	r7, #48	; 0x30
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}
 8013d40:	24000e0c 	.word	0x24000e0c

08013d44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b088      	sub	sp, #32
 8013d48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013d4a:	e047      	b.n	8013ddc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013d4c:	4b2d      	ldr	r3, [pc, #180]	; (8013e04 <prvSwitchTimerLists+0xc0>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	68db      	ldr	r3, [r3, #12]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d56:	4b2b      	ldr	r3, [pc, #172]	; (8013e04 <prvSwitchTimerLists+0xc0>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	68db      	ldr	r3, [r3, #12]
 8013d5c:	68db      	ldr	r3, [r3, #12]
 8013d5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	3304      	adds	r3, #4
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7fd fdb7 	bl	80118d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	6a1b      	ldr	r3, [r3, #32]
 8013d6e:	68f8      	ldr	r0, [r7, #12]
 8013d70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d78:	f003 0304 	and.w	r3, r3, #4
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d02d      	beq.n	8013ddc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	699b      	ldr	r3, [r3, #24]
 8013d84:	693a      	ldr	r2, [r7, #16]
 8013d86:	4413      	add	r3, r2
 8013d88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013d8a:	68ba      	ldr	r2, [r7, #8]
 8013d8c:	693b      	ldr	r3, [r7, #16]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d90e      	bls.n	8013db0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	68ba      	ldr	r2, [r7, #8]
 8013d96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	68fa      	ldr	r2, [r7, #12]
 8013d9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013d9e:	4b19      	ldr	r3, [pc, #100]	; (8013e04 <prvSwitchTimerLists+0xc0>)
 8013da0:	681a      	ldr	r2, [r3, #0]
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	3304      	adds	r3, #4
 8013da6:	4619      	mov	r1, r3
 8013da8:	4610      	mov	r0, r2
 8013daa:	f7fd fd5c 	bl	8011866 <vListInsert>
 8013dae:	e015      	b.n	8013ddc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013db0:	2300      	movs	r3, #0
 8013db2:	9300      	str	r3, [sp, #0]
 8013db4:	2300      	movs	r3, #0
 8013db6:	693a      	ldr	r2, [r7, #16]
 8013db8:	2100      	movs	r1, #0
 8013dba:	68f8      	ldr	r0, [r7, #12]
 8013dbc:	f7ff fd68 	bl	8013890 <xTimerGenericCommand>
 8013dc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d109      	bne.n	8013ddc <prvSwitchTimerLists+0x98>
 8013dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dcc:	f383 8811 	msr	BASEPRI, r3
 8013dd0:	f3bf 8f6f 	isb	sy
 8013dd4:	f3bf 8f4f 	dsb	sy
 8013dd8:	603b      	str	r3, [r7, #0]
 8013dda:	e7fe      	b.n	8013dda <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013ddc:	4b09      	ldr	r3, [pc, #36]	; (8013e04 <prvSwitchTimerLists+0xc0>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d1b2      	bne.n	8013d4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013de6:	4b07      	ldr	r3, [pc, #28]	; (8013e04 <prvSwitchTimerLists+0xc0>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013dec:	4b06      	ldr	r3, [pc, #24]	; (8013e08 <prvSwitchTimerLists+0xc4>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	4a04      	ldr	r2, [pc, #16]	; (8013e04 <prvSwitchTimerLists+0xc0>)
 8013df2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013df4:	4a04      	ldr	r2, [pc, #16]	; (8013e08 <prvSwitchTimerLists+0xc4>)
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	6013      	str	r3, [r2, #0]
}
 8013dfa:	bf00      	nop
 8013dfc:	3718      	adds	r7, #24
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	24000e04 	.word	0x24000e04
 8013e08:	24000e08 	.word	0x24000e08

08013e0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013e12:	f000 f963 	bl	80140dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013e16:	4b15      	ldr	r3, [pc, #84]	; (8013e6c <prvCheckForValidListAndQueue+0x60>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d120      	bne.n	8013e60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013e1e:	4814      	ldr	r0, [pc, #80]	; (8013e70 <prvCheckForValidListAndQueue+0x64>)
 8013e20:	f7fd fcd0 	bl	80117c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013e24:	4813      	ldr	r0, [pc, #76]	; (8013e74 <prvCheckForValidListAndQueue+0x68>)
 8013e26:	f7fd fccd 	bl	80117c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013e2a:	4b13      	ldr	r3, [pc, #76]	; (8013e78 <prvCheckForValidListAndQueue+0x6c>)
 8013e2c:	4a10      	ldr	r2, [pc, #64]	; (8013e70 <prvCheckForValidListAndQueue+0x64>)
 8013e2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013e30:	4b12      	ldr	r3, [pc, #72]	; (8013e7c <prvCheckForValidListAndQueue+0x70>)
 8013e32:	4a10      	ldr	r2, [pc, #64]	; (8013e74 <prvCheckForValidListAndQueue+0x68>)
 8013e34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013e36:	2300      	movs	r3, #0
 8013e38:	9300      	str	r3, [sp, #0]
 8013e3a:	4b11      	ldr	r3, [pc, #68]	; (8013e80 <prvCheckForValidListAndQueue+0x74>)
 8013e3c:	4a11      	ldr	r2, [pc, #68]	; (8013e84 <prvCheckForValidListAndQueue+0x78>)
 8013e3e:	2110      	movs	r1, #16
 8013e40:	200a      	movs	r0, #10
 8013e42:	f7fd fddb 	bl	80119fc <xQueueGenericCreateStatic>
 8013e46:	4602      	mov	r2, r0
 8013e48:	4b08      	ldr	r3, [pc, #32]	; (8013e6c <prvCheckForValidListAndQueue+0x60>)
 8013e4a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013e4c:	4b07      	ldr	r3, [pc, #28]	; (8013e6c <prvCheckForValidListAndQueue+0x60>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d005      	beq.n	8013e60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013e54:	4b05      	ldr	r3, [pc, #20]	; (8013e6c <prvCheckForValidListAndQueue+0x60>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	490b      	ldr	r1, [pc, #44]	; (8013e88 <prvCheckForValidListAndQueue+0x7c>)
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7fe fc70 	bl	8012740 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013e60:	f000 f96a 	bl	8014138 <vPortExitCritical>
}
 8013e64:	bf00      	nop
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}
 8013e6a:	bf00      	nop
 8013e6c:	24000e0c 	.word	0x24000e0c
 8013e70:	24000ddc 	.word	0x24000ddc
 8013e74:	24000df0 	.word	0x24000df0
 8013e78:	24000e04 	.word	0x24000e04
 8013e7c:	24000e08 	.word	0x24000e08
 8013e80:	24000eb8 	.word	0x24000eb8
 8013e84:	24000e18 	.word	0x24000e18
 8013e88:	08015a78 	.word	0x08015a78

08013e8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	b085      	sub	sp, #20
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	60f8      	str	r0, [r7, #12]
 8013e94:	60b9      	str	r1, [r7, #8]
 8013e96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	3b04      	subs	r3, #4
 8013e9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	3b04      	subs	r3, #4
 8013eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	f023 0201 	bic.w	r2, r3, #1
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	3b04      	subs	r3, #4
 8013eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013ebc:	4a0c      	ldr	r2, [pc, #48]	; (8013ef0 <pxPortInitialiseStack+0x64>)
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	3b14      	subs	r3, #20
 8013ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013ec8:	687a      	ldr	r2, [r7, #4]
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	3b04      	subs	r3, #4
 8013ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	f06f 0202 	mvn.w	r2, #2
 8013eda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	3b20      	subs	r3, #32
 8013ee0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3714      	adds	r7, #20
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr
 8013ef0:	08013ef5 	.word	0x08013ef5

08013ef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013ef4:	b480      	push	{r7}
 8013ef6:	b085      	sub	sp, #20
 8013ef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013efa:	2300      	movs	r3, #0
 8013efc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013efe:	4b11      	ldr	r3, [pc, #68]	; (8013f44 <prvTaskExitError+0x50>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f06:	d009      	beq.n	8013f1c <prvTaskExitError+0x28>
 8013f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f0c:	f383 8811 	msr	BASEPRI, r3
 8013f10:	f3bf 8f6f 	isb	sy
 8013f14:	f3bf 8f4f 	dsb	sy
 8013f18:	60fb      	str	r3, [r7, #12]
 8013f1a:	e7fe      	b.n	8013f1a <prvTaskExitError+0x26>
 8013f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f20:	f383 8811 	msr	BASEPRI, r3
 8013f24:	f3bf 8f6f 	isb	sy
 8013f28:	f3bf 8f4f 	dsb	sy
 8013f2c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013f2e:	bf00      	nop
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d0fc      	beq.n	8013f30 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013f36:	bf00      	nop
 8013f38:	3714      	adds	r7, #20
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f40:	4770      	bx	lr
 8013f42:	bf00      	nop
 8013f44:	24000120 	.word	0x24000120
	...

08013f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013f50:	4b07      	ldr	r3, [pc, #28]	; (8013f70 <pxCurrentTCBConst2>)
 8013f52:	6819      	ldr	r1, [r3, #0]
 8013f54:	6808      	ldr	r0, [r1, #0]
 8013f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f5a:	f380 8809 	msr	PSP, r0
 8013f5e:	f3bf 8f6f 	isb	sy
 8013f62:	f04f 0000 	mov.w	r0, #0
 8013f66:	f380 8811 	msr	BASEPRI, r0
 8013f6a:	4770      	bx	lr
 8013f6c:	f3af 8000 	nop.w

08013f70 <pxCurrentTCBConst2>:
 8013f70:	240008dc 	.word	0x240008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013f74:	bf00      	nop
 8013f76:	bf00      	nop

08013f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013f78:	4808      	ldr	r0, [pc, #32]	; (8013f9c <prvPortStartFirstTask+0x24>)
 8013f7a:	6800      	ldr	r0, [r0, #0]
 8013f7c:	6800      	ldr	r0, [r0, #0]
 8013f7e:	f380 8808 	msr	MSP, r0
 8013f82:	f04f 0000 	mov.w	r0, #0
 8013f86:	f380 8814 	msr	CONTROL, r0
 8013f8a:	b662      	cpsie	i
 8013f8c:	b661      	cpsie	f
 8013f8e:	f3bf 8f4f 	dsb	sy
 8013f92:	f3bf 8f6f 	isb	sy
 8013f96:	df00      	svc	0
 8013f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013f9a:	bf00      	nop
 8013f9c:	e000ed08 	.word	0xe000ed08

08013fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b086      	sub	sp, #24
 8013fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013fa6:	4b44      	ldr	r3, [pc, #272]	; (80140b8 <xPortStartScheduler+0x118>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	4a44      	ldr	r2, [pc, #272]	; (80140bc <xPortStartScheduler+0x11c>)
 8013fac:	4293      	cmp	r3, r2
 8013fae:	d109      	bne.n	8013fc4 <xPortStartScheduler+0x24>
 8013fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb4:	f383 8811 	msr	BASEPRI, r3
 8013fb8:	f3bf 8f6f 	isb	sy
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	613b      	str	r3, [r7, #16]
 8013fc2:	e7fe      	b.n	8013fc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013fc4:	4b3c      	ldr	r3, [pc, #240]	; (80140b8 <xPortStartScheduler+0x118>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	4a3d      	ldr	r2, [pc, #244]	; (80140c0 <xPortStartScheduler+0x120>)
 8013fca:	4293      	cmp	r3, r2
 8013fcc:	d109      	bne.n	8013fe2 <xPortStartScheduler+0x42>
 8013fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fd2:	f383 8811 	msr	BASEPRI, r3
 8013fd6:	f3bf 8f6f 	isb	sy
 8013fda:	f3bf 8f4f 	dsb	sy
 8013fde:	60fb      	str	r3, [r7, #12]
 8013fe0:	e7fe      	b.n	8013fe0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013fe2:	4b38      	ldr	r3, [pc, #224]	; (80140c4 <xPortStartScheduler+0x124>)
 8013fe4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	781b      	ldrb	r3, [r3, #0]
 8013fea:	b2db      	uxtb	r3, r3
 8013fec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	22ff      	movs	r2, #255	; 0xff
 8013ff2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	781b      	ldrb	r3, [r3, #0]
 8013ff8:	b2db      	uxtb	r3, r3
 8013ffa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013ffc:	78fb      	ldrb	r3, [r7, #3]
 8013ffe:	b2db      	uxtb	r3, r3
 8014000:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014004:	b2da      	uxtb	r2, r3
 8014006:	4b30      	ldr	r3, [pc, #192]	; (80140c8 <xPortStartScheduler+0x128>)
 8014008:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801400a:	4b30      	ldr	r3, [pc, #192]	; (80140cc <xPortStartScheduler+0x12c>)
 801400c:	2207      	movs	r2, #7
 801400e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014010:	e009      	b.n	8014026 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014012:	4b2e      	ldr	r3, [pc, #184]	; (80140cc <xPortStartScheduler+0x12c>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	3b01      	subs	r3, #1
 8014018:	4a2c      	ldr	r2, [pc, #176]	; (80140cc <xPortStartScheduler+0x12c>)
 801401a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801401c:	78fb      	ldrb	r3, [r7, #3]
 801401e:	b2db      	uxtb	r3, r3
 8014020:	005b      	lsls	r3, r3, #1
 8014022:	b2db      	uxtb	r3, r3
 8014024:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014026:	78fb      	ldrb	r3, [r7, #3]
 8014028:	b2db      	uxtb	r3, r3
 801402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801402e:	2b80      	cmp	r3, #128	; 0x80
 8014030:	d0ef      	beq.n	8014012 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014032:	4b26      	ldr	r3, [pc, #152]	; (80140cc <xPortStartScheduler+0x12c>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	f1c3 0307 	rsb	r3, r3, #7
 801403a:	2b04      	cmp	r3, #4
 801403c:	d009      	beq.n	8014052 <xPortStartScheduler+0xb2>
 801403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014042:	f383 8811 	msr	BASEPRI, r3
 8014046:	f3bf 8f6f 	isb	sy
 801404a:	f3bf 8f4f 	dsb	sy
 801404e:	60bb      	str	r3, [r7, #8]
 8014050:	e7fe      	b.n	8014050 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014052:	4b1e      	ldr	r3, [pc, #120]	; (80140cc <xPortStartScheduler+0x12c>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	021b      	lsls	r3, r3, #8
 8014058:	4a1c      	ldr	r2, [pc, #112]	; (80140cc <xPortStartScheduler+0x12c>)
 801405a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801405c:	4b1b      	ldr	r3, [pc, #108]	; (80140cc <xPortStartScheduler+0x12c>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014064:	4a19      	ldr	r2, [pc, #100]	; (80140cc <xPortStartScheduler+0x12c>)
 8014066:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	b2da      	uxtb	r2, r3
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014070:	4b17      	ldr	r3, [pc, #92]	; (80140d0 <xPortStartScheduler+0x130>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	4a16      	ldr	r2, [pc, #88]	; (80140d0 <xPortStartScheduler+0x130>)
 8014076:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801407a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801407c:	4b14      	ldr	r3, [pc, #80]	; (80140d0 <xPortStartScheduler+0x130>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	4a13      	ldr	r2, [pc, #76]	; (80140d0 <xPortStartScheduler+0x130>)
 8014082:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014086:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014088:	f000 f8d6 	bl	8014238 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801408c:	4b11      	ldr	r3, [pc, #68]	; (80140d4 <xPortStartScheduler+0x134>)
 801408e:	2200      	movs	r2, #0
 8014090:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014092:	f000 f8f5 	bl	8014280 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014096:	4b10      	ldr	r3, [pc, #64]	; (80140d8 <xPortStartScheduler+0x138>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	4a0f      	ldr	r2, [pc, #60]	; (80140d8 <xPortStartScheduler+0x138>)
 801409c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80140a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80140a2:	f7ff ff69 	bl	8013f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80140a6:	f7fe ff61 	bl	8012f6c <vTaskSwitchContext>
	prvTaskExitError();
 80140aa:	f7ff ff23 	bl	8013ef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80140ae:	2300      	movs	r3, #0
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	3718      	adds	r7, #24
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}
 80140b8:	e000ed00 	.word	0xe000ed00
 80140bc:	410fc271 	.word	0x410fc271
 80140c0:	410fc270 	.word	0x410fc270
 80140c4:	e000e400 	.word	0xe000e400
 80140c8:	24000f08 	.word	0x24000f08
 80140cc:	24000f0c 	.word	0x24000f0c
 80140d0:	e000ed20 	.word	0xe000ed20
 80140d4:	24000120 	.word	0x24000120
 80140d8:	e000ef34 	.word	0xe000ef34

080140dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80140dc:	b480      	push	{r7}
 80140de:	b083      	sub	sp, #12
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140e6:	f383 8811 	msr	BASEPRI, r3
 80140ea:	f3bf 8f6f 	isb	sy
 80140ee:	f3bf 8f4f 	dsb	sy
 80140f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80140f4:	4b0e      	ldr	r3, [pc, #56]	; (8014130 <vPortEnterCritical+0x54>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	3301      	adds	r3, #1
 80140fa:	4a0d      	ldr	r2, [pc, #52]	; (8014130 <vPortEnterCritical+0x54>)
 80140fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80140fe:	4b0c      	ldr	r3, [pc, #48]	; (8014130 <vPortEnterCritical+0x54>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	2b01      	cmp	r3, #1
 8014104:	d10e      	bne.n	8014124 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014106:	4b0b      	ldr	r3, [pc, #44]	; (8014134 <vPortEnterCritical+0x58>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	b2db      	uxtb	r3, r3
 801410c:	2b00      	cmp	r3, #0
 801410e:	d009      	beq.n	8014124 <vPortEnterCritical+0x48>
 8014110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014114:	f383 8811 	msr	BASEPRI, r3
 8014118:	f3bf 8f6f 	isb	sy
 801411c:	f3bf 8f4f 	dsb	sy
 8014120:	603b      	str	r3, [r7, #0]
 8014122:	e7fe      	b.n	8014122 <vPortEnterCritical+0x46>
	}
}
 8014124:	bf00      	nop
 8014126:	370c      	adds	r7, #12
 8014128:	46bd      	mov	sp, r7
 801412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412e:	4770      	bx	lr
 8014130:	24000120 	.word	0x24000120
 8014134:	e000ed04 	.word	0xe000ed04

08014138 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014138:	b480      	push	{r7}
 801413a:	b083      	sub	sp, #12
 801413c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801413e:	4b11      	ldr	r3, [pc, #68]	; (8014184 <vPortExitCritical+0x4c>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d109      	bne.n	801415a <vPortExitCritical+0x22>
 8014146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801414a:	f383 8811 	msr	BASEPRI, r3
 801414e:	f3bf 8f6f 	isb	sy
 8014152:	f3bf 8f4f 	dsb	sy
 8014156:	607b      	str	r3, [r7, #4]
 8014158:	e7fe      	b.n	8014158 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801415a:	4b0a      	ldr	r3, [pc, #40]	; (8014184 <vPortExitCritical+0x4c>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	3b01      	subs	r3, #1
 8014160:	4a08      	ldr	r2, [pc, #32]	; (8014184 <vPortExitCritical+0x4c>)
 8014162:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014164:	4b07      	ldr	r3, [pc, #28]	; (8014184 <vPortExitCritical+0x4c>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d104      	bne.n	8014176 <vPortExitCritical+0x3e>
 801416c:	2300      	movs	r3, #0
 801416e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014176:	bf00      	nop
 8014178:	370c      	adds	r7, #12
 801417a:	46bd      	mov	sp, r7
 801417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop
 8014184:	24000120 	.word	0x24000120
	...

08014190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014190:	f3ef 8009 	mrs	r0, PSP
 8014194:	f3bf 8f6f 	isb	sy
 8014198:	4b15      	ldr	r3, [pc, #84]	; (80141f0 <pxCurrentTCBConst>)
 801419a:	681a      	ldr	r2, [r3, #0]
 801419c:	f01e 0f10 	tst.w	lr, #16
 80141a0:	bf08      	it	eq
 80141a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80141a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141aa:	6010      	str	r0, [r2, #0]
 80141ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80141b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80141b4:	f380 8811 	msr	BASEPRI, r0
 80141b8:	f3bf 8f4f 	dsb	sy
 80141bc:	f3bf 8f6f 	isb	sy
 80141c0:	f7fe fed4 	bl	8012f6c <vTaskSwitchContext>
 80141c4:	f04f 0000 	mov.w	r0, #0
 80141c8:	f380 8811 	msr	BASEPRI, r0
 80141cc:	bc09      	pop	{r0, r3}
 80141ce:	6819      	ldr	r1, [r3, #0]
 80141d0:	6808      	ldr	r0, [r1, #0]
 80141d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d6:	f01e 0f10 	tst.w	lr, #16
 80141da:	bf08      	it	eq
 80141dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80141e0:	f380 8809 	msr	PSP, r0
 80141e4:	f3bf 8f6f 	isb	sy
 80141e8:	4770      	bx	lr
 80141ea:	bf00      	nop
 80141ec:	f3af 8000 	nop.w

080141f0 <pxCurrentTCBConst>:
 80141f0:	240008dc 	.word	0x240008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80141f4:	bf00      	nop
 80141f6:	bf00      	nop

080141f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
	__asm volatile
 80141fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014202:	f383 8811 	msr	BASEPRI, r3
 8014206:	f3bf 8f6f 	isb	sy
 801420a:	f3bf 8f4f 	dsb	sy
 801420e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014210:	f7fe fdf4 	bl	8012dfc <xTaskIncrementTick>
 8014214:	4603      	mov	r3, r0
 8014216:	2b00      	cmp	r3, #0
 8014218:	d003      	beq.n	8014222 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801421a:	4b06      	ldr	r3, [pc, #24]	; (8014234 <SysTick_Handler+0x3c>)
 801421c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014220:	601a      	str	r2, [r3, #0]
 8014222:	2300      	movs	r3, #0
 8014224:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801422c:	bf00      	nop
 801422e:	3708      	adds	r7, #8
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}
 8014234:	e000ed04 	.word	0xe000ed04

08014238 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014238:	b480      	push	{r7}
 801423a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801423c:	4b0b      	ldr	r3, [pc, #44]	; (801426c <vPortSetupTimerInterrupt+0x34>)
 801423e:	2200      	movs	r2, #0
 8014240:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014242:	4b0b      	ldr	r3, [pc, #44]	; (8014270 <vPortSetupTimerInterrupt+0x38>)
 8014244:	2200      	movs	r2, #0
 8014246:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014248:	4b0a      	ldr	r3, [pc, #40]	; (8014274 <vPortSetupTimerInterrupt+0x3c>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	4a0a      	ldr	r2, [pc, #40]	; (8014278 <vPortSetupTimerInterrupt+0x40>)
 801424e:	fba2 2303 	umull	r2, r3, r2, r3
 8014252:	099b      	lsrs	r3, r3, #6
 8014254:	4a09      	ldr	r2, [pc, #36]	; (801427c <vPortSetupTimerInterrupt+0x44>)
 8014256:	3b01      	subs	r3, #1
 8014258:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801425a:	4b04      	ldr	r3, [pc, #16]	; (801426c <vPortSetupTimerInterrupt+0x34>)
 801425c:	2207      	movs	r2, #7
 801425e:	601a      	str	r2, [r3, #0]
}
 8014260:	bf00      	nop
 8014262:	46bd      	mov	sp, r7
 8014264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014268:	4770      	bx	lr
 801426a:	bf00      	nop
 801426c:	e000e010 	.word	0xe000e010
 8014270:	e000e018 	.word	0xe000e018
 8014274:	24000000 	.word	0x24000000
 8014278:	10624dd3 	.word	0x10624dd3
 801427c:	e000e014 	.word	0xe000e014

08014280 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014280:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014290 <vPortEnableVFP+0x10>
 8014284:	6801      	ldr	r1, [r0, #0]
 8014286:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801428a:	6001      	str	r1, [r0, #0]
 801428c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801428e:	bf00      	nop
 8014290:	e000ed88 	.word	0xe000ed88

08014294 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014294:	b480      	push	{r7}
 8014296:	b085      	sub	sp, #20
 8014298:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801429a:	f3ef 8305 	mrs	r3, IPSR
 801429e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	2b0f      	cmp	r3, #15
 80142a4:	d913      	bls.n	80142ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80142a6:	4a16      	ldr	r2, [pc, #88]	; (8014300 <vPortValidateInterruptPriority+0x6c>)
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	4413      	add	r3, r2
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80142b0:	4b14      	ldr	r3, [pc, #80]	; (8014304 <vPortValidateInterruptPriority+0x70>)
 80142b2:	781b      	ldrb	r3, [r3, #0]
 80142b4:	7afa      	ldrb	r2, [r7, #11]
 80142b6:	429a      	cmp	r2, r3
 80142b8:	d209      	bcs.n	80142ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80142ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142be:	f383 8811 	msr	BASEPRI, r3
 80142c2:	f3bf 8f6f 	isb	sy
 80142c6:	f3bf 8f4f 	dsb	sy
 80142ca:	607b      	str	r3, [r7, #4]
 80142cc:	e7fe      	b.n	80142cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80142ce:	4b0e      	ldr	r3, [pc, #56]	; (8014308 <vPortValidateInterruptPriority+0x74>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80142d6:	4b0d      	ldr	r3, [pc, #52]	; (801430c <vPortValidateInterruptPriority+0x78>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	429a      	cmp	r2, r3
 80142dc:	d909      	bls.n	80142f2 <vPortValidateInterruptPriority+0x5e>
 80142de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142e2:	f383 8811 	msr	BASEPRI, r3
 80142e6:	f3bf 8f6f 	isb	sy
 80142ea:	f3bf 8f4f 	dsb	sy
 80142ee:	603b      	str	r3, [r7, #0]
 80142f0:	e7fe      	b.n	80142f0 <vPortValidateInterruptPriority+0x5c>
	}
 80142f2:	bf00      	nop
 80142f4:	3714      	adds	r7, #20
 80142f6:	46bd      	mov	sp, r7
 80142f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fc:	4770      	bx	lr
 80142fe:	bf00      	nop
 8014300:	e000e3f0 	.word	0xe000e3f0
 8014304:	24000f08 	.word	0x24000f08
 8014308:	e000ed0c 	.word	0xe000ed0c
 801430c:	24000f0c 	.word	0x24000f0c

08014310 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b08a      	sub	sp, #40	; 0x28
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014318:	2300      	movs	r3, #0
 801431a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801431c:	f7fe fca2 	bl	8012c64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014320:	4b57      	ldr	r3, [pc, #348]	; (8014480 <pvPortMalloc+0x170>)
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d101      	bne.n	801432c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014328:	f000 f90c 	bl	8014544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801432c:	4b55      	ldr	r3, [pc, #340]	; (8014484 <pvPortMalloc+0x174>)
 801432e:	681a      	ldr	r2, [r3, #0]
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	4013      	ands	r3, r2
 8014334:	2b00      	cmp	r3, #0
 8014336:	f040 808c 	bne.w	8014452 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d01c      	beq.n	801437a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014340:	2208      	movs	r2, #8
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	4413      	add	r3, r2
 8014346:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f003 0307 	and.w	r3, r3, #7
 801434e:	2b00      	cmp	r3, #0
 8014350:	d013      	beq.n	801437a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f023 0307 	bic.w	r3, r3, #7
 8014358:	3308      	adds	r3, #8
 801435a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f003 0307 	and.w	r3, r3, #7
 8014362:	2b00      	cmp	r3, #0
 8014364:	d009      	beq.n	801437a <pvPortMalloc+0x6a>
 8014366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801436a:	f383 8811 	msr	BASEPRI, r3
 801436e:	f3bf 8f6f 	isb	sy
 8014372:	f3bf 8f4f 	dsb	sy
 8014376:	617b      	str	r3, [r7, #20]
 8014378:	e7fe      	b.n	8014378 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d068      	beq.n	8014452 <pvPortMalloc+0x142>
 8014380:	4b41      	ldr	r3, [pc, #260]	; (8014488 <pvPortMalloc+0x178>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	687a      	ldr	r2, [r7, #4]
 8014386:	429a      	cmp	r2, r3
 8014388:	d863      	bhi.n	8014452 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801438a:	4b40      	ldr	r3, [pc, #256]	; (801448c <pvPortMalloc+0x17c>)
 801438c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801438e:	4b3f      	ldr	r3, [pc, #252]	; (801448c <pvPortMalloc+0x17c>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014394:	e004      	b.n	80143a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80143a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a2:	685b      	ldr	r3, [r3, #4]
 80143a4:	687a      	ldr	r2, [r7, #4]
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d903      	bls.n	80143b2 <pvPortMalloc+0xa2>
 80143aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d1f1      	bne.n	8014396 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80143b2:	4b33      	ldr	r3, [pc, #204]	; (8014480 <pvPortMalloc+0x170>)
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143b8:	429a      	cmp	r2, r3
 80143ba:	d04a      	beq.n	8014452 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80143bc:	6a3b      	ldr	r3, [r7, #32]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	2208      	movs	r2, #8
 80143c2:	4413      	add	r3, r2
 80143c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80143c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c8:	681a      	ldr	r2, [r3, #0]
 80143ca:	6a3b      	ldr	r3, [r7, #32]
 80143cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80143ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d0:	685a      	ldr	r2, [r3, #4]
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	1ad2      	subs	r2, r2, r3
 80143d6:	2308      	movs	r3, #8
 80143d8:	005b      	lsls	r3, r3, #1
 80143da:	429a      	cmp	r2, r3
 80143dc:	d91e      	bls.n	801441c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80143de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	4413      	add	r3, r2
 80143e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80143e6:	69bb      	ldr	r3, [r7, #24]
 80143e8:	f003 0307 	and.w	r3, r3, #7
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d009      	beq.n	8014404 <pvPortMalloc+0xf4>
 80143f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f4:	f383 8811 	msr	BASEPRI, r3
 80143f8:	f3bf 8f6f 	isb	sy
 80143fc:	f3bf 8f4f 	dsb	sy
 8014400:	613b      	str	r3, [r7, #16]
 8014402:	e7fe      	b.n	8014402 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014406:	685a      	ldr	r2, [r3, #4]
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	1ad2      	subs	r2, r2, r3
 801440c:	69bb      	ldr	r3, [r7, #24]
 801440e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014416:	69b8      	ldr	r0, [r7, #24]
 8014418:	f000 f8f6 	bl	8014608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801441c:	4b1a      	ldr	r3, [pc, #104]	; (8014488 <pvPortMalloc+0x178>)
 801441e:	681a      	ldr	r2, [r3, #0]
 8014420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	1ad3      	subs	r3, r2, r3
 8014426:	4a18      	ldr	r2, [pc, #96]	; (8014488 <pvPortMalloc+0x178>)
 8014428:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801442a:	4b17      	ldr	r3, [pc, #92]	; (8014488 <pvPortMalloc+0x178>)
 801442c:	681a      	ldr	r2, [r3, #0]
 801442e:	4b18      	ldr	r3, [pc, #96]	; (8014490 <pvPortMalloc+0x180>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	429a      	cmp	r2, r3
 8014434:	d203      	bcs.n	801443e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014436:	4b14      	ldr	r3, [pc, #80]	; (8014488 <pvPortMalloc+0x178>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	4a15      	ldr	r2, [pc, #84]	; (8014490 <pvPortMalloc+0x180>)
 801443c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014440:	685a      	ldr	r2, [r3, #4]
 8014442:	4b10      	ldr	r3, [pc, #64]	; (8014484 <pvPortMalloc+0x174>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	431a      	orrs	r2, r3
 8014448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444e:	2200      	movs	r2, #0
 8014450:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014452:	f7fe fc15 	bl	8012c80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014456:	69fb      	ldr	r3, [r7, #28]
 8014458:	f003 0307 	and.w	r3, r3, #7
 801445c:	2b00      	cmp	r3, #0
 801445e:	d009      	beq.n	8014474 <pvPortMalloc+0x164>
 8014460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014464:	f383 8811 	msr	BASEPRI, r3
 8014468:	f3bf 8f6f 	isb	sy
 801446c:	f3bf 8f4f 	dsb	sy
 8014470:	60fb      	str	r3, [r7, #12]
 8014472:	e7fe      	b.n	8014472 <pvPortMalloc+0x162>
	return pvReturn;
 8014474:	69fb      	ldr	r3, [r7, #28]
}
 8014476:	4618      	mov	r0, r3
 8014478:	3728      	adds	r7, #40	; 0x28
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}
 801447e:	bf00      	nop
 8014480:	24008718 	.word	0x24008718
 8014484:	24008724 	.word	0x24008724
 8014488:	2400871c 	.word	0x2400871c
 801448c:	24008710 	.word	0x24008710
 8014490:	24008720 	.word	0x24008720

08014494 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b086      	sub	sp, #24
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d046      	beq.n	8014534 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80144a6:	2308      	movs	r3, #8
 80144a8:	425b      	negs	r3, r3
 80144aa:	697a      	ldr	r2, [r7, #20]
 80144ac:	4413      	add	r3, r2
 80144ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	685a      	ldr	r2, [r3, #4]
 80144b8:	4b20      	ldr	r3, [pc, #128]	; (801453c <vPortFree+0xa8>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	4013      	ands	r3, r2
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d109      	bne.n	80144d6 <vPortFree+0x42>
 80144c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c6:	f383 8811 	msr	BASEPRI, r3
 80144ca:	f3bf 8f6f 	isb	sy
 80144ce:	f3bf 8f4f 	dsb	sy
 80144d2:	60fb      	str	r3, [r7, #12]
 80144d4:	e7fe      	b.n	80144d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d009      	beq.n	80144f2 <vPortFree+0x5e>
 80144de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e2:	f383 8811 	msr	BASEPRI, r3
 80144e6:	f3bf 8f6f 	isb	sy
 80144ea:	f3bf 8f4f 	dsb	sy
 80144ee:	60bb      	str	r3, [r7, #8]
 80144f0:	e7fe      	b.n	80144f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	685a      	ldr	r2, [r3, #4]
 80144f6:	4b11      	ldr	r3, [pc, #68]	; (801453c <vPortFree+0xa8>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	4013      	ands	r3, r2
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d019      	beq.n	8014534 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d115      	bne.n	8014534 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	685a      	ldr	r2, [r3, #4]
 801450c:	4b0b      	ldr	r3, [pc, #44]	; (801453c <vPortFree+0xa8>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	43db      	mvns	r3, r3
 8014512:	401a      	ands	r2, r3
 8014514:	693b      	ldr	r3, [r7, #16]
 8014516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014518:	f7fe fba4 	bl	8012c64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	685a      	ldr	r2, [r3, #4]
 8014520:	4b07      	ldr	r3, [pc, #28]	; (8014540 <vPortFree+0xac>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	4413      	add	r3, r2
 8014526:	4a06      	ldr	r2, [pc, #24]	; (8014540 <vPortFree+0xac>)
 8014528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801452a:	6938      	ldr	r0, [r7, #16]
 801452c:	f000 f86c 	bl	8014608 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014530:	f7fe fba6 	bl	8012c80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014534:	bf00      	nop
 8014536:	3718      	adds	r7, #24
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}
 801453c:	24008724 	.word	0x24008724
 8014540:	2400871c 	.word	0x2400871c

08014544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014544:	b480      	push	{r7}
 8014546:	b085      	sub	sp, #20
 8014548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801454a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 801454e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014550:	4b27      	ldr	r3, [pc, #156]	; (80145f0 <prvHeapInit+0xac>)
 8014552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	f003 0307 	and.w	r3, r3, #7
 801455a:	2b00      	cmp	r3, #0
 801455c:	d00c      	beq.n	8014578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	3307      	adds	r3, #7
 8014562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	f023 0307 	bic.w	r3, r3, #7
 801456a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801456c:	68ba      	ldr	r2, [r7, #8]
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	1ad3      	subs	r3, r2, r3
 8014572:	4a1f      	ldr	r2, [pc, #124]	; (80145f0 <prvHeapInit+0xac>)
 8014574:	4413      	add	r3, r2
 8014576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801457c:	4a1d      	ldr	r2, [pc, #116]	; (80145f4 <prvHeapInit+0xb0>)
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014582:	4b1c      	ldr	r3, [pc, #112]	; (80145f4 <prvHeapInit+0xb0>)
 8014584:	2200      	movs	r2, #0
 8014586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	68ba      	ldr	r2, [r7, #8]
 801458c:	4413      	add	r3, r2
 801458e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014590:	2208      	movs	r2, #8
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	1a9b      	subs	r3, r3, r2
 8014596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	f023 0307 	bic.w	r3, r3, #7
 801459e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	4a15      	ldr	r2, [pc, #84]	; (80145f8 <prvHeapInit+0xb4>)
 80145a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80145a6:	4b14      	ldr	r3, [pc, #80]	; (80145f8 <prvHeapInit+0xb4>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	2200      	movs	r2, #0
 80145ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80145ae:	4b12      	ldr	r3, [pc, #72]	; (80145f8 <prvHeapInit+0xb4>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	2200      	movs	r2, #0
 80145b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	68fa      	ldr	r2, [r7, #12]
 80145be:	1ad2      	subs	r2, r2, r3
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80145c4:	4b0c      	ldr	r3, [pc, #48]	; (80145f8 <prvHeapInit+0xb4>)
 80145c6:	681a      	ldr	r2, [r3, #0]
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	685b      	ldr	r3, [r3, #4]
 80145d0:	4a0a      	ldr	r2, [pc, #40]	; (80145fc <prvHeapInit+0xb8>)
 80145d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	4a09      	ldr	r2, [pc, #36]	; (8014600 <prvHeapInit+0xbc>)
 80145da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80145dc:	4b09      	ldr	r3, [pc, #36]	; (8014604 <prvHeapInit+0xc0>)
 80145de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80145e2:	601a      	str	r2, [r3, #0]
}
 80145e4:	bf00      	nop
 80145e6:	3714      	adds	r7, #20
 80145e8:	46bd      	mov	sp, r7
 80145ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ee:	4770      	bx	lr
 80145f0:	24000f10 	.word	0x24000f10
 80145f4:	24008710 	.word	0x24008710
 80145f8:	24008718 	.word	0x24008718
 80145fc:	24008720 	.word	0x24008720
 8014600:	2400871c 	.word	0x2400871c
 8014604:	24008724 	.word	0x24008724

08014608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014608:	b480      	push	{r7}
 801460a:	b085      	sub	sp, #20
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014610:	4b28      	ldr	r3, [pc, #160]	; (80146b4 <prvInsertBlockIntoFreeList+0xac>)
 8014612:	60fb      	str	r3, [r7, #12]
 8014614:	e002      	b.n	801461c <prvInsertBlockIntoFreeList+0x14>
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	60fb      	str	r3, [r7, #12]
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	429a      	cmp	r2, r3
 8014624:	d8f7      	bhi.n	8014616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	68ba      	ldr	r2, [r7, #8]
 8014630:	4413      	add	r3, r2
 8014632:	687a      	ldr	r2, [r7, #4]
 8014634:	429a      	cmp	r2, r3
 8014636:	d108      	bne.n	801464a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	685a      	ldr	r2, [r3, #4]
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	685b      	ldr	r3, [r3, #4]
 8014640:	441a      	add	r2, r3
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	685b      	ldr	r3, [r3, #4]
 8014652:	68ba      	ldr	r2, [r7, #8]
 8014654:	441a      	add	r2, r3
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	429a      	cmp	r2, r3
 801465c:	d118      	bne.n	8014690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	681a      	ldr	r2, [r3, #0]
 8014662:	4b15      	ldr	r3, [pc, #84]	; (80146b8 <prvInsertBlockIntoFreeList+0xb0>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	429a      	cmp	r2, r3
 8014668:	d00d      	beq.n	8014686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	685a      	ldr	r2, [r3, #4]
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	685b      	ldr	r3, [r3, #4]
 8014674:	441a      	add	r2, r3
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	681a      	ldr	r2, [r3, #0]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	601a      	str	r2, [r3, #0]
 8014684:	e008      	b.n	8014698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014686:	4b0c      	ldr	r3, [pc, #48]	; (80146b8 <prvInsertBlockIntoFreeList+0xb0>)
 8014688:	681a      	ldr	r2, [r3, #0]
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	601a      	str	r2, [r3, #0]
 801468e:	e003      	b.n	8014698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	681a      	ldr	r2, [r3, #0]
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014698:	68fa      	ldr	r2, [r7, #12]
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	429a      	cmp	r2, r3
 801469e:	d002      	beq.n	80146a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	687a      	ldr	r2, [r7, #4]
 80146a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80146a6:	bf00      	nop
 80146a8:	3714      	adds	r7, #20
 80146aa:	46bd      	mov	sp, r7
 80146ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop
 80146b4:	24008710 	.word	0x24008710
 80146b8:	24008718 	.word	0x24008718

080146bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80146c0:	2200      	movs	r2, #0
 80146c2:	4913      	ldr	r1, [pc, #76]	; (8014710 <MX_USB_DEVICE_Init+0x54>)
 80146c4:	4813      	ldr	r0, [pc, #76]	; (8014714 <MX_USB_DEVICE_Init+0x58>)
 80146c6:	f7fb faa5 	bl	800fc14 <USBD_Init>
 80146ca:	4603      	mov	r3, r0
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d001      	beq.n	80146d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80146d0:	f7ec fdfc 	bl	80012cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80146d4:	4910      	ldr	r1, [pc, #64]	; (8014718 <MX_USB_DEVICE_Init+0x5c>)
 80146d6:	480f      	ldr	r0, [pc, #60]	; (8014714 <MX_USB_DEVICE_Init+0x58>)
 80146d8:	f7fb fad2 	bl	800fc80 <USBD_RegisterClass>
 80146dc:	4603      	mov	r3, r0
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d001      	beq.n	80146e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80146e2:	f7ec fdf3 	bl	80012cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80146e6:	490d      	ldr	r1, [pc, #52]	; (801471c <MX_USB_DEVICE_Init+0x60>)
 80146e8:	480a      	ldr	r0, [pc, #40]	; (8014714 <MX_USB_DEVICE_Init+0x58>)
 80146ea:	f7fb f9f7 	bl	800fadc <USBD_CDC_RegisterInterface>
 80146ee:	4603      	mov	r3, r0
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d001      	beq.n	80146f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80146f4:	f7ec fdea 	bl	80012cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80146f8:	4806      	ldr	r0, [pc, #24]	; (8014714 <MX_USB_DEVICE_Init+0x58>)
 80146fa:	f7fb fae2 	bl	800fcc2 <USBD_Start>
 80146fe:	4603      	mov	r3, r0
 8014700:	2b00      	cmp	r3, #0
 8014702:	d001      	beq.n	8014708 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014704:	f7ec fde2 	bl	80012cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014708:	f7f2 fa0a 	bl	8006b20 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801470c:	bf00      	nop
 801470e:	bd80      	pop	{r7, pc}
 8014710:	24000138 	.word	0x24000138
 8014714:	2401bb44 	.word	0x2401bb44
 8014718:	2400001c 	.word	0x2400001c
 801471c:	24000124 	.word	0x24000124

08014720 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014724:	2200      	movs	r2, #0
 8014726:	4905      	ldr	r1, [pc, #20]	; (801473c <CDC_Init_FS+0x1c>)
 8014728:	4805      	ldr	r0, [pc, #20]	; (8014740 <CDC_Init_FS+0x20>)
 801472a:	f7fb f9ec 	bl	800fb06 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801472e:	4905      	ldr	r1, [pc, #20]	; (8014744 <CDC_Init_FS+0x24>)
 8014730:	4803      	ldr	r0, [pc, #12]	; (8014740 <CDC_Init_FS+0x20>)
 8014732:	f7fb fa01 	bl	800fb38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014736:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014738:	4618      	mov	r0, r3
 801473a:	bd80      	pop	{r7, pc}
 801473c:	2401c614 	.word	0x2401c614
 8014740:	2401bb44 	.word	0x2401bb44
 8014744:	2401be14 	.word	0x2401be14

08014748 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014748:	b480      	push	{r7}
 801474a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801474c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801474e:	4618      	mov	r0, r3
 8014750:	46bd      	mov	sp, r7
 8014752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014756:	4770      	bx	lr

08014758 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014758:	b480      	push	{r7}
 801475a:	b083      	sub	sp, #12
 801475c:	af00      	add	r7, sp, #0
 801475e:	4603      	mov	r3, r0
 8014760:	6039      	str	r1, [r7, #0]
 8014762:	71fb      	strb	r3, [r7, #7]
 8014764:	4613      	mov	r3, r2
 8014766:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014768:	79fb      	ldrb	r3, [r7, #7]
 801476a:	2b23      	cmp	r3, #35	; 0x23
 801476c:	d84a      	bhi.n	8014804 <CDC_Control_FS+0xac>
 801476e:	a201      	add	r2, pc, #4	; (adr r2, 8014774 <CDC_Control_FS+0x1c>)
 8014770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014774:	08014805 	.word	0x08014805
 8014778:	08014805 	.word	0x08014805
 801477c:	08014805 	.word	0x08014805
 8014780:	08014805 	.word	0x08014805
 8014784:	08014805 	.word	0x08014805
 8014788:	08014805 	.word	0x08014805
 801478c:	08014805 	.word	0x08014805
 8014790:	08014805 	.word	0x08014805
 8014794:	08014805 	.word	0x08014805
 8014798:	08014805 	.word	0x08014805
 801479c:	08014805 	.word	0x08014805
 80147a0:	08014805 	.word	0x08014805
 80147a4:	08014805 	.word	0x08014805
 80147a8:	08014805 	.word	0x08014805
 80147ac:	08014805 	.word	0x08014805
 80147b0:	08014805 	.word	0x08014805
 80147b4:	08014805 	.word	0x08014805
 80147b8:	08014805 	.word	0x08014805
 80147bc:	08014805 	.word	0x08014805
 80147c0:	08014805 	.word	0x08014805
 80147c4:	08014805 	.word	0x08014805
 80147c8:	08014805 	.word	0x08014805
 80147cc:	08014805 	.word	0x08014805
 80147d0:	08014805 	.word	0x08014805
 80147d4:	08014805 	.word	0x08014805
 80147d8:	08014805 	.word	0x08014805
 80147dc:	08014805 	.word	0x08014805
 80147e0:	08014805 	.word	0x08014805
 80147e4:	08014805 	.word	0x08014805
 80147e8:	08014805 	.word	0x08014805
 80147ec:	08014805 	.word	0x08014805
 80147f0:	08014805 	.word	0x08014805
 80147f4:	08014805 	.word	0x08014805
 80147f8:	08014805 	.word	0x08014805
 80147fc:	08014805 	.word	0x08014805
 8014800:	08014805 	.word	0x08014805
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014804:	bf00      	nop
  }

  return (USBD_OK);
 8014806:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014808:	4618      	mov	r0, r3
 801480a:	370c      	adds	r7, #12
 801480c:	46bd      	mov	sp, r7
 801480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014812:	4770      	bx	lr

08014814 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b082      	sub	sp, #8
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
 801481c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801481e:	6879      	ldr	r1, [r7, #4]
 8014820:	4805      	ldr	r0, [pc, #20]	; (8014838 <CDC_Receive_FS+0x24>)
 8014822:	f7fb f989 	bl	800fb38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014826:	4804      	ldr	r0, [pc, #16]	; (8014838 <CDC_Receive_FS+0x24>)
 8014828:	f7fb f9ca 	bl	800fbc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801482c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801482e:	4618      	mov	r0, r3
 8014830:	3708      	adds	r7, #8
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
 8014836:	bf00      	nop
 8014838:	2401bb44 	.word	0x2401bb44

0801483c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b084      	sub	sp, #16
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
 8014844:	460b      	mov	r3, r1
 8014846:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014848:	2300      	movs	r3, #0
 801484a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801484c:	4b0d      	ldr	r3, [pc, #52]	; (8014884 <CDC_Transmit_FS+0x48>)
 801484e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014852:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801485a:	2b00      	cmp	r3, #0
 801485c:	d001      	beq.n	8014862 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801485e:	2301      	movs	r3, #1
 8014860:	e00b      	b.n	801487a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014862:	887b      	ldrh	r3, [r7, #2]
 8014864:	461a      	mov	r2, r3
 8014866:	6879      	ldr	r1, [r7, #4]
 8014868:	4806      	ldr	r0, [pc, #24]	; (8014884 <CDC_Transmit_FS+0x48>)
 801486a:	f7fb f94c 	bl	800fb06 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801486e:	4805      	ldr	r0, [pc, #20]	; (8014884 <CDC_Transmit_FS+0x48>)
 8014870:	f7fb f976 	bl	800fb60 <USBD_CDC_TransmitPacket>
 8014874:	4603      	mov	r3, r0
 8014876:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014878:	7bfb      	ldrb	r3, [r7, #15]
}
 801487a:	4618      	mov	r0, r3
 801487c:	3710      	adds	r7, #16
 801487e:	46bd      	mov	sp, r7
 8014880:	bd80      	pop	{r7, pc}
 8014882:	bf00      	nop
 8014884:	2401bb44 	.word	0x2401bb44

08014888 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014888:	b480      	push	{r7}
 801488a:	b087      	sub	sp, #28
 801488c:	af00      	add	r7, sp, #0
 801488e:	60f8      	str	r0, [r7, #12]
 8014890:	60b9      	str	r1, [r7, #8]
 8014892:	4613      	mov	r3, r2
 8014894:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014896:	2300      	movs	r3, #0
 8014898:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801489a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801489e:	4618      	mov	r0, r3
 80148a0:	371c      	adds	r7, #28
 80148a2:	46bd      	mov	sp, r7
 80148a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a8:	4770      	bx	lr
	...

080148ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80148ac:	b480      	push	{r7}
 80148ae:	b083      	sub	sp, #12
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	4603      	mov	r3, r0
 80148b4:	6039      	str	r1, [r7, #0]
 80148b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	2212      	movs	r2, #18
 80148bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80148be:	4b03      	ldr	r3, [pc, #12]	; (80148cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80148c0:	4618      	mov	r0, r3
 80148c2:	370c      	adds	r7, #12
 80148c4:	46bd      	mov	sp, r7
 80148c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ca:	4770      	bx	lr
 80148cc:	24000154 	.word	0x24000154

080148d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80148d0:	b480      	push	{r7}
 80148d2:	b083      	sub	sp, #12
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	4603      	mov	r3, r0
 80148d8:	6039      	str	r1, [r7, #0]
 80148da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80148dc:	683b      	ldr	r3, [r7, #0]
 80148de:	2204      	movs	r2, #4
 80148e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80148e2:	4b03      	ldr	r3, [pc, #12]	; (80148f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80148e4:	4618      	mov	r0, r3
 80148e6:	370c      	adds	r7, #12
 80148e8:	46bd      	mov	sp, r7
 80148ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ee:	4770      	bx	lr
 80148f0:	24000168 	.word	0x24000168

080148f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	4603      	mov	r3, r0
 80148fc:	6039      	str	r1, [r7, #0]
 80148fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014900:	79fb      	ldrb	r3, [r7, #7]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d105      	bne.n	8014912 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014906:	683a      	ldr	r2, [r7, #0]
 8014908:	4907      	ldr	r1, [pc, #28]	; (8014928 <USBD_FS_ProductStrDescriptor+0x34>)
 801490a:	4808      	ldr	r0, [pc, #32]	; (801492c <USBD_FS_ProductStrDescriptor+0x38>)
 801490c:	f7fc f9a7 	bl	8010c5e <USBD_GetString>
 8014910:	e004      	b.n	801491c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014912:	683a      	ldr	r2, [r7, #0]
 8014914:	4904      	ldr	r1, [pc, #16]	; (8014928 <USBD_FS_ProductStrDescriptor+0x34>)
 8014916:	4805      	ldr	r0, [pc, #20]	; (801492c <USBD_FS_ProductStrDescriptor+0x38>)
 8014918:	f7fc f9a1 	bl	8010c5e <USBD_GetString>
  }
  return USBD_StrDesc;
 801491c:	4b02      	ldr	r3, [pc, #8]	; (8014928 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801491e:	4618      	mov	r0, r3
 8014920:	3708      	adds	r7, #8
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
 8014926:	bf00      	nop
 8014928:	2401ce14 	.word	0x2401ce14
 801492c:	08015a80 	.word	0x08015a80

08014930 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b082      	sub	sp, #8
 8014934:	af00      	add	r7, sp, #0
 8014936:	4603      	mov	r3, r0
 8014938:	6039      	str	r1, [r7, #0]
 801493a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801493c:	683a      	ldr	r2, [r7, #0]
 801493e:	4904      	ldr	r1, [pc, #16]	; (8014950 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014940:	4804      	ldr	r0, [pc, #16]	; (8014954 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014942:	f7fc f98c 	bl	8010c5e <USBD_GetString>
  return USBD_StrDesc;
 8014946:	4b02      	ldr	r3, [pc, #8]	; (8014950 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014948:	4618      	mov	r0, r3
 801494a:	3708      	adds	r7, #8
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	2401ce14 	.word	0x2401ce14
 8014954:	08015a94 	.word	0x08015a94

08014958 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b082      	sub	sp, #8
 801495c:	af00      	add	r7, sp, #0
 801495e:	4603      	mov	r3, r0
 8014960:	6039      	str	r1, [r7, #0]
 8014962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	221a      	movs	r2, #26
 8014968:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801496a:	f000 f843 	bl	80149f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801496e:	4b02      	ldr	r3, [pc, #8]	; (8014978 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014970:	4618      	mov	r0, r3
 8014972:	3708      	adds	r7, #8
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	2400016c 	.word	0x2400016c

0801497c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b082      	sub	sp, #8
 8014980:	af00      	add	r7, sp, #0
 8014982:	4603      	mov	r3, r0
 8014984:	6039      	str	r1, [r7, #0]
 8014986:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014988:	79fb      	ldrb	r3, [r7, #7]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d105      	bne.n	801499a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801498e:	683a      	ldr	r2, [r7, #0]
 8014990:	4907      	ldr	r1, [pc, #28]	; (80149b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014992:	4808      	ldr	r0, [pc, #32]	; (80149b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014994:	f7fc f963 	bl	8010c5e <USBD_GetString>
 8014998:	e004      	b.n	80149a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801499a:	683a      	ldr	r2, [r7, #0]
 801499c:	4904      	ldr	r1, [pc, #16]	; (80149b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801499e:	4805      	ldr	r0, [pc, #20]	; (80149b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80149a0:	f7fc f95d 	bl	8010c5e <USBD_GetString>
  }
  return USBD_StrDesc;
 80149a4:	4b02      	ldr	r3, [pc, #8]	; (80149b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80149a6:	4618      	mov	r0, r3
 80149a8:	3708      	adds	r7, #8
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}
 80149ae:	bf00      	nop
 80149b0:	2401ce14 	.word	0x2401ce14
 80149b4:	08015a9c 	.word	0x08015a9c

080149b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
 80149be:	4603      	mov	r3, r0
 80149c0:	6039      	str	r1, [r7, #0]
 80149c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80149c4:	79fb      	ldrb	r3, [r7, #7]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d105      	bne.n	80149d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80149ca:	683a      	ldr	r2, [r7, #0]
 80149cc:	4907      	ldr	r1, [pc, #28]	; (80149ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80149ce:	4808      	ldr	r0, [pc, #32]	; (80149f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80149d0:	f7fc f945 	bl	8010c5e <USBD_GetString>
 80149d4:	e004      	b.n	80149e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80149d6:	683a      	ldr	r2, [r7, #0]
 80149d8:	4904      	ldr	r1, [pc, #16]	; (80149ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80149da:	4805      	ldr	r0, [pc, #20]	; (80149f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80149dc:	f7fc f93f 	bl	8010c5e <USBD_GetString>
  }
  return USBD_StrDesc;
 80149e0:	4b02      	ldr	r3, [pc, #8]	; (80149ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3708      	adds	r7, #8
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	2401ce14 	.word	0x2401ce14
 80149f0:	08015aa8 	.word	0x08015aa8

080149f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b084      	sub	sp, #16
 80149f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80149fa:	4b0f      	ldr	r3, [pc, #60]	; (8014a38 <Get_SerialNum+0x44>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014a00:	4b0e      	ldr	r3, [pc, #56]	; (8014a3c <Get_SerialNum+0x48>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014a06:	4b0e      	ldr	r3, [pc, #56]	; (8014a40 <Get_SerialNum+0x4c>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014a0c:	68fa      	ldr	r2, [r7, #12]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	4413      	add	r3, r2
 8014a12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d009      	beq.n	8014a2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014a1a:	2208      	movs	r2, #8
 8014a1c:	4909      	ldr	r1, [pc, #36]	; (8014a44 <Get_SerialNum+0x50>)
 8014a1e:	68f8      	ldr	r0, [r7, #12]
 8014a20:	f000 f814 	bl	8014a4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014a24:	2204      	movs	r2, #4
 8014a26:	4908      	ldr	r1, [pc, #32]	; (8014a48 <Get_SerialNum+0x54>)
 8014a28:	68b8      	ldr	r0, [r7, #8]
 8014a2a:	f000 f80f 	bl	8014a4c <IntToUnicode>
  }
}
 8014a2e:	bf00      	nop
 8014a30:	3710      	adds	r7, #16
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}
 8014a36:	bf00      	nop
 8014a38:	1ff1e800 	.word	0x1ff1e800
 8014a3c:	1ff1e804 	.word	0x1ff1e804
 8014a40:	1ff1e808 	.word	0x1ff1e808
 8014a44:	2400016e 	.word	0x2400016e
 8014a48:	2400017e 	.word	0x2400017e

08014a4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	b087      	sub	sp, #28
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	4613      	mov	r3, r2
 8014a58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014a5e:	2300      	movs	r3, #0
 8014a60:	75fb      	strb	r3, [r7, #23]
 8014a62:	e027      	b.n	8014ab4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	0f1b      	lsrs	r3, r3, #28
 8014a68:	2b09      	cmp	r3, #9
 8014a6a:	d80b      	bhi.n	8014a84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	0f1b      	lsrs	r3, r3, #28
 8014a70:	b2da      	uxtb	r2, r3
 8014a72:	7dfb      	ldrb	r3, [r7, #23]
 8014a74:	005b      	lsls	r3, r3, #1
 8014a76:	4619      	mov	r1, r3
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	440b      	add	r3, r1
 8014a7c:	3230      	adds	r2, #48	; 0x30
 8014a7e:	b2d2      	uxtb	r2, r2
 8014a80:	701a      	strb	r2, [r3, #0]
 8014a82:	e00a      	b.n	8014a9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	0f1b      	lsrs	r3, r3, #28
 8014a88:	b2da      	uxtb	r2, r3
 8014a8a:	7dfb      	ldrb	r3, [r7, #23]
 8014a8c:	005b      	lsls	r3, r3, #1
 8014a8e:	4619      	mov	r1, r3
 8014a90:	68bb      	ldr	r3, [r7, #8]
 8014a92:	440b      	add	r3, r1
 8014a94:	3237      	adds	r2, #55	; 0x37
 8014a96:	b2d2      	uxtb	r2, r2
 8014a98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	011b      	lsls	r3, r3, #4
 8014a9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014aa0:	7dfb      	ldrb	r3, [r7, #23]
 8014aa2:	005b      	lsls	r3, r3, #1
 8014aa4:	3301      	adds	r3, #1
 8014aa6:	68ba      	ldr	r2, [r7, #8]
 8014aa8:	4413      	add	r3, r2
 8014aaa:	2200      	movs	r2, #0
 8014aac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014aae:	7dfb      	ldrb	r3, [r7, #23]
 8014ab0:	3301      	adds	r3, #1
 8014ab2:	75fb      	strb	r3, [r7, #23]
 8014ab4:	7dfa      	ldrb	r2, [r7, #23]
 8014ab6:	79fb      	ldrb	r3, [r7, #7]
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d3d3      	bcc.n	8014a64 <IntToUnicode+0x18>
  }
}
 8014abc:	bf00      	nop
 8014abe:	371c      	adds	r7, #28
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac6:	4770      	bx	lr

08014ac8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b08a      	sub	sp, #40	; 0x28
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014ad0:	f107 0314 	add.w	r3, r7, #20
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	601a      	str	r2, [r3, #0]
 8014ad8:	605a      	str	r2, [r3, #4]
 8014ada:	609a      	str	r2, [r3, #8]
 8014adc:	60da      	str	r2, [r3, #12]
 8014ade:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	4a1e      	ldr	r2, [pc, #120]	; (8014b60 <HAL_PCD_MspInit+0x98>)
 8014ae6:	4293      	cmp	r3, r2
 8014ae8:	d136      	bne.n	8014b58 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014aea:	4b1e      	ldr	r3, [pc, #120]	; (8014b64 <HAL_PCD_MspInit+0x9c>)
 8014aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014af0:	4a1c      	ldr	r2, [pc, #112]	; (8014b64 <HAL_PCD_MspInit+0x9c>)
 8014af2:	f043 0301 	orr.w	r3, r3, #1
 8014af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014afa:	4b1a      	ldr	r3, [pc, #104]	; (8014b64 <HAL_PCD_MspInit+0x9c>)
 8014afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014b00:	f003 0301 	and.w	r3, r3, #1
 8014b04:	613b      	str	r3, [r7, #16]
 8014b06:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014b08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b0e:	2302      	movs	r3, #2
 8014b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b12:	2300      	movs	r3, #0
 8014b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014b16:	2300      	movs	r3, #0
 8014b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8014b1a:	230a      	movs	r3, #10
 8014b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014b1e:	f107 0314 	add.w	r3, r7, #20
 8014b22:	4619      	mov	r1, r3
 8014b24:	4810      	ldr	r0, [pc, #64]	; (8014b68 <HAL_PCD_MspInit+0xa0>)
 8014b26:	f7f0 fc1d 	bl	8005364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014b2a:	4b0e      	ldr	r3, [pc, #56]	; (8014b64 <HAL_PCD_MspInit+0x9c>)
 8014b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014b30:	4a0c      	ldr	r2, [pc, #48]	; (8014b64 <HAL_PCD_MspInit+0x9c>)
 8014b32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014b36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014b3a:	4b0a      	ldr	r3, [pc, #40]	; (8014b64 <HAL_PCD_MspInit+0x9c>)
 8014b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014b44:	60fb      	str	r3, [r7, #12]
 8014b46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014b48:	2200      	movs	r2, #0
 8014b4a:	2100      	movs	r1, #0
 8014b4c:	2065      	movs	r0, #101	; 0x65
 8014b4e:	f7ee fcdb 	bl	8003508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014b52:	2065      	movs	r0, #101	; 0x65
 8014b54:	f7ee fcf2 	bl	800353c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014b58:	bf00      	nop
 8014b5a:	3728      	adds	r7, #40	; 0x28
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}
 8014b60:	40080000 	.word	0x40080000
 8014b64:	58024400 	.word	0x58024400
 8014b68:	58020000 	.word	0x58020000

08014b6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014b80:	4619      	mov	r1, r3
 8014b82:	4610      	mov	r0, r2
 8014b84:	f7fb f8e8 	bl	800fd58 <USBD_LL_SetupStage>
}
 8014b88:	bf00      	nop
 8014b8a:	3708      	adds	r7, #8
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b082      	sub	sp, #8
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
 8014b98:	460b      	mov	r3, r1
 8014b9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014ba2:	78fa      	ldrb	r2, [r7, #3]
 8014ba4:	6879      	ldr	r1, [r7, #4]
 8014ba6:	4613      	mov	r3, r2
 8014ba8:	00db      	lsls	r3, r3, #3
 8014baa:	1a9b      	subs	r3, r3, r2
 8014bac:	009b      	lsls	r3, r3, #2
 8014bae:	440b      	add	r3, r1
 8014bb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014bb4:	681a      	ldr	r2, [r3, #0]
 8014bb6:	78fb      	ldrb	r3, [r7, #3]
 8014bb8:	4619      	mov	r1, r3
 8014bba:	f7fb f920 	bl	800fdfe <USBD_LL_DataOutStage>
}
 8014bbe:	bf00      	nop
 8014bc0:	3708      	adds	r7, #8
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd80      	pop	{r7, pc}

08014bc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bc6:	b580      	push	{r7, lr}
 8014bc8:	b082      	sub	sp, #8
 8014bca:	af00      	add	r7, sp, #0
 8014bcc:	6078      	str	r0, [r7, #4]
 8014bce:	460b      	mov	r3, r1
 8014bd0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014bd8:	78fa      	ldrb	r2, [r7, #3]
 8014bda:	6879      	ldr	r1, [r7, #4]
 8014bdc:	4613      	mov	r3, r2
 8014bde:	00db      	lsls	r3, r3, #3
 8014be0:	1a9b      	subs	r3, r3, r2
 8014be2:	009b      	lsls	r3, r3, #2
 8014be4:	440b      	add	r3, r1
 8014be6:	3348      	adds	r3, #72	; 0x48
 8014be8:	681a      	ldr	r2, [r3, #0]
 8014bea:	78fb      	ldrb	r3, [r7, #3]
 8014bec:	4619      	mov	r1, r3
 8014bee:	f7fb f969 	bl	800fec4 <USBD_LL_DataInStage>
}
 8014bf2:	bf00      	nop
 8014bf4:	3708      	adds	r7, #8
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}

08014bfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	b082      	sub	sp, #8
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7fb fa6d 	bl	80100e8 <USBD_LL_SOF>
}
 8014c0e:	bf00      	nop
 8014c10:	3708      	adds	r7, #8
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}

08014c16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c16:	b580      	push	{r7, lr}
 8014c18:	b084      	sub	sp, #16
 8014c1a:	af00      	add	r7, sp, #0
 8014c1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014c1e:	2301      	movs	r3, #1
 8014c20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	68db      	ldr	r3, [r3, #12]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d102      	bne.n	8014c30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	73fb      	strb	r3, [r7, #15]
 8014c2e:	e008      	b.n	8014c42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	68db      	ldr	r3, [r3, #12]
 8014c34:	2b02      	cmp	r3, #2
 8014c36:	d102      	bne.n	8014c3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014c38:	2301      	movs	r3, #1
 8014c3a:	73fb      	strb	r3, [r7, #15]
 8014c3c:	e001      	b.n	8014c42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014c3e:	f7ec fb45 	bl	80012cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014c48:	7bfa      	ldrb	r2, [r7, #15]
 8014c4a:	4611      	mov	r1, r2
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7fb fa10 	bl	8010072 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f7fb f9c9 	bl	800fff0 <USBD_LL_Reset>
}
 8014c5e:	bf00      	nop
 8014c60:	3710      	adds	r7, #16
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}
	...

08014c68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7fb fa0b 	bl	8010092 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	687a      	ldr	r2, [r7, #4]
 8014c88:	6812      	ldr	r2, [r2, #0]
 8014c8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014c8e:	f043 0301 	orr.w	r3, r3, #1
 8014c92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6a1b      	ldr	r3, [r3, #32]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d005      	beq.n	8014ca8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014c9c:	4b04      	ldr	r3, [pc, #16]	; (8014cb0 <HAL_PCD_SuspendCallback+0x48>)
 8014c9e:	691b      	ldr	r3, [r3, #16]
 8014ca0:	4a03      	ldr	r2, [pc, #12]	; (8014cb0 <HAL_PCD_SuspendCallback+0x48>)
 8014ca2:	f043 0306 	orr.w	r3, r3, #6
 8014ca6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014ca8:	bf00      	nop
 8014caa:	3708      	adds	r7, #8
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}
 8014cb0:	e000ed00 	.word	0xe000ed00

08014cb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b082      	sub	sp, #8
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7fb f9fa 	bl	80100bc <USBD_LL_Resume>
}
 8014cc8:	bf00      	nop
 8014cca:	3708      	adds	r7, #8
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
 8014cd8:	460b      	mov	r3, r1
 8014cda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014ce2:	78fa      	ldrb	r2, [r7, #3]
 8014ce4:	4611      	mov	r1, r2
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f7fb fa25 	bl	8010136 <USBD_LL_IsoOUTIncomplete>
}
 8014cec:	bf00      	nop
 8014cee:	3708      	adds	r7, #8
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}

08014cf4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b082      	sub	sp, #8
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
 8014cfc:	460b      	mov	r3, r1
 8014cfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014d06:	78fa      	ldrb	r2, [r7, #3]
 8014d08:	4611      	mov	r1, r2
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7fb fa06 	bl	801011c <USBD_LL_IsoINIncomplete>
}
 8014d10:	bf00      	nop
 8014d12:	3708      	adds	r7, #8
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}

08014d18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b082      	sub	sp, #8
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7fb fa12 	bl	8010150 <USBD_LL_DevConnected>
}
 8014d2c:	bf00      	nop
 8014d2e:	3708      	adds	r7, #8
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b082      	sub	sp, #8
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014d42:	4618      	mov	r0, r3
 8014d44:	f7fb fa0f 	bl	8010166 <USBD_LL_DevDisconnected>
}
 8014d48:	bf00      	nop
 8014d4a:	3708      	adds	r7, #8
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	781b      	ldrb	r3, [r3, #0]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d13e      	bne.n	8014dde <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014d60:	4a21      	ldr	r2, [pc, #132]	; (8014de8 <USBD_LL_Init+0x98>)
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	4a1f      	ldr	r2, [pc, #124]	; (8014de8 <USBD_LL_Init+0x98>)
 8014d6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014d70:	4b1d      	ldr	r3, [pc, #116]	; (8014de8 <USBD_LL_Init+0x98>)
 8014d72:	4a1e      	ldr	r2, [pc, #120]	; (8014dec <USBD_LL_Init+0x9c>)
 8014d74:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8014d76:	4b1c      	ldr	r3, [pc, #112]	; (8014de8 <USBD_LL_Init+0x98>)
 8014d78:	2209      	movs	r2, #9
 8014d7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014d7c:	4b1a      	ldr	r3, [pc, #104]	; (8014de8 <USBD_LL_Init+0x98>)
 8014d7e:	2202      	movs	r2, #2
 8014d80:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014d82:	4b19      	ldr	r3, [pc, #100]	; (8014de8 <USBD_LL_Init+0x98>)
 8014d84:	2200      	movs	r2, #0
 8014d86:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014d88:	4b17      	ldr	r3, [pc, #92]	; (8014de8 <USBD_LL_Init+0x98>)
 8014d8a:	2202      	movs	r2, #2
 8014d8c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014d8e:	4b16      	ldr	r3, [pc, #88]	; (8014de8 <USBD_LL_Init+0x98>)
 8014d90:	2200      	movs	r2, #0
 8014d92:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014d94:	4b14      	ldr	r3, [pc, #80]	; (8014de8 <USBD_LL_Init+0x98>)
 8014d96:	2200      	movs	r2, #0
 8014d98:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014d9a:	4b13      	ldr	r3, [pc, #76]	; (8014de8 <USBD_LL_Init+0x98>)
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8014da0:	4b11      	ldr	r3, [pc, #68]	; (8014de8 <USBD_LL_Init+0x98>)
 8014da2:	2200      	movs	r2, #0
 8014da4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014da6:	4b10      	ldr	r3, [pc, #64]	; (8014de8 <USBD_LL_Init+0x98>)
 8014da8:	2200      	movs	r2, #0
 8014daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014dac:	4b0e      	ldr	r3, [pc, #56]	; (8014de8 <USBD_LL_Init+0x98>)
 8014dae:	2200      	movs	r2, #0
 8014db0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014db2:	480d      	ldr	r0, [pc, #52]	; (8014de8 <USBD_LL_Init+0x98>)
 8014db4:	f7f0 fc9e 	bl	80056f4 <HAL_PCD_Init>
 8014db8:	4603      	mov	r3, r0
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d001      	beq.n	8014dc2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8014dbe:	f7ec fa85 	bl	80012cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014dc2:	2180      	movs	r1, #128	; 0x80
 8014dc4:	4808      	ldr	r0, [pc, #32]	; (8014de8 <USBD_LL_Init+0x98>)
 8014dc6:	f7f1 fe30 	bl	8006a2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014dca:	2240      	movs	r2, #64	; 0x40
 8014dcc:	2100      	movs	r1, #0
 8014dce:	4806      	ldr	r0, [pc, #24]	; (8014de8 <USBD_LL_Init+0x98>)
 8014dd0:	f7f1 fde4 	bl	800699c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014dd4:	2280      	movs	r2, #128	; 0x80
 8014dd6:	2101      	movs	r1, #1
 8014dd8:	4803      	ldr	r0, [pc, #12]	; (8014de8 <USBD_LL_Init+0x98>)
 8014dda:	f7f1 fddf 	bl	800699c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014dde:	2300      	movs	r3, #0
}
 8014de0:	4618      	mov	r0, r3
 8014de2:	3708      	adds	r7, #8
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}
 8014de8:	2401d014 	.word	0x2401d014
 8014dec:	40080000 	.word	0x40080000

08014df0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b084      	sub	sp, #16
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014df8:	2300      	movs	r3, #0
 8014dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7f0 fd98 	bl	800593c <HAL_PCD_Start>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e10:	7bfb      	ldrb	r3, [r7, #15]
 8014e12:	4618      	mov	r0, r3
 8014e14:	f000 f92a 	bl	801506c <USBD_Get_USB_Status>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3710      	adds	r7, #16
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}

08014e26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014e26:	b580      	push	{r7, lr}
 8014e28:	b084      	sub	sp, #16
 8014e2a:	af00      	add	r7, sp, #0
 8014e2c:	6078      	str	r0, [r7, #4]
 8014e2e:	4608      	mov	r0, r1
 8014e30:	4611      	mov	r1, r2
 8014e32:	461a      	mov	r2, r3
 8014e34:	4603      	mov	r3, r0
 8014e36:	70fb      	strb	r3, [r7, #3]
 8014e38:	460b      	mov	r3, r1
 8014e3a:	70bb      	strb	r3, [r7, #2]
 8014e3c:	4613      	mov	r3, r2
 8014e3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e40:	2300      	movs	r3, #0
 8014e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e44:	2300      	movs	r3, #0
 8014e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e4e:	78bb      	ldrb	r3, [r7, #2]
 8014e50:	883a      	ldrh	r2, [r7, #0]
 8014e52:	78f9      	ldrb	r1, [r7, #3]
 8014e54:	f7f1 f9a9 	bl	80061aa <HAL_PCD_EP_Open>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e5c:	7bfb      	ldrb	r3, [r7, #15]
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f000 f904 	bl	801506c <USBD_Get_USB_Status>
 8014e64:	4603      	mov	r3, r0
 8014e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	3710      	adds	r7, #16
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bd80      	pop	{r7, pc}

08014e72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014e72:	b580      	push	{r7, lr}
 8014e74:	b084      	sub	sp, #16
 8014e76:	af00      	add	r7, sp, #0
 8014e78:	6078      	str	r0, [r7, #4]
 8014e7a:	460b      	mov	r3, r1
 8014e7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e7e:	2300      	movs	r3, #0
 8014e80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e82:	2300      	movs	r3, #0
 8014e84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014e8c:	78fa      	ldrb	r2, [r7, #3]
 8014e8e:	4611      	mov	r1, r2
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7f1 f9f2 	bl	800627a <HAL_PCD_EP_Close>
 8014e96:	4603      	mov	r3, r0
 8014e98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e9a:	7bfb      	ldrb	r3, [r7, #15]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f000 f8e5 	bl	801506c <USBD_Get_USB_Status>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ea6:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	3710      	adds	r7, #16
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}

08014eb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b084      	sub	sp, #16
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
 8014eb8:	460b      	mov	r3, r1
 8014eba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014eca:	78fa      	ldrb	r2, [r7, #3]
 8014ecc:	4611      	mov	r1, r2
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7f1 faca 	bl	8006468 <HAL_PCD_EP_SetStall>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ed8:	7bfb      	ldrb	r3, [r7, #15]
 8014eda:	4618      	mov	r0, r3
 8014edc:	f000 f8c6 	bl	801506c <USBD_Get_USB_Status>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3710      	adds	r7, #16
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}

08014eee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	b084      	sub	sp, #16
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	6078      	str	r0, [r7, #4]
 8014ef6:	460b      	mov	r3, r1
 8014ef8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014efa:	2300      	movs	r3, #0
 8014efc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014efe:	2300      	movs	r3, #0
 8014f00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f08:	78fa      	ldrb	r2, [r7, #3]
 8014f0a:	4611      	mov	r1, r2
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f7f1 fb0f 	bl	8006530 <HAL_PCD_EP_ClrStall>
 8014f12:	4603      	mov	r3, r0
 8014f14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f16:	7bfb      	ldrb	r3, [r7, #15]
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f000 f8a7 	bl	801506c <USBD_Get_USB_Status>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f22:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f24:	4618      	mov	r0, r3
 8014f26:	3710      	adds	r7, #16
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bd80      	pop	{r7, pc}

08014f2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b085      	sub	sp, #20
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
 8014f34:	460b      	mov	r3, r1
 8014f36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	da0b      	bge.n	8014f60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014f48:	78fb      	ldrb	r3, [r7, #3]
 8014f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014f4e:	68f9      	ldr	r1, [r7, #12]
 8014f50:	4613      	mov	r3, r2
 8014f52:	00db      	lsls	r3, r3, #3
 8014f54:	1a9b      	subs	r3, r3, r2
 8014f56:	009b      	lsls	r3, r3, #2
 8014f58:	440b      	add	r3, r1
 8014f5a:	333e      	adds	r3, #62	; 0x3e
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	e00b      	b.n	8014f78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014f60:	78fb      	ldrb	r3, [r7, #3]
 8014f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014f66:	68f9      	ldr	r1, [r7, #12]
 8014f68:	4613      	mov	r3, r2
 8014f6a:	00db      	lsls	r3, r3, #3
 8014f6c:	1a9b      	subs	r3, r3, r2
 8014f6e:	009b      	lsls	r3, r3, #2
 8014f70:	440b      	add	r3, r1
 8014f72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014f76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3714      	adds	r7, #20
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f82:	4770      	bx	lr

08014f84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b084      	sub	sp, #16
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	460b      	mov	r3, r1
 8014f8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f90:	2300      	movs	r3, #0
 8014f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f94:	2300      	movs	r3, #0
 8014f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f9e:	78fa      	ldrb	r2, [r7, #3]
 8014fa0:	4611      	mov	r1, r2
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f7f1 f8dc 	bl	8006160 <HAL_PCD_SetAddress>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014fac:	7bfb      	ldrb	r3, [r7, #15]
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f000 f85c 	bl	801506c <USBD_Get_USB_Status>
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3710      	adds	r7, #16
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}

08014fc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014fc2:	b580      	push	{r7, lr}
 8014fc4:	b086      	sub	sp, #24
 8014fc6:	af00      	add	r7, sp, #0
 8014fc8:	60f8      	str	r0, [r7, #12]
 8014fca:	607a      	str	r2, [r7, #4]
 8014fcc:	603b      	str	r3, [r7, #0]
 8014fce:	460b      	mov	r3, r1
 8014fd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014fe0:	7af9      	ldrb	r1, [r7, #11]
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	687a      	ldr	r2, [r7, #4]
 8014fe6:	f7f1 f9f5 	bl	80063d4 <HAL_PCD_EP_Transmit>
 8014fea:	4603      	mov	r3, r0
 8014fec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014fee:	7dfb      	ldrb	r3, [r7, #23]
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f000 f83b 	bl	801506c <USBD_Get_USB_Status>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014ffa:	7dbb      	ldrb	r3, [r7, #22]
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3718      	adds	r7, #24
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}

08015004 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b086      	sub	sp, #24
 8015008:	af00      	add	r7, sp, #0
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	607a      	str	r2, [r7, #4]
 801500e:	603b      	str	r3, [r7, #0]
 8015010:	460b      	mov	r3, r1
 8015012:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015014:	2300      	movs	r3, #0
 8015016:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015018:	2300      	movs	r3, #0
 801501a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015022:	7af9      	ldrb	r1, [r7, #11]
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	687a      	ldr	r2, [r7, #4]
 8015028:	f7f1 f971 	bl	800630e <HAL_PCD_EP_Receive>
 801502c:	4603      	mov	r3, r0
 801502e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015030:	7dfb      	ldrb	r3, [r7, #23]
 8015032:	4618      	mov	r0, r3
 8015034:	f000 f81a 	bl	801506c <USBD_Get_USB_Status>
 8015038:	4603      	mov	r3, r0
 801503a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801503c:	7dbb      	ldrb	r3, [r7, #22]
}
 801503e:	4618      	mov	r0, r3
 8015040:	3718      	adds	r7, #24
 8015042:	46bd      	mov	sp, r7
 8015044:	bd80      	pop	{r7, pc}

08015046 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015046:	b580      	push	{r7, lr}
 8015048:	b082      	sub	sp, #8
 801504a:	af00      	add	r7, sp, #0
 801504c:	6078      	str	r0, [r7, #4]
 801504e:	460b      	mov	r3, r1
 8015050:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015058:	78fa      	ldrb	r2, [r7, #3]
 801505a:	4611      	mov	r1, r2
 801505c:	4618      	mov	r0, r3
 801505e:	f7f1 f9a1 	bl	80063a4 <HAL_PCD_EP_GetRxCount>
 8015062:	4603      	mov	r3, r0
}
 8015064:	4618      	mov	r0, r3
 8015066:	3708      	adds	r7, #8
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}

0801506c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801506c:	b480      	push	{r7}
 801506e:	b085      	sub	sp, #20
 8015070:	af00      	add	r7, sp, #0
 8015072:	4603      	mov	r3, r0
 8015074:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015076:	2300      	movs	r3, #0
 8015078:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801507a:	79fb      	ldrb	r3, [r7, #7]
 801507c:	2b03      	cmp	r3, #3
 801507e:	d817      	bhi.n	80150b0 <USBD_Get_USB_Status+0x44>
 8015080:	a201      	add	r2, pc, #4	; (adr r2, 8015088 <USBD_Get_USB_Status+0x1c>)
 8015082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015086:	bf00      	nop
 8015088:	08015099 	.word	0x08015099
 801508c:	0801509f 	.word	0x0801509f
 8015090:	080150a5 	.word	0x080150a5
 8015094:	080150ab 	.word	0x080150ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015098:	2300      	movs	r3, #0
 801509a:	73fb      	strb	r3, [r7, #15]
    break;
 801509c:	e00b      	b.n	80150b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801509e:	2303      	movs	r3, #3
 80150a0:	73fb      	strb	r3, [r7, #15]
    break;
 80150a2:	e008      	b.n	80150b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80150a4:	2301      	movs	r3, #1
 80150a6:	73fb      	strb	r3, [r7, #15]
    break;
 80150a8:	e005      	b.n	80150b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80150aa:	2303      	movs	r3, #3
 80150ac:	73fb      	strb	r3, [r7, #15]
    break;
 80150ae:	e002      	b.n	80150b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80150b0:	2303      	movs	r3, #3
 80150b2:	73fb      	strb	r3, [r7, #15]
    break;
 80150b4:	bf00      	nop
  }
  return usb_status;
 80150b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	3714      	adds	r7, #20
 80150bc:	46bd      	mov	sp, r7
 80150be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c2:	4770      	bx	lr

080150c4 <__errno>:
 80150c4:	4b01      	ldr	r3, [pc, #4]	; (80150cc <__errno+0x8>)
 80150c6:	6818      	ldr	r0, [r3, #0]
 80150c8:	4770      	bx	lr
 80150ca:	bf00      	nop
 80150cc:	24000188 	.word	0x24000188

080150d0 <__libc_init_array>:
 80150d0:	b570      	push	{r4, r5, r6, lr}
 80150d2:	4e0d      	ldr	r6, [pc, #52]	; (8015108 <__libc_init_array+0x38>)
 80150d4:	4c0d      	ldr	r4, [pc, #52]	; (801510c <__libc_init_array+0x3c>)
 80150d6:	1ba4      	subs	r4, r4, r6
 80150d8:	10a4      	asrs	r4, r4, #2
 80150da:	2500      	movs	r5, #0
 80150dc:	42a5      	cmp	r5, r4
 80150de:	d109      	bne.n	80150f4 <__libc_init_array+0x24>
 80150e0:	4e0b      	ldr	r6, [pc, #44]	; (8015110 <__libc_init_array+0x40>)
 80150e2:	4c0c      	ldr	r4, [pc, #48]	; (8015114 <__libc_init_array+0x44>)
 80150e4:	f000 fc52 	bl	801598c <_init>
 80150e8:	1ba4      	subs	r4, r4, r6
 80150ea:	10a4      	asrs	r4, r4, #2
 80150ec:	2500      	movs	r5, #0
 80150ee:	42a5      	cmp	r5, r4
 80150f0:	d105      	bne.n	80150fe <__libc_init_array+0x2e>
 80150f2:	bd70      	pop	{r4, r5, r6, pc}
 80150f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80150f8:	4798      	blx	r3
 80150fa:	3501      	adds	r5, #1
 80150fc:	e7ee      	b.n	80150dc <__libc_init_array+0xc>
 80150fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015102:	4798      	blx	r3
 8015104:	3501      	adds	r5, #1
 8015106:	e7f2      	b.n	80150ee <__libc_init_array+0x1e>
 8015108:	08015b5c 	.word	0x08015b5c
 801510c:	08015b5c 	.word	0x08015b5c
 8015110:	08015b5c 	.word	0x08015b5c
 8015114:	08015b60 	.word	0x08015b60

08015118 <malloc>:
 8015118:	4b02      	ldr	r3, [pc, #8]	; (8015124 <malloc+0xc>)
 801511a:	4601      	mov	r1, r0
 801511c:	6818      	ldr	r0, [r3, #0]
 801511e:	f000 b86d 	b.w	80151fc <_malloc_r>
 8015122:	bf00      	nop
 8015124:	24000188 	.word	0x24000188

08015128 <free>:
 8015128:	4b02      	ldr	r3, [pc, #8]	; (8015134 <free+0xc>)
 801512a:	4601      	mov	r1, r0
 801512c:	6818      	ldr	r0, [r3, #0]
 801512e:	f000 b817 	b.w	8015160 <_free_r>
 8015132:	bf00      	nop
 8015134:	24000188 	.word	0x24000188

08015138 <memcpy>:
 8015138:	b510      	push	{r4, lr}
 801513a:	1e43      	subs	r3, r0, #1
 801513c:	440a      	add	r2, r1
 801513e:	4291      	cmp	r1, r2
 8015140:	d100      	bne.n	8015144 <memcpy+0xc>
 8015142:	bd10      	pop	{r4, pc}
 8015144:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015148:	f803 4f01 	strb.w	r4, [r3, #1]!
 801514c:	e7f7      	b.n	801513e <memcpy+0x6>

0801514e <memset>:
 801514e:	4402      	add	r2, r0
 8015150:	4603      	mov	r3, r0
 8015152:	4293      	cmp	r3, r2
 8015154:	d100      	bne.n	8015158 <memset+0xa>
 8015156:	4770      	bx	lr
 8015158:	f803 1b01 	strb.w	r1, [r3], #1
 801515c:	e7f9      	b.n	8015152 <memset+0x4>
	...

08015160 <_free_r>:
 8015160:	b538      	push	{r3, r4, r5, lr}
 8015162:	4605      	mov	r5, r0
 8015164:	2900      	cmp	r1, #0
 8015166:	d045      	beq.n	80151f4 <_free_r+0x94>
 8015168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801516c:	1f0c      	subs	r4, r1, #4
 801516e:	2b00      	cmp	r3, #0
 8015170:	bfb8      	it	lt
 8015172:	18e4      	addlt	r4, r4, r3
 8015174:	f000 f8e6 	bl	8015344 <__malloc_lock>
 8015178:	4a1f      	ldr	r2, [pc, #124]	; (80151f8 <_free_r+0x98>)
 801517a:	6813      	ldr	r3, [r2, #0]
 801517c:	4610      	mov	r0, r2
 801517e:	b933      	cbnz	r3, 801518e <_free_r+0x2e>
 8015180:	6063      	str	r3, [r4, #4]
 8015182:	6014      	str	r4, [r2, #0]
 8015184:	4628      	mov	r0, r5
 8015186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801518a:	f000 b8dc 	b.w	8015346 <__malloc_unlock>
 801518e:	42a3      	cmp	r3, r4
 8015190:	d90c      	bls.n	80151ac <_free_r+0x4c>
 8015192:	6821      	ldr	r1, [r4, #0]
 8015194:	1862      	adds	r2, r4, r1
 8015196:	4293      	cmp	r3, r2
 8015198:	bf04      	itt	eq
 801519a:	681a      	ldreq	r2, [r3, #0]
 801519c:	685b      	ldreq	r3, [r3, #4]
 801519e:	6063      	str	r3, [r4, #4]
 80151a0:	bf04      	itt	eq
 80151a2:	1852      	addeq	r2, r2, r1
 80151a4:	6022      	streq	r2, [r4, #0]
 80151a6:	6004      	str	r4, [r0, #0]
 80151a8:	e7ec      	b.n	8015184 <_free_r+0x24>
 80151aa:	4613      	mov	r3, r2
 80151ac:	685a      	ldr	r2, [r3, #4]
 80151ae:	b10a      	cbz	r2, 80151b4 <_free_r+0x54>
 80151b0:	42a2      	cmp	r2, r4
 80151b2:	d9fa      	bls.n	80151aa <_free_r+0x4a>
 80151b4:	6819      	ldr	r1, [r3, #0]
 80151b6:	1858      	adds	r0, r3, r1
 80151b8:	42a0      	cmp	r0, r4
 80151ba:	d10b      	bne.n	80151d4 <_free_r+0x74>
 80151bc:	6820      	ldr	r0, [r4, #0]
 80151be:	4401      	add	r1, r0
 80151c0:	1858      	adds	r0, r3, r1
 80151c2:	4282      	cmp	r2, r0
 80151c4:	6019      	str	r1, [r3, #0]
 80151c6:	d1dd      	bne.n	8015184 <_free_r+0x24>
 80151c8:	6810      	ldr	r0, [r2, #0]
 80151ca:	6852      	ldr	r2, [r2, #4]
 80151cc:	605a      	str	r2, [r3, #4]
 80151ce:	4401      	add	r1, r0
 80151d0:	6019      	str	r1, [r3, #0]
 80151d2:	e7d7      	b.n	8015184 <_free_r+0x24>
 80151d4:	d902      	bls.n	80151dc <_free_r+0x7c>
 80151d6:	230c      	movs	r3, #12
 80151d8:	602b      	str	r3, [r5, #0]
 80151da:	e7d3      	b.n	8015184 <_free_r+0x24>
 80151dc:	6820      	ldr	r0, [r4, #0]
 80151de:	1821      	adds	r1, r4, r0
 80151e0:	428a      	cmp	r2, r1
 80151e2:	bf04      	itt	eq
 80151e4:	6811      	ldreq	r1, [r2, #0]
 80151e6:	6852      	ldreq	r2, [r2, #4]
 80151e8:	6062      	str	r2, [r4, #4]
 80151ea:	bf04      	itt	eq
 80151ec:	1809      	addeq	r1, r1, r0
 80151ee:	6021      	streq	r1, [r4, #0]
 80151f0:	605c      	str	r4, [r3, #4]
 80151f2:	e7c7      	b.n	8015184 <_free_r+0x24>
 80151f4:	bd38      	pop	{r3, r4, r5, pc}
 80151f6:	bf00      	nop
 80151f8:	24008728 	.word	0x24008728

080151fc <_malloc_r>:
 80151fc:	b570      	push	{r4, r5, r6, lr}
 80151fe:	1ccd      	adds	r5, r1, #3
 8015200:	f025 0503 	bic.w	r5, r5, #3
 8015204:	3508      	adds	r5, #8
 8015206:	2d0c      	cmp	r5, #12
 8015208:	bf38      	it	cc
 801520a:	250c      	movcc	r5, #12
 801520c:	2d00      	cmp	r5, #0
 801520e:	4606      	mov	r6, r0
 8015210:	db01      	blt.n	8015216 <_malloc_r+0x1a>
 8015212:	42a9      	cmp	r1, r5
 8015214:	d903      	bls.n	801521e <_malloc_r+0x22>
 8015216:	230c      	movs	r3, #12
 8015218:	6033      	str	r3, [r6, #0]
 801521a:	2000      	movs	r0, #0
 801521c:	bd70      	pop	{r4, r5, r6, pc}
 801521e:	f000 f891 	bl	8015344 <__malloc_lock>
 8015222:	4a21      	ldr	r2, [pc, #132]	; (80152a8 <_malloc_r+0xac>)
 8015224:	6814      	ldr	r4, [r2, #0]
 8015226:	4621      	mov	r1, r4
 8015228:	b991      	cbnz	r1, 8015250 <_malloc_r+0x54>
 801522a:	4c20      	ldr	r4, [pc, #128]	; (80152ac <_malloc_r+0xb0>)
 801522c:	6823      	ldr	r3, [r4, #0]
 801522e:	b91b      	cbnz	r3, 8015238 <_malloc_r+0x3c>
 8015230:	4630      	mov	r0, r6
 8015232:	f000 f83d 	bl	80152b0 <_sbrk_r>
 8015236:	6020      	str	r0, [r4, #0]
 8015238:	4629      	mov	r1, r5
 801523a:	4630      	mov	r0, r6
 801523c:	f000 f838 	bl	80152b0 <_sbrk_r>
 8015240:	1c43      	adds	r3, r0, #1
 8015242:	d124      	bne.n	801528e <_malloc_r+0x92>
 8015244:	230c      	movs	r3, #12
 8015246:	6033      	str	r3, [r6, #0]
 8015248:	4630      	mov	r0, r6
 801524a:	f000 f87c 	bl	8015346 <__malloc_unlock>
 801524e:	e7e4      	b.n	801521a <_malloc_r+0x1e>
 8015250:	680b      	ldr	r3, [r1, #0]
 8015252:	1b5b      	subs	r3, r3, r5
 8015254:	d418      	bmi.n	8015288 <_malloc_r+0x8c>
 8015256:	2b0b      	cmp	r3, #11
 8015258:	d90f      	bls.n	801527a <_malloc_r+0x7e>
 801525a:	600b      	str	r3, [r1, #0]
 801525c:	50cd      	str	r5, [r1, r3]
 801525e:	18cc      	adds	r4, r1, r3
 8015260:	4630      	mov	r0, r6
 8015262:	f000 f870 	bl	8015346 <__malloc_unlock>
 8015266:	f104 000b 	add.w	r0, r4, #11
 801526a:	1d23      	adds	r3, r4, #4
 801526c:	f020 0007 	bic.w	r0, r0, #7
 8015270:	1ac3      	subs	r3, r0, r3
 8015272:	d0d3      	beq.n	801521c <_malloc_r+0x20>
 8015274:	425a      	negs	r2, r3
 8015276:	50e2      	str	r2, [r4, r3]
 8015278:	e7d0      	b.n	801521c <_malloc_r+0x20>
 801527a:	428c      	cmp	r4, r1
 801527c:	684b      	ldr	r3, [r1, #4]
 801527e:	bf16      	itet	ne
 8015280:	6063      	strne	r3, [r4, #4]
 8015282:	6013      	streq	r3, [r2, #0]
 8015284:	460c      	movne	r4, r1
 8015286:	e7eb      	b.n	8015260 <_malloc_r+0x64>
 8015288:	460c      	mov	r4, r1
 801528a:	6849      	ldr	r1, [r1, #4]
 801528c:	e7cc      	b.n	8015228 <_malloc_r+0x2c>
 801528e:	1cc4      	adds	r4, r0, #3
 8015290:	f024 0403 	bic.w	r4, r4, #3
 8015294:	42a0      	cmp	r0, r4
 8015296:	d005      	beq.n	80152a4 <_malloc_r+0xa8>
 8015298:	1a21      	subs	r1, r4, r0
 801529a:	4630      	mov	r0, r6
 801529c:	f000 f808 	bl	80152b0 <_sbrk_r>
 80152a0:	3001      	adds	r0, #1
 80152a2:	d0cf      	beq.n	8015244 <_malloc_r+0x48>
 80152a4:	6025      	str	r5, [r4, #0]
 80152a6:	e7db      	b.n	8015260 <_malloc_r+0x64>
 80152a8:	24008728 	.word	0x24008728
 80152ac:	2400872c 	.word	0x2400872c

080152b0 <_sbrk_r>:
 80152b0:	b538      	push	{r3, r4, r5, lr}
 80152b2:	4c06      	ldr	r4, [pc, #24]	; (80152cc <_sbrk_r+0x1c>)
 80152b4:	2300      	movs	r3, #0
 80152b6:	4605      	mov	r5, r0
 80152b8:	4608      	mov	r0, r1
 80152ba:	6023      	str	r3, [r4, #0]
 80152bc:	f7ec febe 	bl	800203c <_sbrk>
 80152c0:	1c43      	adds	r3, r0, #1
 80152c2:	d102      	bne.n	80152ca <_sbrk_r+0x1a>
 80152c4:	6823      	ldr	r3, [r4, #0]
 80152c6:	b103      	cbz	r3, 80152ca <_sbrk_r+0x1a>
 80152c8:	602b      	str	r3, [r5, #0]
 80152ca:	bd38      	pop	{r3, r4, r5, pc}
 80152cc:	2401d41c 	.word	0x2401d41c

080152d0 <_vsniprintf_r>:
 80152d0:	b530      	push	{r4, r5, lr}
 80152d2:	1e14      	subs	r4, r2, #0
 80152d4:	4605      	mov	r5, r0
 80152d6:	b09b      	sub	sp, #108	; 0x6c
 80152d8:	4618      	mov	r0, r3
 80152da:	da05      	bge.n	80152e8 <_vsniprintf_r+0x18>
 80152dc:	238b      	movs	r3, #139	; 0x8b
 80152de:	602b      	str	r3, [r5, #0]
 80152e0:	f04f 30ff 	mov.w	r0, #4294967295
 80152e4:	b01b      	add	sp, #108	; 0x6c
 80152e6:	bd30      	pop	{r4, r5, pc}
 80152e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80152ec:	f8ad 300c 	strh.w	r3, [sp, #12]
 80152f0:	bf14      	ite	ne
 80152f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80152f6:	4623      	moveq	r3, r4
 80152f8:	9302      	str	r3, [sp, #8]
 80152fa:	9305      	str	r3, [sp, #20]
 80152fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015300:	9100      	str	r1, [sp, #0]
 8015302:	9104      	str	r1, [sp, #16]
 8015304:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015308:	4602      	mov	r2, r0
 801530a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801530c:	4669      	mov	r1, sp
 801530e:	4628      	mov	r0, r5
 8015310:	f000 f874 	bl	80153fc <_svfiprintf_r>
 8015314:	1c43      	adds	r3, r0, #1
 8015316:	bfbc      	itt	lt
 8015318:	238b      	movlt	r3, #139	; 0x8b
 801531a:	602b      	strlt	r3, [r5, #0]
 801531c:	2c00      	cmp	r4, #0
 801531e:	d0e1      	beq.n	80152e4 <_vsniprintf_r+0x14>
 8015320:	9b00      	ldr	r3, [sp, #0]
 8015322:	2200      	movs	r2, #0
 8015324:	701a      	strb	r2, [r3, #0]
 8015326:	e7dd      	b.n	80152e4 <_vsniprintf_r+0x14>

08015328 <vsniprintf>:
 8015328:	b507      	push	{r0, r1, r2, lr}
 801532a:	9300      	str	r3, [sp, #0]
 801532c:	4613      	mov	r3, r2
 801532e:	460a      	mov	r2, r1
 8015330:	4601      	mov	r1, r0
 8015332:	4803      	ldr	r0, [pc, #12]	; (8015340 <vsniprintf+0x18>)
 8015334:	6800      	ldr	r0, [r0, #0]
 8015336:	f7ff ffcb 	bl	80152d0 <_vsniprintf_r>
 801533a:	b003      	add	sp, #12
 801533c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015340:	24000188 	.word	0x24000188

08015344 <__malloc_lock>:
 8015344:	4770      	bx	lr

08015346 <__malloc_unlock>:
 8015346:	4770      	bx	lr

08015348 <__ssputs_r>:
 8015348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801534c:	688e      	ldr	r6, [r1, #8]
 801534e:	429e      	cmp	r6, r3
 8015350:	4682      	mov	sl, r0
 8015352:	460c      	mov	r4, r1
 8015354:	4690      	mov	r8, r2
 8015356:	4699      	mov	r9, r3
 8015358:	d837      	bhi.n	80153ca <__ssputs_r+0x82>
 801535a:	898a      	ldrh	r2, [r1, #12]
 801535c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015360:	d031      	beq.n	80153c6 <__ssputs_r+0x7e>
 8015362:	6825      	ldr	r5, [r4, #0]
 8015364:	6909      	ldr	r1, [r1, #16]
 8015366:	1a6f      	subs	r7, r5, r1
 8015368:	6965      	ldr	r5, [r4, #20]
 801536a:	2302      	movs	r3, #2
 801536c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015370:	fb95 f5f3 	sdiv	r5, r5, r3
 8015374:	f109 0301 	add.w	r3, r9, #1
 8015378:	443b      	add	r3, r7
 801537a:	429d      	cmp	r5, r3
 801537c:	bf38      	it	cc
 801537e:	461d      	movcc	r5, r3
 8015380:	0553      	lsls	r3, r2, #21
 8015382:	d530      	bpl.n	80153e6 <__ssputs_r+0x9e>
 8015384:	4629      	mov	r1, r5
 8015386:	f7ff ff39 	bl	80151fc <_malloc_r>
 801538a:	4606      	mov	r6, r0
 801538c:	b950      	cbnz	r0, 80153a4 <__ssputs_r+0x5c>
 801538e:	230c      	movs	r3, #12
 8015390:	f8ca 3000 	str.w	r3, [sl]
 8015394:	89a3      	ldrh	r3, [r4, #12]
 8015396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801539a:	81a3      	strh	r3, [r4, #12]
 801539c:	f04f 30ff 	mov.w	r0, #4294967295
 80153a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153a4:	463a      	mov	r2, r7
 80153a6:	6921      	ldr	r1, [r4, #16]
 80153a8:	f7ff fec6 	bl	8015138 <memcpy>
 80153ac:	89a3      	ldrh	r3, [r4, #12]
 80153ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80153b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153b6:	81a3      	strh	r3, [r4, #12]
 80153b8:	6126      	str	r6, [r4, #16]
 80153ba:	6165      	str	r5, [r4, #20]
 80153bc:	443e      	add	r6, r7
 80153be:	1bed      	subs	r5, r5, r7
 80153c0:	6026      	str	r6, [r4, #0]
 80153c2:	60a5      	str	r5, [r4, #8]
 80153c4:	464e      	mov	r6, r9
 80153c6:	454e      	cmp	r6, r9
 80153c8:	d900      	bls.n	80153cc <__ssputs_r+0x84>
 80153ca:	464e      	mov	r6, r9
 80153cc:	4632      	mov	r2, r6
 80153ce:	4641      	mov	r1, r8
 80153d0:	6820      	ldr	r0, [r4, #0]
 80153d2:	f000 fa93 	bl	80158fc <memmove>
 80153d6:	68a3      	ldr	r3, [r4, #8]
 80153d8:	1b9b      	subs	r3, r3, r6
 80153da:	60a3      	str	r3, [r4, #8]
 80153dc:	6823      	ldr	r3, [r4, #0]
 80153de:	441e      	add	r6, r3
 80153e0:	6026      	str	r6, [r4, #0]
 80153e2:	2000      	movs	r0, #0
 80153e4:	e7dc      	b.n	80153a0 <__ssputs_r+0x58>
 80153e6:	462a      	mov	r2, r5
 80153e8:	f000 faa1 	bl	801592e <_realloc_r>
 80153ec:	4606      	mov	r6, r0
 80153ee:	2800      	cmp	r0, #0
 80153f0:	d1e2      	bne.n	80153b8 <__ssputs_r+0x70>
 80153f2:	6921      	ldr	r1, [r4, #16]
 80153f4:	4650      	mov	r0, sl
 80153f6:	f7ff feb3 	bl	8015160 <_free_r>
 80153fa:	e7c8      	b.n	801538e <__ssputs_r+0x46>

080153fc <_svfiprintf_r>:
 80153fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015400:	461d      	mov	r5, r3
 8015402:	898b      	ldrh	r3, [r1, #12]
 8015404:	061f      	lsls	r7, r3, #24
 8015406:	b09d      	sub	sp, #116	; 0x74
 8015408:	4680      	mov	r8, r0
 801540a:	460c      	mov	r4, r1
 801540c:	4616      	mov	r6, r2
 801540e:	d50f      	bpl.n	8015430 <_svfiprintf_r+0x34>
 8015410:	690b      	ldr	r3, [r1, #16]
 8015412:	b96b      	cbnz	r3, 8015430 <_svfiprintf_r+0x34>
 8015414:	2140      	movs	r1, #64	; 0x40
 8015416:	f7ff fef1 	bl	80151fc <_malloc_r>
 801541a:	6020      	str	r0, [r4, #0]
 801541c:	6120      	str	r0, [r4, #16]
 801541e:	b928      	cbnz	r0, 801542c <_svfiprintf_r+0x30>
 8015420:	230c      	movs	r3, #12
 8015422:	f8c8 3000 	str.w	r3, [r8]
 8015426:	f04f 30ff 	mov.w	r0, #4294967295
 801542a:	e0c8      	b.n	80155be <_svfiprintf_r+0x1c2>
 801542c:	2340      	movs	r3, #64	; 0x40
 801542e:	6163      	str	r3, [r4, #20]
 8015430:	2300      	movs	r3, #0
 8015432:	9309      	str	r3, [sp, #36]	; 0x24
 8015434:	2320      	movs	r3, #32
 8015436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801543a:	2330      	movs	r3, #48	; 0x30
 801543c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015440:	9503      	str	r5, [sp, #12]
 8015442:	f04f 0b01 	mov.w	fp, #1
 8015446:	4637      	mov	r7, r6
 8015448:	463d      	mov	r5, r7
 801544a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801544e:	b10b      	cbz	r3, 8015454 <_svfiprintf_r+0x58>
 8015450:	2b25      	cmp	r3, #37	; 0x25
 8015452:	d13e      	bne.n	80154d2 <_svfiprintf_r+0xd6>
 8015454:	ebb7 0a06 	subs.w	sl, r7, r6
 8015458:	d00b      	beq.n	8015472 <_svfiprintf_r+0x76>
 801545a:	4653      	mov	r3, sl
 801545c:	4632      	mov	r2, r6
 801545e:	4621      	mov	r1, r4
 8015460:	4640      	mov	r0, r8
 8015462:	f7ff ff71 	bl	8015348 <__ssputs_r>
 8015466:	3001      	adds	r0, #1
 8015468:	f000 80a4 	beq.w	80155b4 <_svfiprintf_r+0x1b8>
 801546c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801546e:	4453      	add	r3, sl
 8015470:	9309      	str	r3, [sp, #36]	; 0x24
 8015472:	783b      	ldrb	r3, [r7, #0]
 8015474:	2b00      	cmp	r3, #0
 8015476:	f000 809d 	beq.w	80155b4 <_svfiprintf_r+0x1b8>
 801547a:	2300      	movs	r3, #0
 801547c:	f04f 32ff 	mov.w	r2, #4294967295
 8015480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015484:	9304      	str	r3, [sp, #16]
 8015486:	9307      	str	r3, [sp, #28]
 8015488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801548c:	931a      	str	r3, [sp, #104]	; 0x68
 801548e:	462f      	mov	r7, r5
 8015490:	2205      	movs	r2, #5
 8015492:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015496:	4850      	ldr	r0, [pc, #320]	; (80155d8 <_svfiprintf_r+0x1dc>)
 8015498:	f7ea ff2a 	bl	80002f0 <memchr>
 801549c:	9b04      	ldr	r3, [sp, #16]
 801549e:	b9d0      	cbnz	r0, 80154d6 <_svfiprintf_r+0xda>
 80154a0:	06d9      	lsls	r1, r3, #27
 80154a2:	bf44      	itt	mi
 80154a4:	2220      	movmi	r2, #32
 80154a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80154aa:	071a      	lsls	r2, r3, #28
 80154ac:	bf44      	itt	mi
 80154ae:	222b      	movmi	r2, #43	; 0x2b
 80154b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80154b4:	782a      	ldrb	r2, [r5, #0]
 80154b6:	2a2a      	cmp	r2, #42	; 0x2a
 80154b8:	d015      	beq.n	80154e6 <_svfiprintf_r+0xea>
 80154ba:	9a07      	ldr	r2, [sp, #28]
 80154bc:	462f      	mov	r7, r5
 80154be:	2000      	movs	r0, #0
 80154c0:	250a      	movs	r5, #10
 80154c2:	4639      	mov	r1, r7
 80154c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154c8:	3b30      	subs	r3, #48	; 0x30
 80154ca:	2b09      	cmp	r3, #9
 80154cc:	d94d      	bls.n	801556a <_svfiprintf_r+0x16e>
 80154ce:	b1b8      	cbz	r0, 8015500 <_svfiprintf_r+0x104>
 80154d0:	e00f      	b.n	80154f2 <_svfiprintf_r+0xf6>
 80154d2:	462f      	mov	r7, r5
 80154d4:	e7b8      	b.n	8015448 <_svfiprintf_r+0x4c>
 80154d6:	4a40      	ldr	r2, [pc, #256]	; (80155d8 <_svfiprintf_r+0x1dc>)
 80154d8:	1a80      	subs	r0, r0, r2
 80154da:	fa0b f000 	lsl.w	r0, fp, r0
 80154de:	4318      	orrs	r0, r3
 80154e0:	9004      	str	r0, [sp, #16]
 80154e2:	463d      	mov	r5, r7
 80154e4:	e7d3      	b.n	801548e <_svfiprintf_r+0x92>
 80154e6:	9a03      	ldr	r2, [sp, #12]
 80154e8:	1d11      	adds	r1, r2, #4
 80154ea:	6812      	ldr	r2, [r2, #0]
 80154ec:	9103      	str	r1, [sp, #12]
 80154ee:	2a00      	cmp	r2, #0
 80154f0:	db01      	blt.n	80154f6 <_svfiprintf_r+0xfa>
 80154f2:	9207      	str	r2, [sp, #28]
 80154f4:	e004      	b.n	8015500 <_svfiprintf_r+0x104>
 80154f6:	4252      	negs	r2, r2
 80154f8:	f043 0302 	orr.w	r3, r3, #2
 80154fc:	9207      	str	r2, [sp, #28]
 80154fe:	9304      	str	r3, [sp, #16]
 8015500:	783b      	ldrb	r3, [r7, #0]
 8015502:	2b2e      	cmp	r3, #46	; 0x2e
 8015504:	d10c      	bne.n	8015520 <_svfiprintf_r+0x124>
 8015506:	787b      	ldrb	r3, [r7, #1]
 8015508:	2b2a      	cmp	r3, #42	; 0x2a
 801550a:	d133      	bne.n	8015574 <_svfiprintf_r+0x178>
 801550c:	9b03      	ldr	r3, [sp, #12]
 801550e:	1d1a      	adds	r2, r3, #4
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	9203      	str	r2, [sp, #12]
 8015514:	2b00      	cmp	r3, #0
 8015516:	bfb8      	it	lt
 8015518:	f04f 33ff 	movlt.w	r3, #4294967295
 801551c:	3702      	adds	r7, #2
 801551e:	9305      	str	r3, [sp, #20]
 8015520:	4d2e      	ldr	r5, [pc, #184]	; (80155dc <_svfiprintf_r+0x1e0>)
 8015522:	7839      	ldrb	r1, [r7, #0]
 8015524:	2203      	movs	r2, #3
 8015526:	4628      	mov	r0, r5
 8015528:	f7ea fee2 	bl	80002f0 <memchr>
 801552c:	b138      	cbz	r0, 801553e <_svfiprintf_r+0x142>
 801552e:	2340      	movs	r3, #64	; 0x40
 8015530:	1b40      	subs	r0, r0, r5
 8015532:	fa03 f000 	lsl.w	r0, r3, r0
 8015536:	9b04      	ldr	r3, [sp, #16]
 8015538:	4303      	orrs	r3, r0
 801553a:	3701      	adds	r7, #1
 801553c:	9304      	str	r3, [sp, #16]
 801553e:	7839      	ldrb	r1, [r7, #0]
 8015540:	4827      	ldr	r0, [pc, #156]	; (80155e0 <_svfiprintf_r+0x1e4>)
 8015542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015546:	2206      	movs	r2, #6
 8015548:	1c7e      	adds	r6, r7, #1
 801554a:	f7ea fed1 	bl	80002f0 <memchr>
 801554e:	2800      	cmp	r0, #0
 8015550:	d038      	beq.n	80155c4 <_svfiprintf_r+0x1c8>
 8015552:	4b24      	ldr	r3, [pc, #144]	; (80155e4 <_svfiprintf_r+0x1e8>)
 8015554:	bb13      	cbnz	r3, 801559c <_svfiprintf_r+0x1a0>
 8015556:	9b03      	ldr	r3, [sp, #12]
 8015558:	3307      	adds	r3, #7
 801555a:	f023 0307 	bic.w	r3, r3, #7
 801555e:	3308      	adds	r3, #8
 8015560:	9303      	str	r3, [sp, #12]
 8015562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015564:	444b      	add	r3, r9
 8015566:	9309      	str	r3, [sp, #36]	; 0x24
 8015568:	e76d      	b.n	8015446 <_svfiprintf_r+0x4a>
 801556a:	fb05 3202 	mla	r2, r5, r2, r3
 801556e:	2001      	movs	r0, #1
 8015570:	460f      	mov	r7, r1
 8015572:	e7a6      	b.n	80154c2 <_svfiprintf_r+0xc6>
 8015574:	2300      	movs	r3, #0
 8015576:	3701      	adds	r7, #1
 8015578:	9305      	str	r3, [sp, #20]
 801557a:	4619      	mov	r1, r3
 801557c:	250a      	movs	r5, #10
 801557e:	4638      	mov	r0, r7
 8015580:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015584:	3a30      	subs	r2, #48	; 0x30
 8015586:	2a09      	cmp	r2, #9
 8015588:	d903      	bls.n	8015592 <_svfiprintf_r+0x196>
 801558a:	2b00      	cmp	r3, #0
 801558c:	d0c8      	beq.n	8015520 <_svfiprintf_r+0x124>
 801558e:	9105      	str	r1, [sp, #20]
 8015590:	e7c6      	b.n	8015520 <_svfiprintf_r+0x124>
 8015592:	fb05 2101 	mla	r1, r5, r1, r2
 8015596:	2301      	movs	r3, #1
 8015598:	4607      	mov	r7, r0
 801559a:	e7f0      	b.n	801557e <_svfiprintf_r+0x182>
 801559c:	ab03      	add	r3, sp, #12
 801559e:	9300      	str	r3, [sp, #0]
 80155a0:	4622      	mov	r2, r4
 80155a2:	4b11      	ldr	r3, [pc, #68]	; (80155e8 <_svfiprintf_r+0x1ec>)
 80155a4:	a904      	add	r1, sp, #16
 80155a6:	4640      	mov	r0, r8
 80155a8:	f3af 8000 	nop.w
 80155ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80155b0:	4681      	mov	r9, r0
 80155b2:	d1d6      	bne.n	8015562 <_svfiprintf_r+0x166>
 80155b4:	89a3      	ldrh	r3, [r4, #12]
 80155b6:	065b      	lsls	r3, r3, #25
 80155b8:	f53f af35 	bmi.w	8015426 <_svfiprintf_r+0x2a>
 80155bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155be:	b01d      	add	sp, #116	; 0x74
 80155c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155c4:	ab03      	add	r3, sp, #12
 80155c6:	9300      	str	r3, [sp, #0]
 80155c8:	4622      	mov	r2, r4
 80155ca:	4b07      	ldr	r3, [pc, #28]	; (80155e8 <_svfiprintf_r+0x1ec>)
 80155cc:	a904      	add	r1, sp, #16
 80155ce:	4640      	mov	r0, r8
 80155d0:	f000 f882 	bl	80156d8 <_printf_i>
 80155d4:	e7ea      	b.n	80155ac <_svfiprintf_r+0x1b0>
 80155d6:	bf00      	nop
 80155d8:	08015b20 	.word	0x08015b20
 80155dc:	08015b26 	.word	0x08015b26
 80155e0:	08015b2a 	.word	0x08015b2a
 80155e4:	00000000 	.word	0x00000000
 80155e8:	08015349 	.word	0x08015349

080155ec <_printf_common>:
 80155ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155f0:	4691      	mov	r9, r2
 80155f2:	461f      	mov	r7, r3
 80155f4:	688a      	ldr	r2, [r1, #8]
 80155f6:	690b      	ldr	r3, [r1, #16]
 80155f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80155fc:	4293      	cmp	r3, r2
 80155fe:	bfb8      	it	lt
 8015600:	4613      	movlt	r3, r2
 8015602:	f8c9 3000 	str.w	r3, [r9]
 8015606:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801560a:	4606      	mov	r6, r0
 801560c:	460c      	mov	r4, r1
 801560e:	b112      	cbz	r2, 8015616 <_printf_common+0x2a>
 8015610:	3301      	adds	r3, #1
 8015612:	f8c9 3000 	str.w	r3, [r9]
 8015616:	6823      	ldr	r3, [r4, #0]
 8015618:	0699      	lsls	r1, r3, #26
 801561a:	bf42      	ittt	mi
 801561c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015620:	3302      	addmi	r3, #2
 8015622:	f8c9 3000 	strmi.w	r3, [r9]
 8015626:	6825      	ldr	r5, [r4, #0]
 8015628:	f015 0506 	ands.w	r5, r5, #6
 801562c:	d107      	bne.n	801563e <_printf_common+0x52>
 801562e:	f104 0a19 	add.w	sl, r4, #25
 8015632:	68e3      	ldr	r3, [r4, #12]
 8015634:	f8d9 2000 	ldr.w	r2, [r9]
 8015638:	1a9b      	subs	r3, r3, r2
 801563a:	42ab      	cmp	r3, r5
 801563c:	dc28      	bgt.n	8015690 <_printf_common+0xa4>
 801563e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015642:	6822      	ldr	r2, [r4, #0]
 8015644:	3300      	adds	r3, #0
 8015646:	bf18      	it	ne
 8015648:	2301      	movne	r3, #1
 801564a:	0692      	lsls	r2, r2, #26
 801564c:	d42d      	bmi.n	80156aa <_printf_common+0xbe>
 801564e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015652:	4639      	mov	r1, r7
 8015654:	4630      	mov	r0, r6
 8015656:	47c0      	blx	r8
 8015658:	3001      	adds	r0, #1
 801565a:	d020      	beq.n	801569e <_printf_common+0xb2>
 801565c:	6823      	ldr	r3, [r4, #0]
 801565e:	68e5      	ldr	r5, [r4, #12]
 8015660:	f8d9 2000 	ldr.w	r2, [r9]
 8015664:	f003 0306 	and.w	r3, r3, #6
 8015668:	2b04      	cmp	r3, #4
 801566a:	bf08      	it	eq
 801566c:	1aad      	subeq	r5, r5, r2
 801566e:	68a3      	ldr	r3, [r4, #8]
 8015670:	6922      	ldr	r2, [r4, #16]
 8015672:	bf0c      	ite	eq
 8015674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015678:	2500      	movne	r5, #0
 801567a:	4293      	cmp	r3, r2
 801567c:	bfc4      	itt	gt
 801567e:	1a9b      	subgt	r3, r3, r2
 8015680:	18ed      	addgt	r5, r5, r3
 8015682:	f04f 0900 	mov.w	r9, #0
 8015686:	341a      	adds	r4, #26
 8015688:	454d      	cmp	r5, r9
 801568a:	d11a      	bne.n	80156c2 <_printf_common+0xd6>
 801568c:	2000      	movs	r0, #0
 801568e:	e008      	b.n	80156a2 <_printf_common+0xb6>
 8015690:	2301      	movs	r3, #1
 8015692:	4652      	mov	r2, sl
 8015694:	4639      	mov	r1, r7
 8015696:	4630      	mov	r0, r6
 8015698:	47c0      	blx	r8
 801569a:	3001      	adds	r0, #1
 801569c:	d103      	bne.n	80156a6 <_printf_common+0xba>
 801569e:	f04f 30ff 	mov.w	r0, #4294967295
 80156a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156a6:	3501      	adds	r5, #1
 80156a8:	e7c3      	b.n	8015632 <_printf_common+0x46>
 80156aa:	18e1      	adds	r1, r4, r3
 80156ac:	1c5a      	adds	r2, r3, #1
 80156ae:	2030      	movs	r0, #48	; 0x30
 80156b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80156b4:	4422      	add	r2, r4
 80156b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80156ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80156be:	3302      	adds	r3, #2
 80156c0:	e7c5      	b.n	801564e <_printf_common+0x62>
 80156c2:	2301      	movs	r3, #1
 80156c4:	4622      	mov	r2, r4
 80156c6:	4639      	mov	r1, r7
 80156c8:	4630      	mov	r0, r6
 80156ca:	47c0      	blx	r8
 80156cc:	3001      	adds	r0, #1
 80156ce:	d0e6      	beq.n	801569e <_printf_common+0xb2>
 80156d0:	f109 0901 	add.w	r9, r9, #1
 80156d4:	e7d8      	b.n	8015688 <_printf_common+0x9c>
	...

080156d8 <_printf_i>:
 80156d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80156e0:	460c      	mov	r4, r1
 80156e2:	7e09      	ldrb	r1, [r1, #24]
 80156e4:	b085      	sub	sp, #20
 80156e6:	296e      	cmp	r1, #110	; 0x6e
 80156e8:	4617      	mov	r7, r2
 80156ea:	4606      	mov	r6, r0
 80156ec:	4698      	mov	r8, r3
 80156ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80156f0:	f000 80b3 	beq.w	801585a <_printf_i+0x182>
 80156f4:	d822      	bhi.n	801573c <_printf_i+0x64>
 80156f6:	2963      	cmp	r1, #99	; 0x63
 80156f8:	d036      	beq.n	8015768 <_printf_i+0x90>
 80156fa:	d80a      	bhi.n	8015712 <_printf_i+0x3a>
 80156fc:	2900      	cmp	r1, #0
 80156fe:	f000 80b9 	beq.w	8015874 <_printf_i+0x19c>
 8015702:	2958      	cmp	r1, #88	; 0x58
 8015704:	f000 8083 	beq.w	801580e <_printf_i+0x136>
 8015708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801570c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015710:	e032      	b.n	8015778 <_printf_i+0xa0>
 8015712:	2964      	cmp	r1, #100	; 0x64
 8015714:	d001      	beq.n	801571a <_printf_i+0x42>
 8015716:	2969      	cmp	r1, #105	; 0x69
 8015718:	d1f6      	bne.n	8015708 <_printf_i+0x30>
 801571a:	6820      	ldr	r0, [r4, #0]
 801571c:	6813      	ldr	r3, [r2, #0]
 801571e:	0605      	lsls	r5, r0, #24
 8015720:	f103 0104 	add.w	r1, r3, #4
 8015724:	d52a      	bpl.n	801577c <_printf_i+0xa4>
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	6011      	str	r1, [r2, #0]
 801572a:	2b00      	cmp	r3, #0
 801572c:	da03      	bge.n	8015736 <_printf_i+0x5e>
 801572e:	222d      	movs	r2, #45	; 0x2d
 8015730:	425b      	negs	r3, r3
 8015732:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015736:	486f      	ldr	r0, [pc, #444]	; (80158f4 <_printf_i+0x21c>)
 8015738:	220a      	movs	r2, #10
 801573a:	e039      	b.n	80157b0 <_printf_i+0xd8>
 801573c:	2973      	cmp	r1, #115	; 0x73
 801573e:	f000 809d 	beq.w	801587c <_printf_i+0x1a4>
 8015742:	d808      	bhi.n	8015756 <_printf_i+0x7e>
 8015744:	296f      	cmp	r1, #111	; 0x6f
 8015746:	d020      	beq.n	801578a <_printf_i+0xb2>
 8015748:	2970      	cmp	r1, #112	; 0x70
 801574a:	d1dd      	bne.n	8015708 <_printf_i+0x30>
 801574c:	6823      	ldr	r3, [r4, #0]
 801574e:	f043 0320 	orr.w	r3, r3, #32
 8015752:	6023      	str	r3, [r4, #0]
 8015754:	e003      	b.n	801575e <_printf_i+0x86>
 8015756:	2975      	cmp	r1, #117	; 0x75
 8015758:	d017      	beq.n	801578a <_printf_i+0xb2>
 801575a:	2978      	cmp	r1, #120	; 0x78
 801575c:	d1d4      	bne.n	8015708 <_printf_i+0x30>
 801575e:	2378      	movs	r3, #120	; 0x78
 8015760:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015764:	4864      	ldr	r0, [pc, #400]	; (80158f8 <_printf_i+0x220>)
 8015766:	e055      	b.n	8015814 <_printf_i+0x13c>
 8015768:	6813      	ldr	r3, [r2, #0]
 801576a:	1d19      	adds	r1, r3, #4
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	6011      	str	r1, [r2, #0]
 8015770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015778:	2301      	movs	r3, #1
 801577a:	e08c      	b.n	8015896 <_printf_i+0x1be>
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	6011      	str	r1, [r2, #0]
 8015780:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015784:	bf18      	it	ne
 8015786:	b21b      	sxthne	r3, r3
 8015788:	e7cf      	b.n	801572a <_printf_i+0x52>
 801578a:	6813      	ldr	r3, [r2, #0]
 801578c:	6825      	ldr	r5, [r4, #0]
 801578e:	1d18      	adds	r0, r3, #4
 8015790:	6010      	str	r0, [r2, #0]
 8015792:	0628      	lsls	r0, r5, #24
 8015794:	d501      	bpl.n	801579a <_printf_i+0xc2>
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	e002      	b.n	80157a0 <_printf_i+0xc8>
 801579a:	0668      	lsls	r0, r5, #25
 801579c:	d5fb      	bpl.n	8015796 <_printf_i+0xbe>
 801579e:	881b      	ldrh	r3, [r3, #0]
 80157a0:	4854      	ldr	r0, [pc, #336]	; (80158f4 <_printf_i+0x21c>)
 80157a2:	296f      	cmp	r1, #111	; 0x6f
 80157a4:	bf14      	ite	ne
 80157a6:	220a      	movne	r2, #10
 80157a8:	2208      	moveq	r2, #8
 80157aa:	2100      	movs	r1, #0
 80157ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80157b0:	6865      	ldr	r5, [r4, #4]
 80157b2:	60a5      	str	r5, [r4, #8]
 80157b4:	2d00      	cmp	r5, #0
 80157b6:	f2c0 8095 	blt.w	80158e4 <_printf_i+0x20c>
 80157ba:	6821      	ldr	r1, [r4, #0]
 80157bc:	f021 0104 	bic.w	r1, r1, #4
 80157c0:	6021      	str	r1, [r4, #0]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d13d      	bne.n	8015842 <_printf_i+0x16a>
 80157c6:	2d00      	cmp	r5, #0
 80157c8:	f040 808e 	bne.w	80158e8 <_printf_i+0x210>
 80157cc:	4665      	mov	r5, ip
 80157ce:	2a08      	cmp	r2, #8
 80157d0:	d10b      	bne.n	80157ea <_printf_i+0x112>
 80157d2:	6823      	ldr	r3, [r4, #0]
 80157d4:	07db      	lsls	r3, r3, #31
 80157d6:	d508      	bpl.n	80157ea <_printf_i+0x112>
 80157d8:	6923      	ldr	r3, [r4, #16]
 80157da:	6862      	ldr	r2, [r4, #4]
 80157dc:	429a      	cmp	r2, r3
 80157de:	bfde      	ittt	le
 80157e0:	2330      	movle	r3, #48	; 0x30
 80157e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80157e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80157ea:	ebac 0305 	sub.w	r3, ip, r5
 80157ee:	6123      	str	r3, [r4, #16]
 80157f0:	f8cd 8000 	str.w	r8, [sp]
 80157f4:	463b      	mov	r3, r7
 80157f6:	aa03      	add	r2, sp, #12
 80157f8:	4621      	mov	r1, r4
 80157fa:	4630      	mov	r0, r6
 80157fc:	f7ff fef6 	bl	80155ec <_printf_common>
 8015800:	3001      	adds	r0, #1
 8015802:	d14d      	bne.n	80158a0 <_printf_i+0x1c8>
 8015804:	f04f 30ff 	mov.w	r0, #4294967295
 8015808:	b005      	add	sp, #20
 801580a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801580e:	4839      	ldr	r0, [pc, #228]	; (80158f4 <_printf_i+0x21c>)
 8015810:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015814:	6813      	ldr	r3, [r2, #0]
 8015816:	6821      	ldr	r1, [r4, #0]
 8015818:	1d1d      	adds	r5, r3, #4
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	6015      	str	r5, [r2, #0]
 801581e:	060a      	lsls	r2, r1, #24
 8015820:	d50b      	bpl.n	801583a <_printf_i+0x162>
 8015822:	07ca      	lsls	r2, r1, #31
 8015824:	bf44      	itt	mi
 8015826:	f041 0120 	orrmi.w	r1, r1, #32
 801582a:	6021      	strmi	r1, [r4, #0]
 801582c:	b91b      	cbnz	r3, 8015836 <_printf_i+0x15e>
 801582e:	6822      	ldr	r2, [r4, #0]
 8015830:	f022 0220 	bic.w	r2, r2, #32
 8015834:	6022      	str	r2, [r4, #0]
 8015836:	2210      	movs	r2, #16
 8015838:	e7b7      	b.n	80157aa <_printf_i+0xd2>
 801583a:	064d      	lsls	r5, r1, #25
 801583c:	bf48      	it	mi
 801583e:	b29b      	uxthmi	r3, r3
 8015840:	e7ef      	b.n	8015822 <_printf_i+0x14a>
 8015842:	4665      	mov	r5, ip
 8015844:	fbb3 f1f2 	udiv	r1, r3, r2
 8015848:	fb02 3311 	mls	r3, r2, r1, r3
 801584c:	5cc3      	ldrb	r3, [r0, r3]
 801584e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015852:	460b      	mov	r3, r1
 8015854:	2900      	cmp	r1, #0
 8015856:	d1f5      	bne.n	8015844 <_printf_i+0x16c>
 8015858:	e7b9      	b.n	80157ce <_printf_i+0xf6>
 801585a:	6813      	ldr	r3, [r2, #0]
 801585c:	6825      	ldr	r5, [r4, #0]
 801585e:	6961      	ldr	r1, [r4, #20]
 8015860:	1d18      	adds	r0, r3, #4
 8015862:	6010      	str	r0, [r2, #0]
 8015864:	0628      	lsls	r0, r5, #24
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	d501      	bpl.n	801586e <_printf_i+0x196>
 801586a:	6019      	str	r1, [r3, #0]
 801586c:	e002      	b.n	8015874 <_printf_i+0x19c>
 801586e:	066a      	lsls	r2, r5, #25
 8015870:	d5fb      	bpl.n	801586a <_printf_i+0x192>
 8015872:	8019      	strh	r1, [r3, #0]
 8015874:	2300      	movs	r3, #0
 8015876:	6123      	str	r3, [r4, #16]
 8015878:	4665      	mov	r5, ip
 801587a:	e7b9      	b.n	80157f0 <_printf_i+0x118>
 801587c:	6813      	ldr	r3, [r2, #0]
 801587e:	1d19      	adds	r1, r3, #4
 8015880:	6011      	str	r1, [r2, #0]
 8015882:	681d      	ldr	r5, [r3, #0]
 8015884:	6862      	ldr	r2, [r4, #4]
 8015886:	2100      	movs	r1, #0
 8015888:	4628      	mov	r0, r5
 801588a:	f7ea fd31 	bl	80002f0 <memchr>
 801588e:	b108      	cbz	r0, 8015894 <_printf_i+0x1bc>
 8015890:	1b40      	subs	r0, r0, r5
 8015892:	6060      	str	r0, [r4, #4]
 8015894:	6863      	ldr	r3, [r4, #4]
 8015896:	6123      	str	r3, [r4, #16]
 8015898:	2300      	movs	r3, #0
 801589a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801589e:	e7a7      	b.n	80157f0 <_printf_i+0x118>
 80158a0:	6923      	ldr	r3, [r4, #16]
 80158a2:	462a      	mov	r2, r5
 80158a4:	4639      	mov	r1, r7
 80158a6:	4630      	mov	r0, r6
 80158a8:	47c0      	blx	r8
 80158aa:	3001      	adds	r0, #1
 80158ac:	d0aa      	beq.n	8015804 <_printf_i+0x12c>
 80158ae:	6823      	ldr	r3, [r4, #0]
 80158b0:	079b      	lsls	r3, r3, #30
 80158b2:	d413      	bmi.n	80158dc <_printf_i+0x204>
 80158b4:	68e0      	ldr	r0, [r4, #12]
 80158b6:	9b03      	ldr	r3, [sp, #12]
 80158b8:	4298      	cmp	r0, r3
 80158ba:	bfb8      	it	lt
 80158bc:	4618      	movlt	r0, r3
 80158be:	e7a3      	b.n	8015808 <_printf_i+0x130>
 80158c0:	2301      	movs	r3, #1
 80158c2:	464a      	mov	r2, r9
 80158c4:	4639      	mov	r1, r7
 80158c6:	4630      	mov	r0, r6
 80158c8:	47c0      	blx	r8
 80158ca:	3001      	adds	r0, #1
 80158cc:	d09a      	beq.n	8015804 <_printf_i+0x12c>
 80158ce:	3501      	adds	r5, #1
 80158d0:	68e3      	ldr	r3, [r4, #12]
 80158d2:	9a03      	ldr	r2, [sp, #12]
 80158d4:	1a9b      	subs	r3, r3, r2
 80158d6:	42ab      	cmp	r3, r5
 80158d8:	dcf2      	bgt.n	80158c0 <_printf_i+0x1e8>
 80158da:	e7eb      	b.n	80158b4 <_printf_i+0x1dc>
 80158dc:	2500      	movs	r5, #0
 80158de:	f104 0919 	add.w	r9, r4, #25
 80158e2:	e7f5      	b.n	80158d0 <_printf_i+0x1f8>
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d1ac      	bne.n	8015842 <_printf_i+0x16a>
 80158e8:	7803      	ldrb	r3, [r0, #0]
 80158ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80158ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80158f2:	e76c      	b.n	80157ce <_printf_i+0xf6>
 80158f4:	08015b31 	.word	0x08015b31
 80158f8:	08015b42 	.word	0x08015b42

080158fc <memmove>:
 80158fc:	4288      	cmp	r0, r1
 80158fe:	b510      	push	{r4, lr}
 8015900:	eb01 0302 	add.w	r3, r1, r2
 8015904:	d807      	bhi.n	8015916 <memmove+0x1a>
 8015906:	1e42      	subs	r2, r0, #1
 8015908:	4299      	cmp	r1, r3
 801590a:	d00a      	beq.n	8015922 <memmove+0x26>
 801590c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015910:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015914:	e7f8      	b.n	8015908 <memmove+0xc>
 8015916:	4283      	cmp	r3, r0
 8015918:	d9f5      	bls.n	8015906 <memmove+0xa>
 801591a:	1881      	adds	r1, r0, r2
 801591c:	1ad2      	subs	r2, r2, r3
 801591e:	42d3      	cmn	r3, r2
 8015920:	d100      	bne.n	8015924 <memmove+0x28>
 8015922:	bd10      	pop	{r4, pc}
 8015924:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015928:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801592c:	e7f7      	b.n	801591e <memmove+0x22>

0801592e <_realloc_r>:
 801592e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015930:	4607      	mov	r7, r0
 8015932:	4614      	mov	r4, r2
 8015934:	460e      	mov	r6, r1
 8015936:	b921      	cbnz	r1, 8015942 <_realloc_r+0x14>
 8015938:	4611      	mov	r1, r2
 801593a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801593e:	f7ff bc5d 	b.w	80151fc <_malloc_r>
 8015942:	b922      	cbnz	r2, 801594e <_realloc_r+0x20>
 8015944:	f7ff fc0c 	bl	8015160 <_free_r>
 8015948:	4625      	mov	r5, r4
 801594a:	4628      	mov	r0, r5
 801594c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801594e:	f000 f814 	bl	801597a <_malloc_usable_size_r>
 8015952:	42a0      	cmp	r0, r4
 8015954:	d20f      	bcs.n	8015976 <_realloc_r+0x48>
 8015956:	4621      	mov	r1, r4
 8015958:	4638      	mov	r0, r7
 801595a:	f7ff fc4f 	bl	80151fc <_malloc_r>
 801595e:	4605      	mov	r5, r0
 8015960:	2800      	cmp	r0, #0
 8015962:	d0f2      	beq.n	801594a <_realloc_r+0x1c>
 8015964:	4631      	mov	r1, r6
 8015966:	4622      	mov	r2, r4
 8015968:	f7ff fbe6 	bl	8015138 <memcpy>
 801596c:	4631      	mov	r1, r6
 801596e:	4638      	mov	r0, r7
 8015970:	f7ff fbf6 	bl	8015160 <_free_r>
 8015974:	e7e9      	b.n	801594a <_realloc_r+0x1c>
 8015976:	4635      	mov	r5, r6
 8015978:	e7e7      	b.n	801594a <_realloc_r+0x1c>

0801597a <_malloc_usable_size_r>:
 801597a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801597e:	1f18      	subs	r0, r3, #4
 8015980:	2b00      	cmp	r3, #0
 8015982:	bfbc      	itt	lt
 8015984:	580b      	ldrlt	r3, [r1, r0]
 8015986:	18c0      	addlt	r0, r0, r3
 8015988:	4770      	bx	lr
	...

0801598c <_init>:
 801598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801598e:	bf00      	nop
 8015990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015992:	bc08      	pop	{r3}
 8015994:	469e      	mov	lr, r3
 8015996:	4770      	bx	lr

08015998 <_fini>:
 8015998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801599a:	bf00      	nop
 801599c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801599e:	bc08      	pop	{r3}
 80159a0:	469e      	mov	lr, r3
 80159a2:	4770      	bx	lr
