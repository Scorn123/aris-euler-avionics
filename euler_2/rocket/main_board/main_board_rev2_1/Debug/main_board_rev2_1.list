
main_board_rev2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000176ac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08017950  08017950  00027950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018198  08018198  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08018198  08018198  00028198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080181a0  080181a0  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080181a0  080181a0  000281a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080181a4  080181a4  000281a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  24000000  080181a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e0bc  240001ec  08018394  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00001300  2401e2a8  08018394  0003e2a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052e33  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008739  00000000  00000000  0008304d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002bc0  00000000  00000000  0008b788  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002878  00000000  00000000  0008e348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ce05  00000000  00000000  00090bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002e563  00000000  00000000  0009d9c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00191ecc  00000000  00000000  000cbf28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0025ddf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be14  00000000  00000000  0025de70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017934 	.word	0x08017934

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	08017934 	.word	0x08017934

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 8000698:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 800069c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80006b8 <init_env+0x28>
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f80d 	bl	80006c0 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 80006a6:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f000 f82c 	bl	8000708 <update_env>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	47c5e680 	.word	0x47c5e680
 80006bc:	00000000 	.word	0x00000000

080006c0 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80006cc:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 80006d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000700 <calibrate_env+0x40>
 80006dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80006e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	edc3 7a01 	vstr	s15, [r3, #4]
	env->p_g = p_g; //
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	f3af 8000 	nop.w
 8000700:	66666666 	.word	0x66666666
 8000704:	40711266 	.word	0x40711266

08000708 <update_env>:

void update_env(env_t *env, float T) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8000714:	edd7 7a00 	vldr	s15, [r7]
 8000718:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800071c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000768 <update_env+0x60>
 8000720:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000724:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	edc3 7a02 	vstr	s15, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	edd3 7a02 	vldr	s15, [r3, #8]
 8000734:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000738:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000770 <update_env+0x68>
 800073c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000740:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000744:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	f016 ff68 	bl	8017620 <powf>
 8000750:	eef0 7a40 	vmov.f32	s15, s0
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	66666666 	.word	0x66666666
 800076c:	40711266 	.word	0x40711266
 8000770:	8c1557b7 	.word	0x8c1557b7
 8000774:	40791e2f 	.word	0x40791e2f

08000778 <reset_flight_phase_detection>:
    }
    
    
}

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2201      	movs	r2, #1
 800078a:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f04f 0200 	mov.w	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	721a      	strb	r2, [r3, #8]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <AcquireMutex>:
 *  Created on: Jun 19, 2020
 *      Author: Jonas
 */
#include "Util/mutex.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b084      	sub	sp, #16
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
	status = osMutexAcquire(custom_mutex->mutex, 10);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	210a      	movs	r1, #10
 80007b8:	4618      	mov	r0, r3
 80007ba:	f012 fb39 	bl	8012e30 <osMutexAcquire>
 80007be:	60f8      	str	r0, [r7, #12]
	if(status == osOK){
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d104      	bne.n	80007d0 <AcquireMutex+0x2a>
		custom_mutex->counter++;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	605a      	str	r2, [r3, #4]
	}

	return status;
 80007d0:	68fb      	ldr	r3, [r7, #12]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
	return osMutexRelease(custom_mutex->mutex);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f012 fb80 	bl	8012eec <osMutexRelease>
 80007ec:	4603      	mov	r3, r0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 80007f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fa:	b0bd      	sub	sp, #244	; 0xf4
 80007fc:	af0a      	add	r7, sp, #40	; 0x28
 80007fe:	61f8      	str	r0, [r7, #28]
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	460b      	mov	r3, r1
 8000804:	76fb      	strb	r3, [r7, #27]
 8000806:	4613      	mov	r3, r2
 8000808:	76bb      	strb	r3, [r7, #26]
	log_entry_t log_entry = { 0 };
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2296      	movs	r2, #150	; 0x96
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f016 fa9b 	bl	8016d4e <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8000818:	7efb      	ldrb	r3, [r7, #27]
 800081a:	7eba      	ldrb	r2, [r7, #26]
 800081c:	f107 0020 	add.w	r0, r7, #32
 8000820:	9202      	str	r2, [sp, #8]
 8000822:	9301      	str	r3, [sp, #4]
 8000824:	2301      	movs	r3, #1
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	4a7a      	ldr	r2, [pc, #488]	; (8000a14 <logSensor+0x21c>)
 800082c:	2196      	movs	r1, #150	; 0x96
 800082e:	f016 fb4f 	bl	8016ed0 <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8000832:	7ebb      	ldrb	r3, [r7, #26]
 8000834:	3b01      	subs	r3, #1
 8000836:	2b03      	cmp	r3, #3
 8000838:	f200 80c8 	bhi.w	80009cc <logSensor+0x1d4>
 800083c:	a201      	add	r2, pc, #4	; (adr r2, 8000844 <logSensor+0x4c>)
 800083e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000842:	bf00      	nop
 8000844:	08000855 	.word	0x08000855
 8000848:	0800088f 	.word	0x0800088f
 800084c:	08000901 	.word	0x08000901
 8000850:	08000985 	.word	0x08000985
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		snprintf(log_entry.str + strlen(log_entry.str),
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fd3e 	bl	80002e0 <strlen>
 8000864:	4602      	mov	r2, r0
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	1898      	adds	r0, r3, r2
 800086c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000870:	6819      	ldr	r1, [r3, #0]
 8000872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800087c:	6892      	ldr	r2, [r2, #8]
 800087e:	9201      	str	r2, [sp, #4]
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	460b      	mov	r3, r1
 8000884:	4a64      	ldr	r2, [pc, #400]	; (8000a18 <logSensor+0x220>)
 8000886:	2196      	movs	r1, #150	; 0x96
 8000888:	f016 fb22 	bl	8016ed0 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 800088c:	e0b4      	b.n	80009f8 <logSensor+0x200>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		snprintf(log_entry.str + strlen(log_entry.str),
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fd21 	bl	80002e0 <strlen>
 800089e:	4602      	mov	r2, r0
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%hd,%hd,%hd,%hd,%hd,%hd,%lu\n", imu_data_ptr->acc_x,
 80008a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80008aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 80008ae:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 80008b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80008b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 80008b8:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 80008ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80008be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 80008c2:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 80008c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80008c8:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 80008cc:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 80008ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80008d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 80008d6:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 80008d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80008dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 80008e0:	461e      	mov	r6, r3
 80008e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	9305      	str	r3, [sp, #20]
 80008ea:	9604      	str	r6, [sp, #16]
 80008ec:	9503      	str	r5, [sp, #12]
 80008ee:	9402      	str	r4, [sp, #8]
 80008f0:	9101      	str	r1, [sp, #4]
 80008f2:	9200      	str	r2, [sp, #0]
 80008f4:	4663      	mov	r3, ip
 80008f6:	4a49      	ldr	r2, [pc, #292]	; (8000a1c <logSensor+0x224>)
 80008f8:	2196      	movs	r1, #150	; 0x96
 80008fa:	f016 fae9 	bl	8016ed0 <sniprintf>
	}
		break;
 80008fe:	e07b      	b.n	80009f8 <logSensor+0x200>
	case GPS: {
		gps_data_t *gps_data = (gps_data_t*) sensor_data;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		snprintf(log_entry.str + strlen(log_entry.str),
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fce8 	bl	80002e0 <strlen>
 8000910:	4602      	mov	r2, r0
 8000912:	f107 0320 	add.w	r3, r7, #32
 8000916:	189d      	adds	r5, r3, r2
 8000918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800091c:	681e      	ldr	r6, [r3, #0]
 800091e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000928:	6892      	ldr	r2, [r2, #8]
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%d,%ld,%d,%ld,%d,%hd,%hd\n",
			gps_data->hour, gps_data->minute, gps_data->second, gps_data->lat_deg,
 800092a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800092e:	7b49      	ldrb	r1, [r1, #13]
		snprintf(log_entry.str + strlen(log_entry.str),
 8000930:	6139      	str	r1, [r7, #16]
 8000932:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000936:	6909      	ldr	r1, [r1, #16]
			gps_data->lat_decimal, gps_data->lon_deg, gps_data->lon_decimal, gps_data->satellite,
 8000938:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800093c:	7d00      	ldrb	r0, [r0, #20]
		snprintf(log_entry.str + strlen(log_entry.str),
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8000944:	6980      	ldr	r0, [r0, #24]
			gps_data->lat_decimal, gps_data->lon_deg, gps_data->lon_decimal, gps_data->satellite,
 8000946:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800094a:	7b24      	ldrb	r4, [r4, #12]
		snprintf(log_entry.str + strlen(log_entry.str),
 800094c:	60bc      	str	r4, [r7, #8]
			gps_data->altitude, gps_data->HDOP);
 800094e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8000952:	8c24      	ldrh	r4, [r4, #32]
		snprintf(log_entry.str + strlen(log_entry.str),
 8000954:	607c      	str	r4, [r7, #4]
			gps_data->altitude, gps_data->HDOP);
 8000956:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800095a:	8be4      	ldrh	r4, [r4, #30]
		snprintf(log_entry.str + strlen(log_entry.str),
 800095c:	9408      	str	r4, [sp, #32]
 800095e:	687c      	ldr	r4, [r7, #4]
 8000960:	9407      	str	r4, [sp, #28]
 8000962:	68bc      	ldr	r4, [r7, #8]
 8000964:	9406      	str	r4, [sp, #24]
 8000966:	9005      	str	r0, [sp, #20]
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	9004      	str	r0, [sp, #16]
 800096c:	9103      	str	r1, [sp, #12]
 800096e:	6939      	ldr	r1, [r7, #16]
 8000970:	9102      	str	r1, [sp, #8]
 8000972:	9201      	str	r2, [sp, #4]
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	4633      	mov	r3, r6
 8000978:	4a29      	ldr	r2, [pc, #164]	; (8000a20 <logSensor+0x228>)
 800097a:	2196      	movs	r1, #150	; 0x96
 800097c:	4628      	mov	r0, r5
 800097e:	f016 faa7 	bl	8016ed0 <sniprintf>
	}
		break;
 8000982:	e039      	b.n	80009f8 <logSensor+0x200>
	case BATTERY: {
		battery_data_t *battery_data = (battery_data_t*) sensor_data;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		snprintf(log_entry.str + strlen(log_entry.str),
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fca6 	bl	80002e0 <strlen>
 8000994:	4602      	mov	r2, r0
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%hd,%hd,%hd,%hd\n",
			battery_data->battery, battery_data->consumption,
 800099c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80009a0:	885b      	ldrh	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 80009a2:	461c      	mov	r4, r3
			battery_data->battery, battery_data->consumption,
 80009a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80009a8:	88db      	ldrh	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 80009aa:	461a      	mov	r2, r3
			battery_data->current, battery_data->supply);
 80009ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80009b0:	889b      	ldrh	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 80009b2:	4619      	mov	r1, r3
			battery_data->current, battery_data->supply);
 80009b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80009b8:	881b      	ldrh	r3, [r3, #0]
		snprintf(log_entry.str + strlen(log_entry.str),
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	9101      	str	r1, [sp, #4]
 80009be:	9200      	str	r2, [sp, #0]
 80009c0:	4623      	mov	r3, r4
 80009c2:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <logSensor+0x22c>)
 80009c4:	2196      	movs	r1, #150	; 0x96
 80009c6:	f016 fa83 	bl	8016ed0 <sniprintf>
	}
		break;
 80009ca:	e015      	b.n	80009f8 <logSensor+0x200>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 80009cc:	f107 0320 	add.w	r3, r7, #32
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fc85 	bl	80002e0 <strlen>
 80009d6:	4602      	mov	r2, r0
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4413      	add	r3, r2
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <logSensor+0x230>)
 80009e0:	461d      	mov	r5, r3
 80009e2:	4614      	mov	r4, r2
 80009e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e6:	6028      	str	r0, [r5, #0]
 80009e8:	6069      	str	r1, [r5, #4]
 80009ea:	60aa      	str	r2, [r5, #8]
 80009ec:	60eb      	str	r3, [r5, #12]
 80009ee:	6820      	ldr	r0, [r4, #0]
 80009f0:	6128      	str	r0, [r5, #16]
 80009f2:	7923      	ldrb	r3, [r4, #4]
 80009f4:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 80009f6:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <logSensor+0x234>)
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	f107 0120 	add.w	r1, r7, #32
 8000a00:	2300      	movs	r3, #0
 8000a02:	2200      	movs	r2, #0
 8000a04:	f012 fb48 	bl	8013098 <osMessageQueuePut>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	37cc      	adds	r7, #204	; 0xcc
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a12:	bf00      	nop
 8000a14:	08017950 	.word	0x08017950
 8000a18:	08017960 	.word	0x08017960
 8000a1c:	08017970 	.word	0x08017970
 8000a20:	08017990 	.word	0x08017990
 8000a24:	080179b8 	.word	0x080179b8
 8000a28:	080179cc 	.word	0x080179cc
 8000a2c:	2401827c 	.word	0x2401827c

08000a30 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8000a30:	b40f      	push	{r0, r1, r2, r3}
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <UsbPrint+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f012 f9f4 	bl	8012e30 <osMutexAcquire>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d119      	bne.n	8000a82 <UsbPrint+0x52>
		va_list argptr;
		va_start(argptr, format);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000a5c:	480e      	ldr	r0, [pc, #56]	; (8000a98 <UsbPrint+0x68>)
 8000a5e:	f016 fa97 	bl	8016f90 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <UsbPrint+0x68>)
 8000a64:	f7ff fc3c 	bl	80002e0 <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480a      	ldr	r0, [pc, #40]	; (8000a98 <UsbPrint+0x68>)
 8000a70:	f015 fce4 	bl	801643c <CDC_Transmit_FS>
 8000a74:	4603      	mov	r3, r0
 8000a76:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <UsbPrint+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f012 fa35 	bl	8012eec <osMutexRelease>
	}
#endif
	return ret;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a8e:	b004      	add	sp, #16
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	240095b8 	.word	0x240095b8
 8000a98:	240088d4 	.word	0x240088d4

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b0b5      	sub	sp, #212	; 0xd4
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa2:	f002 f8b9 	bl	8002c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa6:	f000 f98d 	bl	8000dc4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	init_env(&global_env);
 8000aaa:	4896      	ldr	r0, [pc, #600]	; (8000d04 <main+0x268>)
 8000aac:	f7ff fdf0 	bl	8000690 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8000ab0:	4895      	ldr	r0, [pc, #596]	; (8000d08 <main+0x26c>)
 8000ab2:	f7ff fe61 	bl	8000778 <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab6:	f000 fe8d 	bl	80017d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aba:	f000 fe0b 	bl	80016d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000abe:	f000 fa7b 	bl	8000fb8 <MX_ADC1_Init>
  MX_SDMMC1_SD_Init();
 8000ac2:	f000 fb23 	bl	800110c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000ac6:	f000 fb43 	bl	8001150 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000aca:	f000 fb91 	bl	80011f0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000ace:	f000 fbdf 	bl	8001290 <MX_SPI3_Init>
  MX_UART4_Init();
 8000ad2:	f000 fc83 	bl	80013dc <MX_UART4_Init>
  MX_UART7_Init();
 8000ad6:	f000 fccd 	bl	8001474 <MX_UART7_Init>
  MX_USART1_UART_Init();
 8000ada:	f000 fd17 	bl	800150c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ade:	f000 fd61 	bl	80015a4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ae2:	f000 fdab 	bl	800163c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000ae6:	f010 f869 	bl	8010bbc <MX_FATFS_Init>
  MX_SPI4_Init();
 8000aea:	f000 fc21 	bl	8001330 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  //MX_USB_DEVICE_Init();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aee:	f011 ff33 	bl	8012958 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	/* Sensor Board 1 Mutex */
	const osMutexAttr_t sb1_mutex_attr = { "sb1_mutex_only", // human readable mutex name
 8000af2:	4b86      	ldr	r3, [pc, #536]	; (8000d0c <main+0x270>)
 8000af4:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8000af8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000afa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 8000afe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f012 f8fa 	bl	8012cfc <osMutexNew>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	4b81      	ldr	r3, [pc, #516]	; (8000d10 <main+0x274>)
 8000b0c:	601a      	str	r2, [r3, #0]

	/* Sensor Board 2 Mutex */
	const osMutexAttr_t sb2_mutex_attr = { "sb2_mutex_only", // human readable mutex name
 8000b0e:	4b81      	ldr	r3, [pc, #516]	; (8000d14 <main+0x278>)
 8000b10:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8000b14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 8000b1a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f012 f8ec 	bl	8012cfc <osMutexNew>
 8000b24:	4602      	mov	r2, r0
 8000b26:	4b7c      	ldr	r3, [pc, #496]	; (8000d18 <main+0x27c>)
 8000b28:	601a      	str	r2, [r3, #0]

	/* Sensor Board 3 Mutex */
	const osMutexAttr_t sb3_mutex_attr = { "sb3_mutex_only", // human readable mutex name
 8000b2a:	4b7c      	ldr	r3, [pc, #496]	; (8000d1c <main+0x280>)
 8000b2c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000b30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 8000b36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f012 f8de 	bl	8012cfc <osMutexNew>
 8000b40:	4602      	mov	r2, r0
 8000b42:	4b77      	ldr	r3, [pc, #476]	; (8000d20 <main+0x284>)
 8000b44:	601a      	str	r2, [r3, #0]

	/* State Estimation Output Mutex */
	const osMutexAttr_t state_est_mutex_attr = { "state_est_mutex_only", // human readable mutex name
 8000b46:	4b77      	ldr	r3, [pc, #476]	; (8000d24 <main+0x288>)
 8000b48:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000b4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8000b52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b56:	4618      	mov	r0, r3
 8000b58:	f012 f8d0 	bl	8012cfc <osMutexNew>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	4b72      	ldr	r3, [pc, #456]	; (8000d28 <main+0x28c>)
 8000b60:	601a      	str	r2, [r3, #0]

	/* Controller Output Mutex */
	const osMutexAttr_t controller_mutex_attr = { "controller_mutex_only", // human readable mutex name
 8000b62:	4b72      	ldr	r3, [pc, #456]	; (8000d2c <main+0x290>)
 8000b64:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000b68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 8000b6e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000b72:	4618      	mov	r0, r3
 8000b74:	f012 f8c2 	bl	8012cfc <osMutexNew>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	4b6d      	ldr	r3, [pc, #436]	; (8000d30 <main+0x294>)
 8000b7c:	601a      	str	r2, [r3, #0]

	/* FSM Output Mutex */
	const osMutexAttr_t fsm_mutex_attr = { "fsm_mutex_only", // human readable mutex name
 8000b7e:	4b6d      	ldr	r3, [pc, #436]	; (8000d34 <main+0x298>)
 8000b80:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000b84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8000b8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f012 f8b4 	bl	8012cfc <osMutexNew>
 8000b94:	4602      	mov	r2, r0
 8000b96:	4b68      	ldr	r3, [pc, #416]	; (8000d38 <main+0x29c>)
 8000b98:	601a      	str	r2, [r3, #0]

	/* Environment Mutex */
	const osMutexAttr_t environment_mutex_attr = { "environment_mutex_only", // human readable mutex name
 8000b9a:	4b68      	ldr	r3, [pc, #416]	; (8000d3c <main+0x2a0>)
 8000b9c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8000ba6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000baa:	4618      	mov	r0, r3
 8000bac:	f012 f8a6 	bl	8012cfc <osMutexNew>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	4b63      	ldr	r3, [pc, #396]	; (8000d40 <main+0x2a4>)
 8000bb4:	601a      	str	r2, [r3, #0]

	/* USB Data Mutex */
	const osMutexAttr_t usb_data_mutex_attr = { "usb_data_mutex_only", // human readable mutex name
 8000bb6:	4b63      	ldr	r3, [pc, #396]	; (8000d44 <main+0x2a8>)
 8000bb8:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000bbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8000bc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f012 f898 	bl	8012cfc <osMutexNew>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	4b5e      	ldr	r3, [pc, #376]	; (8000d48 <main+0x2ac>)
 8000bd0:	601a      	str	r2, [r3, #0]

	/* Command Mutex */
	const osMutexAttr_t command_mutex_attr = { "command_mutex_only", // human readable mutex name
 8000bd2:	4b5e      	ldr	r3, [pc, #376]	; (8000d4c <main+0x2b0>)
 8000bd4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000bd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	command_mutex_only = osMutexNew(&command_mutex_attr);
 8000bde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000be2:	4618      	mov	r0, r3
 8000be4:	f012 f88a 	bl	8012cfc <osMutexNew>
 8000be8:	4602      	mov	r2, r0
 8000bea:	4b59      	ldr	r3, [pc, #356]	; (8000d50 <main+0x2b4>)
 8000bec:	601a      	str	r2, [r3, #0]

	/* GPS Mutex */
	const osMutexAttr_t gps_mutex_attr = { "gps_mutex_only", // human readable mutex name
 8000bee:	4b59      	ldr	r3, [pc, #356]	; (8000d54 <main+0x2b8>)
 8000bf0:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000bf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 8000bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f012 f87c 	bl	8012cfc <osMutexNew>
 8000c04:	4602      	mov	r2, r0
 8000c06:	4b54      	ldr	r3, [pc, #336]	; (8000d58 <main+0x2bc>)
 8000c08:	601a      	str	r2, [r3, #0]

	/* Battery Mutex */
	const osMutexAttr_t battery_mutex_attr = { "battery_mutex_only", // human readable mutex name
 8000c0a:	4b54      	ldr	r3, [pc, #336]	; (8000d5c <main+0x2c0>)
 8000c0c:	f107 0420 	add.w	r4, r7, #32
 8000c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 8000c16:	f107 0320 	add.w	r3, r7, #32
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f012 f86e 	bl	8012cfc <osMutexNew>
 8000c20:	4602      	mov	r2, r0
 8000c22:	4b4f      	ldr	r3, [pc, #316]	; (8000d60 <main+0x2c4>)
 8000c24:	601a      	str	r2, [r3, #0]

	/* Motor Mutex */
	const osMutexAttr_t motor_mutex_attr = { "motor_mutex_only", // human readable mutex name
 8000c26:	4b4f      	ldr	r3, [pc, #316]	; (8000d64 <main+0x2c8>)
 8000c28:	f107 0410 	add.w	r4, r7, #16
 8000c2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	4618      	mov	r0, r3
 8000c38:	f012 f860 	bl	8012cfc <osMutexNew>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <main+0x2cc>)
 8000c40:	601a      	str	r2, [r3, #0]

	/** Initialise Mutexes **/

	sb1_mutex.mutex = sb1_mutex_only;
 8000c42:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <main+0x274>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a49      	ldr	r2, [pc, #292]	; (8000d6c <main+0x2d0>)
 8000c48:	6013      	str	r3, [r2, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 8000c4a:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <main+0x27c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a48      	ldr	r2, [pc, #288]	; (8000d70 <main+0x2d4>)
 8000c50:	6013      	str	r3, [r2, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 8000c52:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <main+0x284>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a47      	ldr	r2, [pc, #284]	; (8000d74 <main+0x2d8>)
 8000c58:	6013      	str	r3, [r2, #0]
	env_mutex.mutex = environment_mutex_only;
 8000c5a:	4b39      	ldr	r3, [pc, #228]	; (8000d40 <main+0x2a4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a46      	ldr	r2, [pc, #280]	; (8000d78 <main+0x2dc>)
 8000c60:	6013      	str	r3, [r2, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 8000c62:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <main+0x29c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a45      	ldr	r2, [pc, #276]	; (8000d7c <main+0x2e0>)
 8000c68:	6013      	str	r3, [r2, #0]
	controller_mutex.mutex = controller_mutex_only;
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <main+0x294>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a44      	ldr	r2, [pc, #272]	; (8000d80 <main+0x2e4>)
 8000c70:	6013      	str	r3, [r2, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <main+0x28c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a43      	ldr	r2, [pc, #268]	; (8000d84 <main+0x2e8>)
 8000c78:	6013      	str	r3, [r2, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 8000c7a:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <main+0x2ac>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a42      	ldr	r2, [pc, #264]	; (8000d88 <main+0x2ec>)
 8000c80:	6013      	str	r3, [r2, #0]
	command_mutex.mutex = command_mutex_only;
 8000c82:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <main+0x2b4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a41      	ldr	r2, [pc, #260]	; (8000d8c <main+0x2f0>)
 8000c88:	6013      	str	r3, [r2, #0]
	gps_mutex.mutex = gps_mutex_only;
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <main+0x2bc>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a40      	ldr	r2, [pc, #256]	; (8000d90 <main+0x2f4>)
 8000c90:	6013      	str	r3, [r2, #0]
	battery_mutex.mutex = battery_mutex_only;
 8000c92:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <main+0x2c4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a3f      	ldr	r2, [pc, #252]	; (8000d94 <main+0x2f8>)
 8000c98:	6013      	str	r3, [r2, #0]
	motor_mutex.mutex = motor_mutex_only;
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <main+0x2cc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a3e      	ldr	r2, [pc, #248]	; (8000d98 <main+0x2fc>)
 8000ca0:	6013      	str	r3, [r2, #0]

	global_flight_phase_detection.flight_phase = IDLE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <main+0x26c>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <main+0x26c>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	705a      	strb	r2, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 8000cae:	4b3b      	ldr	r3, [pc, #236]	; (8000d9c <main+0x300>)
 8000cb0:	229b      	movs	r2, #155	; 0x9b
 8000cb2:	701a      	strb	r2, [r3, #0]

#ifdef DEBUG
	const osMutexAttr_t print_mutex_attr = { "print_mutex", // human readable mutex name
 8000cb4:	4b3a      	ldr	r3, [pc, #232]	; (8000da0 <main+0x304>)
 8000cb6:	463c      	mov	r4, r7
 8000cb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					  // attr_bits
			NULL,                                    // memory for control block
			0U                                        // size for control block
			};

	print_mutex = osMutexNew(&print_mutex_attr);
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f012 f81b 	bl	8012cfc <osMutexNew>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <main+0x308>)
 8000cca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2196      	movs	r1, #150	; 0x96
 8000cd0:	2080      	movs	r0, #128	; 0x80
 8000cd2:	f012 f95b 	bl	8012f8c <osMessageQueueNew>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	4b33      	ldr	r3, [pc, #204]	; (8000da8 <main+0x30c>)
 8000cda:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cdc:	4a33      	ldr	r2, [pc, #204]	; (8000dac <main+0x310>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4833      	ldr	r0, [pc, #204]	; (8000db0 <main+0x314>)
 8000ce2:	f011 fef7 	bl	8012ad4 <osThreadNew>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	4b32      	ldr	r3, [pc, #200]	; (8000db4 <main+0x318>)
 8000cea:	601a      	str	r2, [r3, #0]
//
//  /* creation of task_controller */
//  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
//
//  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8000cec:	4a32      	ldr	r2, [pc, #200]	; (8000db8 <main+0x31c>)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4832      	ldr	r0, [pc, #200]	; (8000dbc <main+0x320>)
 8000cf2:	f011 feef 	bl	8012ad4 <osThreadNew>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <main+0x324>)
 8000cfa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cfc:	f011 fe82 	bl	8012a04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000d00:	e7fe      	b.n	8000d00 <main+0x264>
 8000d02:	bf00      	nop
 8000d04:	2400025c 	.word	0x2400025c
 8000d08:	2400026c 	.word	0x2400026c
 8000d0c:	08017ac0 	.word	0x08017ac0
 8000d10:	24010064 	.word	0x24010064
 8000d14:	08017ae0 	.word	0x08017ae0
 8000d18:	2401a280 	.word	0x2401a280
 8000d1c:	08017b00 	.word	0x08017b00
 8000d20:	2400bb5c 	.word	0x2400bb5c
 8000d24:	08017b28 	.word	0x08017b28
 8000d28:	2400ff4c 	.word	0x2400ff4c
 8000d2c:	08017b50 	.word	0x08017b50
 8000d30:	2401c444 	.word	0x2401c444
 8000d34:	08017b70 	.word	0x08017b70
 8000d38:	24010060 	.word	0x24010060
 8000d3c:	08017b98 	.word	0x08017b98
 8000d40:	2400ff54 	.word	0x2400ff54
 8000d44:	08017bbc 	.word	0x08017bbc
 8000d48:	2400bafc 	.word	0x2400bafc
 8000d4c:	08017be0 	.word	0x08017be0
 8000d50:	2400bbd8 	.word	0x2400bbd8
 8000d54:	08017c00 	.word	0x08017c00
 8000d58:	2401406c 	.word	0x2401406c
 8000d5c:	08017c24 	.word	0x08017c24
 8000d60:	2400ff50 	.word	0x2400ff50
 8000d64:	08017c48 	.word	0x08017c48
 8000d68:	24012068 	.word	0x24012068
 8000d6c:	2400dde4 	.word	0x2400dde4
 8000d70:	2401c4c8 	.word	0x2401c4c8
 8000d74:	2400ff58 	.word	0x2400ff58
 8000d78:	2400bbe4 	.word	0x2400bbe4
 8000d7c:	240096b4 	.word	0x240096b4
 8000d80:	2400dc78 	.word	0x2400dc78
 8000d84:	24014070 	.word	0x24014070
 8000d88:	2400b9a0 	.word	0x2400b9a0
 8000d8c:	2400bbdc 	.word	0x2400bbdc
 8000d90:	24018100 	.word	0x24018100
 8000d94:	24009744 	.word	0x24009744
 8000d98:	24009850 	.word	0x24009850
 8000d9c:	2401409c 	.word	0x2401409c
 8000da0:	08017c64 	.word	0x08017c64
 8000da4:	240095b8 	.word	0x240095b8
 8000da8:	2401827c 	.word	0x2401827c
 8000dac:	08017e08 	.word	0x08017e08
 8000db0:	08001951 	.word	0x08001951
 8000db4:	24009638 	.word	0x24009638
 8000db8:	08017e2c 	.word	0x08017e2c
 8000dbc:	08002889 	.word	0x08002889
 8000dc0:	2400bbec 	.word	0x2400bbec

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0cc      	sub	sp, #304	; 0x130
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000dce:	224c      	movs	r2, #76	; 0x4c
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f015 ffbb 	bl	8016d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ddc:	2220      	movs	r2, #32
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f015 ffb4 	bl	8016d4e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4618      	mov	r0, r3
 8000dec:	23bc      	movs	r3, #188	; 0xbc
 8000dee:	461a      	mov	r2, r3
 8000df0:	2100      	movs	r1, #0
 8000df2:	f015 ffac 	bl	8016d4e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000df6:	2002      	movs	r0, #2
 8000df8:	f006 ff94 	bl	8007d24 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	4b69      	ldr	r3, [pc, #420]	; (8000fa8 <SystemClock_Config+0x1e4>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a68      	ldr	r2, [pc, #416]	; (8000fa8 <SystemClock_Config+0x1e4>)
 8000e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b66      	ldr	r3, [pc, #408]	; (8000fa8 <SystemClock_Config+0x1e4>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	4b64      	ldr	r3, [pc, #400]	; (8000fac <SystemClock_Config+0x1e8>)
 8000e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1e:	4a63      	ldr	r2, [pc, #396]	; (8000fac <SystemClock_Config+0x1e8>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e26:	4b61      	ldr	r3, [pc, #388]	; (8000fac <SystemClock_Config+0x1e8>)
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	f003 0201 	and.w	r2, r3, #1
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e36:	bf00      	nop
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <SystemClock_Config+0x1e4>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e44:	d1f8      	bne.n	8000e38 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000e46:	4b5a      	ldr	r3, [pc, #360]	; (8000fb0 <SystemClock_Config+0x1ec>)
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	f023 0303 	bic.w	r3, r3, #3
 8000e4e:	4a58      	ldr	r2, [pc, #352]	; (8000fb0 <SystemClock_Config+0x1ec>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e64:	2302      	movs	r3, #2
 8000e66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000e76:	2378      	movs	r3, #120	; 0x78
 8000e78:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000e82:	2314      	movs	r3, #20
 8000e84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f006 ff87 	bl	8007db8 <HAL_RCC_OscConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000eb0:	f000 fd70 	bl	8001994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb4:	233f      	movs	r3, #63	; 0x3f
 8000eb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ece:	2340      	movs	r3, #64	; 0x40
 8000ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ed4:	2340      	movs	r3, #64	; 0x40
 8000ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ee8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000eec:	2104      	movs	r1, #4
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f007 fb72 	bl	80085d8 <HAL_RCC_ClockConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000efa:	f000 fd4b 	bl	8001994 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	4a2c      	ldr	r2, [pc, #176]	; (8000fb4 <SystemClock_Config+0x1f0>)
 8000f04:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	2213      	movs	r2, #19
 8000f14:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	2202      	movs	r2, #2
 8000f24:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	22c0      	movs	r2, #192	; 0xc0
 8000f34:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	2200      	movs	r2, #0
 8000f54:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2200      	movs	r2, #0
 8000f64:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f007 feeb 	bl	8008d64 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x1d4>
  {
    Error_Handler();
 8000f94:	f000 fcfe 	bl	8001994 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000f98:	f006 fefe 	bl	8007d98 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000f9c:	bf00      	nop
 8000f9e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	58024800 	.word	0x58024800
 8000fac:	58000400 	.word	0x58000400
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	000d3003 	.word	0x000d3003

08000fb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	615a      	str	r2, [r3, #20]
 8000fda:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fdc:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8000fde:	4a46      	ldr	r2, [pc, #280]	; (80010f8 <MX_ADC1_Init+0x140>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8000fe4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff0:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff6:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ffc:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001002:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8001004:	2201      	movs	r2, #1
 8001006:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 4;
 8001008:	4b3a      	ldr	r3, [pc, #232]	; (80010f4 <MX_ADC1_Init+0x13c>)
 800100a:	2204      	movs	r2, #4
 800100c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800100e:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8001010:	2200      	movs	r2, #0
 8001012:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001014:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <MX_ADC1_Init+0x13c>)
 800101c:	2200      	movs	r2, #0
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001020:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8001022:	2200      	movs	r2, #0
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8001028:	2200      	movs	r2, #0
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <MX_ADC1_Init+0x13c>)
 800102e:	2200      	movs	r2, #0
 8001030:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800103a:	482e      	ldr	r0, [pc, #184]	; (80010f4 <MX_ADC1_Init+0x13c>)
 800103c:	f002 f802 	bl	8003044 <HAL_ADC_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001046:	f000 fca5 	bl	8001994 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4827      	ldr	r0, [pc, #156]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8001056:	f002 fdc7 	bl	8003be8 <HAL_ADCEx_MultiModeConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001060:	f000 fc98 	bl	8001994 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <MX_ADC1_Init+0x144>)
 8001066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001068:	2306      	movs	r3, #6
 800106a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800106c:	2306      	movs	r3, #6
 800106e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001070:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001074:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001076:	2304      	movs	r3, #4
 8001078:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	4619      	mov	r1, r3
 8001086:	481b      	ldr	r0, [pc, #108]	; (80010f4 <MX_ADC1_Init+0x13c>)
 8001088:	f002 f97c 	bl	8003384 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001092:	f000 fc7f 	bl	8001994 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_ADC1_Init+0x148>)
 8001098:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800109a:	230c      	movs	r3, #12
 800109c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4814      	ldr	r0, [pc, #80]	; (80010f4 <MX_ADC1_Init+0x13c>)
 80010a4:	f002 f96e 	bl	8003384 <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80010ae:	f000 fc71 	bl	8001994 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_ADC1_Init+0x14c>)
 80010b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010b6:	2312      	movs	r3, #18
 80010b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ba:	463b      	mov	r3, r7
 80010bc:	4619      	mov	r1, r3
 80010be:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_ADC1_Init+0x13c>)
 80010c0:	f002 f960 	bl	8003384 <HAL_ADC_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80010ca:	f000 fc63 	bl	8001994 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_ADC1_Init+0x150>)
 80010d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010d2:	2318      	movs	r3, #24
 80010d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_ADC1_Init+0x13c>)
 80010dc:	f002 f952 	bl	8003384 <HAL_ADC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80010e6:	f000 fc55 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2400dc88 	.word	0x2400dc88
 80010f8:	40022000 	.word	0x40022000
 80010fc:	21800100 	.word	0x21800100
 8001100:	25b00200 	.word	0x25b00200
 8001104:	2a000400 	.word	0x2a000400
 8001108:	2e300800 	.word	0x2e300800

0800110c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_SDMMC1_SD_Init+0x3c>)
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <MX_SDMMC1_SD_Init+0x40>)
 8001114:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_SDMMC1_SD_Init+0x3c>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_SDMMC1_SD_Init+0x3c>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_SDMMC1_SD_Init+0x3c>)
 8001124:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001128:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_SDMMC1_SD_Init+0x3c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <MX_SDMMC1_SD_Init+0x3c>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <MX_SDMMC1_SD_Init+0x3c>)
 8001138:	2201      	movs	r2, #1
 800113a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	2400ba7c 	.word	0x2400ba7c
 800114c:	52007000 	.word	0x52007000

08001150 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <MX_SPI1_Init+0x98>)
 8001156:	4a25      	ldr	r2, [pc, #148]	; (80011ec <MX_SPI1_Init+0x9c>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <MX_SPI1_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_SPI1_Init+0x98>)
 8001162:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001166:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_SPI1_Init+0x98>)
 800116a:	2207      	movs	r2, #7
 800116c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_SPI1_Init+0x98>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_SPI1_Init+0x98>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_SPI1_Init+0x98>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_SPI1_Init+0x98>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_SPI1_Init+0x98>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_SPI1_Init+0x98>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_SPI1_Init+0x98>)
 8001194:	2200      	movs	r2, #0
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_SPI1_Init+0x98>)
 800119a:	2200      	movs	r2, #0
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_SPI1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_SPI1_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_SPI1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <MX_SPI1_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_SPI1_Init+0x98>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_SPI1_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_SPI1_Init+0x98>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_SPI1_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_SPI1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_SPI1_Init+0x98>)
 80011d6:	f00b f8f5 	bl	800c3c4 <HAL_SPI_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_SPI1_Init+0x94>
  {
    Error_Handler();
 80011e0:	f000 fbd8 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	240181f4 	.word	0x240181f4
 80011ec:	40013000 	.word	0x40013000

080011f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <MX_SPI2_Init+0x98>)
 80011f6:	4a25      	ldr	r2, [pc, #148]	; (800128c <MX_SPI2_Init+0x9c>)
 80011f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_SPI2_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_SPI2_Init+0x98>)
 8001202:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001206:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_SPI2_Init+0x98>)
 800120a:	2207      	movs	r2, #7
 800120c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_SPI2_Init+0x98>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001214:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_SPI2_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_SPI2_Init+0x98>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_SPI2_Init+0x98>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_SPI2_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_SPI2_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_SPI2_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_SPI2_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_SPI2_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_SPI2_Init+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_SPI2_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <MX_SPI2_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_SPI2_Init+0x98>)
 8001258:	2200      	movs	r2, #0
 800125a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <MX_SPI2_Init+0x98>)
 800125e:	2200      	movs	r2, #0
 8001260:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_SPI2_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <MX_SPI2_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_SPI2_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_SPI2_Init+0x98>)
 8001276:	f00b f8a5 	bl	800c3c4 <HAL_SPI_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_SPI2_Init+0x94>
  {
    Error_Handler();
 8001280:	f000 fb88 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	240096bc 	.word	0x240096bc
 800128c:	40003800 	.word	0x40003800

08001290 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <MX_SPI3_Init+0x98>)
 8001296:	4a25      	ldr	r2, [pc, #148]	; (800132c <MX_SPI3_Init+0x9c>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <MX_SPI3_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_SPI3_Init+0x98>)
 80012a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_SPI3_Init+0x98>)
 80012aa:	2207      	movs	r2, #7
 80012ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_SPI3_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_SPI3_Init+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_SPI3_Init+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <MX_SPI3_Init+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_SPI3_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_SPI3_Init+0x98>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_SPI3_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_SPI3_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_SPI3_Init+0x98>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_SPI3_Init+0x98>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_SPI3_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <MX_SPI3_Init+0x98>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_SPI3_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <MX_SPI3_Init+0x98>)
 80012fe:	2200      	movs	r2, #0
 8001300:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_SPI3_Init+0x98>)
 8001304:	2200      	movs	r2, #0
 8001306:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <MX_SPI3_Init+0x98>)
 800130a:	2200      	movs	r2, #0
 800130c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_SPI3_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_SPI3_Init+0x98>)
 8001316:	f00b f855 	bl	800c3c4 <HAL_SPI_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_SPI3_Init+0x94>
  {
    Error_Handler();
 8001320:	f000 fb38 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2400dbf0 	.word	0x2400dbf0
 800132c:	40003c00 	.word	0x40003c00

08001330 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <MX_SPI4_Init+0xa4>)
 8001336:	4a28      	ldr	r2, [pc, #160]	; (80013d8 <MX_SPI4_Init+0xa8>)
 8001338:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <MX_SPI4_Init+0xa4>)
 800133c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001340:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <MX_SPI4_Init+0xa4>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_SPI4_Init+0xa4>)
 800134a:	2207      	movs	r2, #7
 800134c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <MX_SPI4_Init+0xa4>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_SPI4_Init+0xa4>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <MX_SPI4_Init+0xa4>)
 800135c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001360:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_SPI4_Init+0xa4>)
 8001364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001368:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_SPI4_Init+0xa4>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_SPI4_Init+0xa4>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_SPI4_Init+0xa4>)
 8001378:	2200      	movs	r2, #0
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_SPI4_Init+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_SPI4_Init+0xa4>)
 8001384:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001388:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <MX_SPI4_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_SPI4_Init+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_SPI4_Init+0xa4>)
 8001398:	2200      	movs	r2, #0
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <MX_SPI4_Init+0xa4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_SPI4_Init+0xa4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <MX_SPI4_Init+0xa4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_SPI4_Init+0xa4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <MX_SPI4_Init+0xa4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_SPI4_Init+0xa4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_SPI4_Init+0xa4>)
 80013c2:	f00a ffff 	bl	800c3c4 <HAL_SPI_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80013cc:	f000 fae2 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2400ff60 	.word	0x2400ff60
 80013d8:	40013400 	.word	0x40013400

080013dc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013e0:	4b22      	ldr	r3, [pc, #136]	; (800146c <MX_UART4_Init+0x90>)
 80013e2:	4a23      	ldr	r2, [pc, #140]	; (8001470 <MX_UART4_Init+0x94>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_UART4_Init+0x90>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_UART4_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_UART4_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_UART4_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_UART4_Init+0x90>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_UART4_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_UART4_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_UART4_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_UART4_Init+0x90>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <MX_UART4_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001424:	4811      	ldr	r0, [pc, #68]	; (800146c <MX_UART4_Init+0x90>)
 8001426:	f00c fa39 	bl	800d89c <HAL_UART_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001430:	f000 fab0 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001434:	2100      	movs	r1, #0
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_UART4_Init+0x90>)
 8001438:	f00d f9d3 	bl	800e7e2 <HAL_UARTEx_SetTxFifoThreshold>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001442:	f000 faa7 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001446:	2100      	movs	r1, #0
 8001448:	4808      	ldr	r0, [pc, #32]	; (800146c <MX_UART4_Init+0x90>)
 800144a:	f00d fa08 	bl	800e85e <HAL_UARTEx_SetRxFifoThreshold>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001454:	f000 fa9e 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <MX_UART4_Init+0x90>)
 800145a:	f00d f989 	bl	800e770 <HAL_UARTEx_DisableFifoMode>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001464:	f000 fa96 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	24018164 	.word	0x24018164
 8001470:	40004c00 	.word	0x40004c00

08001474 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <MX_UART7_Init+0x90>)
 800147a:	4a23      	ldr	r2, [pc, #140]	; (8001508 <MX_UART7_Init+0x94>)
 800147c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <MX_UART7_Init+0x90>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <MX_UART7_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_UART7_Init+0x90>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <MX_UART7_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_UART7_Init+0x90>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <MX_UART7_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_UART7_Init+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_UART7_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_UART7_Init+0x90>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_UART7_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80014bc:	4811      	ldr	r0, [pc, #68]	; (8001504 <MX_UART7_Init+0x90>)
 80014be:	f00c f9ed 	bl	800d89c <HAL_UART_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80014c8:	f000 fa64 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014cc:	2100      	movs	r1, #0
 80014ce:	480d      	ldr	r0, [pc, #52]	; (8001504 <MX_UART7_Init+0x90>)
 80014d0:	f00d f987 	bl	800e7e2 <HAL_UARTEx_SetTxFifoThreshold>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80014da:	f000 fa5b 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014de:	2100      	movs	r1, #0
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <MX_UART7_Init+0x90>)
 80014e2:	f00d f9bc 	bl	800e85e <HAL_UARTEx_SetRxFifoThreshold>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80014ec:	f000 fa52 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_UART7_Init+0x90>)
 80014f2:	f00d f93d 	bl	800e770 <HAL_UARTEx_DisableFifoMode>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80014fc:	f000 fa4a 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2400974c 	.word	0x2400974c
 8001508:	40007800 	.word	0x40007800

0800150c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <MX_USART1_UART_Init+0x90>)
 8001512:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <MX_USART1_UART_Init+0x94>)
 8001514:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <MX_USART1_UART_Init+0x90>)
 8001518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800151c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <MX_USART1_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_USART1_UART_Init+0x90>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_USART1_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_USART1_UART_Init+0x90>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <MX_USART1_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_USART1_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <MX_USART1_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_USART1_UART_Init+0x90>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <MX_USART1_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001554:	4811      	ldr	r0, [pc, #68]	; (800159c <MX_USART1_UART_Init+0x90>)
 8001556:	f00c f9a1 	bl	800d89c <HAL_UART_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001560:	f000 fa18 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001564:	2100      	movs	r1, #0
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_USART1_UART_Init+0x90>)
 8001568:	f00d f93b 	bl	800e7e2 <HAL_UARTEx_SetTxFifoThreshold>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001572:	f000 fa0f 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001576:	2100      	movs	r1, #0
 8001578:	4808      	ldr	r0, [pc, #32]	; (800159c <MX_USART1_UART_Init+0x90>)
 800157a:	f00d f970 	bl	800e85e <HAL_UARTEx_SetRxFifoThreshold>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001584:	f000 fa06 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <MX_USART1_UART_Init+0x90>)
 800158a:	f00d f8f1 	bl	800e770 <HAL_UARTEx_DisableFifoMode>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001594:	f000 f9fe 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2400fe48 	.word	0x2400fe48
 80015a0:	40011000 	.word	0x40011000

080015a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <MX_USART2_UART_Init+0x90>)
 80015aa:	4a23      	ldr	r2, [pc, #140]	; (8001638 <MX_USART2_UART_Init+0x94>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <MX_USART2_UART_Init+0x90>)
 80015b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_USART2_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_USART2_UART_Init+0x90>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <MX_USART2_UART_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_USART2_UART_Init+0x90>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <MX_USART2_UART_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_USART2_UART_Init+0x90>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_USART2_UART_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_USART2_UART_Init+0x90>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <MX_USART2_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <MX_USART2_UART_Init+0x90>)
 80015ee:	f00c f955 	bl	800d89c <HAL_UART_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015f8:	f000 f9cc 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015fc:	2100      	movs	r1, #0
 80015fe:	480d      	ldr	r0, [pc, #52]	; (8001634 <MX_USART2_UART_Init+0x90>)
 8001600:	f00d f8ef 	bl	800e7e2 <HAL_UARTEx_SetTxFifoThreshold>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800160a:	f000 f9c3 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160e:	2100      	movs	r1, #0
 8001610:	4808      	ldr	r0, [pc, #32]	; (8001634 <MX_USART2_UART_Init+0x90>)
 8001612:	f00d f924 	bl	800e85e <HAL_UARTEx_SetRxFifoThreshold>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800161c:	f000 f9ba 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_USART2_UART_Init+0x90>)
 8001622:	f00d f8a5 	bl	800e770 <HAL_UARTEx_DisableFifoMode>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800162c:	f000 f9b2 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	2401a2e0 	.word	0x2401a2e0
 8001638:	40004400 	.word	0x40004400

0800163c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <MX_USART3_UART_Init+0x90>)
 8001642:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <MX_USART3_UART_Init+0x94>)
 8001644:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <MX_USART3_UART_Init+0x90>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <MX_USART3_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <MX_USART3_UART_Init+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <MX_USART3_UART_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_USART3_UART_Init+0x90>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <MX_USART3_UART_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_USART3_UART_Init+0x90>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <MX_USART3_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_USART3_UART_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <MX_USART3_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001684:	4811      	ldr	r0, [pc, #68]	; (80016cc <MX_USART3_UART_Init+0x90>)
 8001686:	f00c f909 	bl	800d89c <HAL_UART_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001690:	f000 f980 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001694:	2100      	movs	r1, #0
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <MX_USART3_UART_Init+0x90>)
 8001698:	f00d f8a3 	bl	800e7e2 <HAL_UARTEx_SetTxFifoThreshold>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016a2:	f000 f977 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4808      	ldr	r0, [pc, #32]	; (80016cc <MX_USART3_UART_Init+0x90>)
 80016aa:	f00d f8d8 	bl	800e85e <HAL_UARTEx_SetRxFifoThreshold>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016b4:	f000 f96e 	bl	8001994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_USART3_UART_Init+0x90>)
 80016ba:	f00d f859 	bl	800e770 <HAL_UARTEx_DisableFifoMode>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016c4:	f000 f966 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	24009858 	.word	0x24009858
 80016d0:	40004800 	.word	0x40004800

080016d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <MX_DMA_Init+0xfc>)
 80016dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016e0:	4a3b      	ldr	r2, [pc, #236]	; (80017d0 <MX_DMA_Init+0xfc>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <MX_DMA_Init+0xfc>)
 80016ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016f8:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <MX_DMA_Init+0xfc>)
 80016fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016fe:	4a34      	ldr	r2, [pc, #208]	; (80017d0 <MX_DMA_Init+0xfc>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <MX_DMA_Init+0xfc>)
 800170a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2105      	movs	r1, #5
 800171a:	200b      	movs	r0, #11
 800171c:	f002 fbf6 	bl	8003f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001720:	200b      	movs	r0, #11
 8001722:	f002 fc0d 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2105      	movs	r1, #5
 800172a:	200c      	movs	r0, #12
 800172c:	f002 fbee 	bl	8003f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001730:	200c      	movs	r0, #12
 8001732:	f002 fc05 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2105      	movs	r1, #5
 800173a:	200d      	movs	r0, #13
 800173c:	f002 fbe6 	bl	8003f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001740:	200d      	movs	r0, #13
 8001742:	f002 fbfd 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2105      	movs	r1, #5
 800174a:	200e      	movs	r0, #14
 800174c:	f002 fbde 	bl	8003f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001750:	200e      	movs	r0, #14
 8001752:	f002 fbf5 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2105      	movs	r1, #5
 800175a:	200f      	movs	r0, #15
 800175c:	f002 fbd6 	bl	8003f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001760:	200f      	movs	r0, #15
 8001762:	f002 fbed 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2105      	movs	r1, #5
 800176a:	2010      	movs	r0, #16
 800176c:	f002 fbce 	bl	8003f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001770:	2010      	movs	r0, #16
 8001772:	f002 fbe5 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2105      	movs	r1, #5
 800177a:	2011      	movs	r0, #17
 800177c:	f002 fbc6 	bl	8003f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001780:	2011      	movs	r0, #17
 8001782:	f002 fbdd 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	202f      	movs	r0, #47	; 0x2f
 800178c:	f002 fbbe 	bl	8003f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001790:	202f      	movs	r0, #47	; 0x2f
 8001792:	f002 fbd5 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2105      	movs	r1, #5
 800179a:	2038      	movs	r0, #56	; 0x38
 800179c:	f002 fbb6 	bl	8003f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017a0:	2038      	movs	r0, #56	; 0x38
 80017a2:	f002 fbcd 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2105      	movs	r1, #5
 80017aa:	2039      	movs	r0, #57	; 0x39
 80017ac:	f002 fbae 	bl	8003f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80017b0:	2039      	movs	r0, #57	; 0x39
 80017b2:	f002 fbc5 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2105      	movs	r1, #5
 80017ba:	203c      	movs	r0, #60	; 0x3c
 80017bc:	f002 fba6 	bl	8003f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80017c0:	203c      	movs	r0, #60	; 0x3c
 80017c2:	f002 fbbd 	bl	8003f40 <HAL_NVIC_EnableIRQ>

}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	58024400 	.word	0x58024400

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ea:	4b54      	ldr	r3, [pc, #336]	; (800193c <MX_GPIO_Init+0x168>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f0:	4a52      	ldr	r2, [pc, #328]	; (800193c <MX_GPIO_Init+0x168>)
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017fa:	4b50      	ldr	r3, [pc, #320]	; (800193c <MX_GPIO_Init+0x168>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001808:	4b4c      	ldr	r3, [pc, #304]	; (800193c <MX_GPIO_Init+0x168>)
 800180a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180e:	4a4b      	ldr	r2, [pc, #300]	; (800193c <MX_GPIO_Init+0x168>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001818:	4b48      	ldr	r3, [pc, #288]	; (800193c <MX_GPIO_Init+0x168>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	4b45      	ldr	r3, [pc, #276]	; (800193c <MX_GPIO_Init+0x168>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182c:	4a43      	ldr	r2, [pc, #268]	; (800193c <MX_GPIO_Init+0x168>)
 800182e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <MX_GPIO_Init+0x168>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001844:	4b3d      	ldr	r3, [pc, #244]	; (800193c <MX_GPIO_Init+0x168>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184a:	4a3c      	ldr	r2, [pc, #240]	; (800193c <MX_GPIO_Init+0x168>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001854:	4b39      	ldr	r3, [pc, #228]	; (800193c <MX_GPIO_Init+0x168>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b36      	ldr	r3, [pc, #216]	; (800193c <MX_GPIO_Init+0x168>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001868:	4a34      	ldr	r2, [pc, #208]	; (800193c <MX_GPIO_Init+0x168>)
 800186a:	f043 0302 	orr.w	r3, r3, #2
 800186e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001872:	4b32      	ldr	r3, [pc, #200]	; (800193c <MX_GPIO_Init+0x168>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001880:	4b2e      	ldr	r3, [pc, #184]	; (800193c <MX_GPIO_Init+0x168>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001886:	4a2d      	ldr	r2, [pc, #180]	; (800193c <MX_GPIO_Init+0x168>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <MX_GPIO_Init+0x168>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2102      	movs	r1, #2
 80018a2:	4827      	ldr	r0, [pc, #156]	; (8001940 <MX_GPIO_Init+0x16c>)
 80018a4:	f005 f84a 	bl	800693c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CAMERA1_Pin|CAMERA2_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80018ae:	4825      	ldr	r0, [pc, #148]	; (8001944 <MX_GPIO_Init+0x170>)
 80018b0:	f005 f844 	bl	800693c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin
 80018b4:	2200      	movs	r2, #0
 80018b6:	f643 0103 	movw	r1, #14339	; 0x3803
 80018ba:	4823      	ldr	r0, [pc, #140]	; (8001948 <MX_GPIO_Init+0x174>)
 80018bc:	f005 f83e 	bl	800693c <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 80018c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	481d      	ldr	r0, [pc, #116]	; (800194c <MX_GPIO_Init+0x178>)
 80018d6:	f004 fe69 	bl	80065ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_HOLD_Pin */
  GPIO_InitStruct.Pin = PW_HOLD_Pin;
 80018da:	2302      	movs	r3, #2
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4813      	ldr	r0, [pc, #76]	; (8001940 <MX_GPIO_Init+0x16c>)
 80018f2:	f004 fe5b 	bl	80065ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CAMERA1_Pin CAMERA2_Pin */
  GPIO_InitStruct.Pin = CAMERA1_Pin|CAMERA2_Pin;
 80018f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	480d      	ldr	r0, [pc, #52]	; (8001944 <MX_GPIO_Init+0x170>)
 8001910:	f004 fe4c 	bl	80065ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin BUZZER_Pin LED1_Pin
                           LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin
 8001914:	f643 0303 	movw	r3, #14339	; 0x3803
 8001918:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	4806      	ldr	r0, [pc, #24]	; (8001948 <MX_GPIO_Init+0x174>)
 800192e:	f004 fe3d 	bl	80065ac <HAL_GPIO_Init>

}
 8001932:	bf00      	nop
 8001934:	3730      	adds	r7, #48	; 0x30
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	58024400 	.word	0x58024400
 8001940:	58020400 	.word	0x58020400
 8001944:	58021000 	.word	0x58021000
 8001948:	58020c00 	.word	0x58020c00
 800194c:	58020800 	.word	0x58020800

08001950 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001958:	f014 fcb0 	bl	80162bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		UsbPrint("Asdf");
 800195c:	4803      	ldr	r0, [pc, #12]	; (800196c <StartDefaultTask+0x1c>)
 800195e:	f7ff f867 	bl	8000a30 <UsbPrint>
		osDelay(1000);
 8001962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001966:	f011 f95b 	bl	8012c20 <osDelay>
		UsbPrint("Asdf");
 800196a:	e7f7      	b.n	800195c <StartDefaultTask+0xc>
 800196c:	08017c74 	.word	0x08017c74

08001970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001982:	f001 f985 	bl	8002c90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40010000 	.word	0x40010000

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_MspInit+0x30>)
 80019ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019b0:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <HAL_MspInit+0x30>)
 80019b2:	f043 0302 	orr.w	r3, r3, #2
 80019b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_MspInit+0x30>)
 80019bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	58024400 	.word	0x58024400

080019d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a3d      	ldr	r2, [pc, #244]	; (8001aec <HAL_ADC_MspInit+0x114>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d174      	bne.n	8001ae4 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_ADC_MspInit+0x118>)
 80019fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a00:	4a3b      	ldr	r2, [pc, #236]	; (8001af0 <HAL_ADC_MspInit+0x118>)
 8001a02:	f043 0320 	orr.w	r3, r3, #32
 8001a06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_ADC_MspInit+0x118>)
 8001a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a10:	f003 0320 	and.w	r3, r3, #32
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a18:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <HAL_ADC_MspInit+0x118>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	4a34      	ldr	r2, [pc, #208]	; (8001af0 <HAL_ADC_MspInit+0x118>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a28:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <HAL_ADC_MspInit+0x118>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <HAL_ADC_MspInit+0x118>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3c:	4a2c      	ldr	r2, [pc, #176]	; (8001af0 <HAL_ADC_MspInit+0x118>)
 8001a3e:	f043 0302 	orr.w	r3, r3, #2
 8001a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_ADC_MspInit+0x118>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_INP10
    PC1     ------> ADC1_INP11
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = VSENS3V3_Pin|VSENSBAT_Pin|CURRBAT1_Pin;
 8001a54:	2323      	movs	r3, #35	; 0x23
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4823      	ldr	r0, [pc, #140]	; (8001af4 <HAL_ADC_MspInit+0x11c>)
 8001a68:	f004 fda0 	bl	80065ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRBAT2_Pin;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a70:	2303      	movs	r3, #3
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	481e      	ldr	r0, [pc, #120]	; (8001af8 <HAL_ADC_MspInit+0x120>)
 8001a80:	f004 fd94 	bl	80065ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_ADC_MspInit+0x128>)
 8001a88:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001a8c:	2209      	movs	r2, #9
 8001a8e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001aa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aaa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ab2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ac8:	480c      	ldr	r0, [pc, #48]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001aca:	f002 fa47 	bl	8003f5c <HAL_DMA_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001ad4:	f7ff ff5e 	bl	8001994 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001adc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ade:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_ADC_MspInit+0x124>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40022000 	.word	0x40022000
 8001af0:	58024400 	.word	0x58024400
 8001af4:	58020800 	.word	0x58020800
 8001af8:	58020400 	.word	0x58020400
 8001afc:	2400ffe8 	.word	0x2400ffe8
 8001b00:	40020470 	.word	0x40020470

08001b04 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2e      	ldr	r2, [pc, #184]	; (8001bdc <HAL_SD_MspInit+0xd8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d155      	bne.n	8001bd2 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_SD_MspInit+0xdc>)
 8001b28:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b2c:	4a2c      	ldr	r2, [pc, #176]	; (8001be0 <HAL_SD_MspInit+0xdc>)
 8001b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b32:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_SD_MspInit+0xdc>)
 8001b38:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b44:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <HAL_SD_MspInit+0xdc>)
 8001b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4a:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <HAL_SD_MspInit+0xdc>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_SD_MspInit+0xdc>)
 8001b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_SD_MspInit+0xdc>)
 8001b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_SD_MspInit+0xdc>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_SD_MspInit+0xdc>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b80:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b84:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001b92:	230c      	movs	r3, #12
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4811      	ldr	r0, [pc, #68]	; (8001be4 <HAL_SD_MspInit+0xe0>)
 8001b9e:	f004 fd05 	bl	80065ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480a      	ldr	r0, [pc, #40]	; (8001be8 <HAL_SD_MspInit+0xe4>)
 8001bbe:	f004 fcf5 	bl	80065ac <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2105      	movs	r1, #5
 8001bc6:	2031      	movs	r0, #49	; 0x31
 8001bc8:	f002 f9a0 	bl	8003f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001bcc:	2031      	movs	r0, #49	; 0x31
 8001bce:	f002 f9b7 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	52007000 	.word	0x52007000
 8001be0:	58024400 	.word	0x58024400
 8001be4:	58020800 	.word	0x58020800
 8001be8:	58020c00 	.word	0x58020c00

08001bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b090      	sub	sp, #64	; 0x40
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a69      	ldr	r2, [pc, #420]	; (8001db0 <HAL_SPI_MspInit+0x1c4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d165      	bne.n	8001cda <HAL_SPI_MspInit+0xee>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c0e:	4b69      	ldr	r3, [pc, #420]	; (8001db4 <HAL_SPI_MspInit+0x1c8>)
 8001c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c14:	4a67      	ldr	r2, [pc, #412]	; (8001db4 <HAL_SPI_MspInit+0x1c8>)
 8001c16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c1e:	4b65      	ldr	r3, [pc, #404]	; (8001db4 <HAL_SPI_MspInit+0x1c8>)
 8001c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2c:	4b61      	ldr	r3, [pc, #388]	; (8001db4 <HAL_SPI_MspInit+0x1c8>)
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c32:	4a60      	ldr	r2, [pc, #384]	; (8001db4 <HAL_SPI_MspInit+0x1c8>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3c:	4b5d      	ldr	r3, [pc, #372]	; (8001db4 <HAL_SPI_MspInit+0x1c8>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8001c4a:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c5c:	2305      	movs	r3, #5
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c64:	4619      	mov	r1, r3
 8001c66:	4854      	ldr	r0, [pc, #336]	; (8001db8 <HAL_SPI_MspInit+0x1cc>)
 8001c68:	f004 fca0 	bl	80065ac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001c6c:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001c6e:	4a54      	ldr	r2, [pc, #336]	; (8001dc0 <HAL_SPI_MspInit+0x1d4>)
 8001c70:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001c72:	4b52      	ldr	r3, [pc, #328]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001c74:	2225      	movs	r2, #37	; 0x25
 8001c76:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c78:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7e:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c84:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c8a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c92:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001c98:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca6:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001cac:	4843      	ldr	r0, [pc, #268]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001cae:	f002 f955 	bl	8003f5c <HAL_DMA_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8001cb8:	f7ff fe6c 	bl	8001994 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3f      	ldr	r2, [pc, #252]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001cc0:	67da      	str	r2, [r3, #124]	; 0x7c
 8001cc2:	4a3e      	ldr	r2, [pc, #248]	; (8001dbc <HAL_SPI_MspInit+0x1d0>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2105      	movs	r1, #5
 8001ccc:	2023      	movs	r0, #35	; 0x23
 8001cce:	f002 f91d 	bl	8003f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001cd2:	2023      	movs	r0, #35	; 0x23
 8001cd4:	f002 f934 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001cd8:	e1ac      	b.n	8002034 <HAL_SPI_MspInit+0x448>
  else if(hspi->Instance==SPI2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a39      	ldr	r2, [pc, #228]	; (8001dc4 <HAL_SPI_MspInit+0x1d8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d177      	bne.n	8001dd4 <HAL_SPI_MspInit+0x1e8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ce4:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <HAL_SPI_MspInit+0x1c8>)
 8001ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cea:	4a32      	ldr	r2, [pc, #200]	; (8001db4 <HAL_SPI_MspInit+0x1c8>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <HAL_SPI_MspInit+0x1c8>)
 8001cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfe:	623b      	str	r3, [r7, #32]
 8001d00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <HAL_SPI_MspInit+0x1c8>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d08:	4a2a      	ldr	r2, [pc, #168]	; (8001db4 <HAL_SPI_MspInit+0x1c8>)
 8001d0a:	f043 0302 	orr.w	r3, r3, #2
 8001d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d12:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <HAL_SPI_MspInit+0x1c8>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001d20:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d32:	2305      	movs	r3, #5
 8001d34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4822      	ldr	r0, [pc, #136]	; (8001dc8 <HAL_SPI_MspInit+0x1dc>)
 8001d3e:	f004 fc35 	bl	80065ac <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d44:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <HAL_SPI_MspInit+0x1e4>)
 8001d46:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d4a:	2227      	movs	r2, #39	; 0x27
 8001d4c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d60:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d74:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001d82:	4812      	ldr	r0, [pc, #72]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d84:	f002 f8ea 	bl	8003f5c <HAL_DMA_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_SPI_MspInit+0x1a6>
      Error_Handler();
 8001d8e:	f7ff fe01 	bl	8001994 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a0d      	ldr	r2, [pc, #52]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d96:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <HAL_SPI_MspInit+0x1e0>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2105      	movs	r1, #5
 8001da2:	2024      	movs	r0, #36	; 0x24
 8001da4:	f002 f8b2 	bl	8003f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001da8:	2024      	movs	r0, #36	; 0x24
 8001daa:	f002 f8c9 	bl	8003f40 <HAL_NVIC_EnableIRQ>
}
 8001dae:	e141      	b.n	8002034 <HAL_SPI_MspInit+0x448>
 8001db0:	40013000 	.word	0x40013000
 8001db4:	58024400 	.word	0x58024400
 8001db8:	58020000 	.word	0x58020000
 8001dbc:	2401a36c 	.word	0x2401a36c
 8001dc0:	40020010 	.word	0x40020010
 8001dc4:	40003800 	.word	0x40003800
 8001dc8:	58020400 	.word	0x58020400
 8001dcc:	2400ba04 	.word	0x2400ba04
 8001dd0:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a98      	ldr	r2, [pc, #608]	; (800203c <HAL_SPI_MspInit+0x450>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	f040 8094 	bne.w	8001f08 <HAL_SPI_MspInit+0x31c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001de0:	4b97      	ldr	r3, [pc, #604]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001de6:	4a96      	ldr	r2, [pc, #600]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001df0:	4b93      	ldr	r3, [pc, #588]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001df6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	4b90      	ldr	r3, [pc, #576]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e04:	4a8e      	ldr	r2, [pc, #568]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0e:	4b8c      	ldr	r3, [pc, #560]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	4b88      	ldr	r3, [pc, #544]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e22:	4a87      	ldr	r2, [pc, #540]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2c:	4b84      	ldr	r3, [pc, #528]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e3a:	2310      	movs	r3, #16
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e46:	2301      	movs	r3, #1
 8001e48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e52:	4619      	mov	r1, r3
 8001e54:	487b      	ldr	r0, [pc, #492]	; (8002044 <HAL_SPI_MspInit+0x458>)
 8001e56:	f004 fba9 	bl	80065ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e66:	2301      	movs	r3, #1
 8001e68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e72:	4619      	mov	r1, r3
 8001e74:	4874      	ldr	r0, [pc, #464]	; (8002048 <HAL_SPI_MspInit+0x45c>)
 8001e76:	f004 fb99 	bl	80065ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e7a:	2308      	movs	r3, #8
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e86:	2301      	movs	r3, #1
 8001e88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e92:	4619      	mov	r1, r3
 8001e94:	486c      	ldr	r0, [pc, #432]	; (8002048 <HAL_SPI_MspInit+0x45c>)
 8001e96:	f004 fb89 	bl	80065ac <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream2;
 8001e9a:	4b6c      	ldr	r3, [pc, #432]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001e9c:	4a6c      	ldr	r2, [pc, #432]	; (8002050 <HAL_SPI_MspInit+0x464>)
 8001e9e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001ea2:	223d      	movs	r2, #61	; 0x3d
 8001ea4:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea6:	4b69      	ldr	r3, [pc, #420]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eac:	4b67      	ldr	r3, [pc, #412]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb2:	4b66      	ldr	r3, [pc, #408]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb8:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eba:	4b64      	ldr	r3, [pc, #400]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ec0:	4b62      	ldr	r3, [pc, #392]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001ec6:	4b61      	ldr	r3, [pc, #388]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ecc:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed4:	4b5d      	ldr	r3, [pc, #372]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001eda:	485c      	ldr	r0, [pc, #368]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001edc:	f002 f83e 	bl	8003f5c <HAL_DMA_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_SPI_MspInit+0x2fe>
      Error_Handler();
 8001ee6:	f7ff fd55 	bl	8001994 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a57      	ldr	r2, [pc, #348]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001eee:	67da      	str	r2, [r3, #124]	; 0x7c
 8001ef0:	4a56      	ldr	r2, [pc, #344]	; (800204c <HAL_SPI_MspInit+0x460>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2105      	movs	r1, #5
 8001efa:	2033      	movs	r0, #51	; 0x33
 8001efc:	f002 f806 	bl	8003f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001f00:	2033      	movs	r0, #51	; 0x33
 8001f02:	f002 f81d 	bl	8003f40 <HAL_NVIC_EnableIRQ>
}
 8001f06:	e095      	b.n	8002034 <HAL_SPI_MspInit+0x448>
  else if(hspi->Instance==SPI4)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a51      	ldr	r2, [pc, #324]	; (8002054 <HAL_SPI_MspInit+0x468>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	f040 8090 	bne.w	8002034 <HAL_SPI_MspInit+0x448>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f14:	4b4a      	ldr	r3, [pc, #296]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f1a:	4a49      	ldr	r2, [pc, #292]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f24:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f32:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f38:	4a41      	ldr	r2, [pc, #260]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001f3a:	f043 0310 	orr.w	r3, r3, #16
 8001f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f42:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_SPI_MspInit+0x454>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001f50:	2374      	movs	r3, #116	; 0x74
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f60:	2305      	movs	r3, #5
 8001f62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f68:	4619      	mov	r1, r3
 8001f6a:	483b      	ldr	r0, [pc, #236]	; (8002058 <HAL_SPI_MspInit+0x46c>)
 8001f6c:	f004 fb1e 	bl	80065ac <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001f70:	4b3a      	ldr	r3, [pc, #232]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001f72:	4a3b      	ldr	r2, [pc, #236]	; (8002060 <HAL_SPI_MspInit+0x474>)
 8001f74:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001f76:	4b39      	ldr	r3, [pc, #228]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001f78:	2253      	movs	r2, #83	; 0x53
 8001f7a:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f7c:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f82:	4b36      	ldr	r3, [pc, #216]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f88:	4b34      	ldr	r3, [pc, #208]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f8e:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f90:	4b32      	ldr	r3, [pc, #200]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001fae:	482b      	ldr	r0, [pc, #172]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001fb0:	f001 ffd4 	bl	8003f5c <HAL_DMA_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_SPI_MspInit+0x3d2>
      Error_Handler();
 8001fba:	f7ff fceb 	bl	8001994 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a26      	ldr	r2, [pc, #152]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001fc2:	67da      	str	r2, [r3, #124]	; 0x7c
 8001fc4:	4a25      	ldr	r2, [pc, #148]	; (800205c <HAL_SPI_MspInit+0x470>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_SPI_MspInit+0x478>)
 8001fcc:	4a26      	ldr	r2, [pc, #152]	; (8002068 <HAL_SPI_MspInit+0x47c>)
 8001fce:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_SPI_MspInit+0x478>)
 8001fd2:	2254      	movs	r2, #84	; 0x54
 8001fd4:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fd6:	4b23      	ldr	r3, [pc, #140]	; (8002064 <HAL_SPI_MspInit+0x478>)
 8001fd8:	2240      	movs	r2, #64	; 0x40
 8001fda:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_SPI_MspInit+0x478>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_SPI_MspInit+0x478>)
 8001fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe8:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <HAL_SPI_MspInit+0x478>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <HAL_SPI_MspInit+0x478>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_SPI_MspInit+0x478>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_SPI_MspInit+0x478>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <HAL_SPI_MspInit+0x478>)
 8002004:	2200      	movs	r2, #0
 8002006:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002008:	4816      	ldr	r0, [pc, #88]	; (8002064 <HAL_SPI_MspInit+0x478>)
 800200a:	f001 ffa7 	bl	8003f5c <HAL_DMA_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_SPI_MspInit+0x42c>
      Error_Handler();
 8002014:	f7ff fcbe 	bl	8001994 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <HAL_SPI_MspInit+0x478>)
 800201c:	679a      	str	r2, [r3, #120]	; 0x78
 800201e:	4a11      	ldr	r2, [pc, #68]	; (8002064 <HAL_SPI_MspInit+0x478>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	2054      	movs	r0, #84	; 0x54
 800202a:	f001 ff6f 	bl	8003f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800202e:	2054      	movs	r0, #84	; 0x54
 8002030:	f001 ff86 	bl	8003f40 <HAL_NVIC_EnableIRQ>
}
 8002034:	bf00      	nop
 8002036:	3740      	adds	r7, #64	; 0x40
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40003c00 	.word	0x40003c00
 8002040:	58024400 	.word	0x58024400
 8002044:	58020000 	.word	0x58020000
 8002048:	58020400 	.word	0x58020400
 800204c:	2401c448 	.word	0x2401c448
 8002050:	40020040 	.word	0x40020040
 8002054:	40013400 	.word	0x40013400
 8002058:	58021000 	.word	0x58021000
 800205c:	2400bb60 	.word	0x2400bb60
 8002060:	40020410 	.word	0x40020410
 8002064:	2400fed4 	.word	0x2400fed4
 8002068:	40020428 	.word	0x40020428

0800206c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b092      	sub	sp, #72	; 0x48
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a91      	ldr	r2, [pc, #580]	; (80022d0 <HAL_UART_MspInit+0x264>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d15b      	bne.n	8002146 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800208e:	4b91      	ldr	r3, [pc, #580]	; (80022d4 <HAL_UART_MspInit+0x268>)
 8002090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002094:	4a8f      	ldr	r2, [pc, #572]	; (80022d4 <HAL_UART_MspInit+0x268>)
 8002096:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800209a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800209e:	4b8d      	ldr	r3, [pc, #564]	; (80022d4 <HAL_UART_MspInit+0x268>)
 80020a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
 80020aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	4b89      	ldr	r3, [pc, #548]	; (80022d4 <HAL_UART_MspInit+0x268>)
 80020ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b2:	4a88      	ldr	r2, [pc, #544]	; (80022d4 <HAL_UART_MspInit+0x268>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020bc:	4b85      	ldr	r3, [pc, #532]	; (80022d4 <HAL_UART_MspInit+0x268>)
 80020be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020ca:	2303      	movs	r3, #3
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020da:	2308      	movs	r3, #8
 80020dc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020e2:	4619      	mov	r1, r3
 80020e4:	487c      	ldr	r0, [pc, #496]	; (80022d8 <HAL_UART_MspInit+0x26c>)
 80020e6:	f004 fa61 	bl	80065ac <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80020ea:	4b7c      	ldr	r3, [pc, #496]	; (80022dc <HAL_UART_MspInit+0x270>)
 80020ec:	4a7c      	ldr	r2, [pc, #496]	; (80022e0 <HAL_UART_MspInit+0x274>)
 80020ee:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80020f0:	4b7a      	ldr	r3, [pc, #488]	; (80022dc <HAL_UART_MspInit+0x270>)
 80020f2:	223f      	movs	r2, #63	; 0x3f
 80020f4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f6:	4b79      	ldr	r3, [pc, #484]	; (80022dc <HAL_UART_MspInit+0x270>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fc:	4b77      	ldr	r3, [pc, #476]	; (80022dc <HAL_UART_MspInit+0x270>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002102:	4b76      	ldr	r3, [pc, #472]	; (80022dc <HAL_UART_MspInit+0x270>)
 8002104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002108:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800210a:	4b74      	ldr	r3, [pc, #464]	; (80022dc <HAL_UART_MspInit+0x270>)
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002110:	4b72      	ldr	r3, [pc, #456]	; (80022dc <HAL_UART_MspInit+0x270>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002116:	4b71      	ldr	r3, [pc, #452]	; (80022dc <HAL_UART_MspInit+0x270>)
 8002118:	2200      	movs	r2, #0
 800211a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800211c:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_UART_MspInit+0x270>)
 800211e:	2200      	movs	r2, #0
 8002120:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002122:	4b6e      	ldr	r3, [pc, #440]	; (80022dc <HAL_UART_MspInit+0x270>)
 8002124:	2200      	movs	r2, #0
 8002126:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002128:	486c      	ldr	r0, [pc, #432]	; (80022dc <HAL_UART_MspInit+0x270>)
 800212a:	f001 ff17 	bl	8003f5c <HAL_DMA_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002134:	f7ff fc2e 	bl	8001994 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a68      	ldr	r2, [pc, #416]	; (80022dc <HAL_UART_MspInit+0x270>)
 800213c:	679a      	str	r2, [r3, #120]	; 0x78
 800213e:	4a67      	ldr	r2, [pc, #412]	; (80022dc <HAL_UART_MspInit+0x270>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002144:	e19e      	b.n	8002484 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==UART7)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a66      	ldr	r2, [pc, #408]	; (80022e4 <HAL_UART_MspInit+0x278>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d15c      	bne.n	800220a <HAL_UART_MspInit+0x19e>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002150:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <HAL_UART_MspInit+0x268>)
 8002152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002156:	4a5f      	ldr	r2, [pc, #380]	; (80022d4 <HAL_UART_MspInit+0x268>)
 8002158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800215c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002160:	4b5c      	ldr	r3, [pc, #368]	; (80022d4 <HAL_UART_MspInit+0x268>)
 8002162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002166:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800216e:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <HAL_UART_MspInit+0x268>)
 8002170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002174:	4a57      	ldr	r2, [pc, #348]	; (80022d4 <HAL_UART_MspInit+0x268>)
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217e:	4b55      	ldr	r3, [pc, #340]	; (80022d4 <HAL_UART_MspInit+0x268>)
 8002180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800218c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800219e:	2307      	movs	r3, #7
 80021a0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021a6:	4619      	mov	r1, r3
 80021a8:	484f      	ldr	r0, [pc, #316]	; (80022e8 <HAL_UART_MspInit+0x27c>)
 80021aa:	f004 f9ff 	bl	80065ac <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream4;
 80021ae:	4b4f      	ldr	r3, [pc, #316]	; (80022ec <HAL_UART_MspInit+0x280>)
 80021b0:	4a4f      	ldr	r2, [pc, #316]	; (80022f0 <HAL_UART_MspInit+0x284>)
 80021b2:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80021b4:	4b4d      	ldr	r3, [pc, #308]	; (80022ec <HAL_UART_MspInit+0x280>)
 80021b6:	224f      	movs	r2, #79	; 0x4f
 80021b8:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ba:	4b4c      	ldr	r3, [pc, #304]	; (80022ec <HAL_UART_MspInit+0x280>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c0:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_UART_MspInit+0x280>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021c6:	4b49      	ldr	r3, [pc, #292]	; (80022ec <HAL_UART_MspInit+0x280>)
 80021c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021cc:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <HAL_UART_MspInit+0x280>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021d4:	4b45      	ldr	r3, [pc, #276]	; (80022ec <HAL_UART_MspInit+0x280>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 80021da:	4b44      	ldr	r3, [pc, #272]	; (80022ec <HAL_UART_MspInit+0x280>)
 80021dc:	2200      	movs	r2, #0
 80021de:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021e0:	4b42      	ldr	r3, [pc, #264]	; (80022ec <HAL_UART_MspInit+0x280>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <HAL_UART_MspInit+0x280>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80021ec:	483f      	ldr	r0, [pc, #252]	; (80022ec <HAL_UART_MspInit+0x280>)
 80021ee:	f001 feb5 	bl	8003f5c <HAL_DMA_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_UART_MspInit+0x190>
      Error_Handler();
 80021f8:	f7ff fbcc 	bl	8001994 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a3b      	ldr	r2, [pc, #236]	; (80022ec <HAL_UART_MspInit+0x280>)
 8002200:	679a      	str	r2, [r3, #120]	; 0x78
 8002202:	4a3a      	ldr	r2, [pc, #232]	; (80022ec <HAL_UART_MspInit+0x280>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002208:	e13c      	b.n	8002484 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a39      	ldr	r2, [pc, #228]	; (80022f4 <HAL_UART_MspInit+0x288>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d175      	bne.n	8002300 <HAL_UART_MspInit+0x294>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002214:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <HAL_UART_MspInit+0x268>)
 8002216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800221a:	4a2e      	ldr	r2, [pc, #184]	; (80022d4 <HAL_UART_MspInit+0x268>)
 800221c:	f043 0310 	orr.w	r3, r3, #16
 8002220:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002224:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <HAL_UART_MspInit+0x268>)
 8002226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	623b      	str	r3, [r7, #32]
 8002230:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <HAL_UART_MspInit+0x268>)
 8002234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002238:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <HAL_UART_MspInit+0x268>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_UART_MspInit+0x268>)
 8002244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002250:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002262:	2307      	movs	r3, #7
 8002264:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800226a:	4619      	mov	r1, r3
 800226c:	481a      	ldr	r0, [pc, #104]	; (80022d8 <HAL_UART_MspInit+0x26c>)
 800226e:	f004 f99d 	bl	80065ac <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream5;
 8002272:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 8002274:	4a21      	ldr	r2, [pc, #132]	; (80022fc <HAL_UART_MspInit+0x290>)
 8002276:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 800227a:	2229      	movs	r2, #41	; 0x29
 800227c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002284:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 800228c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002290:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 8002294:	2200      	movs	r2, #0
 8002296:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800229e:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022b0:	4811      	ldr	r0, [pc, #68]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 80022b2:	f001 fe53 	bl	8003f5c <HAL_DMA_Init>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_UART_MspInit+0x254>
      Error_Handler();
 80022bc:	f7ff fb6a 	bl	8001994 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 80022c4:	679a      	str	r2, [r3, #120]	; 0x78
 80022c6:	4a0c      	ldr	r2, [pc, #48]	; (80022f8 <HAL_UART_MspInit+0x28c>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022cc:	e0da      	b.n	8002484 <HAL_UART_MspInit+0x418>
 80022ce:	bf00      	nop
 80022d0:	40004c00 	.word	0x40004c00
 80022d4:	58024400 	.word	0x58024400
 80022d8:	58020000 	.word	0x58020000
 80022dc:	240095c0 	.word	0x240095c0
 80022e0:	40020058 	.word	0x40020058
 80022e4:	40007800 	.word	0x40007800
 80022e8:	58021000 	.word	0x58021000
 80022ec:	2400dcec 	.word	0x2400dcec
 80022f0:	40020070 	.word	0x40020070
 80022f4:	40011000 	.word	0x40011000
 80022f8:	2400dd6c 	.word	0x2400dd6c
 80022fc:	40020088 	.word	0x40020088
  else if(huart->Instance==USART2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a61      	ldr	r2, [pc, #388]	; (800248c <HAL_UART_MspInit+0x420>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d15b      	bne.n	80023c2 <HAL_UART_MspInit+0x356>
    __HAL_RCC_USART2_CLK_ENABLE();
 800230a:	4b61      	ldr	r3, [pc, #388]	; (8002490 <HAL_UART_MspInit+0x424>)
 800230c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002310:	4a5f      	ldr	r2, [pc, #380]	; (8002490 <HAL_UART_MspInit+0x424>)
 8002312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002316:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800231a:	4b5d      	ldr	r3, [pc, #372]	; (8002490 <HAL_UART_MspInit+0x424>)
 800231c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_UART_MspInit+0x424>)
 800232a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800232e:	4a58      	ldr	r2, [pc, #352]	; (8002490 <HAL_UART_MspInit+0x424>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002338:	4b55      	ldr	r3, [pc, #340]	; (8002490 <HAL_UART_MspInit+0x424>)
 800233a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002346:	230c      	movs	r3, #12
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002356:	2307      	movs	r3, #7
 8002358:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800235e:	4619      	mov	r1, r3
 8002360:	484c      	ldr	r0, [pc, #304]	; (8002494 <HAL_UART_MspInit+0x428>)
 8002362:	f004 f923 	bl	80065ac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream6;
 8002366:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <HAL_UART_MspInit+0x42c>)
 8002368:	4a4c      	ldr	r2, [pc, #304]	; (800249c <HAL_UART_MspInit+0x430>)
 800236a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800236c:	4b4a      	ldr	r3, [pc, #296]	; (8002498 <HAL_UART_MspInit+0x42c>)
 800236e:	222b      	movs	r2, #43	; 0x2b
 8002370:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <HAL_UART_MspInit+0x42c>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002378:	4b47      	ldr	r3, [pc, #284]	; (8002498 <HAL_UART_MspInit+0x42c>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800237e:	4b46      	ldr	r3, [pc, #280]	; (8002498 <HAL_UART_MspInit+0x42c>)
 8002380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002384:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002386:	4b44      	ldr	r3, [pc, #272]	; (8002498 <HAL_UART_MspInit+0x42c>)
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800238c:	4b42      	ldr	r3, [pc, #264]	; (8002498 <HAL_UART_MspInit+0x42c>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_UART_MspInit+0x42c>)
 8002394:	2200      	movs	r2, #0
 8002396:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002398:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <HAL_UART_MspInit+0x42c>)
 800239a:	2200      	movs	r2, #0
 800239c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_UART_MspInit+0x42c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80023a4:	483c      	ldr	r0, [pc, #240]	; (8002498 <HAL_UART_MspInit+0x42c>)
 80023a6:	f001 fdd9 	bl	8003f5c <HAL_DMA_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_MspInit+0x348>
      Error_Handler();
 80023b0:	f7ff faf0 	bl	8001994 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a38      	ldr	r2, [pc, #224]	; (8002498 <HAL_UART_MspInit+0x42c>)
 80023b8:	679a      	str	r2, [r3, #120]	; 0x78
 80023ba:	4a37      	ldr	r2, [pc, #220]	; (8002498 <HAL_UART_MspInit+0x42c>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023c0:	e060      	b.n	8002484 <HAL_UART_MspInit+0x418>
  else if(huart->Instance==USART3)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a36      	ldr	r2, [pc, #216]	; (80024a0 <HAL_UART_MspInit+0x434>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d15b      	bne.n	8002484 <HAL_UART_MspInit+0x418>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <HAL_UART_MspInit+0x424>)
 80023ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d2:	4a2f      	ldr	r2, [pc, #188]	; (8002490 <HAL_UART_MspInit+0x424>)
 80023d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023dc:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <HAL_UART_MspInit+0x424>)
 80023de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <HAL_UART_MspInit+0x424>)
 80023ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f0:	4a27      	ldr	r2, [pc, #156]	; (8002490 <HAL_UART_MspInit+0x424>)
 80023f2:	f043 0308 	orr.w	r3, r3, #8
 80023f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fa:	4b25      	ldr	r3, [pc, #148]	; (8002490 <HAL_UART_MspInit+0x424>)
 80023fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002408:	f44f 7340 	mov.w	r3, #768	; 0x300
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800241a:	2307      	movs	r3, #7
 800241c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800241e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002422:	4619      	mov	r1, r3
 8002424:	481f      	ldr	r0, [pc, #124]	; (80024a4 <HAL_UART_MspInit+0x438>)
 8002426:	f004 f8c1 	bl	80065ac <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream7;
 800242a:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 800242c:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <HAL_UART_MspInit+0x440>)
 800242e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 8002432:	222d      	movs	r2, #45	; 0x2d
 8002434:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002436:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 8002444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002448:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 8002458:	2200      	movs	r2, #0
 800245a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 800245e:	2200      	movs	r2, #0
 8002460:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 8002464:	2200      	movs	r2, #0
 8002466:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002468:	480f      	ldr	r0, [pc, #60]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 800246a:	f001 fd77 	bl	8003f5c <HAL_DMA_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_UART_MspInit+0x40c>
      Error_Handler();
 8002474:	f7ff fa8e 	bl	8001994 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 800247c:	679a      	str	r2, [r3, #120]	; 0x78
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <HAL_UART_MspInit+0x43c>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002484:	bf00      	nop
 8002486:	3748      	adds	r7, #72	; 0x48
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40004400 	.word	0x40004400
 8002490:	58024400 	.word	0x58024400
 8002494:	58020000 	.word	0x58020000
 8002498:	2400963c 	.word	0x2400963c
 800249c:	400200a0 	.word	0x400200a0
 80024a0:	40004800 	.word	0x40004800
 80024a4:	58020c00 	.word	0x58020c00
 80024a8:	240097d8 	.word	0x240097d8
 80024ac:	400200b8 	.word	0x400200b8

080024b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08e      	sub	sp, #56	; 0x38
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	2019      	movs	r0, #25
 80024c6:	f001 fd21 	bl	8003f0c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80024ca:	2019      	movs	r0, #25
 80024cc:	f001 fd38 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024d0:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_InitTick+0xa8>)
 80024d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024d6:	4a20      	ldr	r2, [pc, #128]	; (8002558 <HAL_InitTick+0xa8>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_InitTick+0xa8>)
 80024e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024ee:	f107 020c 	add.w	r2, r7, #12
 80024f2:	f107 0310 	add.w	r3, r7, #16
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f006 fbf1 	bl	8008ce0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80024fe:	f006 fbd9 	bl	8008cb4 <HAL_RCC_GetPCLK2Freq>
 8002502:	4603      	mov	r3, r0
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250a:	4a14      	ldr	r2, [pc, #80]	; (800255c <HAL_InitTick+0xac>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	0c9b      	lsrs	r3, r3, #18
 8002512:	3b01      	subs	r3, #1
 8002514:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_InitTick+0xb0>)
 8002518:	4a12      	ldr	r2, [pc, #72]	; (8002564 <HAL_InitTick+0xb4>)
 800251a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_InitTick+0xb0>)
 800251e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002522:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002524:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <HAL_InitTick+0xb0>)
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_InitTick+0xb0>)
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_InitTick+0xb0>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002536:	480a      	ldr	r0, [pc, #40]	; (8002560 <HAL_InitTick+0xb0>)
 8002538:	f00a ff18 	bl	800d36c <HAL_TIM_Base_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d104      	bne.n	800254c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002542:	4807      	ldr	r0, [pc, #28]	; (8002560 <HAL_InitTick+0xb0>)
 8002544:	f00a ff74 	bl	800d430 <HAL_TIM_Base_Start_IT>
 8002548:	4603      	mov	r3, r0
 800254a:	e000      	b.n	800254e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
}
 800254e:	4618      	mov	r0, r3
 8002550:	3738      	adds	r7, #56	; 0x38
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	58024400 	.word	0x58024400
 800255c:	431bde83 	.word	0x431bde83
 8002560:	2401c4d0 	.word	0x2401c4d0
 8002564:	40010000 	.word	0x40010000

08002568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800257a:	e7fe      	b.n	800257a <HardFault_Handler+0x4>

0800257c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002580:	e7fe      	b.n	8002580 <MemManage_Handler+0x4>

08002582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002586:	e7fe      	b.n	8002586 <BusFault_Handler+0x4>

08002588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800258c:	e7fe      	b.n	800258c <UsageFault_Handler+0x4>

0800258e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <DMA1_Stream0_IRQHandler+0x10>)
 80025a2:	f002 fce5 	bl	8004f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2401a36c 	.word	0x2401a36c

080025b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <DMA1_Stream1_IRQHandler+0x10>)
 80025b6:	f002 fcdb 	bl	8004f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2400ba04 	.word	0x2400ba04

080025c4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <DMA1_Stream2_IRQHandler+0x10>)
 80025ca:	f002 fcd1 	bl	8004f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2401c448 	.word	0x2401c448

080025d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <DMA1_Stream3_IRQHandler+0x10>)
 80025de:	f002 fcc7 	bl	8004f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	240095c0 	.word	0x240095c0

080025ec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <DMA1_Stream4_IRQHandler+0x10>)
 80025f2:	f002 fcbd 	bl	8004f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	2400dcec 	.word	0x2400dcec

08002600 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <DMA1_Stream5_IRQHandler+0x10>)
 8002606:	f002 fcb3 	bl	8004f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2400dd6c 	.word	0x2400dd6c

08002614 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <DMA1_Stream6_IRQHandler+0x10>)
 800261a:	f002 fca9 	bl	8004f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2400963c 	.word	0x2400963c

08002628 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <TIM1_UP_IRQHandler+0x10>)
 800262e:	f00a ff35 	bl	800d49c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2401c4d0 	.word	0x2401c4d0

0800263c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <SPI1_IRQHandler+0x10>)
 8002642:	f00a fadd 	bl	800cc00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	240181f4 	.word	0x240181f4

08002650 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <SPI2_IRQHandler+0x10>)
 8002656:	f00a fad3 	bl	800cc00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	240096bc 	.word	0x240096bc

08002664 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <DMA1_Stream7_IRQHandler+0x10>)
 800266a:	f002 fc81 	bl	8004f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	240097d8 	.word	0x240097d8

08002678 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <SDMMC1_IRQHandler+0x10>)
 800267e:	f008 fca9 	bl	800afd4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2400ba7c 	.word	0x2400ba7c

0800268c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <SPI3_IRQHandler+0x10>)
 8002692:	f00a fab5 	bl	800cc00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	2400dbf0 	.word	0x2400dbf0

080026a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <DMA2_Stream0_IRQHandler+0x10>)
 80026a6:	f002 fc63 	bl	8004f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2400bb60 	.word	0x2400bb60

080026b4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80026b8:	4802      	ldr	r0, [pc, #8]	; (80026c4 <DMA2_Stream1_IRQHandler+0x10>)
 80026ba:	f002 fc59 	bl	8004f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2400fed4 	.word	0x2400fed4

080026c8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026cc:	4802      	ldr	r0, [pc, #8]	; (80026d8 <DMA2_Stream4_IRQHandler+0x10>)
 80026ce:	f002 fc4f 	bl	8004f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2400ffe8 	.word	0x2400ffe8

080026dc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <SPI4_IRQHandler+0x10>)
 80026e2:	f00a fa8d 	bl	800cc00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2400ff60 	.word	0x2400ff60

080026f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <OTG_FS_IRQHandler+0x10>)
 80026f6:	f004 fa91 	bl	8006c1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	2401de9c 	.word	0x2401de9c

08002704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800270c:	4a14      	ldr	r2, [pc, #80]	; (8002760 <_sbrk+0x5c>)
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <_sbrk+0x60>)
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <_sbrk+0x64>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <_sbrk+0x64>)
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <_sbrk+0x68>)
 8002724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <_sbrk+0x64>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	429a      	cmp	r2, r3
 8002732:	d207      	bcs.n	8002744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002734:	f014 fac6 	bl	8016cc4 <__errno>
 8002738:	4602      	mov	r2, r0
 800273a:	230c      	movs	r3, #12
 800273c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	e009      	b.n	8002758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	4a05      	ldr	r2, [pc, #20]	; (8002768 <_sbrk+0x64>)
 8002754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	24080000 	.word	0x24080000
 8002764:	00000f00 	.word	0x00000f00
 8002768:	24000278 	.word	0x24000278
 800276c:	2401e2a8 	.word	0x2401e2a8

08002770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002774:	4b39      	ldr	r3, [pc, #228]	; (800285c <SystemInit+0xec>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	4a38      	ldr	r2, [pc, #224]	; (800285c <SystemInit+0xec>)
 800277c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002784:	4b36      	ldr	r3, [pc, #216]	; (8002860 <SystemInit+0xf0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	2b06      	cmp	r3, #6
 800278e:	d807      	bhi.n	80027a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002790:	4b33      	ldr	r3, [pc, #204]	; (8002860 <SystemInit+0xf0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 030f 	bic.w	r3, r3, #15
 8002798:	4a31      	ldr	r2, [pc, #196]	; (8002860 <SystemInit+0xf0>)
 800279a:	f043 0307 	orr.w	r3, r3, #7
 800279e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027a0:	4b30      	ldr	r3, [pc, #192]	; (8002864 <SystemInit+0xf4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a2f      	ldr	r2, [pc, #188]	; (8002864 <SystemInit+0xf4>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027ac:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <SystemInit+0xf4>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027b2:	4b2c      	ldr	r3, [pc, #176]	; (8002864 <SystemInit+0xf4>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	492b      	ldr	r1, [pc, #172]	; (8002864 <SystemInit+0xf4>)
 80027b8:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <SystemInit+0xf8>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027be:	4b28      	ldr	r3, [pc, #160]	; (8002860 <SystemInit+0xf0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	2b07      	cmp	r3, #7
 80027c8:	d907      	bls.n	80027da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027ca:	4b25      	ldr	r3, [pc, #148]	; (8002860 <SystemInit+0xf0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 030f 	bic.w	r3, r3, #15
 80027d2:	4a23      	ldr	r2, [pc, #140]	; (8002860 <SystemInit+0xf0>)
 80027d4:	f043 0307 	orr.w	r3, r3, #7
 80027d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <SystemInit+0xf4>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80027e0:	4b20      	ldr	r3, [pc, #128]	; (8002864 <SystemInit+0xf4>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027e6:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <SystemInit+0xf4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027ec:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <SystemInit+0xf4>)
 80027ee:	4a1f      	ldr	r2, [pc, #124]	; (800286c <SystemInit+0xfc>)
 80027f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <SystemInit+0xf4>)
 80027f4:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <SystemInit+0x100>)
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <SystemInit+0xf4>)
 80027fa:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <SystemInit+0x104>)
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <SystemInit+0xf4>)
 8002800:	2200      	movs	r2, #0
 8002802:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <SystemInit+0xf4>)
 8002806:	4a1b      	ldr	r2, [pc, #108]	; (8002874 <SystemInit+0x104>)
 8002808:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800280a:	4b16      	ldr	r3, [pc, #88]	; (8002864 <SystemInit+0xf4>)
 800280c:	2200      	movs	r2, #0
 800280e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002810:	4b14      	ldr	r3, [pc, #80]	; (8002864 <SystemInit+0xf4>)
 8002812:	4a18      	ldr	r2, [pc, #96]	; (8002874 <SystemInit+0x104>)
 8002814:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <SystemInit+0xf4>)
 8002818:	2200      	movs	r2, #0
 800281a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <SystemInit+0xf4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a10      	ldr	r2, [pc, #64]	; (8002864 <SystemInit+0xf4>)
 8002822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002826:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <SystemInit+0xf4>)
 800282a:	2200      	movs	r2, #0
 800282c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <SystemInit+0x108>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <SystemInit+0x10c>)
 8002834:	4013      	ands	r3, r2
 8002836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800283a:	d202      	bcs.n	8002842 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <SystemInit+0x110>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <SystemInit+0x114>)
 8002844:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002848:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800284a:	4b04      	ldr	r3, [pc, #16]	; (800285c <SystemInit+0xec>)
 800284c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002850:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	52002000 	.word	0x52002000
 8002864:	58024400 	.word	0x58024400
 8002868:	eaf6ed7f 	.word	0xeaf6ed7f
 800286c:	02020200 	.word	0x02020200
 8002870:	01ff0000 	.word	0x01ff0000
 8002874:	01010280 	.word	0x01010280
 8002878:	5c001000 	.word	0x5c001000
 800287c:	ffff0000 	.word	0xffff0000
 8002880:	51008108 	.word	0x51008108
 8002884:	52004000 	.word	0x52004000

08002888 <vTaskSensRead>:
/* SPI Read Data */
sb_data_t sb1_data = { 0 };
sb_data_t sb2_data = { 0 };
sb_data_t sb3_data = { 0 };

void vTaskSensRead(void *argument) {
 8002888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288a:	b08f      	sub	sp, #60	; 0x3c
 800288c:	af08      	add	r7, sp, #32
 800288e:	60f8      	str	r0, [r7, #12]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osDelay(800);
 8002890:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002894:	f010 f9c4 	bl	8012c20 <osDelay>
	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8002898:	f010 f8ea 	bl	8012a70 <osKernelGetTickCount>
 800289c:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 800289e:	f010 f90f 	bl	8012ac0 <osKernelGetTickFreq>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b50      	ldr	r3, [pc, #320]	; (80029e8 <vTaskSensRead+0x160>)
 80028a6:	fba3 2302 	umull	r2, r3, r3, r2
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	613b      	str	r3, [r7, #16]

	for (;;) {
		tick_count += tick_update;
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4413      	add	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]

		/* Get Data */
		if (USB_DATA_ENABLE) {
			ReadDataUSB();
		} else {
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 80028b6:	4a4d      	ldr	r2, [pc, #308]	; (80029ec <vTaskSensRead+0x164>)
 80028b8:	494d      	ldr	r1, [pc, #308]	; (80029f0 <vTaskSensRead+0x168>)
 80028ba:	484e      	ldr	r0, [pc, #312]	; (80029f4 <vTaskSensRead+0x16c>)
 80028bc:	f000 f8b8 	bl	8002a30 <ReadDataSB>
		}
		UsbPrint(
 80028c0:	4b4c      	ldr	r3, [pc, #304]	; (80029f4 <vTaskSensRead+0x16c>)
 80028c2:	6819      	ldr	r1, [r3, #0]
 80028c4:	4b4b      	ldr	r3, [pc, #300]	; (80029f4 <vTaskSensRead+0x16c>)
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4b4a      	ldr	r3, [pc, #296]	; (80029f4 <vTaskSensRead+0x16c>)
 80028ca:	6898      	ldr	r0, [r3, #8]
				"[SB1] P: %ld,T: %ld,Ts: %ld;Gx: %hd,Gy: %hd,Gz: %hd, Ax: %hd,Ay: %hd,Az: %hd,Ts: %ld\n",
				sb1_data.baro.pressure, sb1_data.baro.temperature,
				sb1_data.baro.ts, sb1_data.imu.gyro_x, sb1_data.imu.gyro_y,
 80028cc:	4b49      	ldr	r3, [pc, #292]	; (80029f4 <vTaskSensRead+0x16c>)
 80028ce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
		UsbPrint(
 80028d2:	461c      	mov	r4, r3
				sb1_data.baro.ts, sb1_data.imu.gyro_x, sb1_data.imu.gyro_y,
 80028d4:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <vTaskSensRead+0x16c>)
 80028d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
		UsbPrint(
 80028da:	461d      	mov	r5, r3
				sb1_data.imu.gyro_z, sb1_data.imu.acc_x, sb1_data.imu.acc_y,
 80028dc:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <vTaskSensRead+0x16c>)
 80028de:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
		UsbPrint(
 80028e2:	461e      	mov	r6, r3
				sb1_data.imu.gyro_z, sb1_data.imu.acc_x, sb1_data.imu.acc_y,
 80028e4:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <vTaskSensRead+0x16c>)
 80028e6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
		UsbPrint(
 80028ea:	60bb      	str	r3, [r7, #8]
				sb1_data.imu.gyro_z, sb1_data.imu.acc_x, sb1_data.imu.acc_y,
 80028ec:	4b41      	ldr	r3, [pc, #260]	; (80029f4 <vTaskSensRead+0x16c>)
 80028ee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
		UsbPrint(
 80028f2:	607b      	str	r3, [r7, #4]
				sb1_data.imu.acc_z, sb1_data.imu.ts);
 80028f4:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <vTaskSensRead+0x16c>)
 80028f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
		UsbPrint(
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <vTaskSensRead+0x16c>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	9306      	str	r3, [sp, #24]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9305      	str	r3, [sp, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	9304      	str	r3, [sp, #16]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	9303      	str	r3, [sp, #12]
 800290e:	9602      	str	r6, [sp, #8]
 8002910:	9501      	str	r5, [sp, #4]
 8002912:	9400      	str	r4, [sp, #0]
 8002914:	4603      	mov	r3, r0
 8002916:	4838      	ldr	r0, [pc, #224]	; (80029f8 <vTaskSensRead+0x170>)
 8002918:	f7fe f88a 	bl	8000a30 <UsbPrint>

		UsbPrint(
 800291c:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <vTaskSensRead+0x168>)
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <vTaskSensRead+0x168>)
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <vTaskSensRead+0x168>)
 8002926:	6898      	ldr	r0, [r3, #8]
				"[SB2] P: %ld,T: %ld,Ts: %ld;Gx: %hd,Gy: %hd,Gz: %hd, Ax: %hd,Ay: %hd,Az: %hd,Ts: %ld\n",
				sb2_data.baro.pressure, sb2_data.baro.temperature,
				sb2_data.baro.ts, sb2_data.imu.gyro_x, sb2_data.imu.gyro_y,
 8002928:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <vTaskSensRead+0x168>)
 800292a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
		UsbPrint(
 800292e:	461c      	mov	r4, r3
				sb2_data.baro.ts, sb2_data.imu.gyro_x, sb2_data.imu.gyro_y,
 8002930:	4b2f      	ldr	r3, [pc, #188]	; (80029f0 <vTaskSensRead+0x168>)
 8002932:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
		UsbPrint(
 8002936:	461d      	mov	r5, r3
				sb2_data.imu.gyro_z, sb2_data.imu.acc_x, sb2_data.imu.acc_y,
 8002938:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <vTaskSensRead+0x168>)
 800293a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
		UsbPrint(
 800293e:	461e      	mov	r6, r3
				sb2_data.imu.gyro_z, sb2_data.imu.acc_x, sb2_data.imu.acc_y,
 8002940:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <vTaskSensRead+0x168>)
 8002942:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
		UsbPrint(
 8002946:	60bb      	str	r3, [r7, #8]
				sb2_data.imu.gyro_z, sb2_data.imu.acc_x, sb2_data.imu.acc_y,
 8002948:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <vTaskSensRead+0x168>)
 800294a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
		UsbPrint(
 800294e:	607b      	str	r3, [r7, #4]
				sb2_data.imu.acc_z, sb2_data.imu.ts);
 8002950:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <vTaskSensRead+0x168>)
 8002952:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
		UsbPrint(
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <vTaskSensRead+0x168>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	9306      	str	r3, [sp, #24]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	9305      	str	r3, [sp, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	9304      	str	r3, [sp, #16]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	9303      	str	r3, [sp, #12]
 800296a:	9602      	str	r6, [sp, #8]
 800296c:	9501      	str	r5, [sp, #4]
 800296e:	9400      	str	r4, [sp, #0]
 8002970:	4603      	mov	r3, r0
 8002972:	4822      	ldr	r0, [pc, #136]	; (80029fc <vTaskSensRead+0x174>)
 8002974:	f7fe f85c 	bl	8000a30 <UsbPrint>
		/* Log Data */
		logSensor(tick_count, 1, BARO, &sb1_data.baro);
 8002978:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <vTaskSensRead+0x16c>)
 800297a:	2201      	movs	r2, #1
 800297c:	2101      	movs	r1, #1
 800297e:	6978      	ldr	r0, [r7, #20]
 8002980:	f7fd ff3a 	bl	80007f8 <logSensor>
		logSensor(tick_count, 1, IMU, &sb1_data.imu);
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <vTaskSensRead+0x178>)
 8002986:	2202      	movs	r2, #2
 8002988:	2101      	movs	r1, #1
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	f7fd ff34 	bl	80007f8 <logSensor>
		logSensor(tick_count, 2, BARO, &sb2_data.baro);
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <vTaskSensRead+0x168>)
 8002992:	2201      	movs	r2, #1
 8002994:	2102      	movs	r1, #2
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7fd ff2e 	bl	80007f8 <logSensor>
		logSensor(tick_count, 2, IMU, &sb2_data.imu);
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <vTaskSensRead+0x17c>)
 800299e:	2202      	movs	r2, #2
 80029a0:	2102      	movs	r1, #2
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7fd ff28 	bl	80007f8 <logSensor>
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <vTaskSensRead+0x164>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	2103      	movs	r1, #3
 80029ae:	6978      	ldr	r0, [r7, #20]
 80029b0:	f7fd ff22 	bl	80007f8 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <vTaskSensRead+0x180>)
 80029b6:	2202      	movs	r2, #2
 80029b8:	2103      	movs	r1, #3
 80029ba:	6978      	ldr	r0, [r7, #20]
 80029bc:	f7fd ff1c 	bl	80007f8 <logSensor>
		HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) &sb1_data, sizeof(sb1_data));
 80029c0:	2220      	movs	r2, #32
 80029c2:	490c      	ldr	r1, [pc, #48]	; (80029f4 <vTaskSensRead+0x16c>)
 80029c4:	4811      	ldr	r0, [pc, #68]	; (8002a0c <vTaskSensRead+0x184>)
 80029c6:	f009 fdf5 	bl	800c5b4 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &sb2_data, sizeof(sb2_data));
 80029ca:	2220      	movs	r2, #32
 80029cc:	4908      	ldr	r1, [pc, #32]	; (80029f0 <vTaskSensRead+0x168>)
 80029ce:	4810      	ldr	r0, [pc, #64]	; (8002a10 <vTaskSensRead+0x188>)
 80029d0:	f009 fdf0 	bl	800c5b4 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 80029d4:	2220      	movs	r2, #32
 80029d6:	4905      	ldr	r1, [pc, #20]	; (80029ec <vTaskSensRead+0x164>)
 80029d8:	480e      	ldr	r0, [pc, #56]	; (8002a14 <vTaskSensRead+0x18c>)
 80029da:	f009 fdeb 	bl	800c5b4 <HAL_SPI_Receive_DMA>
		/* Periodic Update */
		osDelayUntil(tick_count);
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f010 f94c 	bl	8012c7c <osDelayUntil>
		tick_count += tick_update;
 80029e4:	e763      	b.n	80028ae <vTaskSensRead+0x26>
 80029e6:	bf00      	nop
 80029e8:	51eb851f 	.word	0x51eb851f
 80029ec:	240002bc 	.word	0x240002bc
 80029f0:	2400029c 	.word	0x2400029c
 80029f4:	2400027c 	.word	0x2400027c
 80029f8:	08017c7c 	.word	0x08017c7c
 80029fc:	08017cd4 	.word	0x08017cd4
 8002a00:	24000288 	.word	0x24000288
 8002a04:	240002a8 	.word	0x240002a8
 8002a08:	240002c8 	.word	0x240002c8
 8002a0c:	240181f4 	.word	0x240181f4
 8002a10:	240096bc 	.word	0x240096bc
 8002a14:	2400dbf0 	.word	0x2400dbf0

08002a18 <HAL_SPI_RxCpltCallback>:
	}
}

/* SPI callback */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	HAL_SPIEx_FlushRxFifo(hspi);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f00a fc5d 	bl	800d2e0 <HAL_SPIEx_FlushRxFifo>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <ReadDataSB>:

/* Read Data from Sensor Boards */
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3) {
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]

	/* Read SB 1, Write SB 1 Global Variable */
	uint8_t checksum;
	checksum = calculate_checksum_sb(sb1);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f88b 	bl	8002b58 <calculate_checksum_sb>
 8002a42:	4603      	mov	r3, r0
 8002a44:	75fb      	strb	r3, [r7, #23]
	if (checksum == sb1->checksum) {
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	7f1b      	ldrb	r3, [r3, #28]
 8002a4a:	7dfa      	ldrb	r2, [r7, #23]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d11d      	bne.n	8002a8c <ReadDataSB+0x5c>
		if (AcquireMutex(&sb1_mutex) == osOK) {
 8002a50:	4838      	ldr	r0, [pc, #224]	; (8002b34 <ReadDataSB+0x104>)
 8002a52:	f7fd fea8 	bl	80007a6 <AcquireMutex>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d117      	bne.n	8002a8c <ReadDataSB+0x5c>
			sb1_baro = sb1->baro;
 8002a5c:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <ReadDataSB+0x108>)
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb1->imu;
 8002a66:	4a35      	ldr	r2, [pc, #212]	; (8002b3c <ReadDataSB+0x10c>)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4614      	mov	r4, r2
 8002a6c:	330c      	adds	r3, #12
 8002a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 8002a74:	482f      	ldr	r0, [pc, #188]	; (8002b34 <ReadDataSB+0x104>)
 8002a76:	f7fd feb0 	bl	80007da <ReleaseMutex>
			sb1_imu.acc_z = -sb1_imu.acc_z;
 8002a7a:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <ReadDataSB+0x10c>)
 8002a7c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	425b      	negs	r3, r3
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	b21a      	sxth	r2, r3
 8002a88:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <ReadDataSB+0x10c>)
 8002a8a:	815a      	strh	r2, [r3, #10]
		}
	}

	/* Read SB 2, Write SB 2 Global Variable  */
	checksum = calculate_checksum_sb(sb2);
 8002a8c:	68b8      	ldr	r0, [r7, #8]
 8002a8e:	f000 f863 	bl	8002b58 <calculate_checksum_sb>
 8002a92:	4603      	mov	r3, r0
 8002a94:	75fb      	strb	r3, [r7, #23]
	if (checksum == sb2->checksum) {
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	7f1b      	ldrb	r3, [r3, #28]
 8002a9a:	7dfa      	ldrb	r2, [r7, #23]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d11d      	bne.n	8002adc <ReadDataSB+0xac>
		if (AcquireMutex(&sb2_mutex) == osOK) {
 8002aa0:	4827      	ldr	r0, [pc, #156]	; (8002b40 <ReadDataSB+0x110>)
 8002aa2:	f7fd fe80 	bl	80007a6 <AcquireMutex>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d117      	bne.n	8002adc <ReadDataSB+0xac>
			sb2_baro = sb2->baro;
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <ReadDataSB+0x114>)
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ab2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8002ab6:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <ReadDataSB+0x118>)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4614      	mov	r4, r2
 8002abc:	330c      	adds	r3, #12
 8002abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 8002ac4:	481e      	ldr	r0, [pc, #120]	; (8002b40 <ReadDataSB+0x110>)
 8002ac6:	f7fd fe88 	bl	80007da <ReleaseMutex>
			sb2_imu.acc_z = -sb2_imu.acc_z;
 8002aca:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <ReadDataSB+0x118>)
 8002acc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	425b      	negs	r3, r3
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	b21a      	sxth	r2, r3
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <ReadDataSB+0x118>)
 8002ada:	815a      	strh	r2, [r3, #10]
		}
	}

	/* Read SB 3, Write SB 3 Global Variable  */
	checksum = calculate_checksum_sb(sb3);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f83b 	bl	8002b58 <calculate_checksum_sb>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	75fb      	strb	r3, [r7, #23]
	if (checksum == sb3->checksum) {
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7f1b      	ldrb	r3, [r3, #28]
 8002aea:	7dfa      	ldrb	r2, [r7, #23]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d11d      	bne.n	8002b2c <ReadDataSB+0xfc>
		if (AcquireMutex(&sb3_mutex) == osOK) {
 8002af0:	4816      	ldr	r0, [pc, #88]	; (8002b4c <ReadDataSB+0x11c>)
 8002af2:	f7fd fe58 	bl	80007a6 <AcquireMutex>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d117      	bne.n	8002b2c <ReadDataSB+0xfc>
			sb3_baro = sb3->baro;
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <ReadDataSB+0x120>)
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8002b06:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <ReadDataSB+0x124>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 8002b14:	480d      	ldr	r0, [pc, #52]	; (8002b4c <ReadDataSB+0x11c>)
 8002b16:	f7fd fe60 	bl	80007da <ReleaseMutex>
			sb3_imu.acc_z = -sb3_imu.acc_z;
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <ReadDataSB+0x124>)
 8002b1c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	425b      	negs	r3, r3
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	b21a      	sxth	r2, r3
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <ReadDataSB+0x124>)
 8002b2a:	815a      	strh	r2, [r3, #10]
		}
	}
}
 8002b2c:	bf00      	nop
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd90      	pop	{r4, r7, pc}
 8002b34:	2400dde4 	.word	0x2400dde4
 8002b38:	24000208 	.word	0x24000208
 8002b3c:	24000214 	.word	0x24000214
 8002b40:	2401c4c8 	.word	0x2401c4c8
 8002b44:	24000224 	.word	0x24000224
 8002b48:	24000230 	.word	0x24000230
 8002b4c:	2400ff58 	.word	0x2400ff58
 8002b50:	24000240 	.word	0x24000240
 8002b54:	2400024c 	.word	0x2400024c

08002b58 <calculate_checksum_sb>:
				&sb3_imu.acc_x, &sb3_imu.acc_y, &sb3_imu.acc_z, &sb3_imu.ts);
		osMutexRelease(usb_data_mutex.mutex);
	}
}

uint8_t calculate_checksum_sb(sb_data_t *sb_data) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

	return sb_data->baro.pressure + sb_data->baro.temperature
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b2da      	uxtb	r2, r3
			+ sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	b2da      	uxtb	r2, r3
			+ sb_data->imu.acc_x + sb_data->imu.acc_y + sb_data->imu.acc_z;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	b2db      	uxtb	r3, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bfc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bc8:	f7ff fdd2 	bl	8002770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bce:	e003      	b.n	8002bd8 <LoopCopyDataInit>

08002bd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002bd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002bd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002bd6:	3104      	adds	r1, #4

08002bd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002bd8:	480a      	ldr	r0, [pc, #40]	; (8002c04 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002bdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002bde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002be0:	d3f6      	bcc.n	8002bd0 <CopyDataInit>
  ldr  r2, =_sbss
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002be4:	e002      	b.n	8002bec <LoopFillZerobss>

08002be6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002be6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002be8:	f842 3b04 	str.w	r3, [r2], #4

08002bec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002bee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bf0:	d3f9      	bcc.n	8002be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bf2:	f014 f86d 	bl	8016cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bf6:	f7fd ff51 	bl	8000a9c <main>
  bx  lr    
 8002bfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bfc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002c00:	080181a8 	.word	0x080181a8
  ldr  r0, =_sdata
 8002c04:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002c08:	240001ec 	.word	0x240001ec
  ldr  r2, =_sbss
 8002c0c:	240001ec 	.word	0x240001ec
  ldr  r3, = _ebss
 8002c10:	2401e2a8 	.word	0x2401e2a8

08002c14 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c14:	e7fe      	b.n	8002c14 <ADC3_IRQHandler>
	...

08002c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1e:	2003      	movs	r0, #3
 8002c20:	f001 f969 	bl	8003ef6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c24:	f005 fe8e 	bl	8008944 <HAL_RCC_GetSysClockFreq>
 8002c28:	4601      	mov	r1, r0
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <HAL_Init+0x68>)
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <HAL_Init+0x6c>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	fa21 f303 	lsr.w	r3, r1, r3
 8002c40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <HAL_Init+0x68>)
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_Init+0x6c>)
 8002c4c:	5cd3      	ldrb	r3, [r2, r3]
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
 8002c58:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <HAL_Init+0x70>)
 8002c5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <HAL_Init+0x74>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7ff fc24 	bl	80024b0 <HAL_InitTick>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e002      	b.n	8002c78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c72:	f7fe fe97 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	58024400 	.word	0x58024400
 8002c84:	08017e50 	.word	0x08017e50
 8002c88:	24000004 	.word	0x24000004
 8002c8c:	24000000 	.word	0x24000000

08002c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_IncTick+0x20>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_IncTick+0x24>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <HAL_IncTick+0x24>)
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	2400000c 	.word	0x2400000c
 8002cb4:	2401c51c 	.word	0x2401c51c

08002cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return uwTick;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <HAL_GetTick+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	2401c51c 	.word	0x2401c51c

08002cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd8:	f7ff ffee 	bl	8002cb8 <HAL_GetTick>
 8002cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d005      	beq.n	8002cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_Delay+0x40>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cf6:	bf00      	nop
 8002cf8:	f7ff ffde 	bl	8002cb8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d8f7      	bhi.n	8002cf8 <HAL_Delay+0x28>
  {
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	2400000c 	.word	0x2400000c

08002d14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_GetREVID+0x14>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0c1b      	lsrs	r3, r3, #16
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	5c001000 	.word	0x5c001000

08002d2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	609a      	str	r2, [r3, #8]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3360      	adds	r3, #96	; 0x60
 8002da6:	461a      	mov	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	611a      	str	r2, [r3, #16]
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b087      	sub	sp, #28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3360      	adds	r3, #96	; 0x60
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	601a      	str	r2, [r3, #0]
  }
}
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3330      	adds	r3, #48	; 0x30
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	4413      	add	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	211f      	movs	r1, #31
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	401a      	ands	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	0e9b      	lsrs	r3, r3, #26
 8002e74:	f003 011f 	and.w	r1, r3, #31
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	431a      	orrs	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	0e5b      	lsrs	r3, r3, #25
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	0d1b      	lsrs	r3, r3, #20
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2107      	movs	r1, #7
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	401a      	ands	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	0d1b      	lsrs	r3, r3, #20
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f04:	43db      	mvns	r3, r3
 8002f06:	401a      	ands	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0318 	and.w	r3, r3, #24
 8002f0e:	4908      	ldr	r1, [pc, #32]	; (8002f30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f10:	40d9      	lsrs	r1, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	400b      	ands	r3, r1
 8002f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	000fffff 	.word	0x000fffff

08002f34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6093      	str	r3, [r2, #8]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	5fffffc0 	.word	0x5fffffc0

08002f58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f6c:	d101      	bne.n	8002f72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	6fffffc0 	.word	0x6fffffc0

08002fa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fbc:	d101      	bne.n	8002fc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <LL_ADC_IsEnabled+0x18>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <LL_ADC_IsEnabled+0x1a>
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b04      	cmp	r3, #4
 8003008:	d101      	bne.n	800300e <LL_ADC_REG_IsConversionOngoing+0x18>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b08      	cmp	r3, #8
 800302e:	d101      	bne.n	8003034 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b089      	sub	sp, #36	; 0x24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003050:	2300      	movs	r3, #0
 8003052:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e18e      	b.n	800337c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7fe fcb3 	bl	80019d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff67 	bl	8002f58 <LL_ADC_IsDeepPowerDownEnabled>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff4d 	bl	8002f34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff82 	bl	8002fa8 <LL_ADC_IsInternalRegulatorEnabled>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d113      	bne.n	80030d2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff66 	bl	8002f80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80030b4:	4b9a      	ldr	r3, [pc, #616]	; (8003320 <HAL_ADC_Init+0x2dc>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	4a9a      	ldr	r2, [pc, #616]	; (8003324 <HAL_ADC_Init+0x2e0>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030c4:	e002      	b.n	80030cc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f9      	bne.n	80030c6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ff66 	bl	8002fa8 <LL_ADC_IsInternalRegulatorEnabled>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10d      	bne.n	80030fe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff ff77 	bl	8002ff6 <LL_ADC_REG_IsConversionOngoing>
 8003108:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 8129 	bne.w	800336a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f040 8125 	bne.w	800336a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003128:	f043 0202 	orr.w	r2, r3, #2
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff4b 	bl	8002fd0 <LL_ADC_IsEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d136      	bne.n	80031ae <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a78      	ldr	r2, [pc, #480]	; (8003328 <HAL_ADC_Init+0x2e4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d004      	beq.n	8003154 <HAL_ADC_Init+0x110>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a77      	ldr	r2, [pc, #476]	; (800332c <HAL_ADC_Init+0x2e8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d10e      	bne.n	8003172 <HAL_ADC_Init+0x12e>
 8003154:	4874      	ldr	r0, [pc, #464]	; (8003328 <HAL_ADC_Init+0x2e4>)
 8003156:	f7ff ff3b 	bl	8002fd0 <LL_ADC_IsEnabled>
 800315a:	4604      	mov	r4, r0
 800315c:	4873      	ldr	r0, [pc, #460]	; (800332c <HAL_ADC_Init+0x2e8>)
 800315e:	f7ff ff37 	bl	8002fd0 <LL_ADC_IsEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	4323      	orrs	r3, r4
 8003166:	2b00      	cmp	r3, #0
 8003168:	bf0c      	ite	eq
 800316a:	2301      	moveq	r3, #1
 800316c:	2300      	movne	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	e008      	b.n	8003184 <HAL_ADC_Init+0x140>
 8003172:	486f      	ldr	r0, [pc, #444]	; (8003330 <HAL_ADC_Init+0x2ec>)
 8003174:	f7ff ff2c 	bl	8002fd0 <LL_ADC_IsEnabled>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf0c      	ite	eq
 800317e:	2301      	moveq	r3, #1
 8003180:	2300      	movne	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d012      	beq.n	80031ae <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a66      	ldr	r2, [pc, #408]	; (8003328 <HAL_ADC_Init+0x2e4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d004      	beq.n	800319c <HAL_ADC_Init+0x158>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a65      	ldr	r2, [pc, #404]	; (800332c <HAL_ADC_Init+0x2e8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_Init+0x15c>
 800319c:	4a65      	ldr	r2, [pc, #404]	; (8003334 <HAL_ADC_Init+0x2f0>)
 800319e:	e000      	b.n	80031a2 <HAL_ADC_Init+0x15e>
 80031a0:	4a65      	ldr	r2, [pc, #404]	; (8003338 <HAL_ADC_Init+0x2f4>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f7ff fdbf 	bl	8002d2c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80031ae:	f7ff fdb1 	bl	8002d14 <HAL_GetREVID>
 80031b2:	4602      	mov	r2, r0
 80031b4:	f241 0303 	movw	r3, #4099	; 0x1003
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d914      	bls.n	80031e6 <HAL_ADC_Init+0x1a2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d110      	bne.n	80031e6 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7d5b      	ldrb	r3, [r3, #21]
 80031c8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031ce:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031d4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	7f1b      	ldrb	r3, [r3, #28]
 80031da:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80031dc:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031de:	f043 030c 	orr.w	r3, r3, #12
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	e00d      	b.n	8003202 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7d5b      	ldrb	r3, [r3, #21]
 80031ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031f0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	7f1b      	ldrb	r3, [r3, #28]
 80031fc:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7f1b      	ldrb	r3, [r3, #28]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d106      	bne.n	8003218 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	3b01      	subs	r3, #1
 8003210:	045b      	lsls	r3, r3, #17
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	2b00      	cmp	r3, #0
 800321e:	d009      	beq.n	8003234 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	4b40      	ldr	r3, [pc, #256]	; (800333c <HAL_ADC_Init+0x2f8>)
 800323c:	4013      	ands	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	69b9      	ldr	r1, [r7, #24]
 8003244:	430b      	orrs	r3, r1
 8003246:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fed2 	bl	8002ff6 <LL_ADC_REG_IsConversionOngoing>
 8003252:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fedf 	bl	800301c <LL_ADC_INJ_IsConversionOngoing>
 800325e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d14a      	bne.n	80032fc <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d147      	bne.n	80032fc <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7d1b      	ldrb	r3, [r3, #20]
 8003270:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <HAL_ADC_Init+0x2fc>)
 8003282:	4013      	ands	r3, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	69b9      	ldr	r1, [r7, #24]
 800328a:	430b      	orrs	r3, r1
 800328c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003294:	2b01      	cmp	r3, #1
 8003296:	d11b      	bne.n	80032d0 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	4b27      	ldr	r3, [pc, #156]	; (8003344 <HAL_ADC_Init+0x300>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032ac:	3a01      	subs	r2, #1
 80032ae:	0411      	lsls	r1, r2, #16
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032ba:	4311      	orrs	r1, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032c0:	430a      	orrs	r2, r1
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	611a      	str	r2, [r3, #16]
 80032ce:	e007      	b.n	80032e0 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fb58 	bl	80039ac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d121      	bne.n	8003348 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f023 010f 	bic.w	r1, r3, #15
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	1e5a      	subs	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
 800331c:	e01c      	b.n	8003358 <HAL_ADC_Init+0x314>
 800331e:	bf00      	nop
 8003320:	24000000 	.word	0x24000000
 8003324:	053e2d63 	.word	0x053e2d63
 8003328:	40022000 	.word	0x40022000
 800332c:	40022100 	.word	0x40022100
 8003330:	58026000 	.word	0x58026000
 8003334:	40022300 	.word	0x40022300
 8003338:	58026300 	.word	0x58026300
 800333c:	fff0c003 	.word	0xfff0c003
 8003340:	ffffbffc 	.word	0xffffbffc
 8003344:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 020f 	bic.w	r2, r2, #15
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	f023 0303 	bic.w	r3, r3, #3
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	655a      	str	r2, [r3, #84]	; 0x54
 8003368:	e007      	b.n	800337a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336e:	f043 0210 	orr.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800337a:	7ffb      	ldrb	r3, [r7, #31]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3724      	adds	r7, #36	; 0x24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd90      	pop	{r4, r7, pc}

08003384 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b099      	sub	sp, #100	; 0x64
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4a99      	ldr	r2, [pc, #612]	; (8003604 <HAL_ADC_ConfigChannel+0x280>)
 800339e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x2a>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e2e6      	b.n	800397c <HAL_ADC_ConfigChannel+0x5f8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fe1b 	bl	8002ff6 <LL_ADC_REG_IsConversionOngoing>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 82cb 	bne.w	800395e <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d108      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x62>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	0e9b      	lsrs	r3, r3, #26
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2201      	movs	r2, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	e00f      	b.n	8003406 <HAL_ADC_ConfigChannel+0x82>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	2201      	movs	r2, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	69d1      	ldr	r1, [r2, #28]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	430b      	orrs	r3, r1
 8003412:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	f7ff fd0b 	bl	8002e3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fde3 	bl	8002ff6 <LL_ADC_REG_IsConversionOngoing>
 8003430:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fdf0 	bl	800301c <LL_ADC_INJ_IsConversionOngoing>
 800343c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800343e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003440:	2b00      	cmp	r3, #0
 8003442:	f040 80b3 	bne.w	80035ac <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003448:	2b00      	cmp	r3, #0
 800344a:	f040 80af 	bne.w	80035ac <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6819      	ldr	r1, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	461a      	mov	r2, r3
 800345c:	f7ff fd1a 	bl	8002e94 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003460:	4b69      	ldr	r3, [pc, #420]	; (8003608 <HAL_ADC_ConfigChannel+0x284>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800346c:	d10b      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x102>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	e01d      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x13e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x128>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	e00a      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x13e>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d027      	beq.n	800351c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	6919      	ldr	r1, [r3, #16]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034da:	f7ff fc5b 	bl	8002d94 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6919      	ldr	r1, [r3, #16]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	7e5b      	ldrb	r3, [r3, #25]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d102      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x170>
 80034ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80034f2:	e000      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x172>
 80034f4:	2300      	movs	r3, #0
 80034f6:	461a      	mov	r2, r3
 80034f8:	f7ff fc85 	bl	8002e06 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6919      	ldr	r1, [r3, #16]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	7e1b      	ldrb	r3, [r3, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d102      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x18e>
 800350c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003510:	e000      	b.n	8003514 <HAL_ADC_ConfigChannel+0x190>
 8003512:	2300      	movs	r3, #0
 8003514:	461a      	mov	r2, r3
 8003516:	f7ff fc5d 	bl	8002dd4 <LL_ADC_SetDataRightShift>
 800351a:	e047      	b.n	80035ac <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003522:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	069b      	lsls	r3, r3, #26
 800352c:	429a      	cmp	r2, r3
 800352e:	d107      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800353e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	069b      	lsls	r3, r3, #26
 8003550:	429a      	cmp	r2, r3
 8003552:	d107      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003562:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800356a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	069b      	lsls	r3, r3, #26
 8003574:	429a      	cmp	r2, r3
 8003576:	d107      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003586:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	069b      	lsls	r3, r3, #26
 8003598:	429a      	cmp	r2, r3
 800359a:	d107      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fd0d 	bl	8002fd0 <LL_ADC_IsEnabled>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f040 81d9 	bne.w	8003970 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f7ff fc8e 	bl	8002eec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <HAL_ADC_ConfigChannel+0x280>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	f040 8101 	bne.w	80037de <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10f      	bne.n	800360c <HAL_ADC_ConfigChannel+0x288>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	0e9b      	lsrs	r3, r3, #26
 80035f2:	3301      	adds	r3, #1
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2b09      	cmp	r3, #9
 80035fa:	bf94      	ite	ls
 80035fc:	2301      	movls	r3, #1
 80035fe:	2300      	movhi	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e016      	b.n	8003632 <HAL_ADC_ConfigChannel+0x2ae>
 8003604:	47ff0000 	.word	0x47ff0000
 8003608:	5c001000 	.word	0x5c001000
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003614:	fa93 f3a3 	rbit	r3, r3
 8003618:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800361a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800361c:	fab3 f383 	clz	r3, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	3301      	adds	r3, #1
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	2b09      	cmp	r3, #9
 800362a:	bf94      	ite	ls
 800362c:	2301      	movls	r3, #1
 800362e:	2300      	movhi	r3, #0
 8003630:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003632:	2b00      	cmp	r3, #0
 8003634:	d064      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800363e:	2b00      	cmp	r3, #0
 8003640:	d107      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x2ce>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0e9b      	lsrs	r3, r3, #26
 8003648:	3301      	adds	r3, #1
 800364a:	069b      	lsls	r3, r3, #26
 800364c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003650:	e00e      	b.n	8003670 <HAL_ADC_ConfigChannel+0x2ec>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	3301      	adds	r3, #1
 800366a:	069b      	lsls	r3, r3, #26
 800366c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x30c>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	0e9b      	lsrs	r3, r3, #26
 8003682:	3301      	adds	r3, #1
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2101      	movs	r1, #1
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	e010      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x32e>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	ea42 0103 	orr.w	r1, r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x354>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	0e9b      	lsrs	r3, r3, #26
 80036c8:	3301      	adds	r3, #1
 80036ca:	f003 021f 	and.w	r2, r3, #31
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	051b      	lsls	r3, r3, #20
 80036d6:	e011      	b.n	80036fc <HAL_ADC_ConfigChannel+0x378>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	3301      	adds	r3, #1
 80036f0:	f003 021f 	and.w	r2, r3, #31
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036fc:	430b      	orrs	r3, r1
 80036fe:	e069      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_ADC_ConfigChannel+0x398>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	3301      	adds	r3, #1
 8003714:	069b      	lsls	r3, r3, #26
 8003716:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800371a:	e00e      	b.n	800373a <HAL_ADC_ConfigChannel+0x3b6>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	61fb      	str	r3, [r7, #28]
  return result;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fab3 f383 	clz	r3, r3
 8003730:	b2db      	uxtb	r3, r3
 8003732:	3301      	adds	r3, #1
 8003734:	069b      	lsls	r3, r3, #26
 8003736:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_ADC_ConfigChannel+0x3d6>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0e9b      	lsrs	r3, r3, #26
 800374c:	3301      	adds	r3, #1
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	2101      	movs	r1, #1
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	e010      	b.n	800377c <HAL_ADC_ConfigChannel+0x3f8>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	617b      	str	r3, [r7, #20]
  return result;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2101      	movs	r1, #1
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	ea42 0103 	orr.w	r1, r2, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10d      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x424>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0e9b      	lsrs	r3, r3, #26
 8003792:	3301      	adds	r3, #1
 8003794:	f003 021f 	and.w	r2, r3, #31
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	3b1e      	subs	r3, #30
 80037a0:	051b      	lsls	r3, r3, #20
 80037a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037a6:	e014      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x44e>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	60fb      	str	r3, [r7, #12]
  return result;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	3301      	adds	r3, #1
 80037c0:	f003 021f 	and.w	r2, r3, #31
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	3b1e      	subs	r3, #30
 80037cc:	051b      	lsls	r3, r3, #20
 80037ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037d2:	430b      	orrs	r3, r1
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	6892      	ldr	r2, [r2, #8]
 80037d8:	4619      	mov	r1, r3
 80037da:	f7ff fb5b 	bl	8002e94 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f280 80c4 	bge.w	8003970 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a65      	ldr	r2, [pc, #404]	; (8003984 <HAL_ADC_ConfigChannel+0x600>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_ADC_ConfigChannel+0x478>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a64      	ldr	r2, [pc, #400]	; (8003988 <HAL_ADC_ConfigChannel+0x604>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x47c>
 80037fc:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_ADC_ConfigChannel+0x608>)
 80037fe:	e000      	b.n	8003802 <HAL_ADC_ConfigChannel+0x47e>
 8003800:	4b63      	ldr	r3, [pc, #396]	; (8003990 <HAL_ADC_ConfigChannel+0x60c>)
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fab8 	bl	8002d78 <LL_ADC_GetCommonPathInternalCh>
 8003808:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a5d      	ldr	r2, [pc, #372]	; (8003984 <HAL_ADC_ConfigChannel+0x600>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_ADC_ConfigChannel+0x49a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5b      	ldr	r2, [pc, #364]	; (8003988 <HAL_ADC_ConfigChannel+0x604>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10e      	bne.n	800383c <HAL_ADC_ConfigChannel+0x4b8>
 800381e:	4859      	ldr	r0, [pc, #356]	; (8003984 <HAL_ADC_ConfigChannel+0x600>)
 8003820:	f7ff fbd6 	bl	8002fd0 <LL_ADC_IsEnabled>
 8003824:	4604      	mov	r4, r0
 8003826:	4858      	ldr	r0, [pc, #352]	; (8003988 <HAL_ADC_ConfigChannel+0x604>)
 8003828:	f7ff fbd2 	bl	8002fd0 <LL_ADC_IsEnabled>
 800382c:	4603      	mov	r3, r0
 800382e:	4323      	orrs	r3, r4
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e008      	b.n	800384e <HAL_ADC_ConfigChannel+0x4ca>
 800383c:	4855      	ldr	r0, [pc, #340]	; (8003994 <HAL_ADC_ConfigChannel+0x610>)
 800383e:	f7ff fbc7 	bl	8002fd0 <LL_ADC_IsEnabled>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d07b      	beq.n	800394a <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a50      	ldr	r2, [pc, #320]	; (8003998 <HAL_ADC_ConfigChannel+0x614>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d12e      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x536>
 800385c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d129      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a4a      	ldr	r2, [pc, #296]	; (8003994 <HAL_ADC_ConfigChannel+0x610>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d17f      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a43      	ldr	r2, [pc, #268]	; (8003984 <HAL_ADC_ConfigChannel+0x600>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_ADC_ConfigChannel+0x500>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a42      	ldr	r2, [pc, #264]	; (8003988 <HAL_ADC_ConfigChannel+0x604>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x504>
 8003884:	4a41      	ldr	r2, [pc, #260]	; (800398c <HAL_ADC_ConfigChannel+0x608>)
 8003886:	e000      	b.n	800388a <HAL_ADC_ConfigChannel+0x506>
 8003888:	4a41      	ldr	r2, [pc, #260]	; (8003990 <HAL_ADC_ConfigChannel+0x60c>)
 800388a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f7ff fa5d 	bl	8002d52 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003898:	4b40      	ldr	r3, [pc, #256]	; (800399c <HAL_ADC_ConfigChannel+0x618>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	099b      	lsrs	r3, r3, #6
 800389e:	4a40      	ldr	r2, [pc, #256]	; (80039a0 <HAL_ADC_ConfigChannel+0x61c>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	099b      	lsrs	r3, r3, #6
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038aa:	e002      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f9      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038b8:	e05a      	b.n	8003970 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a39      	ldr	r2, [pc, #228]	; (80039a4 <HAL_ADC_ConfigChannel+0x620>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d11e      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x57e>
 80038c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d119      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a30      	ldr	r2, [pc, #192]	; (8003994 <HAL_ADC_ConfigChannel+0x610>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d14b      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <HAL_ADC_ConfigChannel+0x600>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d004      	beq.n	80038ec <HAL_ADC_ConfigChannel+0x568>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a28      	ldr	r2, [pc, #160]	; (8003988 <HAL_ADC_ConfigChannel+0x604>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d101      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x56c>
 80038ec:	4a27      	ldr	r2, [pc, #156]	; (800398c <HAL_ADC_ConfigChannel+0x608>)
 80038ee:	e000      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x56e>
 80038f0:	4a27      	ldr	r2, [pc, #156]	; (8003990 <HAL_ADC_ConfigChannel+0x60c>)
 80038f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f7ff fa29 	bl	8002d52 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003900:	e036      	b.n	8003970 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a28      	ldr	r2, [pc, #160]	; (80039a8 <HAL_ADC_ConfigChannel+0x624>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d131      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x5ec>
 800390c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d12c      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <HAL_ADC_ConfigChannel+0x610>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d127      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a17      	ldr	r2, [pc, #92]	; (8003984 <HAL_ADC_ConfigChannel+0x600>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_ADC_ConfigChannel+0x5b0>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a16      	ldr	r2, [pc, #88]	; (8003988 <HAL_ADC_ConfigChannel+0x604>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x5b4>
 8003934:	4a15      	ldr	r2, [pc, #84]	; (800398c <HAL_ADC_ConfigChannel+0x608>)
 8003936:	e000      	b.n	800393a <HAL_ADC_ConfigChannel+0x5b6>
 8003938:	4a15      	ldr	r2, [pc, #84]	; (8003990 <HAL_ADC_ConfigChannel+0x60c>)
 800393a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f7ff fa05 	bl	8002d52 <LL_ADC_SetCommonPathInternalCh>
 8003948:	e012      	b.n	8003970 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800395c:	e008      	b.n	8003970 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003978:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800397c:	4618      	mov	r0, r3
 800397e:	3764      	adds	r7, #100	; 0x64
 8003980:	46bd      	mov	sp, r7
 8003982:	bd90      	pop	{r4, r7, pc}
 8003984:	40022000 	.word	0x40022000
 8003988:	40022100 	.word	0x40022100
 800398c:	40022300 	.word	0x40022300
 8003990:	58026300 	.word	0x58026300
 8003994:	58026000 	.word	0x58026000
 8003998:	cb840000 	.word	0xcb840000
 800399c:	24000000 	.word	0x24000000
 80039a0:	053e2d63 	.word	0x053e2d63
 80039a4:	c7520000 	.word	0xc7520000
 80039a8:	cfb80000 	.word	0xcfb80000

080039ac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a70      	ldr	r2, [pc, #448]	; (8003b7c <ADC_ConfigureBoostMode+0x1d0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d004      	beq.n	80039c8 <ADC_ConfigureBoostMode+0x1c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a6f      	ldr	r2, [pc, #444]	; (8003b80 <ADC_ConfigureBoostMode+0x1d4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d109      	bne.n	80039dc <ADC_ConfigureBoostMode+0x30>
 80039c8:	4b6e      	ldr	r3, [pc, #440]	; (8003b84 <ADC_ConfigureBoostMode+0x1d8>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	e008      	b.n	80039ee <ADC_ConfigureBoostMode+0x42>
 80039dc:	4b6a      	ldr	r3, [pc, #424]	; (8003b88 <ADC_ConfigureBoostMode+0x1dc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d01a      	beq.n	8003a28 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039f2:	f005 f919 	bl	8008c28 <HAL_RCC_GetHCLKFreq>
 80039f6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a00:	d006      	beq.n	8003a10 <ADC_ConfigureBoostMode+0x64>
 8003a02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a06:	d00b      	beq.n	8003a20 <ADC_ConfigureBoostMode+0x74>
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d000      	beq.n	8003a10 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003a0e:	e05d      	b.n	8003acc <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	60fb      	str	r3, [r7, #12]
        break;
 8003a1e:	e055      	b.n	8003acc <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	60fb      	str	r3, [r7, #12]
        break;
 8003a26:	e051      	b.n	8003acc <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003a28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003a2c:	f006 f888 	bl	8009b40 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a30:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a3a:	d02a      	beq.n	8003a92 <ADC_ConfigureBoostMode+0xe6>
 8003a3c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a40:	d813      	bhi.n	8003a6a <ADC_ConfigureBoostMode+0xbe>
 8003a42:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a46:	d024      	beq.n	8003a92 <ADC_ConfigureBoostMode+0xe6>
 8003a48:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a4c:	d806      	bhi.n	8003a5c <ADC_ConfigureBoostMode+0xb0>
 8003a4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a52:	d01e      	beq.n	8003a92 <ADC_ConfigureBoostMode+0xe6>
 8003a54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a58:	d01b      	beq.n	8003a92 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8003a5a:	e037      	b.n	8003acc <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a60:	d017      	beq.n	8003a92 <ADC_ConfigureBoostMode+0xe6>
 8003a62:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a66:	d014      	beq.n	8003a92 <ADC_ConfigureBoostMode+0xe6>
        break;
 8003a68:	e030      	b.n	8003acc <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003a6a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a6e:	d021      	beq.n	8003ab4 <ADC_ConfigureBoostMode+0x108>
 8003a70:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a74:	d806      	bhi.n	8003a84 <ADC_ConfigureBoostMode+0xd8>
 8003a76:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a7a:	d013      	beq.n	8003aa4 <ADC_ConfigureBoostMode+0xf8>
 8003a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a80:	d014      	beq.n	8003aac <ADC_ConfigureBoostMode+0x100>
        break;
 8003a82:	e023      	b.n	8003acc <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003a84:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a88:	d018      	beq.n	8003abc <ADC_ConfigureBoostMode+0x110>
 8003a8a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a8e:	d019      	beq.n	8003ac4 <ADC_ConfigureBoostMode+0x118>
        break;
 8003a90:	e01c      	b.n	8003acc <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	0c9b      	lsrs	r3, r3, #18
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	60fb      	str	r3, [r7, #12]
        break;
 8003aa2:	e013      	b.n	8003acc <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	60fb      	str	r3, [r7, #12]
        break;
 8003aaa:	e00f      	b.n	8003acc <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	60fb      	str	r3, [r7, #12]
        break;
 8003ab2:	e00b      	b.n	8003acc <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	099b      	lsrs	r3, r3, #6
 8003ab8:	60fb      	str	r3, [r7, #12]
        break;
 8003aba:	e007      	b.n	8003acc <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	09db      	lsrs	r3, r3, #7
 8003ac0:	60fb      	str	r3, [r7, #12]
        break;
 8003ac2:	e003      	b.n	8003acc <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	0a1b      	lsrs	r3, r3, #8
 8003ac8:	60fb      	str	r3, [r7, #12]
        break;
 8003aca:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003acc:	f7ff f922 	bl	8002d14 <HAL_GetREVID>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d815      	bhi.n	8003b06 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a2b      	ldr	r2, [pc, #172]	; (8003b8c <ADC_ConfigureBoostMode+0x1e0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d908      	bls.n	8003af4 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003af2:	e03e      	b.n	8003b72 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	e035      	b.n	8003b72 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <ADC_ConfigureBoostMode+0x1e4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d808      	bhi.n	8003b26 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b22:	609a      	str	r2, [r3, #8]
}
 8003b24:	e025      	b.n	8003b72 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4a1a      	ldr	r2, [pc, #104]	; (8003b94 <ADC_ConfigureBoostMode+0x1e8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d80a      	bhi.n	8003b44 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b40:	609a      	str	r2, [r3, #8]
}
 8003b42:	e016      	b.n	8003b72 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <ADC_ConfigureBoostMode+0x1ec>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d80a      	bhi.n	8003b62 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5e:	609a      	str	r2, [r3, #8]
}
 8003b60:	e007      	b.n	8003b72 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b70:	609a      	str	r2, [r3, #8]
}
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	40022100 	.word	0x40022100
 8003b84:	40022300 	.word	0x40022300
 8003b88:	58026300 	.word	0x58026300
 8003b8c:	01312d00 	.word	0x01312d00
 8003b90:	005f5e10 	.word	0x005f5e10
 8003b94:	00bebc20 	.word	0x00bebc20
 8003b98:	017d7840 	.word	0x017d7840

08003b9c <LL_ADC_IsEnabled>:
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <LL_ADC_IsEnabled+0x18>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <LL_ADC_IsEnabled+0x1a>
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d101      	bne.n	8003bda <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003be8:	b590      	push	{r4, r7, lr}
 8003bea:	b09f      	sub	sp, #124	; 0x7c
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e0ba      	b.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a5c      	ldr	r2, [pc, #368]	; (8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d102      	bne.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003c18:	4b5b      	ldr	r3, [pc, #364]	; (8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	e001      	b.n	8003c22 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e09d      	b.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff ffbd 	bl	8003bc2 <LL_ADC_REG_IsConversionOngoing>
 8003c48:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff ffb7 	bl	8003bc2 <LL_ADC_REG_IsConversionOngoing>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d17f      	bne.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d17c      	bne.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a47      	ldr	r2, [pc, #284]	; (8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a46      	ldr	r2, [pc, #280]	; (8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003c74:	4b45      	ldr	r3, [pc, #276]	; (8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c76:	e000      	b.n	8003c7a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003c78:	4b45      	ldr	r3, [pc, #276]	; (8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c7a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d039      	beq.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c94:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3a      	ldr	r2, [pc, #232]	; (8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a38      	ldr	r2, [pc, #224]	; (8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d10e      	bne.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003caa:	4836      	ldr	r0, [pc, #216]	; (8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003cac:	f7ff ff76 	bl	8003b9c <LL_ADC_IsEnabled>
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	4835      	ldr	r0, [pc, #212]	; (8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003cb4:	f7ff ff72 	bl	8003b9c <LL_ADC_IsEnabled>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	4323      	orrs	r3, r4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e008      	b.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003cc8:	4832      	ldr	r0, [pc, #200]	; (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003cca:	f7ff ff67 	bl	8003b9c <LL_ADC_IsEnabled>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d047      	beq.n	8003d6e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	4b2d      	ldr	r3, [pc, #180]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	6811      	ldr	r1, [r2, #0]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	6892      	ldr	r2, [r2, #8]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cf6:	e03a      	b.n	8003d6e <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d02:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d10e      	bne.n	8003d36 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003d18:	481a      	ldr	r0, [pc, #104]	; (8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003d1a:	f7ff ff3f 	bl	8003b9c <LL_ADC_IsEnabled>
 8003d1e:	4604      	mov	r4, r0
 8003d20:	4819      	ldr	r0, [pc, #100]	; (8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003d22:	f7ff ff3b 	bl	8003b9c <LL_ADC_IsEnabled>
 8003d26:	4603      	mov	r3, r0
 8003d28:	4323      	orrs	r3, r4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bf0c      	ite	eq
 8003d2e:	2301      	moveq	r3, #1
 8003d30:	2300      	movne	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	e008      	b.n	8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003d36:	4817      	ldr	r0, [pc, #92]	; (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d38:	f7ff ff30 	bl	8003b9c <LL_ADC_IsEnabled>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf0c      	ite	eq
 8003d42:	2301      	moveq	r3, #1
 8003d44:	2300      	movne	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d010      	beq.n	8003d6e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d56:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d58:	e009      	b.n	8003d6e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003d6c:	e000      	b.n	8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d6e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d78:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	377c      	adds	r7, #124	; 0x7c
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd90      	pop	{r4, r7, pc}
 8003d84:	40022000 	.word	0x40022000
 8003d88:	40022100 	.word	0x40022100
 8003d8c:	40022300 	.word	0x40022300
 8003d90:	58026300 	.word	0x58026300
 8003d94:	58026000 	.word	0x58026000
 8003d98:	fffff0e0 	.word	0xfffff0e0

08003d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <__NVIC_SetPriorityGrouping+0x40>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003db8:	4013      	ands	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dca:	4a04      	ldr	r2, [pc, #16]	; (8003ddc <__NVIC_SetPriorityGrouping+0x40>)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	60d3      	str	r3, [r2, #12]
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00
 8003de0:	05fa0000 	.word	0x05fa0000

08003de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <__NVIC_GetPriorityGrouping+0x18>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	0a1b      	lsrs	r3, r3, #8
 8003dee:	f003 0307 	and.w	r3, r3, #7
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	db0b      	blt.n	8003e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	f003 021f 	and.w	r2, r3, #31
 8003e18:	4907      	ldr	r1, [pc, #28]	; (8003e38 <__NVIC_EnableIRQ+0x38>)
 8003e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2001      	movs	r0, #1
 8003e22:	fa00 f202 	lsl.w	r2, r0, r2
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	e000e100 	.word	0xe000e100

08003e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	db0a      	blt.n	8003e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	490c      	ldr	r1, [pc, #48]	; (8003e88 <__NVIC_SetPriority+0x4c>)
 8003e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e5a:	0112      	lsls	r2, r2, #4
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	440b      	add	r3, r1
 8003e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e64:	e00a      	b.n	8003e7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	4908      	ldr	r1, [pc, #32]	; (8003e8c <__NVIC_SetPriority+0x50>)
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	3b04      	subs	r3, #4
 8003e74:	0112      	lsls	r2, r2, #4
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	440b      	add	r3, r1
 8003e7a:	761a      	strb	r2, [r3, #24]
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	e000e100 	.word	0xe000e100
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b089      	sub	sp, #36	; 0x24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f1c3 0307 	rsb	r3, r3, #7
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	bf28      	it	cs
 8003eae:	2304      	movcs	r3, #4
 8003eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	2b06      	cmp	r3, #6
 8003eb8:	d902      	bls.n	8003ec0 <NVIC_EncodePriority+0x30>
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3b03      	subs	r3, #3
 8003ebe:	e000      	b.n	8003ec2 <NVIC_EncodePriority+0x32>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43da      	mvns	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee2:	43d9      	mvns	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee8:	4313      	orrs	r3, r2
         );
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3724      	adds	r7, #36	; 0x24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff ff4c 	bl	8003d9c <__NVIC_SetPriorityGrouping>
}
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f1a:	f7ff ff63 	bl	8003de4 <__NVIC_GetPriorityGrouping>
 8003f1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	6978      	ldr	r0, [r7, #20]
 8003f26:	f7ff ffb3 	bl	8003e90 <NVIC_EncodePriority>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff82 	bl	8003e3c <__NVIC_SetPriority>
}
 8003f38:	bf00      	nop
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff ff56 	bl	8003e00 <__NVIC_EnableIRQ>
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003f64:	f7fe fea8 	bl	8002cb8 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e316      	b.n	80045a2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a66      	ldr	r2, [pc, #408]	; (8004114 <HAL_DMA_Init+0x1b8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d04a      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a65      	ldr	r2, [pc, #404]	; (8004118 <HAL_DMA_Init+0x1bc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d045      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a63      	ldr	r2, [pc, #396]	; (800411c <HAL_DMA_Init+0x1c0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d040      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a62      	ldr	r2, [pc, #392]	; (8004120 <HAL_DMA_Init+0x1c4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d03b      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a60      	ldr	r2, [pc, #384]	; (8004124 <HAL_DMA_Init+0x1c8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d036      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a5f      	ldr	r2, [pc, #380]	; (8004128 <HAL_DMA_Init+0x1cc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d031      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a5d      	ldr	r2, [pc, #372]	; (800412c <HAL_DMA_Init+0x1d0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d02c      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a5c      	ldr	r2, [pc, #368]	; (8004130 <HAL_DMA_Init+0x1d4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d027      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a5a      	ldr	r2, [pc, #360]	; (8004134 <HAL_DMA_Init+0x1d8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d022      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a59      	ldr	r2, [pc, #356]	; (8004138 <HAL_DMA_Init+0x1dc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d01d      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a57      	ldr	r2, [pc, #348]	; (800413c <HAL_DMA_Init+0x1e0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d018      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a56      	ldr	r2, [pc, #344]	; (8004140 <HAL_DMA_Init+0x1e4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a54      	ldr	r2, [pc, #336]	; (8004144 <HAL_DMA_Init+0x1e8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a53      	ldr	r2, [pc, #332]	; (8004148 <HAL_DMA_Init+0x1ec>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d009      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a51      	ldr	r2, [pc, #324]	; (800414c <HAL_DMA_Init+0x1f0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_DMA_Init+0xb8>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a50      	ldr	r2, [pc, #320]	; (8004150 <HAL_DMA_Init+0x1f4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d101      	bne.n	8004018 <HAL_DMA_Init+0xbc>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_DMA_Init+0xbe>
 8004018:	2300      	movs	r3, #0
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 813b 	beq.w	8004296 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a37      	ldr	r2, [pc, #220]	; (8004114 <HAL_DMA_Init+0x1b8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d04a      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a36      	ldr	r2, [pc, #216]	; (8004118 <HAL_DMA_Init+0x1bc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d045      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a34      	ldr	r2, [pc, #208]	; (800411c <HAL_DMA_Init+0x1c0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d040      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a33      	ldr	r2, [pc, #204]	; (8004120 <HAL_DMA_Init+0x1c4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d03b      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a31      	ldr	r2, [pc, #196]	; (8004124 <HAL_DMA_Init+0x1c8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d036      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a30      	ldr	r2, [pc, #192]	; (8004128 <HAL_DMA_Init+0x1cc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d031      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a2e      	ldr	r2, [pc, #184]	; (800412c <HAL_DMA_Init+0x1d0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d02c      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a2d      	ldr	r2, [pc, #180]	; (8004130 <HAL_DMA_Init+0x1d4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d027      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <HAL_DMA_Init+0x1d8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d022      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2a      	ldr	r2, [pc, #168]	; (8004138 <HAL_DMA_Init+0x1dc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d01d      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a28      	ldr	r2, [pc, #160]	; (800413c <HAL_DMA_Init+0x1e0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d018      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a27      	ldr	r2, [pc, #156]	; (8004140 <HAL_DMA_Init+0x1e4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d013      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a25      	ldr	r2, [pc, #148]	; (8004144 <HAL_DMA_Init+0x1e8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00e      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a24      	ldr	r2, [pc, #144]	; (8004148 <HAL_DMA_Init+0x1ec>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d009      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a22      	ldr	r2, [pc, #136]	; (800414c <HAL_DMA_Init+0x1f0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <HAL_DMA_Init+0x174>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a21      	ldr	r2, [pc, #132]	; (8004150 <HAL_DMA_Init+0x1f4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d108      	bne.n	80040e2 <HAL_DMA_Init+0x186>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	e007      	b.n	80040f2 <HAL_DMA_Init+0x196>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040f2:	e02f      	b.n	8004154 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040f4:	f7fe fde0 	bl	8002cb8 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b05      	cmp	r3, #5
 8004100:	d928      	bls.n	8004154 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2203      	movs	r2, #3
 800410c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e246      	b.n	80045a2 <HAL_DMA_Init+0x646>
 8004114:	40020010 	.word	0x40020010
 8004118:	40020028 	.word	0x40020028
 800411c:	40020040 	.word	0x40020040
 8004120:	40020058 	.word	0x40020058
 8004124:	40020070 	.word	0x40020070
 8004128:	40020088 	.word	0x40020088
 800412c:	400200a0 	.word	0x400200a0
 8004130:	400200b8 	.word	0x400200b8
 8004134:	40020410 	.word	0x40020410
 8004138:	40020428 	.word	0x40020428
 800413c:	40020440 	.word	0x40020440
 8004140:	40020458 	.word	0x40020458
 8004144:	40020470 	.word	0x40020470
 8004148:	40020488 	.word	0x40020488
 800414c:	400204a0 	.word	0x400204a0
 8004150:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1c8      	bne.n	80040f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4b83      	ldr	r3, [pc, #524]	; (800437c <HAL_DMA_Init+0x420>)
 800416e:	4013      	ands	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800417a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004186:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004192:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d107      	bne.n	80041b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	4313      	orrs	r3, r2
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80041b8:	4b71      	ldr	r3, [pc, #452]	; (8004380 <HAL_DMA_Init+0x424>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b71      	ldr	r3, [pc, #452]	; (8004384 <HAL_DMA_Init+0x428>)
 80041be:	4013      	ands	r3, r2
 80041c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c4:	d328      	bcc.n	8004218 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b28      	cmp	r3, #40	; 0x28
 80041cc:	d903      	bls.n	80041d6 <HAL_DMA_Init+0x27a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b2e      	cmp	r3, #46	; 0x2e
 80041d4:	d917      	bls.n	8004206 <HAL_DMA_Init+0x2aa>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b3e      	cmp	r3, #62	; 0x3e
 80041dc:	d903      	bls.n	80041e6 <HAL_DMA_Init+0x28a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b42      	cmp	r3, #66	; 0x42
 80041e4:	d90f      	bls.n	8004206 <HAL_DMA_Init+0x2aa>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b46      	cmp	r3, #70	; 0x46
 80041ec:	d903      	bls.n	80041f6 <HAL_DMA_Init+0x29a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b48      	cmp	r3, #72	; 0x48
 80041f4:	d907      	bls.n	8004206 <HAL_DMA_Init+0x2aa>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b4e      	cmp	r3, #78	; 0x4e
 80041fc:	d905      	bls.n	800420a <HAL_DMA_Init+0x2ae>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b52      	cmp	r3, #82	; 0x52
 8004204:	d801      	bhi.n	800420a <HAL_DMA_Init+0x2ae>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <HAL_DMA_Init+0x2b0>
 800420a:	2300      	movs	r3, #0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004216:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	2b04      	cmp	r3, #4
 8004240:	d117      	bne.n	8004272 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00e      	beq.n	8004272 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f002 f81f 	bl	8006298 <DMA_CheckFifoParam>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2240      	movs	r2, #64	; 0x40
 8004264:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e197      	b.n	80045a2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f001 ff5a 	bl	8006134 <DMA_CalcBaseAndBitshift>
 8004280:	4603      	mov	r3, r0
 8004282:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	223f      	movs	r2, #63	; 0x3f
 800428e:	409a      	lsls	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	e0cd      	b.n	8004432 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a3b      	ldr	r2, [pc, #236]	; (8004388 <HAL_DMA_Init+0x42c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d022      	beq.n	80042e6 <HAL_DMA_Init+0x38a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a39      	ldr	r2, [pc, #228]	; (800438c <HAL_DMA_Init+0x430>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01d      	beq.n	80042e6 <HAL_DMA_Init+0x38a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a38      	ldr	r2, [pc, #224]	; (8004390 <HAL_DMA_Init+0x434>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d018      	beq.n	80042e6 <HAL_DMA_Init+0x38a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a36      	ldr	r2, [pc, #216]	; (8004394 <HAL_DMA_Init+0x438>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_DMA_Init+0x38a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a35      	ldr	r2, [pc, #212]	; (8004398 <HAL_DMA_Init+0x43c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00e      	beq.n	80042e6 <HAL_DMA_Init+0x38a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a33      	ldr	r2, [pc, #204]	; (800439c <HAL_DMA_Init+0x440>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d009      	beq.n	80042e6 <HAL_DMA_Init+0x38a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a32      	ldr	r2, [pc, #200]	; (80043a0 <HAL_DMA_Init+0x444>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <HAL_DMA_Init+0x38a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a30      	ldr	r2, [pc, #192]	; (80043a4 <HAL_DMA_Init+0x448>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d101      	bne.n	80042ea <HAL_DMA_Init+0x38e>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <HAL_DMA_Init+0x390>
 80042ea:	2300      	movs	r3, #0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8097 	beq.w	8004420 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a24      	ldr	r2, [pc, #144]	; (8004388 <HAL_DMA_Init+0x42c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d021      	beq.n	8004340 <HAL_DMA_Init+0x3e4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a22      	ldr	r2, [pc, #136]	; (800438c <HAL_DMA_Init+0x430>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01c      	beq.n	8004340 <HAL_DMA_Init+0x3e4>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a21      	ldr	r2, [pc, #132]	; (8004390 <HAL_DMA_Init+0x434>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d017      	beq.n	8004340 <HAL_DMA_Init+0x3e4>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <HAL_DMA_Init+0x438>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d012      	beq.n	8004340 <HAL_DMA_Init+0x3e4>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1e      	ldr	r2, [pc, #120]	; (8004398 <HAL_DMA_Init+0x43c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00d      	beq.n	8004340 <HAL_DMA_Init+0x3e4>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <HAL_DMA_Init+0x440>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d008      	beq.n	8004340 <HAL_DMA_Init+0x3e4>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <HAL_DMA_Init+0x444>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d003      	beq.n	8004340 <HAL_DMA_Init+0x3e4>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <HAL_DMA_Init+0x448>)
 800433e:	4293      	cmp	r3, r2
 8004340:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <HAL_DMA_Init+0x44c>)
 800435e:	4013      	ands	r3, r2
 8004360:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b40      	cmp	r3, #64	; 0x40
 8004368:	d020      	beq.n	80043ac <HAL_DMA_Init+0x450>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b80      	cmp	r3, #128	; 0x80
 8004370:	d102      	bne.n	8004378 <HAL_DMA_Init+0x41c>
 8004372:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004376:	e01a      	b.n	80043ae <HAL_DMA_Init+0x452>
 8004378:	2300      	movs	r3, #0
 800437a:	e018      	b.n	80043ae <HAL_DMA_Init+0x452>
 800437c:	fe10803f 	.word	0xfe10803f
 8004380:	5c001000 	.word	0x5c001000
 8004384:	ffff0000 	.word	0xffff0000
 8004388:	58025408 	.word	0x58025408
 800438c:	5802541c 	.word	0x5802541c
 8004390:	58025430 	.word	0x58025430
 8004394:	58025444 	.word	0x58025444
 8004398:	58025458 	.word	0x58025458
 800439c:	5802546c 	.word	0x5802546c
 80043a0:	58025480 	.word	0x58025480
 80043a4:	58025494 	.word	0x58025494
 80043a8:	fffe000f 	.word	0xfffe000f
 80043ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68d2      	ldr	r2, [r2, #12]
 80043b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b6e      	ldr	r3, [pc, #440]	; (80045ac <HAL_DMA_Init+0x650>)
 80043f4:	4413      	add	r3, r2
 80043f6:	4a6e      	ldr	r2, [pc, #440]	; (80045b0 <HAL_DMA_Init+0x654>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	009a      	lsls	r2, r3, #2
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f001 fe95 	bl	8006134 <DMA_CalcBaseAndBitshift>
 800440a:	4603      	mov	r3, r0
 800440c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2201      	movs	r2, #1
 8004418:	409a      	lsls	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	e008      	b.n	8004432 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2240      	movs	r2, #64	; 0x40
 8004424:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2203      	movs	r2, #3
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e0b7      	b.n	80045a2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a5f      	ldr	r2, [pc, #380]	; (80045b4 <HAL_DMA_Init+0x658>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d072      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a5d      	ldr	r2, [pc, #372]	; (80045b8 <HAL_DMA_Init+0x65c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d06d      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a5c      	ldr	r2, [pc, #368]	; (80045bc <HAL_DMA_Init+0x660>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d068      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a5a      	ldr	r2, [pc, #360]	; (80045c0 <HAL_DMA_Init+0x664>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d063      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a59      	ldr	r2, [pc, #356]	; (80045c4 <HAL_DMA_Init+0x668>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d05e      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a57      	ldr	r2, [pc, #348]	; (80045c8 <HAL_DMA_Init+0x66c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d059      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a56      	ldr	r2, [pc, #344]	; (80045cc <HAL_DMA_Init+0x670>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d054      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a54      	ldr	r2, [pc, #336]	; (80045d0 <HAL_DMA_Init+0x674>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d04f      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a53      	ldr	r2, [pc, #332]	; (80045d4 <HAL_DMA_Init+0x678>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d04a      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a51      	ldr	r2, [pc, #324]	; (80045d8 <HAL_DMA_Init+0x67c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d045      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a50      	ldr	r2, [pc, #320]	; (80045dc <HAL_DMA_Init+0x680>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d040      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a4e      	ldr	r2, [pc, #312]	; (80045e0 <HAL_DMA_Init+0x684>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d03b      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4d      	ldr	r2, [pc, #308]	; (80045e4 <HAL_DMA_Init+0x688>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d036      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a4b      	ldr	r2, [pc, #300]	; (80045e8 <HAL_DMA_Init+0x68c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d031      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a4a      	ldr	r2, [pc, #296]	; (80045ec <HAL_DMA_Init+0x690>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d02c      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a48      	ldr	r2, [pc, #288]	; (80045f0 <HAL_DMA_Init+0x694>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d027      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a47      	ldr	r2, [pc, #284]	; (80045f4 <HAL_DMA_Init+0x698>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a45      	ldr	r2, [pc, #276]	; (80045f8 <HAL_DMA_Init+0x69c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01d      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a44      	ldr	r2, [pc, #272]	; (80045fc <HAL_DMA_Init+0x6a0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a42      	ldr	r2, [pc, #264]	; (8004600 <HAL_DMA_Init+0x6a4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a41      	ldr	r2, [pc, #260]	; (8004604 <HAL_DMA_Init+0x6a8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a3f      	ldr	r2, [pc, #252]	; (8004608 <HAL_DMA_Init+0x6ac>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a3e      	ldr	r2, [pc, #248]	; (800460c <HAL_DMA_Init+0x6b0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_DMA_Init+0x5c6>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a3c      	ldr	r2, [pc, #240]	; (8004610 <HAL_DMA_Init+0x6b4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d101      	bne.n	8004526 <HAL_DMA_Init+0x5ca>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <HAL_DMA_Init+0x5cc>
 8004526:	2300      	movs	r3, #0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d032      	beq.n	8004592 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f001 ff2f 	bl	8006390 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b80      	cmp	r3, #128	; 0x80
 8004538:	d102      	bne.n	8004540 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004554:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d010      	beq.n	8004580 <HAL_DMA_Init+0x624>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b08      	cmp	r3, #8
 8004564:	d80c      	bhi.n	8004580 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f001 ffac 	bl	80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800457c:	605a      	str	r2, [r3, #4]
 800457e:	e008      	b.n	8004592 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	a7fdabf8 	.word	0xa7fdabf8
 80045b0:	cccccccd 	.word	0xcccccccd
 80045b4:	40020010 	.word	0x40020010
 80045b8:	40020028 	.word	0x40020028
 80045bc:	40020040 	.word	0x40020040
 80045c0:	40020058 	.word	0x40020058
 80045c4:	40020070 	.word	0x40020070
 80045c8:	40020088 	.word	0x40020088
 80045cc:	400200a0 	.word	0x400200a0
 80045d0:	400200b8 	.word	0x400200b8
 80045d4:	40020410 	.word	0x40020410
 80045d8:	40020428 	.word	0x40020428
 80045dc:	40020440 	.word	0x40020440
 80045e0:	40020458 	.word	0x40020458
 80045e4:	40020470 	.word	0x40020470
 80045e8:	40020488 	.word	0x40020488
 80045ec:	400204a0 	.word	0x400204a0
 80045f0:	400204b8 	.word	0x400204b8
 80045f4:	58025408 	.word	0x58025408
 80045f8:	5802541c 	.word	0x5802541c
 80045fc:	58025430 	.word	0x58025430
 8004600:	58025444 	.word	0x58025444
 8004604:	58025458 	.word	0x58025458
 8004608:	5802546c 	.word	0x5802546c
 800460c:	58025480 	.word	0x58025480
 8004610:	58025494 	.word	0x58025494

08004614 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e226      	b.n	8004a7e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_DMA_Start_IT+0x2a>
 800463a:	2302      	movs	r3, #2
 800463c:	e21f      	b.n	8004a7e <HAL_DMA_Start_IT+0x46a>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	f040 820a 	bne.w	8004a68 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a68      	ldr	r2, [pc, #416]	; (8004808 <HAL_DMA_Start_IT+0x1f4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d04a      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a66      	ldr	r2, [pc, #408]	; (800480c <HAL_DMA_Start_IT+0x1f8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d045      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a65      	ldr	r2, [pc, #404]	; (8004810 <HAL_DMA_Start_IT+0x1fc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d040      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a63      	ldr	r2, [pc, #396]	; (8004814 <HAL_DMA_Start_IT+0x200>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d03b      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a62      	ldr	r2, [pc, #392]	; (8004818 <HAL_DMA_Start_IT+0x204>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d036      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a60      	ldr	r2, [pc, #384]	; (800481c <HAL_DMA_Start_IT+0x208>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d031      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a5f      	ldr	r2, [pc, #380]	; (8004820 <HAL_DMA_Start_IT+0x20c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d02c      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a5d      	ldr	r2, [pc, #372]	; (8004824 <HAL_DMA_Start_IT+0x210>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d027      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a5c      	ldr	r2, [pc, #368]	; (8004828 <HAL_DMA_Start_IT+0x214>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d022      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5a      	ldr	r2, [pc, #360]	; (800482c <HAL_DMA_Start_IT+0x218>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01d      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a59      	ldr	r2, [pc, #356]	; (8004830 <HAL_DMA_Start_IT+0x21c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a57      	ldr	r2, [pc, #348]	; (8004834 <HAL_DMA_Start_IT+0x220>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a56      	ldr	r2, [pc, #344]	; (8004838 <HAL_DMA_Start_IT+0x224>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a54      	ldr	r2, [pc, #336]	; (800483c <HAL_DMA_Start_IT+0x228>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a53      	ldr	r2, [pc, #332]	; (8004840 <HAL_DMA_Start_IT+0x22c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_DMA_Start_IT+0xee>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a51      	ldr	r2, [pc, #324]	; (8004844 <HAL_DMA_Start_IT+0x230>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d108      	bne.n	8004714 <HAL_DMA_Start_IT+0x100>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e007      	b.n	8004724 <HAL_DMA_Start_IT+0x110>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f001 fb56 	bl	8005ddc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a34      	ldr	r2, [pc, #208]	; (8004808 <HAL_DMA_Start_IT+0x1f4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d04a      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a33      	ldr	r2, [pc, #204]	; (800480c <HAL_DMA_Start_IT+0x1f8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d045      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a31      	ldr	r2, [pc, #196]	; (8004810 <HAL_DMA_Start_IT+0x1fc>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d040      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a30      	ldr	r2, [pc, #192]	; (8004814 <HAL_DMA_Start_IT+0x200>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d03b      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2e      	ldr	r2, [pc, #184]	; (8004818 <HAL_DMA_Start_IT+0x204>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d036      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2d      	ldr	r2, [pc, #180]	; (800481c <HAL_DMA_Start_IT+0x208>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d031      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2b      	ldr	r2, [pc, #172]	; (8004820 <HAL_DMA_Start_IT+0x20c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d02c      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2a      	ldr	r2, [pc, #168]	; (8004824 <HAL_DMA_Start_IT+0x210>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d027      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a28      	ldr	r2, [pc, #160]	; (8004828 <HAL_DMA_Start_IT+0x214>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d022      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a27      	ldr	r2, [pc, #156]	; (800482c <HAL_DMA_Start_IT+0x218>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d01d      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a25      	ldr	r2, [pc, #148]	; (8004830 <HAL_DMA_Start_IT+0x21c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d018      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a24      	ldr	r2, [pc, #144]	; (8004834 <HAL_DMA_Start_IT+0x220>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d013      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a22      	ldr	r2, [pc, #136]	; (8004838 <HAL_DMA_Start_IT+0x224>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00e      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a21      	ldr	r2, [pc, #132]	; (800483c <HAL_DMA_Start_IT+0x228>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d009      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1f      	ldr	r2, [pc, #124]	; (8004840 <HAL_DMA_Start_IT+0x22c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_DMA_Start_IT+0x1bc>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <HAL_DMA_Start_IT+0x230>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d101      	bne.n	80047d4 <HAL_DMA_Start_IT+0x1c0>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <HAL_DMA_Start_IT+0x1c2>
 80047d4:	2300      	movs	r3, #0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d036      	beq.n	8004848 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f023 021e 	bic.w	r2, r3, #30
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0216 	orr.w	r2, r2, #22
 80047ec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d03e      	beq.n	8004874 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0208 	orr.w	r2, r2, #8
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e035      	b.n	8004874 <HAL_DMA_Start_IT+0x260>
 8004808:	40020010 	.word	0x40020010
 800480c:	40020028 	.word	0x40020028
 8004810:	40020040 	.word	0x40020040
 8004814:	40020058 	.word	0x40020058
 8004818:	40020070 	.word	0x40020070
 800481c:	40020088 	.word	0x40020088
 8004820:	400200a0 	.word	0x400200a0
 8004824:	400200b8 	.word	0x400200b8
 8004828:	40020410 	.word	0x40020410
 800482c:	40020428 	.word	0x40020428
 8004830:	40020440 	.word	0x40020440
 8004834:	40020458 	.word	0x40020458
 8004838:	40020470 	.word	0x40020470
 800483c:	40020488 	.word	0x40020488
 8004840:	400204a0 	.word	0x400204a0
 8004844:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 020e 	bic.w	r2, r3, #14
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 020a 	orr.w	r2, r2, #10
 800485a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0204 	orr.w	r2, r2, #4
 8004872:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a83      	ldr	r2, [pc, #524]	; (8004a88 <HAL_DMA_Start_IT+0x474>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d072      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a82      	ldr	r2, [pc, #520]	; (8004a8c <HAL_DMA_Start_IT+0x478>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d06d      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a80      	ldr	r2, [pc, #512]	; (8004a90 <HAL_DMA_Start_IT+0x47c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d068      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a7f      	ldr	r2, [pc, #508]	; (8004a94 <HAL_DMA_Start_IT+0x480>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d063      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a7d      	ldr	r2, [pc, #500]	; (8004a98 <HAL_DMA_Start_IT+0x484>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d05e      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a7c      	ldr	r2, [pc, #496]	; (8004a9c <HAL_DMA_Start_IT+0x488>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d059      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a7a      	ldr	r2, [pc, #488]	; (8004aa0 <HAL_DMA_Start_IT+0x48c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d054      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a79      	ldr	r2, [pc, #484]	; (8004aa4 <HAL_DMA_Start_IT+0x490>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d04f      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a77      	ldr	r2, [pc, #476]	; (8004aa8 <HAL_DMA_Start_IT+0x494>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d04a      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a76      	ldr	r2, [pc, #472]	; (8004aac <HAL_DMA_Start_IT+0x498>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d045      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a74      	ldr	r2, [pc, #464]	; (8004ab0 <HAL_DMA_Start_IT+0x49c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d040      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a73      	ldr	r2, [pc, #460]	; (8004ab4 <HAL_DMA_Start_IT+0x4a0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d03b      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a71      	ldr	r2, [pc, #452]	; (8004ab8 <HAL_DMA_Start_IT+0x4a4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d036      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a70      	ldr	r2, [pc, #448]	; (8004abc <HAL_DMA_Start_IT+0x4a8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d031      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a6e      	ldr	r2, [pc, #440]	; (8004ac0 <HAL_DMA_Start_IT+0x4ac>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d02c      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6d      	ldr	r2, [pc, #436]	; (8004ac4 <HAL_DMA_Start_IT+0x4b0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d027      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a6b      	ldr	r2, [pc, #428]	; (8004ac8 <HAL_DMA_Start_IT+0x4b4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d022      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6a      	ldr	r2, [pc, #424]	; (8004acc <HAL_DMA_Start_IT+0x4b8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d01d      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a68      	ldr	r2, [pc, #416]	; (8004ad0 <HAL_DMA_Start_IT+0x4bc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d018      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a67      	ldr	r2, [pc, #412]	; (8004ad4 <HAL_DMA_Start_IT+0x4c0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d013      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a65      	ldr	r2, [pc, #404]	; (8004ad8 <HAL_DMA_Start_IT+0x4c4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00e      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a64      	ldr	r2, [pc, #400]	; (8004adc <HAL_DMA_Start_IT+0x4c8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d009      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a62      	ldr	r2, [pc, #392]	; (8004ae0 <HAL_DMA_Start_IT+0x4cc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_DMA_Start_IT+0x350>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a61      	ldr	r2, [pc, #388]	; (8004ae4 <HAL_DMA_Start_IT+0x4d0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d101      	bne.n	8004968 <HAL_DMA_Start_IT+0x354>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <HAL_DMA_Start_IT+0x356>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01a      	beq.n	80049a4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800498a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800499e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a37      	ldr	r2, [pc, #220]	; (8004a88 <HAL_DMA_Start_IT+0x474>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d04a      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a36      	ldr	r2, [pc, #216]	; (8004a8c <HAL_DMA_Start_IT+0x478>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d045      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a34      	ldr	r2, [pc, #208]	; (8004a90 <HAL_DMA_Start_IT+0x47c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d040      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a33      	ldr	r2, [pc, #204]	; (8004a94 <HAL_DMA_Start_IT+0x480>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d03b      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a31      	ldr	r2, [pc, #196]	; (8004a98 <HAL_DMA_Start_IT+0x484>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d036      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a30      	ldr	r2, [pc, #192]	; (8004a9c <HAL_DMA_Start_IT+0x488>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d031      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a2e      	ldr	r2, [pc, #184]	; (8004aa0 <HAL_DMA_Start_IT+0x48c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02c      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a2d      	ldr	r2, [pc, #180]	; (8004aa4 <HAL_DMA_Start_IT+0x490>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d027      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a2b      	ldr	r2, [pc, #172]	; (8004aa8 <HAL_DMA_Start_IT+0x494>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d022      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a2a      	ldr	r2, [pc, #168]	; (8004aac <HAL_DMA_Start_IT+0x498>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d01d      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a28      	ldr	r2, [pc, #160]	; (8004ab0 <HAL_DMA_Start_IT+0x49c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d018      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <HAL_DMA_Start_IT+0x4a0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d013      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a25      	ldr	r2, [pc, #148]	; (8004ab8 <HAL_DMA_Start_IT+0x4a4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00e      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a24      	ldr	r2, [pc, #144]	; (8004abc <HAL_DMA_Start_IT+0x4a8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d009      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a22      	ldr	r2, [pc, #136]	; (8004ac0 <HAL_DMA_Start_IT+0x4ac>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <HAL_DMA_Start_IT+0x430>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a21      	ldr	r2, [pc, #132]	; (8004ac4 <HAL_DMA_Start_IT+0x4b0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d108      	bne.n	8004a56 <HAL_DMA_Start_IT+0x442>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	e012      	b.n	8004a7c <HAL_DMA_Start_IT+0x468>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0201 	orr.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e009      	b.n	8004a7c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40020010 	.word	0x40020010
 8004a8c:	40020028 	.word	0x40020028
 8004a90:	40020040 	.word	0x40020040
 8004a94:	40020058 	.word	0x40020058
 8004a98:	40020070 	.word	0x40020070
 8004a9c:	40020088 	.word	0x40020088
 8004aa0:	400200a0 	.word	0x400200a0
 8004aa4:	400200b8 	.word	0x400200b8
 8004aa8:	40020410 	.word	0x40020410
 8004aac:	40020428 	.word	0x40020428
 8004ab0:	40020440 	.word	0x40020440
 8004ab4:	40020458 	.word	0x40020458
 8004ab8:	40020470 	.word	0x40020470
 8004abc:	40020488 	.word	0x40020488
 8004ac0:	400204a0 	.word	0x400204a0
 8004ac4:	400204b8 	.word	0x400204b8
 8004ac8:	58025408 	.word	0x58025408
 8004acc:	5802541c 	.word	0x5802541c
 8004ad0:	58025430 	.word	0x58025430
 8004ad4:	58025444 	.word	0x58025444
 8004ad8:	58025458 	.word	0x58025458
 8004adc:	5802546c 	.word	0x5802546c
 8004ae0:	58025480 	.word	0x58025480
 8004ae4:	58025494 	.word	0x58025494

08004ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e205      	b.n	8004f06 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d004      	beq.n	8004b10 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2280      	movs	r2, #128	; 0x80
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e1fa      	b.n	8004f06 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a8c      	ldr	r2, [pc, #560]	; (8004d48 <HAL_DMA_Abort_IT+0x260>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d04a      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a8b      	ldr	r2, [pc, #556]	; (8004d4c <HAL_DMA_Abort_IT+0x264>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d045      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a89      	ldr	r2, [pc, #548]	; (8004d50 <HAL_DMA_Abort_IT+0x268>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d040      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a88      	ldr	r2, [pc, #544]	; (8004d54 <HAL_DMA_Abort_IT+0x26c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d03b      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a86      	ldr	r2, [pc, #536]	; (8004d58 <HAL_DMA_Abort_IT+0x270>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d036      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a85      	ldr	r2, [pc, #532]	; (8004d5c <HAL_DMA_Abort_IT+0x274>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d031      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a83      	ldr	r2, [pc, #524]	; (8004d60 <HAL_DMA_Abort_IT+0x278>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d02c      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a82      	ldr	r2, [pc, #520]	; (8004d64 <HAL_DMA_Abort_IT+0x27c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d027      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a80      	ldr	r2, [pc, #512]	; (8004d68 <HAL_DMA_Abort_IT+0x280>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d022      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a7f      	ldr	r2, [pc, #508]	; (8004d6c <HAL_DMA_Abort_IT+0x284>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d01d      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a7d      	ldr	r2, [pc, #500]	; (8004d70 <HAL_DMA_Abort_IT+0x288>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d018      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a7c      	ldr	r2, [pc, #496]	; (8004d74 <HAL_DMA_Abort_IT+0x28c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a7a      	ldr	r2, [pc, #488]	; (8004d78 <HAL_DMA_Abort_IT+0x290>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00e      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a79      	ldr	r2, [pc, #484]	; (8004d7c <HAL_DMA_Abort_IT+0x294>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a77      	ldr	r2, [pc, #476]	; (8004d80 <HAL_DMA_Abort_IT+0x298>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_DMA_Abort_IT+0xc8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a76      	ldr	r2, [pc, #472]	; (8004d84 <HAL_DMA_Abort_IT+0x29c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d101      	bne.n	8004bb4 <HAL_DMA_Abort_IT+0xcc>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e000      	b.n	8004bb6 <HAL_DMA_Abort_IT+0xce>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d065      	beq.n	8004c86 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a60      	ldr	r2, [pc, #384]	; (8004d48 <HAL_DMA_Abort_IT+0x260>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d04a      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a5e      	ldr	r2, [pc, #376]	; (8004d4c <HAL_DMA_Abort_IT+0x264>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d045      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a5d      	ldr	r2, [pc, #372]	; (8004d50 <HAL_DMA_Abort_IT+0x268>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d040      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a5b      	ldr	r2, [pc, #364]	; (8004d54 <HAL_DMA_Abort_IT+0x26c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d03b      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a5a      	ldr	r2, [pc, #360]	; (8004d58 <HAL_DMA_Abort_IT+0x270>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d036      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a58      	ldr	r2, [pc, #352]	; (8004d5c <HAL_DMA_Abort_IT+0x274>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d031      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a57      	ldr	r2, [pc, #348]	; (8004d60 <HAL_DMA_Abort_IT+0x278>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d02c      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a55      	ldr	r2, [pc, #340]	; (8004d64 <HAL_DMA_Abort_IT+0x27c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d027      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a54      	ldr	r2, [pc, #336]	; (8004d68 <HAL_DMA_Abort_IT+0x280>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d022      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a52      	ldr	r2, [pc, #328]	; (8004d6c <HAL_DMA_Abort_IT+0x284>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01d      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a51      	ldr	r2, [pc, #324]	; (8004d70 <HAL_DMA_Abort_IT+0x288>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d018      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a4f      	ldr	r2, [pc, #316]	; (8004d74 <HAL_DMA_Abort_IT+0x28c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a4e      	ldr	r2, [pc, #312]	; (8004d78 <HAL_DMA_Abort_IT+0x290>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a4c      	ldr	r2, [pc, #304]	; (8004d7c <HAL_DMA_Abort_IT+0x294>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a4b      	ldr	r2, [pc, #300]	; (8004d80 <HAL_DMA_Abort_IT+0x298>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_DMA_Abort_IT+0x17a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a49      	ldr	r2, [pc, #292]	; (8004d84 <HAL_DMA_Abort_IT+0x29c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d108      	bne.n	8004c74 <HAL_DMA_Abort_IT+0x18c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	e147      	b.n	8004f04 <HAL_DMA_Abort_IT+0x41c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e13e      	b.n	8004f04 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 020e 	bic.w	r2, r2, #14
 8004c94:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2b      	ldr	r2, [pc, #172]	; (8004d48 <HAL_DMA_Abort_IT+0x260>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d04a      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a29      	ldr	r2, [pc, #164]	; (8004d4c <HAL_DMA_Abort_IT+0x264>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d045      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a28      	ldr	r2, [pc, #160]	; (8004d50 <HAL_DMA_Abort_IT+0x268>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d040      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a26      	ldr	r2, [pc, #152]	; (8004d54 <HAL_DMA_Abort_IT+0x26c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d03b      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <HAL_DMA_Abort_IT+0x270>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d036      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a23      	ldr	r2, [pc, #140]	; (8004d5c <HAL_DMA_Abort_IT+0x274>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d031      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a22      	ldr	r2, [pc, #136]	; (8004d60 <HAL_DMA_Abort_IT+0x278>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d02c      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a20      	ldr	r2, [pc, #128]	; (8004d64 <HAL_DMA_Abort_IT+0x27c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d027      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1f      	ldr	r2, [pc, #124]	; (8004d68 <HAL_DMA_Abort_IT+0x280>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d022      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <HAL_DMA_Abort_IT+0x284>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01d      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1c      	ldr	r2, [pc, #112]	; (8004d70 <HAL_DMA_Abort_IT+0x288>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d018      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1a      	ldr	r2, [pc, #104]	; (8004d74 <HAL_DMA_Abort_IT+0x28c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <HAL_DMA_Abort_IT+0x290>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a17      	ldr	r2, [pc, #92]	; (8004d7c <HAL_DMA_Abort_IT+0x294>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <HAL_DMA_Abort_IT+0x298>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_DMA_Abort_IT+0x24e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a14      	ldr	r2, [pc, #80]	; (8004d84 <HAL_DMA_Abort_IT+0x29c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d128      	bne.n	8004d88 <HAL_DMA_Abort_IT+0x2a0>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e027      	b.n	8004d98 <HAL_DMA_Abort_IT+0x2b0>
 8004d48:	40020010 	.word	0x40020010
 8004d4c:	40020028 	.word	0x40020028
 8004d50:	40020040 	.word	0x40020040
 8004d54:	40020058 	.word	0x40020058
 8004d58:	40020070 	.word	0x40020070
 8004d5c:	40020088 	.word	0x40020088
 8004d60:	400200a0 	.word	0x400200a0
 8004d64:	400200b8 	.word	0x400200b8
 8004d68:	40020410 	.word	0x40020410
 8004d6c:	40020428 	.word	0x40020428
 8004d70:	40020440 	.word	0x40020440
 8004d74:	40020458 	.word	0x40020458
 8004d78:	40020470 	.word	0x40020470
 8004d7c:	40020488 	.word	0x40020488
 8004d80:	400204a0 	.word	0x400204a0
 8004d84:	400204b8 	.word	0x400204b8
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a5c      	ldr	r2, [pc, #368]	; (8004f10 <HAL_DMA_Abort_IT+0x428>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d072      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a5b      	ldr	r2, [pc, #364]	; (8004f14 <HAL_DMA_Abort_IT+0x42c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d06d      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a59      	ldr	r2, [pc, #356]	; (8004f18 <HAL_DMA_Abort_IT+0x430>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d068      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a58      	ldr	r2, [pc, #352]	; (8004f1c <HAL_DMA_Abort_IT+0x434>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d063      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a56      	ldr	r2, [pc, #344]	; (8004f20 <HAL_DMA_Abort_IT+0x438>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d05e      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a55      	ldr	r2, [pc, #340]	; (8004f24 <HAL_DMA_Abort_IT+0x43c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d059      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a53      	ldr	r2, [pc, #332]	; (8004f28 <HAL_DMA_Abort_IT+0x440>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d054      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a52      	ldr	r2, [pc, #328]	; (8004f2c <HAL_DMA_Abort_IT+0x444>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d04f      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a50      	ldr	r2, [pc, #320]	; (8004f30 <HAL_DMA_Abort_IT+0x448>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d04a      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a4f      	ldr	r2, [pc, #316]	; (8004f34 <HAL_DMA_Abort_IT+0x44c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d045      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a4d      	ldr	r2, [pc, #308]	; (8004f38 <HAL_DMA_Abort_IT+0x450>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d040      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a4c      	ldr	r2, [pc, #304]	; (8004f3c <HAL_DMA_Abort_IT+0x454>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d03b      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a4a      	ldr	r2, [pc, #296]	; (8004f40 <HAL_DMA_Abort_IT+0x458>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d036      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a49      	ldr	r2, [pc, #292]	; (8004f44 <HAL_DMA_Abort_IT+0x45c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d031      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a47      	ldr	r2, [pc, #284]	; (8004f48 <HAL_DMA_Abort_IT+0x460>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d02c      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a46      	ldr	r2, [pc, #280]	; (8004f4c <HAL_DMA_Abort_IT+0x464>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d027      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a44      	ldr	r2, [pc, #272]	; (8004f50 <HAL_DMA_Abort_IT+0x468>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d022      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a43      	ldr	r2, [pc, #268]	; (8004f54 <HAL_DMA_Abort_IT+0x46c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d01d      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a41      	ldr	r2, [pc, #260]	; (8004f58 <HAL_DMA_Abort_IT+0x470>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d018      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a40      	ldr	r2, [pc, #256]	; (8004f5c <HAL_DMA_Abort_IT+0x474>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a3e      	ldr	r2, [pc, #248]	; (8004f60 <HAL_DMA_Abort_IT+0x478>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00e      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a3d      	ldr	r2, [pc, #244]	; (8004f64 <HAL_DMA_Abort_IT+0x47c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d009      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a3b      	ldr	r2, [pc, #236]	; (8004f68 <HAL_DMA_Abort_IT+0x480>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_DMA_Abort_IT+0x3a0>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a3a      	ldr	r2, [pc, #232]	; (8004f6c <HAL_DMA_Abort_IT+0x484>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d101      	bne.n	8004e8c <HAL_DMA_Abort_IT+0x3a4>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e000      	b.n	8004e8e <HAL_DMA_Abort_IT+0x3a6>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d028      	beq.n	8004ee4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ea0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ec0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00c      	beq.n	8004ee4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ed8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ee2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40020010 	.word	0x40020010
 8004f14:	40020028 	.word	0x40020028
 8004f18:	40020040 	.word	0x40020040
 8004f1c:	40020058 	.word	0x40020058
 8004f20:	40020070 	.word	0x40020070
 8004f24:	40020088 	.word	0x40020088
 8004f28:	400200a0 	.word	0x400200a0
 8004f2c:	400200b8 	.word	0x400200b8
 8004f30:	40020410 	.word	0x40020410
 8004f34:	40020428 	.word	0x40020428
 8004f38:	40020440 	.word	0x40020440
 8004f3c:	40020458 	.word	0x40020458
 8004f40:	40020470 	.word	0x40020470
 8004f44:	40020488 	.word	0x40020488
 8004f48:	400204a0 	.word	0x400204a0
 8004f4c:	400204b8 	.word	0x400204b8
 8004f50:	58025408 	.word	0x58025408
 8004f54:	5802541c 	.word	0x5802541c
 8004f58:	58025430 	.word	0x58025430
 8004f5c:	58025444 	.word	0x58025444
 8004f60:	58025458 	.word	0x58025458
 8004f64:	5802546c 	.word	0x5802546c
 8004f68:	58025480 	.word	0x58025480
 8004f6c:	58025494 	.word	0x58025494

08004f70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	; 0x28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f7c:	4b67      	ldr	r3, [pc, #412]	; (800511c <HAL_DMA_IRQHandler+0x1ac>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a67      	ldr	r2, [pc, #412]	; (8005120 <HAL_DMA_IRQHandler+0x1b0>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	0a9b      	lsrs	r3, r3, #10
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a5f      	ldr	r2, [pc, #380]	; (8005124 <HAL_DMA_IRQHandler+0x1b4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d04a      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a5d      	ldr	r2, [pc, #372]	; (8005128 <HAL_DMA_IRQHandler+0x1b8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d045      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a5c      	ldr	r2, [pc, #368]	; (800512c <HAL_DMA_IRQHandler+0x1bc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d040      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a5a      	ldr	r2, [pc, #360]	; (8005130 <HAL_DMA_IRQHandler+0x1c0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d03b      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a59      	ldr	r2, [pc, #356]	; (8005134 <HAL_DMA_IRQHandler+0x1c4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d036      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a57      	ldr	r2, [pc, #348]	; (8005138 <HAL_DMA_IRQHandler+0x1c8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d031      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a56      	ldr	r2, [pc, #344]	; (800513c <HAL_DMA_IRQHandler+0x1cc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d02c      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a54      	ldr	r2, [pc, #336]	; (8005140 <HAL_DMA_IRQHandler+0x1d0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d027      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a53      	ldr	r2, [pc, #332]	; (8005144 <HAL_DMA_IRQHandler+0x1d4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d022      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a51      	ldr	r2, [pc, #324]	; (8005148 <HAL_DMA_IRQHandler+0x1d8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01d      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a50      	ldr	r2, [pc, #320]	; (800514c <HAL_DMA_IRQHandler+0x1dc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d018      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a4e      	ldr	r2, [pc, #312]	; (8005150 <HAL_DMA_IRQHandler+0x1e0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a4d      	ldr	r2, [pc, #308]	; (8005154 <HAL_DMA_IRQHandler+0x1e4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00e      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a4b      	ldr	r2, [pc, #300]	; (8005158 <HAL_DMA_IRQHandler+0x1e8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a4a      	ldr	r2, [pc, #296]	; (800515c <HAL_DMA_IRQHandler+0x1ec>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_DMA_IRQHandler+0xd2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a48      	ldr	r2, [pc, #288]	; (8005160 <HAL_DMA_IRQHandler+0x1f0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d101      	bne.n	8005046 <HAL_DMA_IRQHandler+0xd6>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <HAL_DMA_IRQHandler+0xd8>
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 842b 	beq.w	80058a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2208      	movs	r2, #8
 8005058:	409a      	lsls	r2, r3
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	4013      	ands	r3, r2
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80a2 	beq.w	80051a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2e      	ldr	r2, [pc, #184]	; (8005124 <HAL_DMA_IRQHandler+0x1b4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d04a      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2d      	ldr	r2, [pc, #180]	; (8005128 <HAL_DMA_IRQHandler+0x1b8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d045      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2b      	ldr	r2, [pc, #172]	; (800512c <HAL_DMA_IRQHandler+0x1bc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d040      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a2a      	ldr	r2, [pc, #168]	; (8005130 <HAL_DMA_IRQHandler+0x1c0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d03b      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a28      	ldr	r2, [pc, #160]	; (8005134 <HAL_DMA_IRQHandler+0x1c4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d036      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a27      	ldr	r2, [pc, #156]	; (8005138 <HAL_DMA_IRQHandler+0x1c8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d031      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a25      	ldr	r2, [pc, #148]	; (800513c <HAL_DMA_IRQHandler+0x1cc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d02c      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a24      	ldr	r2, [pc, #144]	; (8005140 <HAL_DMA_IRQHandler+0x1d0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d027      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a22      	ldr	r2, [pc, #136]	; (8005144 <HAL_DMA_IRQHandler+0x1d4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d022      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a21      	ldr	r2, [pc, #132]	; (8005148 <HAL_DMA_IRQHandler+0x1d8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d01d      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1f      	ldr	r2, [pc, #124]	; (800514c <HAL_DMA_IRQHandler+0x1dc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d018      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1e      	ldr	r2, [pc, #120]	; (8005150 <HAL_DMA_IRQHandler+0x1e0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_DMA_IRQHandler+0x1e4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00e      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <HAL_DMA_IRQHandler+0x1e8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d009      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a19      	ldr	r2, [pc, #100]	; (800515c <HAL_DMA_IRQHandler+0x1ec>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_DMA_IRQHandler+0x194>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a18      	ldr	r2, [pc, #96]	; (8005160 <HAL_DMA_IRQHandler+0x1f0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d12f      	bne.n	8005164 <HAL_DMA_IRQHandler+0x1f4>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	e02e      	b.n	8005178 <HAL_DMA_IRQHandler+0x208>
 800511a:	bf00      	nop
 800511c:	24000000 	.word	0x24000000
 8005120:	1b4e81b5 	.word	0x1b4e81b5
 8005124:	40020010 	.word	0x40020010
 8005128:	40020028 	.word	0x40020028
 800512c:	40020040 	.word	0x40020040
 8005130:	40020058 	.word	0x40020058
 8005134:	40020070 	.word	0x40020070
 8005138:	40020088 	.word	0x40020088
 800513c:	400200a0 	.word	0x400200a0
 8005140:	400200b8 	.word	0x400200b8
 8005144:	40020410 	.word	0x40020410
 8005148:	40020428 	.word	0x40020428
 800514c:	40020440 	.word	0x40020440
 8005150:	40020458 	.word	0x40020458
 8005154:	40020470 	.word	0x40020470
 8005158:	40020488 	.word	0x40020488
 800515c:	400204a0 	.word	0x400204a0
 8005160:	400204b8 	.word	0x400204b8
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	bf14      	ite	ne
 8005172:	2301      	movne	r3, #1
 8005174:	2300      	moveq	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d015      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0204 	bic.w	r2, r2, #4
 800518a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	2208      	movs	r2, #8
 8005196:	409a      	lsls	r2, r3
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	f043 0201 	orr.w	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	fa22 f303 	lsr.w	r3, r2, r3
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d06e      	beq.n	800529c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a69      	ldr	r2, [pc, #420]	; (8005368 <HAL_DMA_IRQHandler+0x3f8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d04a      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a67      	ldr	r2, [pc, #412]	; (800536c <HAL_DMA_IRQHandler+0x3fc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d045      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a66      	ldr	r2, [pc, #408]	; (8005370 <HAL_DMA_IRQHandler+0x400>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d040      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a64      	ldr	r2, [pc, #400]	; (8005374 <HAL_DMA_IRQHandler+0x404>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d03b      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a63      	ldr	r2, [pc, #396]	; (8005378 <HAL_DMA_IRQHandler+0x408>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d036      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a61      	ldr	r2, [pc, #388]	; (800537c <HAL_DMA_IRQHandler+0x40c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d031      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a60      	ldr	r2, [pc, #384]	; (8005380 <HAL_DMA_IRQHandler+0x410>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d02c      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a5e      	ldr	r2, [pc, #376]	; (8005384 <HAL_DMA_IRQHandler+0x414>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d027      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a5d      	ldr	r2, [pc, #372]	; (8005388 <HAL_DMA_IRQHandler+0x418>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d022      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a5b      	ldr	r2, [pc, #364]	; (800538c <HAL_DMA_IRQHandler+0x41c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01d      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a5a      	ldr	r2, [pc, #360]	; (8005390 <HAL_DMA_IRQHandler+0x420>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d018      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a58      	ldr	r2, [pc, #352]	; (8005394 <HAL_DMA_IRQHandler+0x424>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a57      	ldr	r2, [pc, #348]	; (8005398 <HAL_DMA_IRQHandler+0x428>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a55      	ldr	r2, [pc, #340]	; (800539c <HAL_DMA_IRQHandler+0x42c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a54      	ldr	r2, [pc, #336]	; (80053a0 <HAL_DMA_IRQHandler+0x430>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_DMA_IRQHandler+0x2ee>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a52      	ldr	r2, [pc, #328]	; (80053a4 <HAL_DMA_IRQHandler+0x434>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d10a      	bne.n	8005274 <HAL_DMA_IRQHandler+0x304>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf14      	ite	ne
 800526c:	2301      	movne	r3, #1
 800526e:	2300      	moveq	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	e003      	b.n	800527c <HAL_DMA_IRQHandler+0x30c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2300      	movs	r3, #0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00d      	beq.n	800529c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	2201      	movs	r2, #1
 800528a:	409a      	lsls	r2, r3
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005294:	f043 0202 	orr.w	r2, r3, #2
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	2204      	movs	r2, #4
 80052a6:	409a      	lsls	r2, r3
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 808f 	beq.w	80053d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a2c      	ldr	r2, [pc, #176]	; (8005368 <HAL_DMA_IRQHandler+0x3f8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d04a      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a2a      	ldr	r2, [pc, #168]	; (800536c <HAL_DMA_IRQHandler+0x3fc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d045      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a29      	ldr	r2, [pc, #164]	; (8005370 <HAL_DMA_IRQHandler+0x400>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d040      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a27      	ldr	r2, [pc, #156]	; (8005374 <HAL_DMA_IRQHandler+0x404>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d03b      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a26      	ldr	r2, [pc, #152]	; (8005378 <HAL_DMA_IRQHandler+0x408>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d036      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a24      	ldr	r2, [pc, #144]	; (800537c <HAL_DMA_IRQHandler+0x40c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d031      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a23      	ldr	r2, [pc, #140]	; (8005380 <HAL_DMA_IRQHandler+0x410>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d02c      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a21      	ldr	r2, [pc, #132]	; (8005384 <HAL_DMA_IRQHandler+0x414>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d027      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a20      	ldr	r2, [pc, #128]	; (8005388 <HAL_DMA_IRQHandler+0x418>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d022      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1e      	ldr	r2, [pc, #120]	; (800538c <HAL_DMA_IRQHandler+0x41c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01d      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1d      	ldr	r2, [pc, #116]	; (8005390 <HAL_DMA_IRQHandler+0x420>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d018      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <HAL_DMA_IRQHandler+0x424>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d013      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1a      	ldr	r2, [pc, #104]	; (8005398 <HAL_DMA_IRQHandler+0x428>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00e      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a18      	ldr	r2, [pc, #96]	; (800539c <HAL_DMA_IRQHandler+0x42c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d009      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a17      	ldr	r2, [pc, #92]	; (80053a0 <HAL_DMA_IRQHandler+0x430>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d004      	beq.n	8005352 <HAL_DMA_IRQHandler+0x3e2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a15      	ldr	r2, [pc, #84]	; (80053a4 <HAL_DMA_IRQHandler+0x434>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d12a      	bne.n	80053a8 <HAL_DMA_IRQHandler+0x438>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf14      	ite	ne
 8005360:	2301      	movne	r3, #1
 8005362:	2300      	moveq	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e023      	b.n	80053b0 <HAL_DMA_IRQHandler+0x440>
 8005368:	40020010 	.word	0x40020010
 800536c:	40020028 	.word	0x40020028
 8005370:	40020040 	.word	0x40020040
 8005374:	40020058 	.word	0x40020058
 8005378:	40020070 	.word	0x40020070
 800537c:	40020088 	.word	0x40020088
 8005380:	400200a0 	.word	0x400200a0
 8005384:	400200b8 	.word	0x400200b8
 8005388:	40020410 	.word	0x40020410
 800538c:	40020428 	.word	0x40020428
 8005390:	40020440 	.word	0x40020440
 8005394:	40020458 	.word	0x40020458
 8005398:	40020470 	.word	0x40020470
 800539c:	40020488 	.word	0x40020488
 80053a0:	400204a0 	.word	0x400204a0
 80053a4:	400204b8 	.word	0x400204b8
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2300      	movs	r3, #0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00d      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	2204      	movs	r2, #4
 80053be:	409a      	lsls	r2, r3
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c8:	f043 0204 	orr.w	r2, r3, #4
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	2210      	movs	r2, #16
 80053da:	409a      	lsls	r2, r3
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 80a6 	beq.w	8005532 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a85      	ldr	r2, [pc, #532]	; (8005600 <HAL_DMA_IRQHandler+0x690>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d04a      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a83      	ldr	r2, [pc, #524]	; (8005604 <HAL_DMA_IRQHandler+0x694>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d045      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a82      	ldr	r2, [pc, #520]	; (8005608 <HAL_DMA_IRQHandler+0x698>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d040      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a80      	ldr	r2, [pc, #512]	; (800560c <HAL_DMA_IRQHandler+0x69c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d03b      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a7f      	ldr	r2, [pc, #508]	; (8005610 <HAL_DMA_IRQHandler+0x6a0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d036      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a7d      	ldr	r2, [pc, #500]	; (8005614 <HAL_DMA_IRQHandler+0x6a4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d031      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a7c      	ldr	r2, [pc, #496]	; (8005618 <HAL_DMA_IRQHandler+0x6a8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d02c      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a7a      	ldr	r2, [pc, #488]	; (800561c <HAL_DMA_IRQHandler+0x6ac>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d027      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a79      	ldr	r2, [pc, #484]	; (8005620 <HAL_DMA_IRQHandler+0x6b0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d022      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a77      	ldr	r2, [pc, #476]	; (8005624 <HAL_DMA_IRQHandler+0x6b4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d01d      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a76      	ldr	r2, [pc, #472]	; (8005628 <HAL_DMA_IRQHandler+0x6b8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d018      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a74      	ldr	r2, [pc, #464]	; (800562c <HAL_DMA_IRQHandler+0x6bc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d013      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a73      	ldr	r2, [pc, #460]	; (8005630 <HAL_DMA_IRQHandler+0x6c0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00e      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a71      	ldr	r2, [pc, #452]	; (8005634 <HAL_DMA_IRQHandler+0x6c4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d009      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a70      	ldr	r2, [pc, #448]	; (8005638 <HAL_DMA_IRQHandler+0x6c8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d004      	beq.n	8005486 <HAL_DMA_IRQHandler+0x516>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a6e      	ldr	r2, [pc, #440]	; (800563c <HAL_DMA_IRQHandler+0x6cc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d10a      	bne.n	800549c <HAL_DMA_IRQHandler+0x52c>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	bf14      	ite	ne
 8005494:	2301      	movne	r3, #1
 8005496:	2300      	moveq	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	e009      	b.n	80054b0 <HAL_DMA_IRQHandler+0x540>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bf14      	ite	ne
 80054aa:	2301      	movne	r3, #1
 80054ac:	2300      	moveq	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d03e      	beq.n	8005532 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	2210      	movs	r2, #16
 80054be:	409a      	lsls	r2, r3
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d018      	beq.n	8005504 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d108      	bne.n	80054f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d024      	beq.n	8005532 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	4798      	blx	r3
 80054f0:	e01f      	b.n	8005532 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01b      	beq.n	8005532 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	4798      	blx	r3
 8005502:	e016      	b.n	8005532 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d107      	bne.n	8005522 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0208 	bic.w	r2, r2, #8
 8005520:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	2220      	movs	r2, #32
 800553c:	409a      	lsls	r2, r3
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	4013      	ands	r3, r2
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 8110 	beq.w	8005768 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a2c      	ldr	r2, [pc, #176]	; (8005600 <HAL_DMA_IRQHandler+0x690>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d04a      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a2b      	ldr	r2, [pc, #172]	; (8005604 <HAL_DMA_IRQHandler+0x694>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d045      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a29      	ldr	r2, [pc, #164]	; (8005608 <HAL_DMA_IRQHandler+0x698>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d040      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a28      	ldr	r2, [pc, #160]	; (800560c <HAL_DMA_IRQHandler+0x69c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d03b      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a26      	ldr	r2, [pc, #152]	; (8005610 <HAL_DMA_IRQHandler+0x6a0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d036      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a25      	ldr	r2, [pc, #148]	; (8005614 <HAL_DMA_IRQHandler+0x6a4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d031      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a23      	ldr	r2, [pc, #140]	; (8005618 <HAL_DMA_IRQHandler+0x6a8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d02c      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a22      	ldr	r2, [pc, #136]	; (800561c <HAL_DMA_IRQHandler+0x6ac>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d027      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a20      	ldr	r2, [pc, #128]	; (8005620 <HAL_DMA_IRQHandler+0x6b0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d022      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1f      	ldr	r2, [pc, #124]	; (8005624 <HAL_DMA_IRQHandler+0x6b4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d01d      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1d      	ldr	r2, [pc, #116]	; (8005628 <HAL_DMA_IRQHandler+0x6b8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d018      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1c      	ldr	r2, [pc, #112]	; (800562c <HAL_DMA_IRQHandler+0x6bc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1a      	ldr	r2, [pc, #104]	; (8005630 <HAL_DMA_IRQHandler+0x6c0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a19      	ldr	r2, [pc, #100]	; (8005634 <HAL_DMA_IRQHandler+0x6c4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d009      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a17      	ldr	r2, [pc, #92]	; (8005638 <HAL_DMA_IRQHandler+0x6c8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x678>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a16      	ldr	r2, [pc, #88]	; (800563c <HAL_DMA_IRQHandler+0x6cc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d12b      	bne.n	8005640 <HAL_DMA_IRQHandler+0x6d0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	bf14      	ite	ne
 80055f6:	2301      	movne	r3, #1
 80055f8:	2300      	moveq	r3, #0
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	e02a      	b.n	8005654 <HAL_DMA_IRQHandler+0x6e4>
 80055fe:	bf00      	nop
 8005600:	40020010 	.word	0x40020010
 8005604:	40020028 	.word	0x40020028
 8005608:	40020040 	.word	0x40020040
 800560c:	40020058 	.word	0x40020058
 8005610:	40020070 	.word	0x40020070
 8005614:	40020088 	.word	0x40020088
 8005618:	400200a0 	.word	0x400200a0
 800561c:	400200b8 	.word	0x400200b8
 8005620:	40020410 	.word	0x40020410
 8005624:	40020428 	.word	0x40020428
 8005628:	40020440 	.word	0x40020440
 800562c:	40020458 	.word	0x40020458
 8005630:	40020470 	.word	0x40020470
 8005634:	40020488 	.word	0x40020488
 8005638:	400204a0 	.word	0x400204a0
 800563c:	400204b8 	.word	0x400204b8
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	bf14      	ite	ne
 800564e:	2301      	movne	r3, #1
 8005650:	2300      	moveq	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8087 	beq.w	8005768 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	2220      	movs	r2, #32
 8005664:	409a      	lsls	r2, r3
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b04      	cmp	r3, #4
 8005674:	d139      	bne.n	80056ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0216 	bic.w	r2, r2, #22
 8005684:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695a      	ldr	r2, [r3, #20]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005694:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <HAL_DMA_IRQHandler+0x736>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0208 	bic.w	r2, r2, #8
 80056b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	223f      	movs	r2, #63	; 0x3f
 80056c0:	409a      	lsls	r2, r3
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 834a 	beq.w	8005d74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
          }
          return;
 80056e8:	e344      	b.n	8005d74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d018      	beq.n	800572a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d108      	bne.n	8005718 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570a:	2b00      	cmp	r3, #0
 800570c:	d02c      	beq.n	8005768 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4798      	blx	r3
 8005716:	e027      	b.n	8005768 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d023      	beq.n	8005768 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	4798      	blx	r3
 8005728:	e01e      	b.n	8005768 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10f      	bne.n	8005758 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0210 	bic.w	r2, r2, #16
 8005746:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8306 	beq.w	8005d7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 8088 	beq.w	8005890 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2204      	movs	r2, #4
 8005784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a7a      	ldr	r2, [pc, #488]	; (8005978 <HAL_DMA_IRQHandler+0xa08>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d04a      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a79      	ldr	r2, [pc, #484]	; (800597c <HAL_DMA_IRQHandler+0xa0c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d045      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a77      	ldr	r2, [pc, #476]	; (8005980 <HAL_DMA_IRQHandler+0xa10>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d040      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a76      	ldr	r2, [pc, #472]	; (8005984 <HAL_DMA_IRQHandler+0xa14>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d03b      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a74      	ldr	r2, [pc, #464]	; (8005988 <HAL_DMA_IRQHandler+0xa18>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d036      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a73      	ldr	r2, [pc, #460]	; (800598c <HAL_DMA_IRQHandler+0xa1c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d031      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a71      	ldr	r2, [pc, #452]	; (8005990 <HAL_DMA_IRQHandler+0xa20>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d02c      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a70      	ldr	r2, [pc, #448]	; (8005994 <HAL_DMA_IRQHandler+0xa24>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d027      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a6e      	ldr	r2, [pc, #440]	; (8005998 <HAL_DMA_IRQHandler+0xa28>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d022      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a6d      	ldr	r2, [pc, #436]	; (800599c <HAL_DMA_IRQHandler+0xa2c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d01d      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a6b      	ldr	r2, [pc, #428]	; (80059a0 <HAL_DMA_IRQHandler+0xa30>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d018      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a6a      	ldr	r2, [pc, #424]	; (80059a4 <HAL_DMA_IRQHandler+0xa34>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d013      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a68      	ldr	r2, [pc, #416]	; (80059a8 <HAL_DMA_IRQHandler+0xa38>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00e      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a67      	ldr	r2, [pc, #412]	; (80059ac <HAL_DMA_IRQHandler+0xa3c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d009      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a65      	ldr	r2, [pc, #404]	; (80059b0 <HAL_DMA_IRQHandler+0xa40>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d004      	beq.n	8005828 <HAL_DMA_IRQHandler+0x8b8>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a64      	ldr	r2, [pc, #400]	; (80059b4 <HAL_DMA_IRQHandler+0xa44>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d108      	bne.n	800583a <HAL_DMA_IRQHandler+0x8ca>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0201 	bic.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e007      	b.n	800584a <HAL_DMA_IRQHandler+0x8da>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0201 	bic.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3301      	adds	r3, #1
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005852:	429a      	cmp	r2, r3
 8005854:	d307      	bcc.n	8005866 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f2      	bne.n	800584a <HAL_DMA_IRQHandler+0x8da>
 8005864:	e000      	b.n	8005868 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005866:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2203      	movs	r2, #3
 8005882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005886:	e003      	b.n	8005890 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8272 	beq.w	8005d7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
 80058a2:	e26c      	b.n	8005d7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a43      	ldr	r2, [pc, #268]	; (80059b8 <HAL_DMA_IRQHandler+0xa48>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d022      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x984>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a42      	ldr	r2, [pc, #264]	; (80059bc <HAL_DMA_IRQHandler+0xa4c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d01d      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x984>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a40      	ldr	r2, [pc, #256]	; (80059c0 <HAL_DMA_IRQHandler+0xa50>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d018      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x984>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a3f      	ldr	r2, [pc, #252]	; (80059c4 <HAL_DMA_IRQHandler+0xa54>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d013      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x984>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a3d      	ldr	r2, [pc, #244]	; (80059c8 <HAL_DMA_IRQHandler+0xa58>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00e      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x984>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3c      	ldr	r2, [pc, #240]	; (80059cc <HAL_DMA_IRQHandler+0xa5c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d009      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x984>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a3a      	ldr	r2, [pc, #232]	; (80059d0 <HAL_DMA_IRQHandler+0xa60>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x984>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a39      	ldr	r2, [pc, #228]	; (80059d4 <HAL_DMA_IRQHandler+0xa64>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d101      	bne.n	80058f8 <HAL_DMA_IRQHandler+0x988>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <HAL_DMA_IRQHandler+0x98a>
 80058f8:	2300      	movs	r3, #0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 823f 	beq.w	8005d7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590c:	f003 031f 	and.w	r3, r3, #31
 8005910:	2204      	movs	r2, #4
 8005912:	409a      	lsls	r2, r3
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	4013      	ands	r3, r2
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80cd 	beq.w	8005ab8 <HAL_DMA_IRQHandler+0xb48>
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 80c7 	beq.w	8005ab8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	2204      	movs	r2, #4
 8005934:	409a      	lsls	r2, r3
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d049      	beq.n	80059d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 8210 	beq.w	8005d78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005960:	e20a      	b.n	8005d78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 8206 	beq.w	8005d78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005974:	e200      	b.n	8005d78 <HAL_DMA_IRQHandler+0xe08>
 8005976:	bf00      	nop
 8005978:	40020010 	.word	0x40020010
 800597c:	40020028 	.word	0x40020028
 8005980:	40020040 	.word	0x40020040
 8005984:	40020058 	.word	0x40020058
 8005988:	40020070 	.word	0x40020070
 800598c:	40020088 	.word	0x40020088
 8005990:	400200a0 	.word	0x400200a0
 8005994:	400200b8 	.word	0x400200b8
 8005998:	40020410 	.word	0x40020410
 800599c:	40020428 	.word	0x40020428
 80059a0:	40020440 	.word	0x40020440
 80059a4:	40020458 	.word	0x40020458
 80059a8:	40020470 	.word	0x40020470
 80059ac:	40020488 	.word	0x40020488
 80059b0:	400204a0 	.word	0x400204a0
 80059b4:	400204b8 	.word	0x400204b8
 80059b8:	58025408 	.word	0x58025408
 80059bc:	5802541c 	.word	0x5802541c
 80059c0:	58025430 	.word	0x58025430
 80059c4:	58025444 	.word	0x58025444
 80059c8:	58025458 	.word	0x58025458
 80059cc:	5802546c 	.word	0x5802546c
 80059d0:	58025480 	.word	0x58025480
 80059d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d160      	bne.n	8005aa4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a8c      	ldr	r2, [pc, #560]	; (8005c18 <HAL_DMA_IRQHandler+0xca8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d04a      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a8a      	ldr	r2, [pc, #552]	; (8005c1c <HAL_DMA_IRQHandler+0xcac>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d045      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a89      	ldr	r2, [pc, #548]	; (8005c20 <HAL_DMA_IRQHandler+0xcb0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d040      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a87      	ldr	r2, [pc, #540]	; (8005c24 <HAL_DMA_IRQHandler+0xcb4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d03b      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a86      	ldr	r2, [pc, #536]	; (8005c28 <HAL_DMA_IRQHandler+0xcb8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d036      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a84      	ldr	r2, [pc, #528]	; (8005c2c <HAL_DMA_IRQHandler+0xcbc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d031      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a83      	ldr	r2, [pc, #524]	; (8005c30 <HAL_DMA_IRQHandler+0xcc0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d02c      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a81      	ldr	r2, [pc, #516]	; (8005c34 <HAL_DMA_IRQHandler+0xcc4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d027      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a80      	ldr	r2, [pc, #512]	; (8005c38 <HAL_DMA_IRQHandler+0xcc8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d022      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a7e      	ldr	r2, [pc, #504]	; (8005c3c <HAL_DMA_IRQHandler+0xccc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01d      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a7d      	ldr	r2, [pc, #500]	; (8005c40 <HAL_DMA_IRQHandler+0xcd0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d018      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a7b      	ldr	r2, [pc, #492]	; (8005c44 <HAL_DMA_IRQHandler+0xcd4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a7a      	ldr	r2, [pc, #488]	; (8005c48 <HAL_DMA_IRQHandler+0xcd8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00e      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a78      	ldr	r2, [pc, #480]	; (8005c4c <HAL_DMA_IRQHandler+0xcdc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a77      	ldr	r2, [pc, #476]	; (8005c50 <HAL_DMA_IRQHandler+0xce0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_DMA_IRQHandler+0xb12>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a75      	ldr	r2, [pc, #468]	; (8005c54 <HAL_DMA_IRQHandler+0xce4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d108      	bne.n	8005a94 <HAL_DMA_IRQHandler+0xb24>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0208 	bic.w	r2, r2, #8
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e007      	b.n	8005aa4 <HAL_DMA_IRQHandler+0xb34>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0204 	bic.w	r2, r2, #4
 8005aa2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8165 	beq.w	8005d78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ab6:	e15f      	b.n	8005d78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abc:	f003 031f 	and.w	r3, r3, #31
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	409a      	lsls	r2, r3
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80c5 	beq.w	8005c58 <HAL_DMA_IRQHandler+0xce8>
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 80bf 	beq.w	8005c58 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ade:	f003 031f 	and.w	r3, r3, #31
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	409a      	lsls	r2, r3
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d018      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d109      	bne.n	8005b12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 813a 	beq.w	8005d7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b10:	e134      	b.n	8005d7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8130 	beq.w	8005d7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b24:	e12a      	b.n	8005d7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d168      	bne.n	8005c02 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a38      	ldr	r2, [pc, #224]	; (8005c18 <HAL_DMA_IRQHandler+0xca8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d04a      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a37      	ldr	r2, [pc, #220]	; (8005c1c <HAL_DMA_IRQHandler+0xcac>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d045      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a35      	ldr	r2, [pc, #212]	; (8005c20 <HAL_DMA_IRQHandler+0xcb0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d040      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a34      	ldr	r2, [pc, #208]	; (8005c24 <HAL_DMA_IRQHandler+0xcb4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d03b      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a32      	ldr	r2, [pc, #200]	; (8005c28 <HAL_DMA_IRQHandler+0xcb8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d036      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a31      	ldr	r2, [pc, #196]	; (8005c2c <HAL_DMA_IRQHandler+0xcbc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d031      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a2f      	ldr	r2, [pc, #188]	; (8005c30 <HAL_DMA_IRQHandler+0xcc0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d02c      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a2e      	ldr	r2, [pc, #184]	; (8005c34 <HAL_DMA_IRQHandler+0xcc4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d027      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a2c      	ldr	r2, [pc, #176]	; (8005c38 <HAL_DMA_IRQHandler+0xcc8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d022      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a2b      	ldr	r2, [pc, #172]	; (8005c3c <HAL_DMA_IRQHandler+0xccc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d01d      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a29      	ldr	r2, [pc, #164]	; (8005c40 <HAL_DMA_IRQHandler+0xcd0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d018      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a28      	ldr	r2, [pc, #160]	; (8005c44 <HAL_DMA_IRQHandler+0xcd4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d013      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a26      	ldr	r2, [pc, #152]	; (8005c48 <HAL_DMA_IRQHandler+0xcd8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a25      	ldr	r2, [pc, #148]	; (8005c4c <HAL_DMA_IRQHandler+0xcdc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d009      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a23      	ldr	r2, [pc, #140]	; (8005c50 <HAL_DMA_IRQHandler+0xce0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d004      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0xc60>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a22      	ldr	r2, [pc, #136]	; (8005c54 <HAL_DMA_IRQHandler+0xce4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d108      	bne.n	8005be2 <HAL_DMA_IRQHandler+0xc72>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0214 	bic.w	r2, r2, #20
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	e007      	b.n	8005bf2 <HAL_DMA_IRQHandler+0xc82>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 020a 	bic.w	r2, r2, #10
 8005bf0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 80b8 	beq.w	8005d7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c14:	e0b2      	b.n	8005d7c <HAL_DMA_IRQHandler+0xe0c>
 8005c16:	bf00      	nop
 8005c18:	40020010 	.word	0x40020010
 8005c1c:	40020028 	.word	0x40020028
 8005c20:	40020040 	.word	0x40020040
 8005c24:	40020058 	.word	0x40020058
 8005c28:	40020070 	.word	0x40020070
 8005c2c:	40020088 	.word	0x40020088
 8005c30:	400200a0 	.word	0x400200a0
 8005c34:	400200b8 	.word	0x400200b8
 8005c38:	40020410 	.word	0x40020410
 8005c3c:	40020428 	.word	0x40020428
 8005c40:	40020440 	.word	0x40020440
 8005c44:	40020458 	.word	0x40020458
 8005c48:	40020470 	.word	0x40020470
 8005c4c:	40020488 	.word	0x40020488
 8005c50:	400204a0 	.word	0x400204a0
 8005c54:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	2208      	movs	r2, #8
 8005c62:	409a      	lsls	r2, r3
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8088 	beq.w	8005d7e <HAL_DMA_IRQHandler+0xe0e>
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8082 	beq.w	8005d7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a41      	ldr	r2, [pc, #260]	; (8005d84 <HAL_DMA_IRQHandler+0xe14>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d04a      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a3f      	ldr	r2, [pc, #252]	; (8005d88 <HAL_DMA_IRQHandler+0xe18>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d045      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a3e      	ldr	r2, [pc, #248]	; (8005d8c <HAL_DMA_IRQHandler+0xe1c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d040      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a3c      	ldr	r2, [pc, #240]	; (8005d90 <HAL_DMA_IRQHandler+0xe20>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d03b      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a3b      	ldr	r2, [pc, #236]	; (8005d94 <HAL_DMA_IRQHandler+0xe24>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d036      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a39      	ldr	r2, [pc, #228]	; (8005d98 <HAL_DMA_IRQHandler+0xe28>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d031      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a38      	ldr	r2, [pc, #224]	; (8005d9c <HAL_DMA_IRQHandler+0xe2c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d02c      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a36      	ldr	r2, [pc, #216]	; (8005da0 <HAL_DMA_IRQHandler+0xe30>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d027      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a35      	ldr	r2, [pc, #212]	; (8005da4 <HAL_DMA_IRQHandler+0xe34>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d022      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a33      	ldr	r2, [pc, #204]	; (8005da8 <HAL_DMA_IRQHandler+0xe38>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d01d      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a32      	ldr	r2, [pc, #200]	; (8005dac <HAL_DMA_IRQHandler+0xe3c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d018      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a30      	ldr	r2, [pc, #192]	; (8005db0 <HAL_DMA_IRQHandler+0xe40>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a2f      	ldr	r2, [pc, #188]	; (8005db4 <HAL_DMA_IRQHandler+0xe44>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00e      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a2d      	ldr	r2, [pc, #180]	; (8005db8 <HAL_DMA_IRQHandler+0xe48>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d009      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a2c      	ldr	r2, [pc, #176]	; (8005dbc <HAL_DMA_IRQHandler+0xe4c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d004      	beq.n	8005d1a <HAL_DMA_IRQHandler+0xdaa>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a2a      	ldr	r2, [pc, #168]	; (8005dc0 <HAL_DMA_IRQHandler+0xe50>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d108      	bne.n	8005d2c <HAL_DMA_IRQHandler+0xdbc>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 021c 	bic.w	r2, r2, #28
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	e007      	b.n	8005d3c <HAL_DMA_IRQHandler+0xdcc>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 020e 	bic.w	r2, r2, #14
 8005d3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	2201      	movs	r2, #1
 8005d46:	409a      	lsls	r2, r3
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d009      	beq.n	8005d7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
 8005d72:	e004      	b.n	8005d7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005d74:	bf00      	nop
 8005d76:	e002      	b.n	8005d7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d78:	bf00      	nop
 8005d7a:	e000      	b.n	8005d7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d7e:	3728      	adds	r7, #40	; 0x28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40020010 	.word	0x40020010
 8005d88:	40020028 	.word	0x40020028
 8005d8c:	40020040 	.word	0x40020040
 8005d90:	40020058 	.word	0x40020058
 8005d94:	40020070 	.word	0x40020070
 8005d98:	40020088 	.word	0x40020088
 8005d9c:	400200a0 	.word	0x400200a0
 8005da0:	400200b8 	.word	0x400200b8
 8005da4:	40020410 	.word	0x40020410
 8005da8:	40020428 	.word	0x40020428
 8005dac:	40020440 	.word	0x40020440
 8005db0:	40020458 	.word	0x40020458
 8005db4:	40020470 	.word	0x40020470
 8005db8:	40020488 	.word	0x40020488
 8005dbc:	400204a0 	.word	0x400204a0
 8005dc0:	400204b8 	.word	0x400204b8

08005dc4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a84      	ldr	r2, [pc, #528]	; (800600c <DMA_SetConfig+0x230>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d072      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a82      	ldr	r2, [pc, #520]	; (8006010 <DMA_SetConfig+0x234>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d06d      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a81      	ldr	r2, [pc, #516]	; (8006014 <DMA_SetConfig+0x238>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d068      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a7f      	ldr	r2, [pc, #508]	; (8006018 <DMA_SetConfig+0x23c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d063      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a7e      	ldr	r2, [pc, #504]	; (800601c <DMA_SetConfig+0x240>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d05e      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a7c      	ldr	r2, [pc, #496]	; (8006020 <DMA_SetConfig+0x244>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d059      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a7b      	ldr	r2, [pc, #492]	; (8006024 <DMA_SetConfig+0x248>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d054      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a79      	ldr	r2, [pc, #484]	; (8006028 <DMA_SetConfig+0x24c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d04f      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a78      	ldr	r2, [pc, #480]	; (800602c <DMA_SetConfig+0x250>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d04a      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a76      	ldr	r2, [pc, #472]	; (8006030 <DMA_SetConfig+0x254>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d045      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a75      	ldr	r2, [pc, #468]	; (8006034 <DMA_SetConfig+0x258>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d040      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a73      	ldr	r2, [pc, #460]	; (8006038 <DMA_SetConfig+0x25c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d03b      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a72      	ldr	r2, [pc, #456]	; (800603c <DMA_SetConfig+0x260>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d036      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a70      	ldr	r2, [pc, #448]	; (8006040 <DMA_SetConfig+0x264>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d031      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a6f      	ldr	r2, [pc, #444]	; (8006044 <DMA_SetConfig+0x268>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d02c      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a6d      	ldr	r2, [pc, #436]	; (8006048 <DMA_SetConfig+0x26c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d027      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a6c      	ldr	r2, [pc, #432]	; (800604c <DMA_SetConfig+0x270>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d022      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a6a      	ldr	r2, [pc, #424]	; (8006050 <DMA_SetConfig+0x274>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01d      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a69      	ldr	r2, [pc, #420]	; (8006054 <DMA_SetConfig+0x278>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a67      	ldr	r2, [pc, #412]	; (8006058 <DMA_SetConfig+0x27c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a66      	ldr	r2, [pc, #408]	; (800605c <DMA_SetConfig+0x280>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a64      	ldr	r2, [pc, #400]	; (8006060 <DMA_SetConfig+0x284>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a63      	ldr	r2, [pc, #396]	; (8006064 <DMA_SetConfig+0x288>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <DMA_SetConfig+0x10a>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a61      	ldr	r2, [pc, #388]	; (8006068 <DMA_SetConfig+0x28c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d101      	bne.n	8005eea <DMA_SetConfig+0x10e>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <DMA_SetConfig+0x110>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00d      	beq.n	8005f0c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ef8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d004      	beq.n	8005f0c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f0a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a3e      	ldr	r2, [pc, #248]	; (800600c <DMA_SetConfig+0x230>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d04a      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a3d      	ldr	r2, [pc, #244]	; (8006010 <DMA_SetConfig+0x234>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d045      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a3b      	ldr	r2, [pc, #236]	; (8006014 <DMA_SetConfig+0x238>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d040      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a3a      	ldr	r2, [pc, #232]	; (8006018 <DMA_SetConfig+0x23c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d03b      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a38      	ldr	r2, [pc, #224]	; (800601c <DMA_SetConfig+0x240>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d036      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a37      	ldr	r2, [pc, #220]	; (8006020 <DMA_SetConfig+0x244>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d031      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a35      	ldr	r2, [pc, #212]	; (8006024 <DMA_SetConfig+0x248>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d02c      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a34      	ldr	r2, [pc, #208]	; (8006028 <DMA_SetConfig+0x24c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d027      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a32      	ldr	r2, [pc, #200]	; (800602c <DMA_SetConfig+0x250>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d022      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a31      	ldr	r2, [pc, #196]	; (8006030 <DMA_SetConfig+0x254>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d01d      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a2f      	ldr	r2, [pc, #188]	; (8006034 <DMA_SetConfig+0x258>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d018      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a2e      	ldr	r2, [pc, #184]	; (8006038 <DMA_SetConfig+0x25c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d013      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a2c      	ldr	r2, [pc, #176]	; (800603c <DMA_SetConfig+0x260>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00e      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a2b      	ldr	r2, [pc, #172]	; (8006040 <DMA_SetConfig+0x264>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d009      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a29      	ldr	r2, [pc, #164]	; (8006044 <DMA_SetConfig+0x268>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <DMA_SetConfig+0x1d0>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a28      	ldr	r2, [pc, #160]	; (8006048 <DMA_SetConfig+0x26c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d101      	bne.n	8005fb0 <DMA_SetConfig+0x1d4>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e000      	b.n	8005fb2 <DMA_SetConfig+0x1d6>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d05a      	beq.n	800606c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fba:	f003 031f 	and.w	r3, r3, #31
 8005fbe:	223f      	movs	r2, #63	; 0x3f
 8005fc0:	409a      	lsls	r2, r3
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fd4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2b40      	cmp	r3, #64	; 0x40
 8005fe4:	d108      	bne.n	8005ff8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ff6:	e087      	b.n	8006108 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	60da      	str	r2, [r3, #12]
}
 8006008:	e07e      	b.n	8006108 <DMA_SetConfig+0x32c>
 800600a:	bf00      	nop
 800600c:	40020010 	.word	0x40020010
 8006010:	40020028 	.word	0x40020028
 8006014:	40020040 	.word	0x40020040
 8006018:	40020058 	.word	0x40020058
 800601c:	40020070 	.word	0x40020070
 8006020:	40020088 	.word	0x40020088
 8006024:	400200a0 	.word	0x400200a0
 8006028:	400200b8 	.word	0x400200b8
 800602c:	40020410 	.word	0x40020410
 8006030:	40020428 	.word	0x40020428
 8006034:	40020440 	.word	0x40020440
 8006038:	40020458 	.word	0x40020458
 800603c:	40020470 	.word	0x40020470
 8006040:	40020488 	.word	0x40020488
 8006044:	400204a0 	.word	0x400204a0
 8006048:	400204b8 	.word	0x400204b8
 800604c:	58025408 	.word	0x58025408
 8006050:	5802541c 	.word	0x5802541c
 8006054:	58025430 	.word	0x58025430
 8006058:	58025444 	.word	0x58025444
 800605c:	58025458 	.word	0x58025458
 8006060:	5802546c 	.word	0x5802546c
 8006064:	58025480 	.word	0x58025480
 8006068:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a28      	ldr	r2, [pc, #160]	; (8006114 <DMA_SetConfig+0x338>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d022      	beq.n	80060bc <DMA_SetConfig+0x2e0>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a27      	ldr	r2, [pc, #156]	; (8006118 <DMA_SetConfig+0x33c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d01d      	beq.n	80060bc <DMA_SetConfig+0x2e0>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a25      	ldr	r2, [pc, #148]	; (800611c <DMA_SetConfig+0x340>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d018      	beq.n	80060bc <DMA_SetConfig+0x2e0>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a24      	ldr	r2, [pc, #144]	; (8006120 <DMA_SetConfig+0x344>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d013      	beq.n	80060bc <DMA_SetConfig+0x2e0>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a22      	ldr	r2, [pc, #136]	; (8006124 <DMA_SetConfig+0x348>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00e      	beq.n	80060bc <DMA_SetConfig+0x2e0>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a21      	ldr	r2, [pc, #132]	; (8006128 <DMA_SetConfig+0x34c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d009      	beq.n	80060bc <DMA_SetConfig+0x2e0>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1f      	ldr	r2, [pc, #124]	; (800612c <DMA_SetConfig+0x350>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d004      	beq.n	80060bc <DMA_SetConfig+0x2e0>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1e      	ldr	r2, [pc, #120]	; (8006130 <DMA_SetConfig+0x354>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d101      	bne.n	80060c0 <DMA_SetConfig+0x2e4>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <DMA_SetConfig+0x2e6>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d020      	beq.n	8006108 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	2201      	movs	r2, #1
 80060d0:	409a      	lsls	r2, r3
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2b40      	cmp	r3, #64	; 0x40
 80060e4:	d108      	bne.n	80060f8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	60da      	str	r2, [r3, #12]
}
 80060f6:	e007      	b.n	8006108 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	60da      	str	r2, [r3, #12]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	58025408 	.word	0x58025408
 8006118:	5802541c 	.word	0x5802541c
 800611c:	58025430 	.word	0x58025430
 8006120:	58025444 	.word	0x58025444
 8006124:	58025458 	.word	0x58025458
 8006128:	5802546c 	.word	0x5802546c
 800612c:	58025480 	.word	0x58025480
 8006130:	58025494 	.word	0x58025494

08006134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a42      	ldr	r2, [pc, #264]	; (800624c <DMA_CalcBaseAndBitshift+0x118>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d04a      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a41      	ldr	r2, [pc, #260]	; (8006250 <DMA_CalcBaseAndBitshift+0x11c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d045      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a3f      	ldr	r2, [pc, #252]	; (8006254 <DMA_CalcBaseAndBitshift+0x120>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d040      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a3e      	ldr	r2, [pc, #248]	; (8006258 <DMA_CalcBaseAndBitshift+0x124>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d03b      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a3c      	ldr	r2, [pc, #240]	; (800625c <DMA_CalcBaseAndBitshift+0x128>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d036      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a3b      	ldr	r2, [pc, #236]	; (8006260 <DMA_CalcBaseAndBitshift+0x12c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d031      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a39      	ldr	r2, [pc, #228]	; (8006264 <DMA_CalcBaseAndBitshift+0x130>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d02c      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a38      	ldr	r2, [pc, #224]	; (8006268 <DMA_CalcBaseAndBitshift+0x134>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d027      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a36      	ldr	r2, [pc, #216]	; (800626c <DMA_CalcBaseAndBitshift+0x138>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d022      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a35      	ldr	r2, [pc, #212]	; (8006270 <DMA_CalcBaseAndBitshift+0x13c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d01d      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a33      	ldr	r2, [pc, #204]	; (8006274 <DMA_CalcBaseAndBitshift+0x140>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d018      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a32      	ldr	r2, [pc, #200]	; (8006278 <DMA_CalcBaseAndBitshift+0x144>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d013      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a30      	ldr	r2, [pc, #192]	; (800627c <DMA_CalcBaseAndBitshift+0x148>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00e      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a2f      	ldr	r2, [pc, #188]	; (8006280 <DMA_CalcBaseAndBitshift+0x14c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d009      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a2d      	ldr	r2, [pc, #180]	; (8006284 <DMA_CalcBaseAndBitshift+0x150>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d004      	beq.n	80061dc <DMA_CalcBaseAndBitshift+0xa8>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a2c      	ldr	r2, [pc, #176]	; (8006288 <DMA_CalcBaseAndBitshift+0x154>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d101      	bne.n	80061e0 <DMA_CalcBaseAndBitshift+0xac>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <DMA_CalcBaseAndBitshift+0xae>
 80061e0:	2300      	movs	r3, #0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d024      	beq.n	8006230 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	3b10      	subs	r3, #16
 80061ee:	4a27      	ldr	r2, [pc, #156]	; (800628c <DMA_CalcBaseAndBitshift+0x158>)
 80061f0:	fba2 2303 	umull	r2, r3, r2, r3
 80061f4:	091b      	lsrs	r3, r3, #4
 80061f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	4a24      	ldr	r2, [pc, #144]	; (8006290 <DMA_CalcBaseAndBitshift+0x15c>)
 8006200:	5cd3      	ldrb	r3, [r2, r3]
 8006202:	461a      	mov	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b03      	cmp	r3, #3
 800620c:	d908      	bls.n	8006220 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	4b1f      	ldr	r3, [pc, #124]	; (8006294 <DMA_CalcBaseAndBitshift+0x160>)
 8006216:	4013      	ands	r3, r2
 8006218:	1d1a      	adds	r2, r3, #4
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	659a      	str	r2, [r3, #88]	; 0x58
 800621e:	e00d      	b.n	800623c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	4b1b      	ldr	r3, [pc, #108]	; (8006294 <DMA_CalcBaseAndBitshift+0x160>)
 8006228:	4013      	ands	r3, r2
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6593      	str	r3, [r2, #88]	; 0x58
 800622e:	e005      	b.n	800623c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	40020010 	.word	0x40020010
 8006250:	40020028 	.word	0x40020028
 8006254:	40020040 	.word	0x40020040
 8006258:	40020058 	.word	0x40020058
 800625c:	40020070 	.word	0x40020070
 8006260:	40020088 	.word	0x40020088
 8006264:	400200a0 	.word	0x400200a0
 8006268:	400200b8 	.word	0x400200b8
 800626c:	40020410 	.word	0x40020410
 8006270:	40020428 	.word	0x40020428
 8006274:	40020440 	.word	0x40020440
 8006278:	40020458 	.word	0x40020458
 800627c:	40020470 	.word	0x40020470
 8006280:	40020488 	.word	0x40020488
 8006284:	400204a0 	.word	0x400204a0
 8006288:	400204b8 	.word	0x400204b8
 800628c:	aaaaaaab 	.word	0xaaaaaaab
 8006290:	08017e60 	.word	0x08017e60
 8006294:	fffffc00 	.word	0xfffffc00

08006298 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d120      	bne.n	80062ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d858      	bhi.n	8006366 <DMA_CheckFifoParam+0xce>
 80062b4:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <DMA_CheckFifoParam+0x24>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062cd 	.word	0x080062cd
 80062c0:	080062df 	.word	0x080062df
 80062c4:	080062cd 	.word	0x080062cd
 80062c8:	08006367 	.word	0x08006367
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d048      	beq.n	800636a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062dc:	e045      	b.n	800636a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062e6:	d142      	bne.n	800636e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062ec:	e03f      	b.n	800636e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f6:	d123      	bne.n	8006340 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d838      	bhi.n	8006372 <DMA_CheckFifoParam+0xda>
 8006300:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <DMA_CheckFifoParam+0x70>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	08006319 	.word	0x08006319
 800630c:	0800631f 	.word	0x0800631f
 8006310:	08006319 	.word	0x08006319
 8006314:	08006331 	.word	0x08006331
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	73fb      	strb	r3, [r7, #15]
        break;
 800631c:	e030      	b.n	8006380 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d025      	beq.n	8006376 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800632e:	e022      	b.n	8006376 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006338:	d11f      	bne.n	800637a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800633e:	e01c      	b.n	800637a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	2b02      	cmp	r3, #2
 8006346:	d902      	bls.n	800634e <DMA_CheckFifoParam+0xb6>
 8006348:	2b03      	cmp	r3, #3
 800634a:	d003      	beq.n	8006354 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800634c:	e018      	b.n	8006380 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	73fb      	strb	r3, [r7, #15]
        break;
 8006352:	e015      	b.n	8006380 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00e      	beq.n	800637e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
    break;
 8006364:	e00b      	b.n	800637e <DMA_CheckFifoParam+0xe6>
        break;
 8006366:	bf00      	nop
 8006368:	e00a      	b.n	8006380 <DMA_CheckFifoParam+0xe8>
        break;
 800636a:	bf00      	nop
 800636c:	e008      	b.n	8006380 <DMA_CheckFifoParam+0xe8>
        break;
 800636e:	bf00      	nop
 8006370:	e006      	b.n	8006380 <DMA_CheckFifoParam+0xe8>
        break;
 8006372:	bf00      	nop
 8006374:	e004      	b.n	8006380 <DMA_CheckFifoParam+0xe8>
        break;
 8006376:	bf00      	nop
 8006378:	e002      	b.n	8006380 <DMA_CheckFifoParam+0xe8>
        break;
 800637a:	bf00      	nop
 800637c:	e000      	b.n	8006380 <DMA_CheckFifoParam+0xe8>
    break;
 800637e:	bf00      	nop
    }
  }

  return status;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop

08006390 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a38      	ldr	r2, [pc, #224]	; (8006484 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d022      	beq.n	80063ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a36      	ldr	r2, [pc, #216]	; (8006488 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d01d      	beq.n	80063ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a35      	ldr	r2, [pc, #212]	; (800648c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d018      	beq.n	80063ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a33      	ldr	r2, [pc, #204]	; (8006490 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d013      	beq.n	80063ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a32      	ldr	r2, [pc, #200]	; (8006494 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d00e      	beq.n	80063ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a30      	ldr	r2, [pc, #192]	; (8006498 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d009      	beq.n	80063ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a2f      	ldr	r2, [pc, #188]	; (800649c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d004      	beq.n	80063ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a2d      	ldr	r2, [pc, #180]	; (80064a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d101      	bne.n	80063f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80063f2:	2300      	movs	r3, #0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01a      	beq.n	800642e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	3b08      	subs	r3, #8
 8006400:	4a28      	ldr	r2, [pc, #160]	; (80064a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006402:	fba2 2303 	umull	r2, r3, r2, r3
 8006406:	091b      	lsrs	r3, r3, #4
 8006408:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4b26      	ldr	r3, [pc, #152]	; (80064a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800640e:	4413      	add	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	461a      	mov	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a24      	ldr	r2, [pc, #144]	; (80064ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800641c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f003 031f 	and.w	r3, r3, #31
 8006424:	2201      	movs	r2, #1
 8006426:	409a      	lsls	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800642c:	e024      	b.n	8006478 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	3b10      	subs	r3, #16
 8006436:	4a1e      	ldr	r2, [pc, #120]	; (80064b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	4a1c      	ldr	r2, [pc, #112]	; (80064b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d806      	bhi.n	8006456 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	4a1b      	ldr	r2, [pc, #108]	; (80064b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d902      	bls.n	8006456 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3308      	adds	r3, #8
 8006454:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4b18      	ldr	r3, [pc, #96]	; (80064bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	461a      	mov	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a16      	ldr	r2, [pc, #88]	; (80064c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006468:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	2201      	movs	r2, #1
 8006472:	409a      	lsls	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006478:	bf00      	nop
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	58025408 	.word	0x58025408
 8006488:	5802541c 	.word	0x5802541c
 800648c:	58025430 	.word	0x58025430
 8006490:	58025444 	.word	0x58025444
 8006494:	58025458 	.word	0x58025458
 8006498:	5802546c 	.word	0x5802546c
 800649c:	58025480 	.word	0x58025480
 80064a0:	58025494 	.word	0x58025494
 80064a4:	cccccccd 	.word	0xcccccccd
 80064a8:	16009600 	.word	0x16009600
 80064ac:	58025880 	.word	0x58025880
 80064b0:	aaaaaaab 	.word	0xaaaaaaab
 80064b4:	400204b8 	.word	0x400204b8
 80064b8:	4002040f 	.word	0x4002040f
 80064bc:	10008200 	.word	0x10008200
 80064c0:	40020880 	.word	0x40020880

080064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d04a      	beq.n	8006570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d847      	bhi.n	8006570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a25      	ldr	r2, [pc, #148]	; (800657c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d022      	beq.n	8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a24      	ldr	r2, [pc, #144]	; (8006580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d01d      	beq.n	8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a22      	ldr	r2, [pc, #136]	; (8006584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d018      	beq.n	8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a21      	ldr	r2, [pc, #132]	; (8006588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d013      	beq.n	8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1f      	ldr	r2, [pc, #124]	; (800658c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00e      	beq.n	8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1e      	ldr	r2, [pc, #120]	; (8006590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d009      	beq.n	8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1c      	ldr	r2, [pc, #112]	; (8006594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1b      	ldr	r2, [pc, #108]	; (8006598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d101      	bne.n	8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006534:	2300      	movs	r3, #0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4b17      	ldr	r3, [pc, #92]	; (800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	461a      	mov	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800654c:	671a      	str	r2, [r3, #112]	; 0x70
 800654e:	e009      	b.n	8006564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	461a      	mov	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a11      	ldr	r2, [pc, #68]	; (80065a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006562:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3b01      	subs	r3, #1
 8006568:	2201      	movs	r2, #1
 800656a:	409a      	lsls	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006570:	bf00      	nop
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	58025408 	.word	0x58025408
 8006580:	5802541c 	.word	0x5802541c
 8006584:	58025430 	.word	0x58025430
 8006588:	58025444 	.word	0x58025444
 800658c:	58025458 	.word	0x58025458
 8006590:	5802546c 	.word	0x5802546c
 8006594:	58025480 	.word	0x58025480
 8006598:	58025494 	.word	0x58025494
 800659c:	1600963f 	.word	0x1600963f
 80065a0:	58025940 	.word	0x58025940
 80065a4:	1000823f 	.word	0x1000823f
 80065a8:	40020940 	.word	0x40020940

080065ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b089      	sub	sp, #36	; 0x24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80065ba:	4b89      	ldr	r3, [pc, #548]	; (80067e0 <HAL_GPIO_Init+0x234>)
 80065bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065be:	e194      	b.n	80068ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	2101      	movs	r1, #1
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	fa01 f303 	lsl.w	r3, r1, r3
 80065cc:	4013      	ands	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 8186 	beq.w	80068e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d00b      	beq.n	80065f8 <HAL_GPIO_Init+0x4c>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d007      	beq.n	80065f8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80065ec:	2b11      	cmp	r3, #17
 80065ee:	d003      	beq.n	80065f8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	2b12      	cmp	r3, #18
 80065f6:	d130      	bne.n	800665a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	2203      	movs	r2, #3
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	43db      	mvns	r3, r3
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	4013      	ands	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	fa02 f303 	lsl.w	r3, r2, r3
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	4313      	orrs	r3, r2
 8006620:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800662e:	2201      	movs	r2, #1
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	43db      	mvns	r3, r3
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	4013      	ands	r3, r2
 800663c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	091b      	lsrs	r3, r3, #4
 8006644:	f003 0201 	and.w	r2, r3, #1
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	4313      	orrs	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	2203      	movs	r2, #3
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	4013      	ands	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	4313      	orrs	r3, r2
 8006682:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2b02      	cmp	r3, #2
 8006690:	d003      	beq.n	800669a <HAL_GPIO_Init+0xee>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b12      	cmp	r3, #18
 8006698:	d123      	bne.n	80066e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	08da      	lsrs	r2, r3, #3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3208      	adds	r2, #8
 80066a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	220f      	movs	r2, #15
 80066b2:	fa02 f303 	lsl.w	r3, r2, r3
 80066b6:	43db      	mvns	r3, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4013      	ands	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	08da      	lsrs	r2, r3, #3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3208      	adds	r2, #8
 80066dc:	69b9      	ldr	r1, [r7, #24]
 80066de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	2203      	movs	r2, #3
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	43db      	mvns	r3, r3
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4013      	ands	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f003 0203 	and.w	r2, r3, #3
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	4313      	orrs	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 80e0 	beq.w	80068e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006724:	4b2f      	ldr	r3, [pc, #188]	; (80067e4 <HAL_GPIO_Init+0x238>)
 8006726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800672a:	4a2e      	ldr	r2, [pc, #184]	; (80067e4 <HAL_GPIO_Init+0x238>)
 800672c:	f043 0302 	orr.w	r3, r3, #2
 8006730:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006734:	4b2b      	ldr	r3, [pc, #172]	; (80067e4 <HAL_GPIO_Init+0x238>)
 8006736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006742:	4a29      	ldr	r2, [pc, #164]	; (80067e8 <HAL_GPIO_Init+0x23c>)
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	089b      	lsrs	r3, r3, #2
 8006748:	3302      	adds	r3, #2
 800674a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800674e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	220f      	movs	r2, #15
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	43db      	mvns	r3, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	4013      	ands	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a20      	ldr	r2, [pc, #128]	; (80067ec <HAL_GPIO_Init+0x240>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d052      	beq.n	8006814 <HAL_GPIO_Init+0x268>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <HAL_GPIO_Init+0x244>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d031      	beq.n	80067da <HAL_GPIO_Init+0x22e>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a1e      	ldr	r2, [pc, #120]	; (80067f4 <HAL_GPIO_Init+0x248>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d02b      	beq.n	80067d6 <HAL_GPIO_Init+0x22a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a1d      	ldr	r2, [pc, #116]	; (80067f8 <HAL_GPIO_Init+0x24c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d025      	beq.n	80067d2 <HAL_GPIO_Init+0x226>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a1c      	ldr	r2, [pc, #112]	; (80067fc <HAL_GPIO_Init+0x250>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d01f      	beq.n	80067ce <HAL_GPIO_Init+0x222>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a1b      	ldr	r2, [pc, #108]	; (8006800 <HAL_GPIO_Init+0x254>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d019      	beq.n	80067ca <HAL_GPIO_Init+0x21e>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a1a      	ldr	r2, [pc, #104]	; (8006804 <HAL_GPIO_Init+0x258>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d013      	beq.n	80067c6 <HAL_GPIO_Init+0x21a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a19      	ldr	r2, [pc, #100]	; (8006808 <HAL_GPIO_Init+0x25c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00d      	beq.n	80067c2 <HAL_GPIO_Init+0x216>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a18      	ldr	r2, [pc, #96]	; (800680c <HAL_GPIO_Init+0x260>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d007      	beq.n	80067be <HAL_GPIO_Init+0x212>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a17      	ldr	r2, [pc, #92]	; (8006810 <HAL_GPIO_Init+0x264>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d101      	bne.n	80067ba <HAL_GPIO_Init+0x20e>
 80067b6:	2309      	movs	r3, #9
 80067b8:	e02d      	b.n	8006816 <HAL_GPIO_Init+0x26a>
 80067ba:	230a      	movs	r3, #10
 80067bc:	e02b      	b.n	8006816 <HAL_GPIO_Init+0x26a>
 80067be:	2308      	movs	r3, #8
 80067c0:	e029      	b.n	8006816 <HAL_GPIO_Init+0x26a>
 80067c2:	2307      	movs	r3, #7
 80067c4:	e027      	b.n	8006816 <HAL_GPIO_Init+0x26a>
 80067c6:	2306      	movs	r3, #6
 80067c8:	e025      	b.n	8006816 <HAL_GPIO_Init+0x26a>
 80067ca:	2305      	movs	r3, #5
 80067cc:	e023      	b.n	8006816 <HAL_GPIO_Init+0x26a>
 80067ce:	2304      	movs	r3, #4
 80067d0:	e021      	b.n	8006816 <HAL_GPIO_Init+0x26a>
 80067d2:	2303      	movs	r3, #3
 80067d4:	e01f      	b.n	8006816 <HAL_GPIO_Init+0x26a>
 80067d6:	2302      	movs	r3, #2
 80067d8:	e01d      	b.n	8006816 <HAL_GPIO_Init+0x26a>
 80067da:	2301      	movs	r3, #1
 80067dc:	e01b      	b.n	8006816 <HAL_GPIO_Init+0x26a>
 80067de:	bf00      	nop
 80067e0:	58000080 	.word	0x58000080
 80067e4:	58024400 	.word	0x58024400
 80067e8:	58000400 	.word	0x58000400
 80067ec:	58020000 	.word	0x58020000
 80067f0:	58020400 	.word	0x58020400
 80067f4:	58020800 	.word	0x58020800
 80067f8:	58020c00 	.word	0x58020c00
 80067fc:	58021000 	.word	0x58021000
 8006800:	58021400 	.word	0x58021400
 8006804:	58021800 	.word	0x58021800
 8006808:	58021c00 	.word	0x58021c00
 800680c:	58022000 	.word	0x58022000
 8006810:	58022400 	.word	0x58022400
 8006814:	2300      	movs	r3, #0
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	f002 0203 	and.w	r2, r2, #3
 800681c:	0092      	lsls	r2, r2, #2
 800681e:	4093      	lsls	r3, r2
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	4313      	orrs	r3, r2
 8006824:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006826:	4938      	ldr	r1, [pc, #224]	; (8006908 <HAL_GPIO_Init+0x35c>)
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	089b      	lsrs	r3, r3, #2
 800682c:	3302      	adds	r3, #2
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	43db      	mvns	r3, r3
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	4013      	ands	r3, r2
 8006842:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	43db      	mvns	r3, r3
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	4013      	ands	r3, r2
 800686c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	43db      	mvns	r3, r3
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	4013      	ands	r3, r2
 8006898:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80068ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80068b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	4013      	ands	r3, r2
 80068c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80068dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	3301      	adds	r3, #1
 80068e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f47f ae63 	bne.w	80065c0 <HAL_GPIO_Init+0x14>
  }
}
 80068fa:	bf00      	nop
 80068fc:	3724      	adds	r7, #36	; 0x24
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	58000400 	.word	0x58000400

0800690c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	887b      	ldrh	r3, [r7, #2]
 800691e:	4013      	ands	r3, r2
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006924:	2301      	movs	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
 8006928:	e001      	b.n	800692e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	807b      	strh	r3, [r7, #2]
 8006948:	4613      	mov	r3, r2
 800694a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800694c:	787b      	ldrb	r3, [r7, #1]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006952:	887a      	ldrh	r2, [r7, #2]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006958:	e003      	b.n	8006962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800695a:	887b      	ldrh	r3, [r7, #2]
 800695c:	041a      	lsls	r2, r3, #16
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	619a      	str	r2, [r3, #24]
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800696e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006970:	b08f      	sub	sp, #60	; 0x3c
 8006972:	af0a      	add	r7, sp, #40	; 0x28
 8006974:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e116      	b.n	8006bae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f00f fe94 	bl	80166c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2203      	movs	r2, #3
 80069a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f008 fef5 	bl	800f7ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	603b      	str	r3, [r7, #0]
 80069ca:	687e      	ldr	r6, [r7, #4]
 80069cc:	466d      	mov	r5, sp
 80069ce:	f106 0410 	add.w	r4, r6, #16
 80069d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069de:	e885 0003 	stmia.w	r5, {r0, r1}
 80069e2:	1d33      	adds	r3, r6, #4
 80069e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069e6:	6838      	ldr	r0, [r7, #0]
 80069e8:	f008 fdcc 	bl	800f584 <USB_CoreInit>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2202      	movs	r2, #2
 80069f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e0d7      	b.n	8006bae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2100      	movs	r1, #0
 8006a04:	4618      	mov	r0, r3
 8006a06:	f008 fee3 	bl	800f7d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	73fb      	strb	r3, [r7, #15]
 8006a0e:	e04a      	b.n	8006aa6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006a10:	7bfa      	ldrb	r2, [r7, #15]
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	4613      	mov	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	1a9b      	subs	r3, r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	333d      	adds	r3, #61	; 0x3d
 8006a20:	2201      	movs	r2, #1
 8006a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006a24:	7bfa      	ldrb	r2, [r7, #15]
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	333c      	adds	r3, #60	; 0x3c
 8006a34:	7bfa      	ldrb	r2, [r7, #15]
 8006a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006a38:	7bfa      	ldrb	r2, [r7, #15]
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	b298      	uxth	r0, r3
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	4613      	mov	r3, r2
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	1a9b      	subs	r3, r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	3342      	adds	r3, #66	; 0x42
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006a50:	7bfa      	ldrb	r2, [r7, #15]
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	4613      	mov	r3, r2
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	333f      	adds	r3, #63	; 0x3f
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006a64:	7bfa      	ldrb	r2, [r7, #15]
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	1a9b      	subs	r3, r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	3344      	adds	r3, #68	; 0x44
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006a78:	7bfa      	ldrb	r2, [r7, #15]
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	1a9b      	subs	r3, r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	440b      	add	r3, r1
 8006a86:	3348      	adds	r3, #72	; 0x48
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a8c:	7bfa      	ldrb	r2, [r7, #15]
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	4613      	mov	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	1a9b      	subs	r3, r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	3350      	adds	r3, #80	; 0x50
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	73fb      	strb	r3, [r7, #15]
 8006aa6:	7bfa      	ldrb	r2, [r7, #15]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d3af      	bcc.n	8006a10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	73fb      	strb	r3, [r7, #15]
 8006ab4:	e044      	b.n	8006b40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006ab6:	7bfa      	ldrb	r2, [r7, #15]
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	00db      	lsls	r3, r3, #3
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006acc:	7bfa      	ldrb	r2, [r7, #15]
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006ade:	7bfa      	ldrb	r2, [r7, #15]
 8006ae0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ae2:	7bfa      	ldrb	r2, [r7, #15]
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	440b      	add	r3, r1
 8006af0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006af4:	2200      	movs	r2, #0
 8006af6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006af8:	7bfa      	ldrb	r2, [r7, #15]
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	4613      	mov	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	1a9b      	subs	r3, r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006b0e:	7bfa      	ldrb	r2, [r7, #15]
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	1a9b      	subs	r3, r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006b24:	7bfa      	ldrb	r2, [r7, #15]
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	1a9b      	subs	r3, r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	440b      	add	r3, r1
 8006b32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	73fb      	strb	r3, [r7, #15]
 8006b40:	7bfa      	ldrb	r2, [r7, #15]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d3b5      	bcc.n	8006ab6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	603b      	str	r3, [r7, #0]
 8006b50:	687e      	ldr	r6, [r7, #4]
 8006b52:	466d      	mov	r5, sp
 8006b54:	f106 0410 	add.w	r4, r6, #16
 8006b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b64:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b68:	1d33      	adds	r3, r6, #4
 8006b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b6c:	6838      	ldr	r0, [r7, #0]
 8006b6e:	f008 fe59 	bl	800f824 <USB_DevInit>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e014      	b.n	8006bae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d102      	bne.n	8006ba2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 f891 	bl	8007cc4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f009 fe98 	bl	80108dc <USB_DevDisconnect>

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006bb6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_PCD_Start+0x1c>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e020      	b.n	8006c14 <HAL_PCD_Start+0x5e>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d109      	bne.n	8006bf6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d005      	beq.n	8006bf6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f009 fe56 	bl	80108ac <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f008 fdc1 	bl	800f78c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006c1c:	b590      	push	{r4, r7, lr}
 8006c1e:	b08d      	sub	sp, #52	; 0x34
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f009 fefd 	bl	8010a32 <USB_GetMode>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f040 83ca 	bne.w	80073d4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f009 fe61 	bl	801090c <USB_ReadInterrupts>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 83c0 	beq.w	80073d2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f009 fe58 	bl	801090c <USB_ReadInterrupts>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d107      	bne.n	8006c76 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695a      	ldr	r2, [r3, #20]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f002 0202 	and.w	r2, r2, #2
 8006c74:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f009 fe46 	bl	801090c <USB_ReadInterrupts>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f003 0310 	and.w	r3, r3, #16
 8006c86:	2b10      	cmp	r3, #16
 8006c88:	d161      	bne.n	8006d4e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699a      	ldr	r2, [r3, #24]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0210 	bic.w	r2, r2, #16
 8006c98:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f003 020f 	and.w	r2, r3, #15
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	1a9b      	subs	r3, r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	0c5b      	lsrs	r3, r3, #17
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d124      	bne.n	8006d10 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006ccc:	4013      	ands	r3, r2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d035      	beq.n	8006d3e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	091b      	lsrs	r3, r3, #4
 8006cda:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006cdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6a38      	ldr	r0, [r7, #32]
 8006ce6:	f009 fcbe 	bl	8010666 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	091b      	lsrs	r3, r3, #4
 8006cf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cf6:	441a      	add	r2, r3
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	091b      	lsrs	r3, r3, #4
 8006d04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d08:	441a      	add	r2, r3
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	619a      	str	r2, [r3, #24]
 8006d0e:	e016      	b.n	8006d3e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	0c5b      	lsrs	r3, r3, #17
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	2b06      	cmp	r3, #6
 8006d1a:	d110      	bne.n	8006d3e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d22:	2208      	movs	r2, #8
 8006d24:	4619      	mov	r1, r3
 8006d26:	6a38      	ldr	r0, [r7, #32]
 8006d28:	f009 fc9d 	bl	8010666 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	699a      	ldr	r2, [r3, #24]
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	091b      	lsrs	r3, r3, #4
 8006d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d38:	441a      	add	r2, r3
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0210 	orr.w	r2, r2, #16
 8006d4c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f009 fdda 	bl	801090c <USB_ReadInterrupts>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d62:	d16e      	bne.n	8006e42 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f009 fde0 	bl	8010932 <USB_ReadDevAllOutEpInterrupt>
 8006d72:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006d74:	e062      	b.n	8006e3c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d057      	beq.n	8006e30 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	4611      	mov	r1, r2
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f009 fe05 	bl	801099a <USB_ReadDevOutEPInterrupt>
 8006d90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00c      	beq.n	8006db6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da8:	461a      	mov	r2, r3
 8006daa:	2301      	movs	r3, #1
 8006dac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006dae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fddd 	bl	8007970 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00c      	beq.n	8006dda <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2308      	movs	r3, #8
 8006dd0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006dd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fed7 	bl	8007b88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d008      	beq.n	8006df6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df0:	461a      	mov	r2, r3
 8006df2:	2310      	movs	r3, #16
 8006df4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d008      	beq.n	8006e12 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	2320      	movs	r3, #32
 8006e10:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d009      	beq.n	8006e30 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e2e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	3301      	adds	r3, #1
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	085b      	lsrs	r3, r3, #1
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d199      	bne.n	8006d76 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f009 fd60 	bl	801090c <USB_ReadInterrupts>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e56:	f040 80c0 	bne.w	8006fda <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f009 fd81 	bl	8010966 <USB_ReadDevAllInEpInterrupt>
 8006e64:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006e6a:	e0b2      	b.n	8006fd2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 80a7 	beq.w	8006fc6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f009 fda7 	bl	80109d6 <USB_ReadDevInEPInterrupt>
 8006e88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d057      	beq.n	8006f44 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	43db      	mvns	r3, r3
 8006eae:	69f9      	ldr	r1, [r7, #28]
 8006eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d132      	bne.n	8006f38 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006ed2:	6879      	ldr	r1, [r7, #4]
 8006ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	1a9b      	subs	r3, r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	3348      	adds	r3, #72	; 0x48
 8006ee2:	6819      	ldr	r1, [r3, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee8:	4613      	mov	r3, r2
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	1a9b      	subs	r3, r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4403      	add	r3, r0
 8006ef2:	3344      	adds	r3, #68	; 0x44
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4419      	add	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efc:	4613      	mov	r3, r2
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	1a9b      	subs	r3, r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4403      	add	r3, r0
 8006f06:	3348      	adds	r3, #72	; 0x48
 8006f08:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d113      	bne.n	8006f38 <HAL_PCD_IRQHandler+0x31c>
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f14:	4613      	mov	r3, r2
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	1a9b      	subs	r3, r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	3350      	adds	r3, #80	; 0x50
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d108      	bne.n	8006f38 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f30:	461a      	mov	r2, r3
 8006f32:	2101      	movs	r1, #1
 8006f34:	f009 fdb0 	bl	8010a98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f00f fc41 	bl	80167c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d008      	beq.n	8006f60 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f003 0310 	and.w	r3, r3, #16
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f76:	461a      	mov	r2, r3
 8006f78:	2310      	movs	r3, #16
 8006f7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d008      	beq.n	8006f98 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f92:	461a      	mov	r2, r3
 8006f94:	2340      	movs	r3, #64	; 0x40
 8006f96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d008      	beq.n	8006fb4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fae:	461a      	mov	r2, r3
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fc48 	bl	8007856 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	3301      	adds	r3, #1
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f47f af49 	bne.w	8006e6c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f009 fc94 	bl	801090c <USB_ReadInterrupts>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fee:	d122      	bne.n	8007036 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ffe:	f023 0301 	bic.w	r3, r3, #1
 8007002:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800700a:	2b01      	cmp	r3, #1
 800700c:	d108      	bne.n	8007020 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007016:	2100      	movs	r1, #0
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fe77 	bl	8007d0c <HAL_PCDEx_LPM_Callback>
 800701e:	e002      	b.n	8007026 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f00f fc47 	bl	80168b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	695a      	ldr	r2, [r3, #20]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007034:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f009 fc66 	bl	801090c <USB_ReadInterrupts>
 8007040:	4603      	mov	r3, r0
 8007042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800704a:	d112      	bne.n	8007072 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b01      	cmp	r3, #1
 800705a:	d102      	bne.n	8007062 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f00f fc03 	bl	8016868 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	695a      	ldr	r2, [r3, #20]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007070:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f009 fc48 	bl	801090c <USB_ReadInterrupts>
 800707c:	4603      	mov	r3, r0
 800707e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007086:	d121      	bne.n	80070cc <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695a      	ldr	r2, [r3, #20]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007096:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d111      	bne.n	80070c6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b0:	089b      	lsrs	r3, r3, #2
 80070b2:	f003 020f 	and.w	r2, r3, #15
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80070bc:	2101      	movs	r1, #1
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fe24 	bl	8007d0c <HAL_PCDEx_LPM_Callback>
 80070c4:	e002      	b.n	80070cc <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f00f fbce 	bl	8016868 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f009 fc1b 	bl	801090c <USB_ReadInterrupts>
 80070d6:	4603      	mov	r3, r0
 80070d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e0:	f040 80c7 	bne.w	8007272 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070f2:	f023 0301 	bic.w	r3, r3, #1
 80070f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2110      	movs	r1, #16
 80070fe:	4618      	mov	r0, r3
 8007100:	f008 fcee 	bl	800fae0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007104:	2300      	movs	r3, #0
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007108:	e056      	b.n	80071b8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007116:	461a      	mov	r2, r3
 8007118:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800711c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800712e:	0151      	lsls	r1, r2, #5
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	440a      	add	r2, r1
 8007134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007138:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800713c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800714e:	0151      	lsls	r1, r2, #5
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	440a      	add	r2, r1
 8007154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007158:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800715c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716a:	461a      	mov	r2, r3
 800716c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007170:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800718c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007190:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a2:	0151      	lsls	r1, r2, #5
 80071a4:	69fa      	ldr	r2, [r7, #28]
 80071a6:	440a      	add	r2, r1
 80071a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	3301      	adds	r3, #1
 80071b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071be:	429a      	cmp	r2, r3
 80071c0:	d3a3      	bcc.n	800710a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80071d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d016      	beq.n	800720c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ee:	f043 030b 	orr.w	r3, r3, #11
 80071f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fe:	69fa      	ldr	r2, [r7, #28]
 8007200:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007204:	f043 030b 	orr.w	r3, r3, #11
 8007208:	6453      	str	r3, [r2, #68]	; 0x44
 800720a:	e015      	b.n	8007238 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007212:	695a      	ldr	r2, [r3, #20]
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721a:	4619      	mov	r1, r3
 800721c:	f242 032b 	movw	r3, #8235	; 0x202b
 8007220:	4313      	orrs	r3, r2
 8007222:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	69fa      	ldr	r2, [r7, #28]
 800722e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007232:	f043 030b 	orr.w	r3, r3, #11
 8007236:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007246:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800724a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6818      	ldr	r0, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800725c:	461a      	mov	r2, r3
 800725e:	f009 fc1b 	bl	8010a98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695a      	ldr	r2, [r3, #20]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007270:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f009 fb48 	bl	801090c <USB_ReadInterrupts>
 800727c:	4603      	mov	r3, r0
 800727e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007286:	d124      	bne.n	80072d2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f009 fbdf 	bl	8010a50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f008 fc83 	bl	800fba2 <USB_GetDevSpeed>
 800729c:	4603      	mov	r3, r0
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681c      	ldr	r4, [r3, #0]
 80072a8:	f001 fcbe 	bl	8008c28 <HAL_RCC_GetHCLKFreq>
 80072ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	4620      	mov	r0, r4
 80072b8:	f008 f9c6 	bl	800f648 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f00f faaa 	bl	8016816 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	695a      	ldr	r2, [r3, #20]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80072d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f009 fb18 	bl	801090c <USB_ReadInterrupts>
 80072dc:	4603      	mov	r3, r0
 80072de:	f003 0308 	and.w	r3, r3, #8
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d10a      	bne.n	80072fc <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f00f fa87 	bl	80167fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695a      	ldr	r2, [r3, #20]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f002 0208 	and.w	r2, r2, #8
 80072fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4618      	mov	r0, r3
 8007302:	f009 fb03 	bl	801090c <USB_ReadInterrupts>
 8007306:	4603      	mov	r3, r0
 8007308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800730c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007310:	d10f      	bne.n	8007332 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	b2db      	uxtb	r3, r3
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f00f fae9 	bl	80168f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695a      	ldr	r2, [r3, #20]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4618      	mov	r0, r3
 8007338:	f009 fae8 	bl	801090c <USB_ReadInterrupts>
 800733c:	4603      	mov	r3, r0
 800733e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007346:	d10f      	bne.n	8007368 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	b2db      	uxtb	r3, r3
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f00f fabc 	bl	80168d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	695a      	ldr	r2, [r3, #20]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	f009 facd 	bl	801090c <USB_ReadInterrupts>
 8007372:	4603      	mov	r3, r0
 8007374:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800737c:	d10a      	bne.n	8007394 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f00f faca 	bl	8016918 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695a      	ldr	r2, [r3, #20]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007392:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4618      	mov	r0, r3
 800739a:	f009 fab7 	bl	801090c <USB_ReadInterrupts>
 800739e:	4603      	mov	r3, r0
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d115      	bne.n	80073d4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f00f faba 	bl	8016934 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6859      	ldr	r1, [r3, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	605a      	str	r2, [r3, #4]
 80073d0:	e000      	b.n	80073d4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80073d2:	bf00      	nop
    }
  }
}
 80073d4:	3734      	adds	r7, #52	; 0x34
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd90      	pop	{r4, r7, pc}

080073da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	460b      	mov	r3, r1
 80073e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_PCD_SetAddress+0x1a>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e013      	b.n	800741c <HAL_PCD_SetAddress+0x42>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	78fa      	ldrb	r2, [r7, #3]
 8007400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	78fa      	ldrb	r2, [r7, #3]
 800740a:	4611      	mov	r1, r2
 800740c:	4618      	mov	r0, r3
 800740e:	f009 fa27 	bl	8010860 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	4608      	mov	r0, r1
 800742e:	4611      	mov	r1, r2
 8007430:	461a      	mov	r2, r3
 8007432:	4603      	mov	r3, r0
 8007434:	70fb      	strb	r3, [r7, #3]
 8007436:	460b      	mov	r3, r1
 8007438:	803b      	strh	r3, [r7, #0]
 800743a:	4613      	mov	r3, r2
 800743c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007446:	2b00      	cmp	r3, #0
 8007448:	da0f      	bge.n	800746a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800744a:	78fb      	ldrb	r3, [r7, #3]
 800744c:	f003 020f 	and.w	r2, r3, #15
 8007450:	4613      	mov	r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	3338      	adds	r3, #56	; 0x38
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	4413      	add	r3, r2
 800745e:	3304      	adds	r3, #4
 8007460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2201      	movs	r2, #1
 8007466:	705a      	strb	r2, [r3, #1]
 8007468:	e00f      	b.n	800748a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	f003 020f 	and.w	r2, r3, #15
 8007470:	4613      	mov	r3, r2
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	1a9b      	subs	r3, r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	4413      	add	r3, r2
 8007480:	3304      	adds	r3, #4
 8007482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	f003 030f 	and.w	r3, r3, #15
 8007490:	b2da      	uxtb	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007496:	883a      	ldrh	r2, [r7, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	78ba      	ldrb	r2, [r7, #2]
 80074a0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	785b      	ldrb	r3, [r3, #1]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d004      	beq.n	80074b4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80074b4:	78bb      	ldrb	r3, [r7, #2]
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d102      	bne.n	80074c0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d101      	bne.n	80074ce <HAL_PCD_EP_Open+0xaa>
 80074ca:	2302      	movs	r3, #2
 80074cc:	e00e      	b.n	80074ec <HAL_PCD_EP_Open+0xc8>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68f9      	ldr	r1, [r7, #12]
 80074dc:	4618      	mov	r0, r3
 80074de:	f008 fb85 	bl	800fbec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80074ea:	7afb      	ldrb	r3, [r7, #11]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007504:	2b00      	cmp	r3, #0
 8007506:	da0f      	bge.n	8007528 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	f003 020f 	and.w	r2, r3, #15
 800750e:	4613      	mov	r3, r2
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	1a9b      	subs	r3, r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	3338      	adds	r3, #56	; 0x38
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	4413      	add	r3, r2
 800751c:	3304      	adds	r3, #4
 800751e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	705a      	strb	r2, [r3, #1]
 8007526:	e00f      	b.n	8007548 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	f003 020f 	and.w	r2, r3, #15
 800752e:	4613      	mov	r3, r2
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	3304      	adds	r3, #4
 8007540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	b2da      	uxtb	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800755a:	2b01      	cmp	r3, #1
 800755c:	d101      	bne.n	8007562 <HAL_PCD_EP_Close+0x6e>
 800755e:	2302      	movs	r3, #2
 8007560:	e00e      	b.n	8007580 <HAL_PCD_EP_Close+0x8c>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68f9      	ldr	r1, [r7, #12]
 8007570:	4618      	mov	r0, r3
 8007572:	f008 fbc3 	bl	800fcfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	607a      	str	r2, [r7, #4]
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	460b      	mov	r3, r1
 8007596:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007598:	7afb      	ldrb	r3, [r7, #11]
 800759a:	f003 020f 	and.w	r2, r3, #15
 800759e:	4613      	mov	r3, r2
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	1a9b      	subs	r3, r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4413      	add	r3, r2
 80075ae:	3304      	adds	r3, #4
 80075b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2200      	movs	r2, #0
 80075c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2200      	movs	r2, #0
 80075c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075ca:	7afb      	ldrb	r3, [r7, #11]
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d102      	bne.n	80075e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075e4:	7afb      	ldrb	r3, [r7, #11]
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d109      	bne.n	8007602 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	461a      	mov	r2, r3
 80075fa:	6979      	ldr	r1, [r7, #20]
 80075fc:	f008 fea6 	bl	801034c <USB_EP0StartXfer>
 8007600:	e008      	b.n	8007614 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6818      	ldr	r0, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	461a      	mov	r2, r3
 800760e:	6979      	ldr	r1, [r7, #20]
 8007610:	f008 fc50 	bl	800feb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	460b      	mov	r3, r1
 8007628:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800762a:	78fb      	ldrb	r3, [r7, #3]
 800762c:	f003 020f 	and.w	r2, r3, #15
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	4613      	mov	r3, r2
 8007634:	00db      	lsls	r3, r3, #3
 8007636:	1a9b      	subs	r3, r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	440b      	add	r3, r1
 800763c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007640:	681b      	ldr	r3, [r3, #0]
}
 8007642:	4618      	mov	r0, r3
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b086      	sub	sp, #24
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
 800765a:	460b      	mov	r3, r1
 800765c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800765e:	7afb      	ldrb	r3, [r7, #11]
 8007660:	f003 020f 	and.w	r2, r3, #15
 8007664:	4613      	mov	r3, r2
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	3338      	adds	r3, #56	; 0x38
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	3304      	adds	r3, #4
 8007674:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2200      	movs	r2, #0
 8007686:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2201      	movs	r2, #1
 800768c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	f003 030f 	and.w	r3, r3, #15
 8007694:	b2da      	uxtb	r2, r3
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d102      	bne.n	80076a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	6979      	ldr	r1, [r7, #20]
 80076c0:	f008 fe44 	bl	801034c <USB_EP0StartXfer>
 80076c4:	e008      	b.n	80076d8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6818      	ldr	r0, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	6979      	ldr	r1, [r7, #20]
 80076d4:	f008 fbee 	bl	800feb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80076ee:	78fb      	ldrb	r3, [r7, #3]
 80076f0:	f003 020f 	and.w	r2, r3, #15
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d901      	bls.n	8007700 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e050      	b.n	80077a2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007704:	2b00      	cmp	r3, #0
 8007706:	da0f      	bge.n	8007728 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	f003 020f 	and.w	r2, r3, #15
 800770e:	4613      	mov	r3, r2
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	1a9b      	subs	r3, r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	3338      	adds	r3, #56	; 0x38
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	4413      	add	r3, r2
 800771c:	3304      	adds	r3, #4
 800771e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	705a      	strb	r2, [r3, #1]
 8007726:	e00d      	b.n	8007744 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007728:	78fa      	ldrb	r2, [r7, #3]
 800772a:	4613      	mov	r3, r2
 800772c:	00db      	lsls	r3, r3, #3
 800772e:	1a9b      	subs	r3, r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	4413      	add	r3, r2
 800773a:	3304      	adds	r3, #4
 800773c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	f003 030f 	and.w	r3, r3, #15
 8007750:	b2da      	uxtb	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_PCD_EP_SetStall+0x82>
 8007760:	2302      	movs	r3, #2
 8007762:	e01e      	b.n	80077a2 <HAL_PCD_EP_SetStall+0xc0>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68f9      	ldr	r1, [r7, #12]
 8007772:	4618      	mov	r0, r3
 8007774:	f008 ffa0 	bl	80106b8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007778:	78fb      	ldrb	r3, [r7, #3]
 800777a:	f003 030f 	and.w	r3, r3, #15
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10a      	bne.n	8007798 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6818      	ldr	r0, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	b2d9      	uxtb	r1, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007792:	461a      	mov	r2, r3
 8007794:	f009 f980 	bl	8010a98 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	f003 020f 	and.w	r2, r3, #15
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d901      	bls.n	80077c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e042      	b.n	800784e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	da0f      	bge.n	80077f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	f003 020f 	and.w	r2, r3, #15
 80077d6:	4613      	mov	r3, r2
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	3338      	adds	r3, #56	; 0x38
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	4413      	add	r3, r2
 80077e4:	3304      	adds	r3, #4
 80077e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	705a      	strb	r2, [r3, #1]
 80077ee:	e00f      	b.n	8007810 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	f003 020f 	and.w	r2, r3, #15
 80077f6:	4613      	mov	r3, r2
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	1a9b      	subs	r3, r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	4413      	add	r3, r2
 8007806:	3304      	adds	r3, #4
 8007808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	f003 030f 	and.w	r3, r3, #15
 800781c:	b2da      	uxtb	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_PCD_EP_ClrStall+0x86>
 800782c:	2302      	movs	r3, #2
 800782e:	e00e      	b.n	800784e <HAL_PCD_EP_ClrStall+0xa4>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68f9      	ldr	r1, [r7, #12]
 800783e:	4618      	mov	r0, r3
 8007840:	f008 ffa8 	bl	8010794 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b08a      	sub	sp, #40	; 0x28
 800785a:	af02      	add	r7, sp, #8
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	4613      	mov	r3, r2
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	1a9b      	subs	r3, r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	3338      	adds	r3, #56	; 0x38
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	4413      	add	r3, r2
 800787a:	3304      	adds	r3, #4
 800787c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	429a      	cmp	r2, r3
 8007888:	d901      	bls.n	800788e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e06c      	b.n	8007968 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	695a      	ldr	r2, [r3, #20]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d902      	bls.n	80078aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	3303      	adds	r3, #3
 80078ae:	089b      	lsrs	r3, r3, #2
 80078b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078b2:	e02b      	b.n	800790c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	695a      	ldr	r2, [r3, #20]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d902      	bls.n	80078d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	3303      	adds	r3, #3
 80078d4:	089b      	lsrs	r3, r3, #2
 80078d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	68d9      	ldr	r1, [r3, #12]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	4603      	mov	r3, r0
 80078ee:	6978      	ldr	r0, [r7, #20]
 80078f0:	f008 fe84 	bl	80105fc <USB_WritePacket>

    ep->xfer_buff  += len;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	441a      	add	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	441a      	add	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	b29b      	uxth	r3, r3
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	429a      	cmp	r2, r3
 8007920:	d809      	bhi.n	8007936 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	699a      	ldr	r2, [r3, #24]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800792a:	429a      	cmp	r2, r3
 800792c:	d203      	bcs.n	8007936 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1be      	bne.n	80078b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	695a      	ldr	r2, [r3, #20]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	429a      	cmp	r2, r3
 8007940:	d811      	bhi.n	8007966 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	2201      	movs	r2, #1
 800794a:	fa02 f303 	lsl.w	r3, r2, r3
 800794e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	43db      	mvns	r3, r3
 800795c:	6939      	ldr	r1, [r7, #16]
 800795e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007962:	4013      	ands	r3, r2
 8007964:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3720      	adds	r7, #32
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	333c      	adds	r3, #60	; 0x3c
 8007988:	3304      	adds	r3, #4
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	f040 80a0 	bne.w	8007ae8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f003 0308 	and.w	r3, r3, #8
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d015      	beq.n	80079de <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4a72      	ldr	r2, [pc, #456]	; (8007b80 <PCD_EP_OutXfrComplete_int+0x210>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	f240 80dd 	bls.w	8007b76 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 80d7 	beq.w	8007b76 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d4:	461a      	mov	r2, r3
 80079d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079da:	6093      	str	r3, [r2, #8]
 80079dc:	e0cb      	b.n	8007b76 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f003 0320 	and.w	r3, r3, #32
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f4:	461a      	mov	r2, r3
 80079f6:	2320      	movs	r3, #32
 80079f8:	6093      	str	r3, [r2, #8]
 80079fa:	e0bc      	b.n	8007b76 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 80b7 	bne.w	8007b76 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4a5d      	ldr	r2, [pc, #372]	; (8007b80 <PCD_EP_OutXfrComplete_int+0x210>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d90f      	bls.n	8007a30 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a26:	461a      	mov	r2, r3
 8007a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a2c:	6093      	str	r3, [r2, #8]
 8007a2e:	e0a2      	b.n	8007b76 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4613      	mov	r3, r2
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	1a9b      	subs	r3, r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007a42:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	0159      	lsls	r1, r3, #5
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	440b      	add	r3, r1
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007a56:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	1a9b      	subs	r3, r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4403      	add	r3, r0
 8007a66:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007a6a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007a6c:	6879      	ldr	r1, [r7, #4]
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	4613      	mov	r3, r2
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	440b      	add	r3, r1
 8007a7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007a7e:	6819      	ldr	r1, [r3, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	4613      	mov	r3, r2
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	1a9b      	subs	r3, r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4403      	add	r3, r0
 8007a8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4419      	add	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	00db      	lsls	r3, r3, #3
 8007a9e:	1a9b      	subs	r3, r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4403      	add	r3, r0
 8007aa4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007aa8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d114      	bne.n	8007ada <PCD_EP_OutXfrComplete_int+0x16a>
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	1a9b      	subs	r3, r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	440b      	add	r3, r1
 8007abe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d108      	bne.n	8007ada <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6818      	ldr	r0, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	f008 ffdf 	bl	8010a98 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f00e fe55 	bl	8016790 <HAL_PCD_DataOutStageCallback>
 8007ae6:	e046      	b.n	8007b76 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4a26      	ldr	r2, [pc, #152]	; (8007b84 <PCD_EP_OutXfrComplete_int+0x214>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d124      	bne.n	8007b3a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b06:	461a      	mov	r2, r3
 8007b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b0c:	6093      	str	r3, [r2, #8]
 8007b0e:	e032      	b.n	8007b76 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d008      	beq.n	8007b2c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b26:	461a      	mov	r2, r3
 8007b28:	2320      	movs	r3, #32
 8007b2a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	4619      	mov	r1, r3
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f00e fe2c 	bl	8016790 <HAL_PCD_DataOutStageCallback>
 8007b38:	e01d      	b.n	8007b76 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d114      	bne.n	8007b6a <PCD_EP_OutXfrComplete_int+0x1fa>
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	1a9b      	subs	r3, r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	440b      	add	r3, r1
 8007b4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d108      	bne.n	8007b6a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6818      	ldr	r0, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b62:	461a      	mov	r2, r3
 8007b64:	2100      	movs	r1, #0
 8007b66:	f008 ff97 	bl	8010a98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f00e fe0d 	bl	8016790 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	4f54300a 	.word	0x4f54300a
 8007b84:	4f54310a 	.word	0x4f54310a

08007b88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	333c      	adds	r3, #60	; 0x3c
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4a15      	ldr	r2, [pc, #84]	; (8007c10 <PCD_EP_OutSetupPacket_int+0x88>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d90e      	bls.n	8007bdc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d009      	beq.n	8007bdc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bda:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f00e fdc5 	bl	801676c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4a0a      	ldr	r2, [pc, #40]	; (8007c10 <PCD_EP_OutSetupPacket_int+0x88>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d90c      	bls.n	8007c04 <PCD_EP_OutSetupPacket_int+0x7c>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d108      	bne.n	8007c04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	2101      	movs	r1, #1
 8007c00:	f008 ff4a 	bl	8010a98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	4f54300a 	.word	0x4f54300a

08007c14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
 8007c20:	4613      	mov	r3, r2
 8007c22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d107      	bne.n	8007c42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007c32:	883b      	ldrh	r3, [r7, #0]
 8007c34:	0419      	lsls	r1, r3, #16
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	629a      	str	r2, [r3, #40]	; 0x28
 8007c40:	e028      	b.n	8007c94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	0c1b      	lsrs	r3, r3, #16
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c50:	2300      	movs	r3, #0
 8007c52:	73fb      	strb	r3, [r7, #15]
 8007c54:	e00d      	b.n	8007c72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	3340      	adds	r3, #64	; 0x40
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	0c1b      	lsrs	r3, r3, #16
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	4413      	add	r3, r2
 8007c6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	73fb      	strb	r3, [r7, #15]
 8007c72:	7bfa      	ldrb	r2, [r7, #15]
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d3ec      	bcc.n	8007c56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007c7c:	883b      	ldrh	r3, [r7, #0]
 8007c7e:	0418      	lsls	r0, r3, #16
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6819      	ldr	r1, [r3, #0]
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	4302      	orrs	r2, r0
 8007c8c:	3340      	adds	r3, #64	; 0x40
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	887a      	ldrh	r2, [r7, #2]
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cf2:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <HAL_PCDEx_ActivateLPM+0x44>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	10000003 	.word	0x10000003

08007d0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d2c:	4b19      	ldr	r3, [pc, #100]	; (8007d94 <HAL_PWREx_ConfigSupply+0x70>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d00a      	beq.n	8007d4e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d38:	4b16      	ldr	r3, [pc, #88]	; (8007d94 <HAL_PWREx_ConfigSupply+0x70>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d001      	beq.n	8007d4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e01f      	b.n	8007d8a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e01d      	b.n	8007d8a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d4e:	4b11      	ldr	r3, [pc, #68]	; (8007d94 <HAL_PWREx_ConfigSupply+0x70>)
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f023 0207 	bic.w	r2, r3, #7
 8007d56:	490f      	ldr	r1, [pc, #60]	; (8007d94 <HAL_PWREx_ConfigSupply+0x70>)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d5e:	f7fa ffab 	bl	8002cb8 <HAL_GetTick>
 8007d62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d64:	e009      	b.n	8007d7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d66:	f7fa ffa7 	bl	8002cb8 <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d74:	d901      	bls.n	8007d7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e007      	b.n	8007d8a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d7a:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <HAL_PWREx_ConfigSupply+0x70>)
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d86:	d1ee      	bne.n	8007d66 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	58024800 	.word	0x58024800

08007d98 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	4a04      	ldr	r2, [pc, #16]	; (8007db4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007da6:	60d3      	str	r3, [r2, #12]
}
 8007da8:	bf00      	nop
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	58024800 	.word	0x58024800

08007db8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08c      	sub	sp, #48	; 0x30
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e3ff      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 8087 	beq.w	8007ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dd8:	4b99      	ldr	r3, [pc, #612]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007de2:	4b97      	ldr	r3, [pc, #604]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dea:	2b10      	cmp	r3, #16
 8007dec:	d007      	beq.n	8007dfe <HAL_RCC_OscConfig+0x46>
 8007dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df0:	2b18      	cmp	r3, #24
 8007df2:	d110      	bne.n	8007e16 <HAL_RCC_OscConfig+0x5e>
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d10b      	bne.n	8007e16 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dfe:	4b90      	ldr	r3, [pc, #576]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d06c      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x12c>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d168      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e3d9      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e1e:	d106      	bne.n	8007e2e <HAL_RCC_OscConfig+0x76>
 8007e20:	4b87      	ldr	r3, [pc, #540]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a86      	ldr	r2, [pc, #536]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e2a:	6013      	str	r3, [r2, #0]
 8007e2c:	e02e      	b.n	8007e8c <HAL_RCC_OscConfig+0xd4>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10c      	bne.n	8007e50 <HAL_RCC_OscConfig+0x98>
 8007e36:	4b82      	ldr	r3, [pc, #520]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a81      	ldr	r2, [pc, #516]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	4b7f      	ldr	r3, [pc, #508]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a7e      	ldr	r2, [pc, #504]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	e01d      	b.n	8007e8c <HAL_RCC_OscConfig+0xd4>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e58:	d10c      	bne.n	8007e74 <HAL_RCC_OscConfig+0xbc>
 8007e5a:	4b79      	ldr	r3, [pc, #484]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a78      	ldr	r2, [pc, #480]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	4b76      	ldr	r3, [pc, #472]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a75      	ldr	r2, [pc, #468]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	e00b      	b.n	8007e8c <HAL_RCC_OscConfig+0xd4>
 8007e74:	4b72      	ldr	r3, [pc, #456]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a71      	ldr	r2, [pc, #452]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	4b6f      	ldr	r3, [pc, #444]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a6e      	ldr	r2, [pc, #440]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d013      	beq.n	8007ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e94:	f7fa ff10 	bl	8002cb8 <HAL_GetTick>
 8007e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e9c:	f7fa ff0c 	bl	8002cb8 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b64      	cmp	r3, #100	; 0x64
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e38d      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007eae:	4b64      	ldr	r3, [pc, #400]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCC_OscConfig+0xe4>
 8007eba:	e014      	b.n	8007ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ebc:	f7fa fefc 	bl	8002cb8 <HAL_GetTick>
 8007ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ec4:	f7fa fef8 	bl	8002cb8 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b64      	cmp	r3, #100	; 0x64
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e379      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ed6:	4b5a      	ldr	r3, [pc, #360]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1f0      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x10c>
 8007ee2:	e000      	b.n	8007ee6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 80ae 	beq.w	8008050 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ef4:	4b52      	ldr	r3, [pc, #328]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007efc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007efe:	4b50      	ldr	r3, [pc, #320]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f02:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d007      	beq.n	8007f1a <HAL_RCC_OscConfig+0x162>
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	2b18      	cmp	r3, #24
 8007f0e:	d13a      	bne.n	8007f86 <HAL_RCC_OscConfig+0x1ce>
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d135      	bne.n	8007f86 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f1a:	4b49      	ldr	r3, [pc, #292]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d005      	beq.n	8007f32 <HAL_RCC_OscConfig+0x17a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e34b      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f32:	f7fa feef 	bl	8002d14 <HAL_GetREVID>
 8007f36:	4602      	mov	r2, r0
 8007f38:	f241 0303 	movw	r3, #4099	; 0x1003
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d817      	bhi.n	8007f70 <HAL_RCC_OscConfig+0x1b8>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	2b40      	cmp	r3, #64	; 0x40
 8007f46:	d108      	bne.n	8007f5a <HAL_RCC_OscConfig+0x1a2>
 8007f48:	4b3d      	ldr	r3, [pc, #244]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007f50:	4a3b      	ldr	r2, [pc, #236]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f56:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f58:	e07a      	b.n	8008050 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f5a:	4b39      	ldr	r3, [pc, #228]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	031b      	lsls	r3, r3, #12
 8007f68:	4935      	ldr	r1, [pc, #212]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f6e:	e06f      	b.n	8008050 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f70:	4b33      	ldr	r3, [pc, #204]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	061b      	lsls	r3, r3, #24
 8007f7e:	4930      	ldr	r1, [pc, #192]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f84:	e064      	b.n	8008050 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d045      	beq.n	800801a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f8e:	4b2c      	ldr	r3, [pc, #176]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f023 0219 	bic.w	r2, r3, #25
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	4929      	ldr	r1, [pc, #164]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa0:	f7fa fe8a 	bl	8002cb8 <HAL_GetTick>
 8007fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fa6:	e008      	b.n	8007fba <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fa8:	f7fa fe86 	bl	8002cb8 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e307      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fba:	4b21      	ldr	r3, [pc, #132]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0f0      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fc6:	f7fa fea5 	bl	8002d14 <HAL_GetREVID>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	f241 0303 	movw	r3, #4099	; 0x1003
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d817      	bhi.n	8008004 <HAL_RCC_OscConfig+0x24c>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	2b40      	cmp	r3, #64	; 0x40
 8007fda:	d108      	bne.n	8007fee <HAL_RCC_OscConfig+0x236>
 8007fdc:	4b18      	ldr	r3, [pc, #96]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007fe4:	4a16      	ldr	r2, [pc, #88]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fea:	6053      	str	r3, [r2, #4]
 8007fec:	e030      	b.n	8008050 <HAL_RCC_OscConfig+0x298>
 8007fee:	4b14      	ldr	r3, [pc, #80]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	031b      	lsls	r3, r3, #12
 8007ffc:	4910      	ldr	r1, [pc, #64]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	604b      	str	r3, [r1, #4]
 8008002:	e025      	b.n	8008050 <HAL_RCC_OscConfig+0x298>
 8008004:	4b0e      	ldr	r3, [pc, #56]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	061b      	lsls	r3, r3, #24
 8008012:	490b      	ldr	r1, [pc, #44]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8008014:	4313      	orrs	r3, r2
 8008016:	604b      	str	r3, [r1, #4]
 8008018:	e01a      	b.n	8008050 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800801a:	4b09      	ldr	r3, [pc, #36]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a08      	ldr	r2, [pc, #32]	; (8008040 <HAL_RCC_OscConfig+0x288>)
 8008020:	f023 0301 	bic.w	r3, r3, #1
 8008024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008026:	f7fa fe47 	bl	8002cb8 <HAL_GetTick>
 800802a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800802c:	e00a      	b.n	8008044 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800802e:	f7fa fe43 	bl	8002cb8 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	2b02      	cmp	r3, #2
 800803a:	d903      	bls.n	8008044 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e2c4      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
 8008040:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008044:	4ba4      	ldr	r3, [pc, #656]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1ee      	bne.n	800802e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0310 	and.w	r3, r3, #16
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 80a9 	beq.w	80081b0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800805e:	4b9e      	ldr	r3, [pc, #632]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008066:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008068:	4b9b      	ldr	r3, [pc, #620]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 800806a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	2b08      	cmp	r3, #8
 8008072:	d007      	beq.n	8008084 <HAL_RCC_OscConfig+0x2cc>
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	2b18      	cmp	r3, #24
 8008078:	d13a      	bne.n	80080f0 <HAL_RCC_OscConfig+0x338>
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f003 0303 	and.w	r3, r3, #3
 8008080:	2b01      	cmp	r3, #1
 8008082:	d135      	bne.n	80080f0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008084:	4b94      	ldr	r3, [pc, #592]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <HAL_RCC_OscConfig+0x2e4>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	2b80      	cmp	r3, #128	; 0x80
 8008096:	d001      	beq.n	800809c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e296      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800809c:	f7fa fe3a 	bl	8002d14 <HAL_GetREVID>
 80080a0:	4602      	mov	r2, r0
 80080a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d817      	bhi.n	80080da <HAL_RCC_OscConfig+0x322>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	d108      	bne.n	80080c4 <HAL_RCC_OscConfig+0x30c>
 80080b2:	4b89      	ldr	r3, [pc, #548]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80080ba:	4a87      	ldr	r2, [pc, #540]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80080bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080c2:	e075      	b.n	80081b0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080c4:	4b84      	ldr	r3, [pc, #528]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	069b      	lsls	r3, r3, #26
 80080d2:	4981      	ldr	r1, [pc, #516]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080d8:	e06a      	b.n	80081b0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080da:	4b7f      	ldr	r3, [pc, #508]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	061b      	lsls	r3, r3, #24
 80080e8:	497b      	ldr	r1, [pc, #492]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080ee:	e05f      	b.n	80081b0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d042      	beq.n	800817e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80080f8:	4b77      	ldr	r3, [pc, #476]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a76      	ldr	r2, [pc, #472]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80080fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008104:	f7fa fdd8 	bl	8002cb8 <HAL_GetTick>
 8008108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800810c:	f7fa fdd4 	bl	8002cb8 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e255      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800811e:	4b6e      	ldr	r3, [pc, #440]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0f0      	beq.n	800810c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800812a:	f7fa fdf3 	bl	8002d14 <HAL_GetREVID>
 800812e:	4602      	mov	r2, r0
 8008130:	f241 0303 	movw	r3, #4099	; 0x1003
 8008134:	429a      	cmp	r2, r3
 8008136:	d817      	bhi.n	8008168 <HAL_RCC_OscConfig+0x3b0>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	2b20      	cmp	r3, #32
 800813e:	d108      	bne.n	8008152 <HAL_RCC_OscConfig+0x39a>
 8008140:	4b65      	ldr	r3, [pc, #404]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008148:	4a63      	ldr	r2, [pc, #396]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 800814a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800814e:	6053      	str	r3, [r2, #4]
 8008150:	e02e      	b.n	80081b0 <HAL_RCC_OscConfig+0x3f8>
 8008152:	4b61      	ldr	r3, [pc, #388]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	069b      	lsls	r3, r3, #26
 8008160:	495d      	ldr	r1, [pc, #372]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008162:	4313      	orrs	r3, r2
 8008164:	604b      	str	r3, [r1, #4]
 8008166:	e023      	b.n	80081b0 <HAL_RCC_OscConfig+0x3f8>
 8008168:	4b5b      	ldr	r3, [pc, #364]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	061b      	lsls	r3, r3, #24
 8008176:	4958      	ldr	r1, [pc, #352]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008178:	4313      	orrs	r3, r2
 800817a:	60cb      	str	r3, [r1, #12]
 800817c:	e018      	b.n	80081b0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800817e:	4b56      	ldr	r3, [pc, #344]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a55      	ldr	r2, [pc, #340]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818a:	f7fa fd95 	bl	8002cb8 <HAL_GetTick>
 800818e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008190:	e008      	b.n	80081a4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008192:	f7fa fd91 	bl	8002cb8 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e212      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081a4:	4b4c      	ldr	r3, [pc, #304]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1f0      	bne.n	8008192 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d036      	beq.n	800822a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d019      	beq.n	80081f8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081c4:	4b44      	ldr	r3, [pc, #272]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80081c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081c8:	4a43      	ldr	r2, [pc, #268]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80081ca:	f043 0301 	orr.w	r3, r3, #1
 80081ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081d0:	f7fa fd72 	bl	8002cb8 <HAL_GetTick>
 80081d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081d6:	e008      	b.n	80081ea <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081d8:	f7fa fd6e 	bl	8002cb8 <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e1ef      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081ea:	4b3b      	ldr	r3, [pc, #236]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80081ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0f0      	beq.n	80081d8 <HAL_RCC_OscConfig+0x420>
 80081f6:	e018      	b.n	800822a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081f8:	4b37      	ldr	r3, [pc, #220]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80081fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081fc:	4a36      	ldr	r2, [pc, #216]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 80081fe:	f023 0301 	bic.w	r3, r3, #1
 8008202:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008204:	f7fa fd58 	bl	8002cb8 <HAL_GetTick>
 8008208:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800820a:	e008      	b.n	800821e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800820c:	f7fa fd54 	bl	8002cb8 <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	2b02      	cmp	r3, #2
 8008218:	d901      	bls.n	800821e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e1d5      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800821e:	4b2e      	ldr	r3, [pc, #184]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1f0      	bne.n	800820c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b00      	cmp	r3, #0
 8008234:	d036      	beq.n	80082a4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d019      	beq.n	8008272 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800823e:	4b26      	ldr	r3, [pc, #152]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a25      	ldr	r2, [pc, #148]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008244:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008248:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800824a:	f7fa fd35 	bl	8002cb8 <HAL_GetTick>
 800824e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008250:	e008      	b.n	8008264 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008252:	f7fa fd31 	bl	8002cb8 <HAL_GetTick>
 8008256:	4602      	mov	r2, r0
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	2b02      	cmp	r3, #2
 800825e:	d901      	bls.n	8008264 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e1b2      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008264:	4b1c      	ldr	r3, [pc, #112]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d0f0      	beq.n	8008252 <HAL_RCC_OscConfig+0x49a>
 8008270:	e018      	b.n	80082a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008272:	4b19      	ldr	r3, [pc, #100]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a18      	ldr	r2, [pc, #96]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 8008278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800827c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800827e:	f7fa fd1b 	bl	8002cb8 <HAL_GetTick>
 8008282:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008284:	e008      	b.n	8008298 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008286:	f7fa fd17 	bl	8002cb8 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	2b02      	cmp	r3, #2
 8008292:	d901      	bls.n	8008298 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e198      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008298:	4b0f      	ldr	r3, [pc, #60]	; (80082d8 <HAL_RCC_OscConfig+0x520>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1f0      	bne.n	8008286 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8085 	beq.w	80083bc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <HAL_RCC_OscConfig+0x524>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a09      	ldr	r2, [pc, #36]	; (80082dc <HAL_RCC_OscConfig+0x524>)
 80082b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082be:	f7fa fcfb 	bl	8002cb8 <HAL_GetTick>
 80082c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082c4:	e00c      	b.n	80082e0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80082c6:	f7fa fcf7 	bl	8002cb8 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b64      	cmp	r3, #100	; 0x64
 80082d2:	d905      	bls.n	80082e0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e178      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
 80082d8:	58024400 	.word	0x58024400
 80082dc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082e0:	4b96      	ldr	r3, [pc, #600]	; (800853c <HAL_RCC_OscConfig+0x784>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0ec      	beq.n	80082c6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d106      	bne.n	8008302 <HAL_RCC_OscConfig+0x54a>
 80082f4:	4b92      	ldr	r3, [pc, #584]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80082f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f8:	4a91      	ldr	r2, [pc, #580]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80082fa:	f043 0301 	orr.w	r3, r3, #1
 80082fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008300:	e02d      	b.n	800835e <HAL_RCC_OscConfig+0x5a6>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10c      	bne.n	8008324 <HAL_RCC_OscConfig+0x56c>
 800830a:	4b8d      	ldr	r3, [pc, #564]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 800830c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830e:	4a8c      	ldr	r2, [pc, #560]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008310:	f023 0301 	bic.w	r3, r3, #1
 8008314:	6713      	str	r3, [r2, #112]	; 0x70
 8008316:	4b8a      	ldr	r3, [pc, #552]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831a:	4a89      	ldr	r2, [pc, #548]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 800831c:	f023 0304 	bic.w	r3, r3, #4
 8008320:	6713      	str	r3, [r2, #112]	; 0x70
 8008322:	e01c      	b.n	800835e <HAL_RCC_OscConfig+0x5a6>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	2b05      	cmp	r3, #5
 800832a:	d10c      	bne.n	8008346 <HAL_RCC_OscConfig+0x58e>
 800832c:	4b84      	ldr	r3, [pc, #528]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 800832e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008330:	4a83      	ldr	r2, [pc, #524]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008332:	f043 0304 	orr.w	r3, r3, #4
 8008336:	6713      	str	r3, [r2, #112]	; 0x70
 8008338:	4b81      	ldr	r3, [pc, #516]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 800833a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833c:	4a80      	ldr	r2, [pc, #512]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 800833e:	f043 0301 	orr.w	r3, r3, #1
 8008342:	6713      	str	r3, [r2, #112]	; 0x70
 8008344:	e00b      	b.n	800835e <HAL_RCC_OscConfig+0x5a6>
 8008346:	4b7e      	ldr	r3, [pc, #504]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834a:	4a7d      	ldr	r2, [pc, #500]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 800834c:	f023 0301 	bic.w	r3, r3, #1
 8008350:	6713      	str	r3, [r2, #112]	; 0x70
 8008352:	4b7b      	ldr	r3, [pc, #492]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008356:	4a7a      	ldr	r2, [pc, #488]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008358:	f023 0304 	bic.w	r3, r3, #4
 800835c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d015      	beq.n	8008392 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008366:	f7fa fca7 	bl	8002cb8 <HAL_GetTick>
 800836a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800836c:	e00a      	b.n	8008384 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800836e:	f7fa fca3 	bl	8002cb8 <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	f241 3288 	movw	r2, #5000	; 0x1388
 800837c:	4293      	cmp	r3, r2
 800837e:	d901      	bls.n	8008384 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e122      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008384:	4b6e      	ldr	r3, [pc, #440]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008388:	f003 0302 	and.w	r3, r3, #2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0ee      	beq.n	800836e <HAL_RCC_OscConfig+0x5b6>
 8008390:	e014      	b.n	80083bc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008392:	f7fa fc91 	bl	8002cb8 <HAL_GetTick>
 8008396:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008398:	e00a      	b.n	80083b0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800839a:	f7fa fc8d 	bl	8002cb8 <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d901      	bls.n	80083b0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e10c      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083b0:	4b63      	ldr	r3, [pc, #396]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80083b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1ee      	bne.n	800839a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 8101 	beq.w	80085c8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80083c6:	4b5e      	ldr	r3, [pc, #376]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083ce:	2b18      	cmp	r3, #24
 80083d0:	f000 80bc 	beq.w	800854c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	2b02      	cmp	r3, #2
 80083da:	f040 8095 	bne.w	8008508 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083de:	4b58      	ldr	r3, [pc, #352]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a57      	ldr	r2, [pc, #348]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80083e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ea:	f7fa fc65 	bl	8002cb8 <HAL_GetTick>
 80083ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083f0:	e008      	b.n	8008404 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083f2:	f7fa fc61 	bl	8002cb8 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e0e2      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008404:	4b4e      	ldr	r3, [pc, #312]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1f0      	bne.n	80083f2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008410:	4b4b      	ldr	r3, [pc, #300]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008414:	4b4b      	ldr	r3, [pc, #300]	; (8008544 <HAL_RCC_OscConfig+0x78c>)
 8008416:	4013      	ands	r3, r2
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008420:	0112      	lsls	r2, r2, #4
 8008422:	430a      	orrs	r2, r1
 8008424:	4946      	ldr	r1, [pc, #280]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008426:	4313      	orrs	r3, r2
 8008428:	628b      	str	r3, [r1, #40]	; 0x28
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842e:	3b01      	subs	r3, #1
 8008430:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008438:	3b01      	subs	r3, #1
 800843a:	025b      	lsls	r3, r3, #9
 800843c:	b29b      	uxth	r3, r3
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	3b01      	subs	r3, #1
 8008446:	041b      	lsls	r3, r3, #16
 8008448:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008452:	3b01      	subs	r3, #1
 8008454:	061b      	lsls	r3, r3, #24
 8008456:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800845a:	4939      	ldr	r1, [pc, #228]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 800845c:	4313      	orrs	r3, r2
 800845e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008460:	4b37      	ldr	r3, [pc, #220]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008464:	4a36      	ldr	r2, [pc, #216]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008466:	f023 0301 	bic.w	r3, r3, #1
 800846a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800846c:	4b34      	ldr	r3, [pc, #208]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 800846e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008470:	4b35      	ldr	r3, [pc, #212]	; (8008548 <HAL_RCC_OscConfig+0x790>)
 8008472:	4013      	ands	r3, r2
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008478:	00d2      	lsls	r2, r2, #3
 800847a:	4931      	ldr	r1, [pc, #196]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 800847c:	4313      	orrs	r3, r2
 800847e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008480:	4b2f      	ldr	r3, [pc, #188]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008484:	f023 020c 	bic.w	r2, r3, #12
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848c:	492c      	ldr	r1, [pc, #176]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 800848e:	4313      	orrs	r3, r2
 8008490:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008492:	4b2b      	ldr	r3, [pc, #172]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	f023 0202 	bic.w	r2, r3, #2
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849e:	4928      	ldr	r1, [pc, #160]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80084a4:	4b26      	ldr	r3, [pc, #152]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	4a25      	ldr	r2, [pc, #148]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80084aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084b0:	4b23      	ldr	r3, [pc, #140]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	4a22      	ldr	r2, [pc, #136]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80084b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80084bc:	4b20      	ldr	r3, [pc, #128]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	4a1f      	ldr	r2, [pc, #124]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80084c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80084c8:	4b1d      	ldr	r3, [pc, #116]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	4a1c      	ldr	r2, [pc, #112]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80084ce:	f043 0301 	orr.w	r3, r3, #1
 80084d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084d4:	4b1a      	ldr	r3, [pc, #104]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a19      	ldr	r2, [pc, #100]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80084da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e0:	f7fa fbea 	bl	8002cb8 <HAL_GetTick>
 80084e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084e8:	f7fa fbe6 	bl	8002cb8 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e067      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084fa:	4b11      	ldr	r3, [pc, #68]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0f0      	beq.n	80084e8 <HAL_RCC_OscConfig+0x730>
 8008506:	e05f      	b.n	80085c8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008508:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a0c      	ldr	r2, [pc, #48]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 800850e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008514:	f7fa fbd0 	bl	8002cb8 <HAL_GetTick>
 8008518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800851a:	e008      	b.n	800852e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800851c:	f7fa fbcc 	bl	8002cb8 <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e04d      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800852e:	4b04      	ldr	r3, [pc, #16]	; (8008540 <HAL_RCC_OscConfig+0x788>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1f0      	bne.n	800851c <HAL_RCC_OscConfig+0x764>
 800853a:	e045      	b.n	80085c8 <HAL_RCC_OscConfig+0x810>
 800853c:	58024800 	.word	0x58024800
 8008540:	58024400 	.word	0x58024400
 8008544:	fffffc0c 	.word	0xfffffc0c
 8008548:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800854c:	4b21      	ldr	r3, [pc, #132]	; (80085d4 <HAL_RCC_OscConfig+0x81c>)
 800854e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008550:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008552:	4b20      	ldr	r3, [pc, #128]	; (80085d4 <HAL_RCC_OscConfig+0x81c>)
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855c:	2b01      	cmp	r3, #1
 800855e:	d031      	beq.n	80085c4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	f003 0203 	and.w	r2, r3, #3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800856a:	429a      	cmp	r2, r3
 800856c:	d12a      	bne.n	80085c4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	091b      	lsrs	r3, r3, #4
 8008572:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800857a:	429a      	cmp	r2, r3
 800857c:	d122      	bne.n	80085c4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800858a:	429a      	cmp	r2, r3
 800858c:	d11a      	bne.n	80085c4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	0a5b      	lsrs	r3, r3, #9
 8008592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800859c:	429a      	cmp	r2, r3
 800859e:	d111      	bne.n	80085c4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	0c1b      	lsrs	r3, r3, #16
 80085a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d108      	bne.n	80085c4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	0e1b      	lsrs	r3, r3, #24
 80085b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d001      	beq.n	80085c8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e000      	b.n	80085ca <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3730      	adds	r7, #48	; 0x30
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	58024400 	.word	0x58024400

080085d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e19c      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085ec:	4b8a      	ldr	r3, [pc, #552]	; (8008818 <HAL_RCC_ClockConfig+0x240>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 030f 	and.w	r3, r3, #15
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d910      	bls.n	800861c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085fa:	4b87      	ldr	r3, [pc, #540]	; (8008818 <HAL_RCC_ClockConfig+0x240>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f023 020f 	bic.w	r2, r3, #15
 8008602:	4985      	ldr	r1, [pc, #532]	; (8008818 <HAL_RCC_ClockConfig+0x240>)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	4313      	orrs	r3, r2
 8008608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800860a:	4b83      	ldr	r3, [pc, #524]	; (8008818 <HAL_RCC_ClockConfig+0x240>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 030f 	and.w	r3, r3, #15
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	429a      	cmp	r2, r3
 8008616:	d001      	beq.n	800861c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e184      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d010      	beq.n	800864a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	4b7b      	ldr	r3, [pc, #492]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008634:	429a      	cmp	r2, r3
 8008636:	d908      	bls.n	800864a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008638:	4b78      	ldr	r3, [pc, #480]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	4975      	ldr	r1, [pc, #468]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 8008646:	4313      	orrs	r3, r2
 8008648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0308 	and.w	r3, r3, #8
 8008652:	2b00      	cmp	r3, #0
 8008654:	d010      	beq.n	8008678 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	695a      	ldr	r2, [r3, #20]
 800865a:	4b70      	ldr	r3, [pc, #448]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008662:	429a      	cmp	r2, r3
 8008664:	d908      	bls.n	8008678 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008666:	4b6d      	ldr	r3, [pc, #436]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	496a      	ldr	r1, [pc, #424]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 8008674:	4313      	orrs	r3, r2
 8008676:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b00      	cmp	r3, #0
 8008682:	d010      	beq.n	80086a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	699a      	ldr	r2, [r3, #24]
 8008688:	4b64      	ldr	r3, [pc, #400]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008690:	429a      	cmp	r2, r3
 8008692:	d908      	bls.n	80086a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008694:	4b61      	ldr	r3, [pc, #388]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	495e      	ldr	r1, [pc, #376]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0320 	and.w	r3, r3, #32
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d010      	beq.n	80086d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69da      	ldr	r2, [r3, #28]
 80086b6:	4b59      	ldr	r3, [pc, #356]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086be:	429a      	cmp	r2, r3
 80086c0:	d908      	bls.n	80086d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80086c2:	4b56      	ldr	r3, [pc, #344]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	4953      	ldr	r1, [pc, #332]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d010      	beq.n	8008702 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	68da      	ldr	r2, [r3, #12]
 80086e4:	4b4d      	ldr	r3, [pc, #308]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	f003 030f 	and.w	r3, r3, #15
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d908      	bls.n	8008702 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086f0:	4b4a      	ldr	r3, [pc, #296]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	f023 020f 	bic.w	r2, r3, #15
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	4947      	ldr	r1, [pc, #284]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d055      	beq.n	80087ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800870e:	4b43      	ldr	r3, [pc, #268]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	4940      	ldr	r1, [pc, #256]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 800871c:	4313      	orrs	r3, r2
 800871e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	2b02      	cmp	r3, #2
 8008726:	d107      	bne.n	8008738 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008728:	4b3c      	ldr	r3, [pc, #240]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d121      	bne.n	8008778 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e0f6      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	2b03      	cmp	r3, #3
 800873e:	d107      	bne.n	8008750 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008740:	4b36      	ldr	r3, [pc, #216]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d115      	bne.n	8008778 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e0ea      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d107      	bne.n	8008768 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008758:	4b30      	ldr	r3, [pc, #192]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008760:	2b00      	cmp	r3, #0
 8008762:	d109      	bne.n	8008778 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e0de      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008768:	4b2c      	ldr	r3, [pc, #176]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d101      	bne.n	8008778 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e0d6      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008778:	4b28      	ldr	r3, [pc, #160]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	f023 0207 	bic.w	r2, r3, #7
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	4925      	ldr	r1, [pc, #148]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 8008786:	4313      	orrs	r3, r2
 8008788:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800878a:	f7fa fa95 	bl	8002cb8 <HAL_GetTick>
 800878e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008790:	e00a      	b.n	80087a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008792:	f7fa fa91 	bl	8002cb8 <HAL_GetTick>
 8008796:	4602      	mov	r2, r0
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e0be      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087a8:	4b1c      	ldr	r3, [pc, #112]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	00db      	lsls	r3, r3, #3
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d1eb      	bne.n	8008792 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d010      	beq.n	80087e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	4b14      	ldr	r3, [pc, #80]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	f003 030f 	and.w	r3, r3, #15
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d208      	bcs.n	80087e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087d6:	4b11      	ldr	r3, [pc, #68]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	f023 020f 	bic.w	r2, r3, #15
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	490e      	ldr	r1, [pc, #56]	; (800881c <HAL_RCC_ClockConfig+0x244>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087e8:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <HAL_RCC_ClockConfig+0x240>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d214      	bcs.n	8008820 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087f6:	4b08      	ldr	r3, [pc, #32]	; (8008818 <HAL_RCC_ClockConfig+0x240>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f023 020f 	bic.w	r2, r3, #15
 80087fe:	4906      	ldr	r1, [pc, #24]	; (8008818 <HAL_RCC_ClockConfig+0x240>)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	4313      	orrs	r3, r2
 8008804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008806:	4b04      	ldr	r3, [pc, #16]	; (8008818 <HAL_RCC_ClockConfig+0x240>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 030f 	and.w	r3, r3, #15
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	429a      	cmp	r2, r3
 8008812:	d005      	beq.n	8008820 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e086      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
 8008818:	52002000 	.word	0x52002000
 800881c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	2b00      	cmp	r3, #0
 800882a:	d010      	beq.n	800884e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	691a      	ldr	r2, [r3, #16]
 8008830:	4b3f      	ldr	r3, [pc, #252]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008838:	429a      	cmp	r2, r3
 800883a:	d208      	bcs.n	800884e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800883c:	4b3c      	ldr	r3, [pc, #240]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	4939      	ldr	r1, [pc, #228]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 800884a:	4313      	orrs	r3, r2
 800884c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0308 	and.w	r3, r3, #8
 8008856:	2b00      	cmp	r3, #0
 8008858:	d010      	beq.n	800887c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695a      	ldr	r2, [r3, #20]
 800885e:	4b34      	ldr	r3, [pc, #208]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008866:	429a      	cmp	r2, r3
 8008868:	d208      	bcs.n	800887c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800886a:	4b31      	ldr	r3, [pc, #196]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	492e      	ldr	r1, [pc, #184]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 8008878:	4313      	orrs	r3, r2
 800887a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0310 	and.w	r3, r3, #16
 8008884:	2b00      	cmp	r3, #0
 8008886:	d010      	beq.n	80088aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699a      	ldr	r2, [r3, #24]
 800888c:	4b28      	ldr	r3, [pc, #160]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008894:	429a      	cmp	r2, r3
 8008896:	d208      	bcs.n	80088aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008898:	4b25      	ldr	r3, [pc, #148]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	4922      	ldr	r1, [pc, #136]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d010      	beq.n	80088d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	69da      	ldr	r2, [r3, #28]
 80088ba:	4b1d      	ldr	r3, [pc, #116]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d208      	bcs.n	80088d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80088c6:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	4917      	ldr	r1, [pc, #92]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088d8:	f000 f834 	bl	8008944 <HAL_RCC_GetSysClockFreq>
 80088dc:	4601      	mov	r1, r0
 80088de:	4b14      	ldr	r3, [pc, #80]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	0a1b      	lsrs	r3, r3, #8
 80088e4:	f003 030f 	and.w	r3, r3, #15
 80088e8:	4a12      	ldr	r2, [pc, #72]	; (8008934 <HAL_RCC_ClockConfig+0x35c>)
 80088ea:	5cd3      	ldrb	r3, [r2, r3]
 80088ec:	f003 031f 	and.w	r3, r3, #31
 80088f0:	fa21 f303 	lsr.w	r3, r1, r3
 80088f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088f6:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <HAL_RCC_ClockConfig+0x358>)
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	4a0d      	ldr	r2, [pc, #52]	; (8008934 <HAL_RCC_ClockConfig+0x35c>)
 8008900:	5cd3      	ldrb	r3, [r2, r3]
 8008902:	f003 031f 	and.w	r3, r3, #31
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	fa22 f303 	lsr.w	r3, r2, r3
 800890c:	4a0a      	ldr	r2, [pc, #40]	; (8008938 <HAL_RCC_ClockConfig+0x360>)
 800890e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008910:	4a0a      	ldr	r2, [pc, #40]	; (800893c <HAL_RCC_ClockConfig+0x364>)
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008916:	4b0a      	ldr	r3, [pc, #40]	; (8008940 <HAL_RCC_ClockConfig+0x368>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4618      	mov	r0, r3
 800891c:	f7f9 fdc8 	bl	80024b0 <HAL_InitTick>
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	58024400 	.word	0x58024400
 8008934:	08017e50 	.word	0x08017e50
 8008938:	24000004 	.word	0x24000004
 800893c:	24000000 	.word	0x24000000
 8008940:	24000008 	.word	0x24000008

08008944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008944:	b480      	push	{r7}
 8008946:	b089      	sub	sp, #36	; 0x24
 8008948:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800894a:	4baf      	ldr	r3, [pc, #700]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008952:	2b18      	cmp	r3, #24
 8008954:	f200 814e 	bhi.w	8008bf4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8008958:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <HAL_RCC_GetSysClockFreq+0x1c>)
 800895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895e:	bf00      	nop
 8008960:	080089c5 	.word	0x080089c5
 8008964:	08008bf5 	.word	0x08008bf5
 8008968:	08008bf5 	.word	0x08008bf5
 800896c:	08008bf5 	.word	0x08008bf5
 8008970:	08008bf5 	.word	0x08008bf5
 8008974:	08008bf5 	.word	0x08008bf5
 8008978:	08008bf5 	.word	0x08008bf5
 800897c:	08008bf5 	.word	0x08008bf5
 8008980:	080089eb 	.word	0x080089eb
 8008984:	08008bf5 	.word	0x08008bf5
 8008988:	08008bf5 	.word	0x08008bf5
 800898c:	08008bf5 	.word	0x08008bf5
 8008990:	08008bf5 	.word	0x08008bf5
 8008994:	08008bf5 	.word	0x08008bf5
 8008998:	08008bf5 	.word	0x08008bf5
 800899c:	08008bf5 	.word	0x08008bf5
 80089a0:	080089f1 	.word	0x080089f1
 80089a4:	08008bf5 	.word	0x08008bf5
 80089a8:	08008bf5 	.word	0x08008bf5
 80089ac:	08008bf5 	.word	0x08008bf5
 80089b0:	08008bf5 	.word	0x08008bf5
 80089b4:	08008bf5 	.word	0x08008bf5
 80089b8:	08008bf5 	.word	0x08008bf5
 80089bc:	08008bf5 	.word	0x08008bf5
 80089c0:	080089f7 	.word	0x080089f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089c4:	4b90      	ldr	r3, [pc, #576]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0320 	and.w	r3, r3, #32
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d009      	beq.n	80089e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089d0:	4b8d      	ldr	r3, [pc, #564]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	08db      	lsrs	r3, r3, #3
 80089d6:	f003 0303 	and.w	r3, r3, #3
 80089da:	4a8c      	ldr	r2, [pc, #560]	; (8008c0c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80089dc:	fa22 f303 	lsr.w	r3, r2, r3
 80089e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80089e2:	e10a      	b.n	8008bfa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089e4:	4b89      	ldr	r3, [pc, #548]	; (8008c0c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80089e6:	61bb      	str	r3, [r7, #24]
    break;
 80089e8:	e107      	b.n	8008bfa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80089ea:	4b89      	ldr	r3, [pc, #548]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80089ec:	61bb      	str	r3, [r7, #24]
    break;
 80089ee:	e104      	b.n	8008bfa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80089f0:	4b88      	ldr	r3, [pc, #544]	; (8008c14 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80089f2:	61bb      	str	r3, [r7, #24]
    break;
 80089f4:	e101      	b.n	8008bfa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089f6:	4b84      	ldr	r3, [pc, #528]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80089f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fa:	f003 0303 	and.w	r3, r3, #3
 80089fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008a00:	4b81      	ldr	r3, [pc, #516]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a04:	091b      	lsrs	r3, r3, #4
 8008a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a0c:	4b7e      	ldr	r3, [pc, #504]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008a16:	4b7c      	ldr	r3, [pc, #496]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1a:	08db      	lsrs	r3, r3, #3
 8008a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	fb02 f303 	mul.w	r3, r2, r3
 8008a26:	ee07 3a90 	vmov	s15, r3
 8008a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 80da 	beq.w	8008bee <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d05a      	beq.n	8008af6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d302      	bcc.n	8008a4a <HAL_RCC_GetSysClockFreq+0x106>
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d078      	beq.n	8008b3a <HAL_RCC_GetSysClockFreq+0x1f6>
 8008a48:	e099      	b.n	8008b7e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a4a:	4b6f      	ldr	r3, [pc, #444]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0320 	and.w	r3, r3, #32
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d02d      	beq.n	8008ab2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a56:	4b6c      	ldr	r3, [pc, #432]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	08db      	lsrs	r3, r3, #3
 8008a5c:	f003 0303 	and.w	r3, r3, #3
 8008a60:	4a6a      	ldr	r2, [pc, #424]	; (8008c0c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008a62:	fa22 f303 	lsr.w	r3, r2, r3
 8008a66:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	ee07 3a90 	vmov	s15, r3
 8008a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a80:	4b61      	ldr	r3, [pc, #388]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a88:	ee07 3a90 	vmov	s15, r3
 8008a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a90:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a94:	eddf 5a60 	vldr	s11, [pc, #384]	; 8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008a98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008ab0:	e087      	b.n	8008bc2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	ee07 3a90 	vmov	s15, r3
 8008ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8008c1c <HAL_RCC_GetSysClockFreq+0x2d8>
 8008ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac4:	4b50      	ldr	r3, [pc, #320]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008acc:	ee07 3a90 	vmov	s15, r3
 8008ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad4:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ad8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008adc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008af4:	e065      	b.n	8008bc2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	ee07 3a90 	vmov	s15, r3
 8008afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b00:	eddf 6a47 	vldr	s13, [pc, #284]	; 8008c20 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b08:	4b3f      	ldr	r3, [pc, #252]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b10:	ee07 3a90 	vmov	s15, r3
 8008b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b18:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b1c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008b20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b38:	e043      	b.n	8008bc2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	ee07 3a90 	vmov	s15, r3
 8008b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b44:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008c24 <HAL_RCC_GetSysClockFreq+0x2e0>
 8008b48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b4c:	4b2e      	ldr	r3, [pc, #184]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b54:	ee07 3a90 	vmov	s15, r3
 8008b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b60:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008b64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b7c:	e021      	b.n	8008bc2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	ee07 3a90 	vmov	s15, r3
 8008b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b88:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008c20 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b90:	4b1d      	ldr	r3, [pc, #116]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b98:	ee07 3a90 	vmov	s15, r3
 8008b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba0:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ba4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bc0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008bc2:	4b11      	ldr	r3, [pc, #68]	; (8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	0a5b      	lsrs	r3, r3, #9
 8008bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bcc:	3301      	adds	r3, #1
 8008bce:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008be6:	ee17 3a90 	vmov	r3, s15
 8008bea:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008bec:	e005      	b.n	8008bfa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	61bb      	str	r3, [r7, #24]
    break;
 8008bf2:	e002      	b.n	8008bfa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8008bf4:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008bf6:	61bb      	str	r3, [r7, #24]
    break;
 8008bf8:	bf00      	nop
  }

  return sysclockfreq;
 8008bfa:	69bb      	ldr	r3, [r7, #24]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3724      	adds	r7, #36	; 0x24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	58024400 	.word	0x58024400
 8008c0c:	03d09000 	.word	0x03d09000
 8008c10:	003d0900 	.word	0x003d0900
 8008c14:	007a1200 	.word	0x007a1200
 8008c18:	46000000 	.word	0x46000000
 8008c1c:	4c742400 	.word	0x4c742400
 8008c20:	4a742400 	.word	0x4a742400
 8008c24:	4af42400 	.word	0x4af42400

08008c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c2e:	f7ff fe89 	bl	8008944 <HAL_RCC_GetSysClockFreq>
 8008c32:	4601      	mov	r1, r0
 8008c34:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	0a1b      	lsrs	r3, r3, #8
 8008c3a:	f003 030f 	and.w	r3, r3, #15
 8008c3e:	4a0f      	ldr	r2, [pc, #60]	; (8008c7c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c40:	5cd3      	ldrb	r3, [r2, r3]
 8008c42:	f003 031f 	and.w	r3, r3, #31
 8008c46:	fa21 f303 	lsr.w	r3, r1, r3
 8008c4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	f003 030f 	and.w	r3, r3, #15
 8008c54:	4a09      	ldr	r2, [pc, #36]	; (8008c7c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c56:	5cd3      	ldrb	r3, [r2, r3]
 8008c58:	f003 031f 	and.w	r3, r3, #31
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c62:	4a07      	ldr	r2, [pc, #28]	; (8008c80 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c66:	4a07      	ldr	r2, [pc, #28]	; (8008c84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	58024400 	.word	0x58024400
 8008c7c:	08017e50 	.word	0x08017e50
 8008c80:	24000004 	.word	0x24000004
 8008c84:	24000000 	.word	0x24000000

08008c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c8c:	f7ff ffcc 	bl	8008c28 <HAL_RCC_GetHCLKFreq>
 8008c90:	4601      	mov	r1, r0
 8008c92:	4b06      	ldr	r3, [pc, #24]	; (8008cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	091b      	lsrs	r3, r3, #4
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	4a04      	ldr	r2, [pc, #16]	; (8008cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c9e:	5cd3      	ldrb	r3, [r2, r3]
 8008ca0:	f003 031f 	and.w	r3, r3, #31
 8008ca4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	58024400 	.word	0x58024400
 8008cb0:	08017e50 	.word	0x08017e50

08008cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008cb8:	f7ff ffb6 	bl	8008c28 <HAL_RCC_GetHCLKFreq>
 8008cbc:	4601      	mov	r1, r0
 8008cbe:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	0a1b      	lsrs	r3, r3, #8
 8008cc4:	f003 0307 	and.w	r3, r3, #7
 8008cc8:	4a04      	ldr	r2, [pc, #16]	; (8008cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008cca:	5cd3      	ldrb	r3, [r2, r3]
 8008ccc:	f003 031f 	and.w	r3, r3, #31
 8008cd0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	58024400 	.word	0x58024400
 8008cdc:	08017e50 	.word	0x08017e50

08008ce0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	223f      	movs	r2, #63	; 0x3f
 8008cee:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008cf0:	4b1a      	ldr	r3, [pc, #104]	; (8008d5c <HAL_RCC_GetClockConfig+0x7c>)
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	f003 0207 	and.w	r2, r3, #7
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008cfc:	4b17      	ldr	r3, [pc, #92]	; (8008d5c <HAL_RCC_GetClockConfig+0x7c>)
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008d08:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <HAL_RCC_GetClockConfig+0x7c>)
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	f003 020f 	and.w	r2, r3, #15
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008d14:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <HAL_RCC_GetClockConfig+0x7c>)
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008d20:	4b0e      	ldr	r3, [pc, #56]	; (8008d5c <HAL_RCC_GetClockConfig+0x7c>)
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008d2c:	4b0b      	ldr	r3, [pc, #44]	; (8008d5c <HAL_RCC_GetClockConfig+0x7c>)
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008d38:	4b08      	ldr	r3, [pc, #32]	; (8008d5c <HAL_RCC_GetClockConfig+0x7c>)
 8008d3a:	6a1b      	ldr	r3, [r3, #32]
 8008d3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008d44:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <HAL_RCC_GetClockConfig+0x80>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 020f 	and.w	r2, r3, #15
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	601a      	str	r2, [r3, #0]
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	58024400 	.word	0x58024400
 8008d60:	52002000 	.word	0x52002000

08008d64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d70:	2300      	movs	r3, #0
 8008d72:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d03d      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d88:	d013      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d8e:	d802      	bhi.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d007      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008d94:	e01f      	b.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008d96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d9a:	d013      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008d9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008da0:	d01c      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8008da2:	e018      	b.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da4:	4baf      	ldr	r3, [pc, #700]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	4aae      	ldr	r2, [pc, #696]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008db0:	e015      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3304      	adds	r3, #4
 8008db6:	2102      	movs	r1, #2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f001 fd33 	bl	800a824 <RCCEx_PLL2_Config>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008dc2:	e00c      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	3324      	adds	r3, #36	; 0x24
 8008dc8:	2102      	movs	r1, #2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 fddc 	bl	800a988 <RCCEx_PLL3_Config>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008dd4:	e003      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dda:	e000      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d109      	bne.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008de4:	4b9f      	ldr	r3, [pc, #636]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008df0:	499c      	ldr	r1, [pc, #624]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	650b      	str	r3, [r1, #80]	; 0x50
 8008df6:	e001      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df8:	7dfb      	ldrb	r3, [r7, #23]
 8008dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d03d      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d826      	bhi.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8008e10:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008e2d 	.word	0x08008e2d
 8008e1c:	08008e3b 	.word	0x08008e3b
 8008e20:	08008e4d 	.word	0x08008e4d
 8008e24:	08008e65 	.word	0x08008e65
 8008e28:	08008e65 	.word	0x08008e65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e2c:	4b8d      	ldr	r3, [pc, #564]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e30:	4a8c      	ldr	r2, [pc, #560]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e38:	e015      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	2100      	movs	r1, #0
 8008e40:	4618      	mov	r0, r3
 8008e42:	f001 fcef 	bl	800a824 <RCCEx_PLL2_Config>
 8008e46:	4603      	mov	r3, r0
 8008e48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e4a:	e00c      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3324      	adds	r3, #36	; 0x24
 8008e50:	2100      	movs	r1, #0
 8008e52:	4618      	mov	r0, r3
 8008e54:	f001 fd98 	bl	800a988 <RCCEx_PLL3_Config>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e5c:	e003      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	75fb      	strb	r3, [r7, #23]
      break;
 8008e62:	e000      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8008e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d109      	bne.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e6c:	4b7d      	ldr	r3, [pc, #500]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e70:	f023 0207 	bic.w	r2, r3, #7
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e78:	497a      	ldr	r1, [pc, #488]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	650b      	str	r3, [r1, #80]	; 0x50
 8008e7e:	e001      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
 8008e82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d03e      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e94:	2b80      	cmp	r3, #128	; 0x80
 8008e96:	d01c      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008e98:	2b80      	cmp	r3, #128	; 0x80
 8008e9a:	d804      	bhi.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d008      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008ea0:	2b40      	cmp	r3, #64	; 0x40
 8008ea2:	d00d      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008ea4:	e01e      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008ea6:	2bc0      	cmp	r3, #192	; 0xc0
 8008ea8:	d01f      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eae:	d01e      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008eb0:	e018      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb2:	4b6c      	ldr	r3, [pc, #432]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb6:	4a6b      	ldr	r2, [pc, #428]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008ebe:	e017      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f001 fcac 	bl	800a824 <RCCEx_PLL2_Config>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008ed0:	e00e      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	3324      	adds	r3, #36	; 0x24
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f001 fd55 	bl	800a988 <RCCEx_PLL3_Config>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008ee2:	e005      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee8:	e002      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008eea:	bf00      	nop
 8008eec:	e000      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d109      	bne.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008ef6:	4b5b      	ldr	r3, [pc, #364]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008efa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f02:	4958      	ldr	r1, [pc, #352]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	650b      	str	r3, [r1, #80]	; 0x50
 8008f08:	e001      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d044      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f24:	d01f      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f2a:	d805      	bhi.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00a      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f34:	d00e      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8008f36:	e01f      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8008f38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f3c:	d01f      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8008f3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f42:	d01e      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008f44:	e018      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f46:	4b47      	ldr	r3, [pc, #284]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4a:	4a46      	ldr	r2, [pc, #280]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f52:	e017      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	3304      	adds	r3, #4
 8008f58:	2100      	movs	r1, #0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f001 fc62 	bl	800a824 <RCCEx_PLL2_Config>
 8008f60:	4603      	mov	r3, r0
 8008f62:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008f64:	e00e      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3324      	adds	r3, #36	; 0x24
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f001 fd0b 	bl	800a988 <RCCEx_PLL3_Config>
 8008f72:	4603      	mov	r3, r0
 8008f74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f76:	e005      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f7c:	e002      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008f7e:	bf00      	nop
 8008f80:	e000      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10a      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008f8a:	4b36      	ldr	r3, [pc, #216]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f8e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f98:	4932      	ldr	r1, [pc, #200]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	658b      	str	r3, [r1, #88]	; 0x58
 8008f9e:	e001      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d044      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fba:	d01f      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008fbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fc0:	d805      	bhi.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x278>
 8008fc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fca:	d00e      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008fcc:	e01f      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8008fce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fd2:	d01f      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fd8:	d01e      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008fda:	e018      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fdc:	4b21      	ldr	r3, [pc, #132]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe0:	4a20      	ldr	r2, [pc, #128]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fe8:	e017      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3304      	adds	r3, #4
 8008fee:	2100      	movs	r1, #0
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f001 fc17 	bl	800a824 <RCCEx_PLL2_Config>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008ffa:	e00e      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3324      	adds	r3, #36	; 0x24
 8009000:	2100      	movs	r1, #0
 8009002:	4618      	mov	r0, r3
 8009004:	f001 fcc0 	bl	800a988 <RCCEx_PLL3_Config>
 8009008:	4603      	mov	r3, r0
 800900a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800900c:	e005      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	75fb      	strb	r3, [r7, #23]
      break;
 8009012:	e002      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009014:	bf00      	nop
 8009016:	e000      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009020:	4b10      	ldr	r3, [pc, #64]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009024:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800902e:	490d      	ldr	r1, [pc, #52]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009030:	4313      	orrs	r3, r2
 8009032:	658b      	str	r3, [r1, #88]	; 0x58
 8009034:	e001      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009036:	7dfb      	ldrb	r3, [r7, #23]
 8009038:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d035      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800904a:	2b10      	cmp	r3, #16
 800904c:	d00c      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800904e:	2b10      	cmp	r3, #16
 8009050:	d802      	bhi.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d01b      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8009056:	e017      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009058:	2b20      	cmp	r3, #32
 800905a:	d00c      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800905c:	2b30      	cmp	r3, #48	; 0x30
 800905e:	d018      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8009060:	e012      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8009062:	bf00      	nop
 8009064:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009068:	4baf      	ldr	r3, [pc, #700]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	4aae      	ldr	r2, [pc, #696]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800906e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009072:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009074:	e00e      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3304      	adds	r3, #4
 800907a:	2102      	movs	r1, #2
 800907c:	4618      	mov	r0, r3
 800907e:	f001 fbd1 	bl	800a824 <RCCEx_PLL2_Config>
 8009082:	4603      	mov	r3, r0
 8009084:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009086:	e005      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	75fb      	strb	r3, [r7, #23]
      break;
 800908c:	e002      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800908e:	bf00      	nop
 8009090:	e000      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009094:	7dfb      	ldrb	r3, [r7, #23]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d109      	bne.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800909a:	4ba3      	ldr	r3, [pc, #652]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800909c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090a6:	49a0      	ldr	r1, [pc, #640]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80090ac:	e001      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
 80090b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d042      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090c6:	d01f      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80090c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090cc:	d805      	bhi.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x376>
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80090d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d6:	d00e      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80090d8:	e01f      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80090da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090de:	d01f      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80090e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090e4:	d01e      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80090e6:	e018      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e8:	4b8f      	ldr	r3, [pc, #572]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	4a8e      	ldr	r2, [pc, #568]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80090ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80090f4:	e017      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3304      	adds	r3, #4
 80090fa:	2100      	movs	r1, #0
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 fb91 	bl	800a824 <RCCEx_PLL2_Config>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009106:	e00e      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3324      	adds	r3, #36	; 0x24
 800910c:	2100      	movs	r1, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f001 fc3a 	bl	800a988 <RCCEx_PLL3_Config>
 8009114:	4603      	mov	r3, r0
 8009116:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009118:	e005      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	75fb      	strb	r3, [r7, #23]
      break;
 800911e:	e002      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009120:	bf00      	nop
 8009122:	e000      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d109      	bne.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800912c:	4b7e      	ldr	r3, [pc, #504]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800912e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009130:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009138:	497b      	ldr	r1, [pc, #492]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800913a:	4313      	orrs	r3, r2
 800913c:	650b      	str	r3, [r1, #80]	; 0x50
 800913e:	e001      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009140:	7dfb      	ldrb	r3, [r7, #23]
 8009142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d042      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009158:	d01b      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800915a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800915e:	d805      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009160:	2b00      	cmp	r3, #0
 8009162:	d022      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009168:	d00a      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800916a:	e01b      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800916c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009170:	d01d      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8009172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009176:	d01c      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009178:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800917c:	d01b      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800917e:	e011      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	3304      	adds	r3, #4
 8009184:	2101      	movs	r1, #1
 8009186:	4618      	mov	r0, r3
 8009188:	f001 fb4c 	bl	800a824 <RCCEx_PLL2_Config>
 800918c:	4603      	mov	r3, r0
 800918e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009190:	e012      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	3324      	adds	r3, #36	; 0x24
 8009196:	2101      	movs	r1, #1
 8009198:	4618      	mov	r0, r3
 800919a:	f001 fbf5 	bl	800a988 <RCCEx_PLL3_Config>
 800919e:	4603      	mov	r3, r0
 80091a0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80091a2:	e009      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	75fb      	strb	r3, [r7, #23]
      break;
 80091a8:	e006      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80091aa:	bf00      	nop
 80091ac:	e004      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80091ae:	bf00      	nop
 80091b0:	e002      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80091b2:	bf00      	nop
 80091b4:	e000      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80091b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091b8:	7dfb      	ldrb	r3, [r7, #23]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d109      	bne.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091be:	4b5a      	ldr	r3, [pc, #360]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80091c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ca:	4957      	ldr	r1, [pc, #348]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	650b      	str	r3, [r1, #80]	; 0x50
 80091d0:	e001      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
 80091d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d044      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ec:	d01b      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80091ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091f2:	d805      	bhi.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d022      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80091f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091fc:	d00a      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80091fe:	e01b      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8009200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009204:	d01d      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800920a:	d01c      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800920c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009210:	d01b      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009212:	e011      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3304      	adds	r3, #4
 8009218:	2101      	movs	r1, #1
 800921a:	4618      	mov	r0, r3
 800921c:	f001 fb02 	bl	800a824 <RCCEx_PLL2_Config>
 8009220:	4603      	mov	r3, r0
 8009222:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009224:	e012      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3324      	adds	r3, #36	; 0x24
 800922a:	2101      	movs	r1, #1
 800922c:	4618      	mov	r0, r3
 800922e:	f001 fbab 	bl	800a988 <RCCEx_PLL3_Config>
 8009232:	4603      	mov	r3, r0
 8009234:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009236:	e009      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	75fb      	strb	r3, [r7, #23]
      break;
 800923c:	e006      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800923e:	bf00      	nop
 8009240:	e004      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009242:	bf00      	nop
 8009244:	e002      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009246:	bf00      	nop
 8009248:	e000      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800924a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10a      	bne.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009252:	4b35      	ldr	r3, [pc, #212]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009256:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009260:	4931      	ldr	r1, [pc, #196]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009262:	4313      	orrs	r3, r2
 8009264:	658b      	str	r3, [r1, #88]	; 0x58
 8009266:	e001      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d02d      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800927c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009280:	d005      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009286:	d009      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8009288:	2b00      	cmp	r3, #0
 800928a:	d013      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800928c:	e00f      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800928e:	4b26      	ldr	r3, [pc, #152]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009292:	4a25      	ldr	r2, [pc, #148]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009298:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800929a:	e00c      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3304      	adds	r3, #4
 80092a0:	2101      	movs	r1, #1
 80092a2:	4618      	mov	r0, r3
 80092a4:	f001 fabe 	bl	800a824 <RCCEx_PLL2_Config>
 80092a8:	4603      	mov	r3, r0
 80092aa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80092ac:	e003      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	75fb      	strb	r3, [r7, #23]
      break;
 80092b2:	e000      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80092b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d109      	bne.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80092bc:	4b1a      	ldr	r3, [pc, #104]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80092be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c8:	4917      	ldr	r1, [pc, #92]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	650b      	str	r3, [r1, #80]	; 0x50
 80092ce:	e001      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d035      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e4:	2b03      	cmp	r3, #3
 80092e6:	d81b      	bhi.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80092e8:	a201      	add	r2, pc, #4	; (adr r2, 80092f0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80092ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ee:	bf00      	nop
 80092f0:	0800932d 	.word	0x0800932d
 80092f4:	08009301 	.word	0x08009301
 80092f8:	0800930f 	.word	0x0800930f
 80092fc:	0800932d 	.word	0x0800932d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009300:	4b09      	ldr	r3, [pc, #36]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009304:	4a08      	ldr	r2, [pc, #32]	; (8009328 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800930a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800930c:	e00f      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3304      	adds	r3, #4
 8009312:	2102      	movs	r1, #2
 8009314:	4618      	mov	r0, r3
 8009316:	f001 fa85 	bl	800a824 <RCCEx_PLL2_Config>
 800931a:	4603      	mov	r3, r0
 800931c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800931e:	e006      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	75fb      	strb	r3, [r7, #23]
      break;
 8009324:	e003      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009326:	bf00      	nop
 8009328:	58024400 	.word	0x58024400
      break;
 800932c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d109      	bne.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009334:	4bba      	ldr	r3, [pc, #744]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009338:	f023 0203 	bic.w	r2, r3, #3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009340:	49b7      	ldr	r1, [pc, #732]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009342:	4313      	orrs	r3, r2
 8009344:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009346:	e001      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009348:	7dfb      	ldrb	r3, [r7, #23]
 800934a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 8086 	beq.w	8009466 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800935a:	4bb2      	ldr	r3, [pc, #712]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4ab1      	ldr	r2, [pc, #708]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009364:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009366:	f7f9 fca7 	bl	8002cb8 <HAL_GetTick>
 800936a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800936c:	e009      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800936e:	f7f9 fca3 	bl	8002cb8 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	2b64      	cmp	r3, #100	; 0x64
 800937a:	d902      	bls.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	75fb      	strb	r3, [r7, #23]
        break;
 8009380:	e005      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009382:	4ba8      	ldr	r3, [pc, #672]	; (8009624 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0ef      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d166      	bne.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009394:	4ba2      	ldr	r3, [pc, #648]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009396:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800939e:	4053      	eors	r3, r2
 80093a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d013      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093a8:	4b9d      	ldr	r3, [pc, #628]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80093aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093b0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80093b2:	4b9b      	ldr	r3, [pc, #620]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80093b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b6:	4a9a      	ldr	r2, [pc, #616]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80093b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093bc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093be:	4b98      	ldr	r3, [pc, #608]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80093c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c2:	4a97      	ldr	r2, [pc, #604]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80093c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093c8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80093ca:	4a95      	ldr	r2, [pc, #596]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80093d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093da:	d115      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093dc:	f7f9 fc6c 	bl	8002cb8 <HAL_GetTick>
 80093e0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093e2:	e00b      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093e4:	f7f9 fc68 	bl	8002cb8 <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d902      	bls.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	75fb      	strb	r3, [r7, #23]
            break;
 80093fa:	e005      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093fc:	4b88      	ldr	r3, [pc, #544]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80093fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009400:	f003 0302 	and.w	r3, r3, #2
 8009404:	2b00      	cmp	r3, #0
 8009406:	d0ed      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d126      	bne.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800941c:	d10d      	bne.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800941e:	4b80      	ldr	r3, [pc, #512]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800942c:	0919      	lsrs	r1, r3, #4
 800942e:	4b7e      	ldr	r3, [pc, #504]	; (8009628 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8009430:	400b      	ands	r3, r1
 8009432:	497b      	ldr	r1, [pc, #492]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009434:	4313      	orrs	r3, r2
 8009436:	610b      	str	r3, [r1, #16]
 8009438:	e005      	b.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800943a:	4b79      	ldr	r3, [pc, #484]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	4a78      	ldr	r2, [pc, #480]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009440:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009444:	6113      	str	r3, [r2, #16]
 8009446:	4b76      	ldr	r3, [pc, #472]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009448:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009454:	4972      	ldr	r1, [pc, #456]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009456:	4313      	orrs	r3, r2
 8009458:	670b      	str	r3, [r1, #112]	; 0x70
 800945a:	e004      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	75bb      	strb	r3, [r7, #22]
 8009460:	e001      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d07d      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009476:	2b28      	cmp	r3, #40	; 0x28
 8009478:	d866      	bhi.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800947a:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	0800954f 	.word	0x0800954f
 8009484:	08009549 	.word	0x08009549
 8009488:	08009549 	.word	0x08009549
 800948c:	08009549 	.word	0x08009549
 8009490:	08009549 	.word	0x08009549
 8009494:	08009549 	.word	0x08009549
 8009498:	08009549 	.word	0x08009549
 800949c:	08009549 	.word	0x08009549
 80094a0:	08009525 	.word	0x08009525
 80094a4:	08009549 	.word	0x08009549
 80094a8:	08009549 	.word	0x08009549
 80094ac:	08009549 	.word	0x08009549
 80094b0:	08009549 	.word	0x08009549
 80094b4:	08009549 	.word	0x08009549
 80094b8:	08009549 	.word	0x08009549
 80094bc:	08009549 	.word	0x08009549
 80094c0:	08009537 	.word	0x08009537
 80094c4:	08009549 	.word	0x08009549
 80094c8:	08009549 	.word	0x08009549
 80094cc:	08009549 	.word	0x08009549
 80094d0:	08009549 	.word	0x08009549
 80094d4:	08009549 	.word	0x08009549
 80094d8:	08009549 	.word	0x08009549
 80094dc:	08009549 	.word	0x08009549
 80094e0:	0800954f 	.word	0x0800954f
 80094e4:	08009549 	.word	0x08009549
 80094e8:	08009549 	.word	0x08009549
 80094ec:	08009549 	.word	0x08009549
 80094f0:	08009549 	.word	0x08009549
 80094f4:	08009549 	.word	0x08009549
 80094f8:	08009549 	.word	0x08009549
 80094fc:	08009549 	.word	0x08009549
 8009500:	0800954f 	.word	0x0800954f
 8009504:	08009549 	.word	0x08009549
 8009508:	08009549 	.word	0x08009549
 800950c:	08009549 	.word	0x08009549
 8009510:	08009549 	.word	0x08009549
 8009514:	08009549 	.word	0x08009549
 8009518:	08009549 	.word	0x08009549
 800951c:	08009549 	.word	0x08009549
 8009520:	0800954f 	.word	0x0800954f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	3304      	adds	r3, #4
 8009528:	2101      	movs	r1, #1
 800952a:	4618      	mov	r0, r3
 800952c:	f001 f97a 	bl	800a824 <RCCEx_PLL2_Config>
 8009530:	4603      	mov	r3, r0
 8009532:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009534:	e00c      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	3324      	adds	r3, #36	; 0x24
 800953a:	2101      	movs	r1, #1
 800953c:	4618      	mov	r0, r3
 800953e:	f001 fa23 	bl	800a988 <RCCEx_PLL3_Config>
 8009542:	4603      	mov	r3, r0
 8009544:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009546:	e003      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	75fb      	strb	r3, [r7, #23]
      break;
 800954c:	e000      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800954e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009550:	7dfb      	ldrb	r3, [r7, #23]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d109      	bne.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009556:	4b32      	ldr	r3, [pc, #200]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009562:	492f      	ldr	r1, [pc, #188]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009564:	4313      	orrs	r3, r2
 8009566:	654b      	str	r3, [r1, #84]	; 0x54
 8009568:	e001      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d037      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800957e:	2b05      	cmp	r3, #5
 8009580:	d820      	bhi.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009582:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009588:	080095cb 	.word	0x080095cb
 800958c:	080095a1 	.word	0x080095a1
 8009590:	080095b3 	.word	0x080095b3
 8009594:	080095cb 	.word	0x080095cb
 8009598:	080095cb 	.word	0x080095cb
 800959c:	080095cb 	.word	0x080095cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	3304      	adds	r3, #4
 80095a4:	2101      	movs	r1, #1
 80095a6:	4618      	mov	r0, r3
 80095a8:	f001 f93c 	bl	800a824 <RCCEx_PLL2_Config>
 80095ac:	4603      	mov	r3, r0
 80095ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80095b0:	e00c      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	3324      	adds	r3, #36	; 0x24
 80095b6:	2101      	movs	r1, #1
 80095b8:	4618      	mov	r0, r3
 80095ba:	f001 f9e5 	bl	800a988 <RCCEx_PLL3_Config>
 80095be:	4603      	mov	r3, r0
 80095c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80095c2:	e003      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	75fb      	strb	r3, [r7, #23]
      break;
 80095c8:	e000      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80095ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d109      	bne.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80095d2:	4b13      	ldr	r3, [pc, #76]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80095d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d6:	f023 0207 	bic.w	r2, r3, #7
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095de:	4910      	ldr	r1, [pc, #64]	; (8009620 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	654b      	str	r3, [r1, #84]	; 0x54
 80095e4:	e001      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0304 	and.w	r3, r3, #4
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d040      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095fc:	2b05      	cmp	r3, #5
 80095fe:	d827      	bhi.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009600:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8009602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009606:	bf00      	nop
 8009608:	08009657 	.word	0x08009657
 800960c:	0800962d 	.word	0x0800962d
 8009610:	0800963f 	.word	0x0800963f
 8009614:	08009657 	.word	0x08009657
 8009618:	08009657 	.word	0x08009657
 800961c:	08009657 	.word	0x08009657
 8009620:	58024400 	.word	0x58024400
 8009624:	58024800 	.word	0x58024800
 8009628:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3304      	adds	r3, #4
 8009630:	2101      	movs	r1, #1
 8009632:	4618      	mov	r0, r3
 8009634:	f001 f8f6 	bl	800a824 <RCCEx_PLL2_Config>
 8009638:	4603      	mov	r3, r0
 800963a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800963c:	e00c      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	3324      	adds	r3, #36	; 0x24
 8009642:	2101      	movs	r1, #1
 8009644:	4618      	mov	r0, r3
 8009646:	f001 f99f 	bl	800a988 <RCCEx_PLL3_Config>
 800964a:	4603      	mov	r3, r0
 800964c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800964e:	e003      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	75fb      	strb	r3, [r7, #23]
      break;
 8009654:	e000      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800965e:	4bb2      	ldr	r3, [pc, #712]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009662:	f023 0207 	bic.w	r2, r3, #7
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800966c:	49ae      	ldr	r1, [pc, #696]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800966e:	4313      	orrs	r3, r2
 8009670:	658b      	str	r3, [r1, #88]	; 0x58
 8009672:	e001      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009674:	7dfb      	ldrb	r3, [r7, #23]
 8009676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0320 	and.w	r3, r3, #32
 8009680:	2b00      	cmp	r3, #0
 8009682:	d044      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800968a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800968e:	d01b      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009694:	d805      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009696:	2b00      	cmp	r3, #0
 8009698:	d022      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800969a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800969e:	d00a      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80096a0:	e01b      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x976>
 80096a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a6:	d01d      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80096a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096ac:	d01c      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80096ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096b2:	d01b      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x988>
 80096b4:	e011      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	3304      	adds	r3, #4
 80096ba:	2100      	movs	r1, #0
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 f8b1 	bl	800a824 <RCCEx_PLL2_Config>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80096c6:	e012      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3324      	adds	r3, #36	; 0x24
 80096cc:	2102      	movs	r1, #2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f001 f95a 	bl	800a988 <RCCEx_PLL3_Config>
 80096d4:	4603      	mov	r3, r0
 80096d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80096d8:	e009      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	75fb      	strb	r3, [r7, #23]
      break;
 80096de:	e006      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80096e0:	bf00      	nop
 80096e2:	e004      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80096e4:	bf00      	nop
 80096e6:	e002      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80096e8:	bf00      	nop
 80096ea:	e000      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80096ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096f4:	4b8c      	ldr	r3, [pc, #560]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80096f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009702:	4989      	ldr	r1, [pc, #548]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009704:	4313      	orrs	r3, r2
 8009706:	654b      	str	r3, [r1, #84]	; 0x54
 8009708:	e001      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009716:	2b00      	cmp	r3, #0
 8009718:	d044      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009724:	d01b      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800972a:	d805      	bhi.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800972c:	2b00      	cmp	r3, #0
 800972e:	d022      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009734:	d00a      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8009736:	e01b      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800973c:	d01d      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800973e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009742:	d01c      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8009744:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009748:	d01b      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800974a:	e011      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3304      	adds	r3, #4
 8009750:	2100      	movs	r1, #0
 8009752:	4618      	mov	r0, r3
 8009754:	f001 f866 	bl	800a824 <RCCEx_PLL2_Config>
 8009758:	4603      	mov	r3, r0
 800975a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800975c:	e012      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	3324      	adds	r3, #36	; 0x24
 8009762:	2102      	movs	r1, #2
 8009764:	4618      	mov	r0, r3
 8009766:	f001 f90f 	bl	800a988 <RCCEx_PLL3_Config>
 800976a:	4603      	mov	r3, r0
 800976c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800976e:	e009      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	75fb      	strb	r3, [r7, #23]
      break;
 8009774:	e006      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009776:	bf00      	nop
 8009778:	e004      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800977a:	bf00      	nop
 800977c:	e002      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800977e:	bf00      	nop
 8009780:	e000      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10a      	bne.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800978a:	4b67      	ldr	r3, [pc, #412]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800978c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800978e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009798:	4963      	ldr	r1, [pc, #396]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800979a:	4313      	orrs	r3, r2
 800979c:	658b      	str	r3, [r1, #88]	; 0x58
 800979e:	e001      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a0:	7dfb      	ldrb	r3, [r7, #23]
 80097a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d044      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097ba:	d01b      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80097bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097c0:	d805      	bhi.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d022      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80097c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097ca:	d00a      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80097cc:	e01b      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80097ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097d2:	d01d      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80097d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80097d8:	d01c      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80097da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80097de:	d01b      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80097e0:	e011      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	3304      	adds	r3, #4
 80097e6:	2100      	movs	r1, #0
 80097e8:	4618      	mov	r0, r3
 80097ea:	f001 f81b 	bl	800a824 <RCCEx_PLL2_Config>
 80097ee:	4603      	mov	r3, r0
 80097f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80097f2:	e012      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3324      	adds	r3, #36	; 0x24
 80097f8:	2102      	movs	r1, #2
 80097fa:	4618      	mov	r0, r3
 80097fc:	f001 f8c4 	bl	800a988 <RCCEx_PLL3_Config>
 8009800:	4603      	mov	r3, r0
 8009802:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009804:	e009      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	75fb      	strb	r3, [r7, #23]
      break;
 800980a:	e006      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800980c:	bf00      	nop
 800980e:	e004      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009810:	bf00      	nop
 8009812:	e002      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009814:	bf00      	nop
 8009816:	e000      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800981a:	7dfb      	ldrb	r3, [r7, #23]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009820:	4b41      	ldr	r3, [pc, #260]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009824:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800982e:	493e      	ldr	r1, [pc, #248]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009830:	4313      	orrs	r3, r2
 8009832:	658b      	str	r3, [r1, #88]	; 0x58
 8009834:	e001      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0308 	and.w	r3, r3, #8
 8009842:	2b00      	cmp	r3, #0
 8009844:	d01a      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800984c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009850:	d10a      	bne.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	3324      	adds	r3, #36	; 0x24
 8009856:	2102      	movs	r1, #2
 8009858:	4618      	mov	r0, r3
 800985a:	f001 f895 	bl	800a988 <RCCEx_PLL3_Config>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009868:	4b2f      	ldr	r3, [pc, #188]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800986a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009876:	492c      	ldr	r1, [pc, #176]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009878:	4313      	orrs	r3, r2
 800987a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	2b00      	cmp	r3, #0
 8009886:	d01a      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800988e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009892:	d10a      	bne.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3324      	adds	r3, #36	; 0x24
 8009898:	2102      	movs	r1, #2
 800989a:	4618      	mov	r0, r3
 800989c:	f001 f874 	bl	800a988 <RCCEx_PLL3_Config>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098aa:	4b1f      	ldr	r3, [pc, #124]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80098ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098b8:	491b      	ldr	r1, [pc, #108]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d032      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80098d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098d4:	d00d      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80098d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098da:	d016      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d111      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3304      	adds	r3, #4
 80098e4:	2100      	movs	r1, #0
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 ff9c 	bl	800a824 <RCCEx_PLL2_Config>
 80098ec:	4603      	mov	r3, r0
 80098ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80098f0:	e00c      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	3324      	adds	r3, #36	; 0x24
 80098f6:	2102      	movs	r1, #2
 80098f8:	4618      	mov	r0, r3
 80098fa:	f001 f845 	bl	800a988 <RCCEx_PLL3_Config>
 80098fe:	4603      	mov	r3, r0
 8009900:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009902:	e003      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	75fb      	strb	r3, [r7, #23]
      break;
 8009908:	e000      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800990a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10c      	bne.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009912:	4b05      	ldr	r3, [pc, #20]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009916:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009920:	4901      	ldr	r1, [pc, #4]	; (8009928 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009922:	4313      	orrs	r3, r2
 8009924:	658b      	str	r3, [r1, #88]	; 0x58
 8009926:	e003      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8009928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800992c:	7dfb      	ldrb	r3, [r7, #23]
 800992e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009938:	2b00      	cmp	r3, #0
 800993a:	d02f      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009946:	d00c      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800994c:	d015      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800994e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009952:	d10f      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009954:	4b79      	ldr	r3, [pc, #484]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009958:	4a78      	ldr	r2, [pc, #480]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800995a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800995e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009960:	e00c      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	3324      	adds	r3, #36	; 0x24
 8009966:	2101      	movs	r1, #1
 8009968:	4618      	mov	r0, r3
 800996a:	f001 f80d 	bl	800a988 <RCCEx_PLL3_Config>
 800996e:	4603      	mov	r3, r0
 8009970:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009972:	e003      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	75fb      	strb	r3, [r7, #23]
      break;
 8009978:	e000      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800997a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800997c:	7dfb      	ldrb	r3, [r7, #23]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10a      	bne.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009982:	4b6e      	ldr	r3, [pc, #440]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009986:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009990:	496a      	ldr	r1, [pc, #424]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009992:	4313      	orrs	r3, r2
 8009994:	654b      	str	r3, [r1, #84]	; 0x54
 8009996:	e001      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009998:	7dfb      	ldrb	r3, [r7, #23]
 800999a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d029      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80099b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099b4:	d007      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80099b6:	e00f      	b.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099b8:	4b60      	ldr	r3, [pc, #384]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099bc:	4a5f      	ldr	r2, [pc, #380]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80099c4:	e00b      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	3304      	adds	r3, #4
 80099ca:	2102      	movs	r1, #2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 ff29 	bl	800a824 <RCCEx_PLL2_Config>
 80099d2:	4603      	mov	r3, r0
 80099d4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80099d6:	e002      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	75fb      	strb	r3, [r7, #23]
      break;
 80099dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d109      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80099e4:	4b55      	ldr	r3, [pc, #340]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f0:	4952      	ldr	r1, [pc, #328]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80099f6:	e001      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00a      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	3324      	adds	r3, #36	; 0x24
 8009a0c:	2102      	movs	r1, #2
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 ffba 	bl	800a988 <RCCEx_PLL3_Config>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d02f      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a32:	d00c      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a38:	d802      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d011      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8009a3e:	e00d      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8009a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a44:	d00f      	beq.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8009a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a4a:	d00e      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8009a4c:	e006      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a4e:	4b3b      	ldr	r3, [pc, #236]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a52:	4a3a      	ldr	r2, [pc, #232]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009a5a:	e007      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a60:	e004      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009a62:	bf00      	nop
 8009a64:	e002      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009a66:	bf00      	nop
 8009a68:	e000      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d109      	bne.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a72:	4b32      	ldr	r3, [pc, #200]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a7e:	492f      	ldr	r1, [pc, #188]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a80:	4313      	orrs	r3, r2
 8009a82:	654b      	str	r3, [r1, #84]	; 0x54
 8009a84:	e001      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d008      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a96:	4b29      	ldr	r3, [pc, #164]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa2:	4926      	ldr	r1, [pc, #152]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d009      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009ab4:	4b21      	ldr	r3, [pc, #132]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ac2:	491e      	ldr	r1, [pc, #120]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d008      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ad4:	4b19      	ldr	r3, [pc, #100]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ae0:	4916      	ldr	r1, [pc, #88]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00d      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009af2:	4b12      	ldr	r3, [pc, #72]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	4a11      	ldr	r2, [pc, #68]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009af8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009afc:	6113      	str	r3, [r2, #16]
 8009afe:	4b0f      	ldr	r3, [pc, #60]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009b00:	691a      	ldr	r2, [r3, #16]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009b08:	490c      	ldr	r1, [pc, #48]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	da08      	bge.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009b16:	4b09      	ldr	r3, [pc, #36]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b22:	4906      	ldr	r1, [pc, #24]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8009b28:	7dbb      	ldrb	r3, [r7, #22]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	e000      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	58024400 	.word	0x58024400

08009b40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b090      	sub	sp, #64	; 0x40
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b4e:	d150      	bne.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009b50:	4ba1      	ldr	r3, [pc, #644]	; (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b54:	f003 0307 	and.w	r3, r3, #7
 8009b58:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	d844      	bhi.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009b60:	a201      	add	r2, pc, #4	; (adr r2, 8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b66:	bf00      	nop
 8009b68:	08009b7d 	.word	0x08009b7d
 8009b6c:	08009b8d 	.word	0x08009b8d
 8009b70:	08009b9d 	.word	0x08009b9d
 8009b74:	08009be5 	.word	0x08009be5
 8009b78:	08009bad 	.word	0x08009bad
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 fd03 	bl	800a58c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b8a:	e241      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b8c:	f107 0318 	add.w	r3, r7, #24
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 fa63 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b9a:	e239      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b9c:	f107 030c 	add.w	r3, r7, #12
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 fba7 	bl	800a2f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009baa:	e231      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009bac:	4b8a      	ldr	r3, [pc, #552]	; (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bb4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d102      	bne.n	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009bbc:	4b87      	ldr	r3, [pc, #540]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009bc0:	e226      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bc8:	d102      	bne.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8009bca:	4b85      	ldr	r3, [pc, #532]	; (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bce:	e21f      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bd6:	d102      	bne.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8009bd8:	4b82      	ldr	r3, [pc, #520]	; (8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009bda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bdc:	e218      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009be2:	e215      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009be4:	4b80      	ldr	r3, [pc, #512]	; (8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009be8:	e212      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009bea:	2300      	movs	r3, #0
 8009bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bee:	bf00      	nop
 8009bf0:	e20e      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bf8:	d14f      	bne.n	8009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009bfa:	4b77      	ldr	r3, [pc, #476]	; (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bfe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009c02:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c06:	2b80      	cmp	r3, #128	; 0x80
 8009c08:	d01c      	beq.n	8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009c0a:	2b80      	cmp	r3, #128	; 0x80
 8009c0c:	d804      	bhi.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d008      	beq.n	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8009c12:	2b40      	cmp	r3, #64	; 0x40
 8009c14:	d00e      	beq.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009c16:	e03c      	b.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8009c18:	2bc0      	cmp	r3, #192	; 0xc0
 8009c1a:	d037      	beq.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8009c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c20:	d018      	beq.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8009c22:	e036      	b.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 fcaf 	bl	800a58c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c32:	e1ed      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c34:	f107 0318 	add.w	r3, r7, #24
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 fa0f 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c42:	e1e5      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c44:	f107 030c 	add.w	r3, r7, #12
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 fb53 	bl	800a2f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c52:	e1dd      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c54:	4b60      	ldr	r3, [pc, #384]	; (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c5c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009c64:	4b5d      	ldr	r3, [pc, #372]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009c66:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009c68:	e1d2      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c70:	d102      	bne.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8009c72:	4b5b      	ldr	r3, [pc, #364]	; (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c76:	e1cb      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c7e:	d102      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8009c80:	4b58      	ldr	r3, [pc, #352]	; (8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c84:	e1c4      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c8a:	e1c1      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009c8c:	4b56      	ldr	r3, [pc, #344]	; (8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c90:	e1be      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c96:	bf00      	nop
 8009c98:	e1ba      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ca0:	d153      	bne.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009ca2:	4b4d      	ldr	r3, [pc, #308]	; (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009caa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cb2:	d01f      	beq.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8009cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cb8:	d805      	bhi.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8009cbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cc2:	d00f      	beq.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8009cc4:	e03d      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8009cc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009cca:	d037      	beq.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009ccc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009cd0:	d018      	beq.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8009cd2:	e036      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 fc57 	bl	800a58c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ce2:	e195      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ce4:	f107 0318 	add.w	r3, r7, #24
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 f9b7 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cf2:	e18d      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cf4:	f107 030c 	add.w	r3, r7, #12
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 fafb 	bl	800a2f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d02:	e185      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d04:	4b34      	ldr	r3, [pc, #208]	; (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d0c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d102      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009d14:	4b31      	ldr	r3, [pc, #196]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009d16:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009d18:	e17a      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d20:	d102      	bne.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8009d22:	4b2f      	ldr	r3, [pc, #188]	; (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d26:	e173      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d2e:	d102      	bne.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8009d30:	4b2c      	ldr	r3, [pc, #176]	; (8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d34:	e16c      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d3a:	e169      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d3c:	4b2a      	ldr	r3, [pc, #168]	; (8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d40:	e166      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d46:	bf00      	nop
 8009d48:	e162      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d50:	d15d      	bne.n	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009d52:	4b21      	ldr	r3, [pc, #132]	; (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d56:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009d5a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d62:	d01f      	beq.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d68:	d805      	bhi.n	8009d76 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00a      	beq.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009d6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d72:	d00f      	beq.n	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8009d74:	e047      	b.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009d76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d7a:	d041      	beq.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8009d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d80:	d018      	beq.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8009d82:	e040      	b.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 fbff 	bl	800a58c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d92:	e13d      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d94:	f107 0318 	add.w	r3, r7, #24
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 f95f 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009da2:	e135      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009da4:	f107 030c 	add.w	r3, r7, #12
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 faa3 	bl	800a2f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009db2:	e12d      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009db4:	4b08      	ldr	r3, [pc, #32]	; (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009db8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009dbc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d102      	bne.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009dc4:	4b05      	ldr	r3, [pc, #20]	; (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009dc8:	e122      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dd0:	d10c      	bne.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8009dd2:	4b03      	ldr	r3, [pc, #12]	; (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dd6:	e11b      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009dd8:	58024400 	.word	0x58024400
 8009ddc:	03d09000 	.word	0x03d09000
 8009de0:	003d0900 	.word	0x003d0900
 8009de4:	007a1200 	.word	0x007a1200
 8009de8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009df2:	d102      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8009df4:	4b89      	ldr	r3, [pc, #548]	; (800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009df8:	e10a      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dfe:	e107      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009e00:	4b87      	ldr	r3, [pc, #540]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8009e02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e04:	e104      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e0a:	bf00      	nop
 8009e0c:	e100      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e14:	d153      	bne.n	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009e16:	4b83      	ldr	r3, [pc, #524]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e1a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009e1e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e26:	d01f      	beq.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e2c:	d805      	bhi.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00a      	beq.n	8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8009e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e36:	d00f      	beq.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8009e38:	e03d      	b.n	8009eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8009e3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e3e:	d037      	beq.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8009e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e44:	d018      	beq.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009e46:	e036      	b.n	8009eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 fb9d 	bl	800a58c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e56:	e0db      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e58:	f107 0318 	add.w	r3, r7, #24
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 f8fd 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e66:	e0d3      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e68:	f107 030c 	add.w	r3, r7, #12
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 fa41 	bl	800a2f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e76:	e0cb      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009e78:	4b6a      	ldr	r3, [pc, #424]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e80:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009e88:	4b67      	ldr	r3, [pc, #412]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009e8c:	e0c0      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e94:	d102      	bne.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8009e96:	4b65      	ldr	r3, [pc, #404]	; (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e9a:	e0b9      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ea2:	d102      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8009ea4:	4b5d      	ldr	r3, [pc, #372]	; (800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ea8:	e0b2      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009eae:	e0af      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009eb0:	4b5b      	ldr	r3, [pc, #364]	; (800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8009eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009eb4:	e0ac      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009eba:	bf00      	nop
 8009ebc:	e0a8      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ec4:	d13d      	bne.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009ec6:	4b57      	ldr	r3, [pc, #348]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009ece:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ed6:	d00c      	beq.n	8009ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009edc:	d011      	beq.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d12b      	bne.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ee2:	f107 0318 	add.w	r3, r7, #24
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 f8b8 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ef0:	e08e      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ef2:	f107 030c 	add.w	r3, r7, #12
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 f9fc 	bl	800a2f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f00:	e086      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f02:	4b48      	ldr	r3, [pc, #288]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f0a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d102      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009f12:	4b45      	ldr	r3, [pc, #276]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009f14:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009f16:	e07b      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f1e:	d102      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8009f20:	4b42      	ldr	r3, [pc, #264]	; (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f24:	e074      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f2c:	d102      	bne.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8009f2e:	4b3b      	ldr	r3, [pc, #236]	; (800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f32:	e06d      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009f34:	2300      	movs	r3, #0
 8009f36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f38:	e06a      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f3e:	bf00      	nop
 8009f40:	e066      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f48:	d11f      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009f4a:	4b36      	ldr	r3, [pc, #216]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f52:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f5e:	d008      	beq.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009f60:	e00f      	b.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 fb10 	bl	800a58c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f70:	e04e      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f72:	f107 0318 	add.w	r3, r7, #24
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 f870 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f80:	e046      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f86:	bf00      	nop
 8009f88:	e042      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f90:	d13c      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009f92:	4b24      	ldr	r3, [pc, #144]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f96:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009f9a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fa2:	d01e      	beq.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8009fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fa8:	d805      	bhi.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00d      	beq.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fb2:	d00e      	beq.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8009fb4:	e026      	b.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8009fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fba:	d01d      	beq.n	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8009fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fc0:	d01d      	beq.n	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009fc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fc6:	d014      	beq.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009fc8:	e01c      	b.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009fca:	f000 f831 	bl	800a030 <HAL_RCCEx_GetD3PCLK1Freq>
 8009fce:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009fd0:	e01e      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fd2:	f107 0318 	add.w	r3, r7, #24
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 f840 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fe0:	e016      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fe2:	f107 030c 	add.w	r3, r7, #12
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 f984 	bl	800a2f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ff0:	e00e      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ff6:	e00b      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8009ff8:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ffc:	e008      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8009ffe:	4b07      	ldr	r3, [pc, #28]	; (800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a002:	e005      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a008:	bf00      	nop
 800a00a:	e001      	b.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800a00c:	2300      	movs	r3, #0
 800a00e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a012:	4618      	mov	r0, r3
 800a014:	3740      	adds	r7, #64	; 0x40
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	007a1200 	.word	0x007a1200
 800a020:	00bb8000 	.word	0x00bb8000
 800a024:	58024400 	.word	0x58024400
 800a028:	03d09000 	.word	0x03d09000
 800a02c:	003d0900 	.word	0x003d0900

0800a030 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a034:	f7fe fdf8 	bl	8008c28 <HAL_RCC_GetHCLKFreq>
 800a038:	4601      	mov	r1, r0
 800a03a:	4b06      	ldr	r3, [pc, #24]	; (800a054 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	091b      	lsrs	r3, r3, #4
 800a040:	f003 0307 	and.w	r3, r3, #7
 800a044:	4a04      	ldr	r2, [pc, #16]	; (800a058 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a046:	5cd3      	ldrb	r3, [r2, r3]
 800a048:	f003 031f 	and.w	r3, r3, #31
 800a04c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a050:	4618      	mov	r0, r3
 800a052:	bd80      	pop	{r7, pc}
 800a054:	58024400 	.word	0x58024400
 800a058:	08017e50 	.word	0x08017e50

0800a05c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b089      	sub	sp, #36	; 0x24
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a064:	4b9d      	ldr	r3, [pc, #628]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a068:	f003 0303 	and.w	r3, r3, #3
 800a06c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a06e:	4b9b      	ldr	r3, [pc, #620]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a072:	0b1b      	lsrs	r3, r3, #12
 800a074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a078:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a07a:	4b98      	ldr	r3, [pc, #608]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07e:	091b      	lsrs	r3, r3, #4
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a086:	4b95      	ldr	r3, [pc, #596]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a08a:	08db      	lsrs	r3, r3, #3
 800a08c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	fb02 f303 	mul.w	r3, r2, r3
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 810a 	beq.w	800a2be <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d05a      	beq.n	800a166 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d302      	bcc.n	800a0ba <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d078      	beq.n	800a1aa <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800a0b8:	e099      	b.n	800a1ee <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0ba:	4b88      	ldr	r3, [pc, #544]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0320 	and.w	r3, r3, #32
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d02d      	beq.n	800a122 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0c6:	4b85      	ldr	r3, [pc, #532]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	08db      	lsrs	r3, r3, #3
 800a0cc:	f003 0303 	and.w	r3, r3, #3
 800a0d0:	4a83      	ldr	r2, [pc, #524]	; (800a2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800a0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	ee07 3a90 	vmov	s15, r3
 800a0e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0f0:	4b7a      	ldr	r3, [pc, #488]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f8:	ee07 3a90 	vmov	s15, r3
 800a0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a100:	ed97 6a03 	vldr	s12, [r7, #12]
 800a104:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a10c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a11c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a120:	e087      	b.n	800a232 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	ee07 3a90 	vmov	s15, r3
 800a128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a12c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800a130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a134:	4b69      	ldr	r3, [pc, #420]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a13c:	ee07 3a90 	vmov	s15, r3
 800a140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a144:	ed97 6a03 	vldr	s12, [r7, #12]
 800a148:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a14c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a15c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a160:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a164:	e065      	b.n	800a232 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	ee07 3a90 	vmov	s15, r3
 800a16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a170:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a178:	4b58      	ldr	r3, [pc, #352]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a180:	ee07 3a90 	vmov	s15, r3
 800a184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a188:	ed97 6a03 	vldr	s12, [r7, #12]
 800a18c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a19c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1a8:	e043      	b.n	800a232 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	ee07 3a90 	vmov	s15, r3
 800a1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800a1b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1bc:	4b47      	ldr	r3, [pc, #284]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1c4:	ee07 3a90 	vmov	s15, r3
 800a1c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a1d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1ec:	e021      	b.n	800a232 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	ee07 3a90 	vmov	s15, r3
 800a1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a1fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a200:	4b36      	ldr	r3, [pc, #216]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a208:	ee07 3a90 	vmov	s15, r3
 800a20c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a210:	ed97 6a03 	vldr	s12, [r7, #12]
 800a214:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a2e4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a21c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a22c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a230:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a232:	4b2a      	ldr	r3, [pc, #168]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a236:	0a5b      	lsrs	r3, r3, #9
 800a238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a23c:	ee07 3a90 	vmov	s15, r3
 800a240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a24c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a258:	ee17 2a90 	vmov	r2, s15
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a260:	4b1e      	ldr	r3, [pc, #120]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a264:	0c1b      	lsrs	r3, r3, #16
 800a266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a26a:	ee07 3a90 	vmov	s15, r3
 800a26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a27a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a286:	ee17 2a90 	vmov	r2, s15
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a28e:	4b13      	ldr	r3, [pc, #76]	; (800a2dc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a292:	0e1b      	lsrs	r3, r3, #24
 800a294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a298:	ee07 3a90 	vmov	s15, r3
 800a29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2b4:	ee17 2a90 	vmov	r2, s15
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a2bc:	e008      	b.n	800a2d0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	609a      	str	r2, [r3, #8]
}
 800a2d0:	bf00      	nop
 800a2d2:	3724      	adds	r7, #36	; 0x24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	58024400 	.word	0x58024400
 800a2e0:	03d09000 	.word	0x03d09000
 800a2e4:	46000000 	.word	0x46000000
 800a2e8:	4c742400 	.word	0x4c742400
 800a2ec:	4a742400 	.word	0x4a742400
 800a2f0:	4af42400 	.word	0x4af42400

0800a2f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b089      	sub	sp, #36	; 0x24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2fc:	4b9d      	ldr	r3, [pc, #628]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a300:	f003 0303 	and.w	r3, r3, #3
 800a304:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a306:	4b9b      	ldr	r3, [pc, #620]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30a:	0d1b      	lsrs	r3, r3, #20
 800a30c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a310:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a312:	4b98      	ldr	r3, [pc, #608]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a316:	0a1b      	lsrs	r3, r3, #8
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a31e:	4b95      	ldr	r3, [pc, #596]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a322:	08db      	lsrs	r3, r3, #3
 800a324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	fb02 f303 	mul.w	r3, r2, r3
 800a32e:	ee07 3a90 	vmov	s15, r3
 800a332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a336:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f000 810a 	beq.w	800a556 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d05a      	beq.n	800a3fe <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d302      	bcc.n	800a352 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d078      	beq.n	800a442 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800a350:	e099      	b.n	800a486 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a352:	4b88      	ldr	r3, [pc, #544]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0320 	and.w	r3, r3, #32
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d02d      	beq.n	800a3ba <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a35e:	4b85      	ldr	r3, [pc, #532]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	08db      	lsrs	r3, r3, #3
 800a364:	f003 0303 	and.w	r3, r3, #3
 800a368:	4a83      	ldr	r2, [pc, #524]	; (800a578 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800a36a:	fa22 f303 	lsr.w	r3, r2, r3
 800a36e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	ee07 3a90 	vmov	s15, r3
 800a376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	ee07 3a90 	vmov	s15, r3
 800a380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a388:	4b7a      	ldr	r3, [pc, #488]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a390:	ee07 3a90 	vmov	s15, r3
 800a394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a398:	ed97 6a03 	vldr	s12, [r7, #12]
 800a39c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a57c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a3a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3b4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a3b8:	e087      	b.n	800a4ca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	ee07 3a90 	vmov	s15, r3
 800a3c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a580 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800a3c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3cc:	4b69      	ldr	r3, [pc, #420]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d4:	ee07 3a90 	vmov	s15, r3
 800a3d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3e0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a57c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a3e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3fc:	e065      	b.n	800a4ca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	ee07 3a90 	vmov	s15, r3
 800a404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a408:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a40c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a410:	4b58      	ldr	r3, [pc, #352]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a418:	ee07 3a90 	vmov	s15, r3
 800a41c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a420:	ed97 6a03 	vldr	s12, [r7, #12]
 800a424:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a57c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a42c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a43c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a440:	e043      	b.n	800a4ca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	ee07 3a90 	vmov	s15, r3
 800a448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a44c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a588 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800a450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a454:	4b47      	ldr	r3, [pc, #284]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a45c:	ee07 3a90 	vmov	s15, r3
 800a460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a464:	ed97 6a03 	vldr	s12, [r7, #12]
 800a468:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a57c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a46c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a47c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a480:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a484:	e021      	b.n	800a4ca <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	ee07 3a90 	vmov	s15, r3
 800a48c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a490:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a498:	4b36      	ldr	r3, [pc, #216]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a0:	ee07 3a90 	vmov	s15, r3
 800a4a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a57c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a4b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4c8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a4ca:	4b2a      	ldr	r3, [pc, #168]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ce:	0a5b      	lsrs	r3, r3, #9
 800a4d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4d4:	ee07 3a90 	vmov	s15, r3
 800a4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4f0:	ee17 2a90 	vmov	r2, s15
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a4f8:	4b1e      	ldr	r3, [pc, #120]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fc:	0c1b      	lsrs	r3, r3, #16
 800a4fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a50e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a512:	edd7 6a07 	vldr	s13, [r7, #28]
 800a516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a51a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a51e:	ee17 2a90 	vmov	r2, s15
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a526:	4b13      	ldr	r3, [pc, #76]	; (800a574 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52a:	0e1b      	lsrs	r3, r3, #24
 800a52c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a530:	ee07 3a90 	vmov	s15, r3
 800a534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a53c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a540:	edd7 6a07 	vldr	s13, [r7, #28]
 800a544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a54c:	ee17 2a90 	vmov	r2, s15
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a554:	e008      	b.n	800a568 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	609a      	str	r2, [r3, #8]
}
 800a568:	bf00      	nop
 800a56a:	3724      	adds	r7, #36	; 0x24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	58024400 	.word	0x58024400
 800a578:	03d09000 	.word	0x03d09000
 800a57c:	46000000 	.word	0x46000000
 800a580:	4c742400 	.word	0x4c742400
 800a584:	4a742400 	.word	0x4a742400
 800a588:	4af42400 	.word	0x4af42400

0800a58c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b089      	sub	sp, #36	; 0x24
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a594:	4b9d      	ldr	r3, [pc, #628]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a598:	f003 0303 	and.w	r3, r3, #3
 800a59c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a59e:	4b9b      	ldr	r3, [pc, #620]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a2:	091b      	lsrs	r3, r3, #4
 800a5a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a5aa:	4b98      	ldr	r3, [pc, #608]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ae:	f003 0301 	and.w	r3, r3, #1
 800a5b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a5b4:	4b95      	ldr	r3, [pc, #596]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b8:	08db      	lsrs	r3, r3, #3
 800a5ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	fb02 f303 	mul.w	r3, r2, r3
 800a5c4:	ee07 3a90 	vmov	s15, r3
 800a5c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 810a 	beq.w	800a7ec <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d05a      	beq.n	800a694 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d302      	bcc.n	800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d078      	beq.n	800a6d8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800a5e6:	e099      	b.n	800a71c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5e8:	4b88      	ldr	r3, [pc, #544]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0320 	and.w	r3, r3, #32
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d02d      	beq.n	800a650 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5f4:	4b85      	ldr	r3, [pc, #532]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	08db      	lsrs	r3, r3, #3
 800a5fa:	f003 0303 	and.w	r3, r3, #3
 800a5fe:	4a84      	ldr	r2, [pc, #528]	; (800a810 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800a600:	fa22 f303 	lsr.w	r3, r2, r3
 800a604:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	ee07 3a90 	vmov	s15, r3
 800a60c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a61a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a61e:	4b7b      	ldr	r3, [pc, #492]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a626:	ee07 3a90 	vmov	s15, r3
 800a62a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a62e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a632:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a814 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a63a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a63e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a64a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a64e:	e087      	b.n	800a760 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	ee07 3a90 	vmov	s15, r3
 800a656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a818 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800a65e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a662:	4b6a      	ldr	r3, [pc, #424]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66a:	ee07 3a90 	vmov	s15, r3
 800a66e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a672:	ed97 6a03 	vldr	s12, [r7, #12]
 800a676:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a814 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a67a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a67e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a68a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a68e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a692:	e065      	b.n	800a760 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	ee07 3a90 	vmov	s15, r3
 800a69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a69e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a81c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a6a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6a6:	4b59      	ldr	r3, [pc, #356]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ae:	ee07 3a90 	vmov	s15, r3
 800a6b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a814 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a6be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6d6:	e043      	b.n	800a760 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	ee07 3a90 	vmov	s15, r3
 800a6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a820 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ea:	4b48      	ldr	r3, [pc, #288]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f2:	ee07 3a90 	vmov	s15, r3
 800a6f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a814 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a70a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a70e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a712:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a71a:	e021      	b.n	800a760 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	ee07 3a90 	vmov	s15, r3
 800a722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a726:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a81c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a72a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a72e:	4b37      	ldr	r3, [pc, #220]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a736:	ee07 3a90 	vmov	s15, r3
 800a73a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a73e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a742:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a814 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a74a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a74e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a75a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a75e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a760:	4b2a      	ldr	r3, [pc, #168]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a764:	0a5b      	lsrs	r3, r3, #9
 800a766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a77a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a77e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a786:	ee17 2a90 	vmov	r2, s15
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a78e:	4b1f      	ldr	r3, [pc, #124]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a792:	0c1b      	lsrs	r3, r3, #16
 800a794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a798:	ee07 3a90 	vmov	s15, r3
 800a79c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7b4:	ee17 2a90 	vmov	r2, s15
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a7bc:	4b13      	ldr	r3, [pc, #76]	; (800a80c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c0:	0e1b      	lsrs	r3, r3, #24
 800a7c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7c6:	ee07 3a90 	vmov	s15, r3
 800a7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7e2:	ee17 2a90 	vmov	r2, s15
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a7ea:	e008      	b.n	800a7fe <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	609a      	str	r2, [r3, #8]
}
 800a7fe:	bf00      	nop
 800a800:	3724      	adds	r7, #36	; 0x24
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	58024400 	.word	0x58024400
 800a810:	03d09000 	.word	0x03d09000
 800a814:	46000000 	.word	0x46000000
 800a818:	4c742400 	.word	0x4c742400
 800a81c:	4a742400 	.word	0x4a742400
 800a820:	4af42400 	.word	0x4af42400

0800a824 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a832:	4b53      	ldr	r3, [pc, #332]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a836:	f003 0303 	and.w	r3, r3, #3
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d101      	bne.n	800a842 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	e099      	b.n	800a976 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a842:	4b4f      	ldr	r3, [pc, #316]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a4e      	ldr	r2, [pc, #312]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a848:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a84c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a84e:	f7f8 fa33 	bl	8002cb8 <HAL_GetTick>
 800a852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a854:	e008      	b.n	800a868 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a856:	f7f8 fa2f 	bl	8002cb8 <HAL_GetTick>
 800a85a:	4602      	mov	r2, r0
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	2b02      	cmp	r3, #2
 800a862:	d901      	bls.n	800a868 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a864:	2303      	movs	r3, #3
 800a866:	e086      	b.n	800a976 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a868:	4b45      	ldr	r3, [pc, #276]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1f0      	bne.n	800a856 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a874:	4b42      	ldr	r3, [pc, #264]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a878:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	031b      	lsls	r3, r3, #12
 800a882:	493f      	ldr	r1, [pc, #252]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a884:	4313      	orrs	r3, r2
 800a886:	628b      	str	r3, [r1, #40]	; 0x28
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	3b01      	subs	r3, #1
 800a898:	025b      	lsls	r3, r3, #9
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	431a      	orrs	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	041b      	lsls	r3, r3, #16
 800a8a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8aa:	431a      	orrs	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	061b      	lsls	r3, r3, #24
 800a8b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8b8:	4931      	ldr	r1, [pc, #196]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a8be:	4b30      	ldr	r3, [pc, #192]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	492d      	ldr	r1, [pc, #180]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a8d0:	4b2b      	ldr	r3, [pc, #172]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d4:	f023 0220 	bic.w	r2, r3, #32
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	4928      	ldr	r1, [pc, #160]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a8e2:	4b27      	ldr	r3, [pc, #156]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e6:	4a26      	ldr	r2, [pc, #152]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a8e8:	f023 0310 	bic.w	r3, r3, #16
 800a8ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a8ee:	4b24      	ldr	r3, [pc, #144]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a8f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8f2:	4b24      	ldr	r3, [pc, #144]	; (800a984 <RCCEx_PLL2_Config+0x160>)
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	69d2      	ldr	r2, [r2, #28]
 800a8fa:	00d2      	lsls	r2, r2, #3
 800a8fc:	4920      	ldr	r1, [pc, #128]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a902:	4b1f      	ldr	r3, [pc, #124]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a906:	4a1e      	ldr	r2, [pc, #120]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a908:	f043 0310 	orr.w	r3, r3, #16
 800a90c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d106      	bne.n	800a922 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a914:	4b1a      	ldr	r3, [pc, #104]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a918:	4a19      	ldr	r2, [pc, #100]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a91a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a91e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a920:	e00f      	b.n	800a942 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d106      	bne.n	800a936 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a928:	4b15      	ldr	r3, [pc, #84]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92c:	4a14      	ldr	r2, [pc, #80]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a92e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a932:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a934:	e005      	b.n	800a942 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a936:	4b12      	ldr	r3, [pc, #72]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93a:	4a11      	ldr	r2, [pc, #68]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a93c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a940:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a942:	4b0f      	ldr	r3, [pc, #60]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a0e      	ldr	r2, [pc, #56]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a948:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a94c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a94e:	f7f8 f9b3 	bl	8002cb8 <HAL_GetTick>
 800a952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a954:	e008      	b.n	800a968 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a956:	f7f8 f9af 	bl	8002cb8 <HAL_GetTick>
 800a95a:	4602      	mov	r2, r0
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	2b02      	cmp	r3, #2
 800a962:	d901      	bls.n	800a968 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e006      	b.n	800a976 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a968:	4b05      	ldr	r3, [pc, #20]	; (800a980 <RCCEx_PLL2_Config+0x15c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a970:	2b00      	cmp	r3, #0
 800a972:	d0f0      	beq.n	800a956 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a974:	7bfb      	ldrb	r3, [r7, #15]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	58024400 	.word	0x58024400
 800a984:	ffff0007 	.word	0xffff0007

0800a988 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a996:	4b53      	ldr	r3, [pc, #332]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800a998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99a:	f003 0303 	and.w	r3, r3, #3
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d101      	bne.n	800a9a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e099      	b.n	800aada <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a9a6:	4b4f      	ldr	r3, [pc, #316]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a4e      	ldr	r2, [pc, #312]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800a9ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9b2:	f7f8 f981 	bl	8002cb8 <HAL_GetTick>
 800a9b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a9b8:	e008      	b.n	800a9cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a9ba:	f7f8 f97d 	bl	8002cb8 <HAL_GetTick>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d901      	bls.n	800a9cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	e086      	b.n	800aada <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a9cc:	4b45      	ldr	r3, [pc, #276]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1f0      	bne.n	800a9ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a9d8:	4b42      	ldr	r3, [pc, #264]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800a9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	051b      	lsls	r3, r3, #20
 800a9e6:	493f      	ldr	r1, [pc, #252]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	628b      	str	r3, [r1, #40]	; 0x28
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	025b      	lsls	r3, r3, #9
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	431a      	orrs	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	3b01      	subs	r3, #1
 800aa08:	041b      	lsls	r3, r3, #16
 800aa0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa0e:	431a      	orrs	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	3b01      	subs	r3, #1
 800aa16:	061b      	lsls	r3, r3, #24
 800aa18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa1c:	4931      	ldr	r1, [pc, #196]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aa22:	4b30      	ldr	r3, [pc, #192]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	492d      	ldr	r1, [pc, #180]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa30:	4313      	orrs	r3, r2
 800aa32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aa34:	4b2b      	ldr	r3, [pc, #172]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	4928      	ldr	r1, [pc, #160]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aa46:	4b27      	ldr	r3, [pc, #156]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4a:	4a26      	ldr	r2, [pc, #152]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aa52:	4b24      	ldr	r3, [pc, #144]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa56:	4b24      	ldr	r3, [pc, #144]	; (800aae8 <RCCEx_PLL3_Config+0x160>)
 800aa58:	4013      	ands	r3, r2
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	69d2      	ldr	r2, [r2, #28]
 800aa5e:	00d2      	lsls	r2, r2, #3
 800aa60:	4920      	ldr	r1, [pc, #128]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa62:	4313      	orrs	r3, r2
 800aa64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aa66:	4b1f      	ldr	r3, [pc, #124]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6a:	4a1e      	ldr	r2, [pc, #120]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d106      	bne.n	800aa86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aa78:	4b1a      	ldr	r3, [pc, #104]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7c:	4a19      	ldr	r2, [pc, #100]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aa82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa84:	e00f      	b.n	800aaa6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d106      	bne.n	800aa9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aa8c:	4b15      	ldr	r3, [pc, #84]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa90:	4a14      	ldr	r2, [pc, #80]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa98:	e005      	b.n	800aaa6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aa9a:	4b12      	ldr	r3, [pc, #72]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aa9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9e:	4a11      	ldr	r2, [pc, #68]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aaa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aaa4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aaa6:	4b0f      	ldr	r3, [pc, #60]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a0e      	ldr	r2, [pc, #56]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aaac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aab2:	f7f8 f901 	bl	8002cb8 <HAL_GetTick>
 800aab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aab8:	e008      	b.n	800aacc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800aaba:	f7f8 f8fd 	bl	8002cb8 <HAL_GetTick>
 800aabe:	4602      	mov	r2, r0
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d901      	bls.n	800aacc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e006      	b.n	800aada <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aacc:	4b05      	ldr	r3, [pc, #20]	; (800aae4 <RCCEx_PLL3_Config+0x15c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d0f0      	beq.n	800aaba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	58024400 	.word	0x58024400
 800aae8:	ffff0007 	.word	0xffff0007

0800aaec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b08a      	sub	sp, #40	; 0x28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e07c      	b.n	800abf8 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10c      	bne.n	800ab24 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d102      	bne.n	800ab1e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7f6 fff0 	bl	8001b04 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2203      	movs	r2, #3
 800ab28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f867 	bl	800ac00 <HAL_SD_InitCard>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e05d      	b.n	800abf8 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ab3c:	f107 0308 	add.w	r3, r7, #8
 800ab40:	4619      	mov	r1, r3
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fdb6 	bl	800b6b4 <HAL_SD_GetCardStatus>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e052      	b.n	800abf8 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ab52:	7e3b      	ldrb	r3, [r7, #24]
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ab58:	7e7b      	ldrb	r3, [r7, #25]
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d10a      	bne.n	800ab7c <HAL_SD_Init+0x90>
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d102      	bne.n	800ab72 <HAL_SD_Init+0x86>
 800ab6c:	6a3b      	ldr	r3, [r7, #32]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d004      	beq.n	800ab7c <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab78:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab7a:	e00b      	b.n	800ab94 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d104      	bne.n	800ab8e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab8a:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab8c:	e002      	b.n	800ab94 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	4619      	mov	r1, r3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fe6c 	bl	800b878 <HAL_SD_ConfigWideBusOperation>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e026      	b.n	800abf8 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800abaa:	f7f8 f885 	bl	8002cb8 <HAL_GetTick>
 800abae:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800abb0:	e011      	b.n	800abd6 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800abb2:	f7f8 f881 	bl	8002cb8 <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc0:	d109      	bne.n	800abd6 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800abc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800abd2:	2303      	movs	r3, #3
 800abd4:	e010      	b.n	800abf8 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fef8 	bl	800b9cc <HAL_SD_GetCardState>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b04      	cmp	r3, #4
 800abe0:	d1e7      	bne.n	800abb2 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3728      	adds	r7, #40	; 0x28
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac00:	b5b0      	push	{r4, r5, r7, lr}
 800ac02:	b08e      	sub	sp, #56	; 0x38
 800ac04:	af04      	add	r7, sp, #16
 800ac06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ac10:	2300      	movs	r3, #0
 800ac12:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ac14:	2300      	movs	r3, #0
 800ac16:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ac18:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ac1c:	f7fe ff90 	bl	8009b40 <HAL_RCCEx_GetPeriphCLKFreq>
 800ac20:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800ac22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac24:	0a1b      	lsrs	r3, r3, #8
 800ac26:	4a40      	ldr	r2, [pc, #256]	; (800ad28 <HAL_SD_InitCard+0x128>)
 800ac28:	fba2 2303 	umull	r2, r3, r2, r3
 800ac2c:	091b      	lsrs	r3, r3, #4
 800ac2e:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d107      	bne.n	800ac48 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f042 0210 	orr.w	r2, r2, #16
 800ac46:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681d      	ldr	r5, [r3, #0]
 800ac4c:	466c      	mov	r4, sp
 800ac4e:	f107 0314 	add.w	r3, r7, #20
 800ac52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac5a:	f107 0308 	add.w	r3, r7, #8
 800ac5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac60:	4628      	mov	r0, r5
 800ac62:	f003 fea3 	bl	800e9ac <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f003 fee6 	bl	800ea3c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	005b      	lsls	r3, r3, #1
 800ac74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac7a:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d008      	beq.n	800ac94 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800ac82:	4a2a      	ldr	r2, [pc, #168]	; (800ad2c <HAL_SD_InitCard+0x12c>)
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7f8 f81f 	bl	8002cd0 <HAL_Delay>
 800ac92:	e002      	b.n	800ac9a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800ac94:	2002      	movs	r0, #2
 800ac96:	f7f8 f81b 	bl	8002cd0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 ff74 	bl	800bb88 <SD_PowerON>
 800aca0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aca2:	6a3b      	ldr	r3, [r7, #32]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acb4:	6a3b      	ldr	r3, [r7, #32]
 800acb6:	431a      	orrs	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e02e      	b.n	800ad1e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fea3 	bl	800ba0c <SD_InitCard>
 800acc6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00b      	beq.n	800ace6 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acda:	6a3b      	ldr	r3, [r7, #32]
 800acdc:	431a      	orrs	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e01b      	b.n	800ad1e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800acee:	4618      	mov	r0, r3
 800acf0:	f003 ff3a 	bl	800eb68 <SDMMC_CmdBlockLength>
 800acf4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acf6:	6a3b      	ldr	r3, [r7, #32]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00f      	beq.n	800ad1c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a0b      	ldr	r2, [pc, #44]	; (800ad30 <HAL_SD_InitCard+0x130>)
 800ad02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad08:	6a3b      	ldr	r3, [r7, #32]
 800ad0a:	431a      	orrs	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e000      	b.n	800ad1e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3728      	adds	r7, #40	; 0x28
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bdb0      	pop	{r4, r5, r7, pc}
 800ad26:	bf00      	nop
 800ad28:	014f8b59 	.word	0x014f8b59
 800ad2c:	00012110 	.word	0x00012110
 800ad30:	1fe00fff 	.word	0x1fe00fff

0800ad34 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08c      	sub	sp, #48	; 0x30
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d107      	bne.n	800ad5c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad50:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e08d      	b.n	800ae78 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	f040 8086 	bne.w	800ae76 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ad70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	441a      	add	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d907      	bls.n	800ad8e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e074      	b.n	800ae78 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2203      	movs	r2, #3
 800ad92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	025a      	lsls	r2, r3, #9
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d002      	beq.n	800adba <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800adb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb6:	025b      	lsls	r3, r3, #9
 800adb8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800adba:	f04f 33ff 	mov.w	r3, #4294967295
 800adbe:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	025b      	lsls	r3, r3, #9
 800adc4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800adc6:	2390      	movs	r3, #144	; 0x90
 800adc8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800adca:	2302      	movs	r3, #2
 800adcc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800adce:	2300      	movs	r3, #0
 800add0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800add2:	2300      	movs	r3, #0
 800add4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f107 0210 	add.w	r2, r7, #16
 800adde:	4611      	mov	r1, r2
 800ade0:	4618      	mov	r0, r3
 800ade2:	f003 fe95 	bl	800eb10 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68da      	ldr	r2, [r3, #12]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adf4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2201      	movs	r2, #1
 800ae04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d90a      	bls.n	800ae22 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2282      	movs	r2, #130	; 0x82
 800ae10:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f003 feeb 	bl	800ebf4 <SDMMC_CmdReadMultiBlock>
 800ae1e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ae20:	e009      	b.n	800ae36 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2281      	movs	r2, #129	; 0x81
 800ae26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f003 febd 	bl	800ebae <SDMMC_CmdReadSingleBlock>
 800ae34:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d012      	beq.n	800ae62 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a0f      	ldr	r2, [pc, #60]	; (800ae80 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800ae42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e00a      	b.n	800ae78 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ae70:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	e000      	b.n	800ae78 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ae76:	2302      	movs	r3, #2
  }
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3730      	adds	r7, #48	; 0x30
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	1fe00fff 	.word	0x1fe00fff

0800ae84 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08c      	sub	sp, #48	; 0x30
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d107      	bne.n	800aeac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e08d      	b.n	800afc8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	f040 8086 	bne.w	800afc6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	441a      	add	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d907      	bls.n	800aede <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e074      	b.n	800afc8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2203      	movs	r2, #3
 800aee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2200      	movs	r2, #0
 800aeec:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	025a      	lsls	r2, r3, #9
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af00:	2b01      	cmp	r3, #1
 800af02:	d002      	beq.n	800af0a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af06:	025b      	lsls	r3, r3, #9
 800af08:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af0a:	f04f 33ff 	mov.w	r3, #4294967295
 800af0e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	025b      	lsls	r3, r3, #9
 800af14:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800af16:	2390      	movs	r3, #144	; 0x90
 800af18:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800af1a:	2300      	movs	r3, #0
 800af1c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800af1e:	2300      	movs	r3, #0
 800af20:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800af22:	2300      	movs	r3, #0
 800af24:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f107 0210 	add.w	r2, r7, #16
 800af2e:	4611      	mov	r1, r2
 800af30:	4618      	mov	r0, r3
 800af32:	f003 fded 	bl	800eb10 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68da      	ldr	r2, [r3, #12]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af44:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2201      	movs	r2, #1
 800af54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d90a      	bls.n	800af72 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	22a0      	movs	r2, #160	; 0xa0
 800af60:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af68:	4618      	mov	r0, r3
 800af6a:	f003 fe89 	bl	800ec80 <SDMMC_CmdWriteMultiBlock>
 800af6e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800af70:	e009      	b.n	800af86 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2290      	movs	r2, #144	; 0x90
 800af76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af7e:	4618      	mov	r0, r3
 800af80:	f003 fe5b 	bl	800ec3a <SDMMC_CmdWriteSingleBlock>
 800af84:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800af86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d012      	beq.n	800afb2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a0f      	ldr	r2, [pc, #60]	; (800afd0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800af92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9a:	431a      	orrs	r2, r3
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e00a      	b.n	800afc8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800afc0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	e000      	b.n	800afc8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800afc6:	2302      	movs	r3, #2
  }
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3730      	adds	r7, #48	; 0x30
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	1fe00fff 	.word	0x1fe00fff

0800afd4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afec:	2b00      	cmp	r3, #0
 800afee:	d008      	beq.n	800b002 <HAL_SD_IRQHandler+0x2e>
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f003 0308 	and.w	r3, r3, #8
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f001 f92a 	bl	800c254 <SD_Read_IT>
 800b000:	e19a      	b.n	800b338 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 80ac 	beq.w	800b16a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b01a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	4b9d      	ldr	r3, [pc, #628]	; (800b29c <HAL_SD_IRQHandler+0x2c8>)
 800b028:	400b      	ands	r3, r1
 800b02a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b03a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68da      	ldr	r2, [r3, #12]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b04a:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f003 0308 	and.w	r3, r3, #8
 800b052:	2b00      	cmp	r3, #0
 800b054:	d038      	beq.n	800b0c8 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f003 0302 	and.w	r3, r3, #2
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d104      	bne.n	800b06a <HAL_SD_IRQHandler+0x96>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f003 0320 	and.w	r3, r3, #32
 800b066:	2b00      	cmp	r3, #0
 800b068:	d011      	beq.n	800b08e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4618      	mov	r0, r3
 800b070:	f003 fe2a 	bl	800ecc8 <SDMMC_CmdStopTransfer>
 800b074:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d008      	beq.n	800b08e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	431a      	orrs	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f959 	bl	800b340 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a83      	ldr	r2, [pc, #524]	; (800b2a0 <HAL_SD_IRQHandler+0x2cc>)
 800b094:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2201      	movs	r2, #1
 800b09a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f003 0301 	and.w	r3, r3, #1
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d104      	bne.n	800b0b8 <HAL_SD_IRQHandler+0xe4>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f003 0302 	and.w	r3, r3, #2
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d003      	beq.n	800b0c0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f005 fe13 	bl	8010ce4 <HAL_SD_RxCpltCallback>
 800b0be:	e13b      	b.n	800b338 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f005 fe05 	bl	8010cd0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b0c6:	e137      	b.n	800b338 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 8132 	beq.w	800b338 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f003 0302 	and.w	r3, r3, #2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d104      	bne.n	800b100 <HAL_SD_IRQHandler+0x12c>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f003 0320 	and.w	r3, r3, #32
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d011      	beq.n	800b124 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4618      	mov	r0, r3
 800b106:	f003 fddf 	bl	800ecc8 <SDMMC_CmdStopTransfer>
 800b10a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d008      	beq.n	800b124 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	431a      	orrs	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f90e 	bl	800b340 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f003 0310 	and.w	r3, r3, #16
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d104      	bne.n	800b146 <HAL_SD_IRQHandler+0x172>
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f003 0320 	and.w	r3, r3, #32
 800b142:	2b00      	cmp	r3, #0
 800b144:	d002      	beq.n	800b14c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f005 fdc2 	bl	8010cd0 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b00      	cmp	r3, #0
 800b154:	d105      	bne.n	800b162 <HAL_SD_IRQHandler+0x18e>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f003 0302 	and.w	r3, r3, #2
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f000 80eb 	beq.w	800b338 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f005 fdbe 	bl	8010ce4 <HAL_SD_RxCpltCallback>
}
 800b168:	e0e6      	b.n	800b338 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d008      	beq.n	800b18a <HAL_SD_IRQHandler+0x1b6>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f003 0308 	and.w	r3, r3, #8
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d003      	beq.n	800b18a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f001 f8ac 	bl	800c2e0 <SD_Write_IT>
 800b188:	e0d6      	b.n	800b338 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b190:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b194:	2b00      	cmp	r3, #0
 800b196:	f000 80a2 	beq.w	800b2de <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a0:	f003 0302 	and.w	r3, r3, #2
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d005      	beq.n	800b1b4 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ac:	f043 0202 	orr.w	r2, r3, #2
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ba:	f003 0308 	and.w	r3, r3, #8
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d005      	beq.n	800b1ce <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c6:	f043 0208 	orr.w	r2, r3, #8
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d4:	f003 0320 	and.w	r3, r3, #32
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d005      	beq.n	800b1e8 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e0:	f043 0220 	orr.w	r2, r3, #32
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ee:	f003 0310 	and.w	r3, r3, #16
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d005      	beq.n	800b202 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fa:	f043 0210 	orr.w	r2, r3, #16
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a26      	ldr	r2, [pc, #152]	; (800b2a0 <HAL_SD_IRQHandler+0x2cc>)
 800b208:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b218:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68da      	ldr	r2, [r3, #12]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b228:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b238:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68da      	ldr	r2, [r3, #12]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b248:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4618      	mov	r0, r3
 800b250:	f003 fd3a 	bl	800ecc8 <SDMMC_CmdStopTransfer>
 800b254:	4602      	mov	r2, r0
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25a:	431a      	orrs	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68da      	ldr	r2, [r3, #12]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b26e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b278:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f003 0308 	and.w	r3, r3, #8
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00f      	beq.n	800b2a4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f854 	bl	800b340 <HAL_SD_ErrorCallback>
}
 800b298:	e04e      	b.n	800b338 <HAL_SD_IRQHandler+0x364>
 800b29a:	bf00      	nop
 800b29c:	ffff3ec5 	.word	0xffff3ec5
 800b2a0:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d044      	beq.n	800b338 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d040      	beq.n	800b338 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b2c4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f832 	bl	800b340 <HAL_SD_ErrorCallback>
}
 800b2dc:	e02c      	b.n	800b338 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d025      	beq.n	800b338 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2fc:	f003 0304 	and.w	r3, r3, #4
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10c      	bne.n	800b31e <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d003      	beq.n	800b316 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f001 f84e 	bl	800c3b0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800b314:	e010      	b.n	800b338 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f001 f836 	bl	800c388 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800b31c:	e00c      	b.n	800b338 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f003 0320 	and.w	r3, r3, #32
 800b324:	2b00      	cmp	r3, #0
 800b326:	d003      	beq.n	800b330 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f001 f837 	bl	800c39c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800b32e:	e003      	b.n	800b338 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f001 f81f 	bl	800c374 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800b336:	e7ff      	b.n	800b338 <HAL_SD_IRQHandler+0x364>
 800b338:	bf00      	nop
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	4603      	mov	r3, r0
 800b35c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800b35e:	bf00      	nop
 800b360:	370c      	adds	r7, #12
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
	...

0800b36c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b37a:	0f9b      	lsrs	r3, r3, #30
 800b37c:	b2da      	uxtb	r2, r3
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b386:	0e9b      	lsrs	r3, r3, #26
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	f003 030f 	and.w	r3, r3, #15
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b398:	0e1b      	lsrs	r3, r3, #24
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	f003 0303 	and.w	r3, r3, #3
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3aa:	0c1b      	lsrs	r3, r3, #16
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3b6:	0a1b      	lsrs	r3, r3, #8
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3cc:	0d1b      	lsrs	r3, r3, #20
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3d8:	0c1b      	lsrs	r3, r3, #16
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	f003 030f 	and.w	r3, r3, #15
 800b3e0:	b2da      	uxtb	r2, r3
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3ea:	0bdb      	lsrs	r3, r3, #15
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	f003 0301 	and.w	r3, r3, #1
 800b3f2:	b2da      	uxtb	r2, r3
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3fc:	0b9b      	lsrs	r3, r3, #14
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	f003 0301 	and.w	r3, r3, #1
 800b404:	b2da      	uxtb	r2, r3
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b40e:	0b5b      	lsrs	r3, r3, #13
 800b410:	b2db      	uxtb	r3, r3
 800b412:	f003 0301 	and.w	r3, r3, #1
 800b416:	b2da      	uxtb	r2, r3
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b420:	0b1b      	lsrs	r3, r3, #12
 800b422:	b2db      	uxtb	r3, r3
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	b2da      	uxtb	r2, r3
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	2200      	movs	r2, #0
 800b432:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d163      	bne.n	800b504 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b440:	009a      	lsls	r2, r3, #2
 800b442:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b446:	4013      	ands	r3, r2
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b44c:	0f92      	lsrs	r2, r2, #30
 800b44e:	431a      	orrs	r2, r3
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b458:	0edb      	lsrs	r3, r3, #27
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	f003 0307 	and.w	r3, r3, #7
 800b460:	b2da      	uxtb	r2, r3
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b46a:	0e1b      	lsrs	r3, r3, #24
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	f003 0307 	and.w	r3, r3, #7
 800b472:	b2da      	uxtb	r2, r3
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b47c:	0d5b      	lsrs	r3, r3, #21
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	f003 0307 	and.w	r3, r3, #7
 800b484:	b2da      	uxtb	r2, r3
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b48e:	0c9b      	lsrs	r3, r3, #18
 800b490:	b2db      	uxtb	r3, r3
 800b492:	f003 0307 	and.w	r3, r3, #7
 800b496:	b2da      	uxtb	r2, r3
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4a0:	0bdb      	lsrs	r3, r3, #15
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	f003 0307 	and.w	r3, r3, #7
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	1c5a      	adds	r2, r3, #1
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	7e1b      	ldrb	r3, [r3, #24]
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	f003 0307 	and.w	r3, r3, #7
 800b4c2:	3302      	adds	r3, #2
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b4ce:	fb02 f203 	mul.w	r2, r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	7a1b      	ldrb	r3, [r3, #8]
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	f003 030f 	and.w	r3, r3, #15
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	409a      	lsls	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b4f0:	0a52      	lsrs	r2, r2, #9
 800b4f2:	fb02 f203 	mul.w	r2, r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b500:	659a      	str	r2, [r3, #88]	; 0x58
 800b502:	e031      	b.n	800b568 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d11d      	bne.n	800b548 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b510:	041b      	lsls	r3, r3, #16
 800b512:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b51a:	0c1b      	lsrs	r3, r3, #16
 800b51c:	431a      	orrs	r2, r3
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	3301      	adds	r3, #1
 800b528:	029a      	lsls	r2, r3, #10
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b53c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	659a      	str	r2, [r3, #88]	; 0x58
 800b546:	e00f      	b.n	800b568 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a58      	ldr	r2, [pc, #352]	; (800b6b0 <HAL_SD_GetCardCSD+0x344>)
 800b54e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b554:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	e09d      	b.n	800b6a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b56c:	0b9b      	lsrs	r3, r3, #14
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	f003 0301 	and.w	r3, r3, #1
 800b574:	b2da      	uxtb	r2, r3
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b57e:	09db      	lsrs	r3, r3, #7
 800b580:	b2db      	uxtb	r3, r3
 800b582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b586:	b2da      	uxtb	r2, r3
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b590:	b2db      	uxtb	r3, r3
 800b592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b596:	b2da      	uxtb	r2, r3
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5a0:	0fdb      	lsrs	r3, r3, #31
 800b5a2:	b2da      	uxtb	r2, r3
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5ac:	0f5b      	lsrs	r3, r3, #29
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	f003 0303 	and.w	r3, r3, #3
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5be:	0e9b      	lsrs	r3, r3, #26
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	f003 0307 	and.w	r3, r3, #7
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d0:	0d9b      	lsrs	r3, r3, #22
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	f003 030f 	and.w	r3, r3, #15
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5e2:	0d5b      	lsrs	r3, r3, #21
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	f003 0301 	and.w	r3, r3, #1
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5fe:	0c1b      	lsrs	r3, r3, #16
 800b600:	b2db      	uxtb	r3, r3
 800b602:	f003 0301 	and.w	r3, r3, #1
 800b606:	b2da      	uxtb	r2, r3
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b612:	0bdb      	lsrs	r3, r3, #15
 800b614:	b2db      	uxtb	r3, r3
 800b616:	f003 0301 	and.w	r3, r3, #1
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b626:	0b9b      	lsrs	r3, r3, #14
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	f003 0301 	and.w	r3, r3, #1
 800b62e:	b2da      	uxtb	r2, r3
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b63a:	0b5b      	lsrs	r3, r3, #13
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	f003 0301 	and.w	r3, r3, #1
 800b642:	b2da      	uxtb	r2, r3
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b64e:	0b1b      	lsrs	r3, r3, #12
 800b650:	b2db      	uxtb	r3, r3
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	b2da      	uxtb	r2, r3
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b662:	0a9b      	lsrs	r3, r3, #10
 800b664:	b2db      	uxtb	r3, r3
 800b666:	f003 0303 	and.w	r3, r3, #3
 800b66a:	b2da      	uxtb	r2, r3
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b676:	0a1b      	lsrs	r3, r3, #8
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	f003 0303 	and.w	r3, r3, #3
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b68a:	085b      	lsrs	r3, r3, #1
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b692:	b2da      	uxtb	r2, r3
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	1fe00fff 	.word	0x1fe00fff

0800b6b4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b094      	sub	sp, #80	; 0x50
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b6c4:	f107 0308 	add.w	r3, r7, #8
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 fb64 	bl	800bd98 <SD_SendSDStatus>
 800b6d0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d011      	beq.n	800b6fc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a4f      	ldr	r2, [pc, #316]	; (800b81c <HAL_SD_GetCardStatus+0x168>)
 800b6de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6e6:	431a      	orrs	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b6fa:	e070      	b.n	800b7de <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	099b      	lsrs	r3, r3, #6
 800b700:	b2db      	uxtb	r3, r3
 800b702:	f003 0303 	and.w	r3, r3, #3
 800b706:	b2da      	uxtb	r2, r3
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	095b      	lsrs	r3, r3, #5
 800b710:	b2db      	uxtb	r3, r3
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	b2da      	uxtb	r2, r3
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	0a1b      	lsrs	r3, r3, #8
 800b720:	b29b      	uxth	r3, r3
 800b722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b726:	b29a      	uxth	r2, r3
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	0e1b      	lsrs	r3, r3, #24
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	4313      	orrs	r3, r2
 800b730:	b29a      	uxth	r2, r3
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	061a      	lsls	r2, r3, #24
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	021b      	lsls	r3, r3, #8
 800b73e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b742:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	0a1b      	lsrs	r3, r3, #8
 800b748:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b74c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	0e1b      	lsrs	r3, r3, #24
 800b752:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	0a1b      	lsrs	r3, r3, #8
 800b764:	b2da      	uxtb	r2, r3
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	0d1b      	lsrs	r3, r3, #20
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	f003 030f 	and.w	r3, r3, #15
 800b774:	b2da      	uxtb	r2, r3
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	0c1b      	lsrs	r3, r3, #16
 800b77e:	b29b      	uxth	r3, r3
 800b780:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b784:	b29a      	uxth	r2, r3
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	b29b      	uxth	r3, r3
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	4313      	orrs	r3, r2
 800b790:	b29a      	uxth	r2, r3
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	0a9b      	lsrs	r3, r3, #10
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	0a1b      	lsrs	r3, r3, #8
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	f003 0303 	and.w	r3, r3, #3
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	091b      	lsrs	r3, r3, #4
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	f003 030f 	and.w	r3, r3, #15
 800b7c0:	b2da      	uxtb	r2, r3
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	f003 030f 	and.w	r3, r3, #15
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	0e1b      	lsrs	r3, r3, #24
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f003 f9be 	bl	800eb68 <SDMMC_CmdBlockLength>
 800b7ec:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00d      	beq.n	800b810 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a08      	ldr	r2, [pc, #32]	; (800b81c <HAL_SD_GetCardStatus+0x168>)
 800b7fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b800:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800b810:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b814:	4618      	mov	r0, r3
 800b816:	3750      	adds	r7, #80	; 0x50
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	1fe00fff 	.word	0x1fe00fff

0800b820 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b878:	b5b0      	push	{r4, r5, r7, lr}
 800b87a:	b08e      	sub	sp, #56	; 0x38
 800b87c:	af04      	add	r7, sp, #16
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2203      	movs	r2, #3
 800b88c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b894:	2b03      	cmp	r3, #3
 800b896:	d02e      	beq.n	800b8f6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b89e:	d106      	bne.n	800b8ae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	639a      	str	r2, [r3, #56]	; 0x38
 800b8ac:	e029      	b.n	800b902 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8b4:	d10a      	bne.n	800b8cc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fb66 	bl	800bf88 <SD_WideBus_Enable>
 800b8bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	639a      	str	r2, [r3, #56]	; 0x38
 800b8ca:	e01a      	b.n	800b902 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10a      	bne.n	800b8e8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fba3 	bl	800c01e <SD_WideBus_Disable>
 800b8d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8de:	6a3b      	ldr	r3, [r7, #32]
 800b8e0:	431a      	orrs	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	639a      	str	r2, [r3, #56]	; 0x38
 800b8e6:	e00c      	b.n	800b902 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	639a      	str	r2, [r3, #56]	; 0x38
 800b8f4:	e005      	b.n	800b902 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b906:	2b00      	cmp	r3, #0
 800b908:	d007      	beq.n	800b91a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a2e      	ldr	r2, [pc, #184]	; (800b9c8 <HAL_SD_ConfigWideBusOperation+0x150>)
 800b910:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b918:	e034      	b.n	800b984 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	695b      	ldr	r3, [r3, #20]
 800b934:	2b03      	cmp	r3, #3
 800b936:	d903      	bls.n	800b940 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	695b      	ldr	r3, [r3, #20]
 800b93c:	61bb      	str	r3, [r7, #24]
 800b93e:	e012      	b.n	800b966 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b948:	d103      	bne.n	800b952 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	695b      	ldr	r3, [r3, #20]
 800b94e:	61bb      	str	r3, [r7, #24]
 800b950:	e009      	b.n	800b966 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b95a:	d102      	bne.n	800b962 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800b95c:	2302      	movs	r3, #2
 800b95e:	61bb      	str	r3, [r7, #24]
 800b960:	e001      	b.n	800b966 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800b962:	2304      	movs	r3, #4
 800b964:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681d      	ldr	r5, [r3, #0]
 800b96a:	466c      	mov	r4, sp
 800b96c:	f107 0314 	add.w	r3, r7, #20
 800b970:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b978:	f107 0308 	add.w	r3, r7, #8
 800b97c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b97e:	4628      	mov	r0, r5
 800b980:	f003 f814 	bl	800e9ac <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b98c:	4618      	mov	r0, r3
 800b98e:	f003 f8eb 	bl	800eb68 <SDMMC_CmdBlockLength>
 800b992:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b994:	6a3b      	ldr	r3, [r7, #32]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00c      	beq.n	800b9b4 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a0a      	ldr	r2, [pc, #40]	; (800b9c8 <HAL_SD_ConfigWideBusOperation+0x150>)
 800b9a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9a6:	6a3b      	ldr	r3, [r7, #32]
 800b9a8:	431a      	orrs	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3728      	adds	r7, #40	; 0x28
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bdb0      	pop	{r4, r5, r7, pc}
 800b9c8:	1fe00fff 	.word	0x1fe00fff

0800b9cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b9d8:	f107 030c 	add.w	r3, r7, #12
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 faaa 	bl	800bf38 <SD_SendStatus>
 800b9e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d005      	beq.n	800b9f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	431a      	orrs	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	0a5b      	lsrs	r3, r3, #9
 800b9fc:	f003 030f 	and.w	r3, r3, #15
 800ba00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ba02:	693b      	ldr	r3, [r7, #16]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3718      	adds	r7, #24
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ba0c:	b590      	push	{r4, r7, lr}
 800ba0e:	b091      	sub	sp, #68	; 0x44
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ba14:	2301      	movs	r3, #1
 800ba16:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f003 f81e 	bl	800ea5e <SDMMC_GetPowerState>
 800ba22:	4603      	mov	r3, r0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d102      	bne.n	800ba2e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ba28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ba2c:	e0a8      	b.n	800bb80 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba32:	2b03      	cmp	r3, #3
 800ba34:	d02e      	beq.n	800ba94 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f003 fa6a 	bl	800ef14 <SDMMC_CmdSendCID>
 800ba40:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <SD_InitCard+0x40>
    {
      return errorstate;
 800ba48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba4a:	e099      	b.n	800bb80 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2100      	movs	r1, #0
 800ba52:	4618      	mov	r0, r3
 800ba54:	f003 f849 	bl	800eaea <SDMMC_GetResponse>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2104      	movs	r1, #4
 800ba64:	4618      	mov	r0, r3
 800ba66:	f003 f840 	bl	800eaea <SDMMC_GetResponse>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2108      	movs	r1, #8
 800ba76:	4618      	mov	r0, r3
 800ba78:	f003 f837 	bl	800eaea <SDMMC_GetResponse>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	210c      	movs	r1, #12
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f003 f82e 	bl	800eaea <SDMMC_GetResponse>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba98:	2b03      	cmp	r3, #3
 800ba9a:	d00d      	beq.n	800bab8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f107 020e 	add.w	r2, r7, #14
 800baa4:	4611      	mov	r1, r2
 800baa6:	4618      	mov	r0, r3
 800baa8:	f003 fa73 	bl	800ef92 <SDMMC_CmdSetRelAdd>
 800baac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800baae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <SD_InitCard+0xac>
    {
      return errorstate;
 800bab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab6:	e063      	b.n	800bb80 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800babc:	2b03      	cmp	r3, #3
 800babe:	d036      	beq.n	800bb2e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bac0:	89fb      	ldrh	r3, [r7, #14]
 800bac2:	461a      	mov	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bad0:	041b      	lsls	r3, r3, #16
 800bad2:	4619      	mov	r1, r3
 800bad4:	4610      	mov	r0, r2
 800bad6:	f003 fa3c 	bl	800ef52 <SDMMC_CmdSendCSD>
 800bada:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800badc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d001      	beq.n	800bae6 <SD_InitCard+0xda>
    {
      return errorstate;
 800bae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bae4:	e04c      	b.n	800bb80 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2100      	movs	r1, #0
 800baec:	4618      	mov	r0, r3
 800baee:	f002 fffc 	bl	800eaea <SDMMC_GetResponse>
 800baf2:	4602      	mov	r2, r0
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2104      	movs	r1, #4
 800bafe:	4618      	mov	r0, r3
 800bb00:	f002 fff3 	bl	800eaea <SDMMC_GetResponse>
 800bb04:	4602      	mov	r2, r0
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2108      	movs	r1, #8
 800bb10:	4618      	mov	r0, r3
 800bb12:	f002 ffea 	bl	800eaea <SDMMC_GetResponse>
 800bb16:	4602      	mov	r2, r0
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	210c      	movs	r1, #12
 800bb22:	4618      	mov	r0, r3
 800bb24:	f002 ffe1 	bl	800eaea <SDMMC_GetResponse>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2104      	movs	r1, #4
 800bb34:	4618      	mov	r0, r3
 800bb36:	f002 ffd8 	bl	800eaea <SDMMC_GetResponse>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	0d1a      	lsrs	r2, r3, #20
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bb42:	f107 0310 	add.w	r3, r7, #16
 800bb46:	4619      	mov	r1, r3
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7ff fc0f 	bl	800b36c <HAL_SD_GetCardCSD>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb58:	e012      	b.n	800bb80 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6819      	ldr	r1, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb62:	041b      	lsls	r3, r3, #16
 800bb64:	f04f 0400 	mov.w	r4, #0
 800bb68:	461a      	mov	r2, r3
 800bb6a:	4623      	mov	r3, r4
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	f003 f8e7 	bl	800ed40 <SDMMC_CmdSelDesel>
 800bb72:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <SD_InitCard+0x172>
  {
    return errorstate;
 800bb7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb7c:	e000      	b.n	800bb80 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3744      	adds	r7, #68	; 0x44
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd90      	pop	{r4, r7, pc}

0800bb88 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb90:	2300      	movs	r3, #0
 800bb92:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	61fb      	str	r3, [r7, #28]
 800bb98:	2300      	movs	r3, #0
 800bb9a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800bb9c:	f7f7 f88c 	bl	8002cb8 <HAL_GetTick>
 800bba0:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f003 f8ee 	bl	800ed88 <SDMMC_CmdGoIdleState>
 800bbac:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <SD_PowerON+0x30>
  {
    return errorstate;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	e0e9      	b.n	800bd8c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f003 f901 	bl	800edc4 <SDMMC_CmdOperCond>
 800bbc2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00d      	beq.n	800bbe6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f003 f8d7 	bl	800ed88 <SDMMC_CmdGoIdleState>
 800bbda:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d004      	beq.n	800bbec <SD_PowerON+0x64>
    {
      return errorstate;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	e0d2      	b.n	800bd8c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d137      	bne.n	800bc64 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f003 f902 	bl	800ee04 <SDMMC_CmdAppCommand>
 800bc00:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d02d      	beq.n	800bc64 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bc0c:	e0be      	b.n	800bd8c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2100      	movs	r1, #0
 800bc14:	4618      	mov	r0, r3
 800bc16:	f003 f8f5 	bl	800ee04 <SDMMC_CmdAppCommand>
 800bc1a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <SD_PowerON+0x9e>
    {
      return errorstate;
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	e0b2      	b.n	800bd8c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	495a      	ldr	r1, [pc, #360]	; (800bd94 <SD_PowerON+0x20c>)
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f003 f90c 	bl	800ee4a <SDMMC_CmdAppOperCommand>
 800bc32:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d002      	beq.n	800bc40 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bc3e:	e0a5      	b.n	800bd8c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2100      	movs	r1, #0
 800bc46:	4618      	mov	r0, r3
 800bc48:	f002 ff4f 	bl	800eaea <SDMMC_GetResponse>
 800bc4c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	0fdb      	lsrs	r3, r3, #31
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d101      	bne.n	800bc5a <SD_PowerON+0xd2>
 800bc56:	2301      	movs	r3, #1
 800bc58:	e000      	b.n	800bc5c <SD_PowerON+0xd4>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	61bb      	str	r3, [r7, #24]

    count++;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3301      	adds	r3, #1
 800bc62:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d802      	bhi.n	800bc74 <SD_PowerON+0xec>
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d0cc      	beq.n	800bc0e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d902      	bls.n	800bc84 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bc7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc82:	e083      	b.n	800bd8c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d07d      	beq.n	800bd8a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2201      	movs	r2, #1
 800bc92:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	699b      	ldr	r3, [r3, #24]
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d176      	bne.n	800bd8a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d071      	beq.n	800bd8a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcac:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f042 0208 	orr.w	r2, r2, #8
 800bcbc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f003 f9cc 	bl	800f060 <SDMMC_CmdVoltageSwitch>
 800bcc8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d00c      	beq.n	800bcea <SD_PowerON+0x162>
        {
          return errorstate;
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	e05b      	b.n	800bd8c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bcd4:	f7f6 fff0 	bl	8002cb8 <HAL_GetTick>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce2:	d102      	bne.n	800bcea <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800bce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bce8:	e050      	b.n	800bd8c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bcf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bcf8:	d1ec      	bne.n	800bcd4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800bd02:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd12:	d002      	beq.n	800bd1a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800bd14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bd18:	e038      	b.n	800bd8c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800bd1a:	2001      	movs	r0, #1
 800bd1c:	f7ff fb1a 	bl	800b354 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f042 0204 	orr.w	r2, r2, #4
 800bd2e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800bd30:	e00a      	b.n	800bd48 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bd32:	f7f6 ffc1 	bl	8002cb8 <HAL_GetTick>
 800bd36:	4602      	mov	r2, r0
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd40:	d102      	bne.n	800bd48 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800bd42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd46:	e021      	b.n	800bd8c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd56:	d1ec      	bne.n	800bd32 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800bd60:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd70:	d102      	bne.n	800bd78 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bd72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd76:	e009      	b.n	800bd8c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2213      	movs	r2, #19
 800bd7e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f04f 32ff 	mov.w	r2, #4294967295
 800bd88:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3720      	adds	r7, #32
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	c1100000 	.word	0xc1100000

0800bd98 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b08c      	sub	sp, #48	; 0x30
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bda2:	f7f6 ff89 	bl	8002cb8 <HAL_GetTick>
 800bda6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f002 fe99 	bl	800eaea <SDMMC_GetResponse>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdc2:	d102      	bne.n	800bdca <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bdc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bdc8:	e0b0      	b.n	800bf2c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2140      	movs	r1, #64	; 0x40
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f002 fec9 	bl	800eb68 <SDMMC_CmdBlockLength>
 800bdd6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d005      	beq.n	800bdea <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	e0a0      	b.n	800bf2c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdf2:	041b      	lsls	r3, r3, #16
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	f003 f804 	bl	800ee04 <SDMMC_CmdAppCommand>
 800bdfc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdfe:	6a3b      	ldr	r3, [r7, #32]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d005      	beq.n	800be10 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800be0c:	6a3b      	ldr	r3, [r7, #32]
 800be0e:	e08d      	b.n	800bf2c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800be10:	f04f 33ff 	mov.w	r3, #4294967295
 800be14:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800be16:	2340      	movs	r3, #64	; 0x40
 800be18:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800be1a:	2360      	movs	r3, #96	; 0x60
 800be1c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800be1e:	2302      	movs	r3, #2
 800be20:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800be22:	2300      	movs	r3, #0
 800be24:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800be26:	2301      	movs	r3, #1
 800be28:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f107 0208 	add.w	r2, r7, #8
 800be32:	4611      	mov	r1, r2
 800be34:	4618      	mov	r0, r3
 800be36:	f002 fe6b 	bl	800eb10 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4618      	mov	r0, r3
 800be40:	f003 f8ec 	bl	800f01c <SDMMC_CmdStatusRegister>
 800be44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d02b      	beq.n	800bea4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800be54:	6a3b      	ldr	r3, [r7, #32]
 800be56:	e069      	b.n	800bf2c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be62:	2b00      	cmp	r3, #0
 800be64:	d013      	beq.n	800be8e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800be66:	2300      	movs	r3, #0
 800be68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be6a:	e00d      	b.n	800be88 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4618      	mov	r0, r3
 800be72:	f002 fdc5 	bl	800ea00 <SDMMC_ReadFIFO>
 800be76:	4602      	mov	r2, r0
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	601a      	str	r2, [r3, #0]
        pData++;
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	3304      	adds	r3, #4
 800be80:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800be82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be84:	3301      	adds	r3, #1
 800be86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8a:	2b07      	cmp	r3, #7
 800be8c:	d9ee      	bls.n	800be6c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800be8e:	f7f6 ff13 	bl	8002cb8 <HAL_GetTick>
 800be92:	4602      	mov	r2, r0
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9c:	d102      	bne.n	800bea4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800be9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bea2:	e043      	b.n	800bf2c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beaa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d0d2      	beq.n	800be58 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beb8:	f003 0308 	and.w	r3, r3, #8
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d001      	beq.n	800bec4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bec0:	2308      	movs	r3, #8
 800bec2:	e033      	b.n	800bf2c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beca:	f003 0302 	and.w	r3, r3, #2
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bed2:	2302      	movs	r3, #2
 800bed4:	e02a      	b.n	800bf2c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bedc:	f003 0320 	and.w	r3, r3, #32
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d017      	beq.n	800bf14 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800bee4:	2320      	movs	r3, #32
 800bee6:	e021      	b.n	800bf2c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4618      	mov	r0, r3
 800beee:	f002 fd87 	bl	800ea00 <SDMMC_ReadFIFO>
 800bef2:	4602      	mov	r2, r0
 800bef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef6:	601a      	str	r2, [r3, #0]
    pData++;
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	3304      	adds	r3, #4
 800befc:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800befe:	f7f6 fedb 	bl	8002cb8 <HAL_GetTick>
 800bf02:	4602      	mov	r2, r0
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0c:	d102      	bne.n	800bf14 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bf0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf12:	e00b      	b.n	800bf2c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1e2      	bne.n	800bee8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a03      	ldr	r2, [pc, #12]	; (800bf34 <SD_SendSDStatus+0x19c>)
 800bf28:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3730      	adds	r7, #48	; 0x30
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	18000f3a 	.word	0x18000f3a

0800bf38 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d102      	bne.n	800bf4e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bf48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bf4c:	e018      	b.n	800bf80 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf56:	041b      	lsls	r3, r3, #16
 800bf58:	4619      	mov	r1, r3
 800bf5a:	4610      	mov	r0, r2
 800bf5c:	f003 f83b 	bl	800efd6 <SDMMC_CmdSendStatus>
 800bf60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <SD_SendStatus+0x34>
  {
    return errorstate;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	e009      	b.n	800bf80 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2100      	movs	r1, #0
 800bf72:	4618      	mov	r0, r3
 800bf74:	f002 fdb9 	bl	800eaea <SDMMC_GetResponse>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b086      	sub	sp, #24
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bf90:	2300      	movs	r3, #0
 800bf92:	60fb      	str	r3, [r7, #12]
 800bf94:	2300      	movs	r3, #0
 800bf96:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f002 fda3 	bl	800eaea <SDMMC_GetResponse>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfae:	d102      	bne.n	800bfb6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bfb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bfb4:	e02f      	b.n	800c016 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bfb6:	f107 030c 	add.w	r3, r7, #12
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 f879 	bl	800c0b4 <SD_FindSCR>
 800bfc2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d001      	beq.n	800bfce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	e023      	b.n	800c016 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d01c      	beq.n	800c012 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfe0:	041b      	lsls	r3, r3, #16
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	4610      	mov	r0, r2
 800bfe6:	f002 ff0d 	bl	800ee04 <SDMMC_CmdAppCommand>
 800bfea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	e00f      	b.n	800c016 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2102      	movs	r1, #2
 800bffc:	4618      	mov	r0, r3
 800bffe:	f002 ff44 	bl	800ee8a <SDMMC_CmdBusWidth>
 800c002:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d001      	beq.n	800c00e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	e003      	b.n	800c016 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c00e:	2300      	movs	r3, #0
 800c010:	e001      	b.n	800c016 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c012:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c016:	4618      	mov	r0, r3
 800c018:	3718      	adds	r7, #24
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b086      	sub	sp, #24
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800c026:	2300      	movs	r3, #0
 800c028:	60fb      	str	r3, [r7, #12]
 800c02a:	2300      	movs	r3, #0
 800c02c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2100      	movs	r1, #0
 800c034:	4618      	mov	r0, r3
 800c036:	f002 fd58 	bl	800eaea <SDMMC_GetResponse>
 800c03a:	4603      	mov	r3, r0
 800c03c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c044:	d102      	bne.n	800c04c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c046:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c04a:	e02f      	b.n	800c0ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c04c:	f107 030c 	add.w	r3, r7, #12
 800c050:	4619      	mov	r1, r3
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f82e 	bl	800c0b4 <SD_FindSCR>
 800c058:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	e023      	b.n	800c0ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d01c      	beq.n	800c0a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c076:	041b      	lsls	r3, r3, #16
 800c078:	4619      	mov	r1, r3
 800c07a:	4610      	mov	r0, r2
 800c07c:	f002 fec2 	bl	800ee04 <SDMMC_CmdAppCommand>
 800c080:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d001      	beq.n	800c08c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	e00f      	b.n	800c0ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2100      	movs	r1, #0
 800c092:	4618      	mov	r0, r3
 800c094:	f002 fef9 	bl	800ee8a <SDMMC_CmdBusWidth>
 800c098:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d001      	beq.n	800c0a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	e003      	b.n	800c0ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	e001      	b.n	800c0ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c0a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3718      	adds	r7, #24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b08e      	sub	sp, #56	; 0x38
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c0be:	f7f6 fdfb 	bl	8002cb8 <HAL_GetTick>
 800c0c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	60bb      	str	r3, [r7, #8]
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2108      	movs	r1, #8
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f002 fd44 	bl	800eb68 <SDMMC_CmdBlockLength>
 800c0e0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d001      	beq.n	800c0ec <SD_FindSCR+0x38>
  {
    return errorstate;
 800c0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ea:	e0ad      	b.n	800c248 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0f4:	041b      	lsls	r3, r3, #16
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	f002 fe83 	bl	800ee04 <SDMMC_CmdAppCommand>
 800c0fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <SD_FindSCR+0x56>
  {
    return errorstate;
 800c106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c108:	e09e      	b.n	800c248 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c10a:	f04f 33ff 	mov.w	r3, #4294967295
 800c10e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c110:	2308      	movs	r3, #8
 800c112:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c114:	2330      	movs	r3, #48	; 0x30
 800c116:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c118:	2302      	movs	r3, #2
 800c11a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c11c:	2300      	movs	r3, #0
 800c11e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c120:	2301      	movs	r3, #1
 800c122:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f107 0210 	add.w	r2, r7, #16
 800c12c:	4611      	mov	r1, r2
 800c12e:	4618      	mov	r0, r3
 800c130:	f002 fcee 	bl	800eb10 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4618      	mov	r0, r3
 800c13a:	f002 fec9 	bl	800eed0 <SDMMC_CmdSendSCR>
 800c13e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	2b00      	cmp	r3, #0
 800c144:	d027      	beq.n	800c196 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800c146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c148:	e07e      	b.n	800c248 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d113      	bne.n	800c180 <SD_FindSCR+0xcc>
 800c158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d110      	bne.n	800c180 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4618      	mov	r0, r3
 800c164:	f002 fc4c 	bl	800ea00 <SDMMC_ReadFIFO>
 800c168:	4603      	mov	r3, r0
 800c16a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4618      	mov	r0, r3
 800c172:	f002 fc45 	bl	800ea00 <SDMMC_ReadFIFO>
 800c176:	4603      	mov	r3, r0
 800c178:	60fb      	str	r3, [r7, #12]
      index++;
 800c17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c17c:	3301      	adds	r3, #1
 800c17e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c180:	f7f6 fd9a 	bl	8002cb8 <HAL_GetTick>
 800c184:	4602      	mov	r2, r0
 800c186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18e:	d102      	bne.n	800c196 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c190:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c194:	e058      	b.n	800c248 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c19c:	f240 532a 	movw	r3, #1322	; 0x52a
 800c1a0:	4013      	ands	r3, r2
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d0d1      	beq.n	800c14a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ac:	f003 0308 	and.w	r3, r3, #8
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d005      	beq.n	800c1c0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2208      	movs	r2, #8
 800c1ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c1bc:	2308      	movs	r3, #8
 800c1be:	e043      	b.n	800c248 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c6:	f003 0302 	and.w	r3, r3, #2
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d005      	beq.n	800c1da <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c1d6:	2302      	movs	r3, #2
 800c1d8:	e036      	b.n	800c248 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e0:	f003 0320 	and.w	r3, r3, #32
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d005      	beq.n	800c1f4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2220      	movs	r2, #32
 800c1ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c1f0:	2320      	movs	r3, #32
 800c1f2:	e029      	b.n	800c248 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a15      	ldr	r2, [pc, #84]	; (800c250 <SD_FindSCR+0x19c>)
 800c1fa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	061a      	lsls	r2, r3, #24
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	021b      	lsls	r3, r3, #8
 800c204:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c208:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	0a1b      	lsrs	r3, r3, #8
 800c20e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c212:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	0e1b      	lsrs	r3, r3, #24
 800c218:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	601a      	str	r2, [r3, #0]
    scr++;
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	3304      	adds	r3, #4
 800c222:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	061a      	lsls	r2, r3, #24
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	021b      	lsls	r3, r3, #8
 800c22c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c230:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	0a1b      	lsrs	r3, r3, #8
 800c236:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c23a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	0e1b      	lsrs	r3, r3, #24
 800c240:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c244:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3738      	adds	r7, #56	; 0x38
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	18000f3a 	.word	0x18000f3a

0800c254 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b086      	sub	sp, #24
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c260:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c266:	2b1f      	cmp	r3, #31
 800c268:	d936      	bls.n	800c2d8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c26a:	2300      	movs	r3, #0
 800c26c:	617b      	str	r3, [r7, #20]
 800c26e:	e027      	b.n	800c2c0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4618      	mov	r0, r3
 800c276:	f002 fbc3 	bl	800ea00 <SDMMC_ReadFIFO>
 800c27a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	b2da      	uxtb	r2, r3
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	3301      	adds	r3, #1
 800c288:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	0a1b      	lsrs	r3, r3, #8
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	3301      	adds	r3, #1
 800c298:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	0c1b      	lsrs	r3, r3, #16
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	0e1b      	lsrs	r3, r3, #24
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	617b      	str	r3, [r7, #20]
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	2b07      	cmp	r3, #7
 800c2c4:	d9d4      	bls.n	800c270 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d0:	f1a3 0220 	sub.w	r2, r3, #32
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c2d8:	bf00      	nop
 800c2da:	3718      	adds	r7, #24
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b086      	sub	sp, #24
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6a1b      	ldr	r3, [r3, #32]
 800c2ec:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f2:	2b1f      	cmp	r3, #31
 800c2f4:	d93a      	bls.n	800c36c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	617b      	str	r3, [r7, #20]
 800c2fa:	e02b      	b.n	800c354 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	3301      	adds	r3, #1
 800c306:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	021a      	lsls	r2, r3, #8
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	4313      	orrs	r3, r2
 800c312:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	3301      	adds	r3, #1
 800c318:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	041a      	lsls	r2, r3, #16
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	4313      	orrs	r3, r2
 800c324:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	3301      	adds	r3, #1
 800c32a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	061a      	lsls	r2, r3, #24
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	4313      	orrs	r3, r2
 800c336:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	3301      	adds	r3, #1
 800c33c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f107 020c 	add.w	r2, r7, #12
 800c346:	4611      	mov	r1, r2
 800c348:	4618      	mov	r0, r3
 800c34a:	f002 fb66 	bl	800ea1a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	3301      	adds	r3, #1
 800c352:	617b      	str	r3, [r7, #20]
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	2b07      	cmp	r3, #7
 800c358:	d9d0      	bls.n	800c2fc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	693a      	ldr	r2, [r7, #16]
 800c35e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c364:	f1a3 0220 	sub.w	r2, r3, #32
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c36c:	bf00      	nop
 800c36e:	3718      	adds	r7, #24
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c390:	bf00      	nop
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c3a4:	bf00      	nop
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c3b8:	bf00      	nop
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e0e2      	b.n	800c5a0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a70      	ldr	r2, [pc, #448]	; (800c5a8 <HAL_SPI_Init+0x1e4>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d00f      	beq.n	800c40a <HAL_SPI_Init+0x46>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a6f      	ldr	r2, [pc, #444]	; (800c5ac <HAL_SPI_Init+0x1e8>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d00a      	beq.n	800c40a <HAL_SPI_Init+0x46>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a6d      	ldr	r2, [pc, #436]	; (800c5b0 <HAL_SPI_Init+0x1ec>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d005      	beq.n	800c40a <HAL_SPI_Init+0x46>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	2b0f      	cmp	r3, #15
 800c404:	d901      	bls.n	800c40a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	e0ca      	b.n	800c5a0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 ff4c 	bl	800d2a8 <SPI_GetPacketSize>
 800c410:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a64      	ldr	r2, [pc, #400]	; (800c5a8 <HAL_SPI_Init+0x1e4>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d00c      	beq.n	800c436 <HAL_SPI_Init+0x72>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a62      	ldr	r2, [pc, #392]	; (800c5ac <HAL_SPI_Init+0x1e8>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d007      	beq.n	800c436 <HAL_SPI_Init+0x72>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a61      	ldr	r2, [pc, #388]	; (800c5b0 <HAL_SPI_Init+0x1ec>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d002      	beq.n	800c436 <HAL_SPI_Init+0x72>
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	2b08      	cmp	r3, #8
 800c434:	d811      	bhi.n	800c45a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c43a:	4a5b      	ldr	r2, [pc, #364]	; (800c5a8 <HAL_SPI_Init+0x1e4>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d009      	beq.n	800c454 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a59      	ldr	r2, [pc, #356]	; (800c5ac <HAL_SPI_Init+0x1e8>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d004      	beq.n	800c454 <HAL_SPI_Init+0x90>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a58      	ldr	r2, [pc, #352]	; (800c5b0 <HAL_SPI_Init+0x1ec>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d104      	bne.n	800c45e <HAL_SPI_Init+0x9a>
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	2b10      	cmp	r3, #16
 800c458:	d901      	bls.n	800c45e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c45a:	2301      	movs	r3, #1
 800c45c:	e0a0      	b.n	800c5a0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c464:	b2db      	uxtb	r3, r3
 800c466:	2b00      	cmp	r3, #0
 800c468:	d106      	bne.n	800c478 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f7f5 fbba 	bl	8001bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2202      	movs	r2, #2
 800c47c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f022 0201 	bic.w	r2, r2, #1
 800c48e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	699b      	ldr	r3, [r3, #24]
 800c494:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c498:	d110      	bne.n	800c4bc <HAL_SPI_Init+0xf8>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4a2:	d10b      	bne.n	800c4bc <HAL_SPI_Init+0xf8>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d107      	bne.n	800c4bc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c4ba:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	69da      	ldr	r2, [r3, #28]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c4:	431a      	orrs	r2, r3
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	431a      	orrs	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ce:	ea42 0103 	orr.w	r1, r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68da      	ldr	r2, [r3, #12]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	430a      	orrs	r2, r1
 800c4dc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e6:	431a      	orrs	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ec:	431a      	orrs	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	699b      	ldr	r3, [r3, #24]
 800c4f2:	431a      	orrs	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	431a      	orrs	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	431a      	orrs	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6a1b      	ldr	r3, [r3, #32]
 800c504:	431a      	orrs	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	431a      	orrs	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c510:	431a      	orrs	r2, r3
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	431a      	orrs	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c51c:	ea42 0103 	orr.w	r1, r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	430a      	orrs	r2, r1
 800c52a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d113      	bne.n	800c55c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c546:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c55a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f022 0201 	bic.w	r2, r2, #1
 800c56a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00a      	beq.n	800c58e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	430a      	orrs	r2, r1
 800c58c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c59e:	2300      	movs	r3, #0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	40013000 	.word	0x40013000
 800c5ac:	40003800 	.word	0x40003800
 800c5b0:	40003c00 	.word	0x40003c00

0800c5b4 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b086      	sub	sp, #24
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	4613      	mov	r3, r2
 800c5c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d110      	bne.n	800c5f0 <HAL_SPI_Receive_DMA+0x3c>
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5d6:	d10b      	bne.n	800c5f0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2204      	movs	r2, #4
 800c5dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800c5e0:	88fb      	ldrh	r3, [r7, #6]
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	68b9      	ldr	r1, [r7, #8]
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	f000 f93c 	bl	800c864 <HAL_SPI_TransmitReceive_DMA>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	e12c      	b.n	800c84a <HAL_SPI_Receive_DMA+0x296>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d101      	bne.n	800c5fe <HAL_SPI_Receive_DMA+0x4a>
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	e125      	b.n	800c84a <HAL_SPI_Receive_DMA+0x296>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2201      	movs	r2, #1
 800c602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d007      	beq.n	800c622 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 800c612:	2302      	movs	r3, #2
 800c614:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c61e:	7dfb      	ldrb	r3, [r7, #23]
 800c620:	e113      	b.n	800c84a <HAL_SPI_Receive_DMA+0x296>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d002      	beq.n	800c62e <HAL_SPI_Receive_DMA+0x7a>
 800c628:	88fb      	ldrh	r3, [r7, #6]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d107      	bne.n	800c63e <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2200      	movs	r2, #0
 800c636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
 800c63c:	e105      	b.n	800c84a <HAL_SPI_Receive_DMA+0x296>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2204      	movs	r2, #4
 800c642:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2200      	movs	r2, #0
 800c64a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	88fa      	ldrh	r2, [r7, #6]
 800c658:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	88fa      	ldrh	r2, [r7, #6]
 800c660:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2200      	movs	r2, #0
 800c668:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2200      	movs	r2, #0
 800c674:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c688:	d107      	bne.n	800c69a <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c698:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	2b0f      	cmp	r3, #15
 800c6a0:	d905      	bls.n	800c6ae <HAL_SPI_Receive_DMA+0xfa>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6ac:	d10f      	bne.n	800c6ce <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c6b2:	2b07      	cmp	r3, #7
 800c6b4:	d913      	bls.n	800c6de <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6ba:	699b      	ldr	r3, [r3, #24]
 800c6bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6c0:	d00d      	beq.n	800c6de <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6c6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c6c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6cc:	d007      	beq.n	800c6de <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c6da:	7dfb      	ldrb	r3, [r7, #23]
 800c6dc:	e0b5      	b.n	800c84a <HAL_SPI_Receive_DMA+0x296>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	689a      	ldr	r2, [r3, #8]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c6ec:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	2b07      	cmp	r3, #7
 800c6f4:	d820      	bhi.n	800c738 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6fa:	699b      	ldr	r3, [r3, #24]
 800c6fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c700:	d109      	bne.n	800c716 <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c708:	b29b      	uxth	r3, r3
 800c70a:	3301      	adds	r3, #1
 800c70c:	105b      	asrs	r3, r3, #1
 800c70e:	b29a      	uxth	r2, r3
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c720:	d11e      	bne.n	800c760 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c728:	b29b      	uxth	r3, r3
 800c72a:	3303      	adds	r3, #3
 800c72c:	109b      	asrs	r3, r3, #2
 800c72e:	b29a      	uxth	r2, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c736:	e013      	b.n	800c760 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	2b0f      	cmp	r3, #15
 800c73e:	d80f      	bhi.n	800c760 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c744:	699b      	ldr	r3, [r3, #24]
 800c746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c74a:	d109      	bne.n	800c760 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c752:	b29b      	uxth	r3, r3
 800c754:	3301      	adds	r3, #1
 800c756:	105b      	asrs	r3, r3, #1
 800c758:	b29a      	uxth	r2, r3
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c764:	4a3b      	ldr	r2, [pc, #236]	; (800c854 <HAL_SPI_Receive_DMA+0x2a0>)
 800c766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c76c:	4a3a      	ldr	r2, [pc, #232]	; (800c858 <HAL_SPI_Receive_DMA+0x2a4>)
 800c76e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c774:	4a39      	ldr	r2, [pc, #228]	; (800c85c <HAL_SPI_Receive_DMA+0x2a8>)
 800c776:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c77c:	2200      	movs	r2, #0
 800c77e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	3330      	adds	r3, #48	; 0x30
 800c78a:	4619      	mov	r1, r3
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c790:	461a      	mov	r2, r3
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f7f7 ff3b 	bl	8004614 <HAL_DMA_Start_IT>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00f      	beq.n	800c7c4 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7aa:	f043 0210 	orr.w	r2, r3, #16
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 800c7c0:	7dfb      	ldrb	r3, [r7, #23]
 800c7c2:	e042      	b.n	800c84a <HAL_SPI_Receive_DMA+0x296>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7c8:	69db      	ldr	r3, [r3, #28]
 800c7ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7ce:	d108      	bne.n	800c7e2 <HAL_SPI_Receive_DMA+0x22e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	6859      	ldr	r1, [r3, #4]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	4b21      	ldr	r3, [pc, #132]	; (800c860 <HAL_SPI_Receive_DMA+0x2ac>)
 800c7dc:	400b      	ands	r3, r1
 800c7de:	6053      	str	r3, [r2, #4]
 800c7e0:	e009      	b.n	800c7f6 <HAL_SPI_Receive_DMA+0x242>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	685a      	ldr	r2, [r3, #4]
 800c7e8:	4b1d      	ldr	r3, [pc, #116]	; (800c860 <HAL_SPI_Receive_DMA+0x2ac>)
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	88f9      	ldrh	r1, [r7, #6]
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	6812      	ldr	r2, [r2, #0]
 800c7f2:	430b      	orrs	r3, r1
 800c7f4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	689a      	ldr	r2, [r3, #8]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c804:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	691a      	ldr	r2, [r3, #16]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800c814:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f042 0201 	orr.w	r2, r2, #1
 800c824:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c82e:	d107      	bne.n	800c840 <HAL_SPI_Receive_DMA+0x28c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c83e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2200      	movs	r2, #0
 800c844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800c848:	7dfb      	ldrb	r3, [r7, #23]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3718      	adds	r7, #24
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	0800d0b5 	.word	0x0800d0b5
 800c858:	0800d029 	.word	0x0800d029
 800c85c:	0800d0ed 	.word	0x0800d0ed
 800c860:	ffff0000 	.word	0xffff0000

0800c864 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
 800c870:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d101      	bne.n	800c884 <HAL_SPI_TransmitReceive_DMA+0x20>
 800c880:	2302      	movs	r3, #2
 800c882:	e1ac      	b.n	800cbde <HAL_SPI_TransmitReceive_DMA+0x37a>
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c892:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	613b      	str	r3, [r7, #16]

  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8a0:	d106      	bne.n	800c8b0 <HAL_SPI_TransmitReceive_DMA+0x4c>
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d102      	bne.n	800c8b0 <HAL_SPI_TransmitReceive_DMA+0x4c>
 800c8aa:	7dbb      	ldrb	r3, [r7, #22]
 800c8ac:	2b04      	cmp	r3, #4
 800c8ae:	d00a      	beq.n	800c8c6 <HAL_SPI_TransmitReceive_DMA+0x62>
 800c8b0:	7dbb      	ldrb	r3, [r7, #22]
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d007      	beq.n	800c8c6 <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c8c2:	7dfb      	ldrb	r3, [r7, #23]
 800c8c4:	e18b      	b.n	800cbde <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d005      	beq.n	800c8d8 <HAL_SPI_TransmitReceive_DMA+0x74>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d002      	beq.n	800c8d8 <HAL_SPI_TransmitReceive_DMA+0x74>
 800c8d2:	887b      	ldrh	r3, [r7, #2]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d107      	bne.n	800c8e8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c8e4:	7dfb      	ldrb	r3, [r7, #23]
 800c8e6:	e17a      	b.n	800cbde <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b04      	cmp	r3, #4
 800c8f2:	d003      	beq.n	800c8fc <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2205      	movs	r2, #5
 800c8f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	887a      	ldrh	r2, [r7, #2]
 800c90e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	887a      	ldrh	r2, [r7, #2]
 800c916:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	887a      	ldrh	r2, [r7, #2]
 800c924:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	887a      	ldrh	r2, [r7, #2]
 800c92c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2200      	movs	r2, #0
 800c93a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	689a      	ldr	r2, [r3, #8]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c94a:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	2b0f      	cmp	r3, #15
 800c952:	d905      	bls.n	800c960 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c95e:	d10f      	bne.n	800c980 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c964:	2b07      	cmp	r3, #7
 800c966:	d913      	bls.n	800c990 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c96c:	699b      	ldr	r3, [r3, #24]
 800c96e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c972:	d00d      	beq.n	800c990 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c978:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c97a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c97e:	d007      	beq.n	800c990 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800c980:	2301      	movs	r3, #1
 800c982:	75fb      	strb	r3, [r7, #23]
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2200      	movs	r2, #0
 800c988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c98c:	7dfb      	ldrb	r3, [r7, #23]
 800c98e:	e126      	b.n	800cbde <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	2b07      	cmp	r3, #7
 800c996:	d840      	bhi.n	800ca1a <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c99c:	699b      	ldr	r3, [r3, #24]
 800c99e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9a2:	d109      	bne.n	800c9b8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	105b      	asrs	r3, r3, #1
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9bc:	699b      	ldr	r3, [r3, #24]
 800c9be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9c2:	d109      	bne.n	800c9d8 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	3303      	adds	r3, #3
 800c9ce:	109b      	asrs	r3, r3, #2
 800c9d0:	b29a      	uxth	r2, r3
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9e2:	d109      	bne.n	800c9f8 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	105b      	asrs	r3, r3, #1
 800c9f0:	b29a      	uxth	r2, r3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca02:	d12e      	bne.n	800ca62 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	3303      	adds	r3, #3
 800ca0e:	109b      	asrs	r3, r3, #2
 800ca10:	b29a      	uxth	r2, r3
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ca18:	e023      	b.n	800ca62 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	2b0f      	cmp	r3, #15
 800ca20:	d81f      	bhi.n	800ca62 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca2c:	d109      	bne.n	800ca42 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	3301      	adds	r3, #1
 800ca38:	105b      	asrs	r3, r3, #1
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca4c:	d109      	bne.n	800ca62 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	3301      	adds	r3, #1
 800ca58:	105b      	asrs	r3, r3, #1
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	2b04      	cmp	r3, #4
 800ca6c:	d108      	bne.n	800ca80 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca72:	4a5d      	ldr	r2, [pc, #372]	; (800cbe8 <HAL_SPI_TransmitReceive_DMA+0x384>)
 800ca74:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca7a:	4a5c      	ldr	r2, [pc, #368]	; (800cbec <HAL_SPI_TransmitReceive_DMA+0x388>)
 800ca7c:	63da      	str	r2, [r3, #60]	; 0x3c
 800ca7e:	e007      	b.n	800ca90 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca84:	4a5a      	ldr	r2, [pc, #360]	; (800cbf0 <HAL_SPI_TransmitReceive_DMA+0x38c>)
 800ca86:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca8c:	4a59      	ldr	r2, [pc, #356]	; (800cbf4 <HAL_SPI_TransmitReceive_DMA+0x390>)
 800ca8e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca94:	4a58      	ldr	r2, [pc, #352]	; (800cbf8 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800ca96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	3330      	adds	r3, #48	; 0x30
 800caaa:	4619      	mov	r1, r3
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cab0:	461a      	mov	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cab8:	b29b      	uxth	r3, r3
 800caba:	f7f7 fdab 	bl	8004614 <HAL_DMA_Start_IT>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00f      	beq.n	800cae4 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800caca:	f043 0210 	orr.w	r2, r3, #16
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 800cae0:	7dfb      	ldrb	r3, [r7, #23]
 800cae2:	e07c      	b.n	800cbde <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	689a      	ldr	r2, [r3, #8]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800caf2:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800caf8:	2200      	movs	r2, #0
 800cafa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb00:	2200      	movs	r2, #0
 800cb02:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb08:	2200      	movs	r2, #0
 800cb0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb10:	2200      	movs	r2, #0
 800cb12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	3320      	adds	r3, #32
 800cb24:	461a      	mov	r2, r3
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	f7f7 fd71 	bl	8004614 <HAL_DMA_Start_IT>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00f      	beq.n	800cb58 <HAL_SPI_TransmitReceive_DMA+0x2f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb3e:	f043 0210 	orr.w	r2, r3, #16
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 800cb54:	7dfb      	ldrb	r3, [r7, #23]
 800cb56:	e042      	b.n	800cbde <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb5c:	69db      	ldr	r3, [r3, #28]
 800cb5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb62:	d108      	bne.n	800cb76 <HAL_SPI_TransmitReceive_DMA+0x312>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	6859      	ldr	r1, [r3, #4]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	4b23      	ldr	r3, [pc, #140]	; (800cbfc <HAL_SPI_TransmitReceive_DMA+0x398>)
 800cb70:	400b      	ands	r3, r1
 800cb72:	6053      	str	r3, [r2, #4]
 800cb74:	e009      	b.n	800cb8a <HAL_SPI_TransmitReceive_DMA+0x326>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	4b1f      	ldr	r3, [pc, #124]	; (800cbfc <HAL_SPI_TransmitReceive_DMA+0x398>)
 800cb7e:	4013      	ands	r3, r2
 800cb80:	8879      	ldrh	r1, [r7, #2]
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	6812      	ldr	r2, [r2, #0]
 800cb86:	430b      	orrs	r3, r1
 800cb88:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	689a      	ldr	r2, [r3, #8]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb98:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	691a      	ldr	r2, [r3, #16]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800cba8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f042 0201 	orr.w	r2, r2, #1
 800cbb8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbc2:	d107      	bne.n	800cbd4 <HAL_SPI_TransmitReceive_DMA+0x370>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbd2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800cbdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3718      	adds	r7, #24
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	0800d0b5 	.word	0x0800d0b5
 800cbec:	0800d029 	.word	0x0800d029
 800cbf0:	0800d0d1 	.word	0x0800d0d1
 800cbf4:	0800d06f 	.word	0x0800d06f
 800cbf8:	0800d0ed 	.word	0x0800d0ed
 800cbfc:	ffff0000 	.word	0xffff0000

0800cc00 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b08a      	sub	sp, #40	; 0x28
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	695b      	ldr	r3, [r3, #20]
 800cc16:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800cc18:	6a3a      	ldr	r2, [r7, #32]
 800cc1a:	69fb      	ldr	r3, [r7, #28]
 800cc1c:	4013      	ands	r3, r2
 800cc1e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc32:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	3330      	adds	r3, #48	; 0x30
 800cc3a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d113      	bne.n	800cc6e <HAL_SPI_IRQHandler+0x6e>
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	f003 0320 	and.w	r3, r3, #32
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10e      	bne.n	800cc6e <HAL_SPI_IRQHandler+0x6e>
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	f003 0304 	and.w	r3, r3, #4
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d009      	beq.n	800cc6e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	4798      	blx	r3
    hspi->RxISR(hspi);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	4798      	blx	r3
    handled = 1UL;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d10f      	bne.n	800cc98 <HAL_SPI_IRQHandler+0x98>
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00a      	beq.n	800cc98 <HAL_SPI_IRQHandler+0x98>
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	f003 0304 	and.w	r3, r3, #4
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d105      	bne.n	800cc98 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	4798      	blx	r3
    handled = 1UL;
 800cc94:	2301      	movs	r3, #1
 800cc96:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cc98:	69bb      	ldr	r3, [r7, #24]
 800cc9a:	f003 0320 	and.w	r3, r3, #32
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d10f      	bne.n	800ccc2 <HAL_SPI_IRQHandler+0xc2>
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	f003 0302 	and.w	r3, r3, #2
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00a      	beq.n	800ccc2 <HAL_SPI_IRQHandler+0xc2>
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	f003 0304 	and.w	r3, r3, #4
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d105      	bne.n	800ccc2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	4798      	blx	r3
    handled = 1UL;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ccc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f040 8170 	bne.w	800cfaa <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	f003 0308 	and.w	r3, r3, #8
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f000 80a0 	beq.w	800ce16 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	699a      	ldr	r2, [r3, #24]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f042 0208 	orr.w	r2, r2, #8
 800cce4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	699a      	ldr	r2, [r3, #24]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f042 0210 	orr.w	r2, r2, #16
 800ccf4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	699a      	ldr	r2, [r3, #24]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd04:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	691a      	ldr	r2, [r3, #16]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f022 0208 	bic.w	r2, r2, #8
 800cd14:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d00f      	beq.n	800cd40 <HAL_SPI_IRQHandler+0x140>
 800cd20:	7cfb      	ldrb	r3, [r7, #19]
 800cd22:	2b04      	cmp	r3, #4
 800cd24:	d004      	beq.n	800cd30 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd2a:	69db      	ldr	r3, [r3, #28]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d007      	beq.n	800cd40 <HAL_SPI_IRQHandler+0x140>
 800cd30:	7cfb      	ldrb	r3, [r7, #19]
 800cd32:	2b03      	cmp	r3, #3
 800cd34:	d059      	beq.n	800cdea <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd3a:	69db      	ldr	r3, [r3, #28]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d154      	bne.n	800cdea <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d13d      	bne.n	800cdca <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800cd4e:	e036      	b.n	800cdbe <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	2b0f      	cmp	r3, #15
 800cd56:	d90b      	bls.n	800cd70 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cd62:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd68:	1d1a      	adds	r2, r3, #4
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	665a      	str	r2, [r3, #100]	; 0x64
 800cd6e:	e01d      	b.n	800cdac <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	2b07      	cmp	r3, #7
 800cd76:	d90b      	bls.n	800cd90 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	8812      	ldrh	r2, [r2, #0]
 800cd80:	b292      	uxth	r2, r2
 800cd82:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd88:	1c9a      	adds	r2, r3, #2
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	665a      	str	r2, [r3, #100]	; 0x64
 800cd8e:	e00d      	b.n	800cdac <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd9c:	7812      	ldrb	r2, [r2, #0]
 800cd9e:	b2d2      	uxtb	r2, r2
 800cda0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cda6:	1c5a      	adds	r2, r3, #1
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1c2      	bne.n	800cd50 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 f9cc 	bl	800d168 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d003      	beq.n	800cdea <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 f916 	bl	800d014 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800cde8:	e0e4      	b.n	800cfb4 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800cdea:	7cfb      	ldrb	r3, [r7, #19]
 800cdec:	2b05      	cmp	r3, #5
 800cdee:	d103      	bne.n	800cdf8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 f8f1 	bl	800cfd8 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 800cdf6:	e0da      	b.n	800cfae <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800cdf8:	7cfb      	ldrb	r3, [r7, #19]
 800cdfa:	2b04      	cmp	r3, #4
 800cdfc:	d103      	bne.n	800ce06 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7f5 fe0a 	bl	8002a18 <HAL_SPI_RxCpltCallback>
    return;
 800ce04:	e0d3      	b.n	800cfae <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ce06:	7cfb      	ldrb	r3, [r7, #19]
 800ce08:	2b03      	cmp	r3, #3
 800ce0a:	f040 80d0 	bne.w	800cfae <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f8d8 	bl	800cfc4 <HAL_SPI_TxCpltCallback>
    return;
 800ce14:	e0cb      	b.n	800cfae <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00d      	beq.n	800ce3c <HAL_SPI_IRQHandler+0x23c>
 800ce20:	6a3b      	ldr	r3, [r7, #32]
 800ce22:	f003 0308 	and.w	r3, r3, #8
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d008      	beq.n	800ce3c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	699a      	ldr	r2, [r3, #24]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce38:	619a      	str	r2, [r3, #24]

    return;
 800ce3a:	e0bb      	b.n	800cfb4 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f000 80b6 	beq.w	800cfb4 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00f      	beq.n	800ce72 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce58:	f043 0204 	orr.w	r2, r3, #4
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	699a      	ldr	r2, [r3, #24]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce70:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00f      	beq.n	800ce9c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce82:	f043 0201 	orr.w	r2, r3, #1
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	699a      	ldr	r2, [r3, #24]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce9a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00f      	beq.n	800cec6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ceac:	f043 0208 	orr.w	r2, r3, #8
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	699a      	ldr	r2, [r3, #24]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cec4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	f003 0320 	and.w	r3, r3, #32
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00f      	beq.n	800cef0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ced6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	699a      	ldr	r2, [r3, #24]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f042 0220 	orr.w	r2, r2, #32
 800ceee:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d05b      	beq.n	800cfb2 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f022 0201 	bic.w	r2, r2, #1
 800cf08:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	6919      	ldr	r1, [r3, #16]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	4b29      	ldr	r3, [pc, #164]	; (800cfbc <HAL_SPI_IRQHandler+0x3bc>)
 800cf16:	400b      	ands	r3, r1
 800cf18:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cf20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cf24:	d138      	bne.n	800cf98 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	689a      	ldr	r2, [r3, #8]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cf34:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d013      	beq.n	800cf66 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf42:	4a1f      	ldr	r2, [pc, #124]	; (800cfc0 <HAL_SPI_IRQHandler+0x3c0>)
 800cf44:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7f7 fdcc 	bl	8004ae8 <HAL_DMA_Abort_IT>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d007      	beq.n	800cf66 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d021      	beq.n	800cfb2 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf72:	4a13      	ldr	r2, [pc, #76]	; (800cfc0 <HAL_SPI_IRQHandler+0x3c0>)
 800cf74:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7f7 fdb4 	bl	8004ae8 <HAL_DMA_Abort_IT>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d015      	beq.n	800cfb2 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cf96:	e00c      	b.n	800cfb2 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 f837 	bl	800d014 <HAL_SPI_ErrorCallback>
    return;
 800cfa6:	bf00      	nop
 800cfa8:	e003      	b.n	800cfb2 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800cfaa:	bf00      	nop
 800cfac:	e002      	b.n	800cfb4 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800cfae:	bf00      	nop
 800cfb0:	e000      	b.n	800cfb4 <HAL_SPI_IRQHandler+0x3b4>
    return;
 800cfb2:	bf00      	nop
  }
}
 800cfb4:	3728      	adds	r7, #40	; 0x28
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	fffffc94 	.word	0xfffffc94
 800cfc0:	0800d133 	.word	0x0800d133

0800cfc4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cfcc:	bf00      	nop
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800cff4:	bf00      	nop
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d01c:	bf00      	nop
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d034:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b07      	cmp	r3, #7
 800d040:	d011      	beq.n	800d066 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d046:	69db      	ldr	r3, [r3, #28]
 800d048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d04c:	d103      	bne.n	800d056 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f7f5 fce2 	bl	8002a18 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800d054:	e007      	b.n	800d066 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	691a      	ldr	r2, [r3, #16]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f042 0208 	orr.w	r2, r2, #8
 800d064:	611a      	str	r2, [r3, #16]
}
 800d066:	bf00      	nop
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b084      	sub	sp, #16
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07a:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d082:	b2db      	uxtb	r3, r3
 800d084:	2b07      	cmp	r3, #7
 800d086:	d011      	beq.n	800d0ac <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d08c:	69db      	ldr	r3, [r3, #28]
 800d08e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d092:	d103      	bne.n	800d09c <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f7ff ff9f 	bl	800cfd8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800d09a:	e007      	b.n	800d0ac <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	691a      	ldr	r2, [r3, #16]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f042 0208 	orr.w	r2, r2, #8
 800d0aa:	611a      	str	r2, [r3, #16]
}
 800d0ac:	bf00      	nop
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f7ff ff92 	bl	800cfec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0c8:	bf00      	nop
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f7ff ff8e 	bl	800d000 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0e4:	bf00      	nop
 800d0e6:	3710      	adds	r7, #16
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f8:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7f8 fe62 	bl	8005dc4 <HAL_DMA_GetError>
 800d100:	4603      	mov	r3, r0
 800d102:	2b02      	cmp	r3, #2
 800d104:	d011      	beq.n	800d12a <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f000 f82e 	bl	800d168 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d112:	f043 0210 	orr.w	r2, r3, #16
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	f7ff ff75 	bl	800d014 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800d12a:	bf00      	nop
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b084      	sub	sp, #16
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2200      	movs	r2, #0
 800d144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f7ff ff5b 	bl	800d014 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d15e:	bf00      	nop
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
	...

0800d168 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	695b      	ldr	r3, [r3, #20]
 800d176:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	699a      	ldr	r2, [r3, #24]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f042 0208 	orr.w	r2, r2, #8
 800d186:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	699a      	ldr	r2, [r3, #24]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f042 0210 	orr.w	r2, r2, #16
 800d196:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f022 0201 	bic.w	r2, r2, #1
 800d1a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	6919      	ldr	r1, [r3, #16]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	4b3c      	ldr	r3, [pc, #240]	; (800d2a4 <SPI_CloseTransfer+0x13c>)
 800d1b4:	400b      	ands	r3, r1
 800d1b6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	689a      	ldr	r2, [r3, #8]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d1c6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	2b04      	cmp	r3, #4
 800d1d2:	d014      	beq.n	800d1fe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f003 0320 	and.w	r3, r3, #32
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00f      	beq.n	800d1fe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	699a      	ldr	r2, [r3, #24]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f042 0220 	orr.w	r2, r2, #32
 800d1fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d204:	b2db      	uxtb	r3, r3
 800d206:	2b03      	cmp	r3, #3
 800d208:	d014      	beq.n	800d234 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d210:	2b00      	cmp	r3, #0
 800d212:	d00f      	beq.n	800d234 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d21a:	f043 0204 	orr.w	r2, r3, #4
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	699a      	ldr	r2, [r3, #24]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d232:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00f      	beq.n	800d25e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d244:	f043 0201 	orr.w	r2, r3, #1
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	699a      	ldr	r2, [r3, #24]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d25c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00f      	beq.n	800d288 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d26e:	f043 0208 	orr.w	r2, r3, #8
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	699a      	ldr	r2, [r3, #24]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d286:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d298:	bf00      	nop
 800d29a:	3714      	adds	r7, #20
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr
 800d2a4:	fffffc90 	.word	0xfffffc90

0800d2a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2b4:	095b      	lsrs	r3, r3, #5
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	3307      	adds	r3, #7
 800d2c6:	08db      	lsrs	r3, r3, #3
 800d2c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	fb02 f303 	mul.w	r3, r2, r3
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3714      	adds	r7, #20
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
	...

0800d2e0 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b087      	sub	sp, #28
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  uint8_t  count  = 0;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	75fb      	strb	r3, [r7, #23]
  uint32_t itflag = hspi->Instance->SR;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	613b      	str	r3, [r7, #16]
  __IO uint32_t tmpreg;

  while (((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_RX_FIFO_0PACKET) || ((itflag & SPI_FLAG_RXWNE) !=  0UL))
 800d2f4:	e020      	b.n	800d338 <HAL_SPIEx_FlushRxFifo+0x58>
  {
    count += (uint8_t)4UL;
 800d2f6:	7dfb      	ldrb	r3, [r7, #23]
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	75fb      	strb	r3, [r7, #23]
    tmpreg = hspi->Instance->RXDR;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d302:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800d304:	68fb      	ldr	r3, [r7, #12]

    if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a15      	ldr	r2, [pc, #84]	; (800d360 <HAL_SPIEx_FlushRxFifo+0x80>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d009      	beq.n	800d324 <HAL_SPIEx_FlushRxFifo+0x44>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a13      	ldr	r2, [pc, #76]	; (800d364 <HAL_SPIEx_FlushRxFifo+0x84>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d004      	beq.n	800d324 <HAL_SPIEx_FlushRxFifo+0x44>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a12      	ldr	r2, [pc, #72]	; (800d368 <HAL_SPIEx_FlushRxFifo+0x88>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d104      	bne.n	800d32e <HAL_SPIEx_FlushRxFifo+0x4e>
    {
      if (count > SPI_HIGHEND_FIFO_SIZE)
 800d324:	7dfb      	ldrb	r3, [r7, #23]
 800d326:	2b10      	cmp	r3, #16
 800d328:	d906      	bls.n	800d338 <HAL_SPIEx_FlushRxFifo+0x58>
      {
        return HAL_TIMEOUT;
 800d32a:	2303      	movs	r3, #3
 800d32c:	e011      	b.n	800d352 <HAL_SPIEx_FlushRxFifo+0x72>
      }
    }
    else
    {
      if (count > SPI_LOWEND_FIFO_SIZE)
 800d32e:	7dfb      	ldrb	r3, [r7, #23]
 800d330:	2b08      	cmp	r3, #8
 800d332:	d901      	bls.n	800d338 <HAL_SPIEx_FlushRxFifo+0x58>
      {
        return HAL_TIMEOUT;
 800d334:	2303      	movs	r3, #3
 800d336:	e00c      	b.n	800d352 <HAL_SPIEx_FlushRxFifo+0x72>
  while (((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_RX_FIFO_0PACKET) || ((itflag & SPI_FLAG_RXWNE) !=  0UL))
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	695b      	ldr	r3, [r3, #20]
 800d33e:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1d7      	bne.n	800d2f6 <HAL_SPIEx_FlushRxFifo+0x16>
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1d2      	bne.n	800d2f6 <HAL_SPIEx_FlushRxFifo+0x16>
      }
    }
  }
  return HAL_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	371c      	adds	r7, #28
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop
 800d360:	40013000 	.word	0x40013000
 800d364:	40003800 	.word	0x40003800
 800d368:	40003c00 	.word	0x40003c00

0800d36c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d37a:	2301      	movs	r3, #1
 800d37c:	e049      	b.n	800d412 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d384:	b2db      	uxtb	r3, r3
 800d386:	2b00      	cmp	r3, #0
 800d388:	d106      	bne.n	800d398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f841 	bl	800d41a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2202      	movs	r2, #2
 800d39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3304      	adds	r3, #4
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	4610      	mov	r0, r2
 800d3ac:	f000 f9be 	bl	800d72c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2201      	movs	r2, #1
 800d404:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d410:	2300      	movs	r3, #0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3708      	adds	r7, #8
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d41a:	b480      	push	{r7}
 800d41c:	b083      	sub	sp, #12
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d422:	bf00      	nop
 800d424:	370c      	adds	r7, #12
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
	...

0800d430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d430:	b480      	push	{r7}
 800d432:	b085      	sub	sp, #20
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	2b01      	cmp	r3, #1
 800d442:	d001      	beq.n	800d448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	e021      	b.n	800d48c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2202      	movs	r2, #2
 800d44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	68da      	ldr	r2, [r3, #12]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f042 0201 	orr.w	r2, r2, #1
 800d45e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	689a      	ldr	r2, [r3, #8]
 800d466:	4b0c      	ldr	r3, [pc, #48]	; (800d498 <HAL_TIM_Base_Start_IT+0x68>)
 800d468:	4013      	ands	r3, r2
 800d46a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2b06      	cmp	r3, #6
 800d470:	d00b      	beq.n	800d48a <HAL_TIM_Base_Start_IT+0x5a>
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d478:	d007      	beq.n	800d48a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f042 0201 	orr.w	r2, r2, #1
 800d488:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3714      	adds	r7, #20
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr
 800d498:	00010007 	.word	0x00010007

0800d49c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	691b      	ldr	r3, [r3, #16]
 800d4aa:	f003 0302 	and.w	r3, r3, #2
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	d122      	bne.n	800d4f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	f003 0302 	and.w	r3, r3, #2
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	d11b      	bne.n	800d4f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f06f 0202 	mvn.w	r2, #2
 800d4c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	699b      	ldr	r3, [r3, #24]
 800d4d6:	f003 0303 	and.w	r3, r3, #3
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d003      	beq.n	800d4e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f905 	bl	800d6ee <HAL_TIM_IC_CaptureCallback>
 800d4e4:	e005      	b.n	800d4f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f8f7 	bl	800d6da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 f908 	bl	800d702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	f003 0304 	and.w	r3, r3, #4
 800d502:	2b04      	cmp	r3, #4
 800d504:	d122      	bne.n	800d54c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	f003 0304 	and.w	r3, r3, #4
 800d510:	2b04      	cmp	r3, #4
 800d512:	d11b      	bne.n	800d54c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f06f 0204 	mvn.w	r2, #4
 800d51c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2202      	movs	r2, #2
 800d522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	699b      	ldr	r3, [r3, #24]
 800d52a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d003      	beq.n	800d53a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 f8db 	bl	800d6ee <HAL_TIM_IC_CaptureCallback>
 800d538:	e005      	b.n	800d546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 f8cd 	bl	800d6da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 f8de 	bl	800d702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	f003 0308 	and.w	r3, r3, #8
 800d556:	2b08      	cmp	r3, #8
 800d558:	d122      	bne.n	800d5a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	f003 0308 	and.w	r3, r3, #8
 800d564:	2b08      	cmp	r3, #8
 800d566:	d11b      	bne.n	800d5a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f06f 0208 	mvn.w	r2, #8
 800d570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2204      	movs	r2, #4
 800d576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	69db      	ldr	r3, [r3, #28]
 800d57e:	f003 0303 	and.w	r3, r3, #3
 800d582:	2b00      	cmp	r3, #0
 800d584:	d003      	beq.n	800d58e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 f8b1 	bl	800d6ee <HAL_TIM_IC_CaptureCallback>
 800d58c:	e005      	b.n	800d59a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 f8a3 	bl	800d6da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 f8b4 	bl	800d702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2200      	movs	r2, #0
 800d59e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	f003 0310 	and.w	r3, r3, #16
 800d5aa:	2b10      	cmp	r3, #16
 800d5ac:	d122      	bne.n	800d5f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	f003 0310 	and.w	r3, r3, #16
 800d5b8:	2b10      	cmp	r3, #16
 800d5ba:	d11b      	bne.n	800d5f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f06f 0210 	mvn.w	r2, #16
 800d5c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2208      	movs	r2, #8
 800d5ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	69db      	ldr	r3, [r3, #28]
 800d5d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d003      	beq.n	800d5e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 f887 	bl	800d6ee <HAL_TIM_IC_CaptureCallback>
 800d5e0:	e005      	b.n	800d5ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 f879 	bl	800d6da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 f88a 	bl	800d702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	f003 0301 	and.w	r3, r3, #1
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d10e      	bne.n	800d620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d107      	bne.n	800d620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f06f 0201 	mvn.w	r2, #1
 800d618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f7f4 f9a8 	bl	8001970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d62a:	2b80      	cmp	r3, #128	; 0x80
 800d62c:	d10e      	bne.n	800d64c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d638:	2b80      	cmp	r3, #128	; 0x80
 800d63a:	d107      	bne.n	800d64c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 f914 	bl	800d874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d65a:	d10e      	bne.n	800d67a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d666:	2b80      	cmp	r3, #128	; 0x80
 800d668:	d107      	bne.n	800d67a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 f907 	bl	800d888 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	691b      	ldr	r3, [r3, #16]
 800d680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d684:	2b40      	cmp	r3, #64	; 0x40
 800d686:	d10e      	bne.n	800d6a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d692:	2b40      	cmp	r3, #64	; 0x40
 800d694:	d107      	bne.n	800d6a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 f838 	bl	800d716 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	691b      	ldr	r3, [r3, #16]
 800d6ac:	f003 0320 	and.w	r3, r3, #32
 800d6b0:	2b20      	cmp	r3, #32
 800d6b2:	d10e      	bne.n	800d6d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	f003 0320 	and.w	r3, r3, #32
 800d6be:	2b20      	cmp	r3, #32
 800d6c0:	d107      	bne.n	800d6d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f06f 0220 	mvn.w	r2, #32
 800d6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f000 f8c7 	bl	800d860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d6d2:	bf00      	nop
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d6da:	b480      	push	{r7}
 800d6dc:	b083      	sub	sp, #12
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d6e2:	bf00      	nop
 800d6e4:	370c      	adds	r7, #12
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr

0800d6ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	b083      	sub	sp, #12
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d6f6:	bf00      	nop
 800d6f8:	370c      	adds	r7, #12
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr

0800d702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d702:	b480      	push	{r7}
 800d704:	b083      	sub	sp, #12
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d70a:	bf00      	nop
 800d70c:	370c      	adds	r7, #12
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr

0800d716 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d716:	b480      	push	{r7}
 800d718:	b083      	sub	sp, #12
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d71e:	bf00      	nop
 800d720:	370c      	adds	r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
	...

0800d72c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b085      	sub	sp, #20
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	4a40      	ldr	r2, [pc, #256]	; (800d840 <TIM_Base_SetConfig+0x114>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d013      	beq.n	800d76c <TIM_Base_SetConfig+0x40>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d74a:	d00f      	beq.n	800d76c <TIM_Base_SetConfig+0x40>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	4a3d      	ldr	r2, [pc, #244]	; (800d844 <TIM_Base_SetConfig+0x118>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d00b      	beq.n	800d76c <TIM_Base_SetConfig+0x40>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	4a3c      	ldr	r2, [pc, #240]	; (800d848 <TIM_Base_SetConfig+0x11c>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d007      	beq.n	800d76c <TIM_Base_SetConfig+0x40>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a3b      	ldr	r2, [pc, #236]	; (800d84c <TIM_Base_SetConfig+0x120>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d003      	beq.n	800d76c <TIM_Base_SetConfig+0x40>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	4a3a      	ldr	r2, [pc, #232]	; (800d850 <TIM_Base_SetConfig+0x124>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d108      	bne.n	800d77e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a2f      	ldr	r2, [pc, #188]	; (800d840 <TIM_Base_SetConfig+0x114>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d01f      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d78c:	d01b      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a2c      	ldr	r2, [pc, #176]	; (800d844 <TIM_Base_SetConfig+0x118>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d017      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a2b      	ldr	r2, [pc, #172]	; (800d848 <TIM_Base_SetConfig+0x11c>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d013      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a2a      	ldr	r2, [pc, #168]	; (800d84c <TIM_Base_SetConfig+0x120>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d00f      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	4a29      	ldr	r2, [pc, #164]	; (800d850 <TIM_Base_SetConfig+0x124>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d00b      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4a28      	ldr	r2, [pc, #160]	; (800d854 <TIM_Base_SetConfig+0x128>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d007      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4a27      	ldr	r2, [pc, #156]	; (800d858 <TIM_Base_SetConfig+0x12c>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d003      	beq.n	800d7c6 <TIM_Base_SetConfig+0x9a>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4a26      	ldr	r2, [pc, #152]	; (800d85c <TIM_Base_SetConfig+0x130>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d108      	bne.n	800d7d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	695b      	ldr	r3, [r3, #20]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	689a      	ldr	r2, [r3, #8]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	4a10      	ldr	r2, [pc, #64]	; (800d840 <TIM_Base_SetConfig+0x114>)
 800d800:	4293      	cmp	r3, r2
 800d802:	d00f      	beq.n	800d824 <TIM_Base_SetConfig+0xf8>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	4a12      	ldr	r2, [pc, #72]	; (800d850 <TIM_Base_SetConfig+0x124>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d00b      	beq.n	800d824 <TIM_Base_SetConfig+0xf8>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4a11      	ldr	r2, [pc, #68]	; (800d854 <TIM_Base_SetConfig+0x128>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d007      	beq.n	800d824 <TIM_Base_SetConfig+0xf8>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	4a10      	ldr	r2, [pc, #64]	; (800d858 <TIM_Base_SetConfig+0x12c>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d003      	beq.n	800d824 <TIM_Base_SetConfig+0xf8>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4a0f      	ldr	r2, [pc, #60]	; (800d85c <TIM_Base_SetConfig+0x130>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d103      	bne.n	800d82c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	691a      	ldr	r2, [r3, #16]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	615a      	str	r2, [r3, #20]
}
 800d832:	bf00      	nop
 800d834:	3714      	adds	r7, #20
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	40010000 	.word	0x40010000
 800d844:	40000400 	.word	0x40000400
 800d848:	40000800 	.word	0x40000800
 800d84c:	40000c00 	.word	0x40000c00
 800d850:	40010400 	.word	0x40010400
 800d854:	40014000 	.word	0x40014000
 800d858:	40014400 	.word	0x40014400
 800d85c:	40014800 	.word	0x40014800

0800d860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d868:	bf00      	nop
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d890:	bf00      	nop
 800d892:	370c      	adds	r7, #12
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d101      	bne.n	800d8ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e042      	b.n	800d934 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d106      	bne.n	800d8c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7f4 fbd3 	bl	800206c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2224      	movs	r2, #36	; 0x24
 800d8ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f022 0201 	bic.w	r2, r2, #1
 800d8dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 f82c 	bl	800d93c <UART_SetConfig>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d101      	bne.n	800d8ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e022      	b.n	800d934 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d002      	beq.n	800d8fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 fdd0 	bl	800e49c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	685a      	ldr	r2, [r3, #4]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d90a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	689a      	ldr	r2, [r3, #8]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d91a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f042 0201 	orr.w	r2, r2, #1
 800d92a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fe57 	bl	800e5e0 <UART_CheckIdleState>
 800d932:	4603      	mov	r3, r0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d93c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800d940:	b08e      	sub	sp, #56	; 0x38
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d946:	2300      	movs	r3, #0
 800d948:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	689a      	ldr	r2, [r3, #8]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	431a      	orrs	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	695b      	ldr	r3, [r3, #20]
 800d95a:	431a      	orrs	r2, r3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	69db      	ldr	r3, [r3, #28]
 800d960:	4313      	orrs	r3, r2
 800d962:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d96a:	4313      	orrs	r3, r2
 800d96c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	4bc1      	ldr	r3, [pc, #772]	; (800dc7c <UART_SetConfig+0x340>)
 800d976:	4013      	ands	r3, r2
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	6812      	ldr	r2, [r2, #0]
 800d97c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d97e:	430b      	orrs	r3, r1
 800d980:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	68da      	ldr	r2, [r3, #12]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	430a      	orrs	r2, r1
 800d996:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	699b      	ldr	r3, [r3, #24]
 800d99c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4ab7      	ldr	r2, [pc, #732]	; (800dc80 <UART_SetConfig+0x344>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d004      	beq.n	800d9b2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6a1b      	ldr	r3, [r3, #32]
 800d9ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	689a      	ldr	r2, [r3, #8]
 800d9b8:	4bb2      	ldr	r3, [pc, #712]	; (800dc84 <UART_SetConfig+0x348>)
 800d9ba:	4013      	ands	r3, r2
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	6812      	ldr	r2, [r2, #0]
 800d9c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d9c2:	430b      	orrs	r3, r1
 800d9c4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	f023 010f 	bic.w	r1, r3, #15
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	430a      	orrs	r2, r1
 800d9da:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4aa9      	ldr	r2, [pc, #676]	; (800dc88 <UART_SetConfig+0x34c>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d177      	bne.n	800dad6 <UART_SetConfig+0x19a>
 800d9e6:	4ba9      	ldr	r3, [pc, #676]	; (800dc8c <UART_SetConfig+0x350>)
 800d9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d9ee:	2b28      	cmp	r3, #40	; 0x28
 800d9f0:	d86c      	bhi.n	800dacc <UART_SetConfig+0x190>
 800d9f2:	a201      	add	r2, pc, #4	; (adr r2, 800d9f8 <UART_SetConfig+0xbc>)
 800d9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f8:	0800da9d 	.word	0x0800da9d
 800d9fc:	0800dacd 	.word	0x0800dacd
 800da00:	0800dacd 	.word	0x0800dacd
 800da04:	0800dacd 	.word	0x0800dacd
 800da08:	0800dacd 	.word	0x0800dacd
 800da0c:	0800dacd 	.word	0x0800dacd
 800da10:	0800dacd 	.word	0x0800dacd
 800da14:	0800dacd 	.word	0x0800dacd
 800da18:	0800daa5 	.word	0x0800daa5
 800da1c:	0800dacd 	.word	0x0800dacd
 800da20:	0800dacd 	.word	0x0800dacd
 800da24:	0800dacd 	.word	0x0800dacd
 800da28:	0800dacd 	.word	0x0800dacd
 800da2c:	0800dacd 	.word	0x0800dacd
 800da30:	0800dacd 	.word	0x0800dacd
 800da34:	0800dacd 	.word	0x0800dacd
 800da38:	0800daad 	.word	0x0800daad
 800da3c:	0800dacd 	.word	0x0800dacd
 800da40:	0800dacd 	.word	0x0800dacd
 800da44:	0800dacd 	.word	0x0800dacd
 800da48:	0800dacd 	.word	0x0800dacd
 800da4c:	0800dacd 	.word	0x0800dacd
 800da50:	0800dacd 	.word	0x0800dacd
 800da54:	0800dacd 	.word	0x0800dacd
 800da58:	0800dab5 	.word	0x0800dab5
 800da5c:	0800dacd 	.word	0x0800dacd
 800da60:	0800dacd 	.word	0x0800dacd
 800da64:	0800dacd 	.word	0x0800dacd
 800da68:	0800dacd 	.word	0x0800dacd
 800da6c:	0800dacd 	.word	0x0800dacd
 800da70:	0800dacd 	.word	0x0800dacd
 800da74:	0800dacd 	.word	0x0800dacd
 800da78:	0800dabd 	.word	0x0800dabd
 800da7c:	0800dacd 	.word	0x0800dacd
 800da80:	0800dacd 	.word	0x0800dacd
 800da84:	0800dacd 	.word	0x0800dacd
 800da88:	0800dacd 	.word	0x0800dacd
 800da8c:	0800dacd 	.word	0x0800dacd
 800da90:	0800dacd 	.word	0x0800dacd
 800da94:	0800dacd 	.word	0x0800dacd
 800da98:	0800dac5 	.word	0x0800dac5
 800da9c:	2301      	movs	r3, #1
 800da9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daa2:	e233      	b.n	800df0c <UART_SetConfig+0x5d0>
 800daa4:	2304      	movs	r3, #4
 800daa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daaa:	e22f      	b.n	800df0c <UART_SetConfig+0x5d0>
 800daac:	2308      	movs	r3, #8
 800daae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dab2:	e22b      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dab4:	2310      	movs	r3, #16
 800dab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daba:	e227      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dabc:	2320      	movs	r3, #32
 800dabe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dac2:	e223      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dac4:	2340      	movs	r3, #64	; 0x40
 800dac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daca:	e21f      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dacc:	2380      	movs	r3, #128	; 0x80
 800dace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dad2:	bf00      	nop
 800dad4:	e21a      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4a6d      	ldr	r2, [pc, #436]	; (800dc90 <UART_SetConfig+0x354>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d132      	bne.n	800db46 <UART_SetConfig+0x20a>
 800dae0:	4b6a      	ldr	r3, [pc, #424]	; (800dc8c <UART_SetConfig+0x350>)
 800dae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dae4:	f003 0307 	and.w	r3, r3, #7
 800dae8:	2b05      	cmp	r3, #5
 800daea:	d827      	bhi.n	800db3c <UART_SetConfig+0x200>
 800daec:	a201      	add	r2, pc, #4	; (adr r2, 800daf4 <UART_SetConfig+0x1b8>)
 800daee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf2:	bf00      	nop
 800daf4:	0800db0d 	.word	0x0800db0d
 800daf8:	0800db15 	.word	0x0800db15
 800dafc:	0800db1d 	.word	0x0800db1d
 800db00:	0800db25 	.word	0x0800db25
 800db04:	0800db2d 	.word	0x0800db2d
 800db08:	0800db35 	.word	0x0800db35
 800db0c:	2300      	movs	r3, #0
 800db0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db12:	e1fb      	b.n	800df0c <UART_SetConfig+0x5d0>
 800db14:	2304      	movs	r3, #4
 800db16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db1a:	e1f7      	b.n	800df0c <UART_SetConfig+0x5d0>
 800db1c:	2308      	movs	r3, #8
 800db1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db22:	e1f3      	b.n	800df0c <UART_SetConfig+0x5d0>
 800db24:	2310      	movs	r3, #16
 800db26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db2a:	e1ef      	b.n	800df0c <UART_SetConfig+0x5d0>
 800db2c:	2320      	movs	r3, #32
 800db2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db32:	e1eb      	b.n	800df0c <UART_SetConfig+0x5d0>
 800db34:	2340      	movs	r3, #64	; 0x40
 800db36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db3a:	e1e7      	b.n	800df0c <UART_SetConfig+0x5d0>
 800db3c:	2380      	movs	r3, #128	; 0x80
 800db3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db42:	bf00      	nop
 800db44:	e1e2      	b.n	800df0c <UART_SetConfig+0x5d0>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4a52      	ldr	r2, [pc, #328]	; (800dc94 <UART_SetConfig+0x358>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d132      	bne.n	800dbb6 <UART_SetConfig+0x27a>
 800db50:	4b4e      	ldr	r3, [pc, #312]	; (800dc8c <UART_SetConfig+0x350>)
 800db52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db54:	f003 0307 	and.w	r3, r3, #7
 800db58:	2b05      	cmp	r3, #5
 800db5a:	d827      	bhi.n	800dbac <UART_SetConfig+0x270>
 800db5c:	a201      	add	r2, pc, #4	; (adr r2, 800db64 <UART_SetConfig+0x228>)
 800db5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db62:	bf00      	nop
 800db64:	0800db7d 	.word	0x0800db7d
 800db68:	0800db85 	.word	0x0800db85
 800db6c:	0800db8d 	.word	0x0800db8d
 800db70:	0800db95 	.word	0x0800db95
 800db74:	0800db9d 	.word	0x0800db9d
 800db78:	0800dba5 	.word	0x0800dba5
 800db7c:	2300      	movs	r3, #0
 800db7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db82:	e1c3      	b.n	800df0c <UART_SetConfig+0x5d0>
 800db84:	2304      	movs	r3, #4
 800db86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db8a:	e1bf      	b.n	800df0c <UART_SetConfig+0x5d0>
 800db8c:	2308      	movs	r3, #8
 800db8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db92:	e1bb      	b.n	800df0c <UART_SetConfig+0x5d0>
 800db94:	2310      	movs	r3, #16
 800db96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db9a:	e1b7      	b.n	800df0c <UART_SetConfig+0x5d0>
 800db9c:	2320      	movs	r3, #32
 800db9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dba2:	e1b3      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dba4:	2340      	movs	r3, #64	; 0x40
 800dba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbaa:	e1af      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dbac:	2380      	movs	r3, #128	; 0x80
 800dbae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbb2:	bf00      	nop
 800dbb4:	e1aa      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a37      	ldr	r2, [pc, #220]	; (800dc98 <UART_SetConfig+0x35c>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d132      	bne.n	800dc26 <UART_SetConfig+0x2ea>
 800dbc0:	4b32      	ldr	r3, [pc, #200]	; (800dc8c <UART_SetConfig+0x350>)
 800dbc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbc4:	f003 0307 	and.w	r3, r3, #7
 800dbc8:	2b05      	cmp	r3, #5
 800dbca:	d827      	bhi.n	800dc1c <UART_SetConfig+0x2e0>
 800dbcc:	a201      	add	r2, pc, #4	; (adr r2, 800dbd4 <UART_SetConfig+0x298>)
 800dbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd2:	bf00      	nop
 800dbd4:	0800dbed 	.word	0x0800dbed
 800dbd8:	0800dbf5 	.word	0x0800dbf5
 800dbdc:	0800dbfd 	.word	0x0800dbfd
 800dbe0:	0800dc05 	.word	0x0800dc05
 800dbe4:	0800dc0d 	.word	0x0800dc0d
 800dbe8:	0800dc15 	.word	0x0800dc15
 800dbec:	2300      	movs	r3, #0
 800dbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbf2:	e18b      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dbf4:	2304      	movs	r3, #4
 800dbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dbfa:	e187      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dbfc:	2308      	movs	r3, #8
 800dbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc02:	e183      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dc04:	2310      	movs	r3, #16
 800dc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc0a:	e17f      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dc0c:	2320      	movs	r3, #32
 800dc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc12:	e17b      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dc14:	2340      	movs	r3, #64	; 0x40
 800dc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc1a:	e177      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dc1c:	2380      	movs	r3, #128	; 0x80
 800dc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc22:	bf00      	nop
 800dc24:	e172      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a1c      	ldr	r2, [pc, #112]	; (800dc9c <UART_SetConfig+0x360>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d144      	bne.n	800dcba <UART_SetConfig+0x37e>
 800dc30:	4b16      	ldr	r3, [pc, #88]	; (800dc8c <UART_SetConfig+0x350>)
 800dc32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc34:	f003 0307 	and.w	r3, r3, #7
 800dc38:	2b05      	cmp	r3, #5
 800dc3a:	d839      	bhi.n	800dcb0 <UART_SetConfig+0x374>
 800dc3c:	a201      	add	r2, pc, #4	; (adr r2, 800dc44 <UART_SetConfig+0x308>)
 800dc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc42:	bf00      	nop
 800dc44:	0800dc5d 	.word	0x0800dc5d
 800dc48:	0800dc65 	.word	0x0800dc65
 800dc4c:	0800dc6d 	.word	0x0800dc6d
 800dc50:	0800dc75 	.word	0x0800dc75
 800dc54:	0800dca1 	.word	0x0800dca1
 800dc58:	0800dca9 	.word	0x0800dca9
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc62:	e153      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dc64:	2304      	movs	r3, #4
 800dc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc6a:	e14f      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dc6c:	2308      	movs	r3, #8
 800dc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc72:	e14b      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dc74:	2310      	movs	r3, #16
 800dc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc7a:	e147      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dc7c:	cfff69f3 	.word	0xcfff69f3
 800dc80:	58000c00 	.word	0x58000c00
 800dc84:	11fff4ff 	.word	0x11fff4ff
 800dc88:	40011000 	.word	0x40011000
 800dc8c:	58024400 	.word	0x58024400
 800dc90:	40004400 	.word	0x40004400
 800dc94:	40004800 	.word	0x40004800
 800dc98:	40004c00 	.word	0x40004c00
 800dc9c:	40005000 	.word	0x40005000
 800dca0:	2320      	movs	r3, #32
 800dca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dca6:	e131      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dca8:	2340      	movs	r3, #64	; 0x40
 800dcaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcae:	e12d      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dcb0:	2380      	movs	r3, #128	; 0x80
 800dcb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcb6:	bf00      	nop
 800dcb8:	e128      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4ab6      	ldr	r2, [pc, #728]	; (800df98 <UART_SetConfig+0x65c>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d178      	bne.n	800ddb6 <UART_SetConfig+0x47a>
 800dcc4:	4bb5      	ldr	r3, [pc, #724]	; (800df9c <UART_SetConfig+0x660>)
 800dcc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dccc:	2b28      	cmp	r3, #40	; 0x28
 800dcce:	d86d      	bhi.n	800ddac <UART_SetConfig+0x470>
 800dcd0:	a201      	add	r2, pc, #4	; (adr r2, 800dcd8 <UART_SetConfig+0x39c>)
 800dcd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd6:	bf00      	nop
 800dcd8:	0800dd7d 	.word	0x0800dd7d
 800dcdc:	0800ddad 	.word	0x0800ddad
 800dce0:	0800ddad 	.word	0x0800ddad
 800dce4:	0800ddad 	.word	0x0800ddad
 800dce8:	0800ddad 	.word	0x0800ddad
 800dcec:	0800ddad 	.word	0x0800ddad
 800dcf0:	0800ddad 	.word	0x0800ddad
 800dcf4:	0800ddad 	.word	0x0800ddad
 800dcf8:	0800dd85 	.word	0x0800dd85
 800dcfc:	0800ddad 	.word	0x0800ddad
 800dd00:	0800ddad 	.word	0x0800ddad
 800dd04:	0800ddad 	.word	0x0800ddad
 800dd08:	0800ddad 	.word	0x0800ddad
 800dd0c:	0800ddad 	.word	0x0800ddad
 800dd10:	0800ddad 	.word	0x0800ddad
 800dd14:	0800ddad 	.word	0x0800ddad
 800dd18:	0800dd8d 	.word	0x0800dd8d
 800dd1c:	0800ddad 	.word	0x0800ddad
 800dd20:	0800ddad 	.word	0x0800ddad
 800dd24:	0800ddad 	.word	0x0800ddad
 800dd28:	0800ddad 	.word	0x0800ddad
 800dd2c:	0800ddad 	.word	0x0800ddad
 800dd30:	0800ddad 	.word	0x0800ddad
 800dd34:	0800ddad 	.word	0x0800ddad
 800dd38:	0800dd95 	.word	0x0800dd95
 800dd3c:	0800ddad 	.word	0x0800ddad
 800dd40:	0800ddad 	.word	0x0800ddad
 800dd44:	0800ddad 	.word	0x0800ddad
 800dd48:	0800ddad 	.word	0x0800ddad
 800dd4c:	0800ddad 	.word	0x0800ddad
 800dd50:	0800ddad 	.word	0x0800ddad
 800dd54:	0800ddad 	.word	0x0800ddad
 800dd58:	0800dd9d 	.word	0x0800dd9d
 800dd5c:	0800ddad 	.word	0x0800ddad
 800dd60:	0800ddad 	.word	0x0800ddad
 800dd64:	0800ddad 	.word	0x0800ddad
 800dd68:	0800ddad 	.word	0x0800ddad
 800dd6c:	0800ddad 	.word	0x0800ddad
 800dd70:	0800ddad 	.word	0x0800ddad
 800dd74:	0800ddad 	.word	0x0800ddad
 800dd78:	0800dda5 	.word	0x0800dda5
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd82:	e0c3      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dd84:	2304      	movs	r3, #4
 800dd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd8a:	e0bf      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dd8c:	2308      	movs	r3, #8
 800dd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd92:	e0bb      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dd94:	2310      	movs	r3, #16
 800dd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd9a:	e0b7      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dd9c:	2320      	movs	r3, #32
 800dd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dda2:	e0b3      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dda4:	2340      	movs	r3, #64	; 0x40
 800dda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddaa:	e0af      	b.n	800df0c <UART_SetConfig+0x5d0>
 800ddac:	2380      	movs	r3, #128	; 0x80
 800ddae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddb2:	bf00      	nop
 800ddb4:	e0aa      	b.n	800df0c <UART_SetConfig+0x5d0>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a79      	ldr	r2, [pc, #484]	; (800dfa0 <UART_SetConfig+0x664>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d132      	bne.n	800de26 <UART_SetConfig+0x4ea>
 800ddc0:	4b76      	ldr	r3, [pc, #472]	; (800df9c <UART_SetConfig+0x660>)
 800ddc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddc4:	f003 0307 	and.w	r3, r3, #7
 800ddc8:	2b05      	cmp	r3, #5
 800ddca:	d827      	bhi.n	800de1c <UART_SetConfig+0x4e0>
 800ddcc:	a201      	add	r2, pc, #4	; (adr r2, 800ddd4 <UART_SetConfig+0x498>)
 800ddce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd2:	bf00      	nop
 800ddd4:	0800dded 	.word	0x0800dded
 800ddd8:	0800ddf5 	.word	0x0800ddf5
 800dddc:	0800ddfd 	.word	0x0800ddfd
 800dde0:	0800de05 	.word	0x0800de05
 800dde4:	0800de0d 	.word	0x0800de0d
 800dde8:	0800de15 	.word	0x0800de15
 800ddec:	2300      	movs	r3, #0
 800ddee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddf2:	e08b      	b.n	800df0c <UART_SetConfig+0x5d0>
 800ddf4:	2304      	movs	r3, #4
 800ddf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddfa:	e087      	b.n	800df0c <UART_SetConfig+0x5d0>
 800ddfc:	2308      	movs	r3, #8
 800ddfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de02:	e083      	b.n	800df0c <UART_SetConfig+0x5d0>
 800de04:	2310      	movs	r3, #16
 800de06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de0a:	e07f      	b.n	800df0c <UART_SetConfig+0x5d0>
 800de0c:	2320      	movs	r3, #32
 800de0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de12:	e07b      	b.n	800df0c <UART_SetConfig+0x5d0>
 800de14:	2340      	movs	r3, #64	; 0x40
 800de16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de1a:	e077      	b.n	800df0c <UART_SetConfig+0x5d0>
 800de1c:	2380      	movs	r3, #128	; 0x80
 800de1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de22:	bf00      	nop
 800de24:	e072      	b.n	800df0c <UART_SetConfig+0x5d0>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a5e      	ldr	r2, [pc, #376]	; (800dfa4 <UART_SetConfig+0x668>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d132      	bne.n	800de96 <UART_SetConfig+0x55a>
 800de30:	4b5a      	ldr	r3, [pc, #360]	; (800df9c <UART_SetConfig+0x660>)
 800de32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de34:	f003 0307 	and.w	r3, r3, #7
 800de38:	2b05      	cmp	r3, #5
 800de3a:	d827      	bhi.n	800de8c <UART_SetConfig+0x550>
 800de3c:	a201      	add	r2, pc, #4	; (adr r2, 800de44 <UART_SetConfig+0x508>)
 800de3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de42:	bf00      	nop
 800de44:	0800de5d 	.word	0x0800de5d
 800de48:	0800de65 	.word	0x0800de65
 800de4c:	0800de6d 	.word	0x0800de6d
 800de50:	0800de75 	.word	0x0800de75
 800de54:	0800de7d 	.word	0x0800de7d
 800de58:	0800de85 	.word	0x0800de85
 800de5c:	2300      	movs	r3, #0
 800de5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de62:	e053      	b.n	800df0c <UART_SetConfig+0x5d0>
 800de64:	2304      	movs	r3, #4
 800de66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de6a:	e04f      	b.n	800df0c <UART_SetConfig+0x5d0>
 800de6c:	2308      	movs	r3, #8
 800de6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de72:	e04b      	b.n	800df0c <UART_SetConfig+0x5d0>
 800de74:	2310      	movs	r3, #16
 800de76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de7a:	e047      	b.n	800df0c <UART_SetConfig+0x5d0>
 800de7c:	2320      	movs	r3, #32
 800de7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de82:	e043      	b.n	800df0c <UART_SetConfig+0x5d0>
 800de84:	2340      	movs	r3, #64	; 0x40
 800de86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de8a:	e03f      	b.n	800df0c <UART_SetConfig+0x5d0>
 800de8c:	2380      	movs	r3, #128	; 0x80
 800de8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de92:	bf00      	nop
 800de94:	e03a      	b.n	800df0c <UART_SetConfig+0x5d0>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4a43      	ldr	r2, [pc, #268]	; (800dfa8 <UART_SetConfig+0x66c>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d132      	bne.n	800df06 <UART_SetConfig+0x5ca>
 800dea0:	4b3e      	ldr	r3, [pc, #248]	; (800df9c <UART_SetConfig+0x660>)
 800dea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dea4:	f003 0307 	and.w	r3, r3, #7
 800dea8:	2b05      	cmp	r3, #5
 800deaa:	d827      	bhi.n	800defc <UART_SetConfig+0x5c0>
 800deac:	a201      	add	r2, pc, #4	; (adr r2, 800deb4 <UART_SetConfig+0x578>)
 800deae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb2:	bf00      	nop
 800deb4:	0800decd 	.word	0x0800decd
 800deb8:	0800ded5 	.word	0x0800ded5
 800debc:	0800dedd 	.word	0x0800dedd
 800dec0:	0800dee5 	.word	0x0800dee5
 800dec4:	0800deed 	.word	0x0800deed
 800dec8:	0800def5 	.word	0x0800def5
 800decc:	2302      	movs	r3, #2
 800dece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ded2:	e01b      	b.n	800df0c <UART_SetConfig+0x5d0>
 800ded4:	2304      	movs	r3, #4
 800ded6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800deda:	e017      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dedc:	2308      	movs	r3, #8
 800dede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dee2:	e013      	b.n	800df0c <UART_SetConfig+0x5d0>
 800dee4:	2310      	movs	r3, #16
 800dee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800deea:	e00f      	b.n	800df0c <UART_SetConfig+0x5d0>
 800deec:	2320      	movs	r3, #32
 800deee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800def2:	e00b      	b.n	800df0c <UART_SetConfig+0x5d0>
 800def4:	2340      	movs	r3, #64	; 0x40
 800def6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800defa:	e007      	b.n	800df0c <UART_SetConfig+0x5d0>
 800defc:	2380      	movs	r3, #128	; 0x80
 800defe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df02:	bf00      	nop
 800df04:	e002      	b.n	800df0c <UART_SetConfig+0x5d0>
 800df06:	2380      	movs	r3, #128	; 0x80
 800df08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a25      	ldr	r2, [pc, #148]	; (800dfa8 <UART_SetConfig+0x66c>)
 800df12:	4293      	cmp	r3, r2
 800df14:	f040 80b8 	bne.w	800e088 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800df18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800df1c:	2b08      	cmp	r3, #8
 800df1e:	d019      	beq.n	800df54 <UART_SetConfig+0x618>
 800df20:	2b08      	cmp	r3, #8
 800df22:	dc04      	bgt.n	800df2e <UART_SetConfig+0x5f2>
 800df24:	2b02      	cmp	r3, #2
 800df26:	d009      	beq.n	800df3c <UART_SetConfig+0x600>
 800df28:	2b04      	cmp	r3, #4
 800df2a:	d00b      	beq.n	800df44 <UART_SetConfig+0x608>
 800df2c:	e042      	b.n	800dfb4 <UART_SetConfig+0x678>
 800df2e:	2b20      	cmp	r3, #32
 800df30:	d02b      	beq.n	800df8a <UART_SetConfig+0x64e>
 800df32:	2b40      	cmp	r3, #64	; 0x40
 800df34:	d02c      	beq.n	800df90 <UART_SetConfig+0x654>
 800df36:	2b10      	cmp	r3, #16
 800df38:	d014      	beq.n	800df64 <UART_SetConfig+0x628>
 800df3a:	e03b      	b.n	800dfb4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800df3c:	f7fc f878 	bl	800a030 <HAL_RCCEx_GetD3PCLK1Freq>
 800df40:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800df42:	e03d      	b.n	800dfc0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df44:	f107 0314 	add.w	r3, r7, #20
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fc f887 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df52:	e035      	b.n	800dfc0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df54:	f107 0308 	add.w	r3, r7, #8
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fc f9cb 	bl	800a2f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df62:	e02d      	b.n	800dfc0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df64:	4b0d      	ldr	r3, [pc, #52]	; (800df9c <UART_SetConfig+0x660>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f003 0320 	and.w	r3, r3, #32
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d009      	beq.n	800df84 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df70:	4b0a      	ldr	r3, [pc, #40]	; (800df9c <UART_SetConfig+0x660>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	08db      	lsrs	r3, r3, #3
 800df76:	f003 0303 	and.w	r3, r3, #3
 800df7a:	4a0c      	ldr	r2, [pc, #48]	; (800dfac <UART_SetConfig+0x670>)
 800df7c:	fa22 f303 	lsr.w	r3, r2, r3
 800df80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df82:	e01d      	b.n	800dfc0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800df84:	4b09      	ldr	r3, [pc, #36]	; (800dfac <UART_SetConfig+0x670>)
 800df86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df88:	e01a      	b.n	800dfc0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df8a:	4b09      	ldr	r3, [pc, #36]	; (800dfb0 <UART_SetConfig+0x674>)
 800df8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df8e:	e017      	b.n	800dfc0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df96:	e013      	b.n	800dfc0 <UART_SetConfig+0x684>
 800df98:	40011400 	.word	0x40011400
 800df9c:	58024400 	.word	0x58024400
 800dfa0:	40007800 	.word	0x40007800
 800dfa4:	40007c00 	.word	0x40007c00
 800dfa8:	58000c00 	.word	0x58000c00
 800dfac:	03d09000 	.word	0x03d09000
 800dfb0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800dfbe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	f000 824d 	beq.w	800e462 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfcc:	4aad      	ldr	r2, [pc, #692]	; (800e284 <UART_SetConfig+0x948>)
 800dfce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfda:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	685a      	ldr	r2, [r3, #4]
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	005b      	lsls	r3, r3, #1
 800dfe4:	4413      	add	r3, r2
 800dfe6:	6a3a      	ldr	r2, [r7, #32]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d305      	bcc.n	800dff8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dff2:	6a3a      	ldr	r2, [r7, #32]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d903      	bls.n	800e000 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800dff8:	2301      	movs	r3, #1
 800dffa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dffe:	e230      	b.n	800e462 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e002:	4618      	mov	r0, r3
 800e004:	f04f 0100 	mov.w	r1, #0
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00c:	4a9d      	ldr	r2, [pc, #628]	; (800e284 <UART_SetConfig+0x948>)
 800e00e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e012:	b29b      	uxth	r3, r3
 800e014:	f04f 0400 	mov.w	r4, #0
 800e018:	461a      	mov	r2, r3
 800e01a:	4623      	mov	r3, r4
 800e01c:	f7f2 f9b8 	bl	8000390 <__aeabi_uldivmod>
 800e020:	4603      	mov	r3, r0
 800e022:	460c      	mov	r4, r1
 800e024:	4619      	mov	r1, r3
 800e026:	4622      	mov	r2, r4
 800e028:	f04f 0300 	mov.w	r3, #0
 800e02c:	f04f 0400 	mov.w	r4, #0
 800e030:	0214      	lsls	r4, r2, #8
 800e032:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e036:	020b      	lsls	r3, r1, #8
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	6852      	ldr	r2, [r2, #4]
 800e03c:	0852      	lsrs	r2, r2, #1
 800e03e:	4611      	mov	r1, r2
 800e040:	f04f 0200 	mov.w	r2, #0
 800e044:	eb13 0b01 	adds.w	fp, r3, r1
 800e048:	eb44 0c02 	adc.w	ip, r4, r2
 800e04c:	4658      	mov	r0, fp
 800e04e:	4661      	mov	r1, ip
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	f04f 0400 	mov.w	r4, #0
 800e058:	461a      	mov	r2, r3
 800e05a:	4623      	mov	r3, r4
 800e05c:	f7f2 f998 	bl	8000390 <__aeabi_uldivmod>
 800e060:	4603      	mov	r3, r0
 800e062:	460c      	mov	r4, r1
 800e064:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e06c:	d308      	bcc.n	800e080 <UART_SetConfig+0x744>
 800e06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e074:	d204      	bcs.n	800e080 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e07c:	60da      	str	r2, [r3, #12]
 800e07e:	e1f0      	b.n	800e462 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800e080:	2301      	movs	r3, #1
 800e082:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e086:	e1ec      	b.n	800e462 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	69db      	ldr	r3, [r3, #28]
 800e08c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e090:	f040 8100 	bne.w	800e294 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800e094:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e098:	2b40      	cmp	r3, #64	; 0x40
 800e09a:	f200 80b7 	bhi.w	800e20c <UART_SetConfig+0x8d0>
 800e09e:	a201      	add	r2, pc, #4	; (adr r2, 800e0a4 <UART_SetConfig+0x768>)
 800e0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a4:	0800e1a9 	.word	0x0800e1a9
 800e0a8:	0800e1b1 	.word	0x0800e1b1
 800e0ac:	0800e20d 	.word	0x0800e20d
 800e0b0:	0800e20d 	.word	0x0800e20d
 800e0b4:	0800e1b9 	.word	0x0800e1b9
 800e0b8:	0800e20d 	.word	0x0800e20d
 800e0bc:	0800e20d 	.word	0x0800e20d
 800e0c0:	0800e20d 	.word	0x0800e20d
 800e0c4:	0800e1c9 	.word	0x0800e1c9
 800e0c8:	0800e20d 	.word	0x0800e20d
 800e0cc:	0800e20d 	.word	0x0800e20d
 800e0d0:	0800e20d 	.word	0x0800e20d
 800e0d4:	0800e20d 	.word	0x0800e20d
 800e0d8:	0800e20d 	.word	0x0800e20d
 800e0dc:	0800e20d 	.word	0x0800e20d
 800e0e0:	0800e20d 	.word	0x0800e20d
 800e0e4:	0800e1d9 	.word	0x0800e1d9
 800e0e8:	0800e20d 	.word	0x0800e20d
 800e0ec:	0800e20d 	.word	0x0800e20d
 800e0f0:	0800e20d 	.word	0x0800e20d
 800e0f4:	0800e20d 	.word	0x0800e20d
 800e0f8:	0800e20d 	.word	0x0800e20d
 800e0fc:	0800e20d 	.word	0x0800e20d
 800e100:	0800e20d 	.word	0x0800e20d
 800e104:	0800e20d 	.word	0x0800e20d
 800e108:	0800e20d 	.word	0x0800e20d
 800e10c:	0800e20d 	.word	0x0800e20d
 800e110:	0800e20d 	.word	0x0800e20d
 800e114:	0800e20d 	.word	0x0800e20d
 800e118:	0800e20d 	.word	0x0800e20d
 800e11c:	0800e20d 	.word	0x0800e20d
 800e120:	0800e20d 	.word	0x0800e20d
 800e124:	0800e1ff 	.word	0x0800e1ff
 800e128:	0800e20d 	.word	0x0800e20d
 800e12c:	0800e20d 	.word	0x0800e20d
 800e130:	0800e20d 	.word	0x0800e20d
 800e134:	0800e20d 	.word	0x0800e20d
 800e138:	0800e20d 	.word	0x0800e20d
 800e13c:	0800e20d 	.word	0x0800e20d
 800e140:	0800e20d 	.word	0x0800e20d
 800e144:	0800e20d 	.word	0x0800e20d
 800e148:	0800e20d 	.word	0x0800e20d
 800e14c:	0800e20d 	.word	0x0800e20d
 800e150:	0800e20d 	.word	0x0800e20d
 800e154:	0800e20d 	.word	0x0800e20d
 800e158:	0800e20d 	.word	0x0800e20d
 800e15c:	0800e20d 	.word	0x0800e20d
 800e160:	0800e20d 	.word	0x0800e20d
 800e164:	0800e20d 	.word	0x0800e20d
 800e168:	0800e20d 	.word	0x0800e20d
 800e16c:	0800e20d 	.word	0x0800e20d
 800e170:	0800e20d 	.word	0x0800e20d
 800e174:	0800e20d 	.word	0x0800e20d
 800e178:	0800e20d 	.word	0x0800e20d
 800e17c:	0800e20d 	.word	0x0800e20d
 800e180:	0800e20d 	.word	0x0800e20d
 800e184:	0800e20d 	.word	0x0800e20d
 800e188:	0800e20d 	.word	0x0800e20d
 800e18c:	0800e20d 	.word	0x0800e20d
 800e190:	0800e20d 	.word	0x0800e20d
 800e194:	0800e20d 	.word	0x0800e20d
 800e198:	0800e20d 	.word	0x0800e20d
 800e19c:	0800e20d 	.word	0x0800e20d
 800e1a0:	0800e20d 	.word	0x0800e20d
 800e1a4:	0800e205 	.word	0x0800e205
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1a8:	f7fa fd6e 	bl	8008c88 <HAL_RCC_GetPCLK1Freq>
 800e1ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e1ae:	e033      	b.n	800e218 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1b0:	f7fa fd80 	bl	8008cb4 <HAL_RCC_GetPCLK2Freq>
 800e1b4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e1b6:	e02f      	b.n	800e218 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1b8:	f107 0314 	add.w	r3, r7, #20
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fb ff4d 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e1c6:	e027      	b.n	800e218 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1c8:	f107 0308 	add.w	r3, r7, #8
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7fc f891 	bl	800a2f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e1d6:	e01f      	b.n	800e218 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1d8:	4b2b      	ldr	r3, [pc, #172]	; (800e288 <UART_SetConfig+0x94c>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f003 0320 	and.w	r3, r3, #32
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d009      	beq.n	800e1f8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1e4:	4b28      	ldr	r3, [pc, #160]	; (800e288 <UART_SetConfig+0x94c>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	08db      	lsrs	r3, r3, #3
 800e1ea:	f003 0303 	and.w	r3, r3, #3
 800e1ee:	4a27      	ldr	r2, [pc, #156]	; (800e28c <UART_SetConfig+0x950>)
 800e1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1f6:	e00f      	b.n	800e218 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800e1f8:	4b24      	ldr	r3, [pc, #144]	; (800e28c <UART_SetConfig+0x950>)
 800e1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e1fc:	e00c      	b.n	800e218 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1fe:	4b24      	ldr	r3, [pc, #144]	; (800e290 <UART_SetConfig+0x954>)
 800e200:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e202:	e009      	b.n	800e218 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e20a:	e005      	b.n	800e218 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800e20c:	2300      	movs	r3, #0
 800e20e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e210:	2301      	movs	r3, #1
 800e212:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e216:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f000 8121 	beq.w	800e462 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e224:	4a17      	ldr	r2, [pc, #92]	; (800e284 <UART_SetConfig+0x948>)
 800e226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e22a:	461a      	mov	r2, r3
 800e22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e232:	005a      	lsls	r2, r3, #1
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	085b      	lsrs	r3, r3, #1
 800e23a:	441a      	add	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	fbb2 f3f3 	udiv	r3, r2, r3
 800e244:	b29b      	uxth	r3, r3
 800e246:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24a:	2b0f      	cmp	r3, #15
 800e24c:	d916      	bls.n	800e27c <UART_SetConfig+0x940>
 800e24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e254:	d212      	bcs.n	800e27c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	b29b      	uxth	r3, r3
 800e25a:	f023 030f 	bic.w	r3, r3, #15
 800e25e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e262:	085b      	lsrs	r3, r3, #1
 800e264:	b29b      	uxth	r3, r3
 800e266:	f003 0307 	and.w	r3, r3, #7
 800e26a:	b29a      	uxth	r2, r3
 800e26c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e26e:	4313      	orrs	r3, r2
 800e270:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e278:	60da      	str	r2, [r3, #12]
 800e27a:	e0f2      	b.n	800e462 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800e27c:	2301      	movs	r3, #1
 800e27e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e282:	e0ee      	b.n	800e462 <UART_SetConfig+0xb26>
 800e284:	08017e68 	.word	0x08017e68
 800e288:	58024400 	.word	0x58024400
 800e28c:	03d09000 	.word	0x03d09000
 800e290:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800e294:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e298:	2b40      	cmp	r3, #64	; 0x40
 800e29a:	f200 80b7 	bhi.w	800e40c <UART_SetConfig+0xad0>
 800e29e:	a201      	add	r2, pc, #4	; (adr r2, 800e2a4 <UART_SetConfig+0x968>)
 800e2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a4:	0800e3a9 	.word	0x0800e3a9
 800e2a8:	0800e3b1 	.word	0x0800e3b1
 800e2ac:	0800e40d 	.word	0x0800e40d
 800e2b0:	0800e40d 	.word	0x0800e40d
 800e2b4:	0800e3b9 	.word	0x0800e3b9
 800e2b8:	0800e40d 	.word	0x0800e40d
 800e2bc:	0800e40d 	.word	0x0800e40d
 800e2c0:	0800e40d 	.word	0x0800e40d
 800e2c4:	0800e3c9 	.word	0x0800e3c9
 800e2c8:	0800e40d 	.word	0x0800e40d
 800e2cc:	0800e40d 	.word	0x0800e40d
 800e2d0:	0800e40d 	.word	0x0800e40d
 800e2d4:	0800e40d 	.word	0x0800e40d
 800e2d8:	0800e40d 	.word	0x0800e40d
 800e2dc:	0800e40d 	.word	0x0800e40d
 800e2e0:	0800e40d 	.word	0x0800e40d
 800e2e4:	0800e3d9 	.word	0x0800e3d9
 800e2e8:	0800e40d 	.word	0x0800e40d
 800e2ec:	0800e40d 	.word	0x0800e40d
 800e2f0:	0800e40d 	.word	0x0800e40d
 800e2f4:	0800e40d 	.word	0x0800e40d
 800e2f8:	0800e40d 	.word	0x0800e40d
 800e2fc:	0800e40d 	.word	0x0800e40d
 800e300:	0800e40d 	.word	0x0800e40d
 800e304:	0800e40d 	.word	0x0800e40d
 800e308:	0800e40d 	.word	0x0800e40d
 800e30c:	0800e40d 	.word	0x0800e40d
 800e310:	0800e40d 	.word	0x0800e40d
 800e314:	0800e40d 	.word	0x0800e40d
 800e318:	0800e40d 	.word	0x0800e40d
 800e31c:	0800e40d 	.word	0x0800e40d
 800e320:	0800e40d 	.word	0x0800e40d
 800e324:	0800e3ff 	.word	0x0800e3ff
 800e328:	0800e40d 	.word	0x0800e40d
 800e32c:	0800e40d 	.word	0x0800e40d
 800e330:	0800e40d 	.word	0x0800e40d
 800e334:	0800e40d 	.word	0x0800e40d
 800e338:	0800e40d 	.word	0x0800e40d
 800e33c:	0800e40d 	.word	0x0800e40d
 800e340:	0800e40d 	.word	0x0800e40d
 800e344:	0800e40d 	.word	0x0800e40d
 800e348:	0800e40d 	.word	0x0800e40d
 800e34c:	0800e40d 	.word	0x0800e40d
 800e350:	0800e40d 	.word	0x0800e40d
 800e354:	0800e40d 	.word	0x0800e40d
 800e358:	0800e40d 	.word	0x0800e40d
 800e35c:	0800e40d 	.word	0x0800e40d
 800e360:	0800e40d 	.word	0x0800e40d
 800e364:	0800e40d 	.word	0x0800e40d
 800e368:	0800e40d 	.word	0x0800e40d
 800e36c:	0800e40d 	.word	0x0800e40d
 800e370:	0800e40d 	.word	0x0800e40d
 800e374:	0800e40d 	.word	0x0800e40d
 800e378:	0800e40d 	.word	0x0800e40d
 800e37c:	0800e40d 	.word	0x0800e40d
 800e380:	0800e40d 	.word	0x0800e40d
 800e384:	0800e40d 	.word	0x0800e40d
 800e388:	0800e40d 	.word	0x0800e40d
 800e38c:	0800e40d 	.word	0x0800e40d
 800e390:	0800e40d 	.word	0x0800e40d
 800e394:	0800e40d 	.word	0x0800e40d
 800e398:	0800e40d 	.word	0x0800e40d
 800e39c:	0800e40d 	.word	0x0800e40d
 800e3a0:	0800e40d 	.word	0x0800e40d
 800e3a4:	0800e405 	.word	0x0800e405
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3a8:	f7fa fc6e 	bl	8008c88 <HAL_RCC_GetPCLK1Freq>
 800e3ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e3ae:	e033      	b.n	800e418 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3b0:	f7fa fc80 	bl	8008cb4 <HAL_RCC_GetPCLK2Freq>
 800e3b4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e3b6:	e02f      	b.n	800e418 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3b8:	f107 0314 	add.w	r3, r7, #20
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7fb fe4d 	bl	800a05c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e3c6:	e027      	b.n	800e418 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3c8:	f107 0308 	add.w	r3, r7, #8
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7fb ff91 	bl	800a2f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e3d6:	e01f      	b.n	800e418 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3d8:	4b2c      	ldr	r3, [pc, #176]	; (800e48c <UART_SetConfig+0xb50>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f003 0320 	and.w	r3, r3, #32
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d009      	beq.n	800e3f8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3e4:	4b29      	ldr	r3, [pc, #164]	; (800e48c <UART_SetConfig+0xb50>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	08db      	lsrs	r3, r3, #3
 800e3ea:	f003 0303 	and.w	r3, r3, #3
 800e3ee:	4a28      	ldr	r2, [pc, #160]	; (800e490 <UART_SetConfig+0xb54>)
 800e3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3f6:	e00f      	b.n	800e418 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800e3f8:	4b25      	ldr	r3, [pc, #148]	; (800e490 <UART_SetConfig+0xb54>)
 800e3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e3fc:	e00c      	b.n	800e418 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3fe:	4b25      	ldr	r3, [pc, #148]	; (800e494 <UART_SetConfig+0xb58>)
 800e400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e402:	e009      	b.n	800e418 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e408:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e40a:	e005      	b.n	800e418 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800e40c:	2300      	movs	r3, #0
 800e40e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e410:	2301      	movs	r3, #1
 800e412:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e416:	bf00      	nop
    }

    if (pclk != 0U)
 800e418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d021      	beq.n	800e462 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e422:	4a1d      	ldr	r2, [pc, #116]	; (800e498 <UART_SetConfig+0xb5c>)
 800e424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e428:	461a      	mov	r2, r3
 800e42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	085b      	lsrs	r3, r3, #1
 800e436:	441a      	add	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e440:	b29b      	uxth	r3, r3
 800e442:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e446:	2b0f      	cmp	r3, #15
 800e448:	d908      	bls.n	800e45c <UART_SetConfig+0xb20>
 800e44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e450:	d204      	bcs.n	800e45c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e458:	60da      	str	r2, [r3, #12]
 800e45a:	e002      	b.n	800e462 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800e45c:	2301      	movs	r3, #1
 800e45e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2201      	movs	r2, #1
 800e466:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2201      	movs	r2, #1
 800e46e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2200      	movs	r2, #0
 800e476:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2200      	movs	r2, #0
 800e47c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800e47e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e482:	4618      	mov	r0, r3
 800e484:	3738      	adds	r7, #56	; 0x38
 800e486:	46bd      	mov	sp, r7
 800e488:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800e48c:	58024400 	.word	0x58024400
 800e490:	03d09000 	.word	0x03d09000
 800e494:	003d0900 	.word	0x003d0900
 800e498:	08017e68 	.word	0x08017e68

0800e49c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a8:	f003 0301 	and.w	r3, r3, #1
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00a      	beq.n	800e4c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	430a      	orrs	r2, r1
 800e4c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ca:	f003 0302 	and.w	r3, r3, #2
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d00a      	beq.n	800e4e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	430a      	orrs	r2, r1
 800e4e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ec:	f003 0304 	and.w	r3, r3, #4
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00a      	beq.n	800e50a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	430a      	orrs	r2, r1
 800e508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e50e:	f003 0308 	and.w	r3, r3, #8
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00a      	beq.n	800e52c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	430a      	orrs	r2, r1
 800e52a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e530:	f003 0310 	and.w	r3, r3, #16
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00a      	beq.n	800e54e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	689b      	ldr	r3, [r3, #8]
 800e53e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	430a      	orrs	r2, r1
 800e54c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e552:	f003 0320 	and.w	r3, r3, #32
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00a      	beq.n	800e570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	430a      	orrs	r2, r1
 800e56e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d01a      	beq.n	800e5b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	430a      	orrs	r2, r1
 800e590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e59a:	d10a      	bne.n	800e5b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	430a      	orrs	r2, r1
 800e5b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00a      	beq.n	800e5d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	430a      	orrs	r2, r1
 800e5d2:	605a      	str	r2, [r3, #4]
  }
}
 800e5d4:	bf00      	nop
 800e5d6:	370c      	adds	r7, #12
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr

0800e5e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b086      	sub	sp, #24
 800e5e4:	af02      	add	r7, sp, #8
 800e5e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800e5f0:	f7f4 fb62 	bl	8002cb8 <HAL_GetTick>
 800e5f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f003 0308 	and.w	r3, r3, #8
 800e600:	2b08      	cmp	r3, #8
 800e602:	d10e      	bne.n	800e622 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2200      	movs	r2, #0
 800e60e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 f82c 	bl	800e670 <UART_WaitOnFlagUntilTimeout>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e61e:	2303      	movs	r3, #3
 800e620:	e022      	b.n	800e668 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f003 0304 	and.w	r3, r3, #4
 800e62c:	2b04      	cmp	r3, #4
 800e62e:	d10e      	bne.n	800e64e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e634:	9300      	str	r3, [sp, #0]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2200      	movs	r2, #0
 800e63a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f816 	bl	800e670 <UART_WaitOnFlagUntilTimeout>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d001      	beq.n	800e64e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e64a:	2303      	movs	r3, #3
 800e64c:	e00c      	b.n	800e668 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2220      	movs	r2, #32
 800e652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2220      	movs	r2, #32
 800e65a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2200      	movs	r2, #0
 800e662:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	603b      	str	r3, [r7, #0]
 800e67c:	4613      	mov	r3, r2
 800e67e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e680:	e062      	b.n	800e748 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e688:	d05e      	beq.n	800e748 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e68a:	f7f4 fb15 	bl	8002cb8 <HAL_GetTick>
 800e68e:	4602      	mov	r2, r0
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	1ad3      	subs	r3, r2, r3
 800e694:	69ba      	ldr	r2, [r7, #24]
 800e696:	429a      	cmp	r2, r3
 800e698:	d302      	bcc.n	800e6a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d11d      	bne.n	800e6dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e6ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	689a      	ldr	r2, [r3, #8]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f022 0201 	bic.w	r2, r2, #1
 800e6be:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2220      	movs	r2, #32
 800e6c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2220      	movs	r2, #32
 800e6cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800e6d8:	2303      	movs	r3, #3
 800e6da:	e045      	b.n	800e768 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f003 0304 	and.w	r3, r3, #4
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d02e      	beq.n	800e748 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	69db      	ldr	r3, [r3, #28]
 800e6f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e6f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e6f8:	d126      	bne.n	800e748 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e702:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e712:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	689a      	ldr	r2, [r3, #8]
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f022 0201 	bic.w	r2, r2, #1
 800e722:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2220      	movs	r2, #32
 800e728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2220      	movs	r2, #32
 800e730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2220      	movs	r2, #32
 800e738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2200      	movs	r2, #0
 800e740:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800e744:	2303      	movs	r3, #3
 800e746:	e00f      	b.n	800e768 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	69da      	ldr	r2, [r3, #28]
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	4013      	ands	r3, r2
 800e752:	68ba      	ldr	r2, [r7, #8]
 800e754:	429a      	cmp	r2, r3
 800e756:	bf0c      	ite	eq
 800e758:	2301      	moveq	r3, #1
 800e75a:	2300      	movne	r3, #0
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	461a      	mov	r2, r3
 800e760:	79fb      	ldrb	r3, [r7, #7]
 800e762:	429a      	cmp	r2, r3
 800e764:	d08d      	beq.n	800e682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e766:	2300      	movs	r3, #0
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3710      	adds	r7, #16
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d101      	bne.n	800e786 <HAL_UARTEx_DisableFifoMode+0x16>
 800e782:	2302      	movs	r3, #2
 800e784:	e027      	b.n	800e7d6 <HAL_UARTEx_DisableFifoMode+0x66>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2201      	movs	r2, #1
 800e78a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2224      	movs	r2, #36	; 0x24
 800e792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f022 0201 	bic.w	r2, r2, #1
 800e7ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e7b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2220      	movs	r2, #32
 800e7c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b084      	sub	sp, #16
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
 800e7ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d101      	bne.n	800e7fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e7f6:	2302      	movs	r3, #2
 800e7f8:	e02d      	b.n	800e856 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2224      	movs	r2, #36	; 0x24
 800e806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f022 0201 	bic.w	r2, r2, #1
 800e820:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	689b      	ldr	r3, [r3, #8]
 800e828:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	683a      	ldr	r2, [r7, #0]
 800e832:	430a      	orrs	r2, r1
 800e834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 f850 	bl	800e8dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2220      	movs	r2, #32
 800e848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b084      	sub	sp, #16
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
 800e866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d101      	bne.n	800e876 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e872:	2302      	movs	r3, #2
 800e874:	e02d      	b.n	800e8d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2201      	movs	r2, #1
 800e87a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2224      	movs	r2, #36	; 0x24
 800e882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f022 0201 	bic.w	r2, r2, #1
 800e89c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	683a      	ldr	r2, [r7, #0]
 800e8ae:	430a      	orrs	r2, r1
 800e8b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 f812 	bl	800e8dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2220      	movs	r2, #32
 800e8c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
	...

0800e8dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b089      	sub	sp, #36	; 0x24
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800e8e4:	4a2f      	ldr	r2, [pc, #188]	; (800e9a4 <UARTEx_SetNbDataToProcess+0xc8>)
 800e8e6:	f107 0314 	add.w	r3, r7, #20
 800e8ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8ee:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800e8f2:	4a2d      	ldr	r2, [pc, #180]	; (800e9a8 <UARTEx_SetNbDataToProcess+0xcc>)
 800e8f4:	f107 030c 	add.w	r3, r7, #12
 800e8f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8fc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e904:	2b00      	cmp	r3, #0
 800e906:	d108      	bne.n	800e91a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2201      	movs	r2, #1
 800e90c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2201      	movs	r2, #1
 800e914:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e918:	e03d      	b.n	800e996 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e91a:	2310      	movs	r3, #16
 800e91c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e91e:	2310      	movs	r3, #16
 800e920:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	0e5b      	lsrs	r3, r3, #25
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	f003 0307 	and.w	r3, r3, #7
 800e930:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	0f5b      	lsrs	r3, r3, #29
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	f003 0307 	and.w	r3, r3, #7
 800e940:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800e942:	7fbb      	ldrb	r3, [r7, #30]
 800e944:	7f3a      	ldrb	r2, [r7, #28]
 800e946:	f107 0120 	add.w	r1, r7, #32
 800e94a:	440a      	add	r2, r1
 800e94c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e950:	fb02 f303 	mul.w	r3, r2, r3
 800e954:	7f3a      	ldrb	r2, [r7, #28]
 800e956:	f107 0120 	add.w	r1, r7, #32
 800e95a:	440a      	add	r2, r1
 800e95c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e960:	fb93 f3f2 	sdiv	r3, r3, r2
 800e964:	b29a      	uxth	r2, r3
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800e96c:	7ffb      	ldrb	r3, [r7, #31]
 800e96e:	7f7a      	ldrb	r2, [r7, #29]
 800e970:	f107 0120 	add.w	r1, r7, #32
 800e974:	440a      	add	r2, r1
 800e976:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800e97a:	fb02 f303 	mul.w	r3, r2, r3
 800e97e:	7f7a      	ldrb	r2, [r7, #29]
 800e980:	f107 0120 	add.w	r1, r7, #32
 800e984:	440a      	add	r2, r1
 800e986:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800e98a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e98e:	b29a      	uxth	r2, r3
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e996:	bf00      	nop
 800e998:	3724      	adds	r7, #36	; 0x24
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop
 800e9a4:	08017da8 	.word	0x08017da8
 800e9a8:	08017db0 	.word	0x08017db0

0800e9ac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e9ac:	b084      	sub	sp, #16
 800e9ae:	b480      	push	{r7}
 800e9b0:	b085      	sub	sp, #20
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
 800e9b6:	f107 001c 	add.w	r0, r7, #28
 800e9ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e9c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800e9c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e9c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800e9ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800e9ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800e9d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e9d4:	68fa      	ldr	r2, [r7, #12]
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	685a      	ldr	r2, [r3, #4]
 800e9de:	4b07      	ldr	r3, [pc, #28]	; (800e9fc <SDMMC_Init+0x50>)
 800e9e0:	4013      	ands	r3, r2
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	431a      	orrs	r2, r3
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e9ea:	2300      	movs	r3, #0
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3714      	adds	r7, #20
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	b004      	add	sp, #16
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	ffc02c00 	.word	0xffc02c00

0800ea00 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	370c      	adds	r7, #12
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ea1a:	b480      	push	{r7}
 800ea1c:	b083      	sub	sp, #12
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
 800ea22:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea2e:	2300      	movs	r3, #0
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f043 0203 	orr.w	r2, r3, #3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ea50:	2300      	movs	r3, #0
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	370c      	adds	r7, #12
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr

0800ea5e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ea5e:	b480      	push	{r7}
 800ea60:	b083      	sub	sp, #12
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f003 0303 	and.w	r3, r3, #3
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	370c      	adds	r7, #12
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr
	...

0800ea7c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ea86:	2300      	movs	r3, #0
 800ea88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ea9a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800eaa0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800eaa6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eaa8:	68fa      	ldr	r2, [r7, #12]
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	68da      	ldr	r2, [r3, #12]
 800eab2:	4b06      	ldr	r3, [pc, #24]	; (800eacc <SDMMC_SendCommand+0x50>)
 800eab4:	4013      	ands	r3, r2
 800eab6:	68fa      	ldr	r2, [r7, #12]
 800eab8:	431a      	orrs	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800eabe:	2300      	movs	r3, #0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3714      	adds	r7, #20
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr
 800eacc:	fffee0c0 	.word	0xfffee0c0

0800ead0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	691b      	ldr	r3, [r3, #16]
 800eadc:	b2db      	uxtb	r3, r3
}
 800eade:	4618      	mov	r0, r3
 800eae0:	370c      	adds	r7, #12
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr

0800eaea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800eaea:	b480      	push	{r7}
 800eaec:	b085      	sub	sp, #20
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
 800eaf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	3314      	adds	r3, #20
 800eaf8:	461a      	mov	r2, r3
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	4413      	add	r3, r2
 800eafe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3714      	adds	r7, #20
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr

0800eb10 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b085      	sub	sp, #20
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	685a      	ldr	r2, [r3, #4]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eb36:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800eb3c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800eb42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eb44:	68fa      	ldr	r2, [r7, #12]
 800eb46:	4313      	orrs	r3, r2
 800eb48:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	431a      	orrs	r2, r3
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800eb5a:	2300      	movs	r3, #0

}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3714      	adds	r7, #20
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr

0800eb68 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b088      	sub	sp, #32
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800eb76:	2310      	movs	r3, #16
 800eb78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb80:	2300      	movs	r3, #0
 800eb82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb8a:	f107 0308 	add.w	r3, r7, #8
 800eb8e:	4619      	mov	r1, r3
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f7ff ff73 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800eb96:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb9a:	2110      	movs	r1, #16
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 faaf 	bl	800f100 <SDMMC_GetCmdResp1>
 800eba2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eba4:	69fb      	ldr	r3, [r7, #28]
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3720      	adds	r7, #32
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}

0800ebae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b088      	sub	sp, #32
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	6078      	str	r0, [r7, #4]
 800ebb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ebbc:	2311      	movs	r3, #17
 800ebbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ebc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ebc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ebce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebd0:	f107 0308 	add.w	r3, r7, #8
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f7ff ff50 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ebdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebe0:	2111      	movs	r1, #17
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f000 fa8c 	bl	800f100 <SDMMC_GetCmdResp1>
 800ebe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebea:	69fb      	ldr	r3, [r7, #28]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3720      	adds	r7, #32
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b088      	sub	sp, #32
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ec02:	2312      	movs	r3, #18
 800ec04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec16:	f107 0308 	add.w	r3, r7, #8
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f7ff ff2d 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ec22:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec26:	2112      	movs	r1, #18
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f000 fa69 	bl	800f100 <SDMMC_GetCmdResp1>
 800ec2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec30:	69fb      	ldr	r3, [r7, #28]
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3720      	adds	r7, #32
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b088      	sub	sp, #32
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
 800ec42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ec48:	2318      	movs	r3, #24
 800ec4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec52:	2300      	movs	r3, #0
 800ec54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec5c:	f107 0308 	add.w	r3, r7, #8
 800ec60:	4619      	mov	r1, r3
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f7ff ff0a 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ec68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec6c:	2118      	movs	r1, #24
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 fa46 	bl	800f100 <SDMMC_GetCmdResp1>
 800ec74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec76:	69fb      	ldr	r3, [r7, #28]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3720      	adds	r7, #32
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b088      	sub	sp, #32
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ec8e:	2319      	movs	r3, #25
 800ec90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eca0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eca2:	f107 0308 	add.w	r3, r7, #8
 800eca6:	4619      	mov	r1, r3
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f7ff fee7 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ecae:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecb2:	2119      	movs	r1, #25
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 fa23 	bl	800f100 <SDMMC_GetCmdResp1>
 800ecba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecbc:	69fb      	ldr	r3, [r7, #28]
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3720      	adds	r7, #32
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
	...

0800ecc8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b088      	sub	sp, #32
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ecd4:	230c      	movs	r3, #12
 800ecd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecde:	2300      	movs	r3, #0
 800ece0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ece2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ece6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed00:	f107 0308 	add.w	r3, r7, #8
 800ed04:	4619      	mov	r1, r3
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f7ff feb8 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ed0c:	4a0b      	ldr	r2, [pc, #44]	; (800ed3c <SDMMC_CmdStopTransfer+0x74>)
 800ed0e:	210c      	movs	r1, #12
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 f9f5 	bl	800f100 <SDMMC_GetCmdResp1>
 800ed16:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed2a:	d101      	bne.n	800ed30 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ed30:	69fb      	ldr	r3, [r7, #28]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3720      	adds	r7, #32
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	05f5e100 	.word	0x05f5e100

0800ed40 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08a      	sub	sp, #40	; 0x28
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ed50:	2307      	movs	r3, #7
 800ed52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed58:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed62:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed64:	f107 0310 	add.w	r3, r7, #16
 800ed68:	4619      	mov	r1, r3
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f7ff fe86 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ed70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed74:	2107      	movs	r1, #7
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	f000 f9c2 	bl	800f100 <SDMMC_GetCmdResp1>
 800ed7c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ed7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3728      	adds	r7, #40	; 0x28
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b088      	sub	sp, #32
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ed90:	2300      	movs	r3, #0
 800ed92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ed94:	2300      	movs	r3, #0
 800ed96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eda0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eda4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eda6:	f107 0308 	add.w	r3, r7, #8
 800edaa:	4619      	mov	r1, r3
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7ff fe65 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 f976 	bl	800f0a4 <SDMMC_GetCmdError>
 800edb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edba:	69fb      	ldr	r3, [r7, #28]
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3720      	adds	r7, #32
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b088      	sub	sp, #32
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800edcc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800edd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800edd2:	2308      	movs	r3, #8
 800edd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800edd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eddc:	2300      	movs	r3, #0
 800edde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ede0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ede4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ede6:	f107 0308 	add.w	r3, r7, #8
 800edea:	4619      	mov	r1, r3
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f7ff fe45 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f000 fb78 	bl	800f4e8 <SDMMC_GetCmdResp7>
 800edf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edfa:	69fb      	ldr	r3, [r7, #28]
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3720      	adds	r7, #32
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b088      	sub	sp, #32
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ee12:	2337      	movs	r3, #55	; 0x37
 800ee14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee16:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee26:	f107 0308 	add.w	r3, r7, #8
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f7ff fe25 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ee32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee36:	2137      	movs	r1, #55	; 0x37
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 f961 	bl	800f100 <SDMMC_GetCmdResp1>
 800ee3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee40:	69fb      	ldr	r3, [r7, #28]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3720      	adds	r7, #32
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee4a:	b580      	push	{r7, lr}
 800ee4c:	b088      	sub	sp, #32
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
 800ee52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ee58:	2329      	movs	r3, #41	; 0x29
 800ee5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee62:	2300      	movs	r3, #0
 800ee64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee6c:	f107 0308 	add.w	r3, r7, #8
 800ee70:	4619      	mov	r1, r3
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f7ff fe02 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f000 fa7d 	bl	800f378 <SDMMC_GetCmdResp3>
 800ee7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee80:	69fb      	ldr	r3, [r7, #28]
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3720      	adds	r7, #32
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}

0800ee8a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b088      	sub	sp, #32
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	6078      	str	r0, [r7, #4]
 800ee92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ee98:	2306      	movs	r3, #6
 800ee9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eea2:	2300      	movs	r3, #0
 800eea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eeaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eeac:	f107 0308 	add.w	r3, r7, #8
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f7ff fde2 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800eeb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800eebc:	2106      	movs	r1, #6
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 f91e 	bl	800f100 <SDMMC_GetCmdResp1>
 800eec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eec6:	69fb      	ldr	r3, [r7, #28]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3720      	adds	r7, #32
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b088      	sub	sp, #32
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800eed8:	2300      	movs	r3, #0
 800eeda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800eedc:	2333      	movs	r3, #51	; 0x33
 800eede:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eee6:	2300      	movs	r3, #0
 800eee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eeea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eeee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eef0:	f107 0308 	add.w	r3, r7, #8
 800eef4:	4619      	mov	r1, r3
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f7ff fdc0 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800eefc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef00:	2133      	movs	r1, #51	; 0x33
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f000 f8fc 	bl	800f100 <SDMMC_GetCmdResp1>
 800ef08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef0a:	69fb      	ldr	r3, [r7, #28]
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3720      	adds	r7, #32
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b088      	sub	sp, #32
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ef20:	2302      	movs	r3, #2
 800ef22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ef24:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ef28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef34:	f107 0308 	add.w	r3, r7, #8
 800ef38:	4619      	mov	r1, r3
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f7ff fd9e 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 f9cf 	bl	800f2e4 <SDMMC_GetCmdResp2>
 800ef46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef48:	69fb      	ldr	r3, [r7, #28]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3720      	adds	r7, #32
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b088      	sub	sp, #32
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ef60:	2309      	movs	r3, #9
 800ef62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ef64:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ef68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef74:	f107 0308 	add.w	r3, r7, #8
 800ef78:	4619      	mov	r1, r3
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f7ff fd7e 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 f9af 	bl	800f2e4 <SDMMC_GetCmdResp2>
 800ef86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef88:	69fb      	ldr	r3, [r7, #28]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3720      	adds	r7, #32
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}

0800ef92 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ef92:	b580      	push	{r7, lr}
 800ef94:	b088      	sub	sp, #32
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
 800ef9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800efa0:	2303      	movs	r3, #3
 800efa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800efa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efaa:	2300      	movs	r3, #0
 800efac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efb4:	f107 0308 	add.w	r3, r7, #8
 800efb8:	4619      	mov	r1, r3
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f7ff fd5e 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800efc0:	683a      	ldr	r2, [r7, #0]
 800efc2:	2103      	movs	r1, #3
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 fa17 	bl	800f3f8 <SDMMC_GetCmdResp6>
 800efca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efcc:	69fb      	ldr	r3, [r7, #28]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3720      	adds	r7, #32
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}

0800efd6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800efd6:	b580      	push	{r7, lr}
 800efd8:	b088      	sub	sp, #32
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
 800efde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800efe4:	230d      	movs	r3, #13
 800efe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800efec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efee:	2300      	movs	r3, #0
 800eff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eff6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eff8:	f107 0308 	add.w	r3, r7, #8
 800effc:	4619      	mov	r1, r3
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f7ff fd3c 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f004:	f241 3288 	movw	r2, #5000	; 0x1388
 800f008:	210d      	movs	r1, #13
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 f878 	bl	800f100 <SDMMC_GetCmdResp1>
 800f010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f012:	69fb      	ldr	r3, [r7, #28]
}
 800f014:	4618      	mov	r0, r3
 800f016:	3720      	adds	r7, #32
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b088      	sub	sp, #32
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f024:	2300      	movs	r3, #0
 800f026:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800f028:	230d      	movs	r3, #13
 800f02a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f02c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f032:	2300      	movs	r3, #0
 800f034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f03a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f03c:	f107 0308 	add.w	r3, r7, #8
 800f040:	4619      	mov	r1, r3
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7ff fd1a 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800f048:	f241 3288 	movw	r2, #5000	; 0x1388
 800f04c:	210d      	movs	r1, #13
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 f856 	bl	800f100 <SDMMC_GetCmdResp1>
 800f054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f056:	69fb      	ldr	r3, [r7, #28]
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3720      	adds	r7, #32
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b088      	sub	sp, #32
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800f068:	2300      	movs	r3, #0
 800f06a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800f06c:	230b      	movs	r3, #11
 800f06e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f070:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f076:	2300      	movs	r3, #0
 800f078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f07a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f07e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f080:	f107 0308 	add.w	r3, r7, #8
 800f084:	4619      	mov	r1, r3
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7ff fcf8 	bl	800ea7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800f08c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f090:	210b      	movs	r1, #11
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 f834 	bl	800f100 <SDMMC_GetCmdResp1>
 800f098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f09a:	69fb      	ldr	r3, [r7, #28]
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3720      	adds	r7, #32
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}

0800f0a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f0ac:	4b11      	ldr	r3, [pc, #68]	; (800f0f4 <SDMMC_GetCmdError+0x50>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a11      	ldr	r2, [pc, #68]	; (800f0f8 <SDMMC_GetCmdError+0x54>)
 800f0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0b6:	0a5b      	lsrs	r3, r3, #9
 800f0b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0bc:	fb02 f303 	mul.w	r3, r2, r3
 800f0c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	1e5a      	subs	r2, r3, #1
 800f0c6:	60fa      	str	r2, [r7, #12]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d102      	bne.n	800f0d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f0d0:	e009      	b.n	800f0e6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d0f1      	beq.n	800f0c2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a06      	ldr	r2, [pc, #24]	; (800f0fc <SDMMC_GetCmdError+0x58>)
 800f0e2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800f0e4:	2300      	movs	r3, #0
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3714      	adds	r7, #20
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr
 800f0f2:	bf00      	nop
 800f0f4:	24000000 	.word	0x24000000
 800f0f8:	10624dd3 	.word	0x10624dd3
 800f0fc:	002000c5 	.word	0x002000c5

0800f100 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b088      	sub	sp, #32
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	460b      	mov	r3, r1
 800f10a:	607a      	str	r2, [r7, #4]
 800f10c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f10e:	4b70      	ldr	r3, [pc, #448]	; (800f2d0 <SDMMC_GetCmdResp1+0x1d0>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4a70      	ldr	r2, [pc, #448]	; (800f2d4 <SDMMC_GetCmdResp1+0x1d4>)
 800f114:	fba2 2303 	umull	r2, r3, r2, r3
 800f118:	0a5a      	lsrs	r2, r3, #9
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	fb02 f303 	mul.w	r3, r2, r3
 800f120:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	1e5a      	subs	r2, r3, #1
 800f126:	61fa      	str	r2, [r7, #28]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d102      	bne.n	800f132 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f12c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f130:	e0c9      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f136:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800f138:	69ba      	ldr	r2, [r7, #24]
 800f13a:	4b67      	ldr	r3, [pc, #412]	; (800f2d8 <SDMMC_GetCmdResp1+0x1d8>)
 800f13c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d0ef      	beq.n	800f122 <SDMMC_GetCmdResp1+0x22>
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d1ea      	bne.n	800f122 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f150:	f003 0304 	and.w	r3, r3, #4
 800f154:	2b00      	cmp	r3, #0
 800f156:	d004      	beq.n	800f162 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2204      	movs	r2, #4
 800f15c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f15e:	2304      	movs	r3, #4
 800f160:	e0b1      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d004      	beq.n	800f178 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2201      	movs	r2, #1
 800f172:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f174:	2301      	movs	r3, #1
 800f176:	e0a6      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	4a58      	ldr	r2, [pc, #352]	; (800f2dc <SDMMC_GetCmdResp1+0x1dc>)
 800f17c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f17e:	68f8      	ldr	r0, [r7, #12]
 800f180:	f7ff fca6 	bl	800ead0 <SDMMC_GetCommandResponse>
 800f184:	4603      	mov	r3, r0
 800f186:	461a      	mov	r2, r3
 800f188:	7afb      	ldrb	r3, [r7, #11]
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d001      	beq.n	800f192 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f18e:	2301      	movs	r3, #1
 800f190:	e099      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f192:	2100      	movs	r1, #0
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f7ff fca8 	bl	800eaea <SDMMC_GetResponse>
 800f19a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f19c:	697a      	ldr	r2, [r7, #20]
 800f19e:	4b50      	ldr	r3, [pc, #320]	; (800f2e0 <SDMMC_GetCmdResp1+0x1e0>)
 800f1a0:	4013      	ands	r3, r2
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d101      	bne.n	800f1aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	e08d      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	da02      	bge.n	800f1b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f1b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f1b4:	e087      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d001      	beq.n	800f1c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f1c0:	2340      	movs	r3, #64	; 0x40
 800f1c2:	e080      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f1ce:	2380      	movs	r3, #128	; 0x80
 800f1d0:	e079      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d002      	beq.n	800f1e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f1dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1e0:	e071      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d002      	beq.n	800f1f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f1ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1f0:	e069      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d002      	beq.n	800f202 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f1fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f200:	e061      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d002      	beq.n	800f212 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f20c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f210:	e059      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d002      	beq.n	800f222 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f21c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f220:	e051      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d002      	beq.n	800f232 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f22c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f230:	e049      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d002      	beq.n	800f242 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f23c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f240:	e041      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f24c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f250:	e039      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d002      	beq.n	800f262 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f25c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f260:	e031      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d002      	beq.n	800f272 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f26c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f270:	e029      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d002      	beq.n	800f282 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f27c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f280:	e021      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d002      	beq.n	800f292 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f28c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f290:	e019      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d002      	beq.n	800f2a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f29c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f2a0:	e011      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d002      	beq.n	800f2b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f2ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f2b0:	e009      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	f003 0308 	and.w	r3, r3, #8
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d002      	beq.n	800f2c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f2bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f2c0:	e001      	b.n	800f2c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f2c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3720      	adds	r7, #32
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	24000000 	.word	0x24000000
 800f2d4:	10624dd3 	.word	0x10624dd3
 800f2d8:	00200045 	.word	0x00200045
 800f2dc:	002000c5 	.word	0x002000c5
 800f2e0:	fdffe008 	.word	0xfdffe008

0800f2e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f2ec:	4b1f      	ldr	r3, [pc, #124]	; (800f36c <SDMMC_GetCmdResp2+0x88>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4a1f      	ldr	r2, [pc, #124]	; (800f370 <SDMMC_GetCmdResp2+0x8c>)
 800f2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2f6:	0a5b      	lsrs	r3, r3, #9
 800f2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2fc:	fb02 f303 	mul.w	r3, r2, r3
 800f300:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	1e5a      	subs	r2, r3, #1
 800f306:	60fa      	str	r2, [r7, #12]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d102      	bne.n	800f312 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f30c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f310:	e026      	b.n	800f360 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f316:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d0ef      	beq.n	800f302 <SDMMC_GetCmdResp2+0x1e>
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d1ea      	bne.n	800f302 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f330:	f003 0304 	and.w	r3, r3, #4
 800f334:	2b00      	cmp	r3, #0
 800f336:	d004      	beq.n	800f342 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2204      	movs	r2, #4
 800f33c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f33e:	2304      	movs	r3, #4
 800f340:	e00e      	b.n	800f360 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f346:	f003 0301 	and.w	r3, r3, #1
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d004      	beq.n	800f358 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2201      	movs	r2, #1
 800f352:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f354:	2301      	movs	r3, #1
 800f356:	e003      	b.n	800f360 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	4a06      	ldr	r2, [pc, #24]	; (800f374 <SDMMC_GetCmdResp2+0x90>)
 800f35c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3714      	adds	r7, #20
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	24000000 	.word	0x24000000
 800f370:	10624dd3 	.word	0x10624dd3
 800f374:	002000c5 	.word	0x002000c5

0800f378 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f378:	b480      	push	{r7}
 800f37a:	b085      	sub	sp, #20
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f380:	4b1a      	ldr	r3, [pc, #104]	; (800f3ec <SDMMC_GetCmdResp3+0x74>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a1a      	ldr	r2, [pc, #104]	; (800f3f0 <SDMMC_GetCmdResp3+0x78>)
 800f386:	fba2 2303 	umull	r2, r3, r2, r3
 800f38a:	0a5b      	lsrs	r3, r3, #9
 800f38c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f390:	fb02 f303 	mul.w	r3, r2, r3
 800f394:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	1e5a      	subs	r2, r3, #1
 800f39a:	60fa      	str	r2, [r7, #12]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d102      	bne.n	800f3a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f3a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f3a4:	e01b      	b.n	800f3de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d0ef      	beq.n	800f396 <SDMMC_GetCmdResp3+0x1e>
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d1ea      	bne.n	800f396 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3c4:	f003 0304 	and.w	r3, r3, #4
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d004      	beq.n	800f3d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2204      	movs	r2, #4
 800f3d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3d2:	2304      	movs	r3, #4
 800f3d4:	e003      	b.n	800f3de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a06      	ldr	r2, [pc, #24]	; (800f3f4 <SDMMC_GetCmdResp3+0x7c>)
 800f3da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f3dc:	2300      	movs	r3, #0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3714      	adds	r7, #20
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr
 800f3ea:	bf00      	nop
 800f3ec:	24000000 	.word	0x24000000
 800f3f0:	10624dd3 	.word	0x10624dd3
 800f3f4:	002000c5 	.word	0x002000c5

0800f3f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b088      	sub	sp, #32
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	460b      	mov	r3, r1
 800f402:	607a      	str	r2, [r7, #4]
 800f404:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f406:	4b35      	ldr	r3, [pc, #212]	; (800f4dc <SDMMC_GetCmdResp6+0xe4>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4a35      	ldr	r2, [pc, #212]	; (800f4e0 <SDMMC_GetCmdResp6+0xe8>)
 800f40c:	fba2 2303 	umull	r2, r3, r2, r3
 800f410:	0a5b      	lsrs	r3, r3, #9
 800f412:	f241 3288 	movw	r2, #5000	; 0x1388
 800f416:	fb02 f303 	mul.w	r3, r2, r3
 800f41a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f41c:	69fb      	ldr	r3, [r7, #28]
 800f41e:	1e5a      	subs	r2, r3, #1
 800f420:	61fa      	str	r2, [r7, #28]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d102      	bne.n	800f42c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f426:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f42a:	e052      	b.n	800f4d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f430:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f432:	69bb      	ldr	r3, [r7, #24]
 800f434:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d0ef      	beq.n	800f41c <SDMMC_GetCmdResp6+0x24>
 800f43c:	69bb      	ldr	r3, [r7, #24]
 800f43e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1ea      	bne.n	800f41c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f44a:	f003 0304 	and.w	r3, r3, #4
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d004      	beq.n	800f45c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2204      	movs	r2, #4
 800f456:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f458:	2304      	movs	r3, #4
 800f45a:	e03a      	b.n	800f4d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f460:	f003 0301 	and.w	r3, r3, #1
 800f464:	2b00      	cmp	r3, #0
 800f466:	d004      	beq.n	800f472 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2201      	movs	r2, #1
 800f46c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f46e:	2301      	movs	r3, #1
 800f470:	e02f      	b.n	800f4d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f7ff fb2c 	bl	800ead0 <SDMMC_GetCommandResponse>
 800f478:	4603      	mov	r3, r0
 800f47a:	461a      	mov	r2, r3
 800f47c:	7afb      	ldrb	r3, [r7, #11]
 800f47e:	4293      	cmp	r3, r2
 800f480:	d001      	beq.n	800f486 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f482:	2301      	movs	r3, #1
 800f484:	e025      	b.n	800f4d2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	4a16      	ldr	r2, [pc, #88]	; (800f4e4 <SDMMC_GetCmdResp6+0xec>)
 800f48a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f48c:	2100      	movs	r1, #0
 800f48e:	68f8      	ldr	r0, [r7, #12]
 800f490:	f7ff fb2b 	bl	800eaea <SDMMC_GetResponse>
 800f494:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d106      	bne.n	800f4ae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	0c1b      	lsrs	r3, r3, #16
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	e011      	b.n	800f4d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d002      	beq.n	800f4be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f4b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4bc:	e009      	b.n	800f4d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d002      	beq.n	800f4ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f4c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f4cc:	e001      	b.n	800f4d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f4ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3720      	adds	r7, #32
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	24000000 	.word	0x24000000
 800f4e0:	10624dd3 	.word	0x10624dd3
 800f4e4:	002000c5 	.word	0x002000c5

0800f4e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b085      	sub	sp, #20
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f4f0:	4b22      	ldr	r3, [pc, #136]	; (800f57c <SDMMC_GetCmdResp7+0x94>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	4a22      	ldr	r2, [pc, #136]	; (800f580 <SDMMC_GetCmdResp7+0x98>)
 800f4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800f4fa:	0a5b      	lsrs	r3, r3, #9
 800f4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f500:	fb02 f303 	mul.w	r3, r2, r3
 800f504:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	1e5a      	subs	r2, r3, #1
 800f50a:	60fa      	str	r2, [r7, #12]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d102      	bne.n	800f516 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f510:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f514:	e02c      	b.n	800f570 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f51a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f522:	2b00      	cmp	r3, #0
 800f524:	d0ef      	beq.n	800f506 <SDMMC_GetCmdResp7+0x1e>
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d1ea      	bne.n	800f506 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f534:	f003 0304 	and.w	r3, r3, #4
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d004      	beq.n	800f546 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2204      	movs	r2, #4
 800f540:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f542:	2304      	movs	r3, #4
 800f544:	e014      	b.n	800f570 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f54a:	f003 0301 	and.w	r3, r3, #1
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d004      	beq.n	800f55c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2201      	movs	r2, #1
 800f556:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f558:	2301      	movs	r3, #1
 800f55a:	e009      	b.n	800f570 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f564:	2b00      	cmp	r3, #0
 800f566:	d002      	beq.n	800f56e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2240      	movs	r2, #64	; 0x40
 800f56c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f56e:	2300      	movs	r3, #0

}
 800f570:	4618      	mov	r0, r3
 800f572:	3714      	adds	r7, #20
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr
 800f57c:	24000000 	.word	0x24000000
 800f580:	10624dd3 	.word	0x10624dd3

0800f584 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f584:	b084      	sub	sp, #16
 800f586:	b580      	push	{r7, lr}
 800f588:	b084      	sub	sp, #16
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
 800f58e:	f107 001c 	add.w	r0, r7, #28
 800f592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d120      	bne.n	800f5de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	68da      	ldr	r2, [r3, #12]
 800f5ac:	4b25      	ldr	r3, [pc, #148]	; (800f644 <USB_CoreInit+0xc0>)
 800f5ae:	4013      	ands	r3, r2
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	68db      	ldr	r3, [r3, #12]
 800f5b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f5c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5c2:	2b01      	cmp	r3, #1
 800f5c4:	d105      	bne.n	800f5d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f001 fabe 	bl	8010b54 <USB_CoreReset>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	73fb      	strb	r3, [r7, #15]
 800f5dc:	e01a      	b.n	800f614 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f001 fab2 	bl	8010b54 <USB_CoreReset>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d106      	bne.n	800f608 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	639a      	str	r2, [r3, #56]	; 0x38
 800f606:	e005      	b.n	800f614 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f60c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f616:	2b01      	cmp	r3, #1
 800f618:	d10b      	bne.n	800f632 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	689b      	ldr	r3, [r3, #8]
 800f61e:	f043 0206 	orr.w	r2, r3, #6
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	689b      	ldr	r3, [r3, #8]
 800f62a:	f043 0220 	orr.w	r2, r3, #32
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f632:	7bfb      	ldrb	r3, [r7, #15]
}
 800f634:	4618      	mov	r0, r3
 800f636:	3710      	adds	r7, #16
 800f638:	46bd      	mov	sp, r7
 800f63a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f63e:	b004      	add	sp, #16
 800f640:	4770      	bx	lr
 800f642:	bf00      	nop
 800f644:	ffbdffbf 	.word	0xffbdffbf

0800f648 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f648:	b480      	push	{r7}
 800f64a:	b087      	sub	sp, #28
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	4613      	mov	r3, r2
 800f654:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f656:	79fb      	ldrb	r3, [r7, #7]
 800f658:	2b02      	cmp	r3, #2
 800f65a:	d165      	bne.n	800f728 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	4a41      	ldr	r2, [pc, #260]	; (800f764 <USB_SetTurnaroundTime+0x11c>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d906      	bls.n	800f672 <USB_SetTurnaroundTime+0x2a>
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	4a40      	ldr	r2, [pc, #256]	; (800f768 <USB_SetTurnaroundTime+0x120>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d802      	bhi.n	800f672 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f66c:	230f      	movs	r3, #15
 800f66e:	617b      	str	r3, [r7, #20]
 800f670:	e062      	b.n	800f738 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	4a3c      	ldr	r2, [pc, #240]	; (800f768 <USB_SetTurnaroundTime+0x120>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d906      	bls.n	800f688 <USB_SetTurnaroundTime+0x40>
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	4a3b      	ldr	r2, [pc, #236]	; (800f76c <USB_SetTurnaroundTime+0x124>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d802      	bhi.n	800f688 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f682:	230e      	movs	r3, #14
 800f684:	617b      	str	r3, [r7, #20]
 800f686:	e057      	b.n	800f738 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	4a38      	ldr	r2, [pc, #224]	; (800f76c <USB_SetTurnaroundTime+0x124>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d906      	bls.n	800f69e <USB_SetTurnaroundTime+0x56>
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	4a37      	ldr	r2, [pc, #220]	; (800f770 <USB_SetTurnaroundTime+0x128>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d802      	bhi.n	800f69e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f698:	230d      	movs	r3, #13
 800f69a:	617b      	str	r3, [r7, #20]
 800f69c:	e04c      	b.n	800f738 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	4a33      	ldr	r2, [pc, #204]	; (800f770 <USB_SetTurnaroundTime+0x128>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d906      	bls.n	800f6b4 <USB_SetTurnaroundTime+0x6c>
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	4a32      	ldr	r2, [pc, #200]	; (800f774 <USB_SetTurnaroundTime+0x12c>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d802      	bhi.n	800f6b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f6ae:	230c      	movs	r3, #12
 800f6b0:	617b      	str	r3, [r7, #20]
 800f6b2:	e041      	b.n	800f738 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	4a2f      	ldr	r2, [pc, #188]	; (800f774 <USB_SetTurnaroundTime+0x12c>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d906      	bls.n	800f6ca <USB_SetTurnaroundTime+0x82>
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	4a2e      	ldr	r2, [pc, #184]	; (800f778 <USB_SetTurnaroundTime+0x130>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d802      	bhi.n	800f6ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f6c4:	230b      	movs	r3, #11
 800f6c6:	617b      	str	r3, [r7, #20]
 800f6c8:	e036      	b.n	800f738 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	4a2a      	ldr	r2, [pc, #168]	; (800f778 <USB_SetTurnaroundTime+0x130>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d906      	bls.n	800f6e0 <USB_SetTurnaroundTime+0x98>
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	4a29      	ldr	r2, [pc, #164]	; (800f77c <USB_SetTurnaroundTime+0x134>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d802      	bhi.n	800f6e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f6da:	230a      	movs	r3, #10
 800f6dc:	617b      	str	r3, [r7, #20]
 800f6de:	e02b      	b.n	800f738 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	4a26      	ldr	r2, [pc, #152]	; (800f77c <USB_SetTurnaroundTime+0x134>)
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	d906      	bls.n	800f6f6 <USB_SetTurnaroundTime+0xae>
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	4a25      	ldr	r2, [pc, #148]	; (800f780 <USB_SetTurnaroundTime+0x138>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d802      	bhi.n	800f6f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f6f0:	2309      	movs	r3, #9
 800f6f2:	617b      	str	r3, [r7, #20]
 800f6f4:	e020      	b.n	800f738 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	4a21      	ldr	r2, [pc, #132]	; (800f780 <USB_SetTurnaroundTime+0x138>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d906      	bls.n	800f70c <USB_SetTurnaroundTime+0xc4>
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	4a20      	ldr	r2, [pc, #128]	; (800f784 <USB_SetTurnaroundTime+0x13c>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d802      	bhi.n	800f70c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f706:	2308      	movs	r3, #8
 800f708:	617b      	str	r3, [r7, #20]
 800f70a:	e015      	b.n	800f738 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	4a1d      	ldr	r2, [pc, #116]	; (800f784 <USB_SetTurnaroundTime+0x13c>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d906      	bls.n	800f722 <USB_SetTurnaroundTime+0xda>
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	4a1c      	ldr	r2, [pc, #112]	; (800f788 <USB_SetTurnaroundTime+0x140>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d802      	bhi.n	800f722 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f71c:	2307      	movs	r3, #7
 800f71e:	617b      	str	r3, [r7, #20]
 800f720:	e00a      	b.n	800f738 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f722:	2306      	movs	r3, #6
 800f724:	617b      	str	r3, [r7, #20]
 800f726:	e007      	b.n	800f738 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f728:	79fb      	ldrb	r3, [r7, #7]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d102      	bne.n	800f734 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f72e:	2309      	movs	r3, #9
 800f730:	617b      	str	r3, [r7, #20]
 800f732:	e001      	b.n	800f738 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f734:	2309      	movs	r3, #9
 800f736:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	68da      	ldr	r2, [r3, #12]
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	029b      	lsls	r3, r3, #10
 800f74c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f750:	431a      	orrs	r2, r3
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f756:	2300      	movs	r3, #0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	371c      	adds	r7, #28
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr
 800f764:	00d8acbf 	.word	0x00d8acbf
 800f768:	00e4e1bf 	.word	0x00e4e1bf
 800f76c:	00f423ff 	.word	0x00f423ff
 800f770:	0106737f 	.word	0x0106737f
 800f774:	011a499f 	.word	0x011a499f
 800f778:	01312cff 	.word	0x01312cff
 800f77c:	014ca43f 	.word	0x014ca43f
 800f780:	016e35ff 	.word	0x016e35ff
 800f784:	01a6ab1f 	.word	0x01a6ab1f
 800f788:	01e847ff 	.word	0x01e847ff

0800f78c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	689b      	ldr	r3, [r3, #8]
 800f798:	f043 0201 	orr.w	r2, r3, #1
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f7a0:	2300      	movs	r3, #0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	370c      	adds	r7, #12
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr

0800f7ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7ae:	b480      	push	{r7}
 800f7b0:	b083      	sub	sp, #12
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	689b      	ldr	r3, [r3, #8]
 800f7ba:	f023 0201 	bic.w	r2, r3, #1
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f7c2:	2300      	movs	r3, #0
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	370c      	adds	r7, #12
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b082      	sub	sp, #8
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	460b      	mov	r3, r1
 800f7da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	68db      	ldr	r3, [r3, #12]
 800f7e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f7e8:	78fb      	ldrb	r3, [r7, #3]
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d106      	bne.n	800f7fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	60da      	str	r2, [r3, #12]
 800f7fa:	e00b      	b.n	800f814 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f7fc:	78fb      	ldrb	r3, [r7, #3]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d106      	bne.n	800f810 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	60da      	str	r2, [r3, #12]
 800f80e:	e001      	b.n	800f814 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f810:	2301      	movs	r3, #1
 800f812:	e003      	b.n	800f81c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f814:	2032      	movs	r0, #50	; 0x32
 800f816:	f7f3 fa5b 	bl	8002cd0 <HAL_Delay>

  return HAL_OK;
 800f81a:	2300      	movs	r3, #0
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3708      	adds	r7, #8
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f824:	b084      	sub	sp, #16
 800f826:	b580      	push	{r7, lr}
 800f828:	b086      	sub	sp, #24
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f836:	2300      	movs	r3, #0
 800f838:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f83e:	2300      	movs	r3, #0
 800f840:	613b      	str	r3, [r7, #16]
 800f842:	e009      	b.n	800f858 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	3340      	adds	r3, #64	; 0x40
 800f84a:	009b      	lsls	r3, r3, #2
 800f84c:	4413      	add	r3, r2
 800f84e:	2200      	movs	r2, #0
 800f850:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	3301      	adds	r3, #1
 800f856:	613b      	str	r3, [r7, #16]
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	2b0e      	cmp	r3, #14
 800f85c:	d9f2      	bls.n	800f844 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f860:	2b00      	cmp	r3, #0
 800f862:	d11c      	bne.n	800f89e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	68fa      	ldr	r2, [r7, #12]
 800f86e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f872:	f043 0302 	orr.w	r3, r3, #2
 800f876:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f87c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	601a      	str	r2, [r3, #0]
 800f89c:	e005      	b.n	800f8aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8bc:	4619      	mov	r1, r3
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	680b      	ldr	r3, [r1, #0]
 800f8c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d10c      	bne.n	800f8ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d104      	bne.n	800f8e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f8d6:	2100      	movs	r1, #0
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 f949 	bl	800fb70 <USB_SetDevSpeed>
 800f8de:	e008      	b.n	800f8f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f8e0:	2101      	movs	r1, #1
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f000 f944 	bl	800fb70 <USB_SetDevSpeed>
 800f8e8:	e003      	b.n	800f8f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f8ea:	2103      	movs	r1, #3
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 f93f 	bl	800fb70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f8f2:	2110      	movs	r1, #16
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f000 f8f3 	bl	800fae0 <USB_FlushTxFifo>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d001      	beq.n	800f904 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f900:	2301      	movs	r3, #1
 800f902:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 f911 	bl	800fb2c <USB_FlushRxFifo>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d001      	beq.n	800f914 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f910:	2301      	movs	r3, #1
 800f912:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f91a:	461a      	mov	r2, r3
 800f91c:	2300      	movs	r3, #0
 800f91e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f926:	461a      	mov	r2, r3
 800f928:	2300      	movs	r3, #0
 800f92a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f932:	461a      	mov	r2, r3
 800f934:	2300      	movs	r3, #0
 800f936:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f938:	2300      	movs	r3, #0
 800f93a:	613b      	str	r3, [r7, #16]
 800f93c:	e043      	b.n	800f9c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	015a      	lsls	r2, r3, #5
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	4413      	add	r3, r2
 800f946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f954:	d118      	bne.n	800f988 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d10a      	bne.n	800f972 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	015a      	lsls	r2, r3, #5
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	4413      	add	r3, r2
 800f964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f968:	461a      	mov	r2, r3
 800f96a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f96e:	6013      	str	r3, [r2, #0]
 800f970:	e013      	b.n	800f99a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	015a      	lsls	r2, r3, #5
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	4413      	add	r3, r2
 800f97a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f97e:	461a      	mov	r2, r3
 800f980:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f984:	6013      	str	r3, [r2, #0]
 800f986:	e008      	b.n	800f99a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	015a      	lsls	r2, r3, #5
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	4413      	add	r3, r2
 800f990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f994:	461a      	mov	r2, r3
 800f996:	2300      	movs	r3, #0
 800f998:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	015a      	lsls	r2, r3, #5
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	015a      	lsls	r2, r3, #5
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f9be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	613b      	str	r3, [r7, #16]
 800f9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c8:	693a      	ldr	r2, [r7, #16]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d3b7      	bcc.n	800f93e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	613b      	str	r3, [r7, #16]
 800f9d2:	e043      	b.n	800fa5c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	015a      	lsls	r2, r3, #5
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	4413      	add	r3, r2
 800f9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f9e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9ea:	d118      	bne.n	800fa1e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d10a      	bne.n	800fa08 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	015a      	lsls	r2, r3, #5
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9fe:	461a      	mov	r2, r3
 800fa00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fa04:	6013      	str	r3, [r2, #0]
 800fa06:	e013      	b.n	800fa30 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	015a      	lsls	r2, r3, #5
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	4413      	add	r3, r2
 800fa10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa14:	461a      	mov	r2, r3
 800fa16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fa1a:	6013      	str	r3, [r2, #0]
 800fa1c:	e008      	b.n	800fa30 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	015a      	lsls	r2, r3, #5
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	4413      	add	r3, r2
 800fa26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	015a      	lsls	r2, r3, #5
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	4413      	add	r3, r2
 800fa38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	2300      	movs	r3, #0
 800fa40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	015a      	lsls	r2, r3, #5
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	4413      	add	r3, r2
 800fa4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa4e:	461a      	mov	r2, r3
 800fa50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fa54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	613b      	str	r3, [r7, #16]
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5e:	693a      	ldr	r2, [r7, #16]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d3b7      	bcc.n	800f9d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa6a:	691b      	ldr	r3, [r3, #16]
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fa84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d105      	bne.n	800fa98 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	699b      	ldr	r3, [r3, #24]
 800fa90:	f043 0210 	orr.w	r2, r3, #16
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	699a      	ldr	r2, [r3, #24]
 800fa9c:	4b0e      	ldr	r3, [pc, #56]	; (800fad8 <USB_DevInit+0x2b4>)
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	687a      	ldr	r2, [r7, #4]
 800faa2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800faa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d005      	beq.n	800fab6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	699b      	ldr	r3, [r3, #24]
 800faae:	f043 0208 	orr.w	r2, r3, #8
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d105      	bne.n	800fac8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	699a      	ldr	r2, [r3, #24]
 800fac0:	4b06      	ldr	r3, [pc, #24]	; (800fadc <USB_DevInit+0x2b8>)
 800fac2:	4313      	orrs	r3, r2
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fac8:	7dfb      	ldrb	r3, [r7, #23]
}
 800faca:	4618      	mov	r0, r3
 800facc:	3718      	adds	r7, #24
 800face:	46bd      	mov	sp, r7
 800fad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fad4:	b004      	add	sp, #16
 800fad6:	4770      	bx	lr
 800fad8:	803c3800 	.word	0x803c3800
 800fadc:	40000004 	.word	0x40000004

0800fae0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b085      	sub	sp, #20
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800faea:	2300      	movs	r3, #0
 800faec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	019b      	lsls	r3, r3, #6
 800faf2:	f043 0220 	orr.w	r2, r3, #32
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	3301      	adds	r3, #1
 800fafe:	60fb      	str	r3, [r7, #12]
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	4a09      	ldr	r2, [pc, #36]	; (800fb28 <USB_FlushTxFifo+0x48>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d901      	bls.n	800fb0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fb08:	2303      	movs	r3, #3
 800fb0a:	e006      	b.n	800fb1a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	691b      	ldr	r3, [r3, #16]
 800fb10:	f003 0320 	and.w	r3, r3, #32
 800fb14:	2b20      	cmp	r3, #32
 800fb16:	d0f0      	beq.n	800fafa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fb18:	2300      	movs	r3, #0
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3714      	adds	r7, #20
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
 800fb26:	bf00      	nop
 800fb28:	00030d40 	.word	0x00030d40

0800fb2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b085      	sub	sp, #20
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fb34:	2300      	movs	r3, #0
 800fb36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2210      	movs	r2, #16
 800fb3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	3301      	adds	r3, #1
 800fb42:	60fb      	str	r3, [r7, #12]
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	4a09      	ldr	r2, [pc, #36]	; (800fb6c <USB_FlushRxFifo+0x40>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d901      	bls.n	800fb50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fb4c:	2303      	movs	r3, #3
 800fb4e:	e006      	b.n	800fb5e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	691b      	ldr	r3, [r3, #16]
 800fb54:	f003 0310 	and.w	r3, r3, #16
 800fb58:	2b10      	cmp	r3, #16
 800fb5a:	d0f0      	beq.n	800fb3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3714      	adds	r7, #20
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr
 800fb6a:	bf00      	nop
 800fb6c:	00030d40 	.word	0x00030d40

0800fb70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b085      	sub	sp, #20
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	78fb      	ldrb	r3, [r7, #3]
 800fb8a:	68f9      	ldr	r1, [r7, #12]
 800fb8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb90:	4313      	orrs	r3, r2
 800fb92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fb94:	2300      	movs	r3, #0
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3714      	adds	r7, #20
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba0:	4770      	bx	lr

0800fba2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fba2:	b480      	push	{r7}
 800fba4:	b087      	sub	sp, #28
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbb4:	689b      	ldr	r3, [r3, #8]
 800fbb6:	f003 0306 	and.w	r3, r3, #6
 800fbba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d102      	bne.n	800fbc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	75fb      	strb	r3, [r7, #23]
 800fbc6:	e00a      	b.n	800fbde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	2b02      	cmp	r3, #2
 800fbcc:	d002      	beq.n	800fbd4 <USB_GetDevSpeed+0x32>
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2b06      	cmp	r3, #6
 800fbd2:	d102      	bne.n	800fbda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fbd4:	2302      	movs	r3, #2
 800fbd6:	75fb      	strb	r3, [r7, #23]
 800fbd8:	e001      	b.n	800fbde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fbda:	230f      	movs	r3, #15
 800fbdc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fbde:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	371c      	adds	r7, #28
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbea:	4770      	bx	lr

0800fbec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	785b      	ldrb	r3, [r3, #1]
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d139      	bne.n	800fc7c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc0e:	69da      	ldr	r2, [r3, #28]
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	f003 030f 	and.w	r3, r3, #15
 800fc18:	2101      	movs	r1, #1
 800fc1a:	fa01 f303 	lsl.w	r3, r1, r3
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	68f9      	ldr	r1, [r7, #12]
 800fc22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc26:	4313      	orrs	r3, r2
 800fc28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	015a      	lsls	r2, r3, #5
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	4413      	add	r3, r2
 800fc32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d153      	bne.n	800fce8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	015a      	lsls	r2, r3, #5
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	4413      	add	r3, r2
 800fc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	689b      	ldr	r3, [r3, #8]
 800fc52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	78db      	ldrb	r3, [r3, #3]
 800fc5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fc5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	059b      	lsls	r3, r3, #22
 800fc62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fc64:	431a      	orrs	r2, r3
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	0159      	lsls	r1, r3, #5
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	440b      	add	r3, r1
 800fc6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc72:	4619      	mov	r1, r3
 800fc74:	4b20      	ldr	r3, [pc, #128]	; (800fcf8 <USB_ActivateEndpoint+0x10c>)
 800fc76:	4313      	orrs	r3, r2
 800fc78:	600b      	str	r3, [r1, #0]
 800fc7a:	e035      	b.n	800fce8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc82:	69da      	ldr	r2, [r3, #28]
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	f003 030f 	and.w	r3, r3, #15
 800fc8c:	2101      	movs	r1, #1
 800fc8e:	fa01 f303 	lsl.w	r3, r1, r3
 800fc92:	041b      	lsls	r3, r3, #16
 800fc94:	68f9      	ldr	r1, [r7, #12]
 800fc96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc9a:	4313      	orrs	r3, r2
 800fc9c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	015a      	lsls	r2, r3, #5
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	4413      	add	r3, r2
 800fca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d119      	bne.n	800fce8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	015a      	lsls	r2, r3, #5
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	4413      	add	r3, r2
 800fcbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	689b      	ldr	r3, [r3, #8]
 800fcc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	78db      	ldrb	r3, [r3, #3]
 800fcce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fcd0:	430b      	orrs	r3, r1
 800fcd2:	431a      	orrs	r2, r3
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	0159      	lsls	r1, r3, #5
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	440b      	add	r3, r1
 800fcdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fce0:	4619      	mov	r1, r3
 800fce2:	4b05      	ldr	r3, [pc, #20]	; (800fcf8 <USB_ActivateEndpoint+0x10c>)
 800fce4:	4313      	orrs	r3, r2
 800fce6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fce8:	2300      	movs	r3, #0
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3714      	adds	r7, #20
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf4:	4770      	bx	lr
 800fcf6:	bf00      	nop
 800fcf8:	10008000 	.word	0x10008000

0800fcfc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b085      	sub	sp, #20
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	785b      	ldrb	r3, [r3, #1]
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d161      	bne.n	800fddc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	015a      	lsls	r2, r3, #5
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	4413      	add	r3, r2
 800fd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd2e:	d11f      	bne.n	800fd70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	015a      	lsls	r2, r3, #5
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	4413      	add	r3, r2
 800fd38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	68ba      	ldr	r2, [r7, #8]
 800fd40:	0151      	lsls	r1, r2, #5
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	440a      	add	r2, r1
 800fd46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fd4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	015a      	lsls	r2, r3, #5
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	4413      	add	r3, r2
 800fd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	68ba      	ldr	r2, [r7, #8]
 800fd60:	0151      	lsls	r1, r2, #5
 800fd62:	68fa      	ldr	r2, [r7, #12]
 800fd64:	440a      	add	r2, r1
 800fd66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	f003 030f 	and.w	r3, r3, #15
 800fd80:	2101      	movs	r1, #1
 800fd82:	fa01 f303 	lsl.w	r3, r1, r3
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	43db      	mvns	r3, r3
 800fd8a:	68f9      	ldr	r1, [r7, #12]
 800fd8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd90:	4013      	ands	r3, r2
 800fd92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd9a:	69da      	ldr	r2, [r3, #28]
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	f003 030f 	and.w	r3, r3, #15
 800fda4:	2101      	movs	r1, #1
 800fda6:	fa01 f303 	lsl.w	r3, r1, r3
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	43db      	mvns	r3, r3
 800fdae:	68f9      	ldr	r1, [r7, #12]
 800fdb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fdb4:	4013      	ands	r3, r2
 800fdb6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	015a      	lsls	r2, r3, #5
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	4413      	add	r3, r2
 800fdc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	0159      	lsls	r1, r3, #5
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	440b      	add	r3, r1
 800fdce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	4b35      	ldr	r3, [pc, #212]	; (800feac <USB_DeactivateEndpoint+0x1b0>)
 800fdd6:	4013      	ands	r3, r2
 800fdd8:	600b      	str	r3, [r1, #0]
 800fdda:	e060      	b.n	800fe9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	015a      	lsls	r2, r3, #5
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	4413      	add	r3, r2
 800fde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdf2:	d11f      	bne.n	800fe34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	015a      	lsls	r2, r3, #5
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	4413      	add	r3, r2
 800fdfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	68ba      	ldr	r2, [r7, #8]
 800fe04:	0151      	lsls	r1, r2, #5
 800fe06:	68fa      	ldr	r2, [r7, #12]
 800fe08:	440a      	add	r2, r1
 800fe0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	015a      	lsls	r2, r3, #5
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	4413      	add	r3, r2
 800fe1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	68ba      	ldr	r2, [r7, #8]
 800fe24:	0151      	lsls	r1, r2, #5
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	440a      	add	r2, r1
 800fe2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	f003 030f 	and.w	r3, r3, #15
 800fe44:	2101      	movs	r1, #1
 800fe46:	fa01 f303 	lsl.w	r3, r1, r3
 800fe4a:	041b      	lsls	r3, r3, #16
 800fe4c:	43db      	mvns	r3, r3
 800fe4e:	68f9      	ldr	r1, [r7, #12]
 800fe50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe54:	4013      	ands	r3, r2
 800fe56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe5e:	69da      	ldr	r2, [r3, #28]
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	f003 030f 	and.w	r3, r3, #15
 800fe68:	2101      	movs	r1, #1
 800fe6a:	fa01 f303 	lsl.w	r3, r1, r3
 800fe6e:	041b      	lsls	r3, r3, #16
 800fe70:	43db      	mvns	r3, r3
 800fe72:	68f9      	ldr	r1, [r7, #12]
 800fe74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe78:	4013      	ands	r3, r2
 800fe7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	015a      	lsls	r2, r3, #5
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	4413      	add	r3, r2
 800fe84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe88:	681a      	ldr	r2, [r3, #0]
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	0159      	lsls	r1, r3, #5
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	440b      	add	r3, r1
 800fe92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe96:	4619      	mov	r1, r3
 800fe98:	4b05      	ldr	r3, [pc, #20]	; (800feb0 <USB_DeactivateEndpoint+0x1b4>)
 800fe9a:	4013      	ands	r3, r2
 800fe9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fe9e:	2300      	movs	r3, #0
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3714      	adds	r7, #20
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr
 800feac:	ec337800 	.word	0xec337800
 800feb0:	eff37800 	.word	0xeff37800

0800feb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b08a      	sub	sp, #40	; 0x28
 800feb8:	af02      	add	r7, sp, #8
 800feba:	60f8      	str	r0, [r7, #12]
 800febc:	60b9      	str	r1, [r7, #8]
 800febe:	4613      	mov	r3, r2
 800fec0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	785b      	ldrb	r3, [r3, #1]
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	f040 8163 	bne.w	801019c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	695b      	ldr	r3, [r3, #20]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d132      	bne.n	800ff44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fede:	69bb      	ldr	r3, [r7, #24]
 800fee0:	015a      	lsls	r2, r3, #5
 800fee2:	69fb      	ldr	r3, [r7, #28]
 800fee4:	4413      	add	r3, r2
 800fee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feea:	691a      	ldr	r2, [r3, #16]
 800feec:	69bb      	ldr	r3, [r7, #24]
 800feee:	0159      	lsls	r1, r3, #5
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	440b      	add	r3, r1
 800fef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fef8:	4619      	mov	r1, r3
 800fefa:	4ba5      	ldr	r3, [pc, #660]	; (8010190 <USB_EPStartXfer+0x2dc>)
 800fefc:	4013      	ands	r3, r2
 800fefe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ff00:	69bb      	ldr	r3, [r7, #24]
 800ff02:	015a      	lsls	r2, r3, #5
 800ff04:	69fb      	ldr	r3, [r7, #28]
 800ff06:	4413      	add	r3, r2
 800ff08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff0c:	691b      	ldr	r3, [r3, #16]
 800ff0e:	69ba      	ldr	r2, [r7, #24]
 800ff10:	0151      	lsls	r1, r2, #5
 800ff12:	69fa      	ldr	r2, [r7, #28]
 800ff14:	440a      	add	r2, r1
 800ff16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ff20:	69bb      	ldr	r3, [r7, #24]
 800ff22:	015a      	lsls	r2, r3, #5
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	4413      	add	r3, r2
 800ff28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff2c:	691a      	ldr	r2, [r3, #16]
 800ff2e:	69bb      	ldr	r3, [r7, #24]
 800ff30:	0159      	lsls	r1, r3, #5
 800ff32:	69fb      	ldr	r3, [r7, #28]
 800ff34:	440b      	add	r3, r1
 800ff36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	4b95      	ldr	r3, [pc, #596]	; (8010194 <USB_EPStartXfer+0x2e0>)
 800ff3e:	4013      	ands	r3, r2
 800ff40:	610b      	str	r3, [r1, #16]
 800ff42:	e074      	b.n	801002e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ff44:	69bb      	ldr	r3, [r7, #24]
 800ff46:	015a      	lsls	r2, r3, #5
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	4413      	add	r3, r2
 800ff4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff50:	691a      	ldr	r2, [r3, #16]
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	0159      	lsls	r1, r3, #5
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	440b      	add	r3, r1
 800ff5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff5e:	4619      	mov	r1, r3
 800ff60:	4b8c      	ldr	r3, [pc, #560]	; (8010194 <USB_EPStartXfer+0x2e0>)
 800ff62:	4013      	ands	r3, r2
 800ff64:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	015a      	lsls	r2, r3, #5
 800ff6a:	69fb      	ldr	r3, [r7, #28]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff72:	691a      	ldr	r2, [r3, #16]
 800ff74:	69bb      	ldr	r3, [r7, #24]
 800ff76:	0159      	lsls	r1, r3, #5
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	440b      	add	r3, r1
 800ff7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff80:	4619      	mov	r1, r3
 800ff82:	4b83      	ldr	r3, [pc, #524]	; (8010190 <USB_EPStartXfer+0x2dc>)
 800ff84:	4013      	ands	r3, r2
 800ff86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ff88:	69bb      	ldr	r3, [r7, #24]
 800ff8a:	015a      	lsls	r2, r3, #5
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	4413      	add	r3, r2
 800ff90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff94:	691a      	ldr	r2, [r3, #16]
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	6959      	ldr	r1, [r3, #20]
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	689b      	ldr	r3, [r3, #8]
 800ff9e:	440b      	add	r3, r1
 800ffa0:	1e59      	subs	r1, r3, #1
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	689b      	ldr	r3, [r3, #8]
 800ffa6:	fbb1 f3f3 	udiv	r3, r1, r3
 800ffaa:	04d9      	lsls	r1, r3, #19
 800ffac:	4b7a      	ldr	r3, [pc, #488]	; (8010198 <USB_EPStartXfer+0x2e4>)
 800ffae:	400b      	ands	r3, r1
 800ffb0:	69b9      	ldr	r1, [r7, #24]
 800ffb2:	0148      	lsls	r0, r1, #5
 800ffb4:	69f9      	ldr	r1, [r7, #28]
 800ffb6:	4401      	add	r1, r0
 800ffb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ffbc:	4313      	orrs	r3, r2
 800ffbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ffc0:	69bb      	ldr	r3, [r7, #24]
 800ffc2:	015a      	lsls	r2, r3, #5
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	4413      	add	r3, r2
 800ffc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffcc:	691a      	ldr	r2, [r3, #16]
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	695b      	ldr	r3, [r3, #20]
 800ffd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ffd6:	69b9      	ldr	r1, [r7, #24]
 800ffd8:	0148      	lsls	r0, r1, #5
 800ffda:	69f9      	ldr	r1, [r7, #28]
 800ffdc:	4401      	add	r1, r0
 800ffde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ffe2:	4313      	orrs	r3, r2
 800ffe4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	78db      	ldrb	r3, [r3, #3]
 800ffea:	2b01      	cmp	r3, #1
 800ffec:	d11f      	bne.n	801002e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ffee:	69bb      	ldr	r3, [r7, #24]
 800fff0:	015a      	lsls	r2, r3, #5
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	4413      	add	r3, r2
 800fff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fffa:	691b      	ldr	r3, [r3, #16]
 800fffc:	69ba      	ldr	r2, [r7, #24]
 800fffe:	0151      	lsls	r1, r2, #5
 8010000:	69fa      	ldr	r2, [r7, #28]
 8010002:	440a      	add	r2, r1
 8010004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010008:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801000c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801000e:	69bb      	ldr	r3, [r7, #24]
 8010010:	015a      	lsls	r2, r3, #5
 8010012:	69fb      	ldr	r3, [r7, #28]
 8010014:	4413      	add	r3, r2
 8010016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001a:	691b      	ldr	r3, [r3, #16]
 801001c:	69ba      	ldr	r2, [r7, #24]
 801001e:	0151      	lsls	r1, r2, #5
 8010020:	69fa      	ldr	r2, [r7, #28]
 8010022:	440a      	add	r2, r1
 8010024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010028:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801002c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801002e:	79fb      	ldrb	r3, [r7, #7]
 8010030:	2b01      	cmp	r3, #1
 8010032:	d14b      	bne.n	80100cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	691b      	ldr	r3, [r3, #16]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d009      	beq.n	8010050 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801003c:	69bb      	ldr	r3, [r7, #24]
 801003e:	015a      	lsls	r2, r3, #5
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	4413      	add	r3, r2
 8010044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010048:	461a      	mov	r2, r3
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	691b      	ldr	r3, [r3, #16]
 801004e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	78db      	ldrb	r3, [r3, #3]
 8010054:	2b01      	cmp	r3, #1
 8010056:	d128      	bne.n	80100aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801005e:	689b      	ldr	r3, [r3, #8]
 8010060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010064:	2b00      	cmp	r3, #0
 8010066:	d110      	bne.n	801008a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	015a      	lsls	r2, r3, #5
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	4413      	add	r3, r2
 8010070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	69ba      	ldr	r2, [r7, #24]
 8010078:	0151      	lsls	r1, r2, #5
 801007a:	69fa      	ldr	r2, [r7, #28]
 801007c:	440a      	add	r2, r1
 801007e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010086:	6013      	str	r3, [r2, #0]
 8010088:	e00f      	b.n	80100aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801008a:	69bb      	ldr	r3, [r7, #24]
 801008c:	015a      	lsls	r2, r3, #5
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	4413      	add	r3, r2
 8010092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	69ba      	ldr	r2, [r7, #24]
 801009a:	0151      	lsls	r1, r2, #5
 801009c:	69fa      	ldr	r2, [r7, #28]
 801009e:	440a      	add	r2, r1
 80100a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80100aa:	69bb      	ldr	r3, [r7, #24]
 80100ac:	015a      	lsls	r2, r3, #5
 80100ae:	69fb      	ldr	r3, [r7, #28]
 80100b0:	4413      	add	r3, r2
 80100b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	69ba      	ldr	r2, [r7, #24]
 80100ba:	0151      	lsls	r1, r2, #5
 80100bc:	69fa      	ldr	r2, [r7, #28]
 80100be:	440a      	add	r2, r1
 80100c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80100c8:	6013      	str	r3, [r2, #0]
 80100ca:	e133      	b.n	8010334 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80100cc:	69bb      	ldr	r3, [r7, #24]
 80100ce:	015a      	lsls	r2, r3, #5
 80100d0:	69fb      	ldr	r3, [r7, #28]
 80100d2:	4413      	add	r3, r2
 80100d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	69ba      	ldr	r2, [r7, #24]
 80100dc:	0151      	lsls	r1, r2, #5
 80100de:	69fa      	ldr	r2, [r7, #28]
 80100e0:	440a      	add	r2, r1
 80100e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80100ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	78db      	ldrb	r3, [r3, #3]
 80100f0:	2b01      	cmp	r3, #1
 80100f2:	d015      	beq.n	8010120 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	695b      	ldr	r3, [r3, #20]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f000 811b 	beq.w	8010334 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	f003 030f 	and.w	r3, r3, #15
 801010e:	2101      	movs	r1, #1
 8010110:	fa01 f303 	lsl.w	r3, r1, r3
 8010114:	69f9      	ldr	r1, [r7, #28]
 8010116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801011a:	4313      	orrs	r3, r2
 801011c:	634b      	str	r3, [r1, #52]	; 0x34
 801011e:	e109      	b.n	8010334 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010126:	689b      	ldr	r3, [r3, #8]
 8010128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801012c:	2b00      	cmp	r3, #0
 801012e:	d110      	bne.n	8010152 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010130:	69bb      	ldr	r3, [r7, #24]
 8010132:	015a      	lsls	r2, r3, #5
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	4413      	add	r3, r2
 8010138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	69ba      	ldr	r2, [r7, #24]
 8010140:	0151      	lsls	r1, r2, #5
 8010142:	69fa      	ldr	r2, [r7, #28]
 8010144:	440a      	add	r2, r1
 8010146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801014a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801014e:	6013      	str	r3, [r2, #0]
 8010150:	e00f      	b.n	8010172 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	015a      	lsls	r2, r3, #5
 8010156:	69fb      	ldr	r3, [r7, #28]
 8010158:	4413      	add	r3, r2
 801015a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	69ba      	ldr	r2, [r7, #24]
 8010162:	0151      	lsls	r1, r2, #5
 8010164:	69fa      	ldr	r2, [r7, #28]
 8010166:	440a      	add	r2, r1
 8010168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801016c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010170:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	68d9      	ldr	r1, [r3, #12]
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	781a      	ldrb	r2, [r3, #0]
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	695b      	ldr	r3, [r3, #20]
 801017e:	b298      	uxth	r0, r3
 8010180:	79fb      	ldrb	r3, [r7, #7]
 8010182:	9300      	str	r3, [sp, #0]
 8010184:	4603      	mov	r3, r0
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	f000 fa38 	bl	80105fc <USB_WritePacket>
 801018c:	e0d2      	b.n	8010334 <USB_EPStartXfer+0x480>
 801018e:	bf00      	nop
 8010190:	e007ffff 	.word	0xe007ffff
 8010194:	fff80000 	.word	0xfff80000
 8010198:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801019c:	69bb      	ldr	r3, [r7, #24]
 801019e:	015a      	lsls	r2, r3, #5
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	4413      	add	r3, r2
 80101a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101a8:	691a      	ldr	r2, [r3, #16]
 80101aa:	69bb      	ldr	r3, [r7, #24]
 80101ac:	0159      	lsls	r1, r3, #5
 80101ae:	69fb      	ldr	r3, [r7, #28]
 80101b0:	440b      	add	r3, r1
 80101b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101b6:	4619      	mov	r1, r3
 80101b8:	4b61      	ldr	r3, [pc, #388]	; (8010340 <USB_EPStartXfer+0x48c>)
 80101ba:	4013      	ands	r3, r2
 80101bc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80101be:	69bb      	ldr	r3, [r7, #24]
 80101c0:	015a      	lsls	r2, r3, #5
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	4413      	add	r3, r2
 80101c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ca:	691a      	ldr	r2, [r3, #16]
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	0159      	lsls	r1, r3, #5
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	440b      	add	r3, r1
 80101d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101d8:	4619      	mov	r1, r3
 80101da:	4b5a      	ldr	r3, [pc, #360]	; (8010344 <USB_EPStartXfer+0x490>)
 80101dc:	4013      	ands	r3, r2
 80101de:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	695b      	ldr	r3, [r3, #20]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d123      	bne.n	8010230 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80101e8:	69bb      	ldr	r3, [r7, #24]
 80101ea:	015a      	lsls	r2, r3, #5
 80101ec:	69fb      	ldr	r3, [r7, #28]
 80101ee:	4413      	add	r3, r2
 80101f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101f4:	691a      	ldr	r2, [r3, #16]
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	689b      	ldr	r3, [r3, #8]
 80101fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101fe:	69b9      	ldr	r1, [r7, #24]
 8010200:	0148      	lsls	r0, r1, #5
 8010202:	69f9      	ldr	r1, [r7, #28]
 8010204:	4401      	add	r1, r0
 8010206:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801020a:	4313      	orrs	r3, r2
 801020c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	015a      	lsls	r2, r3, #5
 8010212:	69fb      	ldr	r3, [r7, #28]
 8010214:	4413      	add	r3, r2
 8010216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801021a:	691b      	ldr	r3, [r3, #16]
 801021c:	69ba      	ldr	r2, [r7, #24]
 801021e:	0151      	lsls	r1, r2, #5
 8010220:	69fa      	ldr	r2, [r7, #28]
 8010222:	440a      	add	r2, r1
 8010224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801022c:	6113      	str	r3, [r2, #16]
 801022e:	e033      	b.n	8010298 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	695a      	ldr	r2, [r3, #20]
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	689b      	ldr	r3, [r3, #8]
 8010238:	4413      	add	r3, r2
 801023a:	1e5a      	subs	r2, r3, #1
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	fbb2 f3f3 	udiv	r3, r2, r3
 8010244:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010246:	69bb      	ldr	r3, [r7, #24]
 8010248:	015a      	lsls	r2, r3, #5
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	4413      	add	r3, r2
 801024e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010252:	691a      	ldr	r2, [r3, #16]
 8010254:	8afb      	ldrh	r3, [r7, #22]
 8010256:	04d9      	lsls	r1, r3, #19
 8010258:	4b3b      	ldr	r3, [pc, #236]	; (8010348 <USB_EPStartXfer+0x494>)
 801025a:	400b      	ands	r3, r1
 801025c:	69b9      	ldr	r1, [r7, #24]
 801025e:	0148      	lsls	r0, r1, #5
 8010260:	69f9      	ldr	r1, [r7, #28]
 8010262:	4401      	add	r1, r0
 8010264:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010268:	4313      	orrs	r3, r2
 801026a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	015a      	lsls	r2, r3, #5
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	4413      	add	r3, r2
 8010274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010278:	691a      	ldr	r2, [r3, #16]
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	689b      	ldr	r3, [r3, #8]
 801027e:	8af9      	ldrh	r1, [r7, #22]
 8010280:	fb01 f303 	mul.w	r3, r1, r3
 8010284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010288:	69b9      	ldr	r1, [r7, #24]
 801028a:	0148      	lsls	r0, r1, #5
 801028c:	69f9      	ldr	r1, [r7, #28]
 801028e:	4401      	add	r1, r0
 8010290:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010294:	4313      	orrs	r3, r2
 8010296:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010298:	79fb      	ldrb	r3, [r7, #7]
 801029a:	2b01      	cmp	r3, #1
 801029c:	d10d      	bne.n	80102ba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	68db      	ldr	r3, [r3, #12]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d009      	beq.n	80102ba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	68d9      	ldr	r1, [r3, #12]
 80102aa:	69bb      	ldr	r3, [r7, #24]
 80102ac:	015a      	lsls	r2, r3, #5
 80102ae:	69fb      	ldr	r3, [r7, #28]
 80102b0:	4413      	add	r3, r2
 80102b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102b6:	460a      	mov	r2, r1
 80102b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	78db      	ldrb	r3, [r3, #3]
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d128      	bne.n	8010314 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80102c2:	69fb      	ldr	r3, [r7, #28]
 80102c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102c8:	689b      	ldr	r3, [r3, #8]
 80102ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d110      	bne.n	80102f4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	015a      	lsls	r2, r3, #5
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	4413      	add	r3, r2
 80102da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	69ba      	ldr	r2, [r7, #24]
 80102e2:	0151      	lsls	r1, r2, #5
 80102e4:	69fa      	ldr	r2, [r7, #28]
 80102e6:	440a      	add	r2, r1
 80102e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80102f0:	6013      	str	r3, [r2, #0]
 80102f2:	e00f      	b.n	8010314 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80102f4:	69bb      	ldr	r3, [r7, #24]
 80102f6:	015a      	lsls	r2, r3, #5
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	4413      	add	r3, r2
 80102fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	69ba      	ldr	r2, [r7, #24]
 8010304:	0151      	lsls	r1, r2, #5
 8010306:	69fa      	ldr	r2, [r7, #28]
 8010308:	440a      	add	r2, r1
 801030a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801030e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010312:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010314:	69bb      	ldr	r3, [r7, #24]
 8010316:	015a      	lsls	r2, r3, #5
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	4413      	add	r3, r2
 801031c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	69ba      	ldr	r2, [r7, #24]
 8010324:	0151      	lsls	r1, r2, #5
 8010326:	69fa      	ldr	r2, [r7, #28]
 8010328:	440a      	add	r2, r1
 801032a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801032e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010332:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010334:	2300      	movs	r3, #0
}
 8010336:	4618      	mov	r0, r3
 8010338:	3720      	adds	r7, #32
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	fff80000 	.word	0xfff80000
 8010344:	e007ffff 	.word	0xe007ffff
 8010348:	1ff80000 	.word	0x1ff80000

0801034c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801034c:	b480      	push	{r7}
 801034e:	b087      	sub	sp, #28
 8010350:	af00      	add	r7, sp, #0
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	4613      	mov	r3, r2
 8010358:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	785b      	ldrb	r3, [r3, #1]
 8010368:	2b01      	cmp	r3, #1
 801036a:	f040 80cd 	bne.w	8010508 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	695b      	ldr	r3, [r3, #20]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d132      	bne.n	80103dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	015a      	lsls	r2, r3, #5
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	4413      	add	r3, r2
 801037e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010382:	691a      	ldr	r2, [r3, #16]
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	0159      	lsls	r1, r3, #5
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	440b      	add	r3, r1
 801038c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010390:	4619      	mov	r1, r3
 8010392:	4b98      	ldr	r3, [pc, #608]	; (80105f4 <USB_EP0StartXfer+0x2a8>)
 8010394:	4013      	ands	r3, r2
 8010396:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	015a      	lsls	r2, r3, #5
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	4413      	add	r3, r2
 80103a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103a4:	691b      	ldr	r3, [r3, #16]
 80103a6:	693a      	ldr	r2, [r7, #16]
 80103a8:	0151      	lsls	r1, r2, #5
 80103aa:	697a      	ldr	r2, [r7, #20]
 80103ac:	440a      	add	r2, r1
 80103ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80103b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	015a      	lsls	r2, r3, #5
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	4413      	add	r3, r2
 80103c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103c4:	691a      	ldr	r2, [r3, #16]
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	0159      	lsls	r1, r3, #5
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	440b      	add	r3, r1
 80103ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103d2:	4619      	mov	r1, r3
 80103d4:	4b88      	ldr	r3, [pc, #544]	; (80105f8 <USB_EP0StartXfer+0x2ac>)
 80103d6:	4013      	ands	r3, r2
 80103d8:	610b      	str	r3, [r1, #16]
 80103da:	e04e      	b.n	801047a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	015a      	lsls	r2, r3, #5
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	4413      	add	r3, r2
 80103e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103e8:	691a      	ldr	r2, [r3, #16]
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	0159      	lsls	r1, r3, #5
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	440b      	add	r3, r1
 80103f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103f6:	4619      	mov	r1, r3
 80103f8:	4b7f      	ldr	r3, [pc, #508]	; (80105f8 <USB_EP0StartXfer+0x2ac>)
 80103fa:	4013      	ands	r3, r2
 80103fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	015a      	lsls	r2, r3, #5
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	4413      	add	r3, r2
 8010406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801040a:	691a      	ldr	r2, [r3, #16]
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	0159      	lsls	r1, r3, #5
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	440b      	add	r3, r1
 8010414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010418:	4619      	mov	r1, r3
 801041a:	4b76      	ldr	r3, [pc, #472]	; (80105f4 <USB_EP0StartXfer+0x2a8>)
 801041c:	4013      	ands	r3, r2
 801041e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	695a      	ldr	r2, [r3, #20]
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	689b      	ldr	r3, [r3, #8]
 8010428:	429a      	cmp	r2, r3
 801042a:	d903      	bls.n	8010434 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	689a      	ldr	r2, [r3, #8]
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	015a      	lsls	r2, r3, #5
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	4413      	add	r3, r2
 801043c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010440:	691b      	ldr	r3, [r3, #16]
 8010442:	693a      	ldr	r2, [r7, #16]
 8010444:	0151      	lsls	r1, r2, #5
 8010446:	697a      	ldr	r2, [r7, #20]
 8010448:	440a      	add	r2, r1
 801044a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801044e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010452:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010454:	693b      	ldr	r3, [r7, #16]
 8010456:	015a      	lsls	r2, r3, #5
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	4413      	add	r3, r2
 801045c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010460:	691a      	ldr	r2, [r3, #16]
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	695b      	ldr	r3, [r3, #20]
 8010466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801046a:	6939      	ldr	r1, [r7, #16]
 801046c:	0148      	lsls	r0, r1, #5
 801046e:	6979      	ldr	r1, [r7, #20]
 8010470:	4401      	add	r1, r0
 8010472:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010476:	4313      	orrs	r3, r2
 8010478:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801047a:	79fb      	ldrb	r3, [r7, #7]
 801047c:	2b01      	cmp	r3, #1
 801047e:	d11e      	bne.n	80104be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	691b      	ldr	r3, [r3, #16]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d009      	beq.n	801049c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	015a      	lsls	r2, r3, #5
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	4413      	add	r3, r2
 8010490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010494:	461a      	mov	r2, r3
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	691b      	ldr	r3, [r3, #16]
 801049a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	015a      	lsls	r2, r3, #5
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	4413      	add	r3, r2
 80104a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	693a      	ldr	r2, [r7, #16]
 80104ac:	0151      	lsls	r1, r2, #5
 80104ae:	697a      	ldr	r2, [r7, #20]
 80104b0:	440a      	add	r2, r1
 80104b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80104ba:	6013      	str	r3, [r2, #0]
 80104bc:	e092      	b.n	80105e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	015a      	lsls	r2, r3, #5
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	4413      	add	r3, r2
 80104c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	693a      	ldr	r2, [r7, #16]
 80104ce:	0151      	lsls	r1, r2, #5
 80104d0:	697a      	ldr	r2, [r7, #20]
 80104d2:	440a      	add	r2, r1
 80104d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80104dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	695b      	ldr	r3, [r3, #20]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d07e      	beq.n	80105e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	f003 030f 	and.w	r3, r3, #15
 80104f6:	2101      	movs	r1, #1
 80104f8:	fa01 f303 	lsl.w	r3, r1, r3
 80104fc:	6979      	ldr	r1, [r7, #20]
 80104fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010502:	4313      	orrs	r3, r2
 8010504:	634b      	str	r3, [r1, #52]	; 0x34
 8010506:	e06d      	b.n	80105e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	015a      	lsls	r2, r3, #5
 801050c:	697b      	ldr	r3, [r7, #20]
 801050e:	4413      	add	r3, r2
 8010510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010514:	691a      	ldr	r2, [r3, #16]
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	0159      	lsls	r1, r3, #5
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	440b      	add	r3, r1
 801051e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010522:	4619      	mov	r1, r3
 8010524:	4b34      	ldr	r3, [pc, #208]	; (80105f8 <USB_EP0StartXfer+0x2ac>)
 8010526:	4013      	ands	r3, r2
 8010528:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	015a      	lsls	r2, r3, #5
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	4413      	add	r3, r2
 8010532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010536:	691a      	ldr	r2, [r3, #16]
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	0159      	lsls	r1, r3, #5
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	440b      	add	r3, r1
 8010540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010544:	4619      	mov	r1, r3
 8010546:	4b2b      	ldr	r3, [pc, #172]	; (80105f4 <USB_EP0StartXfer+0x2a8>)
 8010548:	4013      	ands	r3, r2
 801054a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	695b      	ldr	r3, [r3, #20]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d003      	beq.n	801055c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	689a      	ldr	r2, [r3, #8]
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	015a      	lsls	r2, r3, #5
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	4413      	add	r3, r2
 8010564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010568:	691b      	ldr	r3, [r3, #16]
 801056a:	693a      	ldr	r2, [r7, #16]
 801056c:	0151      	lsls	r1, r2, #5
 801056e:	697a      	ldr	r2, [r7, #20]
 8010570:	440a      	add	r2, r1
 8010572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801057a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	015a      	lsls	r2, r3, #5
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	4413      	add	r3, r2
 8010584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010588:	691a      	ldr	r2, [r3, #16]
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	689b      	ldr	r3, [r3, #8]
 801058e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010592:	6939      	ldr	r1, [r7, #16]
 8010594:	0148      	lsls	r0, r1, #5
 8010596:	6979      	ldr	r1, [r7, #20]
 8010598:	4401      	add	r1, r0
 801059a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801059e:	4313      	orrs	r3, r2
 80105a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80105a2:	79fb      	ldrb	r3, [r7, #7]
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d10d      	bne.n	80105c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	68db      	ldr	r3, [r3, #12]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d009      	beq.n	80105c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	68d9      	ldr	r1, [r3, #12]
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	015a      	lsls	r2, r3, #5
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	4413      	add	r3, r2
 80105bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105c0:	460a      	mov	r2, r1
 80105c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	015a      	lsls	r2, r3, #5
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	4413      	add	r3, r2
 80105cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	693a      	ldr	r2, [r7, #16]
 80105d4:	0151      	lsls	r1, r2, #5
 80105d6:	697a      	ldr	r2, [r7, #20]
 80105d8:	440a      	add	r2, r1
 80105da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80105e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80105e4:	2300      	movs	r3, #0
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	371c      	adds	r7, #28
 80105ea:	46bd      	mov	sp, r7
 80105ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f0:	4770      	bx	lr
 80105f2:	bf00      	nop
 80105f4:	e007ffff 	.word	0xe007ffff
 80105f8:	fff80000 	.word	0xfff80000

080105fc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80105fc:	b480      	push	{r7}
 80105fe:	b089      	sub	sp, #36	; 0x24
 8010600:	af00      	add	r7, sp, #0
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	60b9      	str	r1, [r7, #8]
 8010606:	4611      	mov	r1, r2
 8010608:	461a      	mov	r2, r3
 801060a:	460b      	mov	r3, r1
 801060c:	71fb      	strb	r3, [r7, #7]
 801060e:	4613      	mov	r3, r2
 8010610:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 801061a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801061e:	2b00      	cmp	r3, #0
 8010620:	d11a      	bne.n	8010658 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010622:	88bb      	ldrh	r3, [r7, #4]
 8010624:	3303      	adds	r3, #3
 8010626:	089b      	lsrs	r3, r3, #2
 8010628:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801062a:	2300      	movs	r3, #0
 801062c:	61bb      	str	r3, [r7, #24]
 801062e:	e00f      	b.n	8010650 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010630:	79fb      	ldrb	r3, [r7, #7]
 8010632:	031a      	lsls	r2, r3, #12
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	4413      	add	r3, r2
 8010638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801063c:	461a      	mov	r2, r3
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010644:	69fb      	ldr	r3, [r7, #28]
 8010646:	3304      	adds	r3, #4
 8010648:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	3301      	adds	r3, #1
 801064e:	61bb      	str	r3, [r7, #24]
 8010650:	69ba      	ldr	r2, [r7, #24]
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	429a      	cmp	r2, r3
 8010656:	d3eb      	bcc.n	8010630 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010658:	2300      	movs	r3, #0
}
 801065a:	4618      	mov	r0, r3
 801065c:	3724      	adds	r7, #36	; 0x24
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr

08010666 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010666:	b480      	push	{r7}
 8010668:	b089      	sub	sp, #36	; 0x24
 801066a:	af00      	add	r7, sp, #0
 801066c:	60f8      	str	r0, [r7, #12]
 801066e:	60b9      	str	r1, [r7, #8]
 8010670:	4613      	mov	r3, r2
 8010672:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801067c:	88fb      	ldrh	r3, [r7, #6]
 801067e:	3303      	adds	r3, #3
 8010680:	089b      	lsrs	r3, r3, #2
 8010682:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010684:	2300      	movs	r3, #0
 8010686:	61bb      	str	r3, [r7, #24]
 8010688:	e00b      	b.n	80106a2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010690:	681a      	ldr	r2, [r3, #0]
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	601a      	str	r2, [r3, #0]
    pDest++;
 8010696:	69fb      	ldr	r3, [r7, #28]
 8010698:	3304      	adds	r3, #4
 801069a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801069c:	69bb      	ldr	r3, [r7, #24]
 801069e:	3301      	adds	r3, #1
 80106a0:	61bb      	str	r3, [r7, #24]
 80106a2:	69ba      	ldr	r2, [r7, #24]
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d3ef      	bcc.n	801068a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80106aa:	69fb      	ldr	r3, [r7, #28]
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3724      	adds	r7, #36	; 0x24
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr

080106b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b085      	sub	sp, #20
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	785b      	ldrb	r3, [r3, #1]
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	d12c      	bne.n	801072e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	015a      	lsls	r2, r3, #5
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	4413      	add	r3, r2
 80106dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	db12      	blt.n	801070c <USB_EPSetStall+0x54>
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00f      	beq.n	801070c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	015a      	lsls	r2, r3, #5
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	4413      	add	r3, r2
 80106f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	68ba      	ldr	r2, [r7, #8]
 80106fc:	0151      	lsls	r1, r2, #5
 80106fe:	68fa      	ldr	r2, [r7, #12]
 8010700:	440a      	add	r2, r1
 8010702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010706:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801070a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	015a      	lsls	r2, r3, #5
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	4413      	add	r3, r2
 8010714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	68ba      	ldr	r2, [r7, #8]
 801071c:	0151      	lsls	r1, r2, #5
 801071e:	68fa      	ldr	r2, [r7, #12]
 8010720:	440a      	add	r2, r1
 8010722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010726:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801072a:	6013      	str	r3, [r2, #0]
 801072c:	e02b      	b.n	8010786 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	015a      	lsls	r2, r3, #5
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	4413      	add	r3, r2
 8010736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	db12      	blt.n	8010766 <USB_EPSetStall+0xae>
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d00f      	beq.n	8010766 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	015a      	lsls	r2, r3, #5
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	4413      	add	r3, r2
 801074e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	68ba      	ldr	r2, [r7, #8]
 8010756:	0151      	lsls	r1, r2, #5
 8010758:	68fa      	ldr	r2, [r7, #12]
 801075a:	440a      	add	r2, r1
 801075c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010760:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010764:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	015a      	lsls	r2, r3, #5
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	4413      	add	r3, r2
 801076e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	68ba      	ldr	r2, [r7, #8]
 8010776:	0151      	lsls	r1, r2, #5
 8010778:	68fa      	ldr	r2, [r7, #12]
 801077a:	440a      	add	r2, r1
 801077c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010784:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010786:	2300      	movs	r3, #0
}
 8010788:	4618      	mov	r0, r3
 801078a:	3714      	adds	r7, #20
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr

08010794 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010794:	b480      	push	{r7}
 8010796:	b085      	sub	sp, #20
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	785b      	ldrb	r3, [r3, #1]
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d128      	bne.n	8010802 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	015a      	lsls	r2, r3, #5
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	4413      	add	r3, r2
 80107b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	68ba      	ldr	r2, [r7, #8]
 80107c0:	0151      	lsls	r1, r2, #5
 80107c2:	68fa      	ldr	r2, [r7, #12]
 80107c4:	440a      	add	r2, r1
 80107c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80107ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	78db      	ldrb	r3, [r3, #3]
 80107d4:	2b03      	cmp	r3, #3
 80107d6:	d003      	beq.n	80107e0 <USB_EPClearStall+0x4c>
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	78db      	ldrb	r3, [r3, #3]
 80107dc:	2b02      	cmp	r3, #2
 80107de:	d138      	bne.n	8010852 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	015a      	lsls	r2, r3, #5
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	4413      	add	r3, r2
 80107e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	68ba      	ldr	r2, [r7, #8]
 80107f0:	0151      	lsls	r1, r2, #5
 80107f2:	68fa      	ldr	r2, [r7, #12]
 80107f4:	440a      	add	r2, r1
 80107f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107fe:	6013      	str	r3, [r2, #0]
 8010800:	e027      	b.n	8010852 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	015a      	lsls	r2, r3, #5
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	4413      	add	r3, r2
 801080a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	68ba      	ldr	r2, [r7, #8]
 8010812:	0151      	lsls	r1, r2, #5
 8010814:	68fa      	ldr	r2, [r7, #12]
 8010816:	440a      	add	r2, r1
 8010818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801081c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010820:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	78db      	ldrb	r3, [r3, #3]
 8010826:	2b03      	cmp	r3, #3
 8010828:	d003      	beq.n	8010832 <USB_EPClearStall+0x9e>
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	78db      	ldrb	r3, [r3, #3]
 801082e:	2b02      	cmp	r3, #2
 8010830:	d10f      	bne.n	8010852 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	015a      	lsls	r2, r3, #5
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	4413      	add	r3, r2
 801083a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	0151      	lsls	r1, r2, #5
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	440a      	add	r2, r1
 8010848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010850:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010852:	2300      	movs	r3, #0
}
 8010854:	4618      	mov	r0, r3
 8010856:	3714      	adds	r7, #20
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr

08010860 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010860:	b480      	push	{r7}
 8010862:	b085      	sub	sp, #20
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	460b      	mov	r3, r1
 801086a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801087e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010882:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	78fb      	ldrb	r3, [r7, #3]
 801088e:	011b      	lsls	r3, r3, #4
 8010890:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010894:	68f9      	ldr	r1, [r7, #12]
 8010896:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801089a:	4313      	orrs	r3, r2
 801089c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801089e:	2300      	movs	r3, #0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3714      	adds	r7, #20
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr

080108ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b084      	sub	sp, #16
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	68fa      	ldr	r2, [r7, #12]
 80108c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80108c6:	f023 0302 	bic.w	r3, r3, #2
 80108ca:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80108cc:	2003      	movs	r0, #3
 80108ce:	f7f2 f9ff 	bl	8002cd0 <HAL_Delay>

  return HAL_OK;
 80108d2:	2300      	movs	r3, #0
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3710      	adds	r7, #16
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b084      	sub	sp, #16
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	68fa      	ldr	r2, [r7, #12]
 80108f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80108f6:	f043 0302 	orr.w	r3, r3, #2
 80108fa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80108fc:	2003      	movs	r0, #3
 80108fe:	f7f2 f9e7 	bl	8002cd0 <HAL_Delay>

  return HAL_OK;
 8010902:	2300      	movs	r3, #0
}
 8010904:	4618      	mov	r0, r3
 8010906:	3710      	adds	r7, #16
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801090c:	b480      	push	{r7}
 801090e:	b085      	sub	sp, #20
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	695b      	ldr	r3, [r3, #20]
 8010918:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	699b      	ldr	r3, [r3, #24]
 801091e:	68fa      	ldr	r2, [r7, #12]
 8010920:	4013      	ands	r3, r2
 8010922:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010924:	68fb      	ldr	r3, [r7, #12]
}
 8010926:	4618      	mov	r0, r3
 8010928:	3714      	adds	r7, #20
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010932:	b480      	push	{r7}
 8010934:	b085      	sub	sp, #20
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010944:	699b      	ldr	r3, [r3, #24]
 8010946:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801094e:	69db      	ldr	r3, [r3, #28]
 8010950:	68ba      	ldr	r2, [r7, #8]
 8010952:	4013      	ands	r3, r2
 8010954:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	0c1b      	lsrs	r3, r3, #16
}
 801095a:	4618      	mov	r0, r3
 801095c:	3714      	adds	r7, #20
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr

08010966 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010966:	b480      	push	{r7}
 8010968:	b085      	sub	sp, #20
 801096a:	af00      	add	r7, sp, #0
 801096c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010978:	699b      	ldr	r3, [r3, #24]
 801097a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010982:	69db      	ldr	r3, [r3, #28]
 8010984:	68ba      	ldr	r2, [r7, #8]
 8010986:	4013      	ands	r3, r2
 8010988:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	b29b      	uxth	r3, r3
}
 801098e:	4618      	mov	r0, r3
 8010990:	3714      	adds	r7, #20
 8010992:	46bd      	mov	sp, r7
 8010994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010998:	4770      	bx	lr

0801099a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801099a:	b480      	push	{r7}
 801099c:	b085      	sub	sp, #20
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
 80109a2:	460b      	mov	r3, r1
 80109a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80109aa:	78fb      	ldrb	r3, [r7, #3]
 80109ac:	015a      	lsls	r2, r3, #5
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	4413      	add	r3, r2
 80109b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109b6:	689b      	ldr	r3, [r3, #8]
 80109b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109c0:	695b      	ldr	r3, [r3, #20]
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	4013      	ands	r3, r2
 80109c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80109c8:	68bb      	ldr	r3, [r7, #8]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3714      	adds	r7, #20
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr

080109d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80109d6:	b480      	push	{r7}
 80109d8:	b087      	sub	sp, #28
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
 80109de:	460b      	mov	r3, r1
 80109e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109ec:	691b      	ldr	r3, [r3, #16]
 80109ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80109fa:	78fb      	ldrb	r3, [r7, #3]
 80109fc:	f003 030f 	and.w	r3, r3, #15
 8010a00:	68fa      	ldr	r2, [r7, #12]
 8010a02:	fa22 f303 	lsr.w	r3, r2, r3
 8010a06:	01db      	lsls	r3, r3, #7
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	693a      	ldr	r2, [r7, #16]
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010a10:	78fb      	ldrb	r3, [r7, #3]
 8010a12:	015a      	lsls	r2, r3, #5
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	4413      	add	r3, r2
 8010a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a1c:	689b      	ldr	r3, [r3, #8]
 8010a1e:	693a      	ldr	r2, [r7, #16]
 8010a20:	4013      	ands	r3, r2
 8010a22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010a24:	68bb      	ldr	r3, [r7, #8]
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	371c      	adds	r7, #28
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a30:	4770      	bx	lr

08010a32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010a32:	b480      	push	{r7}
 8010a34:	b083      	sub	sp, #12
 8010a36:	af00      	add	r7, sp, #0
 8010a38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	695b      	ldr	r3, [r3, #20]
 8010a3e:	f003 0301 	and.w	r3, r3, #1
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	370c      	adds	r7, #12
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr
	...

08010a50 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010a50:	b480      	push	{r7}
 8010a52:	b085      	sub	sp, #20
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	4b09      	ldr	r3, [pc, #36]	; (8010a94 <USB_ActivateSetup+0x44>)
 8010a6e:	4013      	ands	r3, r2
 8010a70:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a78:	685b      	ldr	r3, [r3, #4]
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010a86:	2300      	movs	r3, #0
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3714      	adds	r7, #20
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr
 8010a94:	fffff800 	.word	0xfffff800

08010a98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b087      	sub	sp, #28
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	460b      	mov	r3, r1
 8010aa2:	607a      	str	r2, [r7, #4]
 8010aa4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	333c      	adds	r3, #60	; 0x3c
 8010aae:	3304      	adds	r3, #4
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	4a26      	ldr	r2, [pc, #152]	; (8010b50 <USB_EP0_OutStart+0xb8>)
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d90a      	bls.n	8010ad2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010acc:	d101      	bne.n	8010ad2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	e037      	b.n	8010b42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ad8:	461a      	mov	r2, r3
 8010ada:	2300      	movs	r3, #0
 8010adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ae4:	691b      	ldr	r3, [r3, #16]
 8010ae6:	697a      	ldr	r2, [r7, #20]
 8010ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010af8:	691b      	ldr	r3, [r3, #16]
 8010afa:	697a      	ldr	r2, [r7, #20]
 8010afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b00:	f043 0318 	orr.w	r3, r3, #24
 8010b04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b0c:	691b      	ldr	r3, [r3, #16]
 8010b0e:	697a      	ldr	r2, [r7, #20]
 8010b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010b18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010b1a:	7afb      	ldrb	r3, [r7, #11]
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d10f      	bne.n	8010b40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b26:	461a      	mov	r2, r3
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	697a      	ldr	r2, [r7, #20]
 8010b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010b3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b40:	2300      	movs	r3, #0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	371c      	adds	r7, #28
 8010b46:	46bd      	mov	sp, r7
 8010b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4c:	4770      	bx	lr
 8010b4e:	bf00      	nop
 8010b50:	4f54300a 	.word	0x4f54300a

08010b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010b54:	b480      	push	{r7}
 8010b56:	b085      	sub	sp, #20
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	3301      	adds	r3, #1
 8010b64:	60fb      	str	r3, [r7, #12]
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	4a13      	ldr	r2, [pc, #76]	; (8010bb8 <USB_CoreReset+0x64>)
 8010b6a:	4293      	cmp	r3, r2
 8010b6c:	d901      	bls.n	8010b72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010b6e:	2303      	movs	r3, #3
 8010b70:	e01b      	b.n	8010baa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	691b      	ldr	r3, [r3, #16]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	daf2      	bge.n	8010b60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	691b      	ldr	r3, [r3, #16]
 8010b82:	f043 0201 	orr.w	r2, r3, #1
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	3301      	adds	r3, #1
 8010b8e:	60fb      	str	r3, [r7, #12]
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	4a09      	ldr	r2, [pc, #36]	; (8010bb8 <USB_CoreReset+0x64>)
 8010b94:	4293      	cmp	r3, r2
 8010b96:	d901      	bls.n	8010b9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010b98:	2303      	movs	r3, #3
 8010b9a:	e006      	b.n	8010baa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	691b      	ldr	r3, [r3, #16]
 8010ba0:	f003 0301 	and.w	r3, r3, #1
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	d0f0      	beq.n	8010b8a <USB_CoreReset+0x36>

  return HAL_OK;
 8010ba8:	2300      	movs	r3, #0
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3714      	adds	r7, #20
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr
 8010bb6:	bf00      	nop
 8010bb8:	00030d40 	.word	0x00030d40

08010bbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010bc0:	4904      	ldr	r1, [pc, #16]	; (8010bd4 <MX_FATFS_Init+0x18>)
 8010bc2:	4805      	ldr	r0, [pc, #20]	; (8010bd8 <MX_FATFS_Init+0x1c>)
 8010bc4:	f001 feb2 	bl	801292c <FATFS_LinkDriver>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	461a      	mov	r2, r3
 8010bcc:	4b03      	ldr	r3, [pc, #12]	; (8010bdc <MX_FATFS_Init+0x20>)
 8010bce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010bd0:	bf00      	nop
 8010bd2:	bd80      	pop	{r7, pc}
 8010bd4:	2401c524 	.word	0x2401c524
 8010bd8:	08017e80 	.word	0x08017e80
 8010bdc:	2401c520 	.word	0x2401c520

08010be0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010be6:	2300      	movs	r3, #0
 8010be8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010bea:	f000 f885 	bl	8010cf8 <BSP_SD_IsDetected>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d001      	beq.n	8010bf8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010bf4:	2302      	movs	r3, #2
 8010bf6:	e012      	b.n	8010c1e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010bf8:	480b      	ldr	r0, [pc, #44]	; (8010c28 <BSP_SD_Init+0x48>)
 8010bfa:	f7f9 ff77 	bl	800aaec <HAL_SD_Init>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010c02:	79fb      	ldrb	r3, [r7, #7]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d109      	bne.n	8010c1c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010c08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010c0c:	4806      	ldr	r0, [pc, #24]	; (8010c28 <BSP_SD_Init+0x48>)
 8010c0e:	f7fa fe33 	bl	800b878 <HAL_SD_ConfigWideBusOperation>
 8010c12:	4603      	mov	r3, r0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d001      	beq.n	8010c1c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010c18:	2301      	movs	r3, #1
 8010c1a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010c1c:	79fb      	ldrb	r3, [r7, #7]
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
 8010c26:	bf00      	nop
 8010c28:	2400ba7c 	.word	0x2400ba7c

08010c2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b086      	sub	sp, #24
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	60f8      	str	r0, [r7, #12]
 8010c34:	60b9      	str	r1, [r7, #8]
 8010c36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	68ba      	ldr	r2, [r7, #8]
 8010c40:	68f9      	ldr	r1, [r7, #12]
 8010c42:	4806      	ldr	r0, [pc, #24]	; (8010c5c <BSP_SD_ReadBlocks_DMA+0x30>)
 8010c44:	f7fa f876 	bl	800ad34 <HAL_SD_ReadBlocks_DMA>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d001      	beq.n	8010c52 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010c4e:	2301      	movs	r3, #1
 8010c50:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3718      	adds	r7, #24
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	2400ba7c 	.word	0x2400ba7c

08010c60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b086      	sub	sp, #24
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	60f8      	str	r0, [r7, #12]
 8010c68:	60b9      	str	r1, [r7, #8]
 8010c6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	68ba      	ldr	r2, [r7, #8]
 8010c74:	68f9      	ldr	r1, [r7, #12]
 8010c76:	4806      	ldr	r0, [pc, #24]	; (8010c90 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010c78:	f7fa f904 	bl	800ae84 <HAL_SD_WriteBlocks_DMA>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d001      	beq.n	8010c86 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010c82:	2301      	movs	r3, #1
 8010c84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3718      	adds	r7, #24
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	2400ba7c 	.word	0x2400ba7c

08010c94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010c98:	4805      	ldr	r0, [pc, #20]	; (8010cb0 <BSP_SD_GetCardState+0x1c>)
 8010c9a:	f7fa fe97 	bl	800b9cc <HAL_SD_GetCardState>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b04      	cmp	r3, #4
 8010ca2:	bf14      	ite	ne
 8010ca4:	2301      	movne	r3, #1
 8010ca6:	2300      	moveq	r3, #0
 8010ca8:	b2db      	uxtb	r3, r3
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	bd80      	pop	{r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	2400ba7c 	.word	0x2400ba7c

08010cb4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010cbc:	6879      	ldr	r1, [r7, #4]
 8010cbe:	4803      	ldr	r0, [pc, #12]	; (8010ccc <BSP_SD_GetCardInfo+0x18>)
 8010cc0:	f7fa fdae 	bl	800b820 <HAL_SD_GetCardInfo>
}
 8010cc4:	bf00      	nop
 8010cc6:	3708      	adds	r7, #8
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}
 8010ccc:	2400ba7c 	.word	0x2400ba7c

08010cd0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010cd8:	f000 f9ac 	bl	8011034 <BSP_SD_WriteCpltCallback>
}
 8010cdc:	bf00      	nop
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010cec:	f000 f9b4 	bl	8011058 <BSP_SD_ReadCpltCallback>
}
 8010cf0:	bf00      	nop
 8010cf2:	3708      	adds	r7, #8
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}

08010cf8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010cfe:	2301      	movs	r3, #1
 8010d00:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010d02:	f000 f80b 	bl	8010d1c <BSP_PlatformIsDetected>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d101      	bne.n	8010d10 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010d10:	79fb      	ldrb	r3, [r7, #7]
 8010d12:	b2db      	uxtb	r3, r3
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3708      	adds	r7, #8
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010d22:	2301      	movs	r3, #1
 8010d24:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010d2a:	4806      	ldr	r0, [pc, #24]	; (8010d44 <BSP_PlatformIsDetected+0x28>)
 8010d2c:	f7f5 fdee 	bl	800690c <HAL_GPIO_ReadPin>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d001      	beq.n	8010d3a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010d36:	2300      	movs	r3, #0
 8010d38:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3708      	adds	r7, #8
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	58020800 	.word	0x58020800

08010d48 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b084      	sub	sp, #16
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8010d50:	f001 fe8e 	bl	8012a70 <osKernelGetTickCount>
 8010d54:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8010d56:	e006      	b.n	8010d66 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010d58:	f7ff ff9c 	bl	8010c94 <BSP_SD_GetCardState>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d101      	bne.n	8010d66 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010d62:	2300      	movs	r3, #0
 8010d64:	e009      	b.n	8010d7a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8010d66:	f001 fe83 	bl	8012a70 <osKernelGetTickCount>
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	1ad3      	subs	r3, r2, r3
 8010d70:	687a      	ldr	r2, [r7, #4]
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d8f0      	bhi.n	8010d58 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
	...

08010d84 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010d8e:	4b0b      	ldr	r3, [pc, #44]	; (8010dbc <SD_CheckStatus+0x38>)
 8010d90:	2201      	movs	r2, #1
 8010d92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010d94:	f7ff ff7e 	bl	8010c94 <BSP_SD_GetCardState>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d107      	bne.n	8010dae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010d9e:	4b07      	ldr	r3, [pc, #28]	; (8010dbc <SD_CheckStatus+0x38>)
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	f023 0301 	bic.w	r3, r3, #1
 8010da8:	b2da      	uxtb	r2, r3
 8010daa:	4b04      	ldr	r3, [pc, #16]	; (8010dbc <SD_CheckStatus+0x38>)
 8010dac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010dae:	4b03      	ldr	r3, [pc, #12]	; (8010dbc <SD_CheckStatus+0x38>)
 8010db0:	781b      	ldrb	r3, [r3, #0]
 8010db2:	b2db      	uxtb	r3, r3
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3708      	adds	r7, #8
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	2400000d 	.word	0x2400000d

08010dc0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8010dca:	4b1c      	ldr	r3, [pc, #112]	; (8010e3c <SD_initialize+0x7c>)
 8010dcc:	2201      	movs	r2, #1
 8010dce:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8010dd0:	f001 fdf6 	bl	80129c0 <osKernelGetState>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	2b02      	cmp	r3, #2
 8010dd8:	d129      	bne.n	8010e2e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8010dda:	f7ff ff01 	bl	8010be0 <BSP_SD_Init>
 8010dde:	4603      	mov	r3, r0
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d107      	bne.n	8010df4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8010de4:	79fb      	ldrb	r3, [r7, #7]
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7ff ffcc 	bl	8010d84 <SD_CheckStatus>
 8010dec:	4603      	mov	r3, r0
 8010dee:	461a      	mov	r2, r3
 8010df0:	4b12      	ldr	r3, [pc, #72]	; (8010e3c <SD_initialize+0x7c>)
 8010df2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8010df4:	4b11      	ldr	r3, [pc, #68]	; (8010e3c <SD_initialize+0x7c>)
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	b2db      	uxtb	r3, r3
 8010dfa:	2b01      	cmp	r3, #1
 8010dfc:	d017      	beq.n	8010e2e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8010dfe:	4b10      	ldr	r3, [pc, #64]	; (8010e40 <SD_initialize+0x80>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d107      	bne.n	8010e16 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8010e06:	2200      	movs	r2, #0
 8010e08:	2102      	movs	r1, #2
 8010e0a:	200a      	movs	r0, #10
 8010e0c:	f002 f8be 	bl	8012f8c <osMessageQueueNew>
 8010e10:	4602      	mov	r2, r0
 8010e12:	4b0b      	ldr	r3, [pc, #44]	; (8010e40 <SD_initialize+0x80>)
 8010e14:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 8010e16:	4b0a      	ldr	r3, [pc, #40]	; (8010e40 <SD_initialize+0x80>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d107      	bne.n	8010e2e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8010e1e:	4b07      	ldr	r3, [pc, #28]	; (8010e3c <SD_initialize+0x7c>)
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	f043 0301 	orr.w	r3, r3, #1
 8010e28:	b2da      	uxtb	r2, r3
 8010e2a:	4b04      	ldr	r3, [pc, #16]	; (8010e3c <SD_initialize+0x7c>)
 8010e2c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8010e2e:	4b03      	ldr	r3, [pc, #12]	; (8010e3c <SD_initialize+0x7c>)
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	b2db      	uxtb	r3, r3
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	2400000d 	.word	0x2400000d
 8010e40:	240002dc 	.word	0x240002dc

08010e44 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b082      	sub	sp, #8
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010e4e:	79fb      	ldrb	r3, [r7, #7]
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7ff ff97 	bl	8010d84 <SD_CheckStatus>
 8010e56:	4603      	mov	r3, r0
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3708      	adds	r7, #8
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b088      	sub	sp, #32
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	60b9      	str	r1, [r7, #8]
 8010e68:	607a      	str	r2, [r7, #4]
 8010e6a:	603b      	str	r3, [r7, #0]
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010e70:	2301      	movs	r3, #1
 8010e72:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010e74:	f247 5030 	movw	r0, #30000	; 0x7530
 8010e78:	f7ff ff66 	bl	8010d48 <SD_CheckStatusWithTimeout>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	da01      	bge.n	8010e86 <SD_read+0x26>
  {
    return res;
 8010e82:	7ffb      	ldrb	r3, [r7, #31]
 8010e84:	e02f      	b.n	8010ee6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8010e86:	683a      	ldr	r2, [r7, #0]
 8010e88:	6879      	ldr	r1, [r7, #4]
 8010e8a:	68b8      	ldr	r0, [r7, #8]
 8010e8c:	f7ff fece 	bl	8010c2c <BSP_SD_ReadBlocks_DMA>
 8010e90:	4603      	mov	r3, r0
 8010e92:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8010e94:	7fbb      	ldrb	r3, [r7, #30]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d124      	bne.n	8010ee4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8010e9a:	4b15      	ldr	r3, [pc, #84]	; (8010ef0 <SD_read+0x90>)
 8010e9c:	6818      	ldr	r0, [r3, #0]
 8010e9e:	f107 0112 	add.w	r1, r7, #18
 8010ea2:	f247 5330 	movw	r3, #30000	; 0x7530
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f002 f96a 	bl	8013180 <osMessageQueueGet>
 8010eac:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d117      	bne.n	8010ee4 <SD_read+0x84>
 8010eb4:	8a7b      	ldrh	r3, [r7, #18]
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	d114      	bne.n	8010ee4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8010eba:	f001 fdd9 	bl	8012a70 <osKernelGetTickCount>
 8010ebe:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8010ec0:	e007      	b.n	8010ed2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ec2:	f7ff fee7 	bl	8010c94 <BSP_SD_GetCardState>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d102      	bne.n	8010ed2 <SD_read+0x72>
              {
                res = RES_OK;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8010ed0:	e008      	b.n	8010ee4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8010ed2:	f001 fdcd 	bl	8012a70 <osKernelGetTickCount>
 8010ed6:	4602      	mov	r2, r0
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	1ad3      	subs	r3, r2, r3
 8010edc:	f247 522f 	movw	r2, #29999	; 0x752f
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d9ee      	bls.n	8010ec2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8010ee4:	7ffb      	ldrb	r3, [r7, #31]
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3720      	adds	r7, #32
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	240002dc 	.word	0x240002dc

08010ef4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b088      	sub	sp, #32
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60b9      	str	r1, [r7, #8]
 8010efc:	607a      	str	r2, [r7, #4]
 8010efe:	603b      	str	r3, [r7, #0]
 8010f00:	4603      	mov	r3, r0
 8010f02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f04:	2301      	movs	r3, #1
 8010f06:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010f08:	f247 5030 	movw	r0, #30000	; 0x7530
 8010f0c:	f7ff ff1c 	bl	8010d48 <SD_CheckStatusWithTimeout>
 8010f10:	4603      	mov	r3, r0
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	da01      	bge.n	8010f1a <SD_write+0x26>
  {
    return res;
 8010f16:	7ffb      	ldrb	r3, [r7, #31]
 8010f18:	e02d      	b.n	8010f76 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010f1a:	683a      	ldr	r2, [r7, #0]
 8010f1c:	6879      	ldr	r1, [r7, #4]
 8010f1e:	68b8      	ldr	r0, [r7, #8]
 8010f20:	f7ff fe9e 	bl	8010c60 <BSP_SD_WriteBlocks_DMA>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d124      	bne.n	8010f74 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8010f2a:	4b15      	ldr	r3, [pc, #84]	; (8010f80 <SD_write+0x8c>)
 8010f2c:	6818      	ldr	r0, [r3, #0]
 8010f2e:	f107 0112 	add.w	r1, r7, #18
 8010f32:	f247 5330 	movw	r3, #30000	; 0x7530
 8010f36:	2200      	movs	r2, #0
 8010f38:	f002 f922 	bl	8013180 <osMessageQueueGet>
 8010f3c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8010f3e:	69bb      	ldr	r3, [r7, #24]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d117      	bne.n	8010f74 <SD_write+0x80>
 8010f44:	8a7b      	ldrh	r3, [r7, #18]
 8010f46:	2b02      	cmp	r3, #2
 8010f48:	d114      	bne.n	8010f74 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8010f4a:	f001 fd91 	bl	8012a70 <osKernelGetTickCount>
 8010f4e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8010f50:	e007      	b.n	8010f62 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010f52:	f7ff fe9f 	bl	8010c94 <BSP_SD_GetCardState>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d102      	bne.n	8010f62 <SD_write+0x6e>
          {
            res = RES_OK;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	77fb      	strb	r3, [r7, #31]
            break;
 8010f60:	e008      	b.n	8010f74 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8010f62:	f001 fd85 	bl	8012a70 <osKernelGetTickCount>
 8010f66:	4602      	mov	r2, r0
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	1ad3      	subs	r3, r2, r3
 8010f6c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f70:	4293      	cmp	r3, r2
 8010f72:	d9ee      	bls.n	8010f52 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8010f74:	7ffb      	ldrb	r3, [r7, #31]
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3720      	adds	r7, #32
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
 8010f7e:	bf00      	nop
 8010f80:	240002dc 	.word	0x240002dc

08010f84 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b08c      	sub	sp, #48	; 0x30
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	603a      	str	r2, [r7, #0]
 8010f8e:	71fb      	strb	r3, [r7, #7]
 8010f90:	460b      	mov	r3, r1
 8010f92:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010f94:	2301      	movs	r3, #1
 8010f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010f9a:	4b25      	ldr	r3, [pc, #148]	; (8011030 <SD_ioctl+0xac>)
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	f003 0301 	and.w	r3, r3, #1
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d001      	beq.n	8010fac <SD_ioctl+0x28>
 8010fa8:	2303      	movs	r3, #3
 8010faa:	e03c      	b.n	8011026 <SD_ioctl+0xa2>

  switch (cmd)
 8010fac:	79bb      	ldrb	r3, [r7, #6]
 8010fae:	2b03      	cmp	r3, #3
 8010fb0:	d834      	bhi.n	801101c <SD_ioctl+0x98>
 8010fb2:	a201      	add	r2, pc, #4	; (adr r2, 8010fb8 <SD_ioctl+0x34>)
 8010fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb8:	08010fc9 	.word	0x08010fc9
 8010fbc:	08010fd1 	.word	0x08010fd1
 8010fc0:	08010fe9 	.word	0x08010fe9
 8010fc4:	08011003 	.word	0x08011003
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010fce:	e028      	b.n	8011022 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010fd0:	f107 0308 	add.w	r3, r7, #8
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7ff fe6d 	bl	8010cb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010fda:	6a3a      	ldr	r2, [r7, #32]
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010fe6:	e01c      	b.n	8011022 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010fe8:	f107 0308 	add.w	r3, r7, #8
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7ff fe61 	bl	8010cb4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011000:	e00f      	b.n	8011022 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011002:	f107 0308 	add.w	r3, r7, #8
 8011006:	4618      	mov	r0, r3
 8011008:	f7ff fe54 	bl	8010cb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100e:	0a5a      	lsrs	r2, r3, #9
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011014:	2300      	movs	r3, #0
 8011016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801101a:	e002      	b.n	8011022 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801101c:	2304      	movs	r3, #4
 801101e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011026:	4618      	mov	r0, r3
 8011028:	3730      	adds	r7, #48	; 0x30
 801102a:	46bd      	mov	sp, r7
 801102c:	bd80      	pop	{r7, pc}
 801102e:	bf00      	nop
 8011030:	2400000d 	.word	0x2400000d

08011034 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 801103a:	2302      	movs	r3, #2
 801103c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801103e:	4b05      	ldr	r3, [pc, #20]	; (8011054 <BSP_SD_WriteCpltCallback+0x20>)
 8011040:	6818      	ldr	r0, [r3, #0]
 8011042:	1db9      	adds	r1, r7, #6
 8011044:	2300      	movs	r3, #0
 8011046:	2200      	movs	r2, #0
 8011048:	f002 f826 	bl	8013098 <osMessageQueuePut>
#endif
}
 801104c:	bf00      	nop
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}
 8011054:	240002dc 	.word	0x240002dc

08011058 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 801105e:	2301      	movs	r3, #1
 8011060:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8011062:	4b05      	ldr	r3, [pc, #20]	; (8011078 <BSP_SD_ReadCpltCallback+0x20>)
 8011064:	6818      	ldr	r0, [r3, #0]
 8011066:	1db9      	adds	r1, r7, #6
 8011068:	2300      	movs	r3, #0
 801106a:	2200      	movs	r2, #0
 801106c:	f002 f814 	bl	8013098 <osMessageQueuePut>
#endif
}
 8011070:	bf00      	nop
 8011072:	3708      	adds	r7, #8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}
 8011078:	240002dc 	.word	0x240002dc

0801107c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	460b      	mov	r3, r1
 8011086:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011088:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801108c:	f005 fe44 	bl	8016d18 <malloc>
 8011090:	4603      	mov	r3, r0
 8011092:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d105      	bne.n	80110a6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2200      	movs	r2, #0
 801109e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80110a2:	2302      	movs	r3, #2
 80110a4:	e066      	b.n	8011174 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	68fa      	ldr	r2, [r7, #12]
 80110aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	7c1b      	ldrb	r3, [r3, #16]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d119      	bne.n	80110ea <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80110b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110ba:	2202      	movs	r2, #2
 80110bc:	2181      	movs	r1, #129	; 0x81
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f005 fcb1 	bl	8016a26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2201      	movs	r2, #1
 80110c8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80110ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110ce:	2202      	movs	r2, #2
 80110d0:	2101      	movs	r1, #1
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f005 fca7 	bl	8016a26 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2201      	movs	r2, #1
 80110dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2210      	movs	r2, #16
 80110e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80110e8:	e016      	b.n	8011118 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80110ea:	2340      	movs	r3, #64	; 0x40
 80110ec:	2202      	movs	r2, #2
 80110ee:	2181      	movs	r1, #129	; 0x81
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f005 fc98 	bl	8016a26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2201      	movs	r2, #1
 80110fa:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80110fc:	2340      	movs	r3, #64	; 0x40
 80110fe:	2202      	movs	r2, #2
 8011100:	2101      	movs	r1, #1
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f005 fc8f 	bl	8016a26 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2201      	movs	r2, #1
 801110c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2210      	movs	r2, #16
 8011114:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011118:	2308      	movs	r3, #8
 801111a:	2203      	movs	r2, #3
 801111c:	2182      	movs	r1, #130	; 0x82
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f005 fc81 	bl	8016a26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2201      	movs	r2, #1
 8011128:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2200      	movs	r2, #0
 801113a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2200      	movs	r2, #0
 8011142:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	7c1b      	ldrb	r3, [r3, #16]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d109      	bne.n	8011162 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011158:	2101      	movs	r1, #1
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	f005 fd52 	bl	8016c04 <USBD_LL_PrepareReceive>
 8011160:	e007      	b.n	8011172 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011168:	2340      	movs	r3, #64	; 0x40
 801116a:	2101      	movs	r1, #1
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f005 fd49 	bl	8016c04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011172:	2300      	movs	r3, #0
}
 8011174:	4618      	mov	r0, r3
 8011176:	3710      	adds	r7, #16
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b084      	sub	sp, #16
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	460b      	mov	r3, r1
 8011186:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8011188:	2300      	movs	r3, #0
 801118a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801118c:	2181      	movs	r1, #129	; 0x81
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f005 fc6f 	bl	8016a72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2200      	movs	r2, #0
 8011198:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801119a:	2101      	movs	r1, #1
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f005 fc68 	bl	8016a72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80111aa:	2182      	movs	r1, #130	; 0x82
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f005 fc60 	bl	8016a72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2200      	movs	r2, #0
 80111b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2200      	movs	r2, #0
 80111be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00e      	beq.n	80111ea <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111dc:	4618      	mov	r0, r3
 80111de:	f005 fda3 	bl	8016d28 <free>
    pdev->pClassData = NULL;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2200      	movs	r2, #0
 80111e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80111ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80111ec:	4618      	mov	r0, r3
 80111ee:	3710      	adds	r7, #16
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}

080111f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b086      	sub	sp, #24
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011204:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8011206:	2300      	movs	r3, #0
 8011208:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801120a:	2300      	movs	r3, #0
 801120c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 801120e:	2300      	movs	r3, #0
 8011210:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801121a:	2b00      	cmp	r3, #0
 801121c:	d03a      	beq.n	8011294 <USBD_CDC_Setup+0xa0>
 801121e:	2b20      	cmp	r3, #32
 8011220:	f040 8097 	bne.w	8011352 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	88db      	ldrh	r3, [r3, #6]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d029      	beq.n	8011280 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	b25b      	sxtb	r3, r3
 8011232:	2b00      	cmp	r3, #0
 8011234:	da11      	bge.n	801125a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801123c:	689b      	ldr	r3, [r3, #8]
 801123e:	683a      	ldr	r2, [r7, #0]
 8011240:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8011242:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011244:	683a      	ldr	r2, [r7, #0]
 8011246:	88d2      	ldrh	r2, [r2, #6]
 8011248:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801124a:	6939      	ldr	r1, [r7, #16]
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	88db      	ldrh	r3, [r3, #6]
 8011250:	461a      	mov	r2, r3
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f001 fa9d 	bl	8012792 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8011258:	e082      	b.n	8011360 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	785a      	ldrb	r2, [r3, #1]
 801125e:	693b      	ldr	r3, [r7, #16]
 8011260:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	88db      	ldrh	r3, [r3, #6]
 8011268:	b2da      	uxtb	r2, r3
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011270:	6939      	ldr	r1, [r7, #16]
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	88db      	ldrh	r3, [r3, #6]
 8011276:	461a      	mov	r2, r3
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	f001 fab6 	bl	80127ea <USBD_CtlPrepareRx>
    break;
 801127e:	e06f      	b.n	8011360 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011286:	689b      	ldr	r3, [r3, #8]
 8011288:	683a      	ldr	r2, [r7, #0]
 801128a:	7850      	ldrb	r0, [r2, #1]
 801128c:	2200      	movs	r2, #0
 801128e:	6839      	ldr	r1, [r7, #0]
 8011290:	4798      	blx	r3
    break;
 8011292:	e065      	b.n	8011360 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	785b      	ldrb	r3, [r3, #1]
 8011298:	2b0b      	cmp	r3, #11
 801129a:	d84f      	bhi.n	801133c <USBD_CDC_Setup+0x148>
 801129c:	a201      	add	r2, pc, #4	; (adr r2, 80112a4 <USBD_CDC_Setup+0xb0>)
 801129e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a2:	bf00      	nop
 80112a4:	080112d5 	.word	0x080112d5
 80112a8:	0801134b 	.word	0x0801134b
 80112ac:	0801133d 	.word	0x0801133d
 80112b0:	0801133d 	.word	0x0801133d
 80112b4:	0801133d 	.word	0x0801133d
 80112b8:	0801133d 	.word	0x0801133d
 80112bc:	0801133d 	.word	0x0801133d
 80112c0:	0801133d 	.word	0x0801133d
 80112c4:	0801133d 	.word	0x0801133d
 80112c8:	0801133d 	.word	0x0801133d
 80112cc:	080112fd 	.word	0x080112fd
 80112d0:	08011325 	.word	0x08011325
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112da:	2b03      	cmp	r3, #3
 80112dc:	d107      	bne.n	80112ee <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80112de:	f107 030c 	add.w	r3, r7, #12
 80112e2:	2202      	movs	r2, #2
 80112e4:	4619      	mov	r1, r3
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f001 fa53 	bl	8012792 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80112ec:	e030      	b.n	8011350 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80112ee:	6839      	ldr	r1, [r7, #0]
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f001 f9dd 	bl	80126b0 <USBD_CtlError>
        ret = USBD_FAIL;
 80112f6:	2303      	movs	r3, #3
 80112f8:	75fb      	strb	r3, [r7, #23]
      break;
 80112fa:	e029      	b.n	8011350 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011302:	2b03      	cmp	r3, #3
 8011304:	d107      	bne.n	8011316 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011306:	f107 030f 	add.w	r3, r7, #15
 801130a:	2201      	movs	r2, #1
 801130c:	4619      	mov	r1, r3
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f001 fa3f 	bl	8012792 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011314:	e01c      	b.n	8011350 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8011316:	6839      	ldr	r1, [r7, #0]
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f001 f9c9 	bl	80126b0 <USBD_CtlError>
        ret = USBD_FAIL;
 801131e:	2303      	movs	r3, #3
 8011320:	75fb      	strb	r3, [r7, #23]
      break;
 8011322:	e015      	b.n	8011350 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801132a:	2b03      	cmp	r3, #3
 801132c:	d00f      	beq.n	801134e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 801132e:	6839      	ldr	r1, [r7, #0]
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f001 f9bd 	bl	80126b0 <USBD_CtlError>
        ret = USBD_FAIL;
 8011336:	2303      	movs	r3, #3
 8011338:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801133a:	e008      	b.n	801134e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 801133c:	6839      	ldr	r1, [r7, #0]
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f001 f9b6 	bl	80126b0 <USBD_CtlError>
      ret = USBD_FAIL;
 8011344:	2303      	movs	r3, #3
 8011346:	75fb      	strb	r3, [r7, #23]
      break;
 8011348:	e002      	b.n	8011350 <USBD_CDC_Setup+0x15c>
      break;
 801134a:	bf00      	nop
 801134c:	e008      	b.n	8011360 <USBD_CDC_Setup+0x16c>
      break;
 801134e:	bf00      	nop
    }
    break;
 8011350:	e006      	b.n	8011360 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8011352:	6839      	ldr	r1, [r7, #0]
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f001 f9ab 	bl	80126b0 <USBD_CtlError>
    ret = USBD_FAIL;
 801135a:	2303      	movs	r3, #3
 801135c:	75fb      	strb	r3, [r7, #23]
    break;
 801135e:	bf00      	nop
  }

  return (uint8_t)ret;
 8011360:	7dfb      	ldrb	r3, [r7, #23]
}
 8011362:	4618      	mov	r0, r3
 8011364:	3718      	adds	r7, #24
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop

0801136c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	460b      	mov	r3, r1
 8011376:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801137e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011386:	2b00      	cmp	r3, #0
 8011388:	d101      	bne.n	801138e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801138a:	2303      	movs	r3, #3
 801138c:	e049      	b.n	8011422 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011394:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011396:	78fa      	ldrb	r2, [r7, #3]
 8011398:	6879      	ldr	r1, [r7, #4]
 801139a:	4613      	mov	r3, r2
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	4413      	add	r3, r2
 80113a0:	009b      	lsls	r3, r3, #2
 80113a2:	440b      	add	r3, r1
 80113a4:	3318      	adds	r3, #24
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d029      	beq.n	8011400 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80113ac:	78fa      	ldrb	r2, [r7, #3]
 80113ae:	6879      	ldr	r1, [r7, #4]
 80113b0:	4613      	mov	r3, r2
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	4413      	add	r3, r2
 80113b6:	009b      	lsls	r3, r3, #2
 80113b8:	440b      	add	r3, r1
 80113ba:	3318      	adds	r3, #24
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	78f9      	ldrb	r1, [r7, #3]
 80113c0:	68f8      	ldr	r0, [r7, #12]
 80113c2:	460b      	mov	r3, r1
 80113c4:	00db      	lsls	r3, r3, #3
 80113c6:	1a5b      	subs	r3, r3, r1
 80113c8:	009b      	lsls	r3, r3, #2
 80113ca:	4403      	add	r3, r0
 80113cc:	3344      	adds	r3, #68	; 0x44
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80113d4:	fb03 f301 	mul.w	r3, r3, r1
 80113d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d110      	bne.n	8011400 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80113de:	78fa      	ldrb	r2, [r7, #3]
 80113e0:	6879      	ldr	r1, [r7, #4]
 80113e2:	4613      	mov	r3, r2
 80113e4:	009b      	lsls	r3, r3, #2
 80113e6:	4413      	add	r3, r2
 80113e8:	009b      	lsls	r3, r3, #2
 80113ea:	440b      	add	r3, r1
 80113ec:	3318      	adds	r3, #24
 80113ee:	2200      	movs	r2, #0
 80113f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80113f2:	78f9      	ldrb	r1, [r7, #3]
 80113f4:	2300      	movs	r3, #0
 80113f6:	2200      	movs	r2, #0
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f005 fbe2 	bl	8016bc2 <USBD_LL_Transmit>
 80113fe:	e00f      	b.n	8011420 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	2200      	movs	r2, #0
 8011404:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801140e:	691b      	ldr	r3, [r3, #16]
 8011410:	68ba      	ldr	r2, [r7, #8]
 8011412:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011416:	68ba      	ldr	r2, [r7, #8]
 8011418:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801141c:	78fa      	ldrb	r2, [r7, #3]
 801141e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8011420:	2300      	movs	r3, #0
}
 8011422:	4618      	mov	r0, r3
 8011424:	3710      	adds	r7, #16
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b084      	sub	sp, #16
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
 8011432:	460b      	mov	r3, r1
 8011434:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801143c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011444:	2b00      	cmp	r3, #0
 8011446:	d101      	bne.n	801144c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011448:	2303      	movs	r3, #3
 801144a:	e015      	b.n	8011478 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801144c:	78fb      	ldrb	r3, [r7, #3]
 801144e:	4619      	mov	r1, r3
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f005 fbf8 	bl	8016c46 <USBD_LL_GetRxDataSize>
 8011456:	4602      	mov	r2, r0
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	68fa      	ldr	r2, [r7, #12]
 8011468:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801146c:	68fa      	ldr	r2, [r7, #12]
 801146e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011472:	4611      	mov	r1, r2
 8011474:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011476:	2300      	movs	r3, #0
}
 8011478:	4618      	mov	r0, r3
 801147a:	3710      	adds	r7, #16
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801148e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011496:	2b00      	cmp	r3, #0
 8011498:	d015      	beq.n	80114c6 <USBD_CDC_EP0_RxReady+0x46>
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80114a0:	2bff      	cmp	r3, #255	; 0xff
 80114a2:	d010      	beq.n	80114c6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80114aa:	689b      	ldr	r3, [r3, #8]
 80114ac:	68fa      	ldr	r2, [r7, #12]
 80114ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80114b2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80114b4:	68fa      	ldr	r2, [r7, #12]
 80114b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80114ba:	b292      	uxth	r2, r2
 80114bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	22ff      	movs	r2, #255	; 0xff
 80114c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80114c6:	2300      	movs	r3, #0
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3710      	adds	r7, #16
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b083      	sub	sp, #12
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2243      	movs	r2, #67	; 0x43
 80114dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80114de:	4b03      	ldr	r3, [pc, #12]	; (80114ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	370c      	adds	r7, #12
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	24000098 	.word	0x24000098

080114f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2243      	movs	r2, #67	; 0x43
 80114fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80114fe:	4b03      	ldr	r3, [pc, #12]	; (801150c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011500:	4618      	mov	r0, r3
 8011502:	370c      	adds	r7, #12
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr
 801150c:	24000054 	.word	0x24000054

08011510 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2243      	movs	r2, #67	; 0x43
 801151c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801151e:	4b03      	ldr	r3, [pc, #12]	; (801152c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011520:	4618      	mov	r0, r3
 8011522:	370c      	adds	r7, #12
 8011524:	46bd      	mov	sp, r7
 8011526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152a:	4770      	bx	lr
 801152c:	240000dc 	.word	0x240000dc

08011530 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011530:	b480      	push	{r7}
 8011532:	b083      	sub	sp, #12
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	220a      	movs	r2, #10
 801153c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801153e:	4b03      	ldr	r3, [pc, #12]	; (801154c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011540:	4618      	mov	r0, r3
 8011542:	370c      	adds	r7, #12
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr
 801154c:	24000010 	.word	0x24000010

08011550 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011550:	b480      	push	{r7}
 8011552:	b083      	sub	sp, #12
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d101      	bne.n	8011564 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011560:	2303      	movs	r3, #3
 8011562:	e004      	b.n	801156e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	683a      	ldr	r2, [r7, #0]
 8011568:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801156c:	2300      	movs	r3, #0
}
 801156e:	4618      	mov	r0, r3
 8011570:	370c      	adds	r7, #12
 8011572:	46bd      	mov	sp, r7
 8011574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011578:	4770      	bx	lr

0801157a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801157a:	b480      	push	{r7}
 801157c:	b087      	sub	sp, #28
 801157e:	af00      	add	r7, sp, #0
 8011580:	60f8      	str	r0, [r7, #12]
 8011582:	60b9      	str	r1, [r7, #8]
 8011584:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801158c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	68ba      	ldr	r2, [r7, #8]
 8011592:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	687a      	ldr	r2, [r7, #4]
 801159a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801159e:	2300      	movs	r3, #0
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	371c      	adds	r7, #28
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr

080115ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80115ac:	b480      	push	{r7}
 80115ae:	b085      	sub	sp, #20
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115bc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	683a      	ldr	r2, [r7, #0]
 80115c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80115c6:	2300      	movs	r3, #0
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3714      	adds	r7, #20
 80115cc:	46bd      	mov	sp, r7
 80115ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d2:	4770      	bx	lr

080115d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b084      	sub	sp, #16
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115e2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80115e4:	2301      	movs	r3, #1
 80115e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d101      	bne.n	80115f6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80115f2:	2303      	movs	r3, #3
 80115f4:	e01a      	b.n	801162c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d114      	bne.n	801162a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	2201      	movs	r2, #1
 8011604:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801161e:	2181      	movs	r1, #129	; 0x81
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f005 face 	bl	8016bc2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011626:	2300      	movs	r3, #0
 8011628:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801162a:	7bfb      	ldrb	r3, [r7, #15]
}
 801162c:	4618      	mov	r0, r3
 801162e:	3710      	adds	r7, #16
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}

08011634 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b084      	sub	sp, #16
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011642:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801164a:	2b00      	cmp	r3, #0
 801164c:	d101      	bne.n	8011652 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801164e:	2303      	movs	r3, #3
 8011650:	e016      	b.n	8011680 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	7c1b      	ldrb	r3, [r3, #16]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d109      	bne.n	801166e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011664:	2101      	movs	r1, #1
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f005 facc 	bl	8016c04 <USBD_LL_PrepareReceive>
 801166c:	e007      	b.n	801167e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011674:	2340      	movs	r3, #64	; 0x40
 8011676:	2101      	movs	r1, #1
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f005 fac3 	bl	8016c04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	3710      	adds	r7, #16
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}

08011688 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b086      	sub	sp, #24
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	4613      	mov	r3, r2
 8011694:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d101      	bne.n	80116a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801169c:	2303      	movs	r3, #3
 801169e:	e025      	b.n	80116ec <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d003      	beq.n	80116b2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	2200      	movs	r2, #0
 80116ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d003      	beq.n	80116c4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2200      	movs	r2, #0
 80116c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d003      	beq.n	80116d2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	68ba      	ldr	r2, [r7, #8]
 80116ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2201      	movs	r2, #1
 80116d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	79fa      	ldrb	r2, [r7, #7]
 80116de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80116e0:	68f8      	ldr	r0, [r7, #12]
 80116e2:	f005 f935 	bl	8016950 <USBD_LL_Init>
 80116e6:	4603      	mov	r3, r0
 80116e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80116ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3718      	adds	r7, #24
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}

080116f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b084      	sub	sp, #16
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80116fe:	2300      	movs	r3, #0
 8011700:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d101      	bne.n	801170c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011708:	2303      	movs	r3, #3
 801170a:	e010      	b.n	801172e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	683a      	ldr	r2, [r7, #0]
 8011710:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801171c:	f107 020e 	add.w	r2, r7, #14
 8011720:	4610      	mov	r0, r2
 8011722:	4798      	blx	r3
 8011724:	4602      	mov	r2, r0
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 801172c:	2300      	movs	r3, #0
}
 801172e:	4618      	mov	r0, r3
 8011730:	3710      	adds	r7, #16
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}

08011736 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011736:	b580      	push	{r7, lr}
 8011738:	b082      	sub	sp, #8
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f005 f956 	bl	80169f0 <USBD_LL_Start>
 8011744:	4603      	mov	r3, r0
}
 8011746:	4618      	mov	r0, r3
 8011748:	3708      	adds	r7, #8
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}

0801174e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801174e:	b480      	push	{r7}
 8011750:	b083      	sub	sp, #12
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011756:	2300      	movs	r3, #0
}
 8011758:	4618      	mov	r0, r3
 801175a:	370c      	adds	r7, #12
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b084      	sub	sp, #16
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	460b      	mov	r3, r1
 801176e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011770:	2303      	movs	r3, #3
 8011772:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801177a:	2b00      	cmp	r3, #0
 801177c:	d009      	beq.n	8011792 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	78fa      	ldrb	r2, [r7, #3]
 8011788:	4611      	mov	r1, r2
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	4798      	blx	r3
 801178e:	4603      	mov	r3, r0
 8011790:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011792:	7bfb      	ldrb	r3, [r7, #15]
}
 8011794:	4618      	mov	r0, r3
 8011796:	3710      	adds	r7, #16
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}

0801179c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	460b      	mov	r3, r1
 80117a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d007      	beq.n	80117c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	78fa      	ldrb	r2, [r7, #3]
 80117bc:	4611      	mov	r1, r2
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	4798      	blx	r3
  }

  return USBD_OK;
 80117c2:	2300      	movs	r3, #0
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3708      	adds	r7, #8
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80117dc:	6839      	ldr	r1, [r7, #0]
 80117de:	4618      	mov	r0, r3
 80117e0:	f000 ff2c 	bl	801263c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2201      	movs	r2, #1
 80117e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80117f2:	461a      	mov	r2, r3
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011800:	f003 031f 	and.w	r3, r3, #31
 8011804:	2b01      	cmp	r3, #1
 8011806:	d00e      	beq.n	8011826 <USBD_LL_SetupStage+0x5a>
 8011808:	2b01      	cmp	r3, #1
 801180a:	d302      	bcc.n	8011812 <USBD_LL_SetupStage+0x46>
 801180c:	2b02      	cmp	r3, #2
 801180e:	d014      	beq.n	801183a <USBD_LL_SetupStage+0x6e>
 8011810:	e01d      	b.n	801184e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011818:	4619      	mov	r1, r3
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f000 fa18 	bl	8011c50 <USBD_StdDevReq>
 8011820:	4603      	mov	r3, r0
 8011822:	73fb      	strb	r3, [r7, #15]
      break;
 8011824:	e020      	b.n	8011868 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801182c:	4619      	mov	r1, r3
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f000 fa7c 	bl	8011d2c <USBD_StdItfReq>
 8011834:	4603      	mov	r3, r0
 8011836:	73fb      	strb	r3, [r7, #15]
      break;
 8011838:	e016      	b.n	8011868 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011840:	4619      	mov	r1, r3
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 fab8 	bl	8011db8 <USBD_StdEPReq>
 8011848:	4603      	mov	r3, r0
 801184a:	73fb      	strb	r3, [r7, #15]
      break;
 801184c:	e00c      	b.n	8011868 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011854:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011858:	b2db      	uxtb	r3, r3
 801185a:	4619      	mov	r1, r3
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f005 f927 	bl	8016ab0 <USBD_LL_StallEP>
 8011862:	4603      	mov	r3, r0
 8011864:	73fb      	strb	r3, [r7, #15]
      break;
 8011866:	bf00      	nop
  }

  return ret;
 8011868:	7bfb      	ldrb	r3, [r7, #15]
}
 801186a:	4618      	mov	r0, r3
 801186c:	3710      	adds	r7, #16
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}

08011872 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011872:	b580      	push	{r7, lr}
 8011874:	b086      	sub	sp, #24
 8011876:	af00      	add	r7, sp, #0
 8011878:	60f8      	str	r0, [r7, #12]
 801187a:	460b      	mov	r3, r1
 801187c:	607a      	str	r2, [r7, #4]
 801187e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011880:	7afb      	ldrb	r3, [r7, #11]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d137      	bne.n	80118f6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801188c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011894:	2b03      	cmp	r3, #3
 8011896:	d14a      	bne.n	801192e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	689a      	ldr	r2, [r3, #8]
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	68db      	ldr	r3, [r3, #12]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d913      	bls.n	80118cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	689a      	ldr	r2, [r3, #8]
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	1ad2      	subs	r2, r2, r3
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	68da      	ldr	r2, [r3, #12]
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	689b      	ldr	r3, [r3, #8]
 80118ba:	4293      	cmp	r3, r2
 80118bc:	bf28      	it	cs
 80118be:	4613      	movcs	r3, r2
 80118c0:	461a      	mov	r2, r3
 80118c2:	6879      	ldr	r1, [r7, #4]
 80118c4:	68f8      	ldr	r0, [r7, #12]
 80118c6:	f000 ffad 	bl	8012824 <USBD_CtlContinueRx>
 80118ca:	e030      	b.n	801192e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118d2:	691b      	ldr	r3, [r3, #16]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d00a      	beq.n	80118ee <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80118de:	2b03      	cmp	r3, #3
 80118e0:	d105      	bne.n	80118ee <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118e8:	691b      	ldr	r3, [r3, #16]
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f000 ffa9 	bl	8012846 <USBD_CtlSendStatus>
 80118f4:	e01b      	b.n	801192e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118fc:	699b      	ldr	r3, [r3, #24]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d013      	beq.n	801192a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011908:	2b03      	cmp	r3, #3
 801190a:	d10e      	bne.n	801192a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011912:	699b      	ldr	r3, [r3, #24]
 8011914:	7afa      	ldrb	r2, [r7, #11]
 8011916:	4611      	mov	r1, r2
 8011918:	68f8      	ldr	r0, [r7, #12]
 801191a:	4798      	blx	r3
 801191c:	4603      	mov	r3, r0
 801191e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011920:	7dfb      	ldrb	r3, [r7, #23]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d003      	beq.n	801192e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011926:	7dfb      	ldrb	r3, [r7, #23]
 8011928:	e002      	b.n	8011930 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801192a:	2303      	movs	r3, #3
 801192c:	e000      	b.n	8011930 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 801192e:	2300      	movs	r3, #0
}
 8011930:	4618      	mov	r0, r3
 8011932:	3718      	adds	r7, #24
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b086      	sub	sp, #24
 801193c:	af00      	add	r7, sp, #0
 801193e:	60f8      	str	r0, [r7, #12]
 8011940:	460b      	mov	r3, r1
 8011942:	607a      	str	r2, [r7, #4]
 8011944:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011946:	7afb      	ldrb	r3, [r7, #11]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d16a      	bne.n	8011a22 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	3314      	adds	r3, #20
 8011950:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011958:	2b02      	cmp	r3, #2
 801195a:	d155      	bne.n	8011a08 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	689a      	ldr	r2, [r3, #8]
 8011960:	693b      	ldr	r3, [r7, #16]
 8011962:	68db      	ldr	r3, [r3, #12]
 8011964:	429a      	cmp	r2, r3
 8011966:	d914      	bls.n	8011992 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	689a      	ldr	r2, [r3, #8]
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	68db      	ldr	r3, [r3, #12]
 8011970:	1ad2      	subs	r2, r2, r3
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	689b      	ldr	r3, [r3, #8]
 801197a:	461a      	mov	r2, r3
 801197c:	6879      	ldr	r1, [r7, #4]
 801197e:	68f8      	ldr	r0, [r7, #12]
 8011980:	f000 ff22 	bl	80127c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011984:	2300      	movs	r3, #0
 8011986:	2200      	movs	r2, #0
 8011988:	2100      	movs	r1, #0
 801198a:	68f8      	ldr	r0, [r7, #12]
 801198c:	f005 f93a 	bl	8016c04 <USBD_LL_PrepareReceive>
 8011990:	e03a      	b.n	8011a08 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	68da      	ldr	r2, [r3, #12]
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	689b      	ldr	r3, [r3, #8]
 801199a:	429a      	cmp	r2, r3
 801199c:	d11c      	bne.n	80119d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	685a      	ldr	r2, [r3, #4]
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d316      	bcc.n	80119d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	685a      	ldr	r2, [r3, #4]
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d20f      	bcs.n	80119d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80119b8:	2200      	movs	r2, #0
 80119ba:	2100      	movs	r1, #0
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f000 ff03 	bl	80127c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	2200      	movs	r2, #0
 80119c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80119ca:	2300      	movs	r3, #0
 80119cc:	2200      	movs	r2, #0
 80119ce:	2100      	movs	r1, #0
 80119d0:	68f8      	ldr	r0, [r7, #12]
 80119d2:	f005 f917 	bl	8016c04 <USBD_LL_PrepareReceive>
 80119d6:	e017      	b.n	8011a08 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119de:	68db      	ldr	r3, [r3, #12]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d00a      	beq.n	80119fa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80119ea:	2b03      	cmp	r3, #3
 80119ec:	d105      	bne.n	80119fa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119f4:	68db      	ldr	r3, [r3, #12]
 80119f6:	68f8      	ldr	r0, [r7, #12]
 80119f8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80119fa:	2180      	movs	r1, #128	; 0x80
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	f005 f857 	bl	8016ab0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011a02:	68f8      	ldr	r0, [r7, #12]
 8011a04:	f000 ff32 	bl	801286c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d123      	bne.n	8011a5a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011a12:	68f8      	ldr	r0, [r7, #12]
 8011a14:	f7ff fe9b 	bl	801174e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011a20:	e01b      	b.n	8011a5a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a28:	695b      	ldr	r3, [r3, #20]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d013      	beq.n	8011a56 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011a34:	2b03      	cmp	r3, #3
 8011a36:	d10e      	bne.n	8011a56 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a3e:	695b      	ldr	r3, [r3, #20]
 8011a40:	7afa      	ldrb	r2, [r7, #11]
 8011a42:	4611      	mov	r1, r2
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	4798      	blx	r3
 8011a48:	4603      	mov	r3, r0
 8011a4a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011a4c:	7dfb      	ldrb	r3, [r7, #23]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d003      	beq.n	8011a5a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011a52:	7dfb      	ldrb	r3, [r7, #23]
 8011a54:	e002      	b.n	8011a5c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011a56:	2303      	movs	r3, #3
 8011a58:	e000      	b.n	8011a5c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3718      	adds	r7, #24
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2200      	movs	r2, #0
 8011a78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2200      	movs	r2, #0
 8011a86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d009      	beq.n	8011aa8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	687a      	ldr	r2, [r7, #4]
 8011a9e:	6852      	ldr	r2, [r2, #4]
 8011aa0:	b2d2      	uxtb	r2, r2
 8011aa2:	4611      	mov	r1, r2
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011aa8:	2340      	movs	r3, #64	; 0x40
 8011aaa:	2200      	movs	r2, #0
 8011aac:	2100      	movs	r1, #0
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f004 ffb9 	bl	8016a26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2201      	movs	r2, #1
 8011ab8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2240      	movs	r2, #64	; 0x40
 8011ac0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ac4:	2340      	movs	r3, #64	; 0x40
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	2180      	movs	r1, #128	; 0x80
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f004 ffab 	bl	8016a26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2240      	movs	r2, #64	; 0x40
 8011ada:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011adc:	2300      	movs	r3, #0
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3708      	adds	r7, #8
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}

08011ae6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011ae6:	b480      	push	{r7}
 8011ae8:	b083      	sub	sp, #12
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	6078      	str	r0, [r7, #4]
 8011aee:	460b      	mov	r3, r1
 8011af0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	78fa      	ldrb	r2, [r7, #3]
 8011af6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011af8:	2300      	movs	r3, #0
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	370c      	adds	r7, #12
 8011afe:	46bd      	mov	sp, r7
 8011b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b04:	4770      	bx	lr

08011b06 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011b06:	b480      	push	{r7}
 8011b08:	b083      	sub	sp, #12
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2204      	movs	r2, #4
 8011b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011b22:	2300      	movs	r3, #0
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	370c      	adds	r7, #12
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2e:	4770      	bx	lr

08011b30 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011b30:	b480      	push	{r7}
 8011b32:	b083      	sub	sp, #12
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b3e:	2b04      	cmp	r3, #4
 8011b40:	d105      	bne.n	8011b4e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011b4e:	2300      	movs	r3, #0
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	370c      	adds	r7, #12
 8011b54:	46bd      	mov	sp, r7
 8011b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5a:	4770      	bx	lr

08011b5c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b6a:	2b03      	cmp	r3, #3
 8011b6c:	d10b      	bne.n	8011b86 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b74:	69db      	ldr	r3, [r3, #28]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d005      	beq.n	8011b86 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b80:	69db      	ldr	r3, [r3, #28]
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011b86:	2300      	movs	r3, #0
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3708      	adds	r7, #8
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011b90:	b480      	push	{r7}
 8011b92:	b083      	sub	sp, #12
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	460b      	mov	r3, r1
 8011b9a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011b9c:	2300      	movs	r3, #0
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	370c      	adds	r7, #12
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba8:	4770      	bx	lr

08011baa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011baa:	b480      	push	{r7}
 8011bac:	b083      	sub	sp, #12
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	6078      	str	r0, [r7, #4]
 8011bb2:	460b      	mov	r3, r1
 8011bb4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011bb6:	2300      	movs	r3, #0
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	370c      	adds	r7, #12
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr

08011bc4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011bc4:	b480      	push	{r7}
 8011bc6:	b083      	sub	sp, #12
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011bcc:	2300      	movs	r3, #0
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	370c      	adds	r7, #12
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd8:	4770      	bx	lr

08011bda <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011bda:	b580      	push	{r7, lr}
 8011bdc:	b082      	sub	sp, #8
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2201      	movs	r2, #1
 8011be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d009      	beq.n	8011c08 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bfa:	685b      	ldr	r3, [r3, #4]
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	6852      	ldr	r2, [r2, #4]
 8011c00:	b2d2      	uxtb	r2, r2
 8011c02:	4611      	mov	r1, r2
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	4798      	blx	r3
  }

  return USBD_OK;
 8011c08:	2300      	movs	r3, #0
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3708      	adds	r7, #8
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}

08011c12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011c12:	b480      	push	{r7}
 8011c14:	b087      	sub	sp, #28
 8011c16:	af00      	add	r7, sp, #0
 8011c18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	3301      	adds	r3, #1
 8011c28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	781b      	ldrb	r3, [r3, #0]
 8011c2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011c30:	8a3b      	ldrh	r3, [r7, #16]
 8011c32:	021b      	lsls	r3, r3, #8
 8011c34:	b21a      	sxth	r2, r3
 8011c36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	b21b      	sxth	r3, r3
 8011c3e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011c40:	89fb      	ldrh	r3, [r7, #14]
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	371c      	adds	r7, #28
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr
	...

08011c50 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b084      	sub	sp, #16
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011c66:	2b20      	cmp	r3, #32
 8011c68:	d004      	beq.n	8011c74 <USBD_StdDevReq+0x24>
 8011c6a:	2b40      	cmp	r3, #64	; 0x40
 8011c6c:	d002      	beq.n	8011c74 <USBD_StdDevReq+0x24>
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00a      	beq.n	8011c88 <USBD_StdDevReq+0x38>
 8011c72:	e050      	b.n	8011d16 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c7a:	689b      	ldr	r3, [r3, #8]
 8011c7c:	6839      	ldr	r1, [r7, #0]
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	4798      	blx	r3
 8011c82:	4603      	mov	r3, r0
 8011c84:	73fb      	strb	r3, [r7, #15]
    break;
 8011c86:	e04b      	b.n	8011d20 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	785b      	ldrb	r3, [r3, #1]
 8011c8c:	2b09      	cmp	r3, #9
 8011c8e:	d83c      	bhi.n	8011d0a <USBD_StdDevReq+0xba>
 8011c90:	a201      	add	r2, pc, #4	; (adr r2, 8011c98 <USBD_StdDevReq+0x48>)
 8011c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c96:	bf00      	nop
 8011c98:	08011ced 	.word	0x08011ced
 8011c9c:	08011d01 	.word	0x08011d01
 8011ca0:	08011d0b 	.word	0x08011d0b
 8011ca4:	08011cf7 	.word	0x08011cf7
 8011ca8:	08011d0b 	.word	0x08011d0b
 8011cac:	08011ccb 	.word	0x08011ccb
 8011cb0:	08011cc1 	.word	0x08011cc1
 8011cb4:	08011d0b 	.word	0x08011d0b
 8011cb8:	08011ce3 	.word	0x08011ce3
 8011cbc:	08011cd5 	.word	0x08011cd5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011cc0:	6839      	ldr	r1, [r7, #0]
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f000 f9ce 	bl	8012064 <USBD_GetDescriptor>
      break;
 8011cc8:	e024      	b.n	8011d14 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011cca:	6839      	ldr	r1, [r7, #0]
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f000 fb33 	bl	8012338 <USBD_SetAddress>
      break;
 8011cd2:	e01f      	b.n	8011d14 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011cd4:	6839      	ldr	r1, [r7, #0]
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f000 fb70 	bl	80123bc <USBD_SetConfig>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	73fb      	strb	r3, [r7, #15]
      break;
 8011ce0:	e018      	b.n	8011d14 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011ce2:	6839      	ldr	r1, [r7, #0]
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f000 fc0d 	bl	8012504 <USBD_GetConfig>
      break;
 8011cea:	e013      	b.n	8011d14 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011cec:	6839      	ldr	r1, [r7, #0]
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f000 fc3c 	bl	801256c <USBD_GetStatus>
      break;
 8011cf4:	e00e      	b.n	8011d14 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011cf6:	6839      	ldr	r1, [r7, #0]
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f000 fc6a 	bl	80125d2 <USBD_SetFeature>
      break;
 8011cfe:	e009      	b.n	8011d14 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011d00:	6839      	ldr	r1, [r7, #0]
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f000 fc79 	bl	80125fa <USBD_ClrFeature>
      break;
 8011d08:	e004      	b.n	8011d14 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011d0a:	6839      	ldr	r1, [r7, #0]
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f000 fccf 	bl	80126b0 <USBD_CtlError>
      break;
 8011d12:	bf00      	nop
    }
    break;
 8011d14:	e004      	b.n	8011d20 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011d16:	6839      	ldr	r1, [r7, #0]
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f000 fcc9 	bl	80126b0 <USBD_CtlError>
    break;
 8011d1e:	bf00      	nop
  }

  return ret;
 8011d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3710      	adds	r7, #16
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
 8011d2a:	bf00      	nop

08011d2c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b084      	sub	sp, #16
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011d36:	2300      	movs	r3, #0
 8011d38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d42:	2b20      	cmp	r3, #32
 8011d44:	d003      	beq.n	8011d4e <USBD_StdItfReq+0x22>
 8011d46:	2b40      	cmp	r3, #64	; 0x40
 8011d48:	d001      	beq.n	8011d4e <USBD_StdItfReq+0x22>
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d12a      	bne.n	8011da4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d54:	3b01      	subs	r3, #1
 8011d56:	2b02      	cmp	r3, #2
 8011d58:	d81d      	bhi.n	8011d96 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	889b      	ldrh	r3, [r3, #4]
 8011d5e:	b2db      	uxtb	r3, r3
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d813      	bhi.n	8011d8c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d6a:	689b      	ldr	r3, [r3, #8]
 8011d6c:	6839      	ldr	r1, [r7, #0]
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	4798      	blx	r3
 8011d72:	4603      	mov	r3, r0
 8011d74:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	88db      	ldrh	r3, [r3, #6]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d110      	bne.n	8011da0 <USBD_StdItfReq+0x74>
 8011d7e:	7bfb      	ldrb	r3, [r7, #15]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d10d      	bne.n	8011da0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f000 fd5e 	bl	8012846 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011d8a:	e009      	b.n	8011da0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8011d8c:	6839      	ldr	r1, [r7, #0]
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f000 fc8e 	bl	80126b0 <USBD_CtlError>
      break;
 8011d94:	e004      	b.n	8011da0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8011d96:	6839      	ldr	r1, [r7, #0]
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f000 fc89 	bl	80126b0 <USBD_CtlError>
      break;
 8011d9e:	e000      	b.n	8011da2 <USBD_StdItfReq+0x76>
      break;
 8011da0:	bf00      	nop
    }
    break;
 8011da2:	e004      	b.n	8011dae <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8011da4:	6839      	ldr	r1, [r7, #0]
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f000 fc82 	bl	80126b0 <USBD_CtlError>
    break;
 8011dac:	bf00      	nop
  }

  return ret;
 8011dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3710      	adds	r7, #16
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	889b      	ldrh	r3, [r3, #4]
 8011dca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011dd4:	2b20      	cmp	r3, #32
 8011dd6:	d004      	beq.n	8011de2 <USBD_StdEPReq+0x2a>
 8011dd8:	2b40      	cmp	r3, #64	; 0x40
 8011dda:	d002      	beq.n	8011de2 <USBD_StdEPReq+0x2a>
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d00a      	beq.n	8011df6 <USBD_StdEPReq+0x3e>
 8011de0:	e135      	b.n	801204e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011de8:	689b      	ldr	r3, [r3, #8]
 8011dea:	6839      	ldr	r1, [r7, #0]
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	4798      	blx	r3
 8011df0:	4603      	mov	r3, r0
 8011df2:	73fb      	strb	r3, [r7, #15]
    break;
 8011df4:	e130      	b.n	8012058 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	785b      	ldrb	r3, [r3, #1]
 8011dfa:	2b01      	cmp	r3, #1
 8011dfc:	d03e      	beq.n	8011e7c <USBD_StdEPReq+0xc4>
 8011dfe:	2b03      	cmp	r3, #3
 8011e00:	d002      	beq.n	8011e08 <USBD_StdEPReq+0x50>
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d077      	beq.n	8011ef6 <USBD_StdEPReq+0x13e>
 8011e06:	e11c      	b.n	8012042 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e0e:	2b02      	cmp	r3, #2
 8011e10:	d002      	beq.n	8011e18 <USBD_StdEPReq+0x60>
 8011e12:	2b03      	cmp	r3, #3
 8011e14:	d015      	beq.n	8011e42 <USBD_StdEPReq+0x8a>
 8011e16:	e02b      	b.n	8011e70 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e18:	7bbb      	ldrb	r3, [r7, #14]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d00c      	beq.n	8011e38 <USBD_StdEPReq+0x80>
 8011e1e:	7bbb      	ldrb	r3, [r7, #14]
 8011e20:	2b80      	cmp	r3, #128	; 0x80
 8011e22:	d009      	beq.n	8011e38 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011e24:	7bbb      	ldrb	r3, [r7, #14]
 8011e26:	4619      	mov	r1, r3
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f004 fe41 	bl	8016ab0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e2e:	2180      	movs	r1, #128	; 0x80
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f004 fe3d 	bl	8016ab0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011e36:	e020      	b.n	8011e7a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8011e38:	6839      	ldr	r1, [r7, #0]
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 fc38 	bl	80126b0 <USBD_CtlError>
        break;
 8011e40:	e01b      	b.n	8011e7a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	885b      	ldrh	r3, [r3, #2]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d10e      	bne.n	8011e68 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011e4a:	7bbb      	ldrb	r3, [r7, #14]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d00b      	beq.n	8011e68 <USBD_StdEPReq+0xb0>
 8011e50:	7bbb      	ldrb	r3, [r7, #14]
 8011e52:	2b80      	cmp	r3, #128	; 0x80
 8011e54:	d008      	beq.n	8011e68 <USBD_StdEPReq+0xb0>
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	88db      	ldrh	r3, [r3, #6]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d104      	bne.n	8011e68 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011e5e:	7bbb      	ldrb	r3, [r7, #14]
 8011e60:	4619      	mov	r1, r3
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f004 fe24 	bl	8016ab0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f000 fcec 	bl	8012846 <USBD_CtlSendStatus>

        break;
 8011e6e:	e004      	b.n	8011e7a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8011e70:	6839      	ldr	r1, [r7, #0]
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f000 fc1c 	bl	80126b0 <USBD_CtlError>
        break;
 8011e78:	bf00      	nop
      }
      break;
 8011e7a:	e0e7      	b.n	801204c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e82:	2b02      	cmp	r3, #2
 8011e84:	d002      	beq.n	8011e8c <USBD_StdEPReq+0xd4>
 8011e86:	2b03      	cmp	r3, #3
 8011e88:	d015      	beq.n	8011eb6 <USBD_StdEPReq+0xfe>
 8011e8a:	e02d      	b.n	8011ee8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e8c:	7bbb      	ldrb	r3, [r7, #14]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d00c      	beq.n	8011eac <USBD_StdEPReq+0xf4>
 8011e92:	7bbb      	ldrb	r3, [r7, #14]
 8011e94:	2b80      	cmp	r3, #128	; 0x80
 8011e96:	d009      	beq.n	8011eac <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011e98:	7bbb      	ldrb	r3, [r7, #14]
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f004 fe07 	bl	8016ab0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ea2:	2180      	movs	r1, #128	; 0x80
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f004 fe03 	bl	8016ab0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011eaa:	e023      	b.n	8011ef4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8011eac:	6839      	ldr	r1, [r7, #0]
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f000 fbfe 	bl	80126b0 <USBD_CtlError>
        break;
 8011eb4:	e01e      	b.n	8011ef4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	885b      	ldrh	r3, [r3, #2]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d119      	bne.n	8011ef2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011ebe:	7bbb      	ldrb	r3, [r7, #14]
 8011ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d004      	beq.n	8011ed2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011ec8:	7bbb      	ldrb	r3, [r7, #14]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f004 fe0e 	bl	8016aee <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f000 fcb7 	bl	8012846 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ede:	689b      	ldr	r3, [r3, #8]
 8011ee0:	6839      	ldr	r1, [r7, #0]
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	4798      	blx	r3
        }
        break;
 8011ee6:	e004      	b.n	8011ef2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8011ee8:	6839      	ldr	r1, [r7, #0]
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 fbe0 	bl	80126b0 <USBD_CtlError>
        break;
 8011ef0:	e000      	b.n	8011ef4 <USBD_StdEPReq+0x13c>
        break;
 8011ef2:	bf00      	nop
      }
      break;
 8011ef4:	e0aa      	b.n	801204c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011efc:	2b02      	cmp	r3, #2
 8011efe:	d002      	beq.n	8011f06 <USBD_StdEPReq+0x14e>
 8011f00:	2b03      	cmp	r3, #3
 8011f02:	d032      	beq.n	8011f6a <USBD_StdEPReq+0x1b2>
 8011f04:	e097      	b.n	8012036 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011f06:	7bbb      	ldrb	r3, [r7, #14]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d007      	beq.n	8011f1c <USBD_StdEPReq+0x164>
 8011f0c:	7bbb      	ldrb	r3, [r7, #14]
 8011f0e:	2b80      	cmp	r3, #128	; 0x80
 8011f10:	d004      	beq.n	8011f1c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8011f12:	6839      	ldr	r1, [r7, #0]
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f000 fbcb 	bl	80126b0 <USBD_CtlError>
          break;
 8011f1a:	e091      	b.n	8012040 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	da0b      	bge.n	8011f3c <USBD_StdEPReq+0x184>
 8011f24:	7bbb      	ldrb	r3, [r7, #14]
 8011f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011f2a:	4613      	mov	r3, r2
 8011f2c:	009b      	lsls	r3, r3, #2
 8011f2e:	4413      	add	r3, r2
 8011f30:	009b      	lsls	r3, r3, #2
 8011f32:	3310      	adds	r3, #16
 8011f34:	687a      	ldr	r2, [r7, #4]
 8011f36:	4413      	add	r3, r2
 8011f38:	3304      	adds	r3, #4
 8011f3a:	e00b      	b.n	8011f54 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011f3c:	7bbb      	ldrb	r3, [r7, #14]
 8011f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011f42:	4613      	mov	r3, r2
 8011f44:	009b      	lsls	r3, r3, #2
 8011f46:	4413      	add	r3, r2
 8011f48:	009b      	lsls	r3, r3, #2
 8011f4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011f4e:	687a      	ldr	r2, [r7, #4]
 8011f50:	4413      	add	r3, r2
 8011f52:	3304      	adds	r3, #4
 8011f54:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	2202      	movs	r2, #2
 8011f60:	4619      	mov	r1, r3
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f000 fc15 	bl	8012792 <USBD_CtlSendData>
        break;
 8011f68:	e06a      	b.n	8012040 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8011f6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	da11      	bge.n	8011f96 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011f72:	7bbb      	ldrb	r3, [r7, #14]
 8011f74:	f003 020f 	and.w	r2, r3, #15
 8011f78:	6879      	ldr	r1, [r7, #4]
 8011f7a:	4613      	mov	r3, r2
 8011f7c:	009b      	lsls	r3, r3, #2
 8011f7e:	4413      	add	r3, r2
 8011f80:	009b      	lsls	r3, r3, #2
 8011f82:	440b      	add	r3, r1
 8011f84:	3324      	adds	r3, #36	; 0x24
 8011f86:	881b      	ldrh	r3, [r3, #0]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d117      	bne.n	8011fbc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011f8c:	6839      	ldr	r1, [r7, #0]
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f000 fb8e 	bl	80126b0 <USBD_CtlError>
            break;
 8011f94:	e054      	b.n	8012040 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011f96:	7bbb      	ldrb	r3, [r7, #14]
 8011f98:	f003 020f 	and.w	r2, r3, #15
 8011f9c:	6879      	ldr	r1, [r7, #4]
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	009b      	lsls	r3, r3, #2
 8011fa2:	4413      	add	r3, r2
 8011fa4:	009b      	lsls	r3, r3, #2
 8011fa6:	440b      	add	r3, r1
 8011fa8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011fac:	881b      	ldrh	r3, [r3, #0]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d104      	bne.n	8011fbc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011fb2:	6839      	ldr	r1, [r7, #0]
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f000 fb7b 	bl	80126b0 <USBD_CtlError>
            break;
 8011fba:	e041      	b.n	8012040 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	da0b      	bge.n	8011fdc <USBD_StdEPReq+0x224>
 8011fc4:	7bbb      	ldrb	r3, [r7, #14]
 8011fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011fca:	4613      	mov	r3, r2
 8011fcc:	009b      	lsls	r3, r3, #2
 8011fce:	4413      	add	r3, r2
 8011fd0:	009b      	lsls	r3, r3, #2
 8011fd2:	3310      	adds	r3, #16
 8011fd4:	687a      	ldr	r2, [r7, #4]
 8011fd6:	4413      	add	r3, r2
 8011fd8:	3304      	adds	r3, #4
 8011fda:	e00b      	b.n	8011ff4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011fdc:	7bbb      	ldrb	r3, [r7, #14]
 8011fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fe2:	4613      	mov	r3, r2
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	4413      	add	r3, r2
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	4413      	add	r3, r2
 8011ff2:	3304      	adds	r3, #4
 8011ff4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011ff6:	7bbb      	ldrb	r3, [r7, #14]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d002      	beq.n	8012002 <USBD_StdEPReq+0x24a>
 8011ffc:	7bbb      	ldrb	r3, [r7, #14]
 8011ffe:	2b80      	cmp	r3, #128	; 0x80
 8012000:	d103      	bne.n	801200a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	2200      	movs	r2, #0
 8012006:	601a      	str	r2, [r3, #0]
 8012008:	e00e      	b.n	8012028 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801200a:	7bbb      	ldrb	r3, [r7, #14]
 801200c:	4619      	mov	r1, r3
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f004 fd8c 	bl	8016b2c <USBD_LL_IsStallEP>
 8012014:	4603      	mov	r3, r0
 8012016:	2b00      	cmp	r3, #0
 8012018:	d003      	beq.n	8012022 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	2201      	movs	r2, #1
 801201e:	601a      	str	r2, [r3, #0]
 8012020:	e002      	b.n	8012028 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	2200      	movs	r2, #0
 8012026:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	2202      	movs	r2, #2
 801202c:	4619      	mov	r1, r3
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f000 fbaf 	bl	8012792 <USBD_CtlSendData>
          break;
 8012034:	e004      	b.n	8012040 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8012036:	6839      	ldr	r1, [r7, #0]
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f000 fb39 	bl	80126b0 <USBD_CtlError>
        break;
 801203e:	bf00      	nop
      }
      break;
 8012040:	e004      	b.n	801204c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8012042:	6839      	ldr	r1, [r7, #0]
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f000 fb33 	bl	80126b0 <USBD_CtlError>
      break;
 801204a:	bf00      	nop
    }
    break;
 801204c:	e004      	b.n	8012058 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 801204e:	6839      	ldr	r1, [r7, #0]
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f000 fb2d 	bl	80126b0 <USBD_CtlError>
    break;
 8012056:	bf00      	nop
  }

  return ret;
 8012058:	7bfb      	ldrb	r3, [r7, #15]
}
 801205a:	4618      	mov	r0, r3
 801205c:	3710      	adds	r7, #16
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
	...

08012064 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b084      	sub	sp, #16
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801206e:	2300      	movs	r3, #0
 8012070:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012072:	2300      	movs	r3, #0
 8012074:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012076:	2300      	movs	r3, #0
 8012078:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	885b      	ldrh	r3, [r3, #2]
 801207e:	0a1b      	lsrs	r3, r3, #8
 8012080:	b29b      	uxth	r3, r3
 8012082:	3b01      	subs	r3, #1
 8012084:	2b06      	cmp	r3, #6
 8012086:	f200 8128 	bhi.w	80122da <USBD_GetDescriptor+0x276>
 801208a:	a201      	add	r2, pc, #4	; (adr r2, 8012090 <USBD_GetDescriptor+0x2c>)
 801208c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012090:	080120ad 	.word	0x080120ad
 8012094:	080120c5 	.word	0x080120c5
 8012098:	08012105 	.word	0x08012105
 801209c:	080122db 	.word	0x080122db
 80120a0:	080122db 	.word	0x080122db
 80120a4:	0801227b 	.word	0x0801227b
 80120a8:	080122a7 	.word	0x080122a7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	7c12      	ldrb	r2, [r2, #16]
 80120b8:	f107 0108 	add.w	r1, r7, #8
 80120bc:	4610      	mov	r0, r2
 80120be:	4798      	blx	r3
 80120c0:	60f8      	str	r0, [r7, #12]
    break;
 80120c2:	e112      	b.n	80122ea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	7c1b      	ldrb	r3, [r3, #16]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d10d      	bne.n	80120e8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120d4:	f107 0208 	add.w	r2, r7, #8
 80120d8:	4610      	mov	r0, r2
 80120da:	4798      	blx	r3
 80120dc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	3301      	adds	r3, #1
 80120e2:	2202      	movs	r2, #2
 80120e4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80120e6:	e100      	b.n	80122ea <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120f0:	f107 0208 	add.w	r2, r7, #8
 80120f4:	4610      	mov	r0, r2
 80120f6:	4798      	blx	r3
 80120f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	3301      	adds	r3, #1
 80120fe:	2202      	movs	r2, #2
 8012100:	701a      	strb	r2, [r3, #0]
    break;
 8012102:	e0f2      	b.n	80122ea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	885b      	ldrh	r3, [r3, #2]
 8012108:	b2db      	uxtb	r3, r3
 801210a:	2b05      	cmp	r3, #5
 801210c:	f200 80ac 	bhi.w	8012268 <USBD_GetDescriptor+0x204>
 8012110:	a201      	add	r2, pc, #4	; (adr r2, 8012118 <USBD_GetDescriptor+0xb4>)
 8012112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012116:	bf00      	nop
 8012118:	08012131 	.word	0x08012131
 801211c:	08012165 	.word	0x08012165
 8012120:	08012199 	.word	0x08012199
 8012124:	080121cd 	.word	0x080121cd
 8012128:	08012201 	.word	0x08012201
 801212c:	08012235 	.word	0x08012235
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d00b      	beq.n	8012154 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	687a      	ldr	r2, [r7, #4]
 8012146:	7c12      	ldrb	r2, [r2, #16]
 8012148:	f107 0108 	add.w	r1, r7, #8
 801214c:	4610      	mov	r0, r2
 801214e:	4798      	blx	r3
 8012150:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012152:	e091      	b.n	8012278 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012154:	6839      	ldr	r1, [r7, #0]
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f000 faaa 	bl	80126b0 <USBD_CtlError>
        err++;
 801215c:	7afb      	ldrb	r3, [r7, #11]
 801215e:	3301      	adds	r3, #1
 8012160:	72fb      	strb	r3, [r7, #11]
      break;
 8012162:	e089      	b.n	8012278 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801216a:	689b      	ldr	r3, [r3, #8]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d00b      	beq.n	8012188 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012176:	689b      	ldr	r3, [r3, #8]
 8012178:	687a      	ldr	r2, [r7, #4]
 801217a:	7c12      	ldrb	r2, [r2, #16]
 801217c:	f107 0108 	add.w	r1, r7, #8
 8012180:	4610      	mov	r0, r2
 8012182:	4798      	blx	r3
 8012184:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012186:	e077      	b.n	8012278 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012188:	6839      	ldr	r1, [r7, #0]
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f000 fa90 	bl	80126b0 <USBD_CtlError>
        err++;
 8012190:	7afb      	ldrb	r3, [r7, #11]
 8012192:	3301      	adds	r3, #1
 8012194:	72fb      	strb	r3, [r7, #11]
      break;
 8012196:	e06f      	b.n	8012278 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801219e:	68db      	ldr	r3, [r3, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d00b      	beq.n	80121bc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121aa:	68db      	ldr	r3, [r3, #12]
 80121ac:	687a      	ldr	r2, [r7, #4]
 80121ae:	7c12      	ldrb	r2, [r2, #16]
 80121b0:	f107 0108 	add.w	r1, r7, #8
 80121b4:	4610      	mov	r0, r2
 80121b6:	4798      	blx	r3
 80121b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80121ba:	e05d      	b.n	8012278 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80121bc:	6839      	ldr	r1, [r7, #0]
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f000 fa76 	bl	80126b0 <USBD_CtlError>
        err++;
 80121c4:	7afb      	ldrb	r3, [r7, #11]
 80121c6:	3301      	adds	r3, #1
 80121c8:	72fb      	strb	r3, [r7, #11]
      break;
 80121ca:	e055      	b.n	8012278 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121d2:	691b      	ldr	r3, [r3, #16]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d00b      	beq.n	80121f0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121de:	691b      	ldr	r3, [r3, #16]
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	7c12      	ldrb	r2, [r2, #16]
 80121e4:	f107 0108 	add.w	r1, r7, #8
 80121e8:	4610      	mov	r0, r2
 80121ea:	4798      	blx	r3
 80121ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80121ee:	e043      	b.n	8012278 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80121f0:	6839      	ldr	r1, [r7, #0]
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f000 fa5c 	bl	80126b0 <USBD_CtlError>
        err++;
 80121f8:	7afb      	ldrb	r3, [r7, #11]
 80121fa:	3301      	adds	r3, #1
 80121fc:	72fb      	strb	r3, [r7, #11]
      break;
 80121fe:	e03b      	b.n	8012278 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012206:	695b      	ldr	r3, [r3, #20]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d00b      	beq.n	8012224 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012212:	695b      	ldr	r3, [r3, #20]
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	7c12      	ldrb	r2, [r2, #16]
 8012218:	f107 0108 	add.w	r1, r7, #8
 801221c:	4610      	mov	r0, r2
 801221e:	4798      	blx	r3
 8012220:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012222:	e029      	b.n	8012278 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012224:	6839      	ldr	r1, [r7, #0]
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f000 fa42 	bl	80126b0 <USBD_CtlError>
        err++;
 801222c:	7afb      	ldrb	r3, [r7, #11]
 801222e:	3301      	adds	r3, #1
 8012230:	72fb      	strb	r3, [r7, #11]
      break;
 8012232:	e021      	b.n	8012278 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801223a:	699b      	ldr	r3, [r3, #24]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d00b      	beq.n	8012258 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012246:	699b      	ldr	r3, [r3, #24]
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	7c12      	ldrb	r2, [r2, #16]
 801224c:	f107 0108 	add.w	r1, r7, #8
 8012250:	4610      	mov	r0, r2
 8012252:	4798      	blx	r3
 8012254:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012256:	e00f      	b.n	8012278 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012258:	6839      	ldr	r1, [r7, #0]
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f000 fa28 	bl	80126b0 <USBD_CtlError>
        err++;
 8012260:	7afb      	ldrb	r3, [r7, #11]
 8012262:	3301      	adds	r3, #1
 8012264:	72fb      	strb	r3, [r7, #11]
      break;
 8012266:	e007      	b.n	8012278 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012268:	6839      	ldr	r1, [r7, #0]
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f000 fa20 	bl	80126b0 <USBD_CtlError>
      err++;
 8012270:	7afb      	ldrb	r3, [r7, #11]
 8012272:	3301      	adds	r3, #1
 8012274:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8012276:	bf00      	nop
    }
    break;
 8012278:	e037      	b.n	80122ea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	7c1b      	ldrb	r3, [r3, #16]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d109      	bne.n	8012296 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801228a:	f107 0208 	add.w	r2, r7, #8
 801228e:	4610      	mov	r0, r2
 8012290:	4798      	blx	r3
 8012292:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012294:	e029      	b.n	80122ea <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8012296:	6839      	ldr	r1, [r7, #0]
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f000 fa09 	bl	80126b0 <USBD_CtlError>
      err++;
 801229e:	7afb      	ldrb	r3, [r7, #11]
 80122a0:	3301      	adds	r3, #1
 80122a2:	72fb      	strb	r3, [r7, #11]
    break;
 80122a4:	e021      	b.n	80122ea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	7c1b      	ldrb	r3, [r3, #16]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d10d      	bne.n	80122ca <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122b6:	f107 0208 	add.w	r2, r7, #8
 80122ba:	4610      	mov	r0, r2
 80122bc:	4798      	blx	r3
 80122be:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	3301      	adds	r3, #1
 80122c4:	2207      	movs	r2, #7
 80122c6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80122c8:	e00f      	b.n	80122ea <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80122ca:	6839      	ldr	r1, [r7, #0]
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f000 f9ef 	bl	80126b0 <USBD_CtlError>
      err++;
 80122d2:	7afb      	ldrb	r3, [r7, #11]
 80122d4:	3301      	adds	r3, #1
 80122d6:	72fb      	strb	r3, [r7, #11]
    break;
 80122d8:	e007      	b.n	80122ea <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80122da:	6839      	ldr	r1, [r7, #0]
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f000 f9e7 	bl	80126b0 <USBD_CtlError>
    err++;
 80122e2:	7afb      	ldrb	r3, [r7, #11]
 80122e4:	3301      	adds	r3, #1
 80122e6:	72fb      	strb	r3, [r7, #11]
    break;
 80122e8:	bf00      	nop
  }

  if (err != 0U)
 80122ea:	7afb      	ldrb	r3, [r7, #11]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d11e      	bne.n	801232e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	88db      	ldrh	r3, [r3, #6]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d016      	beq.n	8012326 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80122f8:	893b      	ldrh	r3, [r7, #8]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d00e      	beq.n	801231c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	88da      	ldrh	r2, [r3, #6]
 8012302:	893b      	ldrh	r3, [r7, #8]
 8012304:	4293      	cmp	r3, r2
 8012306:	bf28      	it	cs
 8012308:	4613      	movcs	r3, r2
 801230a:	b29b      	uxth	r3, r3
 801230c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801230e:	893b      	ldrh	r3, [r7, #8]
 8012310:	461a      	mov	r2, r3
 8012312:	68f9      	ldr	r1, [r7, #12]
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f000 fa3c 	bl	8012792 <USBD_CtlSendData>
 801231a:	e009      	b.n	8012330 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 801231c:	6839      	ldr	r1, [r7, #0]
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	f000 f9c6 	bl	80126b0 <USBD_CtlError>
 8012324:	e004      	b.n	8012330 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f000 fa8d 	bl	8012846 <USBD_CtlSendStatus>
 801232c:	e000      	b.n	8012330 <USBD_GetDescriptor+0x2cc>
    return;
 801232e:	bf00      	nop
    }
  }
}
 8012330:	3710      	adds	r7, #16
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop

08012338 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	889b      	ldrh	r3, [r3, #4]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d130      	bne.n	80123ac <USBD_SetAddress+0x74>
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	88db      	ldrh	r3, [r3, #6]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d12c      	bne.n	80123ac <USBD_SetAddress+0x74>
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	885b      	ldrh	r3, [r3, #2]
 8012356:	2b7f      	cmp	r3, #127	; 0x7f
 8012358:	d828      	bhi.n	80123ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	885b      	ldrh	r3, [r3, #2]
 801235e:	b2db      	uxtb	r3, r3
 8012360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012364:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801236c:	2b03      	cmp	r3, #3
 801236e:	d104      	bne.n	801237a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012370:	6839      	ldr	r1, [r7, #0]
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f000 f99c 	bl	80126b0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012378:	e01c      	b.n	80123b4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	7bfa      	ldrb	r2, [r7, #15]
 801237e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012382:	7bfb      	ldrb	r3, [r7, #15]
 8012384:	4619      	mov	r1, r3
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f004 fbfc 	bl	8016b84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f000 fa5a 	bl	8012846 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012392:	7bfb      	ldrb	r3, [r7, #15]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d004      	beq.n	80123a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2202      	movs	r2, #2
 801239c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123a0:	e008      	b.n	80123b4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2201      	movs	r2, #1
 80123a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123aa:	e003      	b.n	80123b4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80123ac:	6839      	ldr	r1, [r7, #0]
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f000 f97e 	bl	80126b0 <USBD_CtlError>
  }
}
 80123b4:	bf00      	nop
 80123b6:	3710      	adds	r7, #16
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}

080123bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b084      	sub	sp, #16
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
 80123c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80123c6:	2300      	movs	r3, #0
 80123c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	885b      	ldrh	r3, [r3, #2]
 80123ce:	b2da      	uxtb	r2, r3
 80123d0:	4b4b      	ldr	r3, [pc, #300]	; (8012500 <USBD_SetConfig+0x144>)
 80123d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80123d4:	4b4a      	ldr	r3, [pc, #296]	; (8012500 <USBD_SetConfig+0x144>)
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	2b01      	cmp	r3, #1
 80123da:	d905      	bls.n	80123e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80123dc:	6839      	ldr	r1, [r7, #0]
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f000 f966 	bl	80126b0 <USBD_CtlError>
    return USBD_FAIL;
 80123e4:	2303      	movs	r3, #3
 80123e6:	e087      	b.n	80124f8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123ee:	2b02      	cmp	r3, #2
 80123f0:	d002      	beq.n	80123f8 <USBD_SetConfig+0x3c>
 80123f2:	2b03      	cmp	r3, #3
 80123f4:	d025      	beq.n	8012442 <USBD_SetConfig+0x86>
 80123f6:	e071      	b.n	80124dc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80123f8:	4b41      	ldr	r3, [pc, #260]	; (8012500 <USBD_SetConfig+0x144>)
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d01c      	beq.n	801243a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8012400:	4b3f      	ldr	r3, [pc, #252]	; (8012500 <USBD_SetConfig+0x144>)
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	461a      	mov	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801240a:	4b3d      	ldr	r3, [pc, #244]	; (8012500 <USBD_SetConfig+0x144>)
 801240c:	781b      	ldrb	r3, [r3, #0]
 801240e:	4619      	mov	r1, r3
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f7ff f9a7 	bl	8011764 <USBD_SetClassConfig>
 8012416:	4603      	mov	r3, r0
 8012418:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801241a:	7bfb      	ldrb	r3, [r7, #15]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d004      	beq.n	801242a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8012420:	6839      	ldr	r1, [r7, #0]
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f000 f944 	bl	80126b0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012428:	e065      	b.n	80124f6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f000 fa0b 	bl	8012846 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2203      	movs	r2, #3
 8012434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012438:	e05d      	b.n	80124f6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f000 fa03 	bl	8012846 <USBD_CtlSendStatus>
    break;
 8012440:	e059      	b.n	80124f6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8012442:	4b2f      	ldr	r3, [pc, #188]	; (8012500 <USBD_SetConfig+0x144>)
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d112      	bne.n	8012470 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2202      	movs	r2, #2
 801244e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8012452:	4b2b      	ldr	r3, [pc, #172]	; (8012500 <USBD_SetConfig+0x144>)
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	461a      	mov	r2, r3
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801245c:	4b28      	ldr	r3, [pc, #160]	; (8012500 <USBD_SetConfig+0x144>)
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	4619      	mov	r1, r3
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f7ff f99a 	bl	801179c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f000 f9ec 	bl	8012846 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801246e:	e042      	b.n	80124f6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8012470:	4b23      	ldr	r3, [pc, #140]	; (8012500 <USBD_SetConfig+0x144>)
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	461a      	mov	r2, r3
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	429a      	cmp	r2, r3
 801247c:	d02a      	beq.n	80124d4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	685b      	ldr	r3, [r3, #4]
 8012482:	b2db      	uxtb	r3, r3
 8012484:	4619      	mov	r1, r3
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f7ff f988 	bl	801179c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 801248c:	4b1c      	ldr	r3, [pc, #112]	; (8012500 <USBD_SetConfig+0x144>)
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	461a      	mov	r2, r3
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012496:	4b1a      	ldr	r3, [pc, #104]	; (8012500 <USBD_SetConfig+0x144>)
 8012498:	781b      	ldrb	r3, [r3, #0]
 801249a:	4619      	mov	r1, r3
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f7ff f961 	bl	8011764 <USBD_SetClassConfig>
 80124a2:	4603      	mov	r3, r0
 80124a4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80124a6:	7bfb      	ldrb	r3, [r7, #15]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d00f      	beq.n	80124cc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80124ac:	6839      	ldr	r1, [r7, #0]
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f000 f8fe 	bl	80126b0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	685b      	ldr	r3, [r3, #4]
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	4619      	mov	r1, r3
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f7ff f96d 	bl	801179c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2202      	movs	r2, #2
 80124c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80124ca:	e014      	b.n	80124f6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f000 f9ba 	bl	8012846 <USBD_CtlSendStatus>
    break;
 80124d2:	e010      	b.n	80124f6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f000 f9b6 	bl	8012846 <USBD_CtlSendStatus>
    break;
 80124da:	e00c      	b.n	80124f6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80124dc:	6839      	ldr	r1, [r7, #0]
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	f000 f8e6 	bl	80126b0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80124e4:	4b06      	ldr	r3, [pc, #24]	; (8012500 <USBD_SetConfig+0x144>)
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	4619      	mov	r1, r3
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f7ff f956 	bl	801179c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80124f0:	2303      	movs	r3, #3
 80124f2:	73fb      	strb	r3, [r7, #15]
    break;
 80124f4:	bf00      	nop
  }

  return ret;
 80124f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}
 8012500:	240002e0 	.word	0x240002e0

08012504 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b082      	sub	sp, #8
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	88db      	ldrh	r3, [r3, #6]
 8012512:	2b01      	cmp	r3, #1
 8012514:	d004      	beq.n	8012520 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012516:	6839      	ldr	r1, [r7, #0]
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f000 f8c9 	bl	80126b0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801251e:	e021      	b.n	8012564 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012526:	2b01      	cmp	r3, #1
 8012528:	db17      	blt.n	801255a <USBD_GetConfig+0x56>
 801252a:	2b02      	cmp	r3, #2
 801252c:	dd02      	ble.n	8012534 <USBD_GetConfig+0x30>
 801252e:	2b03      	cmp	r3, #3
 8012530:	d00b      	beq.n	801254a <USBD_GetConfig+0x46>
 8012532:	e012      	b.n	801255a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2200      	movs	r2, #0
 8012538:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	3308      	adds	r3, #8
 801253e:	2201      	movs	r2, #1
 8012540:	4619      	mov	r1, r3
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f000 f925 	bl	8012792 <USBD_CtlSendData>
      break;
 8012548:	e00c      	b.n	8012564 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	3304      	adds	r3, #4
 801254e:	2201      	movs	r2, #1
 8012550:	4619      	mov	r1, r3
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f000 f91d 	bl	8012792 <USBD_CtlSendData>
      break;
 8012558:	e004      	b.n	8012564 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801255a:	6839      	ldr	r1, [r7, #0]
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f000 f8a7 	bl	80126b0 <USBD_CtlError>
      break;
 8012562:	bf00      	nop
}
 8012564:	bf00      	nop
 8012566:	3708      	adds	r7, #8
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801257c:	3b01      	subs	r3, #1
 801257e:	2b02      	cmp	r3, #2
 8012580:	d81e      	bhi.n	80125c0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	88db      	ldrh	r3, [r3, #6]
 8012586:	2b02      	cmp	r3, #2
 8012588:	d004      	beq.n	8012594 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801258a:	6839      	ldr	r1, [r7, #0]
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f000 f88f 	bl	80126b0 <USBD_CtlError>
      break;
 8012592:	e01a      	b.n	80125ca <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2201      	movs	r2, #1
 8012598:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d005      	beq.n	80125b0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	68db      	ldr	r3, [r3, #12]
 80125a8:	f043 0202 	orr.w	r2, r3, #2
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	330c      	adds	r3, #12
 80125b4:	2202      	movs	r2, #2
 80125b6:	4619      	mov	r1, r3
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f000 f8ea 	bl	8012792 <USBD_CtlSendData>
    break;
 80125be:	e004      	b.n	80125ca <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80125c0:	6839      	ldr	r1, [r7, #0]
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f000 f874 	bl	80126b0 <USBD_CtlError>
    break;
 80125c8:	bf00      	nop
  }
}
 80125ca:	bf00      	nop
 80125cc:	3708      	adds	r7, #8
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}

080125d2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125d2:	b580      	push	{r7, lr}
 80125d4:	b082      	sub	sp, #8
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
 80125da:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	885b      	ldrh	r3, [r3, #2]
 80125e0:	2b01      	cmp	r3, #1
 80125e2:	d106      	bne.n	80125f2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2201      	movs	r2, #1
 80125e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f000 f92a 	bl	8012846 <USBD_CtlSendStatus>
  }
}
 80125f2:	bf00      	nop
 80125f4:	3708      	adds	r7, #8
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b082      	sub	sp, #8
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6078      	str	r0, [r7, #4]
 8012602:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801260a:	3b01      	subs	r3, #1
 801260c:	2b02      	cmp	r3, #2
 801260e:	d80b      	bhi.n	8012628 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	885b      	ldrh	r3, [r3, #2]
 8012614:	2b01      	cmp	r3, #1
 8012616:	d10c      	bne.n	8012632 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2200      	movs	r2, #0
 801261c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f000 f910 	bl	8012846 <USBD_CtlSendStatus>
      }
      break;
 8012626:	e004      	b.n	8012632 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012628:	6839      	ldr	r1, [r7, #0]
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 f840 	bl	80126b0 <USBD_CtlError>
      break;
 8012630:	e000      	b.n	8012634 <USBD_ClrFeature+0x3a>
      break;
 8012632:	bf00      	nop
  }
}
 8012634:	bf00      	nop
 8012636:	3708      	adds	r7, #8
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b084      	sub	sp, #16
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	781a      	ldrb	r2, [r3, #0]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	3301      	adds	r3, #1
 8012656:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	781a      	ldrb	r2, [r3, #0]
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	3301      	adds	r3, #1
 8012664:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012666:	68f8      	ldr	r0, [r7, #12]
 8012668:	f7ff fad3 	bl	8011c12 <SWAPBYTE>
 801266c:	4603      	mov	r3, r0
 801266e:	461a      	mov	r2, r3
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	3301      	adds	r3, #1
 8012678:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	3301      	adds	r3, #1
 801267e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012680:	68f8      	ldr	r0, [r7, #12]
 8012682:	f7ff fac6 	bl	8011c12 <SWAPBYTE>
 8012686:	4603      	mov	r3, r0
 8012688:	461a      	mov	r2, r3
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	3301      	adds	r3, #1
 8012692:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	3301      	adds	r3, #1
 8012698:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801269a:	68f8      	ldr	r0, [r7, #12]
 801269c:	f7ff fab9 	bl	8011c12 <SWAPBYTE>
 80126a0:	4603      	mov	r3, r0
 80126a2:	461a      	mov	r2, r3
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	80da      	strh	r2, [r3, #6]
}
 80126a8:	bf00      	nop
 80126aa:	3710      	adds	r7, #16
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80126ba:	2180      	movs	r1, #128	; 0x80
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f004 f9f7 	bl	8016ab0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80126c2:	2100      	movs	r1, #0
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f004 f9f3 	bl	8016ab0 <USBD_LL_StallEP>
}
 80126ca:	bf00      	nop
 80126cc:	3708      	adds	r7, #8
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}

080126d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80126d2:	b580      	push	{r7, lr}
 80126d4:	b086      	sub	sp, #24
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	60f8      	str	r0, [r7, #12]
 80126da:	60b9      	str	r1, [r7, #8]
 80126dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80126de:	2300      	movs	r3, #0
 80126e0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d036      	beq.n	8012756 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80126ec:	6938      	ldr	r0, [r7, #16]
 80126ee:	f000 f836 	bl	801275e <USBD_GetLen>
 80126f2:	4603      	mov	r3, r0
 80126f4:	3301      	adds	r3, #1
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	005b      	lsls	r3, r3, #1
 80126fa:	b29a      	uxth	r2, r3
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012700:	7dfb      	ldrb	r3, [r7, #23]
 8012702:	68ba      	ldr	r2, [r7, #8]
 8012704:	4413      	add	r3, r2
 8012706:	687a      	ldr	r2, [r7, #4]
 8012708:	7812      	ldrb	r2, [r2, #0]
 801270a:	701a      	strb	r2, [r3, #0]
  idx++;
 801270c:	7dfb      	ldrb	r3, [r7, #23]
 801270e:	3301      	adds	r3, #1
 8012710:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012712:	7dfb      	ldrb	r3, [r7, #23]
 8012714:	68ba      	ldr	r2, [r7, #8]
 8012716:	4413      	add	r3, r2
 8012718:	2203      	movs	r2, #3
 801271a:	701a      	strb	r2, [r3, #0]
  idx++;
 801271c:	7dfb      	ldrb	r3, [r7, #23]
 801271e:	3301      	adds	r3, #1
 8012720:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012722:	e013      	b.n	801274c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012724:	7dfb      	ldrb	r3, [r7, #23]
 8012726:	68ba      	ldr	r2, [r7, #8]
 8012728:	4413      	add	r3, r2
 801272a:	693a      	ldr	r2, [r7, #16]
 801272c:	7812      	ldrb	r2, [r2, #0]
 801272e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	3301      	adds	r3, #1
 8012734:	613b      	str	r3, [r7, #16]
    idx++;
 8012736:	7dfb      	ldrb	r3, [r7, #23]
 8012738:	3301      	adds	r3, #1
 801273a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801273c:	7dfb      	ldrb	r3, [r7, #23]
 801273e:	68ba      	ldr	r2, [r7, #8]
 8012740:	4413      	add	r3, r2
 8012742:	2200      	movs	r2, #0
 8012744:	701a      	strb	r2, [r3, #0]
    idx++;
 8012746:	7dfb      	ldrb	r3, [r7, #23]
 8012748:	3301      	adds	r3, #1
 801274a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d1e7      	bne.n	8012724 <USBD_GetString+0x52>
 8012754:	e000      	b.n	8012758 <USBD_GetString+0x86>
    return;
 8012756:	bf00      	nop
  }
}
 8012758:	3718      	adds	r7, #24
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}

0801275e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801275e:	b480      	push	{r7}
 8012760:	b085      	sub	sp, #20
 8012762:	af00      	add	r7, sp, #0
 8012764:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012766:	2300      	movs	r3, #0
 8012768:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801276e:	e005      	b.n	801277c <USBD_GetLen+0x1e>
  {
    len++;
 8012770:	7bfb      	ldrb	r3, [r7, #15]
 8012772:	3301      	adds	r3, #1
 8012774:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	3301      	adds	r3, #1
 801277a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d1f5      	bne.n	8012770 <USBD_GetLen+0x12>
  }

  return len;
 8012784:	7bfb      	ldrb	r3, [r7, #15]
}
 8012786:	4618      	mov	r0, r3
 8012788:	3714      	adds	r7, #20
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr

08012792 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012792:	b580      	push	{r7, lr}
 8012794:	b084      	sub	sp, #16
 8012796:	af00      	add	r7, sp, #0
 8012798:	60f8      	str	r0, [r7, #12]
 801279a:	60b9      	str	r1, [r7, #8]
 801279c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2202      	movs	r2, #2
 80127a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	687a      	ldr	r2, [r7, #4]
 80127aa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	68ba      	ldr	r2, [r7, #8]
 80127b6:	2100      	movs	r1, #0
 80127b8:	68f8      	ldr	r0, [r7, #12]
 80127ba:	f004 fa02 	bl	8016bc2 <USBD_LL_Transmit>

  return USBD_OK;
 80127be:	2300      	movs	r3, #0
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3710      	adds	r7, #16
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	60b9      	str	r1, [r7, #8]
 80127d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	68ba      	ldr	r2, [r7, #8]
 80127d8:	2100      	movs	r1, #0
 80127da:	68f8      	ldr	r0, [r7, #12]
 80127dc:	f004 f9f1 	bl	8016bc2 <USBD_LL_Transmit>

  return USBD_OK;
 80127e0:	2300      	movs	r3, #0
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3710      	adds	r7, #16
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}

080127ea <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80127ea:	b580      	push	{r7, lr}
 80127ec:	b084      	sub	sp, #16
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	60f8      	str	r0, [r7, #12]
 80127f2:	60b9      	str	r1, [r7, #8]
 80127f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2203      	movs	r2, #3
 80127fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	687a      	ldr	r2, [r7, #4]
 8012802:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	687a      	ldr	r2, [r7, #4]
 801280a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	68ba      	ldr	r2, [r7, #8]
 8012812:	2100      	movs	r1, #0
 8012814:	68f8      	ldr	r0, [r7, #12]
 8012816:	f004 f9f5 	bl	8016c04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801281a:	2300      	movs	r3, #0
}
 801281c:	4618      	mov	r0, r3
 801281e:	3710      	adds	r7, #16
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	60b9      	str	r1, [r7, #8]
 801282e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	68ba      	ldr	r2, [r7, #8]
 8012834:	2100      	movs	r1, #0
 8012836:	68f8      	ldr	r0, [r7, #12]
 8012838:	f004 f9e4 	bl	8016c04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801283c:	2300      	movs	r3, #0
}
 801283e:	4618      	mov	r0, r3
 8012840:	3710      	adds	r7, #16
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}

08012846 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012846:	b580      	push	{r7, lr}
 8012848:	b082      	sub	sp, #8
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2204      	movs	r2, #4
 8012852:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012856:	2300      	movs	r3, #0
 8012858:	2200      	movs	r2, #0
 801285a:	2100      	movs	r1, #0
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f004 f9b0 	bl	8016bc2 <USBD_LL_Transmit>

  return USBD_OK;
 8012862:	2300      	movs	r3, #0
}
 8012864:	4618      	mov	r0, r3
 8012866:	3708      	adds	r7, #8
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}

0801286c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2205      	movs	r2, #5
 8012878:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801287c:	2300      	movs	r3, #0
 801287e:	2200      	movs	r2, #0
 8012880:	2100      	movs	r1, #0
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f004 f9be 	bl	8016c04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012888:	2300      	movs	r3, #0
}
 801288a:	4618      	mov	r0, r3
 801288c:	3708      	adds	r7, #8
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
	...

08012894 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012894:	b480      	push	{r7}
 8012896:	b087      	sub	sp, #28
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	4613      	mov	r3, r2
 80128a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80128a2:	2301      	movs	r3, #1
 80128a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80128a6:	2300      	movs	r3, #0
 80128a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80128aa:	4b1f      	ldr	r3, [pc, #124]	; (8012928 <FATFS_LinkDriverEx+0x94>)
 80128ac:	7a5b      	ldrb	r3, [r3, #9]
 80128ae:	b2db      	uxtb	r3, r3
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d131      	bne.n	8012918 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80128b4:	4b1c      	ldr	r3, [pc, #112]	; (8012928 <FATFS_LinkDriverEx+0x94>)
 80128b6:	7a5b      	ldrb	r3, [r3, #9]
 80128b8:	b2db      	uxtb	r3, r3
 80128ba:	461a      	mov	r2, r3
 80128bc:	4b1a      	ldr	r3, [pc, #104]	; (8012928 <FATFS_LinkDriverEx+0x94>)
 80128be:	2100      	movs	r1, #0
 80128c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80128c2:	4b19      	ldr	r3, [pc, #100]	; (8012928 <FATFS_LinkDriverEx+0x94>)
 80128c4:	7a5b      	ldrb	r3, [r3, #9]
 80128c6:	b2db      	uxtb	r3, r3
 80128c8:	4a17      	ldr	r2, [pc, #92]	; (8012928 <FATFS_LinkDriverEx+0x94>)
 80128ca:	009b      	lsls	r3, r3, #2
 80128cc:	4413      	add	r3, r2
 80128ce:	68fa      	ldr	r2, [r7, #12]
 80128d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80128d2:	4b15      	ldr	r3, [pc, #84]	; (8012928 <FATFS_LinkDriverEx+0x94>)
 80128d4:	7a5b      	ldrb	r3, [r3, #9]
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	461a      	mov	r2, r3
 80128da:	4b13      	ldr	r3, [pc, #76]	; (8012928 <FATFS_LinkDriverEx+0x94>)
 80128dc:	4413      	add	r3, r2
 80128de:	79fa      	ldrb	r2, [r7, #7]
 80128e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80128e2:	4b11      	ldr	r3, [pc, #68]	; (8012928 <FATFS_LinkDriverEx+0x94>)
 80128e4:	7a5b      	ldrb	r3, [r3, #9]
 80128e6:	b2db      	uxtb	r3, r3
 80128e8:	1c5a      	adds	r2, r3, #1
 80128ea:	b2d1      	uxtb	r1, r2
 80128ec:	4a0e      	ldr	r2, [pc, #56]	; (8012928 <FATFS_LinkDriverEx+0x94>)
 80128ee:	7251      	strb	r1, [r2, #9]
 80128f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80128f2:	7dbb      	ldrb	r3, [r7, #22]
 80128f4:	3330      	adds	r3, #48	; 0x30
 80128f6:	b2da      	uxtb	r2, r3
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	3301      	adds	r3, #1
 8012900:	223a      	movs	r2, #58	; 0x3a
 8012902:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012904:	68bb      	ldr	r3, [r7, #8]
 8012906:	3302      	adds	r3, #2
 8012908:	222f      	movs	r2, #47	; 0x2f
 801290a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	3303      	adds	r3, #3
 8012910:	2200      	movs	r2, #0
 8012912:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012914:	2300      	movs	r3, #0
 8012916:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012918:	7dfb      	ldrb	r3, [r7, #23]
}
 801291a:	4618      	mov	r0, r3
 801291c:	371c      	adds	r7, #28
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr
 8012926:	bf00      	nop
 8012928:	240002e4 	.word	0x240002e4

0801292c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012936:	2200      	movs	r2, #0
 8012938:	6839      	ldr	r1, [r7, #0]
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f7ff ffaa 	bl	8012894 <FATFS_LinkDriverEx>
 8012940:	4603      	mov	r3, r0
}
 8012942:	4618      	mov	r0, r3
 8012944:	3708      	adds	r7, #8
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}

0801294a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801294a:	b480      	push	{r7}
 801294c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801294e:	bf00      	nop
 8012950:	46bd      	mov	sp, r7
 8012952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012956:	4770      	bx	lr

08012958 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012958:	b480      	push	{r7}
 801295a:	b085      	sub	sp, #20
 801295c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801295e:	f3ef 8305 	mrs	r3, IPSR
 8012962:	60bb      	str	r3, [r7, #8]
  return(result);
 8012964:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012966:	2b00      	cmp	r3, #0
 8012968:	d10f      	bne.n	801298a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801296a:	f3ef 8310 	mrs	r3, PRIMASK
 801296e:	607b      	str	r3, [r7, #4]
  return(result);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d105      	bne.n	8012982 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012976:	f3ef 8311 	mrs	r3, BASEPRI
 801297a:	603b      	str	r3, [r7, #0]
  return(result);
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d007      	beq.n	8012992 <osKernelInitialize+0x3a>
 8012982:	4b0e      	ldr	r3, [pc, #56]	; (80129bc <osKernelInitialize+0x64>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	2b02      	cmp	r3, #2
 8012988:	d103      	bne.n	8012992 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801298a:	f06f 0305 	mvn.w	r3, #5
 801298e:	60fb      	str	r3, [r7, #12]
 8012990:	e00c      	b.n	80129ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012992:	4b0a      	ldr	r3, [pc, #40]	; (80129bc <osKernelInitialize+0x64>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d105      	bne.n	80129a6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801299a:	4b08      	ldr	r3, [pc, #32]	; (80129bc <osKernelInitialize+0x64>)
 801299c:	2201      	movs	r2, #1
 801299e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80129a0:	2300      	movs	r3, #0
 80129a2:	60fb      	str	r3, [r7, #12]
 80129a4:	e002      	b.n	80129ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80129a6:	f04f 33ff 	mov.w	r3, #4294967295
 80129aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80129ac:	68fb      	ldr	r3, [r7, #12]
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3714      	adds	r7, #20
 80129b2:	46bd      	mov	sp, r7
 80129b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b8:	4770      	bx	lr
 80129ba:	bf00      	nop
 80129bc:	240002f0 	.word	0x240002f0

080129c0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80129c6:	f002 fb3f 	bl	8015048 <xTaskGetSchedulerState>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d004      	beq.n	80129da <osKernelGetState+0x1a>
 80129d0:	2b02      	cmp	r3, #2
 80129d2:	d105      	bne.n	80129e0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80129d4:	2302      	movs	r3, #2
 80129d6:	607b      	str	r3, [r7, #4]
      break;
 80129d8:	e00c      	b.n	80129f4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80129da:	2303      	movs	r3, #3
 80129dc:	607b      	str	r3, [r7, #4]
      break;
 80129de:	e009      	b.n	80129f4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80129e0:	4b07      	ldr	r3, [pc, #28]	; (8012a00 <osKernelGetState+0x40>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d102      	bne.n	80129ee <osKernelGetState+0x2e>
        state = osKernelReady;
 80129e8:	2301      	movs	r3, #1
 80129ea:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80129ec:	e001      	b.n	80129f2 <osKernelGetState+0x32>
        state = osKernelInactive;
 80129ee:	2300      	movs	r3, #0
 80129f0:	607b      	str	r3, [r7, #4]
      break;
 80129f2:	bf00      	nop
  }

  return (state);
 80129f4:	687b      	ldr	r3, [r7, #4]
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3708      	adds	r7, #8
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}
 80129fe:	bf00      	nop
 8012a00:	240002f0 	.word	0x240002f0

08012a04 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a0a:	f3ef 8305 	mrs	r3, IPSR
 8012a0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012a10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d10f      	bne.n	8012a36 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a16:	f3ef 8310 	mrs	r3, PRIMASK
 8012a1a:	607b      	str	r3, [r7, #4]
  return(result);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d105      	bne.n	8012a2e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012a22:	f3ef 8311 	mrs	r3, BASEPRI
 8012a26:	603b      	str	r3, [r7, #0]
  return(result);
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d007      	beq.n	8012a3e <osKernelStart+0x3a>
 8012a2e:	4b0f      	ldr	r3, [pc, #60]	; (8012a6c <osKernelStart+0x68>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	2b02      	cmp	r3, #2
 8012a34:	d103      	bne.n	8012a3e <osKernelStart+0x3a>
    stat = osErrorISR;
 8012a36:	f06f 0305 	mvn.w	r3, #5
 8012a3a:	60fb      	str	r3, [r7, #12]
 8012a3c:	e010      	b.n	8012a60 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012a3e:	4b0b      	ldr	r3, [pc, #44]	; (8012a6c <osKernelStart+0x68>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	2b01      	cmp	r3, #1
 8012a44:	d109      	bne.n	8012a5a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012a46:	f7ff ff80 	bl	801294a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012a4a:	4b08      	ldr	r3, [pc, #32]	; (8012a6c <osKernelStart+0x68>)
 8012a4c:	2202      	movs	r2, #2
 8012a4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012a50:	f001 fea2 	bl	8014798 <vTaskStartScheduler>
      stat = osOK;
 8012a54:	2300      	movs	r3, #0
 8012a56:	60fb      	str	r3, [r7, #12]
 8012a58:	e002      	b.n	8012a60 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8012a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8012a5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012a60:	68fb      	ldr	r3, [r7, #12]
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	3710      	adds	r7, #16
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}
 8012a6a:	bf00      	nop
 8012a6c:	240002f0 	.word	0x240002f0

08012a70 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b084      	sub	sp, #16
 8012a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a76:	f3ef 8305 	mrs	r3, IPSR
 8012a7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8012a7c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d10f      	bne.n	8012aa2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a82:	f3ef 8310 	mrs	r3, PRIMASK
 8012a86:	607b      	str	r3, [r7, #4]
  return(result);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d105      	bne.n	8012a9a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8012a92:	603b      	str	r3, [r7, #0]
  return(result);
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d007      	beq.n	8012aaa <osKernelGetTickCount+0x3a>
 8012a9a:	4b08      	ldr	r3, [pc, #32]	; (8012abc <osKernelGetTickCount+0x4c>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	2b02      	cmp	r3, #2
 8012aa0:	d103      	bne.n	8012aaa <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8012aa2:	f001 ff97 	bl	80149d4 <xTaskGetTickCountFromISR>
 8012aa6:	60f8      	str	r0, [r7, #12]
 8012aa8:	e002      	b.n	8012ab0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8012aaa:	f001 ff83 	bl	80149b4 <xTaskGetTickCount>
 8012aae:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8012ab0:	68fb      	ldr	r3, [r7, #12]
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3710      	adds	r7, #16
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}
 8012aba:	bf00      	nop
 8012abc:	240002f0 	.word	0x240002f0

08012ac0 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8012ac0:	b480      	push	{r7}
 8012ac2:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8012ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr
	...

08012ad4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b090      	sub	sp, #64	; 0x40
 8012ad8:	af04      	add	r7, sp, #16
 8012ada:	60f8      	str	r0, [r7, #12]
 8012adc:	60b9      	str	r1, [r7, #8]
 8012ade:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ae4:	f3ef 8305 	mrs	r3, IPSR
 8012ae8:	61fb      	str	r3, [r7, #28]
  return(result);
 8012aea:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f040 808f 	bne.w	8012c10 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012af2:	f3ef 8310 	mrs	r3, PRIMASK
 8012af6:	61bb      	str	r3, [r7, #24]
  return(result);
 8012af8:	69bb      	ldr	r3, [r7, #24]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d105      	bne.n	8012b0a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012afe:	f3ef 8311 	mrs	r3, BASEPRI
 8012b02:	617b      	str	r3, [r7, #20]
  return(result);
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d003      	beq.n	8012b12 <osThreadNew+0x3e>
 8012b0a:	4b44      	ldr	r3, [pc, #272]	; (8012c1c <osThreadNew+0x148>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	2b02      	cmp	r3, #2
 8012b10:	d07e      	beq.n	8012c10 <osThreadNew+0x13c>
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d07b      	beq.n	8012c10 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8012b18:	2380      	movs	r3, #128	; 0x80
 8012b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8012b1c:	2318      	movs	r3, #24
 8012b1e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8012b20:	2300      	movs	r3, #0
 8012b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8012b24:	f04f 33ff 	mov.w	r3, #4294967295
 8012b28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d045      	beq.n	8012bbc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d002      	beq.n	8012b3e <osThreadNew+0x6a>
        name = attr->name;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	699b      	ldr	r3, [r3, #24]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d002      	beq.n	8012b4c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	699b      	ldr	r3, [r3, #24]
 8012b4a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d008      	beq.n	8012b64 <osThreadNew+0x90>
 8012b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b54:	2b38      	cmp	r3, #56	; 0x38
 8012b56:	d805      	bhi.n	8012b64 <osThreadNew+0x90>
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	f003 0301 	and.w	r3, r3, #1
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d001      	beq.n	8012b68 <osThreadNew+0x94>
        return (NULL);
 8012b64:	2300      	movs	r3, #0
 8012b66:	e054      	b.n	8012c12 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	695b      	ldr	r3, [r3, #20]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d003      	beq.n	8012b78 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	695b      	ldr	r3, [r3, #20]
 8012b74:	089b      	lsrs	r3, r3, #2
 8012b76:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	689b      	ldr	r3, [r3, #8]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d00e      	beq.n	8012b9e <osThreadNew+0xca>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	2b5b      	cmp	r3, #91	; 0x5b
 8012b86:	d90a      	bls.n	8012b9e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d006      	beq.n	8012b9e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	695b      	ldr	r3, [r3, #20]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d002      	beq.n	8012b9e <osThreadNew+0xca>
        mem = 1;
 8012b98:	2301      	movs	r3, #1
 8012b9a:	623b      	str	r3, [r7, #32]
 8012b9c:	e010      	b.n	8012bc0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	689b      	ldr	r3, [r3, #8]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d10c      	bne.n	8012bc0 <osThreadNew+0xec>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	68db      	ldr	r3, [r3, #12]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d108      	bne.n	8012bc0 <osThreadNew+0xec>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	691b      	ldr	r3, [r3, #16]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d104      	bne.n	8012bc0 <osThreadNew+0xec>
          mem = 0;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	623b      	str	r3, [r7, #32]
 8012bba:	e001      	b.n	8012bc0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012bc0:	6a3b      	ldr	r3, [r7, #32]
 8012bc2:	2b01      	cmp	r3, #1
 8012bc4:	d110      	bne.n	8012be8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8012bca:	687a      	ldr	r2, [r7, #4]
 8012bcc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012bce:	9202      	str	r2, [sp, #8]
 8012bd0:	9301      	str	r3, [sp, #4]
 8012bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd4:	9300      	str	r3, [sp, #0]
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012bdc:	68f8      	ldr	r0, [r7, #12]
 8012bde:	f001 fb8f 	bl	8014300 <xTaskCreateStatic>
 8012be2:	4603      	mov	r3, r0
 8012be4:	613b      	str	r3, [r7, #16]
 8012be6:	e013      	b.n	8012c10 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8012be8:	6a3b      	ldr	r3, [r7, #32]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d110      	bne.n	8012c10 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf0:	b29a      	uxth	r2, r3
 8012bf2:	f107 0310 	add.w	r3, r7, #16
 8012bf6:	9301      	str	r3, [sp, #4]
 8012bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfa:	9300      	str	r3, [sp, #0]
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012c00:	68f8      	ldr	r0, [r7, #12]
 8012c02:	f001 fbd7 	bl	80143b4 <xTaskCreate>
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b01      	cmp	r3, #1
 8012c0a:	d001      	beq.n	8012c10 <osThreadNew+0x13c>
          hTask = NULL;
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012c10:	693b      	ldr	r3, [r7, #16]
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3730      	adds	r7, #48	; 0x30
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}
 8012c1a:	bf00      	nop
 8012c1c:	240002f0 	.word	0x240002f0

08012c20 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b086      	sub	sp, #24
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c28:	f3ef 8305 	mrs	r3, IPSR
 8012c2c:	613b      	str	r3, [r7, #16]
  return(result);
 8012c2e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d10f      	bne.n	8012c54 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c34:	f3ef 8310 	mrs	r3, PRIMASK
 8012c38:	60fb      	str	r3, [r7, #12]
  return(result);
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d105      	bne.n	8012c4c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012c40:	f3ef 8311 	mrs	r3, BASEPRI
 8012c44:	60bb      	str	r3, [r7, #8]
  return(result);
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d007      	beq.n	8012c5c <osDelay+0x3c>
 8012c4c:	4b0a      	ldr	r3, [pc, #40]	; (8012c78 <osDelay+0x58>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	2b02      	cmp	r3, #2
 8012c52:	d103      	bne.n	8012c5c <osDelay+0x3c>
    stat = osErrorISR;
 8012c54:	f06f 0305 	mvn.w	r3, #5
 8012c58:	617b      	str	r3, [r7, #20]
 8012c5a:	e007      	b.n	8012c6c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d002      	beq.n	8012c6c <osDelay+0x4c>
      vTaskDelay(ticks);
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f001 fd62 	bl	8014730 <vTaskDelay>
    }
  }

  return (stat);
 8012c6c:	697b      	ldr	r3, [r7, #20]
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	3718      	adds	r7, #24
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}
 8012c76:	bf00      	nop
 8012c78:	240002f0 	.word	0x240002f0

08012c7c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b088      	sub	sp, #32
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c84:	f3ef 8305 	mrs	r3, IPSR
 8012c88:	617b      	str	r3, [r7, #20]
  return(result);
 8012c8a:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d10f      	bne.n	8012cb0 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c90:	f3ef 8310 	mrs	r3, PRIMASK
 8012c94:	613b      	str	r3, [r7, #16]
  return(result);
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d105      	bne.n	8012ca8 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8012ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d007      	beq.n	8012cb8 <osDelayUntil+0x3c>
 8012ca8:	4b13      	ldr	r3, [pc, #76]	; (8012cf8 <osDelayUntil+0x7c>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	2b02      	cmp	r3, #2
 8012cae:	d103      	bne.n	8012cb8 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8012cb0:	f06f 0305 	mvn.w	r3, #5
 8012cb4:	61fb      	str	r3, [r7, #28]
 8012cb6:	e019      	b.n	8012cec <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8012cbc:	f001 fe7a 	bl	80149b4 <xTaskGetTickCount>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	687a      	ldr	r2, [r7, #4]
 8012cc8:	1ad3      	subs	r3, r2, r3
 8012cca:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8012ccc:	69bb      	ldr	r3, [r7, #24]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d009      	beq.n	8012ce6 <osDelayUntil+0x6a>
 8012cd2:	69bb      	ldr	r3, [r7, #24]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	db06      	blt.n	8012ce6 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8012cd8:	f107 0308 	add.w	r3, r7, #8
 8012cdc:	69b9      	ldr	r1, [r7, #24]
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f001 fcac 	bl	801463c <vTaskDelayUntil>
 8012ce4:	e002      	b.n	8012cec <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8012ce6:	f06f 0303 	mvn.w	r3, #3
 8012cea:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8012cec:	69fb      	ldr	r3, [r7, #28]
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3720      	adds	r7, #32
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	240002f0 	.word	0x240002f0

08012cfc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b08a      	sub	sp, #40	; 0x28
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8012d04:	2300      	movs	r3, #0
 8012d06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d08:	f3ef 8305 	mrs	r3, IPSR
 8012d0c:	613b      	str	r3, [r7, #16]
  return(result);
 8012d0e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	f040 8085 	bne.w	8012e20 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d16:	f3ef 8310 	mrs	r3, PRIMASK
 8012d1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d105      	bne.n	8012d2e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012d22:	f3ef 8311 	mrs	r3, BASEPRI
 8012d26:	60bb      	str	r3, [r7, #8]
  return(result);
 8012d28:	68bb      	ldr	r3, [r7, #8]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d003      	beq.n	8012d36 <osMutexNew+0x3a>
 8012d2e:	4b3f      	ldr	r3, [pc, #252]	; (8012e2c <osMutexNew+0x130>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	2b02      	cmp	r3, #2
 8012d34:	d074      	beq.n	8012e20 <osMutexNew+0x124>
    if (attr != NULL) {
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d003      	beq.n	8012d44 <osMutexNew+0x48>
      type = attr->attr_bits;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	623b      	str	r3, [r7, #32]
 8012d42:	e001      	b.n	8012d48 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8012d44:	2300      	movs	r3, #0
 8012d46:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8012d48:	6a3b      	ldr	r3, [r7, #32]
 8012d4a:	f003 0301 	and.w	r3, r3, #1
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d002      	beq.n	8012d58 <osMutexNew+0x5c>
      rmtx = 1U;
 8012d52:	2301      	movs	r3, #1
 8012d54:	61fb      	str	r3, [r7, #28]
 8012d56:	e001      	b.n	8012d5c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8012d5c:	6a3b      	ldr	r3, [r7, #32]
 8012d5e:	f003 0308 	and.w	r3, r3, #8
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d15c      	bne.n	8012e20 <osMutexNew+0x124>
      mem = -1;
 8012d66:	f04f 33ff 	mov.w	r3, #4294967295
 8012d6a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d015      	beq.n	8012d9e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	689b      	ldr	r3, [r3, #8]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d006      	beq.n	8012d88 <osMutexNew+0x8c>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	2b4f      	cmp	r3, #79	; 0x4f
 8012d80:	d902      	bls.n	8012d88 <osMutexNew+0x8c>
          mem = 1;
 8012d82:	2301      	movs	r3, #1
 8012d84:	61bb      	str	r3, [r7, #24]
 8012d86:	e00c      	b.n	8012da2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	689b      	ldr	r3, [r3, #8]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d108      	bne.n	8012da2 <osMutexNew+0xa6>
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	68db      	ldr	r3, [r3, #12]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d104      	bne.n	8012da2 <osMutexNew+0xa6>
            mem = 0;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	61bb      	str	r3, [r7, #24]
 8012d9c:	e001      	b.n	8012da2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8012da2:	69bb      	ldr	r3, [r7, #24]
 8012da4:	2b01      	cmp	r3, #1
 8012da6:	d112      	bne.n	8012dce <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8012da8:	69fb      	ldr	r3, [r7, #28]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d007      	beq.n	8012dbe <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	689b      	ldr	r3, [r3, #8]
 8012db2:	4619      	mov	r1, r3
 8012db4:	2004      	movs	r0, #4
 8012db6:	f000 fcac 	bl	8013712 <xQueueCreateMutexStatic>
 8012dba:	6278      	str	r0, [r7, #36]	; 0x24
 8012dbc:	e016      	b.n	8012dec <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	689b      	ldr	r3, [r3, #8]
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	2001      	movs	r0, #1
 8012dc6:	f000 fca4 	bl	8013712 <xQueueCreateMutexStatic>
 8012dca:	6278      	str	r0, [r7, #36]	; 0x24
 8012dcc:	e00e      	b.n	8012dec <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8012dce:	69bb      	ldr	r3, [r7, #24]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d10b      	bne.n	8012dec <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8012dd4:	69fb      	ldr	r3, [r7, #28]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d004      	beq.n	8012de4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8012dda:	2004      	movs	r0, #4
 8012ddc:	f000 fc81 	bl	80136e2 <xQueueCreateMutex>
 8012de0:	6278      	str	r0, [r7, #36]	; 0x24
 8012de2:	e003      	b.n	8012dec <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8012de4:	2001      	movs	r0, #1
 8012de6:	f000 fc7c 	bl	80136e2 <xQueueCreateMutex>
 8012dea:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8012dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d00c      	beq.n	8012e0c <osMutexNew+0x110>
        if (attr != NULL) {
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d003      	beq.n	8012e00 <osMutexNew+0x104>
          name = attr->name;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	617b      	str	r3, [r7, #20]
 8012dfe:	e001      	b.n	8012e04 <osMutexNew+0x108>
        } else {
          name = NULL;
 8012e00:	2300      	movs	r3, #0
 8012e02:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8012e04:	6979      	ldr	r1, [r7, #20]
 8012e06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e08:	f001 fa1e 	bl	8014248 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8012e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d006      	beq.n	8012e20 <osMutexNew+0x124>
 8012e12:	69fb      	ldr	r3, [r7, #28]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d003      	beq.n	8012e20 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8012e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e1a:	f043 0301 	orr.w	r3, r3, #1
 8012e1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8012e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3728      	adds	r7, #40	; 0x28
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	240002f0 	.word	0x240002f0

08012e30 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b088      	sub	sp, #32
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
 8012e38:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f023 0301 	bic.w	r3, r3, #1
 8012e40:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f003 0301 	and.w	r3, r3, #1
 8012e48:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e4e:	f3ef 8305 	mrs	r3, IPSR
 8012e52:	613b      	str	r3, [r7, #16]
  return(result);
 8012e54:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d10f      	bne.n	8012e7a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8012e5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d105      	bne.n	8012e72 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012e66:	f3ef 8311 	mrs	r3, BASEPRI
 8012e6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d007      	beq.n	8012e82 <osMutexAcquire+0x52>
 8012e72:	4b1d      	ldr	r3, [pc, #116]	; (8012ee8 <osMutexAcquire+0xb8>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2b02      	cmp	r3, #2
 8012e78:	d103      	bne.n	8012e82 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8012e7a:	f06f 0305 	mvn.w	r3, #5
 8012e7e:	61fb      	str	r3, [r7, #28]
 8012e80:	e02c      	b.n	8012edc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d103      	bne.n	8012e90 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8012e88:	f06f 0303 	mvn.w	r3, #3
 8012e8c:	61fb      	str	r3, [r7, #28]
 8012e8e:	e025      	b.n	8012edc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d011      	beq.n	8012eba <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8012e96:	6839      	ldr	r1, [r7, #0]
 8012e98:	69b8      	ldr	r0, [r7, #24]
 8012e9a:	f000 fc88 	bl	80137ae <xQueueTakeMutexRecursive>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	2b01      	cmp	r3, #1
 8012ea2:	d01b      	beq.n	8012edc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d003      	beq.n	8012eb2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8012eaa:	f06f 0301 	mvn.w	r3, #1
 8012eae:	61fb      	str	r3, [r7, #28]
 8012eb0:	e014      	b.n	8012edc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8012eb2:	f06f 0302 	mvn.w	r3, #2
 8012eb6:	61fb      	str	r3, [r7, #28]
 8012eb8:	e010      	b.n	8012edc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8012eba:	6839      	ldr	r1, [r7, #0]
 8012ebc:	69b8      	ldr	r0, [r7, #24]
 8012ebe:	f000 ff15 	bl	8013cec <xQueueSemaphoreTake>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	2b01      	cmp	r3, #1
 8012ec6:	d009      	beq.n	8012edc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d003      	beq.n	8012ed6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8012ece:	f06f 0301 	mvn.w	r3, #1
 8012ed2:	61fb      	str	r3, [r7, #28]
 8012ed4:	e002      	b.n	8012edc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8012ed6:	f06f 0302 	mvn.w	r3, #2
 8012eda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012edc:	69fb      	ldr	r3, [r7, #28]
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3720      	adds	r7, #32
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	240002f0 	.word	0x240002f0

08012eec <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b088      	sub	sp, #32
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f023 0301 	bic.w	r3, r3, #1
 8012efa:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f003 0301 	and.w	r3, r3, #1
 8012f02:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8012f04:	2300      	movs	r3, #0
 8012f06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f08:	f3ef 8305 	mrs	r3, IPSR
 8012f0c:	613b      	str	r3, [r7, #16]
  return(result);
 8012f0e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d10f      	bne.n	8012f34 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f14:	f3ef 8310 	mrs	r3, PRIMASK
 8012f18:	60fb      	str	r3, [r7, #12]
  return(result);
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d105      	bne.n	8012f2c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012f20:	f3ef 8311 	mrs	r3, BASEPRI
 8012f24:	60bb      	str	r3, [r7, #8]
  return(result);
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d007      	beq.n	8012f3c <osMutexRelease+0x50>
 8012f2c:	4b16      	ldr	r3, [pc, #88]	; (8012f88 <osMutexRelease+0x9c>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	2b02      	cmp	r3, #2
 8012f32:	d103      	bne.n	8012f3c <osMutexRelease+0x50>
    stat = osErrorISR;
 8012f34:	f06f 0305 	mvn.w	r3, #5
 8012f38:	61fb      	str	r3, [r7, #28]
 8012f3a:	e01f      	b.n	8012f7c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8012f3c:	69bb      	ldr	r3, [r7, #24]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d103      	bne.n	8012f4a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8012f42:	f06f 0303 	mvn.w	r3, #3
 8012f46:	61fb      	str	r3, [r7, #28]
 8012f48:	e018      	b.n	8012f7c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d009      	beq.n	8012f64 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8012f50:	69b8      	ldr	r0, [r7, #24]
 8012f52:	f000 fbf9 	bl	8013748 <xQueueGiveMutexRecursive>
 8012f56:	4603      	mov	r3, r0
 8012f58:	2b01      	cmp	r3, #1
 8012f5a:	d00f      	beq.n	8012f7c <osMutexRelease+0x90>
        stat = osErrorResource;
 8012f5c:	f06f 0302 	mvn.w	r3, #2
 8012f60:	61fb      	str	r3, [r7, #28]
 8012f62:	e00b      	b.n	8012f7c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8012f64:	2300      	movs	r3, #0
 8012f66:	2200      	movs	r2, #0
 8012f68:	2100      	movs	r1, #0
 8012f6a:	69b8      	ldr	r0, [r7, #24]
 8012f6c:	f000 fc54 	bl	8013818 <xQueueGenericSend>
 8012f70:	4603      	mov	r3, r0
 8012f72:	2b01      	cmp	r3, #1
 8012f74:	d002      	beq.n	8012f7c <osMutexRelease+0x90>
        stat = osErrorResource;
 8012f76:	f06f 0302 	mvn.w	r3, #2
 8012f7a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8012f7c:	69fb      	ldr	r3, [r7, #28]
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3720      	adds	r7, #32
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}
 8012f86:	bf00      	nop
 8012f88:	240002f0 	.word	0x240002f0

08012f8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b08c      	sub	sp, #48	; 0x30
 8012f90:	af02      	add	r7, sp, #8
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012f98:	2300      	movs	r3, #0
 8012f9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f9c:	f3ef 8305 	mrs	r3, IPSR
 8012fa0:	61bb      	str	r3, [r7, #24]
  return(result);
 8012fa2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d170      	bne.n	801308a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8012fac:	617b      	str	r3, [r7, #20]
  return(result);
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d105      	bne.n	8012fc0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8012fb8:	613b      	str	r3, [r7, #16]
  return(result);
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d003      	beq.n	8012fc8 <osMessageQueueNew+0x3c>
 8012fc0:	4b34      	ldr	r3, [pc, #208]	; (8013094 <osMessageQueueNew+0x108>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	2b02      	cmp	r3, #2
 8012fc6:	d060      	beq.n	801308a <osMessageQueueNew+0xfe>
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d05d      	beq.n	801308a <osMessageQueueNew+0xfe>
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d05a      	beq.n	801308a <osMessageQueueNew+0xfe>
    mem = -1;
 8012fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8012fd8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d029      	beq.n	8013034 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	689b      	ldr	r3, [r3, #8]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d012      	beq.n	801300e <osMessageQueueNew+0x82>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	68db      	ldr	r3, [r3, #12]
 8012fec:	2b4f      	cmp	r3, #79	; 0x4f
 8012fee:	d90e      	bls.n	801300e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d00a      	beq.n	801300e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	695a      	ldr	r2, [r3, #20]
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	68b9      	ldr	r1, [r7, #8]
 8013000:	fb01 f303 	mul.w	r3, r1, r3
 8013004:	429a      	cmp	r2, r3
 8013006:	d302      	bcc.n	801300e <osMessageQueueNew+0x82>
        mem = 1;
 8013008:	2301      	movs	r3, #1
 801300a:	623b      	str	r3, [r7, #32]
 801300c:	e014      	b.n	8013038 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	689b      	ldr	r3, [r3, #8]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d110      	bne.n	8013038 <osMessageQueueNew+0xac>
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	68db      	ldr	r3, [r3, #12]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d10c      	bne.n	8013038 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013022:	2b00      	cmp	r3, #0
 8013024:	d108      	bne.n	8013038 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	695b      	ldr	r3, [r3, #20]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d104      	bne.n	8013038 <osMessageQueueNew+0xac>
          mem = 0;
 801302e:	2300      	movs	r3, #0
 8013030:	623b      	str	r3, [r7, #32]
 8013032:	e001      	b.n	8013038 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8013034:	2300      	movs	r3, #0
 8013036:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013038:	6a3b      	ldr	r3, [r7, #32]
 801303a:	2b01      	cmp	r3, #1
 801303c:	d10c      	bne.n	8013058 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	691a      	ldr	r2, [r3, #16]
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6899      	ldr	r1, [r3, #8]
 8013046:	2300      	movs	r3, #0
 8013048:	9300      	str	r3, [sp, #0]
 801304a:	460b      	mov	r3, r1
 801304c:	68b9      	ldr	r1, [r7, #8]
 801304e:	68f8      	ldr	r0, [r7, #12]
 8013050:	f000 fa58 	bl	8013504 <xQueueGenericCreateStatic>
 8013054:	6278      	str	r0, [r7, #36]	; 0x24
 8013056:	e008      	b.n	801306a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8013058:	6a3b      	ldr	r3, [r7, #32]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d105      	bne.n	801306a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801305e:	2200      	movs	r2, #0
 8013060:	68b9      	ldr	r1, [r7, #8]
 8013062:	68f8      	ldr	r0, [r7, #12]
 8013064:	f000 fac1 	bl	80135ea <xQueueGenericCreate>
 8013068:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306c:	2b00      	cmp	r3, #0
 801306e:	d00c      	beq.n	801308a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d003      	beq.n	801307e <osMessageQueueNew+0xf2>
        name = attr->name;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	61fb      	str	r3, [r7, #28]
 801307c:	e001      	b.n	8013082 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801307e:	2300      	movs	r3, #0
 8013080:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8013082:	69f9      	ldr	r1, [r7, #28]
 8013084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013086:	f001 f8df 	bl	8014248 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801308c:	4618      	mov	r0, r3
 801308e:	3728      	adds	r7, #40	; 0x28
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}
 8013094:	240002f0 	.word	0x240002f0

08013098 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013098:	b580      	push	{r7, lr}
 801309a:	b08a      	sub	sp, #40	; 0x28
 801309c:	af00      	add	r7, sp, #0
 801309e:	60f8      	str	r0, [r7, #12]
 80130a0:	60b9      	str	r1, [r7, #8]
 80130a2:	603b      	str	r3, [r7, #0]
 80130a4:	4613      	mov	r3, r2
 80130a6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80130ac:	2300      	movs	r3, #0
 80130ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130b0:	f3ef 8305 	mrs	r3, IPSR
 80130b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80130b6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d10f      	bne.n	80130dc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130bc:	f3ef 8310 	mrs	r3, PRIMASK
 80130c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80130c2:	69bb      	ldr	r3, [r7, #24]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d105      	bne.n	80130d4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80130c8:	f3ef 8311 	mrs	r3, BASEPRI
 80130cc:	617b      	str	r3, [r7, #20]
  return(result);
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d02c      	beq.n	801312e <osMessageQueuePut+0x96>
 80130d4:	4b28      	ldr	r3, [pc, #160]	; (8013178 <osMessageQueuePut+0xe0>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	2b02      	cmp	r3, #2
 80130da:	d128      	bne.n	801312e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80130dc:	6a3b      	ldr	r3, [r7, #32]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d005      	beq.n	80130ee <osMessageQueuePut+0x56>
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d002      	beq.n	80130ee <osMessageQueuePut+0x56>
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d003      	beq.n	80130f6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80130ee:	f06f 0303 	mvn.w	r3, #3
 80130f2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80130f4:	e039      	b.n	801316a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80130f6:	2300      	movs	r3, #0
 80130f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80130fa:	f107 0210 	add.w	r2, r7, #16
 80130fe:	2300      	movs	r3, #0
 8013100:	68b9      	ldr	r1, [r7, #8]
 8013102:	6a38      	ldr	r0, [r7, #32]
 8013104:	f000 fc82 	bl	8013a0c <xQueueGenericSendFromISR>
 8013108:	4603      	mov	r3, r0
 801310a:	2b01      	cmp	r3, #1
 801310c:	d003      	beq.n	8013116 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801310e:	f06f 0302 	mvn.w	r3, #2
 8013112:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013114:	e029      	b.n	801316a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d026      	beq.n	801316a <osMessageQueuePut+0xd2>
 801311c:	4b17      	ldr	r3, [pc, #92]	; (801317c <osMessageQueuePut+0xe4>)
 801311e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013122:	601a      	str	r2, [r3, #0]
 8013124:	f3bf 8f4f 	dsb	sy
 8013128:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801312c:	e01d      	b.n	801316a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801312e:	6a3b      	ldr	r3, [r7, #32]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d002      	beq.n	801313a <osMessageQueuePut+0xa2>
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d103      	bne.n	8013142 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801313a:	f06f 0303 	mvn.w	r3, #3
 801313e:	627b      	str	r3, [r7, #36]	; 0x24
 8013140:	e014      	b.n	801316c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013142:	2300      	movs	r3, #0
 8013144:	683a      	ldr	r2, [r7, #0]
 8013146:	68b9      	ldr	r1, [r7, #8]
 8013148:	6a38      	ldr	r0, [r7, #32]
 801314a:	f000 fb65 	bl	8013818 <xQueueGenericSend>
 801314e:	4603      	mov	r3, r0
 8013150:	2b01      	cmp	r3, #1
 8013152:	d00b      	beq.n	801316c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d003      	beq.n	8013162 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801315a:	f06f 0301 	mvn.w	r3, #1
 801315e:	627b      	str	r3, [r7, #36]	; 0x24
 8013160:	e004      	b.n	801316c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8013162:	f06f 0302 	mvn.w	r3, #2
 8013166:	627b      	str	r3, [r7, #36]	; 0x24
 8013168:	e000      	b.n	801316c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801316a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801316e:	4618      	mov	r0, r3
 8013170:	3728      	adds	r7, #40	; 0x28
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}
 8013176:	bf00      	nop
 8013178:	240002f0 	.word	0x240002f0
 801317c:	e000ed04 	.word	0xe000ed04

08013180 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013180:	b580      	push	{r7, lr}
 8013182:	b08a      	sub	sp, #40	; 0x28
 8013184:	af00      	add	r7, sp, #0
 8013186:	60f8      	str	r0, [r7, #12]
 8013188:	60b9      	str	r1, [r7, #8]
 801318a:	607a      	str	r2, [r7, #4]
 801318c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013192:	2300      	movs	r3, #0
 8013194:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013196:	f3ef 8305 	mrs	r3, IPSR
 801319a:	61fb      	str	r3, [r7, #28]
  return(result);
 801319c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d10f      	bne.n	80131c2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131a2:	f3ef 8310 	mrs	r3, PRIMASK
 80131a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80131a8:	69bb      	ldr	r3, [r7, #24]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d105      	bne.n	80131ba <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80131ae:	f3ef 8311 	mrs	r3, BASEPRI
 80131b2:	617b      	str	r3, [r7, #20]
  return(result);
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d02c      	beq.n	8013214 <osMessageQueueGet+0x94>
 80131ba:	4b28      	ldr	r3, [pc, #160]	; (801325c <osMessageQueueGet+0xdc>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2b02      	cmp	r3, #2
 80131c0:	d128      	bne.n	8013214 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80131c2:	6a3b      	ldr	r3, [r7, #32]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d005      	beq.n	80131d4 <osMessageQueueGet+0x54>
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d002      	beq.n	80131d4 <osMessageQueueGet+0x54>
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d003      	beq.n	80131dc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80131d4:	f06f 0303 	mvn.w	r3, #3
 80131d8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80131da:	e038      	b.n	801324e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80131dc:	2300      	movs	r3, #0
 80131de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80131e0:	f107 0310 	add.w	r3, r7, #16
 80131e4:	461a      	mov	r2, r3
 80131e6:	68b9      	ldr	r1, [r7, #8]
 80131e8:	6a38      	ldr	r0, [r7, #32]
 80131ea:	f000 fe87 	bl	8013efc <xQueueReceiveFromISR>
 80131ee:	4603      	mov	r3, r0
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	d003      	beq.n	80131fc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80131f4:	f06f 0302 	mvn.w	r3, #2
 80131f8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80131fa:	e028      	b.n	801324e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80131fc:	693b      	ldr	r3, [r7, #16]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d025      	beq.n	801324e <osMessageQueueGet+0xce>
 8013202:	4b17      	ldr	r3, [pc, #92]	; (8013260 <osMessageQueueGet+0xe0>)
 8013204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013208:	601a      	str	r2, [r3, #0]
 801320a:	f3bf 8f4f 	dsb	sy
 801320e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013212:	e01c      	b.n	801324e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013214:	6a3b      	ldr	r3, [r7, #32]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d002      	beq.n	8013220 <osMessageQueueGet+0xa0>
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d103      	bne.n	8013228 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8013220:	f06f 0303 	mvn.w	r3, #3
 8013224:	627b      	str	r3, [r7, #36]	; 0x24
 8013226:	e013      	b.n	8013250 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013228:	683a      	ldr	r2, [r7, #0]
 801322a:	68b9      	ldr	r1, [r7, #8]
 801322c:	6a38      	ldr	r0, [r7, #32]
 801322e:	f000 fc81 	bl	8013b34 <xQueueReceive>
 8013232:	4603      	mov	r3, r0
 8013234:	2b01      	cmp	r3, #1
 8013236:	d00b      	beq.n	8013250 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d003      	beq.n	8013246 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801323e:	f06f 0301 	mvn.w	r3, #1
 8013242:	627b      	str	r3, [r7, #36]	; 0x24
 8013244:	e004      	b.n	8013250 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8013246:	f06f 0302 	mvn.w	r3, #2
 801324a:	627b      	str	r3, [r7, #36]	; 0x24
 801324c:	e000      	b.n	8013250 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801324e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013252:	4618      	mov	r0, r3
 8013254:	3728      	adds	r7, #40	; 0x28
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	240002f0 	.word	0x240002f0
 8013260:	e000ed04 	.word	0xe000ed04

08013264 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013264:	b480      	push	{r7}
 8013266:	b085      	sub	sp, #20
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	4a07      	ldr	r2, [pc, #28]	; (8013290 <vApplicationGetIdleTaskMemory+0x2c>)
 8013274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	4a06      	ldr	r2, [pc, #24]	; (8013294 <vApplicationGetIdleTaskMemory+0x30>)
 801327a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2280      	movs	r2, #128	; 0x80
 8013280:	601a      	str	r2, [r3, #0]
}
 8013282:	bf00      	nop
 8013284:	3714      	adds	r7, #20
 8013286:	46bd      	mov	sp, r7
 8013288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328c:	4770      	bx	lr
 801328e:	bf00      	nop
 8013290:	240002f4 	.word	0x240002f4
 8013294:	24000350 	.word	0x24000350

08013298 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013298:	b480      	push	{r7}
 801329a:	b085      	sub	sp, #20
 801329c:	af00      	add	r7, sp, #0
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	60b9      	str	r1, [r7, #8]
 80132a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	4a07      	ldr	r2, [pc, #28]	; (80132c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80132a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	4a06      	ldr	r2, [pc, #24]	; (80132c8 <vApplicationGetTimerTaskMemory+0x30>)
 80132ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80132b6:	601a      	str	r2, [r3, #0]
}
 80132b8:	bf00      	nop
 80132ba:	3714      	adds	r7, #20
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr
 80132c4:	24000550 	.word	0x24000550
 80132c8:	240005ac 	.word	0x240005ac

080132cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80132cc:	b480      	push	{r7}
 80132ce:	b083      	sub	sp, #12
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f103 0208 	add.w	r2, r3, #8
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f04f 32ff 	mov.w	r2, #4294967295
 80132e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f103 0208 	add.w	r2, r3, #8
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f103 0208 	add.w	r2, r3, #8
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2200      	movs	r2, #0
 80132fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013300:	bf00      	nop
 8013302:	370c      	adds	r7, #12
 8013304:	46bd      	mov	sp, r7
 8013306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330a:	4770      	bx	lr

0801330c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801330c:	b480      	push	{r7}
 801330e:	b083      	sub	sp, #12
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	2200      	movs	r2, #0
 8013318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801331a:	bf00      	nop
 801331c:	370c      	adds	r7, #12
 801331e:	46bd      	mov	sp, r7
 8013320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013324:	4770      	bx	lr

08013326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013326:	b480      	push	{r7}
 8013328:	b085      	sub	sp, #20
 801332a:	af00      	add	r7, sp, #0
 801332c:	6078      	str	r0, [r7, #4]
 801332e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	685b      	ldr	r3, [r3, #4]
 8013334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	68fa      	ldr	r2, [r7, #12]
 801333a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	689a      	ldr	r2, [r3, #8]
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	689b      	ldr	r3, [r3, #8]
 8013348:	683a      	ldr	r2, [r7, #0]
 801334a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	683a      	ldr	r2, [r7, #0]
 8013350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	687a      	ldr	r2, [r7, #4]
 8013356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	1c5a      	adds	r2, r3, #1
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	601a      	str	r2, [r3, #0]
}
 8013362:	bf00      	nop
 8013364:	3714      	adds	r7, #20
 8013366:	46bd      	mov	sp, r7
 8013368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336c:	4770      	bx	lr

0801336e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801336e:	b480      	push	{r7}
 8013370:	b085      	sub	sp, #20
 8013372:	af00      	add	r7, sp, #0
 8013374:	6078      	str	r0, [r7, #4]
 8013376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013384:	d103      	bne.n	801338e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	691b      	ldr	r3, [r3, #16]
 801338a:	60fb      	str	r3, [r7, #12]
 801338c:	e00c      	b.n	80133a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	3308      	adds	r3, #8
 8013392:	60fb      	str	r3, [r7, #12]
 8013394:	e002      	b.n	801339c <vListInsert+0x2e>
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	685b      	ldr	r3, [r3, #4]
 801339a:	60fb      	str	r3, [r7, #12]
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	685b      	ldr	r3, [r3, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	68ba      	ldr	r2, [r7, #8]
 80133a4:	429a      	cmp	r2, r3
 80133a6:	d2f6      	bcs.n	8013396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	685a      	ldr	r2, [r3, #4]
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	683a      	ldr	r2, [r7, #0]
 80133b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	68fa      	ldr	r2, [r7, #12]
 80133bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	683a      	ldr	r2, [r7, #0]
 80133c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	687a      	ldr	r2, [r7, #4]
 80133c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	1c5a      	adds	r2, r3, #1
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	601a      	str	r2, [r3, #0]
}
 80133d4:	bf00      	nop
 80133d6:	3714      	adds	r7, #20
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr

080133e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80133e0:	b480      	push	{r7}
 80133e2:	b085      	sub	sp, #20
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	691b      	ldr	r3, [r3, #16]
 80133ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	687a      	ldr	r2, [r7, #4]
 80133f4:	6892      	ldr	r2, [r2, #8]
 80133f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	689b      	ldr	r3, [r3, #8]
 80133fc:	687a      	ldr	r2, [r7, #4]
 80133fe:	6852      	ldr	r2, [r2, #4]
 8013400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	685b      	ldr	r3, [r3, #4]
 8013406:	687a      	ldr	r2, [r7, #4]
 8013408:	429a      	cmp	r2, r3
 801340a:	d103      	bne.n	8013414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	689a      	ldr	r2, [r3, #8]
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2200      	movs	r2, #0
 8013418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	1e5a      	subs	r2, r3, #1
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	681b      	ldr	r3, [r3, #0]
}
 8013428:	4618      	mov	r0, r3
 801342a:	3714      	adds	r7, #20
 801342c:	46bd      	mov	sp, r7
 801342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013432:	4770      	bx	lr

08013434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b084      	sub	sp, #16
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
 801343c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d109      	bne.n	801345c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801344c:	f383 8811 	msr	BASEPRI, r3
 8013450:	f3bf 8f6f 	isb	sy
 8013454:	f3bf 8f4f 	dsb	sy
 8013458:	60bb      	str	r3, [r7, #8]
 801345a:	e7fe      	b.n	801345a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 801345c:	f002 fc3e 	bl	8015cdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681a      	ldr	r2, [r3, #0]
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013468:	68f9      	ldr	r1, [r7, #12]
 801346a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801346c:	fb01 f303 	mul.w	r3, r1, r3
 8013470:	441a      	add	r2, r3
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	2200      	movs	r2, #0
 801347a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	681a      	ldr	r2, [r3, #0]
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801348c:	3b01      	subs	r3, #1
 801348e:	68f9      	ldr	r1, [r7, #12]
 8013490:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013492:	fb01 f303 	mul.w	r3, r1, r3
 8013496:	441a      	add	r2, r3
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	22ff      	movs	r2, #255	; 0xff
 80134a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	22ff      	movs	r2, #255	; 0xff
 80134a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d114      	bne.n	80134dc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	691b      	ldr	r3, [r3, #16]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d01a      	beq.n	80134f0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	3310      	adds	r3, #16
 80134be:	4618      	mov	r0, r3
 80134c0:	f001 fbfc 	bl	8014cbc <xTaskRemoveFromEventList>
 80134c4:	4603      	mov	r3, r0
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d012      	beq.n	80134f0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80134ca:	4b0d      	ldr	r3, [pc, #52]	; (8013500 <xQueueGenericReset+0xcc>)
 80134cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134d0:	601a      	str	r2, [r3, #0]
 80134d2:	f3bf 8f4f 	dsb	sy
 80134d6:	f3bf 8f6f 	isb	sy
 80134da:	e009      	b.n	80134f0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	3310      	adds	r3, #16
 80134e0:	4618      	mov	r0, r3
 80134e2:	f7ff fef3 	bl	80132cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	3324      	adds	r3, #36	; 0x24
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7ff feee 	bl	80132cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80134f0:	f002 fc22 	bl	8015d38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80134f4:	2301      	movs	r3, #1
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3710      	adds	r7, #16
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}
 80134fe:	bf00      	nop
 8013500:	e000ed04 	.word	0xe000ed04

08013504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013504:	b580      	push	{r7, lr}
 8013506:	b08e      	sub	sp, #56	; 0x38
 8013508:	af02      	add	r7, sp, #8
 801350a:	60f8      	str	r0, [r7, #12]
 801350c:	60b9      	str	r1, [r7, #8]
 801350e:	607a      	str	r2, [r7, #4]
 8013510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d109      	bne.n	801352c <xQueueGenericCreateStatic+0x28>
 8013518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801351c:	f383 8811 	msr	BASEPRI, r3
 8013520:	f3bf 8f6f 	isb	sy
 8013524:	f3bf 8f4f 	dsb	sy
 8013528:	62bb      	str	r3, [r7, #40]	; 0x28
 801352a:	e7fe      	b.n	801352a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d109      	bne.n	8013546 <xQueueGenericCreateStatic+0x42>
 8013532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013536:	f383 8811 	msr	BASEPRI, r3
 801353a:	f3bf 8f6f 	isb	sy
 801353e:	f3bf 8f4f 	dsb	sy
 8013542:	627b      	str	r3, [r7, #36]	; 0x24
 8013544:	e7fe      	b.n	8013544 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d002      	beq.n	8013552 <xQueueGenericCreateStatic+0x4e>
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d001      	beq.n	8013556 <xQueueGenericCreateStatic+0x52>
 8013552:	2301      	movs	r3, #1
 8013554:	e000      	b.n	8013558 <xQueueGenericCreateStatic+0x54>
 8013556:	2300      	movs	r3, #0
 8013558:	2b00      	cmp	r3, #0
 801355a:	d109      	bne.n	8013570 <xQueueGenericCreateStatic+0x6c>
 801355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013560:	f383 8811 	msr	BASEPRI, r3
 8013564:	f3bf 8f6f 	isb	sy
 8013568:	f3bf 8f4f 	dsb	sy
 801356c:	623b      	str	r3, [r7, #32]
 801356e:	e7fe      	b.n	801356e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d102      	bne.n	801357c <xQueueGenericCreateStatic+0x78>
 8013576:	68bb      	ldr	r3, [r7, #8]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d101      	bne.n	8013580 <xQueueGenericCreateStatic+0x7c>
 801357c:	2301      	movs	r3, #1
 801357e:	e000      	b.n	8013582 <xQueueGenericCreateStatic+0x7e>
 8013580:	2300      	movs	r3, #0
 8013582:	2b00      	cmp	r3, #0
 8013584:	d109      	bne.n	801359a <xQueueGenericCreateStatic+0x96>
 8013586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801358a:	f383 8811 	msr	BASEPRI, r3
 801358e:	f3bf 8f6f 	isb	sy
 8013592:	f3bf 8f4f 	dsb	sy
 8013596:	61fb      	str	r3, [r7, #28]
 8013598:	e7fe      	b.n	8013598 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801359a:	2350      	movs	r3, #80	; 0x50
 801359c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801359e:	697b      	ldr	r3, [r7, #20]
 80135a0:	2b50      	cmp	r3, #80	; 0x50
 80135a2:	d009      	beq.n	80135b8 <xQueueGenericCreateStatic+0xb4>
 80135a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a8:	f383 8811 	msr	BASEPRI, r3
 80135ac:	f3bf 8f6f 	isb	sy
 80135b0:	f3bf 8f4f 	dsb	sy
 80135b4:	61bb      	str	r3, [r7, #24]
 80135b6:	e7fe      	b.n	80135b6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80135b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80135be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d00d      	beq.n	80135e0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80135c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135c6:	2201      	movs	r2, #1
 80135c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80135cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80135d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d2:	9300      	str	r3, [sp, #0]
 80135d4:	4613      	mov	r3, r2
 80135d6:	687a      	ldr	r2, [r7, #4]
 80135d8:	68b9      	ldr	r1, [r7, #8]
 80135da:	68f8      	ldr	r0, [r7, #12]
 80135dc:	f000 f844 	bl	8013668 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80135e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3730      	adds	r7, #48	; 0x30
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}

080135ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80135ea:	b580      	push	{r7, lr}
 80135ec:	b08a      	sub	sp, #40	; 0x28
 80135ee:	af02      	add	r7, sp, #8
 80135f0:	60f8      	str	r0, [r7, #12]
 80135f2:	60b9      	str	r1, [r7, #8]
 80135f4:	4613      	mov	r3, r2
 80135f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d109      	bne.n	8013612 <xQueueGenericCreate+0x28>
 80135fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013602:	f383 8811 	msr	BASEPRI, r3
 8013606:	f3bf 8f6f 	isb	sy
 801360a:	f3bf 8f4f 	dsb	sy
 801360e:	613b      	str	r3, [r7, #16]
 8013610:	e7fe      	b.n	8013610 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d102      	bne.n	801361e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8013618:	2300      	movs	r3, #0
 801361a:	61fb      	str	r3, [r7, #28]
 801361c:	e004      	b.n	8013628 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	68ba      	ldr	r2, [r7, #8]
 8013622:	fb02 f303 	mul.w	r3, r2, r3
 8013626:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013628:	69fb      	ldr	r3, [r7, #28]
 801362a:	3350      	adds	r3, #80	; 0x50
 801362c:	4618      	mov	r0, r3
 801362e:	f002 fc6f 	bl	8015f10 <pvPortMalloc>
 8013632:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013634:	69bb      	ldr	r3, [r7, #24]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d011      	beq.n	801365e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801363a:	69bb      	ldr	r3, [r7, #24]
 801363c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	3350      	adds	r3, #80	; 0x50
 8013642:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013644:	69bb      	ldr	r3, [r7, #24]
 8013646:	2200      	movs	r2, #0
 8013648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801364c:	79fa      	ldrb	r2, [r7, #7]
 801364e:	69bb      	ldr	r3, [r7, #24]
 8013650:	9300      	str	r3, [sp, #0]
 8013652:	4613      	mov	r3, r2
 8013654:	697a      	ldr	r2, [r7, #20]
 8013656:	68b9      	ldr	r1, [r7, #8]
 8013658:	68f8      	ldr	r0, [r7, #12]
 801365a:	f000 f805 	bl	8013668 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801365e:	69bb      	ldr	r3, [r7, #24]
	}
 8013660:	4618      	mov	r0, r3
 8013662:	3720      	adds	r7, #32
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b084      	sub	sp, #16
 801366c:	af00      	add	r7, sp, #0
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
 8013674:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d103      	bne.n	8013684 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801367c:	69bb      	ldr	r3, [r7, #24]
 801367e:	69ba      	ldr	r2, [r7, #24]
 8013680:	601a      	str	r2, [r3, #0]
 8013682:	e002      	b.n	801368a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	687a      	ldr	r2, [r7, #4]
 8013688:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801368a:	69bb      	ldr	r3, [r7, #24]
 801368c:	68fa      	ldr	r2, [r7, #12]
 801368e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013690:	69bb      	ldr	r3, [r7, #24]
 8013692:	68ba      	ldr	r2, [r7, #8]
 8013694:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013696:	2101      	movs	r1, #1
 8013698:	69b8      	ldr	r0, [r7, #24]
 801369a:	f7ff fecb 	bl	8013434 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801369e:	69bb      	ldr	r3, [r7, #24]
 80136a0:	78fa      	ldrb	r2, [r7, #3]
 80136a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80136a6:	bf00      	nop
 80136a8:	3710      	adds	r7, #16
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}

080136ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80136ae:	b580      	push	{r7, lr}
 80136b0:	b082      	sub	sp, #8
 80136b2:	af00      	add	r7, sp, #0
 80136b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d00e      	beq.n	80136da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2200      	movs	r2, #0
 80136c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	2200      	movs	r2, #0
 80136c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2200      	movs	r2, #0
 80136cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80136ce:	2300      	movs	r3, #0
 80136d0:	2200      	movs	r2, #0
 80136d2:	2100      	movs	r1, #0
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	f000 f89f 	bl	8013818 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80136da:	bf00      	nop
 80136dc:	3708      	adds	r7, #8
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}

080136e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80136e2:	b580      	push	{r7, lr}
 80136e4:	b086      	sub	sp, #24
 80136e6:	af00      	add	r7, sp, #0
 80136e8:	4603      	mov	r3, r0
 80136ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80136ec:	2301      	movs	r3, #1
 80136ee:	617b      	str	r3, [r7, #20]
 80136f0:	2300      	movs	r3, #0
 80136f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80136f4:	79fb      	ldrb	r3, [r7, #7]
 80136f6:	461a      	mov	r2, r3
 80136f8:	6939      	ldr	r1, [r7, #16]
 80136fa:	6978      	ldr	r0, [r7, #20]
 80136fc:	f7ff ff75 	bl	80135ea <xQueueGenericCreate>
 8013700:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013702:	68f8      	ldr	r0, [r7, #12]
 8013704:	f7ff ffd3 	bl	80136ae <prvInitialiseMutex>

		return xNewQueue;
 8013708:	68fb      	ldr	r3, [r7, #12]
	}
 801370a:	4618      	mov	r0, r3
 801370c:	3718      	adds	r7, #24
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}

08013712 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013712:	b580      	push	{r7, lr}
 8013714:	b088      	sub	sp, #32
 8013716:	af02      	add	r7, sp, #8
 8013718:	4603      	mov	r3, r0
 801371a:	6039      	str	r1, [r7, #0]
 801371c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801371e:	2301      	movs	r3, #1
 8013720:	617b      	str	r3, [r7, #20]
 8013722:	2300      	movs	r3, #0
 8013724:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013726:	79fb      	ldrb	r3, [r7, #7]
 8013728:	9300      	str	r3, [sp, #0]
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	2200      	movs	r2, #0
 801372e:	6939      	ldr	r1, [r7, #16]
 8013730:	6978      	ldr	r0, [r7, #20]
 8013732:	f7ff fee7 	bl	8013504 <xQueueGenericCreateStatic>
 8013736:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013738:	68f8      	ldr	r0, [r7, #12]
 801373a:	f7ff ffb8 	bl	80136ae <prvInitialiseMutex>

		return xNewQueue;
 801373e:	68fb      	ldr	r3, [r7, #12]
	}
 8013740:	4618      	mov	r0, r3
 8013742:	3718      	adds	r7, #24
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}

08013748 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8013748:	b590      	push	{r4, r7, lr}
 801374a:	b087      	sub	sp, #28
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d109      	bne.n	801376e <xQueueGiveMutexRecursive+0x26>
 801375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801375e:	f383 8811 	msr	BASEPRI, r3
 8013762:	f3bf 8f6f 	isb	sy
 8013766:	f3bf 8f4f 	dsb	sy
 801376a:	60fb      	str	r3, [r7, #12]
 801376c:	e7fe      	b.n	801376c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	689c      	ldr	r4, [r3, #8]
 8013772:	f001 fc59 	bl	8015028 <xTaskGetCurrentTaskHandle>
 8013776:	4603      	mov	r3, r0
 8013778:	429c      	cmp	r4, r3
 801377a:	d111      	bne.n	80137a0 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	68db      	ldr	r3, [r3, #12]
 8013780:	1e5a      	subs	r2, r3, #1
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	68db      	ldr	r3, [r3, #12]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d105      	bne.n	801379a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801378e:	2300      	movs	r3, #0
 8013790:	2200      	movs	r2, #0
 8013792:	2100      	movs	r1, #0
 8013794:	6938      	ldr	r0, [r7, #16]
 8013796:	f000 f83f 	bl	8013818 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801379a:	2301      	movs	r3, #1
 801379c:	617b      	str	r3, [r7, #20]
 801379e:	e001      	b.n	80137a4 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80137a0:	2300      	movs	r3, #0
 80137a2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80137a4:	697b      	ldr	r3, [r7, #20]
	}
 80137a6:	4618      	mov	r0, r3
 80137a8:	371c      	adds	r7, #28
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd90      	pop	{r4, r7, pc}

080137ae <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80137ae:	b590      	push	{r4, r7, lr}
 80137b0:	b087      	sub	sp, #28
 80137b2:	af00      	add	r7, sp, #0
 80137b4:	6078      	str	r0, [r7, #4]
 80137b6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80137bc:	693b      	ldr	r3, [r7, #16]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d109      	bne.n	80137d6 <xQueueTakeMutexRecursive+0x28>
 80137c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c6:	f383 8811 	msr	BASEPRI, r3
 80137ca:	f3bf 8f6f 	isb	sy
 80137ce:	f3bf 8f4f 	dsb	sy
 80137d2:	60fb      	str	r3, [r7, #12]
 80137d4:	e7fe      	b.n	80137d4 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	689c      	ldr	r4, [r3, #8]
 80137da:	f001 fc25 	bl	8015028 <xTaskGetCurrentTaskHandle>
 80137de:	4603      	mov	r3, r0
 80137e0:	429c      	cmp	r4, r3
 80137e2:	d107      	bne.n	80137f4 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80137e4:	693b      	ldr	r3, [r7, #16]
 80137e6:	68db      	ldr	r3, [r3, #12]
 80137e8:	1c5a      	adds	r2, r3, #1
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80137ee:	2301      	movs	r3, #1
 80137f0:	617b      	str	r3, [r7, #20]
 80137f2:	e00c      	b.n	801380e <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80137f4:	6839      	ldr	r1, [r7, #0]
 80137f6:	6938      	ldr	r0, [r7, #16]
 80137f8:	f000 fa78 	bl	8013cec <xQueueSemaphoreTake>
 80137fc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d004      	beq.n	801380e <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	68db      	ldr	r3, [r3, #12]
 8013808:	1c5a      	adds	r2, r3, #1
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801380e:	697b      	ldr	r3, [r7, #20]
	}
 8013810:	4618      	mov	r0, r3
 8013812:	371c      	adds	r7, #28
 8013814:	46bd      	mov	sp, r7
 8013816:	bd90      	pop	{r4, r7, pc}

08013818 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b08e      	sub	sp, #56	; 0x38
 801381c:	af00      	add	r7, sp, #0
 801381e:	60f8      	str	r0, [r7, #12]
 8013820:	60b9      	str	r1, [r7, #8]
 8013822:	607a      	str	r2, [r7, #4]
 8013824:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013826:	2300      	movs	r3, #0
 8013828:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013830:	2b00      	cmp	r3, #0
 8013832:	d109      	bne.n	8013848 <xQueueGenericSend+0x30>
 8013834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013838:	f383 8811 	msr	BASEPRI, r3
 801383c:	f3bf 8f6f 	isb	sy
 8013840:	f3bf 8f4f 	dsb	sy
 8013844:	62bb      	str	r3, [r7, #40]	; 0x28
 8013846:	e7fe      	b.n	8013846 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d103      	bne.n	8013856 <xQueueGenericSend+0x3e>
 801384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013852:	2b00      	cmp	r3, #0
 8013854:	d101      	bne.n	801385a <xQueueGenericSend+0x42>
 8013856:	2301      	movs	r3, #1
 8013858:	e000      	b.n	801385c <xQueueGenericSend+0x44>
 801385a:	2300      	movs	r3, #0
 801385c:	2b00      	cmp	r3, #0
 801385e:	d109      	bne.n	8013874 <xQueueGenericSend+0x5c>
 8013860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013864:	f383 8811 	msr	BASEPRI, r3
 8013868:	f3bf 8f6f 	isb	sy
 801386c:	f3bf 8f4f 	dsb	sy
 8013870:	627b      	str	r3, [r7, #36]	; 0x24
 8013872:	e7fe      	b.n	8013872 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	2b02      	cmp	r3, #2
 8013878:	d103      	bne.n	8013882 <xQueueGenericSend+0x6a>
 801387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801387e:	2b01      	cmp	r3, #1
 8013880:	d101      	bne.n	8013886 <xQueueGenericSend+0x6e>
 8013882:	2301      	movs	r3, #1
 8013884:	e000      	b.n	8013888 <xQueueGenericSend+0x70>
 8013886:	2300      	movs	r3, #0
 8013888:	2b00      	cmp	r3, #0
 801388a:	d109      	bne.n	80138a0 <xQueueGenericSend+0x88>
 801388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013890:	f383 8811 	msr	BASEPRI, r3
 8013894:	f3bf 8f6f 	isb	sy
 8013898:	f3bf 8f4f 	dsb	sy
 801389c:	623b      	str	r3, [r7, #32]
 801389e:	e7fe      	b.n	801389e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80138a0:	f001 fbd2 	bl	8015048 <xTaskGetSchedulerState>
 80138a4:	4603      	mov	r3, r0
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d102      	bne.n	80138b0 <xQueueGenericSend+0x98>
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d101      	bne.n	80138b4 <xQueueGenericSend+0x9c>
 80138b0:	2301      	movs	r3, #1
 80138b2:	e000      	b.n	80138b6 <xQueueGenericSend+0x9e>
 80138b4:	2300      	movs	r3, #0
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d109      	bne.n	80138ce <xQueueGenericSend+0xb6>
 80138ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138be:	f383 8811 	msr	BASEPRI, r3
 80138c2:	f3bf 8f6f 	isb	sy
 80138c6:	f3bf 8f4f 	dsb	sy
 80138ca:	61fb      	str	r3, [r7, #28]
 80138cc:	e7fe      	b.n	80138cc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80138ce:	f002 fa05 	bl	8015cdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80138d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138da:	429a      	cmp	r2, r3
 80138dc:	d302      	bcc.n	80138e4 <xQueueGenericSend+0xcc>
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	2b02      	cmp	r3, #2
 80138e2:	d129      	bne.n	8013938 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80138e4:	683a      	ldr	r2, [r7, #0]
 80138e6:	68b9      	ldr	r1, [r7, #8]
 80138e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138ea:	f000 fb9c 	bl	8014026 <prvCopyDataToQueue>
 80138ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d010      	beq.n	801391a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80138f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138fa:	3324      	adds	r3, #36	; 0x24
 80138fc:	4618      	mov	r0, r3
 80138fe:	f001 f9dd 	bl	8014cbc <xTaskRemoveFromEventList>
 8013902:	4603      	mov	r3, r0
 8013904:	2b00      	cmp	r3, #0
 8013906:	d013      	beq.n	8013930 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013908:	4b3f      	ldr	r3, [pc, #252]	; (8013a08 <xQueueGenericSend+0x1f0>)
 801390a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801390e:	601a      	str	r2, [r3, #0]
 8013910:	f3bf 8f4f 	dsb	sy
 8013914:	f3bf 8f6f 	isb	sy
 8013918:	e00a      	b.n	8013930 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801391c:	2b00      	cmp	r3, #0
 801391e:	d007      	beq.n	8013930 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013920:	4b39      	ldr	r3, [pc, #228]	; (8013a08 <xQueueGenericSend+0x1f0>)
 8013922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013926:	601a      	str	r2, [r3, #0]
 8013928:	f3bf 8f4f 	dsb	sy
 801392c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013930:	f002 fa02 	bl	8015d38 <vPortExitCritical>
				return pdPASS;
 8013934:	2301      	movs	r3, #1
 8013936:	e063      	b.n	8013a00 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d103      	bne.n	8013946 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801393e:	f002 f9fb 	bl	8015d38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013942:	2300      	movs	r3, #0
 8013944:	e05c      	b.n	8013a00 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013948:	2b00      	cmp	r3, #0
 801394a:	d106      	bne.n	801395a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801394c:	f107 0314 	add.w	r3, r7, #20
 8013950:	4618      	mov	r0, r3
 8013952:	f001 fa15 	bl	8014d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013956:	2301      	movs	r3, #1
 8013958:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801395a:	f002 f9ed 	bl	8015d38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801395e:	f000 ff7f 	bl	8014860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013962:	f002 f9bb 	bl	8015cdc <vPortEnterCritical>
 8013966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801396c:	b25b      	sxtb	r3, r3
 801396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013972:	d103      	bne.n	801397c <xQueueGenericSend+0x164>
 8013974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013976:	2200      	movs	r2, #0
 8013978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013982:	b25b      	sxtb	r3, r3
 8013984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013988:	d103      	bne.n	8013992 <xQueueGenericSend+0x17a>
 801398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801398c:	2200      	movs	r2, #0
 801398e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013992:	f002 f9d1 	bl	8015d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013996:	1d3a      	adds	r2, r7, #4
 8013998:	f107 0314 	add.w	r3, r7, #20
 801399c:	4611      	mov	r1, r2
 801399e:	4618      	mov	r0, r3
 80139a0:	f001 fa04 	bl	8014dac <xTaskCheckForTimeOut>
 80139a4:	4603      	mov	r3, r0
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d124      	bne.n	80139f4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80139aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ac:	f000 fc33 	bl	8014216 <prvIsQueueFull>
 80139b0:	4603      	mov	r3, r0
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d018      	beq.n	80139e8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80139b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b8:	3310      	adds	r3, #16
 80139ba:	687a      	ldr	r2, [r7, #4]
 80139bc:	4611      	mov	r1, r2
 80139be:	4618      	mov	r0, r3
 80139c0:	f001 f92e 	bl	8014c20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80139c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139c6:	f000 fbbe 	bl	8014146 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80139ca:	f000 ff57 	bl	801487c <xTaskResumeAll>
 80139ce:	4603      	mov	r3, r0
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	f47f af7c 	bne.w	80138ce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80139d6:	4b0c      	ldr	r3, [pc, #48]	; (8013a08 <xQueueGenericSend+0x1f0>)
 80139d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139dc:	601a      	str	r2, [r3, #0]
 80139de:	f3bf 8f4f 	dsb	sy
 80139e2:	f3bf 8f6f 	isb	sy
 80139e6:	e772      	b.n	80138ce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80139e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ea:	f000 fbac 	bl	8014146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80139ee:	f000 ff45 	bl	801487c <xTaskResumeAll>
 80139f2:	e76c      	b.n	80138ce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80139f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139f6:	f000 fba6 	bl	8014146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80139fa:	f000 ff3f 	bl	801487c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80139fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013a00:	4618      	mov	r0, r3
 8013a02:	3738      	adds	r7, #56	; 0x38
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	e000ed04 	.word	0xe000ed04

08013a0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b08e      	sub	sp, #56	; 0x38
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	60f8      	str	r0, [r7, #12]
 8013a14:	60b9      	str	r1, [r7, #8]
 8013a16:	607a      	str	r2, [r7, #4]
 8013a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d109      	bne.n	8013a38 <xQueueGenericSendFromISR+0x2c>
 8013a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a28:	f383 8811 	msr	BASEPRI, r3
 8013a2c:	f3bf 8f6f 	isb	sy
 8013a30:	f3bf 8f4f 	dsb	sy
 8013a34:	627b      	str	r3, [r7, #36]	; 0x24
 8013a36:	e7fe      	b.n	8013a36 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a38:	68bb      	ldr	r3, [r7, #8]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d103      	bne.n	8013a46 <xQueueGenericSendFromISR+0x3a>
 8013a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d101      	bne.n	8013a4a <xQueueGenericSendFromISR+0x3e>
 8013a46:	2301      	movs	r3, #1
 8013a48:	e000      	b.n	8013a4c <xQueueGenericSendFromISR+0x40>
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d109      	bne.n	8013a64 <xQueueGenericSendFromISR+0x58>
 8013a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a54:	f383 8811 	msr	BASEPRI, r3
 8013a58:	f3bf 8f6f 	isb	sy
 8013a5c:	f3bf 8f4f 	dsb	sy
 8013a60:	623b      	str	r3, [r7, #32]
 8013a62:	e7fe      	b.n	8013a62 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	2b02      	cmp	r3, #2
 8013a68:	d103      	bne.n	8013a72 <xQueueGenericSendFromISR+0x66>
 8013a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d101      	bne.n	8013a76 <xQueueGenericSendFromISR+0x6a>
 8013a72:	2301      	movs	r3, #1
 8013a74:	e000      	b.n	8013a78 <xQueueGenericSendFromISR+0x6c>
 8013a76:	2300      	movs	r3, #0
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d109      	bne.n	8013a90 <xQueueGenericSendFromISR+0x84>
 8013a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a80:	f383 8811 	msr	BASEPRI, r3
 8013a84:	f3bf 8f6f 	isb	sy
 8013a88:	f3bf 8f4f 	dsb	sy
 8013a8c:	61fb      	str	r3, [r7, #28]
 8013a8e:	e7fe      	b.n	8013a8e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a90:	f002 fa00 	bl	8015e94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013a94:	f3ef 8211 	mrs	r2, BASEPRI
 8013a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9c:	f383 8811 	msr	BASEPRI, r3
 8013aa0:	f3bf 8f6f 	isb	sy
 8013aa4:	f3bf 8f4f 	dsb	sy
 8013aa8:	61ba      	str	r2, [r7, #24]
 8013aaa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013aac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d302      	bcc.n	8013ac2 <xQueueGenericSendFromISR+0xb6>
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	2b02      	cmp	r3, #2
 8013ac0:	d12c      	bne.n	8013b1c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013acc:	683a      	ldr	r2, [r7, #0]
 8013ace:	68b9      	ldr	r1, [r7, #8]
 8013ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ad2:	f000 faa8 	bl	8014026 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013ad6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ade:	d112      	bne.n	8013b06 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d016      	beq.n	8013b16 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aea:	3324      	adds	r3, #36	; 0x24
 8013aec:	4618      	mov	r0, r3
 8013aee:	f001 f8e5 	bl	8014cbc <xTaskRemoveFromEventList>
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d00e      	beq.n	8013b16 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d00b      	beq.n	8013b16 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	2201      	movs	r2, #1
 8013b02:	601a      	str	r2, [r3, #0]
 8013b04:	e007      	b.n	8013b16 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013b06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013b0a:	3301      	adds	r3, #1
 8013b0c:	b2db      	uxtb	r3, r3
 8013b0e:	b25a      	sxtb	r2, r3
 8013b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013b16:	2301      	movs	r3, #1
 8013b18:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8013b1a:	e001      	b.n	8013b20 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8013b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b22:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3738      	adds	r7, #56	; 0x38
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}

08013b34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b08c      	sub	sp, #48	; 0x30
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	60f8      	str	r0, [r7, #12]
 8013b3c:	60b9      	str	r1, [r7, #8]
 8013b3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013b40:	2300      	movs	r3, #0
 8013b42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d109      	bne.n	8013b62 <xQueueReceive+0x2e>
	__asm volatile
 8013b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b52:	f383 8811 	msr	BASEPRI, r3
 8013b56:	f3bf 8f6f 	isb	sy
 8013b5a:	f3bf 8f4f 	dsb	sy
 8013b5e:	623b      	str	r3, [r7, #32]
 8013b60:	e7fe      	b.n	8013b60 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d103      	bne.n	8013b70 <xQueueReceive+0x3c>
 8013b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d101      	bne.n	8013b74 <xQueueReceive+0x40>
 8013b70:	2301      	movs	r3, #1
 8013b72:	e000      	b.n	8013b76 <xQueueReceive+0x42>
 8013b74:	2300      	movs	r3, #0
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d109      	bne.n	8013b8e <xQueueReceive+0x5a>
 8013b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b7e:	f383 8811 	msr	BASEPRI, r3
 8013b82:	f3bf 8f6f 	isb	sy
 8013b86:	f3bf 8f4f 	dsb	sy
 8013b8a:	61fb      	str	r3, [r7, #28]
 8013b8c:	e7fe      	b.n	8013b8c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013b8e:	f001 fa5b 	bl	8015048 <xTaskGetSchedulerState>
 8013b92:	4603      	mov	r3, r0
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d102      	bne.n	8013b9e <xQueueReceive+0x6a>
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d101      	bne.n	8013ba2 <xQueueReceive+0x6e>
 8013b9e:	2301      	movs	r3, #1
 8013ba0:	e000      	b.n	8013ba4 <xQueueReceive+0x70>
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d109      	bne.n	8013bbc <xQueueReceive+0x88>
 8013ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bac:	f383 8811 	msr	BASEPRI, r3
 8013bb0:	f3bf 8f6f 	isb	sy
 8013bb4:	f3bf 8f4f 	dsb	sy
 8013bb8:	61bb      	str	r3, [r7, #24]
 8013bba:	e7fe      	b.n	8013bba <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013bbc:	f002 f88e 	bl	8015cdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bc4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d01f      	beq.n	8013c0c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013bcc:	68b9      	ldr	r1, [r7, #8]
 8013bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013bd0:	f000 fa93 	bl	80140fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd6:	1e5a      	subs	r2, r3, #1
 8013bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bda:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bde:	691b      	ldr	r3, [r3, #16]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d00f      	beq.n	8013c04 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be6:	3310      	adds	r3, #16
 8013be8:	4618      	mov	r0, r3
 8013bea:	f001 f867 	bl	8014cbc <xTaskRemoveFromEventList>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d007      	beq.n	8013c04 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013bf4:	4b3c      	ldr	r3, [pc, #240]	; (8013ce8 <xQueueReceive+0x1b4>)
 8013bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bfa:	601a      	str	r2, [r3, #0]
 8013bfc:	f3bf 8f4f 	dsb	sy
 8013c00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013c04:	f002 f898 	bl	8015d38 <vPortExitCritical>
				return pdPASS;
 8013c08:	2301      	movs	r3, #1
 8013c0a:	e069      	b.n	8013ce0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d103      	bne.n	8013c1a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013c12:	f002 f891 	bl	8015d38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013c16:	2300      	movs	r3, #0
 8013c18:	e062      	b.n	8013ce0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d106      	bne.n	8013c2e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013c20:	f107 0310 	add.w	r3, r7, #16
 8013c24:	4618      	mov	r0, r3
 8013c26:	f001 f8ab 	bl	8014d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013c2a:	2301      	movs	r3, #1
 8013c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013c2e:	f002 f883 	bl	8015d38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013c32:	f000 fe15 	bl	8014860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013c36:	f002 f851 	bl	8015cdc <vPortEnterCritical>
 8013c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c40:	b25b      	sxtb	r3, r3
 8013c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c46:	d103      	bne.n	8013c50 <xQueueReceive+0x11c>
 8013c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c56:	b25b      	sxtb	r3, r3
 8013c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c5c:	d103      	bne.n	8013c66 <xQueueReceive+0x132>
 8013c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c60:	2200      	movs	r2, #0
 8013c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013c66:	f002 f867 	bl	8015d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013c6a:	1d3a      	adds	r2, r7, #4
 8013c6c:	f107 0310 	add.w	r3, r7, #16
 8013c70:	4611      	mov	r1, r2
 8013c72:	4618      	mov	r0, r3
 8013c74:	f001 f89a 	bl	8014dac <xTaskCheckForTimeOut>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d123      	bne.n	8013cc6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c80:	f000 fab3 	bl	80141ea <prvIsQueueEmpty>
 8013c84:	4603      	mov	r3, r0
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d017      	beq.n	8013cba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c8c:	3324      	adds	r3, #36	; 0x24
 8013c8e:	687a      	ldr	r2, [r7, #4]
 8013c90:	4611      	mov	r1, r2
 8013c92:	4618      	mov	r0, r3
 8013c94:	f000 ffc4 	bl	8014c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c9a:	f000 fa54 	bl	8014146 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013c9e:	f000 fded 	bl	801487c <xTaskResumeAll>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d189      	bne.n	8013bbc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8013ca8:	4b0f      	ldr	r3, [pc, #60]	; (8013ce8 <xQueueReceive+0x1b4>)
 8013caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cae:	601a      	str	r2, [r3, #0]
 8013cb0:	f3bf 8f4f 	dsb	sy
 8013cb4:	f3bf 8f6f 	isb	sy
 8013cb8:	e780      	b.n	8013bbc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cbc:	f000 fa43 	bl	8014146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013cc0:	f000 fddc 	bl	801487c <xTaskResumeAll>
 8013cc4:	e77a      	b.n	8013bbc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cc8:	f000 fa3d 	bl	8014146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013ccc:	f000 fdd6 	bl	801487c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cd2:	f000 fa8a 	bl	80141ea <prvIsQueueEmpty>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	f43f af6f 	beq.w	8013bbc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013cde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3730      	adds	r7, #48	; 0x30
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	e000ed04 	.word	0xe000ed04

08013cec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b08e      	sub	sp, #56	; 0x38
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d109      	bne.n	8013d1c <xQueueSemaphoreTake+0x30>
 8013d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d0c:	f383 8811 	msr	BASEPRI, r3
 8013d10:	f3bf 8f6f 	isb	sy
 8013d14:	f3bf 8f4f 	dsb	sy
 8013d18:	623b      	str	r3, [r7, #32]
 8013d1a:	e7fe      	b.n	8013d1a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d009      	beq.n	8013d38 <xQueueSemaphoreTake+0x4c>
 8013d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d28:	f383 8811 	msr	BASEPRI, r3
 8013d2c:	f3bf 8f6f 	isb	sy
 8013d30:	f3bf 8f4f 	dsb	sy
 8013d34:	61fb      	str	r3, [r7, #28]
 8013d36:	e7fe      	b.n	8013d36 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013d38:	f001 f986 	bl	8015048 <xTaskGetSchedulerState>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d102      	bne.n	8013d48 <xQueueSemaphoreTake+0x5c>
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d101      	bne.n	8013d4c <xQueueSemaphoreTake+0x60>
 8013d48:	2301      	movs	r3, #1
 8013d4a:	e000      	b.n	8013d4e <xQueueSemaphoreTake+0x62>
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d109      	bne.n	8013d66 <xQueueSemaphoreTake+0x7a>
 8013d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d56:	f383 8811 	msr	BASEPRI, r3
 8013d5a:	f3bf 8f6f 	isb	sy
 8013d5e:	f3bf 8f4f 	dsb	sy
 8013d62:	61bb      	str	r3, [r7, #24]
 8013d64:	e7fe      	b.n	8013d64 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013d66:	f001 ffb9 	bl	8015cdc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d6e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d024      	beq.n	8013dc0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d78:	1e5a      	subs	r2, r3, #1
 8013d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d7c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d104      	bne.n	8013d90 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013d86:	f001 fad1 	bl	801532c <pvTaskIncrementMutexHeldCount>
 8013d8a:	4602      	mov	r2, r0
 8013d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d8e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d92:	691b      	ldr	r3, [r3, #16]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d00f      	beq.n	8013db8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d9a:	3310      	adds	r3, #16
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f000 ff8d 	bl	8014cbc <xTaskRemoveFromEventList>
 8013da2:	4603      	mov	r3, r0
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d007      	beq.n	8013db8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013da8:	4b53      	ldr	r3, [pc, #332]	; (8013ef8 <xQueueSemaphoreTake+0x20c>)
 8013daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dae:	601a      	str	r2, [r3, #0]
 8013db0:	f3bf 8f4f 	dsb	sy
 8013db4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013db8:	f001 ffbe 	bl	8015d38 <vPortExitCritical>
				return pdPASS;
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	e096      	b.n	8013eee <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d110      	bne.n	8013de8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d009      	beq.n	8013de0 <xQueueSemaphoreTake+0xf4>
 8013dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dd0:	f383 8811 	msr	BASEPRI, r3
 8013dd4:	f3bf 8f6f 	isb	sy
 8013dd8:	f3bf 8f4f 	dsb	sy
 8013ddc:	617b      	str	r3, [r7, #20]
 8013dde:	e7fe      	b.n	8013dde <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013de0:	f001 ffaa 	bl	8015d38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013de4:	2300      	movs	r3, #0
 8013de6:	e082      	b.n	8013eee <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d106      	bne.n	8013dfc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013dee:	f107 030c 	add.w	r3, r7, #12
 8013df2:	4618      	mov	r0, r3
 8013df4:	f000 ffc4 	bl	8014d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013df8:	2301      	movs	r3, #1
 8013dfa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013dfc:	f001 ff9c 	bl	8015d38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013e00:	f000 fd2e 	bl	8014860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013e04:	f001 ff6a 	bl	8015cdc <vPortEnterCritical>
 8013e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e0e:	b25b      	sxtb	r3, r3
 8013e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e14:	d103      	bne.n	8013e1e <xQueueSemaphoreTake+0x132>
 8013e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e18:	2200      	movs	r2, #0
 8013e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013e24:	b25b      	sxtb	r3, r3
 8013e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e2a:	d103      	bne.n	8013e34 <xQueueSemaphoreTake+0x148>
 8013e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2e:	2200      	movs	r2, #0
 8013e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013e34:	f001 ff80 	bl	8015d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013e38:	463a      	mov	r2, r7
 8013e3a:	f107 030c 	add.w	r3, r7, #12
 8013e3e:	4611      	mov	r1, r2
 8013e40:	4618      	mov	r0, r3
 8013e42:	f000 ffb3 	bl	8014dac <xTaskCheckForTimeOut>
 8013e46:	4603      	mov	r3, r0
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d132      	bne.n	8013eb2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013e4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e4e:	f000 f9cc 	bl	80141ea <prvIsQueueEmpty>
 8013e52:	4603      	mov	r3, r0
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d026      	beq.n	8013ea6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d109      	bne.n	8013e74 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8013e60:	f001 ff3c 	bl	8015cdc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e66:	689b      	ldr	r3, [r3, #8]
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f001 f90b 	bl	8015084 <xTaskPriorityInherit>
 8013e6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013e70:	f001 ff62 	bl	8015d38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e76:	3324      	adds	r3, #36	; 0x24
 8013e78:	683a      	ldr	r2, [r7, #0]
 8013e7a:	4611      	mov	r1, r2
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f000 fecf 	bl	8014c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e84:	f000 f95f 	bl	8014146 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013e88:	f000 fcf8 	bl	801487c <xTaskResumeAll>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	f47f af69 	bne.w	8013d66 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8013e94:	4b18      	ldr	r3, [pc, #96]	; (8013ef8 <xQueueSemaphoreTake+0x20c>)
 8013e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e9a:	601a      	str	r2, [r3, #0]
 8013e9c:	f3bf 8f4f 	dsb	sy
 8013ea0:	f3bf 8f6f 	isb	sy
 8013ea4:	e75f      	b.n	8013d66 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ea8:	f000 f94d 	bl	8014146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013eac:	f000 fce6 	bl	801487c <xTaskResumeAll>
 8013eb0:	e759      	b.n	8013d66 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013eb4:	f000 f947 	bl	8014146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013eb8:	f000 fce0 	bl	801487c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ebe:	f000 f994 	bl	80141ea <prvIsQueueEmpty>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f43f af4e 	beq.w	8013d66 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d00d      	beq.n	8013eec <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8013ed0:	f001 ff04 	bl	8015cdc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ed6:	f000 f88e 	bl	8013ff6 <prvGetDisinheritPriorityAfterTimeout>
 8013eda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ede:	689b      	ldr	r3, [r3, #8]
 8013ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f001 f9a2 	bl	801522c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013ee8:	f001 ff26 	bl	8015d38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013eec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013eee:	4618      	mov	r0, r3
 8013ef0:	3738      	adds	r7, #56	; 0x38
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd80      	pop	{r7, pc}
 8013ef6:	bf00      	nop
 8013ef8:	e000ed04 	.word	0xe000ed04

08013efc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b08e      	sub	sp, #56	; 0x38
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	60f8      	str	r0, [r7, #12]
 8013f04:	60b9      	str	r1, [r7, #8]
 8013f06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d109      	bne.n	8013f26 <xQueueReceiveFromISR+0x2a>
 8013f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f16:	f383 8811 	msr	BASEPRI, r3
 8013f1a:	f3bf 8f6f 	isb	sy
 8013f1e:	f3bf 8f4f 	dsb	sy
 8013f22:	623b      	str	r3, [r7, #32]
 8013f24:	e7fe      	b.n	8013f24 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d103      	bne.n	8013f34 <xQueueReceiveFromISR+0x38>
 8013f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d101      	bne.n	8013f38 <xQueueReceiveFromISR+0x3c>
 8013f34:	2301      	movs	r3, #1
 8013f36:	e000      	b.n	8013f3a <xQueueReceiveFromISR+0x3e>
 8013f38:	2300      	movs	r3, #0
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d109      	bne.n	8013f52 <xQueueReceiveFromISR+0x56>
 8013f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f42:	f383 8811 	msr	BASEPRI, r3
 8013f46:	f3bf 8f6f 	isb	sy
 8013f4a:	f3bf 8f4f 	dsb	sy
 8013f4e:	61fb      	str	r3, [r7, #28]
 8013f50:	e7fe      	b.n	8013f50 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013f52:	f001 ff9f 	bl	8015e94 <vPortValidateInterruptPriority>
	__asm volatile
 8013f56:	f3ef 8211 	mrs	r2, BASEPRI
 8013f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f5e:	f383 8811 	msr	BASEPRI, r3
 8013f62:	f3bf 8f6f 	isb	sy
 8013f66:	f3bf 8f4f 	dsb	sy
 8013f6a:	61ba      	str	r2, [r7, #24]
 8013f6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013f6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013f70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d02f      	beq.n	8013fde <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013f88:	68b9      	ldr	r1, [r7, #8]
 8013f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f8c:	f000 f8b5 	bl	80140fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f92:	1e5a      	subs	r2, r3, #1
 8013f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013f98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fa0:	d112      	bne.n	8013fc8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa4:	691b      	ldr	r3, [r3, #16]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d016      	beq.n	8013fd8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fac:	3310      	adds	r3, #16
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f000 fe84 	bl	8014cbc <xTaskRemoveFromEventList>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d00e      	beq.n	8013fd8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d00b      	beq.n	8013fd8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2201      	movs	r2, #1
 8013fc4:	601a      	str	r2, [r3, #0]
 8013fc6:	e007      	b.n	8013fd8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fcc:	3301      	adds	r3, #1
 8013fce:	b2db      	uxtb	r3, r3
 8013fd0:	b25a      	sxtb	r2, r3
 8013fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013fd8:	2301      	movs	r3, #1
 8013fda:	637b      	str	r3, [r7, #52]	; 0x34
 8013fdc:	e001      	b.n	8013fe2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8013fde:	2300      	movs	r3, #0
 8013fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8013fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013fe6:	693b      	ldr	r3, [r7, #16]
 8013fe8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3738      	adds	r7, #56	; 0x38
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}

08013ff6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013ff6:	b480      	push	{r7}
 8013ff8:	b085      	sub	sp, #20
 8013ffa:	af00      	add	r7, sp, #0
 8013ffc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014002:	2b00      	cmp	r3, #0
 8014004:	d006      	beq.n	8014014 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014010:	60fb      	str	r3, [r7, #12]
 8014012:	e001      	b.n	8014018 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014014:	2300      	movs	r3, #0
 8014016:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014018:	68fb      	ldr	r3, [r7, #12]
	}
 801401a:	4618      	mov	r0, r3
 801401c:	3714      	adds	r7, #20
 801401e:	46bd      	mov	sp, r7
 8014020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014024:	4770      	bx	lr

08014026 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014026:	b580      	push	{r7, lr}
 8014028:	b086      	sub	sp, #24
 801402a:	af00      	add	r7, sp, #0
 801402c:	60f8      	str	r0, [r7, #12]
 801402e:	60b9      	str	r1, [r7, #8]
 8014030:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014032:	2300      	movs	r3, #0
 8014034:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801403a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014040:	2b00      	cmp	r3, #0
 8014042:	d10d      	bne.n	8014060 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d14d      	bne.n	80140e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	689b      	ldr	r3, [r3, #8]
 8014050:	4618      	mov	r0, r3
 8014052:	f001 f87f 	bl	8015154 <xTaskPriorityDisinherit>
 8014056:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	2200      	movs	r2, #0
 801405c:	609a      	str	r2, [r3, #8]
 801405e:	e043      	b.n	80140e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d119      	bne.n	801409a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	6858      	ldr	r0, [r3, #4]
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801406e:	461a      	mov	r2, r3
 8014070:	68b9      	ldr	r1, [r7, #8]
 8014072:	f002 fe61 	bl	8016d38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	685a      	ldr	r2, [r3, #4]
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801407e:	441a      	add	r2, r3
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	685a      	ldr	r2, [r3, #4]
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	689b      	ldr	r3, [r3, #8]
 801408c:	429a      	cmp	r2, r3
 801408e:	d32b      	bcc.n	80140e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	681a      	ldr	r2, [r3, #0]
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	605a      	str	r2, [r3, #4]
 8014098:	e026      	b.n	80140e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	68d8      	ldr	r0, [r3, #12]
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140a2:	461a      	mov	r2, r3
 80140a4:	68b9      	ldr	r1, [r7, #8]
 80140a6:	f002 fe47 	bl	8016d38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	68da      	ldr	r2, [r3, #12]
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140b2:	425b      	negs	r3, r3
 80140b4:	441a      	add	r2, r3
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	68da      	ldr	r2, [r3, #12]
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d207      	bcs.n	80140d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	689a      	ldr	r2, [r3, #8]
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140ce:	425b      	negs	r3, r3
 80140d0:	441a      	add	r2, r3
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2b02      	cmp	r3, #2
 80140da:	d105      	bne.n	80140e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d002      	beq.n	80140e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	3b01      	subs	r3, #1
 80140e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80140e8:	693b      	ldr	r3, [r7, #16]
 80140ea:	1c5a      	adds	r2, r3, #1
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80140f0:	697b      	ldr	r3, [r7, #20]
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3718      	adds	r7, #24
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}

080140fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80140fa:	b580      	push	{r7, lr}
 80140fc:	b082      	sub	sp, #8
 80140fe:	af00      	add	r7, sp, #0
 8014100:	6078      	str	r0, [r7, #4]
 8014102:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014108:	2b00      	cmp	r3, #0
 801410a:	d018      	beq.n	801413e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	68da      	ldr	r2, [r3, #12]
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014114:	441a      	add	r2, r3
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	68da      	ldr	r2, [r3, #12]
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	689b      	ldr	r3, [r3, #8]
 8014122:	429a      	cmp	r2, r3
 8014124:	d303      	bcc.n	801412e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	681a      	ldr	r2, [r3, #0]
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	68d9      	ldr	r1, [r3, #12]
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014136:	461a      	mov	r2, r3
 8014138:	6838      	ldr	r0, [r7, #0]
 801413a:	f002 fdfd 	bl	8016d38 <memcpy>
	}
}
 801413e:	bf00      	nop
 8014140:	3708      	adds	r7, #8
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}

08014146 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014146:	b580      	push	{r7, lr}
 8014148:	b084      	sub	sp, #16
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801414e:	f001 fdc5 	bl	8015cdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014158:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801415a:	e011      	b.n	8014180 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014160:	2b00      	cmp	r3, #0
 8014162:	d012      	beq.n	801418a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	3324      	adds	r3, #36	; 0x24
 8014168:	4618      	mov	r0, r3
 801416a:	f000 fda7 	bl	8014cbc <xTaskRemoveFromEventList>
 801416e:	4603      	mov	r3, r0
 8014170:	2b00      	cmp	r3, #0
 8014172:	d001      	beq.n	8014178 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014174:	f000 fe7a 	bl	8014e6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014178:	7bfb      	ldrb	r3, [r7, #15]
 801417a:	3b01      	subs	r3, #1
 801417c:	b2db      	uxtb	r3, r3
 801417e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014184:	2b00      	cmp	r3, #0
 8014186:	dce9      	bgt.n	801415c <prvUnlockQueue+0x16>
 8014188:	e000      	b.n	801418c <prvUnlockQueue+0x46>
					break;
 801418a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	22ff      	movs	r2, #255	; 0xff
 8014190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014194:	f001 fdd0 	bl	8015d38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014198:	f001 fda0 	bl	8015cdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80141a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80141a4:	e011      	b.n	80141ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	691b      	ldr	r3, [r3, #16]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d012      	beq.n	80141d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	3310      	adds	r3, #16
 80141b2:	4618      	mov	r0, r3
 80141b4:	f000 fd82 	bl	8014cbc <xTaskRemoveFromEventList>
 80141b8:	4603      	mov	r3, r0
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d001      	beq.n	80141c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80141be:	f000 fe55 	bl	8014e6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80141c2:	7bbb      	ldrb	r3, [r7, #14]
 80141c4:	3b01      	subs	r3, #1
 80141c6:	b2db      	uxtb	r3, r3
 80141c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80141ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	dce9      	bgt.n	80141a6 <prvUnlockQueue+0x60>
 80141d2:	e000      	b.n	80141d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80141d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	22ff      	movs	r2, #255	; 0xff
 80141da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80141de:	f001 fdab 	bl	8015d38 <vPortExitCritical>
}
 80141e2:	bf00      	nop
 80141e4:	3710      	adds	r7, #16
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}

080141ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80141ea:	b580      	push	{r7, lr}
 80141ec:	b084      	sub	sp, #16
 80141ee:	af00      	add	r7, sp, #0
 80141f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80141f2:	f001 fd73 	bl	8015cdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d102      	bne.n	8014204 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80141fe:	2301      	movs	r3, #1
 8014200:	60fb      	str	r3, [r7, #12]
 8014202:	e001      	b.n	8014208 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014204:	2300      	movs	r3, #0
 8014206:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014208:	f001 fd96 	bl	8015d38 <vPortExitCritical>

	return xReturn;
 801420c:	68fb      	ldr	r3, [r7, #12]
}
 801420e:	4618      	mov	r0, r3
 8014210:	3710      	adds	r7, #16
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}

08014216 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014216:	b580      	push	{r7, lr}
 8014218:	b084      	sub	sp, #16
 801421a:	af00      	add	r7, sp, #0
 801421c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801421e:	f001 fd5d 	bl	8015cdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801422a:	429a      	cmp	r2, r3
 801422c:	d102      	bne.n	8014234 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801422e:	2301      	movs	r3, #1
 8014230:	60fb      	str	r3, [r7, #12]
 8014232:	e001      	b.n	8014238 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014234:	2300      	movs	r3, #0
 8014236:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014238:	f001 fd7e 	bl	8015d38 <vPortExitCritical>

	return xReturn;
 801423c:	68fb      	ldr	r3, [r7, #12]
}
 801423e:	4618      	mov	r0, r3
 8014240:	3710      	adds	r7, #16
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
	...

08014248 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014248:	b480      	push	{r7}
 801424a:	b085      	sub	sp, #20
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014252:	2300      	movs	r3, #0
 8014254:	60fb      	str	r3, [r7, #12]
 8014256:	e014      	b.n	8014282 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014258:	4a0e      	ldr	r2, [pc, #56]	; (8014294 <vQueueAddToRegistry+0x4c>)
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d10b      	bne.n	801427c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014264:	490b      	ldr	r1, [pc, #44]	; (8014294 <vQueueAddToRegistry+0x4c>)
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	683a      	ldr	r2, [r7, #0]
 801426a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801426e:	4a09      	ldr	r2, [pc, #36]	; (8014294 <vQueueAddToRegistry+0x4c>)
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	00db      	lsls	r3, r3, #3
 8014274:	4413      	add	r3, r2
 8014276:	687a      	ldr	r2, [r7, #4]
 8014278:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801427a:	e005      	b.n	8014288 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	3301      	adds	r3, #1
 8014280:	60fb      	str	r3, [r7, #12]
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	2b07      	cmp	r3, #7
 8014286:	d9e7      	bls.n	8014258 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014288:	bf00      	nop
 801428a:	3714      	adds	r7, #20
 801428c:	46bd      	mov	sp, r7
 801428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014292:	4770      	bx	lr
 8014294:	2401c98c 	.word	0x2401c98c

08014298 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014298:	b580      	push	{r7, lr}
 801429a:	b086      	sub	sp, #24
 801429c:	af00      	add	r7, sp, #0
 801429e:	60f8      	str	r0, [r7, #12]
 80142a0:	60b9      	str	r1, [r7, #8]
 80142a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80142a8:	f001 fd18 	bl	8015cdc <vPortEnterCritical>
 80142ac:	697b      	ldr	r3, [r7, #20]
 80142ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142b2:	b25b      	sxtb	r3, r3
 80142b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142b8:	d103      	bne.n	80142c2 <vQueueWaitForMessageRestricted+0x2a>
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	2200      	movs	r2, #0
 80142be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80142c8:	b25b      	sxtb	r3, r3
 80142ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ce:	d103      	bne.n	80142d8 <vQueueWaitForMessageRestricted+0x40>
 80142d0:	697b      	ldr	r3, [r7, #20]
 80142d2:	2200      	movs	r2, #0
 80142d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80142d8:	f001 fd2e 	bl	8015d38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d106      	bne.n	80142f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	3324      	adds	r3, #36	; 0x24
 80142e8:	687a      	ldr	r2, [r7, #4]
 80142ea:	68b9      	ldr	r1, [r7, #8]
 80142ec:	4618      	mov	r0, r3
 80142ee:	f000 fcbb 	bl	8014c68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80142f2:	6978      	ldr	r0, [r7, #20]
 80142f4:	f7ff ff27 	bl	8014146 <prvUnlockQueue>
	}
 80142f8:	bf00      	nop
 80142fa:	3718      	adds	r7, #24
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}

08014300 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014300:	b580      	push	{r7, lr}
 8014302:	b08e      	sub	sp, #56	; 0x38
 8014304:	af04      	add	r7, sp, #16
 8014306:	60f8      	str	r0, [r7, #12]
 8014308:	60b9      	str	r1, [r7, #8]
 801430a:	607a      	str	r2, [r7, #4]
 801430c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801430e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014310:	2b00      	cmp	r3, #0
 8014312:	d109      	bne.n	8014328 <xTaskCreateStatic+0x28>
	__asm volatile
 8014314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014318:	f383 8811 	msr	BASEPRI, r3
 801431c:	f3bf 8f6f 	isb	sy
 8014320:	f3bf 8f4f 	dsb	sy
 8014324:	623b      	str	r3, [r7, #32]
 8014326:	e7fe      	b.n	8014326 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8014328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801432a:	2b00      	cmp	r3, #0
 801432c:	d109      	bne.n	8014342 <xTaskCreateStatic+0x42>
 801432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014332:	f383 8811 	msr	BASEPRI, r3
 8014336:	f3bf 8f6f 	isb	sy
 801433a:	f3bf 8f4f 	dsb	sy
 801433e:	61fb      	str	r3, [r7, #28]
 8014340:	e7fe      	b.n	8014340 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014342:	235c      	movs	r3, #92	; 0x5c
 8014344:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014346:	693b      	ldr	r3, [r7, #16]
 8014348:	2b5c      	cmp	r3, #92	; 0x5c
 801434a:	d009      	beq.n	8014360 <xTaskCreateStatic+0x60>
 801434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014350:	f383 8811 	msr	BASEPRI, r3
 8014354:	f3bf 8f6f 	isb	sy
 8014358:	f3bf 8f4f 	dsb	sy
 801435c:	61bb      	str	r3, [r7, #24]
 801435e:	e7fe      	b.n	801435e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014360:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014364:	2b00      	cmp	r3, #0
 8014366:	d01e      	beq.n	80143a6 <xTaskCreateStatic+0xa6>
 8014368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801436a:	2b00      	cmp	r3, #0
 801436c:	d01b      	beq.n	80143a6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014370:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014376:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437a:	2202      	movs	r2, #2
 801437c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014380:	2300      	movs	r3, #0
 8014382:	9303      	str	r3, [sp, #12]
 8014384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014386:	9302      	str	r3, [sp, #8]
 8014388:	f107 0314 	add.w	r3, r7, #20
 801438c:	9301      	str	r3, [sp, #4]
 801438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014390:	9300      	str	r3, [sp, #0]
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	687a      	ldr	r2, [r7, #4]
 8014396:	68b9      	ldr	r1, [r7, #8]
 8014398:	68f8      	ldr	r0, [r7, #12]
 801439a:	f000 f850 	bl	801443e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801439e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143a0:	f000 f8dc 	bl	801455c <prvAddNewTaskToReadyList>
 80143a4:	e001      	b.n	80143aa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80143a6:	2300      	movs	r3, #0
 80143a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80143aa:	697b      	ldr	r3, [r7, #20]
	}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3728      	adds	r7, #40	; 0x28
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b08c      	sub	sp, #48	; 0x30
 80143b8:	af04      	add	r7, sp, #16
 80143ba:	60f8      	str	r0, [r7, #12]
 80143bc:	60b9      	str	r1, [r7, #8]
 80143be:	603b      	str	r3, [r7, #0]
 80143c0:	4613      	mov	r3, r2
 80143c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80143c4:	88fb      	ldrh	r3, [r7, #6]
 80143c6:	009b      	lsls	r3, r3, #2
 80143c8:	4618      	mov	r0, r3
 80143ca:	f001 fda1 	bl	8015f10 <pvPortMalloc>
 80143ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80143d0:	697b      	ldr	r3, [r7, #20]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d00e      	beq.n	80143f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80143d6:	205c      	movs	r0, #92	; 0x5c
 80143d8:	f001 fd9a 	bl	8015f10 <pvPortMalloc>
 80143dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80143de:	69fb      	ldr	r3, [r7, #28]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d003      	beq.n	80143ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80143e4:	69fb      	ldr	r3, [r7, #28]
 80143e6:	697a      	ldr	r2, [r7, #20]
 80143e8:	631a      	str	r2, [r3, #48]	; 0x30
 80143ea:	e005      	b.n	80143f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80143ec:	6978      	ldr	r0, [r7, #20]
 80143ee:	f001 fe51 	bl	8016094 <vPortFree>
 80143f2:	e001      	b.n	80143f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80143f4:	2300      	movs	r3, #0
 80143f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80143f8:	69fb      	ldr	r3, [r7, #28]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d017      	beq.n	801442e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80143fe:	69fb      	ldr	r3, [r7, #28]
 8014400:	2200      	movs	r2, #0
 8014402:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014406:	88fa      	ldrh	r2, [r7, #6]
 8014408:	2300      	movs	r3, #0
 801440a:	9303      	str	r3, [sp, #12]
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	9302      	str	r3, [sp, #8]
 8014410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014412:	9301      	str	r3, [sp, #4]
 8014414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014416:	9300      	str	r3, [sp, #0]
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	68b9      	ldr	r1, [r7, #8]
 801441c:	68f8      	ldr	r0, [r7, #12]
 801441e:	f000 f80e 	bl	801443e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014422:	69f8      	ldr	r0, [r7, #28]
 8014424:	f000 f89a 	bl	801455c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014428:	2301      	movs	r3, #1
 801442a:	61bb      	str	r3, [r7, #24]
 801442c:	e002      	b.n	8014434 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801442e:	f04f 33ff 	mov.w	r3, #4294967295
 8014432:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014434:	69bb      	ldr	r3, [r7, #24]
	}
 8014436:	4618      	mov	r0, r3
 8014438:	3720      	adds	r7, #32
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}

0801443e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801443e:	b580      	push	{r7, lr}
 8014440:	b088      	sub	sp, #32
 8014442:	af00      	add	r7, sp, #0
 8014444:	60f8      	str	r0, [r7, #12]
 8014446:	60b9      	str	r1, [r7, #8]
 8014448:	607a      	str	r2, [r7, #4]
 801444a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801444e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	009b      	lsls	r3, r3, #2
 8014454:	461a      	mov	r2, r3
 8014456:	21a5      	movs	r1, #165	; 0xa5
 8014458:	f002 fc79 	bl	8016d4e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014460:	6879      	ldr	r1, [r7, #4]
 8014462:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014466:	440b      	add	r3, r1
 8014468:	009b      	lsls	r3, r3, #2
 801446a:	4413      	add	r3, r2
 801446c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801446e:	69bb      	ldr	r3, [r7, #24]
 8014470:	f023 0307 	bic.w	r3, r3, #7
 8014474:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014476:	69bb      	ldr	r3, [r7, #24]
 8014478:	f003 0307 	and.w	r3, r3, #7
 801447c:	2b00      	cmp	r3, #0
 801447e:	d009      	beq.n	8014494 <prvInitialiseNewTask+0x56>
 8014480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014484:	f383 8811 	msr	BASEPRI, r3
 8014488:	f3bf 8f6f 	isb	sy
 801448c:	f3bf 8f4f 	dsb	sy
 8014490:	617b      	str	r3, [r7, #20]
 8014492:	e7fe      	b.n	8014492 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d01f      	beq.n	80144da <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801449a:	2300      	movs	r3, #0
 801449c:	61fb      	str	r3, [r7, #28]
 801449e:	e012      	b.n	80144c6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80144a0:	68ba      	ldr	r2, [r7, #8]
 80144a2:	69fb      	ldr	r3, [r7, #28]
 80144a4:	4413      	add	r3, r2
 80144a6:	7819      	ldrb	r1, [r3, #0]
 80144a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144aa:	69fb      	ldr	r3, [r7, #28]
 80144ac:	4413      	add	r3, r2
 80144ae:	3334      	adds	r3, #52	; 0x34
 80144b0:	460a      	mov	r2, r1
 80144b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80144b4:	68ba      	ldr	r2, [r7, #8]
 80144b6:	69fb      	ldr	r3, [r7, #28]
 80144b8:	4413      	add	r3, r2
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d006      	beq.n	80144ce <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80144c0:	69fb      	ldr	r3, [r7, #28]
 80144c2:	3301      	adds	r3, #1
 80144c4:	61fb      	str	r3, [r7, #28]
 80144c6:	69fb      	ldr	r3, [r7, #28]
 80144c8:	2b0f      	cmp	r3, #15
 80144ca:	d9e9      	bls.n	80144a0 <prvInitialiseNewTask+0x62>
 80144cc:	e000      	b.n	80144d0 <prvInitialiseNewTask+0x92>
			{
				break;
 80144ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80144d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144d2:	2200      	movs	r2, #0
 80144d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80144d8:	e003      	b.n	80144e2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80144da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144dc:	2200      	movs	r2, #0
 80144de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80144e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e4:	2b37      	cmp	r3, #55	; 0x37
 80144e6:	d901      	bls.n	80144ec <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80144e8:	2337      	movs	r3, #55	; 0x37
 80144ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80144ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80144f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80144f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fa:	2200      	movs	r2, #0
 80144fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80144fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014500:	3304      	adds	r3, #4
 8014502:	4618      	mov	r0, r3
 8014504:	f7fe ff02 	bl	801330c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801450a:	3318      	adds	r3, #24
 801450c:	4618      	mov	r0, r3
 801450e:	f7fe fefd 	bl	801330c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014516:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801451a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014520:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014526:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801452a:	2200      	movs	r2, #0
 801452c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014530:	2200      	movs	r2, #0
 8014532:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014536:	683a      	ldr	r2, [r7, #0]
 8014538:	68f9      	ldr	r1, [r7, #12]
 801453a:	69b8      	ldr	r0, [r7, #24]
 801453c:	f001 faa4 	bl	8015a88 <pxPortInitialiseStack>
 8014540:	4602      	mov	r2, r0
 8014542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014544:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014548:	2b00      	cmp	r3, #0
 801454a:	d002      	beq.n	8014552 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801454c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801454e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014550:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014552:	bf00      	nop
 8014554:	3720      	adds	r7, #32
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
	...

0801455c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b082      	sub	sp, #8
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014564:	f001 fbba 	bl	8015cdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014568:	4b2d      	ldr	r3, [pc, #180]	; (8014620 <prvAddNewTaskToReadyList+0xc4>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	3301      	adds	r3, #1
 801456e:	4a2c      	ldr	r2, [pc, #176]	; (8014620 <prvAddNewTaskToReadyList+0xc4>)
 8014570:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014572:	4b2c      	ldr	r3, [pc, #176]	; (8014624 <prvAddNewTaskToReadyList+0xc8>)
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d109      	bne.n	801458e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801457a:	4a2a      	ldr	r2, [pc, #168]	; (8014624 <prvAddNewTaskToReadyList+0xc8>)
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014580:	4b27      	ldr	r3, [pc, #156]	; (8014620 <prvAddNewTaskToReadyList+0xc4>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	2b01      	cmp	r3, #1
 8014586:	d110      	bne.n	80145aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014588:	f000 fc94 	bl	8014eb4 <prvInitialiseTaskLists>
 801458c:	e00d      	b.n	80145aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801458e:	4b26      	ldr	r3, [pc, #152]	; (8014628 <prvAddNewTaskToReadyList+0xcc>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d109      	bne.n	80145aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014596:	4b23      	ldr	r3, [pc, #140]	; (8014624 <prvAddNewTaskToReadyList+0xc8>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d802      	bhi.n	80145aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80145a4:	4a1f      	ldr	r2, [pc, #124]	; (8014624 <prvAddNewTaskToReadyList+0xc8>)
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80145aa:	4b20      	ldr	r3, [pc, #128]	; (801462c <prvAddNewTaskToReadyList+0xd0>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	3301      	adds	r3, #1
 80145b0:	4a1e      	ldr	r2, [pc, #120]	; (801462c <prvAddNewTaskToReadyList+0xd0>)
 80145b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80145b4:	4b1d      	ldr	r3, [pc, #116]	; (801462c <prvAddNewTaskToReadyList+0xd0>)
 80145b6:	681a      	ldr	r2, [r3, #0]
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145c0:	4b1b      	ldr	r3, [pc, #108]	; (8014630 <prvAddNewTaskToReadyList+0xd4>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d903      	bls.n	80145d0 <prvAddNewTaskToReadyList+0x74>
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145cc:	4a18      	ldr	r2, [pc, #96]	; (8014630 <prvAddNewTaskToReadyList+0xd4>)
 80145ce:	6013      	str	r3, [r2, #0]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145d4:	4613      	mov	r3, r2
 80145d6:	009b      	lsls	r3, r3, #2
 80145d8:	4413      	add	r3, r2
 80145da:	009b      	lsls	r3, r3, #2
 80145dc:	4a15      	ldr	r2, [pc, #84]	; (8014634 <prvAddNewTaskToReadyList+0xd8>)
 80145de:	441a      	add	r2, r3
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	3304      	adds	r3, #4
 80145e4:	4619      	mov	r1, r3
 80145e6:	4610      	mov	r0, r2
 80145e8:	f7fe fe9d 	bl	8013326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80145ec:	f001 fba4 	bl	8015d38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80145f0:	4b0d      	ldr	r3, [pc, #52]	; (8014628 <prvAddNewTaskToReadyList+0xcc>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d00e      	beq.n	8014616 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80145f8:	4b0a      	ldr	r3, [pc, #40]	; (8014624 <prvAddNewTaskToReadyList+0xc8>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014602:	429a      	cmp	r2, r3
 8014604:	d207      	bcs.n	8014616 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014606:	4b0c      	ldr	r3, [pc, #48]	; (8014638 <prvAddNewTaskToReadyList+0xdc>)
 8014608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801460c:	601a      	str	r2, [r3, #0]
 801460e:	f3bf 8f4f 	dsb	sy
 8014612:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014616:	bf00      	nop
 8014618:	3708      	adds	r7, #8
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	24000e80 	.word	0x24000e80
 8014624:	240009ac 	.word	0x240009ac
 8014628:	24000e8c 	.word	0x24000e8c
 801462c:	24000e9c 	.word	0x24000e9c
 8014630:	24000e88 	.word	0x24000e88
 8014634:	240009b0 	.word	0x240009b0
 8014638:	e000ed04 	.word	0xe000ed04

0801463c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801463c:	b580      	push	{r7, lr}
 801463e:	b08a      	sub	sp, #40	; 0x28
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
 8014644:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8014646:	2300      	movs	r3, #0
 8014648:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d109      	bne.n	8014664 <vTaskDelayUntil+0x28>
 8014650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014654:	f383 8811 	msr	BASEPRI, r3
 8014658:	f3bf 8f6f 	isb	sy
 801465c:	f3bf 8f4f 	dsb	sy
 8014660:	617b      	str	r3, [r7, #20]
 8014662:	e7fe      	b.n	8014662 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d109      	bne.n	801467e <vTaskDelayUntil+0x42>
 801466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801466e:	f383 8811 	msr	BASEPRI, r3
 8014672:	f3bf 8f6f 	isb	sy
 8014676:	f3bf 8f4f 	dsb	sy
 801467a:	613b      	str	r3, [r7, #16]
 801467c:	e7fe      	b.n	801467c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 801467e:	4b29      	ldr	r3, [pc, #164]	; (8014724 <vTaskDelayUntil+0xe8>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d009      	beq.n	801469a <vTaskDelayUntil+0x5e>
 8014686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801468a:	f383 8811 	msr	BASEPRI, r3
 801468e:	f3bf 8f6f 	isb	sy
 8014692:	f3bf 8f4f 	dsb	sy
 8014696:	60fb      	str	r3, [r7, #12]
 8014698:	e7fe      	b.n	8014698 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 801469a:	f000 f8e1 	bl	8014860 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801469e:	4b22      	ldr	r3, [pc, #136]	; (8014728 <vTaskDelayUntil+0xec>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	683a      	ldr	r2, [r7, #0]
 80146aa:	4413      	add	r3, r2
 80146ac:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	6a3a      	ldr	r2, [r7, #32]
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d20b      	bcs.n	80146d0 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	69fa      	ldr	r2, [r7, #28]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d211      	bcs.n	80146e6 <vTaskDelayUntil+0xaa>
 80146c2:	69fa      	ldr	r2, [r7, #28]
 80146c4:	6a3b      	ldr	r3, [r7, #32]
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d90d      	bls.n	80146e6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80146ca:	2301      	movs	r3, #1
 80146cc:	627b      	str	r3, [r7, #36]	; 0x24
 80146ce:	e00a      	b.n	80146e6 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	69fa      	ldr	r2, [r7, #28]
 80146d6:	429a      	cmp	r2, r3
 80146d8:	d303      	bcc.n	80146e2 <vTaskDelayUntil+0xa6>
 80146da:	69fa      	ldr	r2, [r7, #28]
 80146dc:	6a3b      	ldr	r3, [r7, #32]
 80146de:	429a      	cmp	r2, r3
 80146e0:	d901      	bls.n	80146e6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80146e2:	2301      	movs	r3, #1
 80146e4:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	69fa      	ldr	r2, [r7, #28]
 80146ea:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80146ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d006      	beq.n	8014700 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80146f2:	69fa      	ldr	r2, [r7, #28]
 80146f4:	6a3b      	ldr	r3, [r7, #32]
 80146f6:	1ad3      	subs	r3, r2, r3
 80146f8:	2100      	movs	r1, #0
 80146fa:	4618      	mov	r0, r3
 80146fc:	f000 fe2a 	bl	8015354 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8014700:	f000 f8bc 	bl	801487c <xTaskResumeAll>
 8014704:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014706:	69bb      	ldr	r3, [r7, #24]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d107      	bne.n	801471c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 801470c:	4b07      	ldr	r3, [pc, #28]	; (801472c <vTaskDelayUntil+0xf0>)
 801470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014712:	601a      	str	r2, [r3, #0]
 8014714:	f3bf 8f4f 	dsb	sy
 8014718:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801471c:	bf00      	nop
 801471e:	3728      	adds	r7, #40	; 0x28
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}
 8014724:	24000ea8 	.word	0x24000ea8
 8014728:	24000e84 	.word	0x24000e84
 801472c:	e000ed04 	.word	0xe000ed04

08014730 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014730:	b580      	push	{r7, lr}
 8014732:	b084      	sub	sp, #16
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014738:	2300      	movs	r3, #0
 801473a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d016      	beq.n	8014770 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014742:	4b13      	ldr	r3, [pc, #76]	; (8014790 <vTaskDelay+0x60>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d009      	beq.n	801475e <vTaskDelay+0x2e>
 801474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801474e:	f383 8811 	msr	BASEPRI, r3
 8014752:	f3bf 8f6f 	isb	sy
 8014756:	f3bf 8f4f 	dsb	sy
 801475a:	60bb      	str	r3, [r7, #8]
 801475c:	e7fe      	b.n	801475c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801475e:	f000 f87f 	bl	8014860 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014762:	2100      	movs	r1, #0
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f000 fdf5 	bl	8015354 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801476a:	f000 f887 	bl	801487c <xTaskResumeAll>
 801476e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d107      	bne.n	8014786 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8014776:	4b07      	ldr	r3, [pc, #28]	; (8014794 <vTaskDelay+0x64>)
 8014778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801477c:	601a      	str	r2, [r3, #0]
 801477e:	f3bf 8f4f 	dsb	sy
 8014782:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014786:	bf00      	nop
 8014788:	3710      	adds	r7, #16
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop
 8014790:	24000ea8 	.word	0x24000ea8
 8014794:	e000ed04 	.word	0xe000ed04

08014798 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b08a      	sub	sp, #40	; 0x28
 801479c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801479e:	2300      	movs	r3, #0
 80147a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80147a2:	2300      	movs	r3, #0
 80147a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80147a6:	463a      	mov	r2, r7
 80147a8:	1d39      	adds	r1, r7, #4
 80147aa:	f107 0308 	add.w	r3, r7, #8
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7fe fd58 	bl	8013264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80147b4:	6839      	ldr	r1, [r7, #0]
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	68ba      	ldr	r2, [r7, #8]
 80147ba:	9202      	str	r2, [sp, #8]
 80147bc:	9301      	str	r3, [sp, #4]
 80147be:	2300      	movs	r3, #0
 80147c0:	9300      	str	r3, [sp, #0]
 80147c2:	2300      	movs	r3, #0
 80147c4:	460a      	mov	r2, r1
 80147c6:	4920      	ldr	r1, [pc, #128]	; (8014848 <vTaskStartScheduler+0xb0>)
 80147c8:	4820      	ldr	r0, [pc, #128]	; (801484c <vTaskStartScheduler+0xb4>)
 80147ca:	f7ff fd99 	bl	8014300 <xTaskCreateStatic>
 80147ce:	4602      	mov	r2, r0
 80147d0:	4b1f      	ldr	r3, [pc, #124]	; (8014850 <vTaskStartScheduler+0xb8>)
 80147d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80147d4:	4b1e      	ldr	r3, [pc, #120]	; (8014850 <vTaskStartScheduler+0xb8>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d002      	beq.n	80147e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80147dc:	2301      	movs	r3, #1
 80147de:	617b      	str	r3, [r7, #20]
 80147e0:	e001      	b.n	80147e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80147e2:	2300      	movs	r3, #0
 80147e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80147e6:	697b      	ldr	r3, [r7, #20]
 80147e8:	2b01      	cmp	r3, #1
 80147ea:	d102      	bne.n	80147f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80147ec:	f000 fe06 	bl	80153fc <xTimerCreateTimerTask>
 80147f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80147f2:	697b      	ldr	r3, [r7, #20]
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	d115      	bne.n	8014824 <vTaskStartScheduler+0x8c>
 80147f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fc:	f383 8811 	msr	BASEPRI, r3
 8014800:	f3bf 8f6f 	isb	sy
 8014804:	f3bf 8f4f 	dsb	sy
 8014808:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801480a:	4b12      	ldr	r3, [pc, #72]	; (8014854 <vTaskStartScheduler+0xbc>)
 801480c:	f04f 32ff 	mov.w	r2, #4294967295
 8014810:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014812:	4b11      	ldr	r3, [pc, #68]	; (8014858 <vTaskStartScheduler+0xc0>)
 8014814:	2201      	movs	r2, #1
 8014816:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014818:	4b10      	ldr	r3, [pc, #64]	; (801485c <vTaskStartScheduler+0xc4>)
 801481a:	2200      	movs	r2, #0
 801481c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801481e:	f001 f9bf 	bl	8015ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014822:	e00d      	b.n	8014840 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014824:	697b      	ldr	r3, [r7, #20]
 8014826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801482a:	d109      	bne.n	8014840 <vTaskStartScheduler+0xa8>
 801482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014830:	f383 8811 	msr	BASEPRI, r3
 8014834:	f3bf 8f6f 	isb	sy
 8014838:	f3bf 8f4f 	dsb	sy
 801483c:	60fb      	str	r3, [r7, #12]
 801483e:	e7fe      	b.n	801483e <vTaskStartScheduler+0xa6>
}
 8014840:	bf00      	nop
 8014842:	3718      	adds	r7, #24
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}
 8014848:	08017db8 	.word	0x08017db8
 801484c:	08014e85 	.word	0x08014e85
 8014850:	24000ea4 	.word	0x24000ea4
 8014854:	24000ea0 	.word	0x24000ea0
 8014858:	24000e8c 	.word	0x24000e8c
 801485c:	24000e84 	.word	0x24000e84

08014860 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014860:	b480      	push	{r7}
 8014862:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014864:	4b04      	ldr	r3, [pc, #16]	; (8014878 <vTaskSuspendAll+0x18>)
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	3301      	adds	r3, #1
 801486a:	4a03      	ldr	r2, [pc, #12]	; (8014878 <vTaskSuspendAll+0x18>)
 801486c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801486e:	bf00      	nop
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr
 8014878:	24000ea8 	.word	0x24000ea8

0801487c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b084      	sub	sp, #16
 8014880:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014882:	2300      	movs	r3, #0
 8014884:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014886:	2300      	movs	r3, #0
 8014888:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801488a:	4b41      	ldr	r3, [pc, #260]	; (8014990 <xTaskResumeAll+0x114>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d109      	bne.n	80148a6 <xTaskResumeAll+0x2a>
 8014892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014896:	f383 8811 	msr	BASEPRI, r3
 801489a:	f3bf 8f6f 	isb	sy
 801489e:	f3bf 8f4f 	dsb	sy
 80148a2:	603b      	str	r3, [r7, #0]
 80148a4:	e7fe      	b.n	80148a4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80148a6:	f001 fa19 	bl	8015cdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80148aa:	4b39      	ldr	r3, [pc, #228]	; (8014990 <xTaskResumeAll+0x114>)
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	3b01      	subs	r3, #1
 80148b0:	4a37      	ldr	r2, [pc, #220]	; (8014990 <xTaskResumeAll+0x114>)
 80148b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148b4:	4b36      	ldr	r3, [pc, #216]	; (8014990 <xTaskResumeAll+0x114>)
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d162      	bne.n	8014982 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80148bc:	4b35      	ldr	r3, [pc, #212]	; (8014994 <xTaskResumeAll+0x118>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d05e      	beq.n	8014982 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80148c4:	e02f      	b.n	8014926 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148c6:	4b34      	ldr	r3, [pc, #208]	; (8014998 <xTaskResumeAll+0x11c>)
 80148c8:	68db      	ldr	r3, [r3, #12]
 80148ca:	68db      	ldr	r3, [r3, #12]
 80148cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	3318      	adds	r3, #24
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fe fd84 	bl	80133e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	3304      	adds	r3, #4
 80148dc:	4618      	mov	r0, r3
 80148de:	f7fe fd7f 	bl	80133e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148e6:	4b2d      	ldr	r3, [pc, #180]	; (801499c <xTaskResumeAll+0x120>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d903      	bls.n	80148f6 <xTaskResumeAll+0x7a>
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148f2:	4a2a      	ldr	r2, [pc, #168]	; (801499c <xTaskResumeAll+0x120>)
 80148f4:	6013      	str	r3, [r2, #0]
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148fa:	4613      	mov	r3, r2
 80148fc:	009b      	lsls	r3, r3, #2
 80148fe:	4413      	add	r3, r2
 8014900:	009b      	lsls	r3, r3, #2
 8014902:	4a27      	ldr	r2, [pc, #156]	; (80149a0 <xTaskResumeAll+0x124>)
 8014904:	441a      	add	r2, r3
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	3304      	adds	r3, #4
 801490a:	4619      	mov	r1, r3
 801490c:	4610      	mov	r0, r2
 801490e:	f7fe fd0a 	bl	8013326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014916:	4b23      	ldr	r3, [pc, #140]	; (80149a4 <xTaskResumeAll+0x128>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801491c:	429a      	cmp	r2, r3
 801491e:	d302      	bcc.n	8014926 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8014920:	4b21      	ldr	r3, [pc, #132]	; (80149a8 <xTaskResumeAll+0x12c>)
 8014922:	2201      	movs	r2, #1
 8014924:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014926:	4b1c      	ldr	r3, [pc, #112]	; (8014998 <xTaskResumeAll+0x11c>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d1cb      	bne.n	80148c6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d001      	beq.n	8014938 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014934:	f000 fb58 	bl	8014fe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014938:	4b1c      	ldr	r3, [pc, #112]	; (80149ac <xTaskResumeAll+0x130>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d010      	beq.n	8014966 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014944:	f000 f858 	bl	80149f8 <xTaskIncrementTick>
 8014948:	4603      	mov	r3, r0
 801494a:	2b00      	cmp	r3, #0
 801494c:	d002      	beq.n	8014954 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801494e:	4b16      	ldr	r3, [pc, #88]	; (80149a8 <xTaskResumeAll+0x12c>)
 8014950:	2201      	movs	r2, #1
 8014952:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	3b01      	subs	r3, #1
 8014958:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d1f1      	bne.n	8014944 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8014960:	4b12      	ldr	r3, [pc, #72]	; (80149ac <xTaskResumeAll+0x130>)
 8014962:	2200      	movs	r2, #0
 8014964:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014966:	4b10      	ldr	r3, [pc, #64]	; (80149a8 <xTaskResumeAll+0x12c>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d009      	beq.n	8014982 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801496e:	2301      	movs	r3, #1
 8014970:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014972:	4b0f      	ldr	r3, [pc, #60]	; (80149b0 <xTaskResumeAll+0x134>)
 8014974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014978:	601a      	str	r2, [r3, #0]
 801497a:	f3bf 8f4f 	dsb	sy
 801497e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014982:	f001 f9d9 	bl	8015d38 <vPortExitCritical>

	return xAlreadyYielded;
 8014986:	68bb      	ldr	r3, [r7, #8]
}
 8014988:	4618      	mov	r0, r3
 801498a:	3710      	adds	r7, #16
 801498c:	46bd      	mov	sp, r7
 801498e:	bd80      	pop	{r7, pc}
 8014990:	24000ea8 	.word	0x24000ea8
 8014994:	24000e80 	.word	0x24000e80
 8014998:	24000e40 	.word	0x24000e40
 801499c:	24000e88 	.word	0x24000e88
 80149a0:	240009b0 	.word	0x240009b0
 80149a4:	240009ac 	.word	0x240009ac
 80149a8:	24000e94 	.word	0x24000e94
 80149ac:	24000e90 	.word	0x24000e90
 80149b0:	e000ed04 	.word	0xe000ed04

080149b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80149b4:	b480      	push	{r7}
 80149b6:	b083      	sub	sp, #12
 80149b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80149ba:	4b05      	ldr	r3, [pc, #20]	; (80149d0 <xTaskGetTickCount+0x1c>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80149c0:	687b      	ldr	r3, [r7, #4]
}
 80149c2:	4618      	mov	r0, r3
 80149c4:	370c      	adds	r7, #12
 80149c6:	46bd      	mov	sp, r7
 80149c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149cc:	4770      	bx	lr
 80149ce:	bf00      	nop
 80149d0:	24000e84 	.word	0x24000e84

080149d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b082      	sub	sp, #8
 80149d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80149da:	f001 fa5b 	bl	8015e94 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80149de:	2300      	movs	r3, #0
 80149e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80149e2:	4b04      	ldr	r3, [pc, #16]	; (80149f4 <xTaskGetTickCountFromISR+0x20>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80149e8:	683b      	ldr	r3, [r7, #0]
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3708      	adds	r7, #8
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}
 80149f2:	bf00      	nop
 80149f4:	24000e84 	.word	0x24000e84

080149f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b086      	sub	sp, #24
 80149fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80149fe:	2300      	movs	r3, #0
 8014a00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a02:	4b4e      	ldr	r3, [pc, #312]	; (8014b3c <xTaskIncrementTick+0x144>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	f040 8088 	bne.w	8014b1c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014a0c:	4b4c      	ldr	r3, [pc, #304]	; (8014b40 <xTaskIncrementTick+0x148>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	3301      	adds	r3, #1
 8014a12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014a14:	4a4a      	ldr	r2, [pc, #296]	; (8014b40 <xTaskIncrementTick+0x148>)
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014a1a:	693b      	ldr	r3, [r7, #16]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d11f      	bne.n	8014a60 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8014a20:	4b48      	ldr	r3, [pc, #288]	; (8014b44 <xTaskIncrementTick+0x14c>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d009      	beq.n	8014a3e <xTaskIncrementTick+0x46>
 8014a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a2e:	f383 8811 	msr	BASEPRI, r3
 8014a32:	f3bf 8f6f 	isb	sy
 8014a36:	f3bf 8f4f 	dsb	sy
 8014a3a:	603b      	str	r3, [r7, #0]
 8014a3c:	e7fe      	b.n	8014a3c <xTaskIncrementTick+0x44>
 8014a3e:	4b41      	ldr	r3, [pc, #260]	; (8014b44 <xTaskIncrementTick+0x14c>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	60fb      	str	r3, [r7, #12]
 8014a44:	4b40      	ldr	r3, [pc, #256]	; (8014b48 <xTaskIncrementTick+0x150>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	4a3e      	ldr	r2, [pc, #248]	; (8014b44 <xTaskIncrementTick+0x14c>)
 8014a4a:	6013      	str	r3, [r2, #0]
 8014a4c:	4a3e      	ldr	r2, [pc, #248]	; (8014b48 <xTaskIncrementTick+0x150>)
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	6013      	str	r3, [r2, #0]
 8014a52:	4b3e      	ldr	r3, [pc, #248]	; (8014b4c <xTaskIncrementTick+0x154>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	3301      	adds	r3, #1
 8014a58:	4a3c      	ldr	r2, [pc, #240]	; (8014b4c <xTaskIncrementTick+0x154>)
 8014a5a:	6013      	str	r3, [r2, #0]
 8014a5c:	f000 fac4 	bl	8014fe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014a60:	4b3b      	ldr	r3, [pc, #236]	; (8014b50 <xTaskIncrementTick+0x158>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	693a      	ldr	r2, [r7, #16]
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d349      	bcc.n	8014afe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a6a:	4b36      	ldr	r3, [pc, #216]	; (8014b44 <xTaskIncrementTick+0x14c>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d104      	bne.n	8014a7e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a74:	4b36      	ldr	r3, [pc, #216]	; (8014b50 <xTaskIncrementTick+0x158>)
 8014a76:	f04f 32ff 	mov.w	r2, #4294967295
 8014a7a:	601a      	str	r2, [r3, #0]
					break;
 8014a7c:	e03f      	b.n	8014afe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a7e:	4b31      	ldr	r3, [pc, #196]	; (8014b44 <xTaskIncrementTick+0x14c>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	68db      	ldr	r3, [r3, #12]
 8014a86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	685b      	ldr	r3, [r3, #4]
 8014a8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014a8e:	693a      	ldr	r2, [r7, #16]
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d203      	bcs.n	8014a9e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014a96:	4a2e      	ldr	r2, [pc, #184]	; (8014b50 <xTaskIncrementTick+0x158>)
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014a9c:	e02f      	b.n	8014afe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a9e:	68bb      	ldr	r3, [r7, #8]
 8014aa0:	3304      	adds	r3, #4
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7fe fc9c 	bl	80133e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d004      	beq.n	8014aba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014ab0:	68bb      	ldr	r3, [r7, #8]
 8014ab2:	3318      	adds	r3, #24
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7fe fc93 	bl	80133e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014aba:	68bb      	ldr	r3, [r7, #8]
 8014abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014abe:	4b25      	ldr	r3, [pc, #148]	; (8014b54 <xTaskIncrementTick+0x15c>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	429a      	cmp	r2, r3
 8014ac4:	d903      	bls.n	8014ace <xTaskIncrementTick+0xd6>
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aca:	4a22      	ldr	r2, [pc, #136]	; (8014b54 <xTaskIncrementTick+0x15c>)
 8014acc:	6013      	str	r3, [r2, #0]
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ad2:	4613      	mov	r3, r2
 8014ad4:	009b      	lsls	r3, r3, #2
 8014ad6:	4413      	add	r3, r2
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	4a1f      	ldr	r2, [pc, #124]	; (8014b58 <xTaskIncrementTick+0x160>)
 8014adc:	441a      	add	r2, r3
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	3304      	adds	r3, #4
 8014ae2:	4619      	mov	r1, r3
 8014ae4:	4610      	mov	r0, r2
 8014ae6:	f7fe fc1e 	bl	8013326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014aee:	4b1b      	ldr	r3, [pc, #108]	; (8014b5c <xTaskIncrementTick+0x164>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d3b8      	bcc.n	8014a6a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8014af8:	2301      	movs	r3, #1
 8014afa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014afc:	e7b5      	b.n	8014a6a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014afe:	4b17      	ldr	r3, [pc, #92]	; (8014b5c <xTaskIncrementTick+0x164>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b04:	4914      	ldr	r1, [pc, #80]	; (8014b58 <xTaskIncrementTick+0x160>)
 8014b06:	4613      	mov	r3, r2
 8014b08:	009b      	lsls	r3, r3, #2
 8014b0a:	4413      	add	r3, r2
 8014b0c:	009b      	lsls	r3, r3, #2
 8014b0e:	440b      	add	r3, r1
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	2b01      	cmp	r3, #1
 8014b14:	d907      	bls.n	8014b26 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8014b16:	2301      	movs	r3, #1
 8014b18:	617b      	str	r3, [r7, #20]
 8014b1a:	e004      	b.n	8014b26 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014b1c:	4b10      	ldr	r3, [pc, #64]	; (8014b60 <xTaskIncrementTick+0x168>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	3301      	adds	r3, #1
 8014b22:	4a0f      	ldr	r2, [pc, #60]	; (8014b60 <xTaskIncrementTick+0x168>)
 8014b24:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014b26:	4b0f      	ldr	r3, [pc, #60]	; (8014b64 <xTaskIncrementTick+0x16c>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d001      	beq.n	8014b32 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8014b2e:	2301      	movs	r3, #1
 8014b30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014b32:	697b      	ldr	r3, [r7, #20]
}
 8014b34:	4618      	mov	r0, r3
 8014b36:	3718      	adds	r7, #24
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}
 8014b3c:	24000ea8 	.word	0x24000ea8
 8014b40:	24000e84 	.word	0x24000e84
 8014b44:	24000e38 	.word	0x24000e38
 8014b48:	24000e3c 	.word	0x24000e3c
 8014b4c:	24000e98 	.word	0x24000e98
 8014b50:	24000ea0 	.word	0x24000ea0
 8014b54:	24000e88 	.word	0x24000e88
 8014b58:	240009b0 	.word	0x240009b0
 8014b5c:	240009ac 	.word	0x240009ac
 8014b60:	24000e90 	.word	0x24000e90
 8014b64:	24000e94 	.word	0x24000e94

08014b68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014b68:	b480      	push	{r7}
 8014b6a:	b085      	sub	sp, #20
 8014b6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014b6e:	4b27      	ldr	r3, [pc, #156]	; (8014c0c <vTaskSwitchContext+0xa4>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d003      	beq.n	8014b7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014b76:	4b26      	ldr	r3, [pc, #152]	; (8014c10 <vTaskSwitchContext+0xa8>)
 8014b78:	2201      	movs	r2, #1
 8014b7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014b7c:	e040      	b.n	8014c00 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8014b7e:	4b24      	ldr	r3, [pc, #144]	; (8014c10 <vTaskSwitchContext+0xa8>)
 8014b80:	2200      	movs	r2, #0
 8014b82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b84:	4b23      	ldr	r3, [pc, #140]	; (8014c14 <vTaskSwitchContext+0xac>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	60fb      	str	r3, [r7, #12]
 8014b8a:	e00f      	b.n	8014bac <vTaskSwitchContext+0x44>
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d109      	bne.n	8014ba6 <vTaskSwitchContext+0x3e>
 8014b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b96:	f383 8811 	msr	BASEPRI, r3
 8014b9a:	f3bf 8f6f 	isb	sy
 8014b9e:	f3bf 8f4f 	dsb	sy
 8014ba2:	607b      	str	r3, [r7, #4]
 8014ba4:	e7fe      	b.n	8014ba4 <vTaskSwitchContext+0x3c>
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	3b01      	subs	r3, #1
 8014baa:	60fb      	str	r3, [r7, #12]
 8014bac:	491a      	ldr	r1, [pc, #104]	; (8014c18 <vTaskSwitchContext+0xb0>)
 8014bae:	68fa      	ldr	r2, [r7, #12]
 8014bb0:	4613      	mov	r3, r2
 8014bb2:	009b      	lsls	r3, r3, #2
 8014bb4:	4413      	add	r3, r2
 8014bb6:	009b      	lsls	r3, r3, #2
 8014bb8:	440b      	add	r3, r1
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d0e5      	beq.n	8014b8c <vTaskSwitchContext+0x24>
 8014bc0:	68fa      	ldr	r2, [r7, #12]
 8014bc2:	4613      	mov	r3, r2
 8014bc4:	009b      	lsls	r3, r3, #2
 8014bc6:	4413      	add	r3, r2
 8014bc8:	009b      	lsls	r3, r3, #2
 8014bca:	4a13      	ldr	r2, [pc, #76]	; (8014c18 <vTaskSwitchContext+0xb0>)
 8014bcc:	4413      	add	r3, r2
 8014bce:	60bb      	str	r3, [r7, #8]
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	685b      	ldr	r3, [r3, #4]
 8014bd4:	685a      	ldr	r2, [r3, #4]
 8014bd6:	68bb      	ldr	r3, [r7, #8]
 8014bd8:	605a      	str	r2, [r3, #4]
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	685a      	ldr	r2, [r3, #4]
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	3308      	adds	r3, #8
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d104      	bne.n	8014bf0 <vTaskSwitchContext+0x88>
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	685b      	ldr	r3, [r3, #4]
 8014bea:	685a      	ldr	r2, [r3, #4]
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	605a      	str	r2, [r3, #4]
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	685b      	ldr	r3, [r3, #4]
 8014bf4:	68db      	ldr	r3, [r3, #12]
 8014bf6:	4a09      	ldr	r2, [pc, #36]	; (8014c1c <vTaskSwitchContext+0xb4>)
 8014bf8:	6013      	str	r3, [r2, #0]
 8014bfa:	4a06      	ldr	r2, [pc, #24]	; (8014c14 <vTaskSwitchContext+0xac>)
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	6013      	str	r3, [r2, #0]
}
 8014c00:	bf00      	nop
 8014c02:	3714      	adds	r7, #20
 8014c04:	46bd      	mov	sp, r7
 8014c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0a:	4770      	bx	lr
 8014c0c:	24000ea8 	.word	0x24000ea8
 8014c10:	24000e94 	.word	0x24000e94
 8014c14:	24000e88 	.word	0x24000e88
 8014c18:	240009b0 	.word	0x240009b0
 8014c1c:	240009ac 	.word	0x240009ac

08014c20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b084      	sub	sp, #16
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
 8014c28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d109      	bne.n	8014c44 <vTaskPlaceOnEventList+0x24>
 8014c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c34:	f383 8811 	msr	BASEPRI, r3
 8014c38:	f3bf 8f6f 	isb	sy
 8014c3c:	f3bf 8f4f 	dsb	sy
 8014c40:	60fb      	str	r3, [r7, #12]
 8014c42:	e7fe      	b.n	8014c42 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c44:	4b07      	ldr	r3, [pc, #28]	; (8014c64 <vTaskPlaceOnEventList+0x44>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	3318      	adds	r3, #24
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f7fe fb8e 	bl	801336e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c52:	2101      	movs	r1, #1
 8014c54:	6838      	ldr	r0, [r7, #0]
 8014c56:	f000 fb7d 	bl	8015354 <prvAddCurrentTaskToDelayedList>
}
 8014c5a:	bf00      	nop
 8014c5c:	3710      	adds	r7, #16
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	240009ac 	.word	0x240009ac

08014c68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b086      	sub	sp, #24
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	60f8      	str	r0, [r7, #12]
 8014c70:	60b9      	str	r1, [r7, #8]
 8014c72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d109      	bne.n	8014c8e <vTaskPlaceOnEventListRestricted+0x26>
 8014c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c7e:	f383 8811 	msr	BASEPRI, r3
 8014c82:	f3bf 8f6f 	isb	sy
 8014c86:	f3bf 8f4f 	dsb	sy
 8014c8a:	617b      	str	r3, [r7, #20]
 8014c8c:	e7fe      	b.n	8014c8c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c8e:	4b0a      	ldr	r3, [pc, #40]	; (8014cb8 <vTaskPlaceOnEventListRestricted+0x50>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	3318      	adds	r3, #24
 8014c94:	4619      	mov	r1, r3
 8014c96:	68f8      	ldr	r0, [r7, #12]
 8014c98:	f7fe fb45 	bl	8013326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d002      	beq.n	8014ca8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8014ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ca6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014ca8:	6879      	ldr	r1, [r7, #4]
 8014caa:	68b8      	ldr	r0, [r7, #8]
 8014cac:	f000 fb52 	bl	8015354 <prvAddCurrentTaskToDelayedList>
	}
 8014cb0:	bf00      	nop
 8014cb2:	3718      	adds	r7, #24
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	240009ac 	.word	0x240009ac

08014cbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b086      	sub	sp, #24
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	68db      	ldr	r3, [r3, #12]
 8014cc8:	68db      	ldr	r3, [r3, #12]
 8014cca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014ccc:	693b      	ldr	r3, [r7, #16]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d109      	bne.n	8014ce6 <xTaskRemoveFromEventList+0x2a>
 8014cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cd6:	f383 8811 	msr	BASEPRI, r3
 8014cda:	f3bf 8f6f 	isb	sy
 8014cde:	f3bf 8f4f 	dsb	sy
 8014ce2:	60fb      	str	r3, [r7, #12]
 8014ce4:	e7fe      	b.n	8014ce4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	3318      	adds	r3, #24
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7fe fb78 	bl	80133e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cf0:	4b1d      	ldr	r3, [pc, #116]	; (8014d68 <xTaskRemoveFromEventList+0xac>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d11d      	bne.n	8014d34 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	3304      	adds	r3, #4
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7fe fb6f 	bl	80133e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d06:	4b19      	ldr	r3, [pc, #100]	; (8014d6c <xTaskRemoveFromEventList+0xb0>)
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	429a      	cmp	r2, r3
 8014d0c:	d903      	bls.n	8014d16 <xTaskRemoveFromEventList+0x5a>
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d12:	4a16      	ldr	r2, [pc, #88]	; (8014d6c <xTaskRemoveFromEventList+0xb0>)
 8014d14:	6013      	str	r3, [r2, #0]
 8014d16:	693b      	ldr	r3, [r7, #16]
 8014d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d1a:	4613      	mov	r3, r2
 8014d1c:	009b      	lsls	r3, r3, #2
 8014d1e:	4413      	add	r3, r2
 8014d20:	009b      	lsls	r3, r3, #2
 8014d22:	4a13      	ldr	r2, [pc, #76]	; (8014d70 <xTaskRemoveFromEventList+0xb4>)
 8014d24:	441a      	add	r2, r3
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	3304      	adds	r3, #4
 8014d2a:	4619      	mov	r1, r3
 8014d2c:	4610      	mov	r0, r2
 8014d2e:	f7fe fafa 	bl	8013326 <vListInsertEnd>
 8014d32:	e005      	b.n	8014d40 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014d34:	693b      	ldr	r3, [r7, #16]
 8014d36:	3318      	adds	r3, #24
 8014d38:	4619      	mov	r1, r3
 8014d3a:	480e      	ldr	r0, [pc, #56]	; (8014d74 <xTaskRemoveFromEventList+0xb8>)
 8014d3c:	f7fe faf3 	bl	8013326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d40:	693b      	ldr	r3, [r7, #16]
 8014d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d44:	4b0c      	ldr	r3, [pc, #48]	; (8014d78 <xTaskRemoveFromEventList+0xbc>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d905      	bls.n	8014d5a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014d4e:	2301      	movs	r3, #1
 8014d50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014d52:	4b0a      	ldr	r3, [pc, #40]	; (8014d7c <xTaskRemoveFromEventList+0xc0>)
 8014d54:	2201      	movs	r2, #1
 8014d56:	601a      	str	r2, [r3, #0]
 8014d58:	e001      	b.n	8014d5e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014d5e:	697b      	ldr	r3, [r7, #20]
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3718      	adds	r7, #24
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	24000ea8 	.word	0x24000ea8
 8014d6c:	24000e88 	.word	0x24000e88
 8014d70:	240009b0 	.word	0x240009b0
 8014d74:	24000e40 	.word	0x24000e40
 8014d78:	240009ac 	.word	0x240009ac
 8014d7c:	24000e94 	.word	0x24000e94

08014d80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014d80:	b480      	push	{r7}
 8014d82:	b083      	sub	sp, #12
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014d88:	4b06      	ldr	r3, [pc, #24]	; (8014da4 <vTaskInternalSetTimeOutState+0x24>)
 8014d8a:	681a      	ldr	r2, [r3, #0]
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014d90:	4b05      	ldr	r3, [pc, #20]	; (8014da8 <vTaskInternalSetTimeOutState+0x28>)
 8014d92:	681a      	ldr	r2, [r3, #0]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	605a      	str	r2, [r3, #4]
}
 8014d98:	bf00      	nop
 8014d9a:	370c      	adds	r7, #12
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da2:	4770      	bx	lr
 8014da4:	24000e98 	.word	0x24000e98
 8014da8:	24000e84 	.word	0x24000e84

08014dac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b088      	sub	sp, #32
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
 8014db4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d109      	bne.n	8014dd0 <xTaskCheckForTimeOut+0x24>
 8014dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dc0:	f383 8811 	msr	BASEPRI, r3
 8014dc4:	f3bf 8f6f 	isb	sy
 8014dc8:	f3bf 8f4f 	dsb	sy
 8014dcc:	613b      	str	r3, [r7, #16]
 8014dce:	e7fe      	b.n	8014dce <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d109      	bne.n	8014dea <xTaskCheckForTimeOut+0x3e>
 8014dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dda:	f383 8811 	msr	BASEPRI, r3
 8014dde:	f3bf 8f6f 	isb	sy
 8014de2:	f3bf 8f4f 	dsb	sy
 8014de6:	60fb      	str	r3, [r7, #12]
 8014de8:	e7fe      	b.n	8014de8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8014dea:	f000 ff77 	bl	8015cdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014dee:	4b1d      	ldr	r3, [pc, #116]	; (8014e64 <xTaskCheckForTimeOut+0xb8>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	685b      	ldr	r3, [r3, #4]
 8014df8:	69ba      	ldr	r2, [r7, #24]
 8014dfa:	1ad3      	subs	r3, r2, r3
 8014dfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e06:	d102      	bne.n	8014e0e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014e08:	2300      	movs	r3, #0
 8014e0a:	61fb      	str	r3, [r7, #28]
 8014e0c:	e023      	b.n	8014e56 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681a      	ldr	r2, [r3, #0]
 8014e12:	4b15      	ldr	r3, [pc, #84]	; (8014e68 <xTaskCheckForTimeOut+0xbc>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	429a      	cmp	r2, r3
 8014e18:	d007      	beq.n	8014e2a <xTaskCheckForTimeOut+0x7e>
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	685b      	ldr	r3, [r3, #4]
 8014e1e:	69ba      	ldr	r2, [r7, #24]
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d302      	bcc.n	8014e2a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014e24:	2301      	movs	r3, #1
 8014e26:	61fb      	str	r3, [r7, #28]
 8014e28:	e015      	b.n	8014e56 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	697a      	ldr	r2, [r7, #20]
 8014e30:	429a      	cmp	r2, r3
 8014e32:	d20b      	bcs.n	8014e4c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014e34:	683b      	ldr	r3, [r7, #0]
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	1ad2      	subs	r2, r2, r3
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f7ff ff9d 	bl	8014d80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014e46:	2300      	movs	r3, #0
 8014e48:	61fb      	str	r3, [r7, #28]
 8014e4a:	e004      	b.n	8014e56 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014e52:	2301      	movs	r3, #1
 8014e54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014e56:	f000 ff6f 	bl	8015d38 <vPortExitCritical>

	return xReturn;
 8014e5a:	69fb      	ldr	r3, [r7, #28]
}
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3720      	adds	r7, #32
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}
 8014e64:	24000e84 	.word	0x24000e84
 8014e68:	24000e98 	.word	0x24000e98

08014e6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014e70:	4b03      	ldr	r3, [pc, #12]	; (8014e80 <vTaskMissedYield+0x14>)
 8014e72:	2201      	movs	r2, #1
 8014e74:	601a      	str	r2, [r3, #0]
}
 8014e76:	bf00      	nop
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7e:	4770      	bx	lr
 8014e80:	24000e94 	.word	0x24000e94

08014e84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b082      	sub	sp, #8
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014e8c:	f000 f852 	bl	8014f34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014e90:	4b06      	ldr	r3, [pc, #24]	; (8014eac <prvIdleTask+0x28>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	2b01      	cmp	r3, #1
 8014e96:	d9f9      	bls.n	8014e8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014e98:	4b05      	ldr	r3, [pc, #20]	; (8014eb0 <prvIdleTask+0x2c>)
 8014e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e9e:	601a      	str	r2, [r3, #0]
 8014ea0:	f3bf 8f4f 	dsb	sy
 8014ea4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014ea8:	e7f0      	b.n	8014e8c <prvIdleTask+0x8>
 8014eaa:	bf00      	nop
 8014eac:	240009b0 	.word	0x240009b0
 8014eb0:	e000ed04 	.word	0xe000ed04

08014eb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b082      	sub	sp, #8
 8014eb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014eba:	2300      	movs	r3, #0
 8014ebc:	607b      	str	r3, [r7, #4]
 8014ebe:	e00c      	b.n	8014eda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014ec0:	687a      	ldr	r2, [r7, #4]
 8014ec2:	4613      	mov	r3, r2
 8014ec4:	009b      	lsls	r3, r3, #2
 8014ec6:	4413      	add	r3, r2
 8014ec8:	009b      	lsls	r3, r3, #2
 8014eca:	4a12      	ldr	r2, [pc, #72]	; (8014f14 <prvInitialiseTaskLists+0x60>)
 8014ecc:	4413      	add	r3, r2
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7fe f9fc 	bl	80132cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	3301      	adds	r3, #1
 8014ed8:	607b      	str	r3, [r7, #4]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	2b37      	cmp	r3, #55	; 0x37
 8014ede:	d9ef      	bls.n	8014ec0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014ee0:	480d      	ldr	r0, [pc, #52]	; (8014f18 <prvInitialiseTaskLists+0x64>)
 8014ee2:	f7fe f9f3 	bl	80132cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014ee6:	480d      	ldr	r0, [pc, #52]	; (8014f1c <prvInitialiseTaskLists+0x68>)
 8014ee8:	f7fe f9f0 	bl	80132cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014eec:	480c      	ldr	r0, [pc, #48]	; (8014f20 <prvInitialiseTaskLists+0x6c>)
 8014eee:	f7fe f9ed 	bl	80132cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014ef2:	480c      	ldr	r0, [pc, #48]	; (8014f24 <prvInitialiseTaskLists+0x70>)
 8014ef4:	f7fe f9ea 	bl	80132cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014ef8:	480b      	ldr	r0, [pc, #44]	; (8014f28 <prvInitialiseTaskLists+0x74>)
 8014efa:	f7fe f9e7 	bl	80132cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014efe:	4b0b      	ldr	r3, [pc, #44]	; (8014f2c <prvInitialiseTaskLists+0x78>)
 8014f00:	4a05      	ldr	r2, [pc, #20]	; (8014f18 <prvInitialiseTaskLists+0x64>)
 8014f02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014f04:	4b0a      	ldr	r3, [pc, #40]	; (8014f30 <prvInitialiseTaskLists+0x7c>)
 8014f06:	4a05      	ldr	r2, [pc, #20]	; (8014f1c <prvInitialiseTaskLists+0x68>)
 8014f08:	601a      	str	r2, [r3, #0]
}
 8014f0a:	bf00      	nop
 8014f0c:	3708      	adds	r7, #8
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}
 8014f12:	bf00      	nop
 8014f14:	240009b0 	.word	0x240009b0
 8014f18:	24000e10 	.word	0x24000e10
 8014f1c:	24000e24 	.word	0x24000e24
 8014f20:	24000e40 	.word	0x24000e40
 8014f24:	24000e54 	.word	0x24000e54
 8014f28:	24000e6c 	.word	0x24000e6c
 8014f2c:	24000e38 	.word	0x24000e38
 8014f30:	24000e3c 	.word	0x24000e3c

08014f34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b082      	sub	sp, #8
 8014f38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f3a:	e019      	b.n	8014f70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014f3c:	f000 fece 	bl	8015cdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f40:	4b0f      	ldr	r3, [pc, #60]	; (8014f80 <prvCheckTasksWaitingTermination+0x4c>)
 8014f42:	68db      	ldr	r3, [r3, #12]
 8014f44:	68db      	ldr	r3, [r3, #12]
 8014f46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	3304      	adds	r3, #4
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7fe fa47 	bl	80133e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014f52:	4b0c      	ldr	r3, [pc, #48]	; (8014f84 <prvCheckTasksWaitingTermination+0x50>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	3b01      	subs	r3, #1
 8014f58:	4a0a      	ldr	r2, [pc, #40]	; (8014f84 <prvCheckTasksWaitingTermination+0x50>)
 8014f5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014f5c:	4b0a      	ldr	r3, [pc, #40]	; (8014f88 <prvCheckTasksWaitingTermination+0x54>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	3b01      	subs	r3, #1
 8014f62:	4a09      	ldr	r2, [pc, #36]	; (8014f88 <prvCheckTasksWaitingTermination+0x54>)
 8014f64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014f66:	f000 fee7 	bl	8015d38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014f6a:	6878      	ldr	r0, [r7, #4]
 8014f6c:	f000 f80e 	bl	8014f8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f70:	4b05      	ldr	r3, [pc, #20]	; (8014f88 <prvCheckTasksWaitingTermination+0x54>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d1e1      	bne.n	8014f3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014f78:	bf00      	nop
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}
 8014f80:	24000e54 	.word	0x24000e54
 8014f84:	24000e80 	.word	0x24000e80
 8014f88:	24000e68 	.word	0x24000e68

08014f8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b084      	sub	sp, #16
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d108      	bne.n	8014fb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f001 f876 	bl	8016094 <vPortFree>
				vPortFree( pxTCB );
 8014fa8:	6878      	ldr	r0, [r7, #4]
 8014faa:	f001 f873 	bl	8016094 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014fae:	e017      	b.n	8014fe0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014fb6:	2b01      	cmp	r3, #1
 8014fb8:	d103      	bne.n	8014fc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f001 f86a 	bl	8016094 <vPortFree>
	}
 8014fc0:	e00e      	b.n	8014fe0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014fc8:	2b02      	cmp	r3, #2
 8014fca:	d009      	beq.n	8014fe0 <prvDeleteTCB+0x54>
 8014fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd0:	f383 8811 	msr	BASEPRI, r3
 8014fd4:	f3bf 8f6f 	isb	sy
 8014fd8:	f3bf 8f4f 	dsb	sy
 8014fdc:	60fb      	str	r3, [r7, #12]
 8014fde:	e7fe      	b.n	8014fde <prvDeleteTCB+0x52>
	}
 8014fe0:	bf00      	nop
 8014fe2:	3710      	adds	r7, #16
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}

08014fe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b083      	sub	sp, #12
 8014fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014fee:	4b0c      	ldr	r3, [pc, #48]	; (8015020 <prvResetNextTaskUnblockTime+0x38>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d104      	bne.n	8015002 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014ff8:	4b0a      	ldr	r3, [pc, #40]	; (8015024 <prvResetNextTaskUnblockTime+0x3c>)
 8014ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8014ffe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015000:	e008      	b.n	8015014 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015002:	4b07      	ldr	r3, [pc, #28]	; (8015020 <prvResetNextTaskUnblockTime+0x38>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	68db      	ldr	r3, [r3, #12]
 8015008:	68db      	ldr	r3, [r3, #12]
 801500a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	4a04      	ldr	r2, [pc, #16]	; (8015024 <prvResetNextTaskUnblockTime+0x3c>)
 8015012:	6013      	str	r3, [r2, #0]
}
 8015014:	bf00      	nop
 8015016:	370c      	adds	r7, #12
 8015018:	46bd      	mov	sp, r7
 801501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501e:	4770      	bx	lr
 8015020:	24000e38 	.word	0x24000e38
 8015024:	24000ea0 	.word	0x24000ea0

08015028 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8015028:	b480      	push	{r7}
 801502a:	b083      	sub	sp, #12
 801502c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801502e:	4b05      	ldr	r3, [pc, #20]	; (8015044 <xTaskGetCurrentTaskHandle+0x1c>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015034:	687b      	ldr	r3, [r7, #4]
	}
 8015036:	4618      	mov	r0, r3
 8015038:	370c      	adds	r7, #12
 801503a:	46bd      	mov	sp, r7
 801503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015040:	4770      	bx	lr
 8015042:	bf00      	nop
 8015044:	240009ac 	.word	0x240009ac

08015048 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015048:	b480      	push	{r7}
 801504a:	b083      	sub	sp, #12
 801504c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801504e:	4b0b      	ldr	r3, [pc, #44]	; (801507c <xTaskGetSchedulerState+0x34>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d102      	bne.n	801505c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015056:	2301      	movs	r3, #1
 8015058:	607b      	str	r3, [r7, #4]
 801505a:	e008      	b.n	801506e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801505c:	4b08      	ldr	r3, [pc, #32]	; (8015080 <xTaskGetSchedulerState+0x38>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d102      	bne.n	801506a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015064:	2302      	movs	r3, #2
 8015066:	607b      	str	r3, [r7, #4]
 8015068:	e001      	b.n	801506e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801506a:	2300      	movs	r3, #0
 801506c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801506e:	687b      	ldr	r3, [r7, #4]
	}
 8015070:	4618      	mov	r0, r3
 8015072:	370c      	adds	r7, #12
 8015074:	46bd      	mov	sp, r7
 8015076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507a:	4770      	bx	lr
 801507c:	24000e8c 	.word	0x24000e8c
 8015080:	24000ea8 	.word	0x24000ea8

08015084 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015084:	b580      	push	{r7, lr}
 8015086:	b084      	sub	sp, #16
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015090:	2300      	movs	r3, #0
 8015092:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d051      	beq.n	801513e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801509a:	68bb      	ldr	r3, [r7, #8]
 801509c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801509e:	4b2a      	ldr	r3, [pc, #168]	; (8015148 <xTaskPriorityInherit+0xc4>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d241      	bcs.n	801512c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80150a8:	68bb      	ldr	r3, [r7, #8]
 80150aa:	699b      	ldr	r3, [r3, #24]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	db06      	blt.n	80150be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150b0:	4b25      	ldr	r3, [pc, #148]	; (8015148 <xTaskPriorityInherit+0xc4>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80150ba:	68bb      	ldr	r3, [r7, #8]
 80150bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80150be:	68bb      	ldr	r3, [r7, #8]
 80150c0:	6959      	ldr	r1, [r3, #20]
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150c6:	4613      	mov	r3, r2
 80150c8:	009b      	lsls	r3, r3, #2
 80150ca:	4413      	add	r3, r2
 80150cc:	009b      	lsls	r3, r3, #2
 80150ce:	4a1f      	ldr	r2, [pc, #124]	; (801514c <xTaskPriorityInherit+0xc8>)
 80150d0:	4413      	add	r3, r2
 80150d2:	4299      	cmp	r1, r3
 80150d4:	d122      	bne.n	801511c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	3304      	adds	r3, #4
 80150da:	4618      	mov	r0, r3
 80150dc:	f7fe f980 	bl	80133e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80150e0:	4b19      	ldr	r3, [pc, #100]	; (8015148 <xTaskPriorityInherit+0xc4>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150ee:	4b18      	ldr	r3, [pc, #96]	; (8015150 <xTaskPriorityInherit+0xcc>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d903      	bls.n	80150fe <xTaskPriorityInherit+0x7a>
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150fa:	4a15      	ldr	r2, [pc, #84]	; (8015150 <xTaskPriorityInherit+0xcc>)
 80150fc:	6013      	str	r3, [r2, #0]
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015102:	4613      	mov	r3, r2
 8015104:	009b      	lsls	r3, r3, #2
 8015106:	4413      	add	r3, r2
 8015108:	009b      	lsls	r3, r3, #2
 801510a:	4a10      	ldr	r2, [pc, #64]	; (801514c <xTaskPriorityInherit+0xc8>)
 801510c:	441a      	add	r2, r3
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	3304      	adds	r3, #4
 8015112:	4619      	mov	r1, r3
 8015114:	4610      	mov	r0, r2
 8015116:	f7fe f906 	bl	8013326 <vListInsertEnd>
 801511a:	e004      	b.n	8015126 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801511c:	4b0a      	ldr	r3, [pc, #40]	; (8015148 <xTaskPriorityInherit+0xc4>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015126:	2301      	movs	r3, #1
 8015128:	60fb      	str	r3, [r7, #12]
 801512a:	e008      	b.n	801513e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801512c:	68bb      	ldr	r3, [r7, #8]
 801512e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015130:	4b05      	ldr	r3, [pc, #20]	; (8015148 <xTaskPriorityInherit+0xc4>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015136:	429a      	cmp	r2, r3
 8015138:	d201      	bcs.n	801513e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801513a:	2301      	movs	r3, #1
 801513c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801513e:	68fb      	ldr	r3, [r7, #12]
	}
 8015140:	4618      	mov	r0, r3
 8015142:	3710      	adds	r7, #16
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}
 8015148:	240009ac 	.word	0x240009ac
 801514c:	240009b0 	.word	0x240009b0
 8015150:	24000e88 	.word	0x24000e88

08015154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015154:	b580      	push	{r7, lr}
 8015156:	b086      	sub	sp, #24
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015160:	2300      	movs	r3, #0
 8015162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d054      	beq.n	8015214 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801516a:	4b2d      	ldr	r3, [pc, #180]	; (8015220 <xTaskPriorityDisinherit+0xcc>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	693a      	ldr	r2, [r7, #16]
 8015170:	429a      	cmp	r2, r3
 8015172:	d009      	beq.n	8015188 <xTaskPriorityDisinherit+0x34>
 8015174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015178:	f383 8811 	msr	BASEPRI, r3
 801517c:	f3bf 8f6f 	isb	sy
 8015180:	f3bf 8f4f 	dsb	sy
 8015184:	60fb      	str	r3, [r7, #12]
 8015186:	e7fe      	b.n	8015186 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801518c:	2b00      	cmp	r3, #0
 801518e:	d109      	bne.n	80151a4 <xTaskPriorityDisinherit+0x50>
 8015190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015194:	f383 8811 	msr	BASEPRI, r3
 8015198:	f3bf 8f6f 	isb	sy
 801519c:	f3bf 8f4f 	dsb	sy
 80151a0:	60bb      	str	r3, [r7, #8]
 80151a2:	e7fe      	b.n	80151a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151a8:	1e5a      	subs	r2, r3, #1
 80151aa:	693b      	ldr	r3, [r7, #16]
 80151ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80151ae:	693b      	ldr	r3, [r7, #16]
 80151b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d02c      	beq.n	8015214 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d128      	bne.n	8015214 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	3304      	adds	r3, #4
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fe f90a 	bl	80133e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80151dc:	693b      	ldr	r3, [r7, #16]
 80151de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80151e0:	693b      	ldr	r3, [r7, #16]
 80151e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151e4:	4b0f      	ldr	r3, [pc, #60]	; (8015224 <xTaskPriorityDisinherit+0xd0>)
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	429a      	cmp	r2, r3
 80151ea:	d903      	bls.n	80151f4 <xTaskPriorityDisinherit+0xa0>
 80151ec:	693b      	ldr	r3, [r7, #16]
 80151ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151f0:	4a0c      	ldr	r2, [pc, #48]	; (8015224 <xTaskPriorityDisinherit+0xd0>)
 80151f2:	6013      	str	r3, [r2, #0]
 80151f4:	693b      	ldr	r3, [r7, #16]
 80151f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151f8:	4613      	mov	r3, r2
 80151fa:	009b      	lsls	r3, r3, #2
 80151fc:	4413      	add	r3, r2
 80151fe:	009b      	lsls	r3, r3, #2
 8015200:	4a09      	ldr	r2, [pc, #36]	; (8015228 <xTaskPriorityDisinherit+0xd4>)
 8015202:	441a      	add	r2, r3
 8015204:	693b      	ldr	r3, [r7, #16]
 8015206:	3304      	adds	r3, #4
 8015208:	4619      	mov	r1, r3
 801520a:	4610      	mov	r0, r2
 801520c:	f7fe f88b 	bl	8013326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015210:	2301      	movs	r3, #1
 8015212:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015214:	697b      	ldr	r3, [r7, #20]
	}
 8015216:	4618      	mov	r0, r3
 8015218:	3718      	adds	r7, #24
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}
 801521e:	bf00      	nop
 8015220:	240009ac 	.word	0x240009ac
 8015224:	24000e88 	.word	0x24000e88
 8015228:	240009b0 	.word	0x240009b0

0801522c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801522c:	b580      	push	{r7, lr}
 801522e:	b088      	sub	sp, #32
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
 8015234:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801523a:	2301      	movs	r3, #1
 801523c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d068      	beq.n	8015316 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015244:	69bb      	ldr	r3, [r7, #24]
 8015246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015248:	2b00      	cmp	r3, #0
 801524a:	d109      	bne.n	8015260 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015250:	f383 8811 	msr	BASEPRI, r3
 8015254:	f3bf 8f6f 	isb	sy
 8015258:	f3bf 8f4f 	dsb	sy
 801525c:	60fb      	str	r3, [r7, #12]
 801525e:	e7fe      	b.n	801525e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015260:	69bb      	ldr	r3, [r7, #24]
 8015262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015264:	683a      	ldr	r2, [r7, #0]
 8015266:	429a      	cmp	r2, r3
 8015268:	d902      	bls.n	8015270 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	61fb      	str	r3, [r7, #28]
 801526e:	e002      	b.n	8015276 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015270:	69bb      	ldr	r3, [r7, #24]
 8015272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015274:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015276:	69bb      	ldr	r3, [r7, #24]
 8015278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801527a:	69fa      	ldr	r2, [r7, #28]
 801527c:	429a      	cmp	r2, r3
 801527e:	d04a      	beq.n	8015316 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015280:	69bb      	ldr	r3, [r7, #24]
 8015282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015284:	697a      	ldr	r2, [r7, #20]
 8015286:	429a      	cmp	r2, r3
 8015288:	d145      	bne.n	8015316 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801528a:	4b25      	ldr	r3, [pc, #148]	; (8015320 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	69ba      	ldr	r2, [r7, #24]
 8015290:	429a      	cmp	r2, r3
 8015292:	d109      	bne.n	80152a8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8015294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015298:	f383 8811 	msr	BASEPRI, r3
 801529c:	f3bf 8f6f 	isb	sy
 80152a0:	f3bf 8f4f 	dsb	sy
 80152a4:	60bb      	str	r3, [r7, #8]
 80152a6:	e7fe      	b.n	80152a6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80152a8:	69bb      	ldr	r3, [r7, #24]
 80152aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80152ae:	69bb      	ldr	r3, [r7, #24]
 80152b0:	69fa      	ldr	r2, [r7, #28]
 80152b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80152b4:	69bb      	ldr	r3, [r7, #24]
 80152b6:	699b      	ldr	r3, [r3, #24]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	db04      	blt.n	80152c6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80152bc:	69fb      	ldr	r3, [r7, #28]
 80152be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80152c2:	69bb      	ldr	r3, [r7, #24]
 80152c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80152c6:	69bb      	ldr	r3, [r7, #24]
 80152c8:	6959      	ldr	r1, [r3, #20]
 80152ca:	693a      	ldr	r2, [r7, #16]
 80152cc:	4613      	mov	r3, r2
 80152ce:	009b      	lsls	r3, r3, #2
 80152d0:	4413      	add	r3, r2
 80152d2:	009b      	lsls	r3, r3, #2
 80152d4:	4a13      	ldr	r2, [pc, #76]	; (8015324 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80152d6:	4413      	add	r3, r2
 80152d8:	4299      	cmp	r1, r3
 80152da:	d11c      	bne.n	8015316 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80152dc:	69bb      	ldr	r3, [r7, #24]
 80152de:	3304      	adds	r3, #4
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7fe f87d 	bl	80133e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80152e6:	69bb      	ldr	r3, [r7, #24]
 80152e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152ea:	4b0f      	ldr	r3, [pc, #60]	; (8015328 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d903      	bls.n	80152fa <vTaskPriorityDisinheritAfterTimeout+0xce>
 80152f2:	69bb      	ldr	r3, [r7, #24]
 80152f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152f6:	4a0c      	ldr	r2, [pc, #48]	; (8015328 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80152f8:	6013      	str	r3, [r2, #0]
 80152fa:	69bb      	ldr	r3, [r7, #24]
 80152fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152fe:	4613      	mov	r3, r2
 8015300:	009b      	lsls	r3, r3, #2
 8015302:	4413      	add	r3, r2
 8015304:	009b      	lsls	r3, r3, #2
 8015306:	4a07      	ldr	r2, [pc, #28]	; (8015324 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8015308:	441a      	add	r2, r3
 801530a:	69bb      	ldr	r3, [r7, #24]
 801530c:	3304      	adds	r3, #4
 801530e:	4619      	mov	r1, r3
 8015310:	4610      	mov	r0, r2
 8015312:	f7fe f808 	bl	8013326 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015316:	bf00      	nop
 8015318:	3720      	adds	r7, #32
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}
 801531e:	bf00      	nop
 8015320:	240009ac 	.word	0x240009ac
 8015324:	240009b0 	.word	0x240009b0
 8015328:	24000e88 	.word	0x24000e88

0801532c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801532c:	b480      	push	{r7}
 801532e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015330:	4b07      	ldr	r3, [pc, #28]	; (8015350 <pvTaskIncrementMutexHeldCount+0x24>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d004      	beq.n	8015342 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015338:	4b05      	ldr	r3, [pc, #20]	; (8015350 <pvTaskIncrementMutexHeldCount+0x24>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801533e:	3201      	adds	r2, #1
 8015340:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8015342:	4b03      	ldr	r3, [pc, #12]	; (8015350 <pvTaskIncrementMutexHeldCount+0x24>)
 8015344:	681b      	ldr	r3, [r3, #0]
	}
 8015346:	4618      	mov	r0, r3
 8015348:	46bd      	mov	sp, r7
 801534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534e:	4770      	bx	lr
 8015350:	240009ac 	.word	0x240009ac

08015354 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b084      	sub	sp, #16
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
 801535c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801535e:	4b21      	ldr	r3, [pc, #132]	; (80153e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015364:	4b20      	ldr	r3, [pc, #128]	; (80153e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	3304      	adds	r3, #4
 801536a:	4618      	mov	r0, r3
 801536c:	f7fe f838 	bl	80133e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015376:	d10a      	bne.n	801538e <prvAddCurrentTaskToDelayedList+0x3a>
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d007      	beq.n	801538e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801537e:	4b1a      	ldr	r3, [pc, #104]	; (80153e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	3304      	adds	r3, #4
 8015384:	4619      	mov	r1, r3
 8015386:	4819      	ldr	r0, [pc, #100]	; (80153ec <prvAddCurrentTaskToDelayedList+0x98>)
 8015388:	f7fd ffcd 	bl	8013326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801538c:	e026      	b.n	80153dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801538e:	68fa      	ldr	r2, [r7, #12]
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	4413      	add	r3, r2
 8015394:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015396:	4b14      	ldr	r3, [pc, #80]	; (80153e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	68ba      	ldr	r2, [r7, #8]
 801539c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801539e:	68ba      	ldr	r2, [r7, #8]
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d209      	bcs.n	80153ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153a6:	4b12      	ldr	r3, [pc, #72]	; (80153f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80153a8:	681a      	ldr	r2, [r3, #0]
 80153aa:	4b0f      	ldr	r3, [pc, #60]	; (80153e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	3304      	adds	r3, #4
 80153b0:	4619      	mov	r1, r3
 80153b2:	4610      	mov	r0, r2
 80153b4:	f7fd ffdb 	bl	801336e <vListInsert>
}
 80153b8:	e010      	b.n	80153dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153ba:	4b0e      	ldr	r3, [pc, #56]	; (80153f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80153bc:	681a      	ldr	r2, [r3, #0]
 80153be:	4b0a      	ldr	r3, [pc, #40]	; (80153e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	3304      	adds	r3, #4
 80153c4:	4619      	mov	r1, r3
 80153c6:	4610      	mov	r0, r2
 80153c8:	f7fd ffd1 	bl	801336e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80153cc:	4b0a      	ldr	r3, [pc, #40]	; (80153f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	68ba      	ldr	r2, [r7, #8]
 80153d2:	429a      	cmp	r2, r3
 80153d4:	d202      	bcs.n	80153dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80153d6:	4a08      	ldr	r2, [pc, #32]	; (80153f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	6013      	str	r3, [r2, #0]
}
 80153dc:	bf00      	nop
 80153de:	3710      	adds	r7, #16
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd80      	pop	{r7, pc}
 80153e4:	24000e84 	.word	0x24000e84
 80153e8:	240009ac 	.word	0x240009ac
 80153ec:	24000e6c 	.word	0x24000e6c
 80153f0:	24000e3c 	.word	0x24000e3c
 80153f4:	24000e38 	.word	0x24000e38
 80153f8:	24000ea0 	.word	0x24000ea0

080153fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b08a      	sub	sp, #40	; 0x28
 8015400:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015402:	2300      	movs	r3, #0
 8015404:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015406:	f000 faff 	bl	8015a08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801540a:	4b1c      	ldr	r3, [pc, #112]	; (801547c <xTimerCreateTimerTask+0x80>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d021      	beq.n	8015456 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015412:	2300      	movs	r3, #0
 8015414:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015416:	2300      	movs	r3, #0
 8015418:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801541a:	1d3a      	adds	r2, r7, #4
 801541c:	f107 0108 	add.w	r1, r7, #8
 8015420:	f107 030c 	add.w	r3, r7, #12
 8015424:	4618      	mov	r0, r3
 8015426:	f7fd ff37 	bl	8013298 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801542a:	6879      	ldr	r1, [r7, #4]
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	68fa      	ldr	r2, [r7, #12]
 8015430:	9202      	str	r2, [sp, #8]
 8015432:	9301      	str	r3, [sp, #4]
 8015434:	2302      	movs	r3, #2
 8015436:	9300      	str	r3, [sp, #0]
 8015438:	2300      	movs	r3, #0
 801543a:	460a      	mov	r2, r1
 801543c:	4910      	ldr	r1, [pc, #64]	; (8015480 <xTimerCreateTimerTask+0x84>)
 801543e:	4811      	ldr	r0, [pc, #68]	; (8015484 <xTimerCreateTimerTask+0x88>)
 8015440:	f7fe ff5e 	bl	8014300 <xTaskCreateStatic>
 8015444:	4602      	mov	r2, r0
 8015446:	4b10      	ldr	r3, [pc, #64]	; (8015488 <xTimerCreateTimerTask+0x8c>)
 8015448:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801544a:	4b0f      	ldr	r3, [pc, #60]	; (8015488 <xTimerCreateTimerTask+0x8c>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d001      	beq.n	8015456 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015452:	2301      	movs	r3, #1
 8015454:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d109      	bne.n	8015470 <xTimerCreateTimerTask+0x74>
 801545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015460:	f383 8811 	msr	BASEPRI, r3
 8015464:	f3bf 8f6f 	isb	sy
 8015468:	f3bf 8f4f 	dsb	sy
 801546c:	613b      	str	r3, [r7, #16]
 801546e:	e7fe      	b.n	801546e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8015470:	697b      	ldr	r3, [r7, #20]
}
 8015472:	4618      	mov	r0, r3
 8015474:	3718      	adds	r7, #24
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}
 801547a:	bf00      	nop
 801547c:	24000edc 	.word	0x24000edc
 8015480:	08017dc0 	.word	0x08017dc0
 8015484:	080155bd 	.word	0x080155bd
 8015488:	24000ee0 	.word	0x24000ee0

0801548c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b08a      	sub	sp, #40	; 0x28
 8015490:	af00      	add	r7, sp, #0
 8015492:	60f8      	str	r0, [r7, #12]
 8015494:	60b9      	str	r1, [r7, #8]
 8015496:	607a      	str	r2, [r7, #4]
 8015498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801549a:	2300      	movs	r3, #0
 801549c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d109      	bne.n	80154b8 <xTimerGenericCommand+0x2c>
 80154a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a8:	f383 8811 	msr	BASEPRI, r3
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	f3bf 8f4f 	dsb	sy
 80154b4:	623b      	str	r3, [r7, #32]
 80154b6:	e7fe      	b.n	80154b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80154b8:	4b19      	ldr	r3, [pc, #100]	; (8015520 <xTimerGenericCommand+0x94>)
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d02a      	beq.n	8015516 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80154cc:	68bb      	ldr	r3, [r7, #8]
 80154ce:	2b05      	cmp	r3, #5
 80154d0:	dc18      	bgt.n	8015504 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80154d2:	f7ff fdb9 	bl	8015048 <xTaskGetSchedulerState>
 80154d6:	4603      	mov	r3, r0
 80154d8:	2b02      	cmp	r3, #2
 80154da:	d109      	bne.n	80154f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80154dc:	4b10      	ldr	r3, [pc, #64]	; (8015520 <xTimerGenericCommand+0x94>)
 80154de:	6818      	ldr	r0, [r3, #0]
 80154e0:	f107 0110 	add.w	r1, r7, #16
 80154e4:	2300      	movs	r3, #0
 80154e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154e8:	f7fe f996 	bl	8013818 <xQueueGenericSend>
 80154ec:	6278      	str	r0, [r7, #36]	; 0x24
 80154ee:	e012      	b.n	8015516 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80154f0:	4b0b      	ldr	r3, [pc, #44]	; (8015520 <xTimerGenericCommand+0x94>)
 80154f2:	6818      	ldr	r0, [r3, #0]
 80154f4:	f107 0110 	add.w	r1, r7, #16
 80154f8:	2300      	movs	r3, #0
 80154fa:	2200      	movs	r2, #0
 80154fc:	f7fe f98c 	bl	8013818 <xQueueGenericSend>
 8015500:	6278      	str	r0, [r7, #36]	; 0x24
 8015502:	e008      	b.n	8015516 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015504:	4b06      	ldr	r3, [pc, #24]	; (8015520 <xTimerGenericCommand+0x94>)
 8015506:	6818      	ldr	r0, [r3, #0]
 8015508:	f107 0110 	add.w	r1, r7, #16
 801550c:	2300      	movs	r3, #0
 801550e:	683a      	ldr	r2, [r7, #0]
 8015510:	f7fe fa7c 	bl	8013a0c <xQueueGenericSendFromISR>
 8015514:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015518:	4618      	mov	r0, r3
 801551a:	3728      	adds	r7, #40	; 0x28
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	24000edc 	.word	0x24000edc

08015524 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b088      	sub	sp, #32
 8015528:	af02      	add	r7, sp, #8
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801552e:	4b22      	ldr	r3, [pc, #136]	; (80155b8 <prvProcessExpiredTimer+0x94>)
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	68db      	ldr	r3, [r3, #12]
 8015534:	68db      	ldr	r3, [r3, #12]
 8015536:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	3304      	adds	r3, #4
 801553c:	4618      	mov	r0, r3
 801553e:	f7fd ff4f 	bl	80133e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015548:	f003 0304 	and.w	r3, r3, #4
 801554c:	2b00      	cmp	r3, #0
 801554e:	d021      	beq.n	8015594 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	699a      	ldr	r2, [r3, #24]
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	18d1      	adds	r1, r2, r3
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	683a      	ldr	r2, [r7, #0]
 801555c:	6978      	ldr	r0, [r7, #20]
 801555e:	f000 f8d1 	bl	8015704 <prvInsertTimerInActiveList>
 8015562:	4603      	mov	r3, r0
 8015564:	2b00      	cmp	r3, #0
 8015566:	d01e      	beq.n	80155a6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015568:	2300      	movs	r3, #0
 801556a:	9300      	str	r3, [sp, #0]
 801556c:	2300      	movs	r3, #0
 801556e:	687a      	ldr	r2, [r7, #4]
 8015570:	2100      	movs	r1, #0
 8015572:	6978      	ldr	r0, [r7, #20]
 8015574:	f7ff ff8a 	bl	801548c <xTimerGenericCommand>
 8015578:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801557a:	693b      	ldr	r3, [r7, #16]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d112      	bne.n	80155a6 <prvProcessExpiredTimer+0x82>
 8015580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015584:	f383 8811 	msr	BASEPRI, r3
 8015588:	f3bf 8f6f 	isb	sy
 801558c:	f3bf 8f4f 	dsb	sy
 8015590:	60fb      	str	r3, [r7, #12]
 8015592:	e7fe      	b.n	8015592 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015594:	697b      	ldr	r3, [r7, #20]
 8015596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801559a:	f023 0301 	bic.w	r3, r3, #1
 801559e:	b2da      	uxtb	r2, r3
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	6a1b      	ldr	r3, [r3, #32]
 80155aa:	6978      	ldr	r0, [r7, #20]
 80155ac:	4798      	blx	r3
}
 80155ae:	bf00      	nop
 80155b0:	3718      	adds	r7, #24
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}
 80155b6:	bf00      	nop
 80155b8:	24000ed4 	.word	0x24000ed4

080155bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b084      	sub	sp, #16
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80155c4:	f107 0308 	add.w	r3, r7, #8
 80155c8:	4618      	mov	r0, r3
 80155ca:	f000 f857 	bl	801567c <prvGetNextExpireTime>
 80155ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	4619      	mov	r1, r3
 80155d4:	68f8      	ldr	r0, [r7, #12]
 80155d6:	f000 f803 	bl	80155e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80155da:	f000 f8d5 	bl	8015788 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80155de:	e7f1      	b.n	80155c4 <prvTimerTask+0x8>

080155e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b084      	sub	sp, #16
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80155ea:	f7ff f939 	bl	8014860 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80155ee:	f107 0308 	add.w	r3, r7, #8
 80155f2:	4618      	mov	r0, r3
 80155f4:	f000 f866 	bl	80156c4 <prvSampleTimeNow>
 80155f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80155fa:	68bb      	ldr	r3, [r7, #8]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d130      	bne.n	8015662 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d10a      	bne.n	801561c <prvProcessTimerOrBlockTask+0x3c>
 8015606:	687a      	ldr	r2, [r7, #4]
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	429a      	cmp	r2, r3
 801560c:	d806      	bhi.n	801561c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801560e:	f7ff f935 	bl	801487c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015612:	68f9      	ldr	r1, [r7, #12]
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f7ff ff85 	bl	8015524 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801561a:	e024      	b.n	8015666 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801561c:	683b      	ldr	r3, [r7, #0]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d008      	beq.n	8015634 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015622:	4b13      	ldr	r3, [pc, #76]	; (8015670 <prvProcessTimerOrBlockTask+0x90>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d101      	bne.n	8015630 <prvProcessTimerOrBlockTask+0x50>
 801562c:	2301      	movs	r3, #1
 801562e:	e000      	b.n	8015632 <prvProcessTimerOrBlockTask+0x52>
 8015630:	2300      	movs	r3, #0
 8015632:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015634:	4b0f      	ldr	r3, [pc, #60]	; (8015674 <prvProcessTimerOrBlockTask+0x94>)
 8015636:	6818      	ldr	r0, [r3, #0]
 8015638:	687a      	ldr	r2, [r7, #4]
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	1ad3      	subs	r3, r2, r3
 801563e:	683a      	ldr	r2, [r7, #0]
 8015640:	4619      	mov	r1, r3
 8015642:	f7fe fe29 	bl	8014298 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015646:	f7ff f919 	bl	801487c <xTaskResumeAll>
 801564a:	4603      	mov	r3, r0
 801564c:	2b00      	cmp	r3, #0
 801564e:	d10a      	bne.n	8015666 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015650:	4b09      	ldr	r3, [pc, #36]	; (8015678 <prvProcessTimerOrBlockTask+0x98>)
 8015652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015656:	601a      	str	r2, [r3, #0]
 8015658:	f3bf 8f4f 	dsb	sy
 801565c:	f3bf 8f6f 	isb	sy
}
 8015660:	e001      	b.n	8015666 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015662:	f7ff f90b 	bl	801487c <xTaskResumeAll>
}
 8015666:	bf00      	nop
 8015668:	3710      	adds	r7, #16
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}
 801566e:	bf00      	nop
 8015670:	24000ed8 	.word	0x24000ed8
 8015674:	24000edc 	.word	0x24000edc
 8015678:	e000ed04 	.word	0xe000ed04

0801567c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801567c:	b480      	push	{r7}
 801567e:	b085      	sub	sp, #20
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015684:	4b0e      	ldr	r3, [pc, #56]	; (80156c0 <prvGetNextExpireTime+0x44>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d101      	bne.n	8015692 <prvGetNextExpireTime+0x16>
 801568e:	2201      	movs	r2, #1
 8015690:	e000      	b.n	8015694 <prvGetNextExpireTime+0x18>
 8015692:	2200      	movs	r2, #0
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d105      	bne.n	80156ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80156a0:	4b07      	ldr	r3, [pc, #28]	; (80156c0 <prvGetNextExpireTime+0x44>)
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	68db      	ldr	r3, [r3, #12]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	60fb      	str	r3, [r7, #12]
 80156aa:	e001      	b.n	80156b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80156ac:	2300      	movs	r3, #0
 80156ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80156b0:	68fb      	ldr	r3, [r7, #12]
}
 80156b2:	4618      	mov	r0, r3
 80156b4:	3714      	adds	r7, #20
 80156b6:	46bd      	mov	sp, r7
 80156b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156bc:	4770      	bx	lr
 80156be:	bf00      	nop
 80156c0:	24000ed4 	.word	0x24000ed4

080156c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b084      	sub	sp, #16
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80156cc:	f7ff f972 	bl	80149b4 <xTaskGetTickCount>
 80156d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80156d2:	4b0b      	ldr	r3, [pc, #44]	; (8015700 <prvSampleTimeNow+0x3c>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	68fa      	ldr	r2, [r7, #12]
 80156d8:	429a      	cmp	r2, r3
 80156da:	d205      	bcs.n	80156e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80156dc:	f000 f930 	bl	8015940 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2201      	movs	r2, #1
 80156e4:	601a      	str	r2, [r3, #0]
 80156e6:	e002      	b.n	80156ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2200      	movs	r2, #0
 80156ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80156ee:	4a04      	ldr	r2, [pc, #16]	; (8015700 <prvSampleTimeNow+0x3c>)
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80156f4:	68fb      	ldr	r3, [r7, #12]
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3710      	adds	r7, #16
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}
 80156fe:	bf00      	nop
 8015700:	24000ee4 	.word	0x24000ee4

08015704 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b086      	sub	sp, #24
 8015708:	af00      	add	r7, sp, #0
 801570a:	60f8      	str	r0, [r7, #12]
 801570c:	60b9      	str	r1, [r7, #8]
 801570e:	607a      	str	r2, [r7, #4]
 8015710:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015712:	2300      	movs	r3, #0
 8015714:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	68ba      	ldr	r2, [r7, #8]
 801571a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	68fa      	ldr	r2, [r7, #12]
 8015720:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015722:	68ba      	ldr	r2, [r7, #8]
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	429a      	cmp	r2, r3
 8015728:	d812      	bhi.n	8015750 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801572a:	687a      	ldr	r2, [r7, #4]
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	1ad2      	subs	r2, r2, r3
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	699b      	ldr	r3, [r3, #24]
 8015734:	429a      	cmp	r2, r3
 8015736:	d302      	bcc.n	801573e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015738:	2301      	movs	r3, #1
 801573a:	617b      	str	r3, [r7, #20]
 801573c:	e01b      	b.n	8015776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801573e:	4b10      	ldr	r3, [pc, #64]	; (8015780 <prvInsertTimerInActiveList+0x7c>)
 8015740:	681a      	ldr	r2, [r3, #0]
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	3304      	adds	r3, #4
 8015746:	4619      	mov	r1, r3
 8015748:	4610      	mov	r0, r2
 801574a:	f7fd fe10 	bl	801336e <vListInsert>
 801574e:	e012      	b.n	8015776 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015750:	687a      	ldr	r2, [r7, #4]
 8015752:	683b      	ldr	r3, [r7, #0]
 8015754:	429a      	cmp	r2, r3
 8015756:	d206      	bcs.n	8015766 <prvInsertTimerInActiveList+0x62>
 8015758:	68ba      	ldr	r2, [r7, #8]
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	429a      	cmp	r2, r3
 801575e:	d302      	bcc.n	8015766 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015760:	2301      	movs	r3, #1
 8015762:	617b      	str	r3, [r7, #20]
 8015764:	e007      	b.n	8015776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015766:	4b07      	ldr	r3, [pc, #28]	; (8015784 <prvInsertTimerInActiveList+0x80>)
 8015768:	681a      	ldr	r2, [r3, #0]
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	3304      	adds	r3, #4
 801576e:	4619      	mov	r1, r3
 8015770:	4610      	mov	r0, r2
 8015772:	f7fd fdfc 	bl	801336e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015776:	697b      	ldr	r3, [r7, #20]
}
 8015778:	4618      	mov	r0, r3
 801577a:	3718      	adds	r7, #24
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}
 8015780:	24000ed8 	.word	0x24000ed8
 8015784:	24000ed4 	.word	0x24000ed4

08015788 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b08e      	sub	sp, #56	; 0x38
 801578c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801578e:	e0c6      	b.n	801591e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2b00      	cmp	r3, #0
 8015794:	da17      	bge.n	80157c6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015796:	1d3b      	adds	r3, r7, #4
 8015798:	3304      	adds	r3, #4
 801579a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d109      	bne.n	80157b6 <prvProcessReceivedCommands+0x2e>
 80157a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157a6:	f383 8811 	msr	BASEPRI, r3
 80157aa:	f3bf 8f6f 	isb	sy
 80157ae:	f3bf 8f4f 	dsb	sy
 80157b2:	61fb      	str	r3, [r7, #28]
 80157b4:	e7fe      	b.n	80157b4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80157b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157bc:	6850      	ldr	r0, [r2, #4]
 80157be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157c0:	6892      	ldr	r2, [r2, #8]
 80157c2:	4611      	mov	r1, r2
 80157c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	f2c0 80a7 	blt.w	801591c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80157d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157d4:	695b      	ldr	r3, [r3, #20]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d004      	beq.n	80157e4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80157da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157dc:	3304      	adds	r3, #4
 80157de:	4618      	mov	r0, r3
 80157e0:	f7fd fdfe 	bl	80133e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80157e4:	463b      	mov	r3, r7
 80157e6:	4618      	mov	r0, r3
 80157e8:	f7ff ff6c 	bl	80156c4 <prvSampleTimeNow>
 80157ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	2b09      	cmp	r3, #9
 80157f2:	f200 8094 	bhi.w	801591e <prvProcessReceivedCommands+0x196>
 80157f6:	a201      	add	r2, pc, #4	; (adr r2, 80157fc <prvProcessReceivedCommands+0x74>)
 80157f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157fc:	08015825 	.word	0x08015825
 8015800:	08015825 	.word	0x08015825
 8015804:	08015825 	.word	0x08015825
 8015808:	08015897 	.word	0x08015897
 801580c:	080158ab 	.word	0x080158ab
 8015810:	080158f3 	.word	0x080158f3
 8015814:	08015825 	.word	0x08015825
 8015818:	08015825 	.word	0x08015825
 801581c:	08015897 	.word	0x08015897
 8015820:	080158ab 	.word	0x080158ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801582a:	f043 0301 	orr.w	r3, r3, #1
 801582e:	b2da      	uxtb	r2, r3
 8015830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015836:	68ba      	ldr	r2, [r7, #8]
 8015838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801583a:	699b      	ldr	r3, [r3, #24]
 801583c:	18d1      	adds	r1, r2, r3
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015844:	f7ff ff5e 	bl	8015704 <prvInsertTimerInActiveList>
 8015848:	4603      	mov	r3, r0
 801584a:	2b00      	cmp	r3, #0
 801584c:	d067      	beq.n	801591e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015850:	6a1b      	ldr	r3, [r3, #32]
 8015852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015854:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801585c:	f003 0304 	and.w	r3, r3, #4
 8015860:	2b00      	cmp	r3, #0
 8015862:	d05c      	beq.n	801591e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015864:	68ba      	ldr	r2, [r7, #8]
 8015866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015868:	699b      	ldr	r3, [r3, #24]
 801586a:	441a      	add	r2, r3
 801586c:	2300      	movs	r3, #0
 801586e:	9300      	str	r3, [sp, #0]
 8015870:	2300      	movs	r3, #0
 8015872:	2100      	movs	r1, #0
 8015874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015876:	f7ff fe09 	bl	801548c <xTimerGenericCommand>
 801587a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801587c:	6a3b      	ldr	r3, [r7, #32]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d14d      	bne.n	801591e <prvProcessReceivedCommands+0x196>
 8015882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015886:	f383 8811 	msr	BASEPRI, r3
 801588a:	f3bf 8f6f 	isb	sy
 801588e:	f3bf 8f4f 	dsb	sy
 8015892:	61bb      	str	r3, [r7, #24]
 8015894:	e7fe      	b.n	8015894 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801589c:	f023 0301 	bic.w	r3, r3, #1
 80158a0:	b2da      	uxtb	r2, r3
 80158a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80158a8:	e039      	b.n	801591e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80158aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158b0:	f043 0301 	orr.w	r3, r3, #1
 80158b4:	b2da      	uxtb	r2, r3
 80158b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80158bc:	68ba      	ldr	r2, [r7, #8]
 80158be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80158c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158c4:	699b      	ldr	r3, [r3, #24]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d109      	bne.n	80158de <prvProcessReceivedCommands+0x156>
 80158ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158ce:	f383 8811 	msr	BASEPRI, r3
 80158d2:	f3bf 8f6f 	isb	sy
 80158d6:	f3bf 8f4f 	dsb	sy
 80158da:	617b      	str	r3, [r7, #20]
 80158dc:	e7fe      	b.n	80158dc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80158de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e0:	699a      	ldr	r2, [r3, #24]
 80158e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e4:	18d1      	adds	r1, r2, r3
 80158e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158ec:	f7ff ff0a 	bl	8015704 <prvInsertTimerInActiveList>
					break;
 80158f0:	e015      	b.n	801591e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80158f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158f8:	f003 0302 	and.w	r3, r3, #2
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d103      	bne.n	8015908 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8015900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015902:	f000 fbc7 	bl	8016094 <vPortFree>
 8015906:	e00a      	b.n	801591e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801590a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801590e:	f023 0301 	bic.w	r3, r3, #1
 8015912:	b2da      	uxtb	r2, r3
 8015914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801591a:	e000      	b.n	801591e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801591c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801591e:	4b07      	ldr	r3, [pc, #28]	; (801593c <prvProcessReceivedCommands+0x1b4>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	1d39      	adds	r1, r7, #4
 8015924:	2200      	movs	r2, #0
 8015926:	4618      	mov	r0, r3
 8015928:	f7fe f904 	bl	8013b34 <xQueueReceive>
 801592c:	4603      	mov	r3, r0
 801592e:	2b00      	cmp	r3, #0
 8015930:	f47f af2e 	bne.w	8015790 <prvProcessReceivedCommands+0x8>
	}
}
 8015934:	bf00      	nop
 8015936:	3730      	adds	r7, #48	; 0x30
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}
 801593c:	24000edc 	.word	0x24000edc

08015940 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b088      	sub	sp, #32
 8015944:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015946:	e047      	b.n	80159d8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015948:	4b2d      	ldr	r3, [pc, #180]	; (8015a00 <prvSwitchTimerLists+0xc0>)
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	68db      	ldr	r3, [r3, #12]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015952:	4b2b      	ldr	r3, [pc, #172]	; (8015a00 <prvSwitchTimerLists+0xc0>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	68db      	ldr	r3, [r3, #12]
 8015958:	68db      	ldr	r3, [r3, #12]
 801595a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	3304      	adds	r3, #4
 8015960:	4618      	mov	r0, r3
 8015962:	f7fd fd3d 	bl	80133e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	6a1b      	ldr	r3, [r3, #32]
 801596a:	68f8      	ldr	r0, [r7, #12]
 801596c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015974:	f003 0304 	and.w	r3, r3, #4
 8015978:	2b00      	cmp	r3, #0
 801597a:	d02d      	beq.n	80159d8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	699b      	ldr	r3, [r3, #24]
 8015980:	693a      	ldr	r2, [r7, #16]
 8015982:	4413      	add	r3, r2
 8015984:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015986:	68ba      	ldr	r2, [r7, #8]
 8015988:	693b      	ldr	r3, [r7, #16]
 801598a:	429a      	cmp	r2, r3
 801598c:	d90e      	bls.n	80159ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	68ba      	ldr	r2, [r7, #8]
 8015992:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	68fa      	ldr	r2, [r7, #12]
 8015998:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801599a:	4b19      	ldr	r3, [pc, #100]	; (8015a00 <prvSwitchTimerLists+0xc0>)
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	3304      	adds	r3, #4
 80159a2:	4619      	mov	r1, r3
 80159a4:	4610      	mov	r0, r2
 80159a6:	f7fd fce2 	bl	801336e <vListInsert>
 80159aa:	e015      	b.n	80159d8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80159ac:	2300      	movs	r3, #0
 80159ae:	9300      	str	r3, [sp, #0]
 80159b0:	2300      	movs	r3, #0
 80159b2:	693a      	ldr	r2, [r7, #16]
 80159b4:	2100      	movs	r1, #0
 80159b6:	68f8      	ldr	r0, [r7, #12]
 80159b8:	f7ff fd68 	bl	801548c <xTimerGenericCommand>
 80159bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d109      	bne.n	80159d8 <prvSwitchTimerLists+0x98>
 80159c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159c8:	f383 8811 	msr	BASEPRI, r3
 80159cc:	f3bf 8f6f 	isb	sy
 80159d0:	f3bf 8f4f 	dsb	sy
 80159d4:	603b      	str	r3, [r7, #0]
 80159d6:	e7fe      	b.n	80159d6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80159d8:	4b09      	ldr	r3, [pc, #36]	; (8015a00 <prvSwitchTimerLists+0xc0>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d1b2      	bne.n	8015948 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80159e2:	4b07      	ldr	r3, [pc, #28]	; (8015a00 <prvSwitchTimerLists+0xc0>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80159e8:	4b06      	ldr	r3, [pc, #24]	; (8015a04 <prvSwitchTimerLists+0xc4>)
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	4a04      	ldr	r2, [pc, #16]	; (8015a00 <prvSwitchTimerLists+0xc0>)
 80159ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80159f0:	4a04      	ldr	r2, [pc, #16]	; (8015a04 <prvSwitchTimerLists+0xc4>)
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	6013      	str	r3, [r2, #0]
}
 80159f6:	bf00      	nop
 80159f8:	3718      	adds	r7, #24
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	24000ed4 	.word	0x24000ed4
 8015a04:	24000ed8 	.word	0x24000ed8

08015a08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b082      	sub	sp, #8
 8015a0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015a0e:	f000 f965 	bl	8015cdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015a12:	4b15      	ldr	r3, [pc, #84]	; (8015a68 <prvCheckForValidListAndQueue+0x60>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d120      	bne.n	8015a5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015a1a:	4814      	ldr	r0, [pc, #80]	; (8015a6c <prvCheckForValidListAndQueue+0x64>)
 8015a1c:	f7fd fc56 	bl	80132cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015a20:	4813      	ldr	r0, [pc, #76]	; (8015a70 <prvCheckForValidListAndQueue+0x68>)
 8015a22:	f7fd fc53 	bl	80132cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015a26:	4b13      	ldr	r3, [pc, #76]	; (8015a74 <prvCheckForValidListAndQueue+0x6c>)
 8015a28:	4a10      	ldr	r2, [pc, #64]	; (8015a6c <prvCheckForValidListAndQueue+0x64>)
 8015a2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015a2c:	4b12      	ldr	r3, [pc, #72]	; (8015a78 <prvCheckForValidListAndQueue+0x70>)
 8015a2e:	4a10      	ldr	r2, [pc, #64]	; (8015a70 <prvCheckForValidListAndQueue+0x68>)
 8015a30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015a32:	2300      	movs	r3, #0
 8015a34:	9300      	str	r3, [sp, #0]
 8015a36:	4b11      	ldr	r3, [pc, #68]	; (8015a7c <prvCheckForValidListAndQueue+0x74>)
 8015a38:	4a11      	ldr	r2, [pc, #68]	; (8015a80 <prvCheckForValidListAndQueue+0x78>)
 8015a3a:	2110      	movs	r1, #16
 8015a3c:	200a      	movs	r0, #10
 8015a3e:	f7fd fd61 	bl	8013504 <xQueueGenericCreateStatic>
 8015a42:	4602      	mov	r2, r0
 8015a44:	4b08      	ldr	r3, [pc, #32]	; (8015a68 <prvCheckForValidListAndQueue+0x60>)
 8015a46:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015a48:	4b07      	ldr	r3, [pc, #28]	; (8015a68 <prvCheckForValidListAndQueue+0x60>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d005      	beq.n	8015a5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015a50:	4b05      	ldr	r3, [pc, #20]	; (8015a68 <prvCheckForValidListAndQueue+0x60>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	490b      	ldr	r1, [pc, #44]	; (8015a84 <prvCheckForValidListAndQueue+0x7c>)
 8015a56:	4618      	mov	r0, r3
 8015a58:	f7fe fbf6 	bl	8014248 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015a5c:	f000 f96c 	bl	8015d38 <vPortExitCritical>
}
 8015a60:	bf00      	nop
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	24000edc 	.word	0x24000edc
 8015a6c:	24000eac 	.word	0x24000eac
 8015a70:	24000ec0 	.word	0x24000ec0
 8015a74:	24000ed4 	.word	0x24000ed4
 8015a78:	24000ed8 	.word	0x24000ed8
 8015a7c:	24000f88 	.word	0x24000f88
 8015a80:	24000ee8 	.word	0x24000ee8
 8015a84:	08017dc8 	.word	0x08017dc8

08015a88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015a88:	b480      	push	{r7}
 8015a8a:	b085      	sub	sp, #20
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	60f8      	str	r0, [r7, #12]
 8015a90:	60b9      	str	r1, [r7, #8]
 8015a92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	3b04      	subs	r3, #4
 8015a98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	3b04      	subs	r3, #4
 8015aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015aa8:	68bb      	ldr	r3, [r7, #8]
 8015aaa:	f023 0201 	bic.w	r2, r3, #1
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	3b04      	subs	r3, #4
 8015ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015ab8:	4a0c      	ldr	r2, [pc, #48]	; (8015aec <pxPortInitialiseStack+0x64>)
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	3b14      	subs	r3, #20
 8015ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015ac4:	687a      	ldr	r2, [r7, #4]
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	3b04      	subs	r3, #4
 8015ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	f06f 0202 	mvn.w	r2, #2
 8015ad6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	3b20      	subs	r3, #32
 8015adc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015ade:	68fb      	ldr	r3, [r7, #12]
}
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	3714      	adds	r7, #20
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aea:	4770      	bx	lr
 8015aec:	08015af1 	.word	0x08015af1

08015af0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015af0:	b480      	push	{r7}
 8015af2:	b085      	sub	sp, #20
 8015af4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015af6:	2300      	movs	r3, #0
 8015af8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015afa:	4b11      	ldr	r3, [pc, #68]	; (8015b40 <prvTaskExitError+0x50>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b02:	d009      	beq.n	8015b18 <prvTaskExitError+0x28>
 8015b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b08:	f383 8811 	msr	BASEPRI, r3
 8015b0c:	f3bf 8f6f 	isb	sy
 8015b10:	f3bf 8f4f 	dsb	sy
 8015b14:	60fb      	str	r3, [r7, #12]
 8015b16:	e7fe      	b.n	8015b16 <prvTaskExitError+0x26>
 8015b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b1c:	f383 8811 	msr	BASEPRI, r3
 8015b20:	f3bf 8f6f 	isb	sy
 8015b24:	f3bf 8f4f 	dsb	sy
 8015b28:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015b2a:	bf00      	nop
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d0fc      	beq.n	8015b2c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015b32:	bf00      	nop
 8015b34:	3714      	adds	r7, #20
 8015b36:	46bd      	mov	sp, r7
 8015b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3c:	4770      	bx	lr
 8015b3e:	bf00      	nop
 8015b40:	24000120 	.word	0x24000120
	...

08015b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015b50:	4b07      	ldr	r3, [pc, #28]	; (8015b70 <pxCurrentTCBConst2>)
 8015b52:	6819      	ldr	r1, [r3, #0]
 8015b54:	6808      	ldr	r0, [r1, #0]
 8015b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b5a:	f380 8809 	msr	PSP, r0
 8015b5e:	f3bf 8f6f 	isb	sy
 8015b62:	f04f 0000 	mov.w	r0, #0
 8015b66:	f380 8811 	msr	BASEPRI, r0
 8015b6a:	4770      	bx	lr
 8015b6c:	f3af 8000 	nop.w

08015b70 <pxCurrentTCBConst2>:
 8015b70:	240009ac 	.word	0x240009ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015b74:	bf00      	nop
 8015b76:	bf00      	nop

08015b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015b78:	4808      	ldr	r0, [pc, #32]	; (8015b9c <prvPortStartFirstTask+0x24>)
 8015b7a:	6800      	ldr	r0, [r0, #0]
 8015b7c:	6800      	ldr	r0, [r0, #0]
 8015b7e:	f380 8808 	msr	MSP, r0
 8015b82:	f04f 0000 	mov.w	r0, #0
 8015b86:	f380 8814 	msr	CONTROL, r0
 8015b8a:	b662      	cpsie	i
 8015b8c:	b661      	cpsie	f
 8015b8e:	f3bf 8f4f 	dsb	sy
 8015b92:	f3bf 8f6f 	isb	sy
 8015b96:	df00      	svc	0
 8015b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015b9a:	bf00      	nop
 8015b9c:	e000ed08 	.word	0xe000ed08

08015ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b086      	sub	sp, #24
 8015ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015ba6:	4b44      	ldr	r3, [pc, #272]	; (8015cb8 <xPortStartScheduler+0x118>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	4a44      	ldr	r2, [pc, #272]	; (8015cbc <xPortStartScheduler+0x11c>)
 8015bac:	4293      	cmp	r3, r2
 8015bae:	d109      	bne.n	8015bc4 <xPortStartScheduler+0x24>
 8015bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bb4:	f383 8811 	msr	BASEPRI, r3
 8015bb8:	f3bf 8f6f 	isb	sy
 8015bbc:	f3bf 8f4f 	dsb	sy
 8015bc0:	613b      	str	r3, [r7, #16]
 8015bc2:	e7fe      	b.n	8015bc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015bc4:	4b3c      	ldr	r3, [pc, #240]	; (8015cb8 <xPortStartScheduler+0x118>)
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	4a3d      	ldr	r2, [pc, #244]	; (8015cc0 <xPortStartScheduler+0x120>)
 8015bca:	4293      	cmp	r3, r2
 8015bcc:	d109      	bne.n	8015be2 <xPortStartScheduler+0x42>
 8015bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd2:	f383 8811 	msr	BASEPRI, r3
 8015bd6:	f3bf 8f6f 	isb	sy
 8015bda:	f3bf 8f4f 	dsb	sy
 8015bde:	60fb      	str	r3, [r7, #12]
 8015be0:	e7fe      	b.n	8015be0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015be2:	4b38      	ldr	r3, [pc, #224]	; (8015cc4 <xPortStartScheduler+0x124>)
 8015be4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015be6:	697b      	ldr	r3, [r7, #20]
 8015be8:	781b      	ldrb	r3, [r3, #0]
 8015bea:	b2db      	uxtb	r3, r3
 8015bec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015bee:	697b      	ldr	r3, [r7, #20]
 8015bf0:	22ff      	movs	r2, #255	; 0xff
 8015bf2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	b2db      	uxtb	r3, r3
 8015bfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015bfc:	78fb      	ldrb	r3, [r7, #3]
 8015bfe:	b2db      	uxtb	r3, r3
 8015c00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015c04:	b2da      	uxtb	r2, r3
 8015c06:	4b30      	ldr	r3, [pc, #192]	; (8015cc8 <xPortStartScheduler+0x128>)
 8015c08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015c0a:	4b30      	ldr	r3, [pc, #192]	; (8015ccc <xPortStartScheduler+0x12c>)
 8015c0c:	2207      	movs	r2, #7
 8015c0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015c10:	e009      	b.n	8015c26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8015c12:	4b2e      	ldr	r3, [pc, #184]	; (8015ccc <xPortStartScheduler+0x12c>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	3b01      	subs	r3, #1
 8015c18:	4a2c      	ldr	r2, [pc, #176]	; (8015ccc <xPortStartScheduler+0x12c>)
 8015c1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015c1c:	78fb      	ldrb	r3, [r7, #3]
 8015c1e:	b2db      	uxtb	r3, r3
 8015c20:	005b      	lsls	r3, r3, #1
 8015c22:	b2db      	uxtb	r3, r3
 8015c24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015c26:	78fb      	ldrb	r3, [r7, #3]
 8015c28:	b2db      	uxtb	r3, r3
 8015c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015c2e:	2b80      	cmp	r3, #128	; 0x80
 8015c30:	d0ef      	beq.n	8015c12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015c32:	4b26      	ldr	r3, [pc, #152]	; (8015ccc <xPortStartScheduler+0x12c>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	f1c3 0307 	rsb	r3, r3, #7
 8015c3a:	2b04      	cmp	r3, #4
 8015c3c:	d009      	beq.n	8015c52 <xPortStartScheduler+0xb2>
 8015c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c42:	f383 8811 	msr	BASEPRI, r3
 8015c46:	f3bf 8f6f 	isb	sy
 8015c4a:	f3bf 8f4f 	dsb	sy
 8015c4e:	60bb      	str	r3, [r7, #8]
 8015c50:	e7fe      	b.n	8015c50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015c52:	4b1e      	ldr	r3, [pc, #120]	; (8015ccc <xPortStartScheduler+0x12c>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	021b      	lsls	r3, r3, #8
 8015c58:	4a1c      	ldr	r2, [pc, #112]	; (8015ccc <xPortStartScheduler+0x12c>)
 8015c5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015c5c:	4b1b      	ldr	r3, [pc, #108]	; (8015ccc <xPortStartScheduler+0x12c>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015c64:	4a19      	ldr	r2, [pc, #100]	; (8015ccc <xPortStartScheduler+0x12c>)
 8015c66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	b2da      	uxtb	r2, r3
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015c70:	4b17      	ldr	r3, [pc, #92]	; (8015cd0 <xPortStartScheduler+0x130>)
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	4a16      	ldr	r2, [pc, #88]	; (8015cd0 <xPortStartScheduler+0x130>)
 8015c76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015c7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015c7c:	4b14      	ldr	r3, [pc, #80]	; (8015cd0 <xPortStartScheduler+0x130>)
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	4a13      	ldr	r2, [pc, #76]	; (8015cd0 <xPortStartScheduler+0x130>)
 8015c82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015c86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015c88:	f000 f8d6 	bl	8015e38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015c8c:	4b11      	ldr	r3, [pc, #68]	; (8015cd4 <xPortStartScheduler+0x134>)
 8015c8e:	2200      	movs	r2, #0
 8015c90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015c92:	f000 f8f5 	bl	8015e80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015c96:	4b10      	ldr	r3, [pc, #64]	; (8015cd8 <xPortStartScheduler+0x138>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	4a0f      	ldr	r2, [pc, #60]	; (8015cd8 <xPortStartScheduler+0x138>)
 8015c9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015ca0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015ca2:	f7ff ff69 	bl	8015b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015ca6:	f7fe ff5f 	bl	8014b68 <vTaskSwitchContext>
	prvTaskExitError();
 8015caa:	f7ff ff21 	bl	8015af0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015cae:	2300      	movs	r3, #0
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3718      	adds	r7, #24
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	e000ed00 	.word	0xe000ed00
 8015cbc:	410fc271 	.word	0x410fc271
 8015cc0:	410fc270 	.word	0x410fc270
 8015cc4:	e000e400 	.word	0xe000e400
 8015cc8:	24000fd8 	.word	0x24000fd8
 8015ccc:	24000fdc 	.word	0x24000fdc
 8015cd0:	e000ed20 	.word	0xe000ed20
 8015cd4:	24000120 	.word	0x24000120
 8015cd8:	e000ef34 	.word	0xe000ef34

08015cdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015cdc:	b480      	push	{r7}
 8015cde:	b083      	sub	sp, #12
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ce6:	f383 8811 	msr	BASEPRI, r3
 8015cea:	f3bf 8f6f 	isb	sy
 8015cee:	f3bf 8f4f 	dsb	sy
 8015cf2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015cf4:	4b0e      	ldr	r3, [pc, #56]	; (8015d30 <vPortEnterCritical+0x54>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	3301      	adds	r3, #1
 8015cfa:	4a0d      	ldr	r2, [pc, #52]	; (8015d30 <vPortEnterCritical+0x54>)
 8015cfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015cfe:	4b0c      	ldr	r3, [pc, #48]	; (8015d30 <vPortEnterCritical+0x54>)
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	2b01      	cmp	r3, #1
 8015d04:	d10e      	bne.n	8015d24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015d06:	4b0b      	ldr	r3, [pc, #44]	; (8015d34 <vPortEnterCritical+0x58>)
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	b2db      	uxtb	r3, r3
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d009      	beq.n	8015d24 <vPortEnterCritical+0x48>
 8015d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d14:	f383 8811 	msr	BASEPRI, r3
 8015d18:	f3bf 8f6f 	isb	sy
 8015d1c:	f3bf 8f4f 	dsb	sy
 8015d20:	603b      	str	r3, [r7, #0]
 8015d22:	e7fe      	b.n	8015d22 <vPortEnterCritical+0x46>
	}
}
 8015d24:	bf00      	nop
 8015d26:	370c      	adds	r7, #12
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2e:	4770      	bx	lr
 8015d30:	24000120 	.word	0x24000120
 8015d34:	e000ed04 	.word	0xe000ed04

08015d38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015d38:	b480      	push	{r7}
 8015d3a:	b083      	sub	sp, #12
 8015d3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015d3e:	4b11      	ldr	r3, [pc, #68]	; (8015d84 <vPortExitCritical+0x4c>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d109      	bne.n	8015d5a <vPortExitCritical+0x22>
 8015d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d4a:	f383 8811 	msr	BASEPRI, r3
 8015d4e:	f3bf 8f6f 	isb	sy
 8015d52:	f3bf 8f4f 	dsb	sy
 8015d56:	607b      	str	r3, [r7, #4]
 8015d58:	e7fe      	b.n	8015d58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8015d5a:	4b0a      	ldr	r3, [pc, #40]	; (8015d84 <vPortExitCritical+0x4c>)
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	3b01      	subs	r3, #1
 8015d60:	4a08      	ldr	r2, [pc, #32]	; (8015d84 <vPortExitCritical+0x4c>)
 8015d62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015d64:	4b07      	ldr	r3, [pc, #28]	; (8015d84 <vPortExitCritical+0x4c>)
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d104      	bne.n	8015d76 <vPortExitCritical+0x3e>
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8015d76:	bf00      	nop
 8015d78:	370c      	adds	r7, #12
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d80:	4770      	bx	lr
 8015d82:	bf00      	nop
 8015d84:	24000120 	.word	0x24000120
	...

08015d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015d90:	f3ef 8009 	mrs	r0, PSP
 8015d94:	f3bf 8f6f 	isb	sy
 8015d98:	4b15      	ldr	r3, [pc, #84]	; (8015df0 <pxCurrentTCBConst>)
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	f01e 0f10 	tst.w	lr, #16
 8015da0:	bf08      	it	eq
 8015da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015daa:	6010      	str	r0, [r2, #0]
 8015dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015db4:	f380 8811 	msr	BASEPRI, r0
 8015db8:	f3bf 8f4f 	dsb	sy
 8015dbc:	f3bf 8f6f 	isb	sy
 8015dc0:	f7fe fed2 	bl	8014b68 <vTaskSwitchContext>
 8015dc4:	f04f 0000 	mov.w	r0, #0
 8015dc8:	f380 8811 	msr	BASEPRI, r0
 8015dcc:	bc09      	pop	{r0, r3}
 8015dce:	6819      	ldr	r1, [r3, #0]
 8015dd0:	6808      	ldr	r0, [r1, #0]
 8015dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dd6:	f01e 0f10 	tst.w	lr, #16
 8015dda:	bf08      	it	eq
 8015ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015de0:	f380 8809 	msr	PSP, r0
 8015de4:	f3bf 8f6f 	isb	sy
 8015de8:	4770      	bx	lr
 8015dea:	bf00      	nop
 8015dec:	f3af 8000 	nop.w

08015df0 <pxCurrentTCBConst>:
 8015df0:	240009ac 	.word	0x240009ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015df4:	bf00      	nop
 8015df6:	bf00      	nop

08015df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b082      	sub	sp, #8
 8015dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8015dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e02:	f383 8811 	msr	BASEPRI, r3
 8015e06:	f3bf 8f6f 	isb	sy
 8015e0a:	f3bf 8f4f 	dsb	sy
 8015e0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015e10:	f7fe fdf2 	bl	80149f8 <xTaskIncrementTick>
 8015e14:	4603      	mov	r3, r0
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d003      	beq.n	8015e22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015e1a:	4b06      	ldr	r3, [pc, #24]	; (8015e34 <SysTick_Handler+0x3c>)
 8015e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e20:	601a      	str	r2, [r3, #0]
 8015e22:	2300      	movs	r3, #0
 8015e24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8015e2c:	bf00      	nop
 8015e2e:	3708      	adds	r7, #8
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}
 8015e34:	e000ed04 	.word	0xe000ed04

08015e38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015e38:	b480      	push	{r7}
 8015e3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015e3c:	4b0b      	ldr	r3, [pc, #44]	; (8015e6c <vPortSetupTimerInterrupt+0x34>)
 8015e3e:	2200      	movs	r2, #0
 8015e40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015e42:	4b0b      	ldr	r3, [pc, #44]	; (8015e70 <vPortSetupTimerInterrupt+0x38>)
 8015e44:	2200      	movs	r2, #0
 8015e46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015e48:	4b0a      	ldr	r3, [pc, #40]	; (8015e74 <vPortSetupTimerInterrupt+0x3c>)
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	4a0a      	ldr	r2, [pc, #40]	; (8015e78 <vPortSetupTimerInterrupt+0x40>)
 8015e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8015e52:	099b      	lsrs	r3, r3, #6
 8015e54:	4a09      	ldr	r2, [pc, #36]	; (8015e7c <vPortSetupTimerInterrupt+0x44>)
 8015e56:	3b01      	subs	r3, #1
 8015e58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015e5a:	4b04      	ldr	r3, [pc, #16]	; (8015e6c <vPortSetupTimerInterrupt+0x34>)
 8015e5c:	2207      	movs	r2, #7
 8015e5e:	601a      	str	r2, [r3, #0]
}
 8015e60:	bf00      	nop
 8015e62:	46bd      	mov	sp, r7
 8015e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e68:	4770      	bx	lr
 8015e6a:	bf00      	nop
 8015e6c:	e000e010 	.word	0xe000e010
 8015e70:	e000e018 	.word	0xe000e018
 8015e74:	24000000 	.word	0x24000000
 8015e78:	10624dd3 	.word	0x10624dd3
 8015e7c:	e000e014 	.word	0xe000e014

08015e80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015e80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015e90 <vPortEnableVFP+0x10>
 8015e84:	6801      	ldr	r1, [r0, #0]
 8015e86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015e8a:	6001      	str	r1, [r0, #0]
 8015e8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015e8e:	bf00      	nop
 8015e90:	e000ed88 	.word	0xe000ed88

08015e94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015e94:	b480      	push	{r7}
 8015e96:	b085      	sub	sp, #20
 8015e98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015e9a:	f3ef 8305 	mrs	r3, IPSR
 8015e9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	2b0f      	cmp	r3, #15
 8015ea4:	d913      	bls.n	8015ece <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015ea6:	4a16      	ldr	r2, [pc, #88]	; (8015f00 <vPortValidateInterruptPriority+0x6c>)
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	4413      	add	r3, r2
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015eb0:	4b14      	ldr	r3, [pc, #80]	; (8015f04 <vPortValidateInterruptPriority+0x70>)
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	7afa      	ldrb	r2, [r7, #11]
 8015eb6:	429a      	cmp	r2, r3
 8015eb8:	d209      	bcs.n	8015ece <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8015eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ebe:	f383 8811 	msr	BASEPRI, r3
 8015ec2:	f3bf 8f6f 	isb	sy
 8015ec6:	f3bf 8f4f 	dsb	sy
 8015eca:	607b      	str	r3, [r7, #4]
 8015ecc:	e7fe      	b.n	8015ecc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015ece:	4b0e      	ldr	r3, [pc, #56]	; (8015f08 <vPortValidateInterruptPriority+0x74>)
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015ed6:	4b0d      	ldr	r3, [pc, #52]	; (8015f0c <vPortValidateInterruptPriority+0x78>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	429a      	cmp	r2, r3
 8015edc:	d909      	bls.n	8015ef2 <vPortValidateInterruptPriority+0x5e>
 8015ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ee2:	f383 8811 	msr	BASEPRI, r3
 8015ee6:	f3bf 8f6f 	isb	sy
 8015eea:	f3bf 8f4f 	dsb	sy
 8015eee:	603b      	str	r3, [r7, #0]
 8015ef0:	e7fe      	b.n	8015ef0 <vPortValidateInterruptPriority+0x5c>
	}
 8015ef2:	bf00      	nop
 8015ef4:	3714      	adds	r7, #20
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efc:	4770      	bx	lr
 8015efe:	bf00      	nop
 8015f00:	e000e3f0 	.word	0xe000e3f0
 8015f04:	24000fd8 	.word	0x24000fd8
 8015f08:	e000ed0c 	.word	0xe000ed0c
 8015f0c:	24000fdc 	.word	0x24000fdc

08015f10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b08a      	sub	sp, #40	; 0x28
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015f18:	2300      	movs	r3, #0
 8015f1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015f1c:	f7fe fca0 	bl	8014860 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015f20:	4b57      	ldr	r3, [pc, #348]	; (8016080 <pvPortMalloc+0x170>)
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d101      	bne.n	8015f2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015f28:	f000 f90c 	bl	8016144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015f2c:	4b55      	ldr	r3, [pc, #340]	; (8016084 <pvPortMalloc+0x174>)
 8015f2e:	681a      	ldr	r2, [r3, #0]
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	4013      	ands	r3, r2
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	f040 808c 	bne.w	8016052 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d01c      	beq.n	8015f7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8015f40:	2208      	movs	r2, #8
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	4413      	add	r3, r2
 8015f46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f003 0307 	and.w	r3, r3, #7
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d013      	beq.n	8015f7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	f023 0307 	bic.w	r3, r3, #7
 8015f58:	3308      	adds	r3, #8
 8015f5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	f003 0307 	and.w	r3, r3, #7
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d009      	beq.n	8015f7a <pvPortMalloc+0x6a>
 8015f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f6a:	f383 8811 	msr	BASEPRI, r3
 8015f6e:	f3bf 8f6f 	isb	sy
 8015f72:	f3bf 8f4f 	dsb	sy
 8015f76:	617b      	str	r3, [r7, #20]
 8015f78:	e7fe      	b.n	8015f78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d068      	beq.n	8016052 <pvPortMalloc+0x142>
 8015f80:	4b41      	ldr	r3, [pc, #260]	; (8016088 <pvPortMalloc+0x178>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	687a      	ldr	r2, [r7, #4]
 8015f86:	429a      	cmp	r2, r3
 8015f88:	d863      	bhi.n	8016052 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015f8a:	4b40      	ldr	r3, [pc, #256]	; (801608c <pvPortMalloc+0x17c>)
 8015f8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015f8e:	4b3f      	ldr	r3, [pc, #252]	; (801608c <pvPortMalloc+0x17c>)
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f94:	e004      	b.n	8015fa0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8015f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa2:	685b      	ldr	r3, [r3, #4]
 8015fa4:	687a      	ldr	r2, [r7, #4]
 8015fa6:	429a      	cmp	r2, r3
 8015fa8:	d903      	bls.n	8015fb2 <pvPortMalloc+0xa2>
 8015faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d1f1      	bne.n	8015f96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015fb2:	4b33      	ldr	r3, [pc, #204]	; (8016080 <pvPortMalloc+0x170>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fb8:	429a      	cmp	r2, r3
 8015fba:	d04a      	beq.n	8016052 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015fbc:	6a3b      	ldr	r3, [r7, #32]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	2208      	movs	r2, #8
 8015fc2:	4413      	add	r3, r2
 8015fc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fc8:	681a      	ldr	r2, [r3, #0]
 8015fca:	6a3b      	ldr	r3, [r7, #32]
 8015fcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd0:	685a      	ldr	r2, [r3, #4]
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	1ad2      	subs	r2, r2, r3
 8015fd6:	2308      	movs	r3, #8
 8015fd8:	005b      	lsls	r3, r3, #1
 8015fda:	429a      	cmp	r2, r3
 8015fdc:	d91e      	bls.n	801601c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	4413      	add	r3, r2
 8015fe4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015fe6:	69bb      	ldr	r3, [r7, #24]
 8015fe8:	f003 0307 	and.w	r3, r3, #7
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d009      	beq.n	8016004 <pvPortMalloc+0xf4>
 8015ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff4:	f383 8811 	msr	BASEPRI, r3
 8015ff8:	f3bf 8f6f 	isb	sy
 8015ffc:	f3bf 8f4f 	dsb	sy
 8016000:	613b      	str	r3, [r7, #16]
 8016002:	e7fe      	b.n	8016002 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016006:	685a      	ldr	r2, [r3, #4]
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	1ad2      	subs	r2, r2, r3
 801600c:	69bb      	ldr	r3, [r7, #24]
 801600e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016012:	687a      	ldr	r2, [r7, #4]
 8016014:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016016:	69b8      	ldr	r0, [r7, #24]
 8016018:	f000 f8f6 	bl	8016208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801601c:	4b1a      	ldr	r3, [pc, #104]	; (8016088 <pvPortMalloc+0x178>)
 801601e:	681a      	ldr	r2, [r3, #0]
 8016020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016022:	685b      	ldr	r3, [r3, #4]
 8016024:	1ad3      	subs	r3, r2, r3
 8016026:	4a18      	ldr	r2, [pc, #96]	; (8016088 <pvPortMalloc+0x178>)
 8016028:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801602a:	4b17      	ldr	r3, [pc, #92]	; (8016088 <pvPortMalloc+0x178>)
 801602c:	681a      	ldr	r2, [r3, #0]
 801602e:	4b18      	ldr	r3, [pc, #96]	; (8016090 <pvPortMalloc+0x180>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	429a      	cmp	r2, r3
 8016034:	d203      	bcs.n	801603e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016036:	4b14      	ldr	r3, [pc, #80]	; (8016088 <pvPortMalloc+0x178>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	4a15      	ldr	r2, [pc, #84]	; (8016090 <pvPortMalloc+0x180>)
 801603c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016040:	685a      	ldr	r2, [r3, #4]
 8016042:	4b10      	ldr	r3, [pc, #64]	; (8016084 <pvPortMalloc+0x174>)
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	431a      	orrs	r2, r3
 8016048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801604a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801604e:	2200      	movs	r2, #0
 8016050:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016052:	f7fe fc13 	bl	801487c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016056:	69fb      	ldr	r3, [r7, #28]
 8016058:	f003 0307 	and.w	r3, r3, #7
 801605c:	2b00      	cmp	r3, #0
 801605e:	d009      	beq.n	8016074 <pvPortMalloc+0x164>
 8016060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016064:	f383 8811 	msr	BASEPRI, r3
 8016068:	f3bf 8f6f 	isb	sy
 801606c:	f3bf 8f4f 	dsb	sy
 8016070:	60fb      	str	r3, [r7, #12]
 8016072:	e7fe      	b.n	8016072 <pvPortMalloc+0x162>
	return pvReturn;
 8016074:	69fb      	ldr	r3, [r7, #28]
}
 8016076:	4618      	mov	r0, r3
 8016078:	3728      	adds	r7, #40	; 0x28
 801607a:	46bd      	mov	sp, r7
 801607c:	bd80      	pop	{r7, pc}
 801607e:	bf00      	nop
 8016080:	240087e8 	.word	0x240087e8
 8016084:	240087f4 	.word	0x240087f4
 8016088:	240087ec 	.word	0x240087ec
 801608c:	240087e0 	.word	0x240087e0
 8016090:	240087f0 	.word	0x240087f0

08016094 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b086      	sub	sp, #24
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d046      	beq.n	8016134 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80160a6:	2308      	movs	r3, #8
 80160a8:	425b      	negs	r3, r3
 80160aa:	697a      	ldr	r2, [r7, #20]
 80160ac:	4413      	add	r3, r2
 80160ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80160b0:	697b      	ldr	r3, [r7, #20]
 80160b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	685a      	ldr	r2, [r3, #4]
 80160b8:	4b20      	ldr	r3, [pc, #128]	; (801613c <vPortFree+0xa8>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	4013      	ands	r3, r2
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d109      	bne.n	80160d6 <vPortFree+0x42>
 80160c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160c6:	f383 8811 	msr	BASEPRI, r3
 80160ca:	f3bf 8f6f 	isb	sy
 80160ce:	f3bf 8f4f 	dsb	sy
 80160d2:	60fb      	str	r3, [r7, #12]
 80160d4:	e7fe      	b.n	80160d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80160d6:	693b      	ldr	r3, [r7, #16]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d009      	beq.n	80160f2 <vPortFree+0x5e>
 80160de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160e2:	f383 8811 	msr	BASEPRI, r3
 80160e6:	f3bf 8f6f 	isb	sy
 80160ea:	f3bf 8f4f 	dsb	sy
 80160ee:	60bb      	str	r3, [r7, #8]
 80160f0:	e7fe      	b.n	80160f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80160f2:	693b      	ldr	r3, [r7, #16]
 80160f4:	685a      	ldr	r2, [r3, #4]
 80160f6:	4b11      	ldr	r3, [pc, #68]	; (801613c <vPortFree+0xa8>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	4013      	ands	r3, r2
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d019      	beq.n	8016134 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016100:	693b      	ldr	r3, [r7, #16]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d115      	bne.n	8016134 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016108:	693b      	ldr	r3, [r7, #16]
 801610a:	685a      	ldr	r2, [r3, #4]
 801610c:	4b0b      	ldr	r3, [pc, #44]	; (801613c <vPortFree+0xa8>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	43db      	mvns	r3, r3
 8016112:	401a      	ands	r2, r3
 8016114:	693b      	ldr	r3, [r7, #16]
 8016116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016118:	f7fe fba2 	bl	8014860 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801611c:	693b      	ldr	r3, [r7, #16]
 801611e:	685a      	ldr	r2, [r3, #4]
 8016120:	4b07      	ldr	r3, [pc, #28]	; (8016140 <vPortFree+0xac>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	4413      	add	r3, r2
 8016126:	4a06      	ldr	r2, [pc, #24]	; (8016140 <vPortFree+0xac>)
 8016128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801612a:	6938      	ldr	r0, [r7, #16]
 801612c:	f000 f86c 	bl	8016208 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016130:	f7fe fba4 	bl	801487c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016134:	bf00      	nop
 8016136:	3718      	adds	r7, #24
 8016138:	46bd      	mov	sp, r7
 801613a:	bd80      	pop	{r7, pc}
 801613c:	240087f4 	.word	0x240087f4
 8016140:	240087ec 	.word	0x240087ec

08016144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016144:	b480      	push	{r7}
 8016146:	b085      	sub	sp, #20
 8016148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801614a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 801614e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016150:	4b27      	ldr	r3, [pc, #156]	; (80161f0 <prvHeapInit+0xac>)
 8016152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	f003 0307 	and.w	r3, r3, #7
 801615a:	2b00      	cmp	r3, #0
 801615c:	d00c      	beq.n	8016178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	3307      	adds	r3, #7
 8016162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	f023 0307 	bic.w	r3, r3, #7
 801616a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801616c:	68ba      	ldr	r2, [r7, #8]
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	1ad3      	subs	r3, r2, r3
 8016172:	4a1f      	ldr	r2, [pc, #124]	; (80161f0 <prvHeapInit+0xac>)
 8016174:	4413      	add	r3, r2
 8016176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801617c:	4a1d      	ldr	r2, [pc, #116]	; (80161f4 <prvHeapInit+0xb0>)
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016182:	4b1c      	ldr	r3, [pc, #112]	; (80161f4 <prvHeapInit+0xb0>)
 8016184:	2200      	movs	r2, #0
 8016186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	68ba      	ldr	r2, [r7, #8]
 801618c:	4413      	add	r3, r2
 801618e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016190:	2208      	movs	r2, #8
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	1a9b      	subs	r3, r3, r2
 8016196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	f023 0307 	bic.w	r3, r3, #7
 801619e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	4a15      	ldr	r2, [pc, #84]	; (80161f8 <prvHeapInit+0xb4>)
 80161a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80161a6:	4b14      	ldr	r3, [pc, #80]	; (80161f8 <prvHeapInit+0xb4>)
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	2200      	movs	r2, #0
 80161ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80161ae:	4b12      	ldr	r3, [pc, #72]	; (80161f8 <prvHeapInit+0xb4>)
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	2200      	movs	r2, #0
 80161b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80161ba:	683b      	ldr	r3, [r7, #0]
 80161bc:	68fa      	ldr	r2, [r7, #12]
 80161be:	1ad2      	subs	r2, r2, r3
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80161c4:	4b0c      	ldr	r3, [pc, #48]	; (80161f8 <prvHeapInit+0xb4>)
 80161c6:	681a      	ldr	r2, [r3, #0]
 80161c8:	683b      	ldr	r3, [r7, #0]
 80161ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80161cc:	683b      	ldr	r3, [r7, #0]
 80161ce:	685b      	ldr	r3, [r3, #4]
 80161d0:	4a0a      	ldr	r2, [pc, #40]	; (80161fc <prvHeapInit+0xb8>)
 80161d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80161d4:	683b      	ldr	r3, [r7, #0]
 80161d6:	685b      	ldr	r3, [r3, #4]
 80161d8:	4a09      	ldr	r2, [pc, #36]	; (8016200 <prvHeapInit+0xbc>)
 80161da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80161dc:	4b09      	ldr	r3, [pc, #36]	; (8016204 <prvHeapInit+0xc0>)
 80161de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80161e2:	601a      	str	r2, [r3, #0]
}
 80161e4:	bf00      	nop
 80161e6:	3714      	adds	r7, #20
 80161e8:	46bd      	mov	sp, r7
 80161ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ee:	4770      	bx	lr
 80161f0:	24000fe0 	.word	0x24000fe0
 80161f4:	240087e0 	.word	0x240087e0
 80161f8:	240087e8 	.word	0x240087e8
 80161fc:	240087f0 	.word	0x240087f0
 8016200:	240087ec 	.word	0x240087ec
 8016204:	240087f4 	.word	0x240087f4

08016208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016208:	b480      	push	{r7}
 801620a:	b085      	sub	sp, #20
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016210:	4b28      	ldr	r3, [pc, #160]	; (80162b4 <prvInsertBlockIntoFreeList+0xac>)
 8016212:	60fb      	str	r3, [r7, #12]
 8016214:	e002      	b.n	801621c <prvInsertBlockIntoFreeList+0x14>
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	60fb      	str	r3, [r7, #12]
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	687a      	ldr	r2, [r7, #4]
 8016222:	429a      	cmp	r2, r3
 8016224:	d8f7      	bhi.n	8016216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	685b      	ldr	r3, [r3, #4]
 801622e:	68ba      	ldr	r2, [r7, #8]
 8016230:	4413      	add	r3, r2
 8016232:	687a      	ldr	r2, [r7, #4]
 8016234:	429a      	cmp	r2, r3
 8016236:	d108      	bne.n	801624a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	685a      	ldr	r2, [r3, #4]
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	685b      	ldr	r3, [r3, #4]
 8016240:	441a      	add	r2, r3
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	685b      	ldr	r3, [r3, #4]
 8016252:	68ba      	ldr	r2, [r7, #8]
 8016254:	441a      	add	r2, r3
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	429a      	cmp	r2, r3
 801625c:	d118      	bne.n	8016290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	681a      	ldr	r2, [r3, #0]
 8016262:	4b15      	ldr	r3, [pc, #84]	; (80162b8 <prvInsertBlockIntoFreeList+0xb0>)
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	429a      	cmp	r2, r3
 8016268:	d00d      	beq.n	8016286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	685a      	ldr	r2, [r3, #4]
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	685b      	ldr	r3, [r3, #4]
 8016274:	441a      	add	r2, r3
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	681a      	ldr	r2, [r3, #0]
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	601a      	str	r2, [r3, #0]
 8016284:	e008      	b.n	8016298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016286:	4b0c      	ldr	r3, [pc, #48]	; (80162b8 <prvInsertBlockIntoFreeList+0xb0>)
 8016288:	681a      	ldr	r2, [r3, #0]
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	601a      	str	r2, [r3, #0]
 801628e:	e003      	b.n	8016298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	681a      	ldr	r2, [r3, #0]
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016298:	68fa      	ldr	r2, [r7, #12]
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	429a      	cmp	r2, r3
 801629e:	d002      	beq.n	80162a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	687a      	ldr	r2, [r7, #4]
 80162a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80162a6:	bf00      	nop
 80162a8:	3714      	adds	r7, #20
 80162aa:	46bd      	mov	sp, r7
 80162ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b0:	4770      	bx	lr
 80162b2:	bf00      	nop
 80162b4:	240087e0 	.word	0x240087e0
 80162b8:	240087e8 	.word	0x240087e8

080162bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80162c0:	2200      	movs	r2, #0
 80162c2:	4913      	ldr	r1, [pc, #76]	; (8016310 <MX_USB_DEVICE_Init+0x54>)
 80162c4:	4813      	ldr	r0, [pc, #76]	; (8016314 <MX_USB_DEVICE_Init+0x58>)
 80162c6:	f7fb f9df 	bl	8011688 <USBD_Init>
 80162ca:	4603      	mov	r3, r0
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d001      	beq.n	80162d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80162d0:	f7eb fb60 	bl	8001994 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80162d4:	4910      	ldr	r1, [pc, #64]	; (8016318 <MX_USB_DEVICE_Init+0x5c>)
 80162d6:	480f      	ldr	r0, [pc, #60]	; (8016314 <MX_USB_DEVICE_Init+0x58>)
 80162d8:	f7fb fa0c 	bl	80116f4 <USBD_RegisterClass>
 80162dc:	4603      	mov	r3, r0
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d001      	beq.n	80162e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80162e2:	f7eb fb57 	bl	8001994 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80162e6:	490d      	ldr	r1, [pc, #52]	; (801631c <MX_USB_DEVICE_Init+0x60>)
 80162e8:	480a      	ldr	r0, [pc, #40]	; (8016314 <MX_USB_DEVICE_Init+0x58>)
 80162ea:	f7fb f931 	bl	8011550 <USBD_CDC_RegisterInterface>
 80162ee:	4603      	mov	r3, r0
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d001      	beq.n	80162f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80162f4:	f7eb fb4e 	bl	8001994 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80162f8:	4806      	ldr	r0, [pc, #24]	; (8016314 <MX_USB_DEVICE_Init+0x58>)
 80162fa:	f7fb fa1c 	bl	8011736 <USBD_Start>
 80162fe:	4603      	mov	r3, r0
 8016300:	2b00      	cmp	r3, #0
 8016302:	d001      	beq.n	8016308 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016304:	f7eb fb46 	bl	8001994 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016308:	f7f1 fd46 	bl	8007d98 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801630c:	bf00      	nop
 801630e:	bd80      	pop	{r7, pc}
 8016310:	24000138 	.word	0x24000138
 8016314:	2401c9cc 	.word	0x2401c9cc
 8016318:	2400001c 	.word	0x2400001c
 801631c:	24000124 	.word	0x24000124

08016320 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016324:	2200      	movs	r2, #0
 8016326:	4905      	ldr	r1, [pc, #20]	; (801633c <CDC_Init_FS+0x1c>)
 8016328:	4805      	ldr	r0, [pc, #20]	; (8016340 <CDC_Init_FS+0x20>)
 801632a:	f7fb f926 	bl	801157a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801632e:	4905      	ldr	r1, [pc, #20]	; (8016344 <CDC_Init_FS+0x24>)
 8016330:	4803      	ldr	r0, [pc, #12]	; (8016340 <CDC_Init_FS+0x20>)
 8016332:	f7fb f93b 	bl	80115ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016336:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016338:	4618      	mov	r0, r3
 801633a:	bd80      	pop	{r7, pc}
 801633c:	2401d49c 	.word	0x2401d49c
 8016340:	2401c9cc 	.word	0x2401c9cc
 8016344:	2401cc9c 	.word	0x2401cc9c

08016348 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016348:	b480      	push	{r7}
 801634a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801634c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801634e:	4618      	mov	r0, r3
 8016350:	46bd      	mov	sp, r7
 8016352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016356:	4770      	bx	lr

08016358 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016358:	b480      	push	{r7}
 801635a:	b083      	sub	sp, #12
 801635c:	af00      	add	r7, sp, #0
 801635e:	4603      	mov	r3, r0
 8016360:	6039      	str	r1, [r7, #0]
 8016362:	71fb      	strb	r3, [r7, #7]
 8016364:	4613      	mov	r3, r2
 8016366:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016368:	79fb      	ldrb	r3, [r7, #7]
 801636a:	2b23      	cmp	r3, #35	; 0x23
 801636c:	d84a      	bhi.n	8016404 <CDC_Control_FS+0xac>
 801636e:	a201      	add	r2, pc, #4	; (adr r2, 8016374 <CDC_Control_FS+0x1c>)
 8016370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016374:	08016405 	.word	0x08016405
 8016378:	08016405 	.word	0x08016405
 801637c:	08016405 	.word	0x08016405
 8016380:	08016405 	.word	0x08016405
 8016384:	08016405 	.word	0x08016405
 8016388:	08016405 	.word	0x08016405
 801638c:	08016405 	.word	0x08016405
 8016390:	08016405 	.word	0x08016405
 8016394:	08016405 	.word	0x08016405
 8016398:	08016405 	.word	0x08016405
 801639c:	08016405 	.word	0x08016405
 80163a0:	08016405 	.word	0x08016405
 80163a4:	08016405 	.word	0x08016405
 80163a8:	08016405 	.word	0x08016405
 80163ac:	08016405 	.word	0x08016405
 80163b0:	08016405 	.word	0x08016405
 80163b4:	08016405 	.word	0x08016405
 80163b8:	08016405 	.word	0x08016405
 80163bc:	08016405 	.word	0x08016405
 80163c0:	08016405 	.word	0x08016405
 80163c4:	08016405 	.word	0x08016405
 80163c8:	08016405 	.word	0x08016405
 80163cc:	08016405 	.word	0x08016405
 80163d0:	08016405 	.word	0x08016405
 80163d4:	08016405 	.word	0x08016405
 80163d8:	08016405 	.word	0x08016405
 80163dc:	08016405 	.word	0x08016405
 80163e0:	08016405 	.word	0x08016405
 80163e4:	08016405 	.word	0x08016405
 80163e8:	08016405 	.word	0x08016405
 80163ec:	08016405 	.word	0x08016405
 80163f0:	08016405 	.word	0x08016405
 80163f4:	08016405 	.word	0x08016405
 80163f8:	08016405 	.word	0x08016405
 80163fc:	08016405 	.word	0x08016405
 8016400:	08016405 	.word	0x08016405
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016404:	bf00      	nop
  }

  return (USBD_OK);
 8016406:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016408:	4618      	mov	r0, r3
 801640a:	370c      	adds	r7, #12
 801640c:	46bd      	mov	sp, r7
 801640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016412:	4770      	bx	lr

08016414 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b082      	sub	sp, #8
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
 801641c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801641e:	6879      	ldr	r1, [r7, #4]
 8016420:	4805      	ldr	r0, [pc, #20]	; (8016438 <CDC_Receive_FS+0x24>)
 8016422:	f7fb f8c3 	bl	80115ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016426:	4804      	ldr	r0, [pc, #16]	; (8016438 <CDC_Receive_FS+0x24>)
 8016428:	f7fb f904 	bl	8011634 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801642c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801642e:	4618      	mov	r0, r3
 8016430:	3708      	adds	r7, #8
 8016432:	46bd      	mov	sp, r7
 8016434:	bd80      	pop	{r7, pc}
 8016436:	bf00      	nop
 8016438:	2401c9cc 	.word	0x2401c9cc

0801643c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b084      	sub	sp, #16
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
 8016444:	460b      	mov	r3, r1
 8016446:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016448:	2300      	movs	r3, #0
 801644a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801644c:	4b0d      	ldr	r3, [pc, #52]	; (8016484 <CDC_Transmit_FS+0x48>)
 801644e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016452:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016454:	68bb      	ldr	r3, [r7, #8]
 8016456:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801645a:	2b00      	cmp	r3, #0
 801645c:	d001      	beq.n	8016462 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801645e:	2301      	movs	r3, #1
 8016460:	e00b      	b.n	801647a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016462:	887b      	ldrh	r3, [r7, #2]
 8016464:	461a      	mov	r2, r3
 8016466:	6879      	ldr	r1, [r7, #4]
 8016468:	4806      	ldr	r0, [pc, #24]	; (8016484 <CDC_Transmit_FS+0x48>)
 801646a:	f7fb f886 	bl	801157a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801646e:	4805      	ldr	r0, [pc, #20]	; (8016484 <CDC_Transmit_FS+0x48>)
 8016470:	f7fb f8b0 	bl	80115d4 <USBD_CDC_TransmitPacket>
 8016474:	4603      	mov	r3, r0
 8016476:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016478:	7bfb      	ldrb	r3, [r7, #15]
}
 801647a:	4618      	mov	r0, r3
 801647c:	3710      	adds	r7, #16
 801647e:	46bd      	mov	sp, r7
 8016480:	bd80      	pop	{r7, pc}
 8016482:	bf00      	nop
 8016484:	2401c9cc 	.word	0x2401c9cc

08016488 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016488:	b480      	push	{r7}
 801648a:	b087      	sub	sp, #28
 801648c:	af00      	add	r7, sp, #0
 801648e:	60f8      	str	r0, [r7, #12]
 8016490:	60b9      	str	r1, [r7, #8]
 8016492:	4613      	mov	r3, r2
 8016494:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016496:	2300      	movs	r3, #0
 8016498:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801649a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801649e:	4618      	mov	r0, r3
 80164a0:	371c      	adds	r7, #28
 80164a2:	46bd      	mov	sp, r7
 80164a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a8:	4770      	bx	lr
	...

080164ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164ac:	b480      	push	{r7}
 80164ae:	b083      	sub	sp, #12
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	4603      	mov	r3, r0
 80164b4:	6039      	str	r1, [r7, #0]
 80164b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	2212      	movs	r2, #18
 80164bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80164be:	4b03      	ldr	r3, [pc, #12]	; (80164cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80164c0:	4618      	mov	r0, r3
 80164c2:	370c      	adds	r7, #12
 80164c4:	46bd      	mov	sp, r7
 80164c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ca:	4770      	bx	lr
 80164cc:	24000154 	.word	0x24000154

080164d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164d0:	b480      	push	{r7}
 80164d2:	b083      	sub	sp, #12
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	4603      	mov	r3, r0
 80164d8:	6039      	str	r1, [r7, #0]
 80164da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	2204      	movs	r2, #4
 80164e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80164e2:	4b03      	ldr	r3, [pc, #12]	; (80164f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80164e4:	4618      	mov	r0, r3
 80164e6:	370c      	adds	r7, #12
 80164e8:	46bd      	mov	sp, r7
 80164ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ee:	4770      	bx	lr
 80164f0:	24000168 	.word	0x24000168

080164f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	4603      	mov	r3, r0
 80164fc:	6039      	str	r1, [r7, #0]
 80164fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016500:	79fb      	ldrb	r3, [r7, #7]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d105      	bne.n	8016512 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016506:	683a      	ldr	r2, [r7, #0]
 8016508:	4907      	ldr	r1, [pc, #28]	; (8016528 <USBD_FS_ProductStrDescriptor+0x34>)
 801650a:	4808      	ldr	r0, [pc, #32]	; (801652c <USBD_FS_ProductStrDescriptor+0x38>)
 801650c:	f7fc f8e1 	bl	80126d2 <USBD_GetString>
 8016510:	e004      	b.n	801651c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016512:	683a      	ldr	r2, [r7, #0]
 8016514:	4904      	ldr	r1, [pc, #16]	; (8016528 <USBD_FS_ProductStrDescriptor+0x34>)
 8016516:	4805      	ldr	r0, [pc, #20]	; (801652c <USBD_FS_ProductStrDescriptor+0x38>)
 8016518:	f7fc f8db 	bl	80126d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801651c:	4b02      	ldr	r3, [pc, #8]	; (8016528 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801651e:	4618      	mov	r0, r3
 8016520:	3708      	adds	r7, #8
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}
 8016526:	bf00      	nop
 8016528:	2401dc9c 	.word	0x2401dc9c
 801652c:	08017dd0 	.word	0x08017dd0

08016530 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b082      	sub	sp, #8
 8016534:	af00      	add	r7, sp, #0
 8016536:	4603      	mov	r3, r0
 8016538:	6039      	str	r1, [r7, #0]
 801653a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801653c:	683a      	ldr	r2, [r7, #0]
 801653e:	4904      	ldr	r1, [pc, #16]	; (8016550 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016540:	4804      	ldr	r0, [pc, #16]	; (8016554 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016542:	f7fc f8c6 	bl	80126d2 <USBD_GetString>
  return USBD_StrDesc;
 8016546:	4b02      	ldr	r3, [pc, #8]	; (8016550 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016548:	4618      	mov	r0, r3
 801654a:	3708      	adds	r7, #8
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}
 8016550:	2401dc9c 	.word	0x2401dc9c
 8016554:	08017de4 	.word	0x08017de4

08016558 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b082      	sub	sp, #8
 801655c:	af00      	add	r7, sp, #0
 801655e:	4603      	mov	r3, r0
 8016560:	6039      	str	r1, [r7, #0]
 8016562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016564:	683b      	ldr	r3, [r7, #0]
 8016566:	221a      	movs	r2, #26
 8016568:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801656a:	f000 f843 	bl	80165f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801656e:	4b02      	ldr	r3, [pc, #8]	; (8016578 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016570:	4618      	mov	r0, r3
 8016572:	3708      	adds	r7, #8
 8016574:	46bd      	mov	sp, r7
 8016576:	bd80      	pop	{r7, pc}
 8016578:	2400016c 	.word	0x2400016c

0801657c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b082      	sub	sp, #8
 8016580:	af00      	add	r7, sp, #0
 8016582:	4603      	mov	r3, r0
 8016584:	6039      	str	r1, [r7, #0]
 8016586:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016588:	79fb      	ldrb	r3, [r7, #7]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d105      	bne.n	801659a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801658e:	683a      	ldr	r2, [r7, #0]
 8016590:	4907      	ldr	r1, [pc, #28]	; (80165b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016592:	4808      	ldr	r0, [pc, #32]	; (80165b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016594:	f7fc f89d 	bl	80126d2 <USBD_GetString>
 8016598:	e004      	b.n	80165a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801659a:	683a      	ldr	r2, [r7, #0]
 801659c:	4904      	ldr	r1, [pc, #16]	; (80165b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801659e:	4805      	ldr	r0, [pc, #20]	; (80165b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80165a0:	f7fc f897 	bl	80126d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80165a4:	4b02      	ldr	r3, [pc, #8]	; (80165b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3708      	adds	r7, #8
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop
 80165b0:	2401dc9c 	.word	0x2401dc9c
 80165b4:	08017dec 	.word	0x08017dec

080165b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b082      	sub	sp, #8
 80165bc:	af00      	add	r7, sp, #0
 80165be:	4603      	mov	r3, r0
 80165c0:	6039      	str	r1, [r7, #0]
 80165c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80165c4:	79fb      	ldrb	r3, [r7, #7]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d105      	bne.n	80165d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80165ca:	683a      	ldr	r2, [r7, #0]
 80165cc:	4907      	ldr	r1, [pc, #28]	; (80165ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80165ce:	4808      	ldr	r0, [pc, #32]	; (80165f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80165d0:	f7fc f87f 	bl	80126d2 <USBD_GetString>
 80165d4:	e004      	b.n	80165e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80165d6:	683a      	ldr	r2, [r7, #0]
 80165d8:	4904      	ldr	r1, [pc, #16]	; (80165ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80165da:	4805      	ldr	r0, [pc, #20]	; (80165f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80165dc:	f7fc f879 	bl	80126d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80165e0:	4b02      	ldr	r3, [pc, #8]	; (80165ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3708      	adds	r7, #8
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}
 80165ea:	bf00      	nop
 80165ec:	2401dc9c 	.word	0x2401dc9c
 80165f0:	08017df8 	.word	0x08017df8

080165f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b084      	sub	sp, #16
 80165f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80165fa:	4b0f      	ldr	r3, [pc, #60]	; (8016638 <Get_SerialNum+0x44>)
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016600:	4b0e      	ldr	r3, [pc, #56]	; (801663c <Get_SerialNum+0x48>)
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016606:	4b0e      	ldr	r3, [pc, #56]	; (8016640 <Get_SerialNum+0x4c>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801660c:	68fa      	ldr	r2, [r7, #12]
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	4413      	add	r3, r2
 8016612:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d009      	beq.n	801662e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801661a:	2208      	movs	r2, #8
 801661c:	4909      	ldr	r1, [pc, #36]	; (8016644 <Get_SerialNum+0x50>)
 801661e:	68f8      	ldr	r0, [r7, #12]
 8016620:	f000 f814 	bl	801664c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016624:	2204      	movs	r2, #4
 8016626:	4908      	ldr	r1, [pc, #32]	; (8016648 <Get_SerialNum+0x54>)
 8016628:	68b8      	ldr	r0, [r7, #8]
 801662a:	f000 f80f 	bl	801664c <IntToUnicode>
  }
}
 801662e:	bf00      	nop
 8016630:	3710      	adds	r7, #16
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	1ff1e800 	.word	0x1ff1e800
 801663c:	1ff1e804 	.word	0x1ff1e804
 8016640:	1ff1e808 	.word	0x1ff1e808
 8016644:	2400016e 	.word	0x2400016e
 8016648:	2400017e 	.word	0x2400017e

0801664c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801664c:	b480      	push	{r7}
 801664e:	b087      	sub	sp, #28
 8016650:	af00      	add	r7, sp, #0
 8016652:	60f8      	str	r0, [r7, #12]
 8016654:	60b9      	str	r1, [r7, #8]
 8016656:	4613      	mov	r3, r2
 8016658:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801665a:	2300      	movs	r3, #0
 801665c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801665e:	2300      	movs	r3, #0
 8016660:	75fb      	strb	r3, [r7, #23]
 8016662:	e027      	b.n	80166b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	0f1b      	lsrs	r3, r3, #28
 8016668:	2b09      	cmp	r3, #9
 801666a:	d80b      	bhi.n	8016684 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	0f1b      	lsrs	r3, r3, #28
 8016670:	b2da      	uxtb	r2, r3
 8016672:	7dfb      	ldrb	r3, [r7, #23]
 8016674:	005b      	lsls	r3, r3, #1
 8016676:	4619      	mov	r1, r3
 8016678:	68bb      	ldr	r3, [r7, #8]
 801667a:	440b      	add	r3, r1
 801667c:	3230      	adds	r2, #48	; 0x30
 801667e:	b2d2      	uxtb	r2, r2
 8016680:	701a      	strb	r2, [r3, #0]
 8016682:	e00a      	b.n	801669a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	0f1b      	lsrs	r3, r3, #28
 8016688:	b2da      	uxtb	r2, r3
 801668a:	7dfb      	ldrb	r3, [r7, #23]
 801668c:	005b      	lsls	r3, r3, #1
 801668e:	4619      	mov	r1, r3
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	440b      	add	r3, r1
 8016694:	3237      	adds	r2, #55	; 0x37
 8016696:	b2d2      	uxtb	r2, r2
 8016698:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	011b      	lsls	r3, r3, #4
 801669e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80166a0:	7dfb      	ldrb	r3, [r7, #23]
 80166a2:	005b      	lsls	r3, r3, #1
 80166a4:	3301      	adds	r3, #1
 80166a6:	68ba      	ldr	r2, [r7, #8]
 80166a8:	4413      	add	r3, r2
 80166aa:	2200      	movs	r2, #0
 80166ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80166ae:	7dfb      	ldrb	r3, [r7, #23]
 80166b0:	3301      	adds	r3, #1
 80166b2:	75fb      	strb	r3, [r7, #23]
 80166b4:	7dfa      	ldrb	r2, [r7, #23]
 80166b6:	79fb      	ldrb	r3, [r7, #7]
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d3d3      	bcc.n	8016664 <IntToUnicode+0x18>
  }
}
 80166bc:	bf00      	nop
 80166be:	371c      	adds	r7, #28
 80166c0:	46bd      	mov	sp, r7
 80166c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c6:	4770      	bx	lr

080166c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b08a      	sub	sp, #40	; 0x28
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80166d0:	f107 0314 	add.w	r3, r7, #20
 80166d4:	2200      	movs	r2, #0
 80166d6:	601a      	str	r2, [r3, #0]
 80166d8:	605a      	str	r2, [r3, #4]
 80166da:	609a      	str	r2, [r3, #8]
 80166dc:	60da      	str	r2, [r3, #12]
 80166de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	4a1e      	ldr	r2, [pc, #120]	; (8016760 <HAL_PCD_MspInit+0x98>)
 80166e6:	4293      	cmp	r3, r2
 80166e8:	d136      	bne.n	8016758 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80166ea:	4b1e      	ldr	r3, [pc, #120]	; (8016764 <HAL_PCD_MspInit+0x9c>)
 80166ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80166f0:	4a1c      	ldr	r2, [pc, #112]	; (8016764 <HAL_PCD_MspInit+0x9c>)
 80166f2:	f043 0301 	orr.w	r3, r3, #1
 80166f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80166fa:	4b1a      	ldr	r3, [pc, #104]	; (8016764 <HAL_PCD_MspInit+0x9c>)
 80166fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016700:	f003 0301 	and.w	r3, r3, #1
 8016704:	613b      	str	r3, [r7, #16]
 8016706:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016708:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801670c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801670e:	2302      	movs	r3, #2
 8016710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016712:	2300      	movs	r3, #0
 8016714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016716:	2300      	movs	r3, #0
 8016718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801671a:	230a      	movs	r3, #10
 801671c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801671e:	f107 0314 	add.w	r3, r7, #20
 8016722:	4619      	mov	r1, r3
 8016724:	4810      	ldr	r0, [pc, #64]	; (8016768 <HAL_PCD_MspInit+0xa0>)
 8016726:	f7ef ff41 	bl	80065ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801672a:	4b0e      	ldr	r3, [pc, #56]	; (8016764 <HAL_PCD_MspInit+0x9c>)
 801672c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016730:	4a0c      	ldr	r2, [pc, #48]	; (8016764 <HAL_PCD_MspInit+0x9c>)
 8016732:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016736:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801673a:	4b0a      	ldr	r3, [pc, #40]	; (8016764 <HAL_PCD_MspInit+0x9c>)
 801673c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016744:	60fb      	str	r3, [r7, #12]
 8016746:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016748:	2200      	movs	r2, #0
 801674a:	2105      	movs	r1, #5
 801674c:	2065      	movs	r0, #101	; 0x65
 801674e:	f7ed fbdd 	bl	8003f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016752:	2065      	movs	r0, #101	; 0x65
 8016754:	f7ed fbf4 	bl	8003f40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016758:	bf00      	nop
 801675a:	3728      	adds	r7, #40	; 0x28
 801675c:	46bd      	mov	sp, r7
 801675e:	bd80      	pop	{r7, pc}
 8016760:	40080000 	.word	0x40080000
 8016764:	58024400 	.word	0x58024400
 8016768:	58020000 	.word	0x58020000

0801676c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b082      	sub	sp, #8
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016780:	4619      	mov	r1, r3
 8016782:	4610      	mov	r0, r2
 8016784:	f7fb f822 	bl	80117cc <USBD_LL_SetupStage>
}
 8016788:	bf00      	nop
 801678a:	3708      	adds	r7, #8
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}

08016790 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	460b      	mov	r3, r1
 801679a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80167a2:	78fa      	ldrb	r2, [r7, #3]
 80167a4:	6879      	ldr	r1, [r7, #4]
 80167a6:	4613      	mov	r3, r2
 80167a8:	00db      	lsls	r3, r3, #3
 80167aa:	1a9b      	subs	r3, r3, r2
 80167ac:	009b      	lsls	r3, r3, #2
 80167ae:	440b      	add	r3, r1
 80167b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80167b4:	681a      	ldr	r2, [r3, #0]
 80167b6:	78fb      	ldrb	r3, [r7, #3]
 80167b8:	4619      	mov	r1, r3
 80167ba:	f7fb f85a 	bl	8011872 <USBD_LL_DataOutStage>
}
 80167be:	bf00      	nop
 80167c0:	3708      	adds	r7, #8
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b082      	sub	sp, #8
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	6078      	str	r0, [r7, #4]
 80167ce:	460b      	mov	r3, r1
 80167d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80167d8:	78fa      	ldrb	r2, [r7, #3]
 80167da:	6879      	ldr	r1, [r7, #4]
 80167dc:	4613      	mov	r3, r2
 80167de:	00db      	lsls	r3, r3, #3
 80167e0:	1a9b      	subs	r3, r3, r2
 80167e2:	009b      	lsls	r3, r3, #2
 80167e4:	440b      	add	r3, r1
 80167e6:	3348      	adds	r3, #72	; 0x48
 80167e8:	681a      	ldr	r2, [r3, #0]
 80167ea:	78fb      	ldrb	r3, [r7, #3]
 80167ec:	4619      	mov	r1, r3
 80167ee:	f7fb f8a3 	bl	8011938 <USBD_LL_DataInStage>
}
 80167f2:	bf00      	nop
 80167f4:	3708      	adds	r7, #8
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}

080167fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167fa:	b580      	push	{r7, lr}
 80167fc:	b082      	sub	sp, #8
 80167fe:	af00      	add	r7, sp, #0
 8016800:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016808:	4618      	mov	r0, r3
 801680a:	f7fb f9a7 	bl	8011b5c <USBD_LL_SOF>
}
 801680e:	bf00      	nop
 8016810:	3708      	adds	r7, #8
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}

08016816 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016816:	b580      	push	{r7, lr}
 8016818:	b084      	sub	sp, #16
 801681a:	af00      	add	r7, sp, #0
 801681c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801681e:	2301      	movs	r3, #1
 8016820:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	68db      	ldr	r3, [r3, #12]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d102      	bne.n	8016830 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801682a:	2300      	movs	r3, #0
 801682c:	73fb      	strb	r3, [r7, #15]
 801682e:	e008      	b.n	8016842 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	68db      	ldr	r3, [r3, #12]
 8016834:	2b02      	cmp	r3, #2
 8016836:	d102      	bne.n	801683e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016838:	2301      	movs	r3, #1
 801683a:	73fb      	strb	r3, [r7, #15]
 801683c:	e001      	b.n	8016842 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801683e:	f7eb f8a9 	bl	8001994 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016848:	7bfa      	ldrb	r2, [r7, #15]
 801684a:	4611      	mov	r1, r2
 801684c:	4618      	mov	r0, r3
 801684e:	f7fb f94a 	bl	8011ae6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016858:	4618      	mov	r0, r3
 801685a:	f7fb f903 	bl	8011a64 <USBD_LL_Reset>
}
 801685e:	bf00      	nop
 8016860:	3710      	adds	r7, #16
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
	...

08016868 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b082      	sub	sp, #8
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016876:	4618      	mov	r0, r3
 8016878:	f7fb f945 	bl	8011b06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	687a      	ldr	r2, [r7, #4]
 8016888:	6812      	ldr	r2, [r2, #0]
 801688a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801688e:	f043 0301 	orr.w	r3, r3, #1
 8016892:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	6a1b      	ldr	r3, [r3, #32]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d005      	beq.n	80168a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801689c:	4b04      	ldr	r3, [pc, #16]	; (80168b0 <HAL_PCD_SuspendCallback+0x48>)
 801689e:	691b      	ldr	r3, [r3, #16]
 80168a0:	4a03      	ldr	r2, [pc, #12]	; (80168b0 <HAL_PCD_SuspendCallback+0x48>)
 80168a2:	f043 0306 	orr.w	r3, r3, #6
 80168a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80168a8:	bf00      	nop
 80168aa:	3708      	adds	r7, #8
 80168ac:	46bd      	mov	sp, r7
 80168ae:	bd80      	pop	{r7, pc}
 80168b0:	e000ed00 	.word	0xe000ed00

080168b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b082      	sub	sp, #8
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168c2:	4618      	mov	r0, r3
 80168c4:	f7fb f934 	bl	8011b30 <USBD_LL_Resume>
}
 80168c8:	bf00      	nop
 80168ca:	3708      	adds	r7, #8
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}

080168d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
 80168d8:	460b      	mov	r3, r1
 80168da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80168e2:	78fa      	ldrb	r2, [r7, #3]
 80168e4:	4611      	mov	r1, r2
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7fb f95f 	bl	8011baa <USBD_LL_IsoOUTIncomplete>
}
 80168ec:	bf00      	nop
 80168ee:	3708      	adds	r7, #8
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}

080168f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b082      	sub	sp, #8
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	460b      	mov	r3, r1
 80168fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016906:	78fa      	ldrb	r2, [r7, #3]
 8016908:	4611      	mov	r1, r2
 801690a:	4618      	mov	r0, r3
 801690c:	f7fb f940 	bl	8011b90 <USBD_LL_IsoINIncomplete>
}
 8016910:	bf00      	nop
 8016912:	3708      	adds	r7, #8
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}

08016918 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016926:	4618      	mov	r0, r3
 8016928:	f7fb f94c 	bl	8011bc4 <USBD_LL_DevConnected>
}
 801692c:	bf00      	nop
 801692e:	3708      	adds	r7, #8
 8016930:	46bd      	mov	sp, r7
 8016932:	bd80      	pop	{r7, pc}

08016934 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b082      	sub	sp, #8
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016942:	4618      	mov	r0, r3
 8016944:	f7fb f949 	bl	8011bda <USBD_LL_DevDisconnected>
}
 8016948:	bf00      	nop
 801694a:	3708      	adds	r7, #8
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}

08016950 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	781b      	ldrb	r3, [r3, #0]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d13e      	bne.n	80169de <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016960:	4a21      	ldr	r2, [pc, #132]	; (80169e8 <USBD_LL_Init+0x98>)
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	4a1f      	ldr	r2, [pc, #124]	; (80169e8 <USBD_LL_Init+0x98>)
 801696c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016970:	4b1d      	ldr	r3, [pc, #116]	; (80169e8 <USBD_LL_Init+0x98>)
 8016972:	4a1e      	ldr	r2, [pc, #120]	; (80169ec <USBD_LL_Init+0x9c>)
 8016974:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8016976:	4b1c      	ldr	r3, [pc, #112]	; (80169e8 <USBD_LL_Init+0x98>)
 8016978:	2209      	movs	r2, #9
 801697a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801697c:	4b1a      	ldr	r3, [pc, #104]	; (80169e8 <USBD_LL_Init+0x98>)
 801697e:	2202      	movs	r2, #2
 8016980:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016982:	4b19      	ldr	r3, [pc, #100]	; (80169e8 <USBD_LL_Init+0x98>)
 8016984:	2200      	movs	r2, #0
 8016986:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016988:	4b17      	ldr	r3, [pc, #92]	; (80169e8 <USBD_LL_Init+0x98>)
 801698a:	2202      	movs	r2, #2
 801698c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801698e:	4b16      	ldr	r3, [pc, #88]	; (80169e8 <USBD_LL_Init+0x98>)
 8016990:	2200      	movs	r2, #0
 8016992:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016994:	4b14      	ldr	r3, [pc, #80]	; (80169e8 <USBD_LL_Init+0x98>)
 8016996:	2200      	movs	r2, #0
 8016998:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801699a:	4b13      	ldr	r3, [pc, #76]	; (80169e8 <USBD_LL_Init+0x98>)
 801699c:	2200      	movs	r2, #0
 801699e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80169a0:	4b11      	ldr	r3, [pc, #68]	; (80169e8 <USBD_LL_Init+0x98>)
 80169a2:	2200      	movs	r2, #0
 80169a4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80169a6:	4b10      	ldr	r3, [pc, #64]	; (80169e8 <USBD_LL_Init+0x98>)
 80169a8:	2200      	movs	r2, #0
 80169aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80169ac:	4b0e      	ldr	r3, [pc, #56]	; (80169e8 <USBD_LL_Init+0x98>)
 80169ae:	2200      	movs	r2, #0
 80169b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80169b2:	480d      	ldr	r0, [pc, #52]	; (80169e8 <USBD_LL_Init+0x98>)
 80169b4:	f7ef ffdb 	bl	800696e <HAL_PCD_Init>
 80169b8:	4603      	mov	r3, r0
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d001      	beq.n	80169c2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80169be:	f7ea ffe9 	bl	8001994 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80169c2:	2180      	movs	r1, #128	; 0x80
 80169c4:	4808      	ldr	r0, [pc, #32]	; (80169e8 <USBD_LL_Init+0x98>)
 80169c6:	f7f1 f96c 	bl	8007ca2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80169ca:	2240      	movs	r2, #64	; 0x40
 80169cc:	2100      	movs	r1, #0
 80169ce:	4806      	ldr	r0, [pc, #24]	; (80169e8 <USBD_LL_Init+0x98>)
 80169d0:	f7f1 f920 	bl	8007c14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80169d4:	2280      	movs	r2, #128	; 0x80
 80169d6:	2101      	movs	r1, #1
 80169d8:	4803      	ldr	r0, [pc, #12]	; (80169e8 <USBD_LL_Init+0x98>)
 80169da:	f7f1 f91b 	bl	8007c14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80169de:	2300      	movs	r3, #0
}
 80169e0:	4618      	mov	r0, r3
 80169e2:	3708      	adds	r7, #8
 80169e4:	46bd      	mov	sp, r7
 80169e6:	bd80      	pop	{r7, pc}
 80169e8:	2401de9c 	.word	0x2401de9c
 80169ec:	40080000 	.word	0x40080000

080169f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80169f0:	b580      	push	{r7, lr}
 80169f2:	b084      	sub	sp, #16
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169f8:	2300      	movs	r3, #0
 80169fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169fc:	2300      	movs	r3, #0
 80169fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a06:	4618      	mov	r0, r3
 8016a08:	f7f0 f8d5 	bl	8006bb6 <HAL_PCD_Start>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a10:	7bfb      	ldrb	r3, [r7, #15]
 8016a12:	4618      	mov	r0, r3
 8016a14:	f000 f92a 	bl	8016c6c <USBD_Get_USB_Status>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3710      	adds	r7, #16
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}

08016a26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016a26:	b580      	push	{r7, lr}
 8016a28:	b084      	sub	sp, #16
 8016a2a:	af00      	add	r7, sp, #0
 8016a2c:	6078      	str	r0, [r7, #4]
 8016a2e:	4608      	mov	r0, r1
 8016a30:	4611      	mov	r1, r2
 8016a32:	461a      	mov	r2, r3
 8016a34:	4603      	mov	r3, r0
 8016a36:	70fb      	strb	r3, [r7, #3]
 8016a38:	460b      	mov	r3, r1
 8016a3a:	70bb      	strb	r3, [r7, #2]
 8016a3c:	4613      	mov	r3, r2
 8016a3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a40:	2300      	movs	r3, #0
 8016a42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a44:	2300      	movs	r3, #0
 8016a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016a4e:	78bb      	ldrb	r3, [r7, #2]
 8016a50:	883a      	ldrh	r2, [r7, #0]
 8016a52:	78f9      	ldrb	r1, [r7, #3]
 8016a54:	f7f0 fce6 	bl	8007424 <HAL_PCD_EP_Open>
 8016a58:	4603      	mov	r3, r0
 8016a5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a5c:	7bfb      	ldrb	r3, [r7, #15]
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f000 f904 	bl	8016c6c <USBD_Get_USB_Status>
 8016a64:	4603      	mov	r3, r0
 8016a66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	3710      	adds	r7, #16
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}

08016a72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a72:	b580      	push	{r7, lr}
 8016a74:	b084      	sub	sp, #16
 8016a76:	af00      	add	r7, sp, #0
 8016a78:	6078      	str	r0, [r7, #4]
 8016a7a:	460b      	mov	r3, r1
 8016a7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a7e:	2300      	movs	r3, #0
 8016a80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a82:	2300      	movs	r3, #0
 8016a84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a8c:	78fa      	ldrb	r2, [r7, #3]
 8016a8e:	4611      	mov	r1, r2
 8016a90:	4618      	mov	r0, r3
 8016a92:	f7f0 fd2f 	bl	80074f4 <HAL_PCD_EP_Close>
 8016a96:	4603      	mov	r3, r0
 8016a98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a9a:	7bfb      	ldrb	r3, [r7, #15]
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	f000 f8e5 	bl	8016c6c <USBD_Get_USB_Status>
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016aa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3710      	adds	r7, #16
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b084      	sub	sp, #16
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	460b      	mov	r3, r1
 8016aba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016abc:	2300      	movs	r3, #0
 8016abe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016aca:	78fa      	ldrb	r2, [r7, #3]
 8016acc:	4611      	mov	r1, r2
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f7f0 fe07 	bl	80076e2 <HAL_PCD_EP_SetStall>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ad8:	7bfb      	ldrb	r3, [r7, #15]
 8016ada:	4618      	mov	r0, r3
 8016adc:	f000 f8c6 	bl	8016c6c <USBD_Get_USB_Status>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ae4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3710      	adds	r7, #16
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}

08016aee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016aee:	b580      	push	{r7, lr}
 8016af0:	b084      	sub	sp, #16
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	6078      	str	r0, [r7, #4]
 8016af6:	460b      	mov	r3, r1
 8016af8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016afa:	2300      	movs	r3, #0
 8016afc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016afe:	2300      	movs	r3, #0
 8016b00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b08:	78fa      	ldrb	r2, [r7, #3]
 8016b0a:	4611      	mov	r1, r2
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7f0 fe4c 	bl	80077aa <HAL_PCD_EP_ClrStall>
 8016b12:	4603      	mov	r3, r0
 8016b14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b16:	7bfb      	ldrb	r3, [r7, #15]
 8016b18:	4618      	mov	r0, r3
 8016b1a:	f000 f8a7 	bl	8016c6c <USBD_Get_USB_Status>
 8016b1e:	4603      	mov	r3, r0
 8016b20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b22:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b24:	4618      	mov	r0, r3
 8016b26:	3710      	adds	r7, #16
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd80      	pop	{r7, pc}

08016b2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b2c:	b480      	push	{r7}
 8016b2e:	b085      	sub	sp, #20
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
 8016b34:	460b      	mov	r3, r1
 8016b36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	da0b      	bge.n	8016b60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016b48:	78fb      	ldrb	r3, [r7, #3]
 8016b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b4e:	68f9      	ldr	r1, [r7, #12]
 8016b50:	4613      	mov	r3, r2
 8016b52:	00db      	lsls	r3, r3, #3
 8016b54:	1a9b      	subs	r3, r3, r2
 8016b56:	009b      	lsls	r3, r3, #2
 8016b58:	440b      	add	r3, r1
 8016b5a:	333e      	adds	r3, #62	; 0x3e
 8016b5c:	781b      	ldrb	r3, [r3, #0]
 8016b5e:	e00b      	b.n	8016b78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016b60:	78fb      	ldrb	r3, [r7, #3]
 8016b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b66:	68f9      	ldr	r1, [r7, #12]
 8016b68:	4613      	mov	r3, r2
 8016b6a:	00db      	lsls	r3, r3, #3
 8016b6c:	1a9b      	subs	r3, r3, r2
 8016b6e:	009b      	lsls	r3, r3, #2
 8016b70:	440b      	add	r3, r1
 8016b72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016b76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016b78:	4618      	mov	r0, r3
 8016b7a:	3714      	adds	r7, #20
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b82:	4770      	bx	lr

08016b84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b084      	sub	sp, #16
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
 8016b8c:	460b      	mov	r3, r1
 8016b8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b90:	2300      	movs	r3, #0
 8016b92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b94:	2300      	movs	r3, #0
 8016b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b9e:	78fa      	ldrb	r2, [r7, #3]
 8016ba0:	4611      	mov	r1, r2
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f7f0 fc19 	bl	80073da <HAL_PCD_SetAddress>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bac:	7bfb      	ldrb	r3, [r7, #15]
 8016bae:	4618      	mov	r0, r3
 8016bb0:	f000 f85c 	bl	8016c6c <USBD_Get_USB_Status>
 8016bb4:	4603      	mov	r3, r0
 8016bb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bba:	4618      	mov	r0, r3
 8016bbc:	3710      	adds	r7, #16
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}

08016bc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016bc2:	b580      	push	{r7, lr}
 8016bc4:	b086      	sub	sp, #24
 8016bc6:	af00      	add	r7, sp, #0
 8016bc8:	60f8      	str	r0, [r7, #12]
 8016bca:	607a      	str	r2, [r7, #4]
 8016bcc:	603b      	str	r3, [r7, #0]
 8016bce:	460b      	mov	r3, r1
 8016bd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016be0:	7af9      	ldrb	r1, [r7, #11]
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	687a      	ldr	r2, [r7, #4]
 8016be6:	f7f0 fd32 	bl	800764e <HAL_PCD_EP_Transmit>
 8016bea:	4603      	mov	r3, r0
 8016bec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bee:	7dfb      	ldrb	r3, [r7, #23]
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	f000 f83b 	bl	8016c6c <USBD_Get_USB_Status>
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016bfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	3718      	adds	r7, #24
 8016c00:	46bd      	mov	sp, r7
 8016c02:	bd80      	pop	{r7, pc}

08016c04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b086      	sub	sp, #24
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	60f8      	str	r0, [r7, #12]
 8016c0c:	607a      	str	r2, [r7, #4]
 8016c0e:	603b      	str	r3, [r7, #0]
 8016c10:	460b      	mov	r3, r1
 8016c12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c14:	2300      	movs	r3, #0
 8016c16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c18:	2300      	movs	r3, #0
 8016c1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016c22:	7af9      	ldrb	r1, [r7, #11]
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	687a      	ldr	r2, [r7, #4]
 8016c28:	f7f0 fcae 	bl	8007588 <HAL_PCD_EP_Receive>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c30:	7dfb      	ldrb	r3, [r7, #23]
 8016c32:	4618      	mov	r0, r3
 8016c34:	f000 f81a 	bl	8016c6c <USBD_Get_USB_Status>
 8016c38:	4603      	mov	r3, r0
 8016c3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c3e:	4618      	mov	r0, r3
 8016c40:	3718      	adds	r7, #24
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}

08016c46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c46:	b580      	push	{r7, lr}
 8016c48:	b082      	sub	sp, #8
 8016c4a:	af00      	add	r7, sp, #0
 8016c4c:	6078      	str	r0, [r7, #4]
 8016c4e:	460b      	mov	r3, r1
 8016c50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c58:	78fa      	ldrb	r2, [r7, #3]
 8016c5a:	4611      	mov	r1, r2
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f7f0 fcde 	bl	800761e <HAL_PCD_EP_GetRxCount>
 8016c62:	4603      	mov	r3, r0
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	3708      	adds	r7, #8
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}

08016c6c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b085      	sub	sp, #20
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	4603      	mov	r3, r0
 8016c74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c76:	2300      	movs	r3, #0
 8016c78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016c7a:	79fb      	ldrb	r3, [r7, #7]
 8016c7c:	2b03      	cmp	r3, #3
 8016c7e:	d817      	bhi.n	8016cb0 <USBD_Get_USB_Status+0x44>
 8016c80:	a201      	add	r2, pc, #4	; (adr r2, 8016c88 <USBD_Get_USB_Status+0x1c>)
 8016c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c86:	bf00      	nop
 8016c88:	08016c99 	.word	0x08016c99
 8016c8c:	08016c9f 	.word	0x08016c9f
 8016c90:	08016ca5 	.word	0x08016ca5
 8016c94:	08016cab 	.word	0x08016cab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016c98:	2300      	movs	r3, #0
 8016c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8016c9c:	e00b      	b.n	8016cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016c9e:	2303      	movs	r3, #3
 8016ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8016ca2:	e008      	b.n	8016cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016ca4:	2301      	movs	r3, #1
 8016ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8016ca8:	e005      	b.n	8016cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016caa:	2303      	movs	r3, #3
 8016cac:	73fb      	strb	r3, [r7, #15]
    break;
 8016cae:	e002      	b.n	8016cb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016cb0:	2303      	movs	r3, #3
 8016cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8016cb4:	bf00      	nop
  }
  return usb_status;
 8016cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cb8:	4618      	mov	r0, r3
 8016cba:	3714      	adds	r7, #20
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc2:	4770      	bx	lr

08016cc4 <__errno>:
 8016cc4:	4b01      	ldr	r3, [pc, #4]	; (8016ccc <__errno+0x8>)
 8016cc6:	6818      	ldr	r0, [r3, #0]
 8016cc8:	4770      	bx	lr
 8016cca:	bf00      	nop
 8016ccc:	24000188 	.word	0x24000188

08016cd0 <__libc_init_array>:
 8016cd0:	b570      	push	{r4, r5, r6, lr}
 8016cd2:	4e0d      	ldr	r6, [pc, #52]	; (8016d08 <__libc_init_array+0x38>)
 8016cd4:	4c0d      	ldr	r4, [pc, #52]	; (8016d0c <__libc_init_array+0x3c>)
 8016cd6:	1ba4      	subs	r4, r4, r6
 8016cd8:	10a4      	asrs	r4, r4, #2
 8016cda:	2500      	movs	r5, #0
 8016cdc:	42a5      	cmp	r5, r4
 8016cde:	d109      	bne.n	8016cf4 <__libc_init_array+0x24>
 8016ce0:	4e0b      	ldr	r6, [pc, #44]	; (8016d10 <__libc_init_array+0x40>)
 8016ce2:	4c0c      	ldr	r4, [pc, #48]	; (8016d14 <__libc_init_array+0x44>)
 8016ce4:	f000 fe26 	bl	8017934 <_init>
 8016ce8:	1ba4      	subs	r4, r4, r6
 8016cea:	10a4      	asrs	r4, r4, #2
 8016cec:	2500      	movs	r5, #0
 8016cee:	42a5      	cmp	r5, r4
 8016cf0:	d105      	bne.n	8016cfe <__libc_init_array+0x2e>
 8016cf2:	bd70      	pop	{r4, r5, r6, pc}
 8016cf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016cf8:	4798      	blx	r3
 8016cfa:	3501      	adds	r5, #1
 8016cfc:	e7ee      	b.n	8016cdc <__libc_init_array+0xc>
 8016cfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016d02:	4798      	blx	r3
 8016d04:	3501      	adds	r5, #1
 8016d06:	e7f2      	b.n	8016cee <__libc_init_array+0x1e>
 8016d08:	080181a0 	.word	0x080181a0
 8016d0c:	080181a0 	.word	0x080181a0
 8016d10:	080181a0 	.word	0x080181a0
 8016d14:	080181a4 	.word	0x080181a4

08016d18 <malloc>:
 8016d18:	4b02      	ldr	r3, [pc, #8]	; (8016d24 <malloc+0xc>)
 8016d1a:	4601      	mov	r1, r0
 8016d1c:	6818      	ldr	r0, [r3, #0]
 8016d1e:	f000 b86d 	b.w	8016dfc <_malloc_r>
 8016d22:	bf00      	nop
 8016d24:	24000188 	.word	0x24000188

08016d28 <free>:
 8016d28:	4b02      	ldr	r3, [pc, #8]	; (8016d34 <free+0xc>)
 8016d2a:	4601      	mov	r1, r0
 8016d2c:	6818      	ldr	r0, [r3, #0]
 8016d2e:	f000 b817 	b.w	8016d60 <_free_r>
 8016d32:	bf00      	nop
 8016d34:	24000188 	.word	0x24000188

08016d38 <memcpy>:
 8016d38:	b510      	push	{r4, lr}
 8016d3a:	1e43      	subs	r3, r0, #1
 8016d3c:	440a      	add	r2, r1
 8016d3e:	4291      	cmp	r1, r2
 8016d40:	d100      	bne.n	8016d44 <memcpy+0xc>
 8016d42:	bd10      	pop	{r4, pc}
 8016d44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d4c:	e7f7      	b.n	8016d3e <memcpy+0x6>

08016d4e <memset>:
 8016d4e:	4402      	add	r2, r0
 8016d50:	4603      	mov	r3, r0
 8016d52:	4293      	cmp	r3, r2
 8016d54:	d100      	bne.n	8016d58 <memset+0xa>
 8016d56:	4770      	bx	lr
 8016d58:	f803 1b01 	strb.w	r1, [r3], #1
 8016d5c:	e7f9      	b.n	8016d52 <memset+0x4>
	...

08016d60 <_free_r>:
 8016d60:	b538      	push	{r3, r4, r5, lr}
 8016d62:	4605      	mov	r5, r0
 8016d64:	2900      	cmp	r1, #0
 8016d66:	d045      	beq.n	8016df4 <_free_r+0x94>
 8016d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d6c:	1f0c      	subs	r4, r1, #4
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	bfb8      	it	lt
 8016d72:	18e4      	addlt	r4, r4, r3
 8016d74:	f000 f91a 	bl	8016fac <__malloc_lock>
 8016d78:	4a1f      	ldr	r2, [pc, #124]	; (8016df8 <_free_r+0x98>)
 8016d7a:	6813      	ldr	r3, [r2, #0]
 8016d7c:	4610      	mov	r0, r2
 8016d7e:	b933      	cbnz	r3, 8016d8e <_free_r+0x2e>
 8016d80:	6063      	str	r3, [r4, #4]
 8016d82:	6014      	str	r4, [r2, #0]
 8016d84:	4628      	mov	r0, r5
 8016d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d8a:	f000 b910 	b.w	8016fae <__malloc_unlock>
 8016d8e:	42a3      	cmp	r3, r4
 8016d90:	d90c      	bls.n	8016dac <_free_r+0x4c>
 8016d92:	6821      	ldr	r1, [r4, #0]
 8016d94:	1862      	adds	r2, r4, r1
 8016d96:	4293      	cmp	r3, r2
 8016d98:	bf04      	itt	eq
 8016d9a:	681a      	ldreq	r2, [r3, #0]
 8016d9c:	685b      	ldreq	r3, [r3, #4]
 8016d9e:	6063      	str	r3, [r4, #4]
 8016da0:	bf04      	itt	eq
 8016da2:	1852      	addeq	r2, r2, r1
 8016da4:	6022      	streq	r2, [r4, #0]
 8016da6:	6004      	str	r4, [r0, #0]
 8016da8:	e7ec      	b.n	8016d84 <_free_r+0x24>
 8016daa:	4613      	mov	r3, r2
 8016dac:	685a      	ldr	r2, [r3, #4]
 8016dae:	b10a      	cbz	r2, 8016db4 <_free_r+0x54>
 8016db0:	42a2      	cmp	r2, r4
 8016db2:	d9fa      	bls.n	8016daa <_free_r+0x4a>
 8016db4:	6819      	ldr	r1, [r3, #0]
 8016db6:	1858      	adds	r0, r3, r1
 8016db8:	42a0      	cmp	r0, r4
 8016dba:	d10b      	bne.n	8016dd4 <_free_r+0x74>
 8016dbc:	6820      	ldr	r0, [r4, #0]
 8016dbe:	4401      	add	r1, r0
 8016dc0:	1858      	adds	r0, r3, r1
 8016dc2:	4282      	cmp	r2, r0
 8016dc4:	6019      	str	r1, [r3, #0]
 8016dc6:	d1dd      	bne.n	8016d84 <_free_r+0x24>
 8016dc8:	6810      	ldr	r0, [r2, #0]
 8016dca:	6852      	ldr	r2, [r2, #4]
 8016dcc:	605a      	str	r2, [r3, #4]
 8016dce:	4401      	add	r1, r0
 8016dd0:	6019      	str	r1, [r3, #0]
 8016dd2:	e7d7      	b.n	8016d84 <_free_r+0x24>
 8016dd4:	d902      	bls.n	8016ddc <_free_r+0x7c>
 8016dd6:	230c      	movs	r3, #12
 8016dd8:	602b      	str	r3, [r5, #0]
 8016dda:	e7d3      	b.n	8016d84 <_free_r+0x24>
 8016ddc:	6820      	ldr	r0, [r4, #0]
 8016dde:	1821      	adds	r1, r4, r0
 8016de0:	428a      	cmp	r2, r1
 8016de2:	bf04      	itt	eq
 8016de4:	6811      	ldreq	r1, [r2, #0]
 8016de6:	6852      	ldreq	r2, [r2, #4]
 8016de8:	6062      	str	r2, [r4, #4]
 8016dea:	bf04      	itt	eq
 8016dec:	1809      	addeq	r1, r1, r0
 8016dee:	6021      	streq	r1, [r4, #0]
 8016df0:	605c      	str	r4, [r3, #4]
 8016df2:	e7c7      	b.n	8016d84 <_free_r+0x24>
 8016df4:	bd38      	pop	{r3, r4, r5, pc}
 8016df6:	bf00      	nop
 8016df8:	240087f8 	.word	0x240087f8

08016dfc <_malloc_r>:
 8016dfc:	b570      	push	{r4, r5, r6, lr}
 8016dfe:	1ccd      	adds	r5, r1, #3
 8016e00:	f025 0503 	bic.w	r5, r5, #3
 8016e04:	3508      	adds	r5, #8
 8016e06:	2d0c      	cmp	r5, #12
 8016e08:	bf38      	it	cc
 8016e0a:	250c      	movcc	r5, #12
 8016e0c:	2d00      	cmp	r5, #0
 8016e0e:	4606      	mov	r6, r0
 8016e10:	db01      	blt.n	8016e16 <_malloc_r+0x1a>
 8016e12:	42a9      	cmp	r1, r5
 8016e14:	d903      	bls.n	8016e1e <_malloc_r+0x22>
 8016e16:	230c      	movs	r3, #12
 8016e18:	6033      	str	r3, [r6, #0]
 8016e1a:	2000      	movs	r0, #0
 8016e1c:	bd70      	pop	{r4, r5, r6, pc}
 8016e1e:	f000 f8c5 	bl	8016fac <__malloc_lock>
 8016e22:	4a21      	ldr	r2, [pc, #132]	; (8016ea8 <_malloc_r+0xac>)
 8016e24:	6814      	ldr	r4, [r2, #0]
 8016e26:	4621      	mov	r1, r4
 8016e28:	b991      	cbnz	r1, 8016e50 <_malloc_r+0x54>
 8016e2a:	4c20      	ldr	r4, [pc, #128]	; (8016eac <_malloc_r+0xb0>)
 8016e2c:	6823      	ldr	r3, [r4, #0]
 8016e2e:	b91b      	cbnz	r3, 8016e38 <_malloc_r+0x3c>
 8016e30:	4630      	mov	r0, r6
 8016e32:	f000 f83d 	bl	8016eb0 <_sbrk_r>
 8016e36:	6020      	str	r0, [r4, #0]
 8016e38:	4629      	mov	r1, r5
 8016e3a:	4630      	mov	r0, r6
 8016e3c:	f000 f838 	bl	8016eb0 <_sbrk_r>
 8016e40:	1c43      	adds	r3, r0, #1
 8016e42:	d124      	bne.n	8016e8e <_malloc_r+0x92>
 8016e44:	230c      	movs	r3, #12
 8016e46:	6033      	str	r3, [r6, #0]
 8016e48:	4630      	mov	r0, r6
 8016e4a:	f000 f8b0 	bl	8016fae <__malloc_unlock>
 8016e4e:	e7e4      	b.n	8016e1a <_malloc_r+0x1e>
 8016e50:	680b      	ldr	r3, [r1, #0]
 8016e52:	1b5b      	subs	r3, r3, r5
 8016e54:	d418      	bmi.n	8016e88 <_malloc_r+0x8c>
 8016e56:	2b0b      	cmp	r3, #11
 8016e58:	d90f      	bls.n	8016e7a <_malloc_r+0x7e>
 8016e5a:	600b      	str	r3, [r1, #0]
 8016e5c:	50cd      	str	r5, [r1, r3]
 8016e5e:	18cc      	adds	r4, r1, r3
 8016e60:	4630      	mov	r0, r6
 8016e62:	f000 f8a4 	bl	8016fae <__malloc_unlock>
 8016e66:	f104 000b 	add.w	r0, r4, #11
 8016e6a:	1d23      	adds	r3, r4, #4
 8016e6c:	f020 0007 	bic.w	r0, r0, #7
 8016e70:	1ac3      	subs	r3, r0, r3
 8016e72:	d0d3      	beq.n	8016e1c <_malloc_r+0x20>
 8016e74:	425a      	negs	r2, r3
 8016e76:	50e2      	str	r2, [r4, r3]
 8016e78:	e7d0      	b.n	8016e1c <_malloc_r+0x20>
 8016e7a:	428c      	cmp	r4, r1
 8016e7c:	684b      	ldr	r3, [r1, #4]
 8016e7e:	bf16      	itet	ne
 8016e80:	6063      	strne	r3, [r4, #4]
 8016e82:	6013      	streq	r3, [r2, #0]
 8016e84:	460c      	movne	r4, r1
 8016e86:	e7eb      	b.n	8016e60 <_malloc_r+0x64>
 8016e88:	460c      	mov	r4, r1
 8016e8a:	6849      	ldr	r1, [r1, #4]
 8016e8c:	e7cc      	b.n	8016e28 <_malloc_r+0x2c>
 8016e8e:	1cc4      	adds	r4, r0, #3
 8016e90:	f024 0403 	bic.w	r4, r4, #3
 8016e94:	42a0      	cmp	r0, r4
 8016e96:	d005      	beq.n	8016ea4 <_malloc_r+0xa8>
 8016e98:	1a21      	subs	r1, r4, r0
 8016e9a:	4630      	mov	r0, r6
 8016e9c:	f000 f808 	bl	8016eb0 <_sbrk_r>
 8016ea0:	3001      	adds	r0, #1
 8016ea2:	d0cf      	beq.n	8016e44 <_malloc_r+0x48>
 8016ea4:	6025      	str	r5, [r4, #0]
 8016ea6:	e7db      	b.n	8016e60 <_malloc_r+0x64>
 8016ea8:	240087f8 	.word	0x240087f8
 8016eac:	240087fc 	.word	0x240087fc

08016eb0 <_sbrk_r>:
 8016eb0:	b538      	push	{r3, r4, r5, lr}
 8016eb2:	4c06      	ldr	r4, [pc, #24]	; (8016ecc <_sbrk_r+0x1c>)
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	4605      	mov	r5, r0
 8016eb8:	4608      	mov	r0, r1
 8016eba:	6023      	str	r3, [r4, #0]
 8016ebc:	f7eb fc22 	bl	8002704 <_sbrk>
 8016ec0:	1c43      	adds	r3, r0, #1
 8016ec2:	d102      	bne.n	8016eca <_sbrk_r+0x1a>
 8016ec4:	6823      	ldr	r3, [r4, #0]
 8016ec6:	b103      	cbz	r3, 8016eca <_sbrk_r+0x1a>
 8016ec8:	602b      	str	r3, [r5, #0]
 8016eca:	bd38      	pop	{r3, r4, r5, pc}
 8016ecc:	2401e2a4 	.word	0x2401e2a4

08016ed0 <sniprintf>:
 8016ed0:	b40c      	push	{r2, r3}
 8016ed2:	b530      	push	{r4, r5, lr}
 8016ed4:	4b17      	ldr	r3, [pc, #92]	; (8016f34 <sniprintf+0x64>)
 8016ed6:	1e0c      	subs	r4, r1, #0
 8016ed8:	b09d      	sub	sp, #116	; 0x74
 8016eda:	681d      	ldr	r5, [r3, #0]
 8016edc:	da08      	bge.n	8016ef0 <sniprintf+0x20>
 8016ede:	238b      	movs	r3, #139	; 0x8b
 8016ee0:	602b      	str	r3, [r5, #0]
 8016ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8016ee6:	b01d      	add	sp, #116	; 0x74
 8016ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016eec:	b002      	add	sp, #8
 8016eee:	4770      	bx	lr
 8016ef0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016ef4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016ef8:	bf14      	ite	ne
 8016efa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016efe:	4623      	moveq	r3, r4
 8016f00:	9304      	str	r3, [sp, #16]
 8016f02:	9307      	str	r3, [sp, #28]
 8016f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f08:	9002      	str	r0, [sp, #8]
 8016f0a:	9006      	str	r0, [sp, #24]
 8016f0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016f10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016f12:	ab21      	add	r3, sp, #132	; 0x84
 8016f14:	a902      	add	r1, sp, #8
 8016f16:	4628      	mov	r0, r5
 8016f18:	9301      	str	r3, [sp, #4]
 8016f1a:	f000 f8a3 	bl	8017064 <_svfiprintf_r>
 8016f1e:	1c43      	adds	r3, r0, #1
 8016f20:	bfbc      	itt	lt
 8016f22:	238b      	movlt	r3, #139	; 0x8b
 8016f24:	602b      	strlt	r3, [r5, #0]
 8016f26:	2c00      	cmp	r4, #0
 8016f28:	d0dd      	beq.n	8016ee6 <sniprintf+0x16>
 8016f2a:	9b02      	ldr	r3, [sp, #8]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	701a      	strb	r2, [r3, #0]
 8016f30:	e7d9      	b.n	8016ee6 <sniprintf+0x16>
 8016f32:	bf00      	nop
 8016f34:	24000188 	.word	0x24000188

08016f38 <_vsniprintf_r>:
 8016f38:	b530      	push	{r4, r5, lr}
 8016f3a:	1e14      	subs	r4, r2, #0
 8016f3c:	4605      	mov	r5, r0
 8016f3e:	b09b      	sub	sp, #108	; 0x6c
 8016f40:	4618      	mov	r0, r3
 8016f42:	da05      	bge.n	8016f50 <_vsniprintf_r+0x18>
 8016f44:	238b      	movs	r3, #139	; 0x8b
 8016f46:	602b      	str	r3, [r5, #0]
 8016f48:	f04f 30ff 	mov.w	r0, #4294967295
 8016f4c:	b01b      	add	sp, #108	; 0x6c
 8016f4e:	bd30      	pop	{r4, r5, pc}
 8016f50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016f54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016f58:	bf14      	ite	ne
 8016f5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016f5e:	4623      	moveq	r3, r4
 8016f60:	9302      	str	r3, [sp, #8]
 8016f62:	9305      	str	r3, [sp, #20]
 8016f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f68:	9100      	str	r1, [sp, #0]
 8016f6a:	9104      	str	r1, [sp, #16]
 8016f6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016f70:	4602      	mov	r2, r0
 8016f72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016f74:	4669      	mov	r1, sp
 8016f76:	4628      	mov	r0, r5
 8016f78:	f000 f874 	bl	8017064 <_svfiprintf_r>
 8016f7c:	1c43      	adds	r3, r0, #1
 8016f7e:	bfbc      	itt	lt
 8016f80:	238b      	movlt	r3, #139	; 0x8b
 8016f82:	602b      	strlt	r3, [r5, #0]
 8016f84:	2c00      	cmp	r4, #0
 8016f86:	d0e1      	beq.n	8016f4c <_vsniprintf_r+0x14>
 8016f88:	9b00      	ldr	r3, [sp, #0]
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	701a      	strb	r2, [r3, #0]
 8016f8e:	e7dd      	b.n	8016f4c <_vsniprintf_r+0x14>

08016f90 <vsniprintf>:
 8016f90:	b507      	push	{r0, r1, r2, lr}
 8016f92:	9300      	str	r3, [sp, #0]
 8016f94:	4613      	mov	r3, r2
 8016f96:	460a      	mov	r2, r1
 8016f98:	4601      	mov	r1, r0
 8016f9a:	4803      	ldr	r0, [pc, #12]	; (8016fa8 <vsniprintf+0x18>)
 8016f9c:	6800      	ldr	r0, [r0, #0]
 8016f9e:	f7ff ffcb 	bl	8016f38 <_vsniprintf_r>
 8016fa2:	b003      	add	sp, #12
 8016fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8016fa8:	24000188 	.word	0x24000188

08016fac <__malloc_lock>:
 8016fac:	4770      	bx	lr

08016fae <__malloc_unlock>:
 8016fae:	4770      	bx	lr

08016fb0 <__ssputs_r>:
 8016fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fb4:	688e      	ldr	r6, [r1, #8]
 8016fb6:	429e      	cmp	r6, r3
 8016fb8:	4682      	mov	sl, r0
 8016fba:	460c      	mov	r4, r1
 8016fbc:	4690      	mov	r8, r2
 8016fbe:	4699      	mov	r9, r3
 8016fc0:	d837      	bhi.n	8017032 <__ssputs_r+0x82>
 8016fc2:	898a      	ldrh	r2, [r1, #12]
 8016fc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016fc8:	d031      	beq.n	801702e <__ssputs_r+0x7e>
 8016fca:	6825      	ldr	r5, [r4, #0]
 8016fcc:	6909      	ldr	r1, [r1, #16]
 8016fce:	1a6f      	subs	r7, r5, r1
 8016fd0:	6965      	ldr	r5, [r4, #20]
 8016fd2:	2302      	movs	r3, #2
 8016fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8016fdc:	f109 0301 	add.w	r3, r9, #1
 8016fe0:	443b      	add	r3, r7
 8016fe2:	429d      	cmp	r5, r3
 8016fe4:	bf38      	it	cc
 8016fe6:	461d      	movcc	r5, r3
 8016fe8:	0553      	lsls	r3, r2, #21
 8016fea:	d530      	bpl.n	801704e <__ssputs_r+0x9e>
 8016fec:	4629      	mov	r1, r5
 8016fee:	f7ff ff05 	bl	8016dfc <_malloc_r>
 8016ff2:	4606      	mov	r6, r0
 8016ff4:	b950      	cbnz	r0, 801700c <__ssputs_r+0x5c>
 8016ff6:	230c      	movs	r3, #12
 8016ff8:	f8ca 3000 	str.w	r3, [sl]
 8016ffc:	89a3      	ldrh	r3, [r4, #12]
 8016ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017002:	81a3      	strh	r3, [r4, #12]
 8017004:	f04f 30ff 	mov.w	r0, #4294967295
 8017008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801700c:	463a      	mov	r2, r7
 801700e:	6921      	ldr	r1, [r4, #16]
 8017010:	f7ff fe92 	bl	8016d38 <memcpy>
 8017014:	89a3      	ldrh	r3, [r4, #12]
 8017016:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801701a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801701e:	81a3      	strh	r3, [r4, #12]
 8017020:	6126      	str	r6, [r4, #16]
 8017022:	6165      	str	r5, [r4, #20]
 8017024:	443e      	add	r6, r7
 8017026:	1bed      	subs	r5, r5, r7
 8017028:	6026      	str	r6, [r4, #0]
 801702a:	60a5      	str	r5, [r4, #8]
 801702c:	464e      	mov	r6, r9
 801702e:	454e      	cmp	r6, r9
 8017030:	d900      	bls.n	8017034 <__ssputs_r+0x84>
 8017032:	464e      	mov	r6, r9
 8017034:	4632      	mov	r2, r6
 8017036:	4641      	mov	r1, r8
 8017038:	6820      	ldr	r0, [r4, #0]
 801703a:	f000 fa93 	bl	8017564 <memmove>
 801703e:	68a3      	ldr	r3, [r4, #8]
 8017040:	1b9b      	subs	r3, r3, r6
 8017042:	60a3      	str	r3, [r4, #8]
 8017044:	6823      	ldr	r3, [r4, #0]
 8017046:	441e      	add	r6, r3
 8017048:	6026      	str	r6, [r4, #0]
 801704a:	2000      	movs	r0, #0
 801704c:	e7dc      	b.n	8017008 <__ssputs_r+0x58>
 801704e:	462a      	mov	r2, r5
 8017050:	f000 faa1 	bl	8017596 <_realloc_r>
 8017054:	4606      	mov	r6, r0
 8017056:	2800      	cmp	r0, #0
 8017058:	d1e2      	bne.n	8017020 <__ssputs_r+0x70>
 801705a:	6921      	ldr	r1, [r4, #16]
 801705c:	4650      	mov	r0, sl
 801705e:	f7ff fe7f 	bl	8016d60 <_free_r>
 8017062:	e7c8      	b.n	8016ff6 <__ssputs_r+0x46>

08017064 <_svfiprintf_r>:
 8017064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017068:	461d      	mov	r5, r3
 801706a:	898b      	ldrh	r3, [r1, #12]
 801706c:	061f      	lsls	r7, r3, #24
 801706e:	b09d      	sub	sp, #116	; 0x74
 8017070:	4680      	mov	r8, r0
 8017072:	460c      	mov	r4, r1
 8017074:	4616      	mov	r6, r2
 8017076:	d50f      	bpl.n	8017098 <_svfiprintf_r+0x34>
 8017078:	690b      	ldr	r3, [r1, #16]
 801707a:	b96b      	cbnz	r3, 8017098 <_svfiprintf_r+0x34>
 801707c:	2140      	movs	r1, #64	; 0x40
 801707e:	f7ff febd 	bl	8016dfc <_malloc_r>
 8017082:	6020      	str	r0, [r4, #0]
 8017084:	6120      	str	r0, [r4, #16]
 8017086:	b928      	cbnz	r0, 8017094 <_svfiprintf_r+0x30>
 8017088:	230c      	movs	r3, #12
 801708a:	f8c8 3000 	str.w	r3, [r8]
 801708e:	f04f 30ff 	mov.w	r0, #4294967295
 8017092:	e0c8      	b.n	8017226 <_svfiprintf_r+0x1c2>
 8017094:	2340      	movs	r3, #64	; 0x40
 8017096:	6163      	str	r3, [r4, #20]
 8017098:	2300      	movs	r3, #0
 801709a:	9309      	str	r3, [sp, #36]	; 0x24
 801709c:	2320      	movs	r3, #32
 801709e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170a2:	2330      	movs	r3, #48	; 0x30
 80170a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80170a8:	9503      	str	r5, [sp, #12]
 80170aa:	f04f 0b01 	mov.w	fp, #1
 80170ae:	4637      	mov	r7, r6
 80170b0:	463d      	mov	r5, r7
 80170b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80170b6:	b10b      	cbz	r3, 80170bc <_svfiprintf_r+0x58>
 80170b8:	2b25      	cmp	r3, #37	; 0x25
 80170ba:	d13e      	bne.n	801713a <_svfiprintf_r+0xd6>
 80170bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80170c0:	d00b      	beq.n	80170da <_svfiprintf_r+0x76>
 80170c2:	4653      	mov	r3, sl
 80170c4:	4632      	mov	r2, r6
 80170c6:	4621      	mov	r1, r4
 80170c8:	4640      	mov	r0, r8
 80170ca:	f7ff ff71 	bl	8016fb0 <__ssputs_r>
 80170ce:	3001      	adds	r0, #1
 80170d0:	f000 80a4 	beq.w	801721c <_svfiprintf_r+0x1b8>
 80170d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170d6:	4453      	add	r3, sl
 80170d8:	9309      	str	r3, [sp, #36]	; 0x24
 80170da:	783b      	ldrb	r3, [r7, #0]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	f000 809d 	beq.w	801721c <_svfiprintf_r+0x1b8>
 80170e2:	2300      	movs	r3, #0
 80170e4:	f04f 32ff 	mov.w	r2, #4294967295
 80170e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170ec:	9304      	str	r3, [sp, #16]
 80170ee:	9307      	str	r3, [sp, #28]
 80170f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80170f4:	931a      	str	r3, [sp, #104]	; 0x68
 80170f6:	462f      	mov	r7, r5
 80170f8:	2205      	movs	r2, #5
 80170fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80170fe:	4850      	ldr	r0, [pc, #320]	; (8017240 <_svfiprintf_r+0x1dc>)
 8017100:	f7e9 f8f6 	bl	80002f0 <memchr>
 8017104:	9b04      	ldr	r3, [sp, #16]
 8017106:	b9d0      	cbnz	r0, 801713e <_svfiprintf_r+0xda>
 8017108:	06d9      	lsls	r1, r3, #27
 801710a:	bf44      	itt	mi
 801710c:	2220      	movmi	r2, #32
 801710e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017112:	071a      	lsls	r2, r3, #28
 8017114:	bf44      	itt	mi
 8017116:	222b      	movmi	r2, #43	; 0x2b
 8017118:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801711c:	782a      	ldrb	r2, [r5, #0]
 801711e:	2a2a      	cmp	r2, #42	; 0x2a
 8017120:	d015      	beq.n	801714e <_svfiprintf_r+0xea>
 8017122:	9a07      	ldr	r2, [sp, #28]
 8017124:	462f      	mov	r7, r5
 8017126:	2000      	movs	r0, #0
 8017128:	250a      	movs	r5, #10
 801712a:	4639      	mov	r1, r7
 801712c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017130:	3b30      	subs	r3, #48	; 0x30
 8017132:	2b09      	cmp	r3, #9
 8017134:	d94d      	bls.n	80171d2 <_svfiprintf_r+0x16e>
 8017136:	b1b8      	cbz	r0, 8017168 <_svfiprintf_r+0x104>
 8017138:	e00f      	b.n	801715a <_svfiprintf_r+0xf6>
 801713a:	462f      	mov	r7, r5
 801713c:	e7b8      	b.n	80170b0 <_svfiprintf_r+0x4c>
 801713e:	4a40      	ldr	r2, [pc, #256]	; (8017240 <_svfiprintf_r+0x1dc>)
 8017140:	1a80      	subs	r0, r0, r2
 8017142:	fa0b f000 	lsl.w	r0, fp, r0
 8017146:	4318      	orrs	r0, r3
 8017148:	9004      	str	r0, [sp, #16]
 801714a:	463d      	mov	r5, r7
 801714c:	e7d3      	b.n	80170f6 <_svfiprintf_r+0x92>
 801714e:	9a03      	ldr	r2, [sp, #12]
 8017150:	1d11      	adds	r1, r2, #4
 8017152:	6812      	ldr	r2, [r2, #0]
 8017154:	9103      	str	r1, [sp, #12]
 8017156:	2a00      	cmp	r2, #0
 8017158:	db01      	blt.n	801715e <_svfiprintf_r+0xfa>
 801715a:	9207      	str	r2, [sp, #28]
 801715c:	e004      	b.n	8017168 <_svfiprintf_r+0x104>
 801715e:	4252      	negs	r2, r2
 8017160:	f043 0302 	orr.w	r3, r3, #2
 8017164:	9207      	str	r2, [sp, #28]
 8017166:	9304      	str	r3, [sp, #16]
 8017168:	783b      	ldrb	r3, [r7, #0]
 801716a:	2b2e      	cmp	r3, #46	; 0x2e
 801716c:	d10c      	bne.n	8017188 <_svfiprintf_r+0x124>
 801716e:	787b      	ldrb	r3, [r7, #1]
 8017170:	2b2a      	cmp	r3, #42	; 0x2a
 8017172:	d133      	bne.n	80171dc <_svfiprintf_r+0x178>
 8017174:	9b03      	ldr	r3, [sp, #12]
 8017176:	1d1a      	adds	r2, r3, #4
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	9203      	str	r2, [sp, #12]
 801717c:	2b00      	cmp	r3, #0
 801717e:	bfb8      	it	lt
 8017180:	f04f 33ff 	movlt.w	r3, #4294967295
 8017184:	3702      	adds	r7, #2
 8017186:	9305      	str	r3, [sp, #20]
 8017188:	4d2e      	ldr	r5, [pc, #184]	; (8017244 <_svfiprintf_r+0x1e0>)
 801718a:	7839      	ldrb	r1, [r7, #0]
 801718c:	2203      	movs	r2, #3
 801718e:	4628      	mov	r0, r5
 8017190:	f7e9 f8ae 	bl	80002f0 <memchr>
 8017194:	b138      	cbz	r0, 80171a6 <_svfiprintf_r+0x142>
 8017196:	2340      	movs	r3, #64	; 0x40
 8017198:	1b40      	subs	r0, r0, r5
 801719a:	fa03 f000 	lsl.w	r0, r3, r0
 801719e:	9b04      	ldr	r3, [sp, #16]
 80171a0:	4303      	orrs	r3, r0
 80171a2:	3701      	adds	r7, #1
 80171a4:	9304      	str	r3, [sp, #16]
 80171a6:	7839      	ldrb	r1, [r7, #0]
 80171a8:	4827      	ldr	r0, [pc, #156]	; (8017248 <_svfiprintf_r+0x1e4>)
 80171aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80171ae:	2206      	movs	r2, #6
 80171b0:	1c7e      	adds	r6, r7, #1
 80171b2:	f7e9 f89d 	bl	80002f0 <memchr>
 80171b6:	2800      	cmp	r0, #0
 80171b8:	d038      	beq.n	801722c <_svfiprintf_r+0x1c8>
 80171ba:	4b24      	ldr	r3, [pc, #144]	; (801724c <_svfiprintf_r+0x1e8>)
 80171bc:	bb13      	cbnz	r3, 8017204 <_svfiprintf_r+0x1a0>
 80171be:	9b03      	ldr	r3, [sp, #12]
 80171c0:	3307      	adds	r3, #7
 80171c2:	f023 0307 	bic.w	r3, r3, #7
 80171c6:	3308      	adds	r3, #8
 80171c8:	9303      	str	r3, [sp, #12]
 80171ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171cc:	444b      	add	r3, r9
 80171ce:	9309      	str	r3, [sp, #36]	; 0x24
 80171d0:	e76d      	b.n	80170ae <_svfiprintf_r+0x4a>
 80171d2:	fb05 3202 	mla	r2, r5, r2, r3
 80171d6:	2001      	movs	r0, #1
 80171d8:	460f      	mov	r7, r1
 80171da:	e7a6      	b.n	801712a <_svfiprintf_r+0xc6>
 80171dc:	2300      	movs	r3, #0
 80171de:	3701      	adds	r7, #1
 80171e0:	9305      	str	r3, [sp, #20]
 80171e2:	4619      	mov	r1, r3
 80171e4:	250a      	movs	r5, #10
 80171e6:	4638      	mov	r0, r7
 80171e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171ec:	3a30      	subs	r2, #48	; 0x30
 80171ee:	2a09      	cmp	r2, #9
 80171f0:	d903      	bls.n	80171fa <_svfiprintf_r+0x196>
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d0c8      	beq.n	8017188 <_svfiprintf_r+0x124>
 80171f6:	9105      	str	r1, [sp, #20]
 80171f8:	e7c6      	b.n	8017188 <_svfiprintf_r+0x124>
 80171fa:	fb05 2101 	mla	r1, r5, r1, r2
 80171fe:	2301      	movs	r3, #1
 8017200:	4607      	mov	r7, r0
 8017202:	e7f0      	b.n	80171e6 <_svfiprintf_r+0x182>
 8017204:	ab03      	add	r3, sp, #12
 8017206:	9300      	str	r3, [sp, #0]
 8017208:	4622      	mov	r2, r4
 801720a:	4b11      	ldr	r3, [pc, #68]	; (8017250 <_svfiprintf_r+0x1ec>)
 801720c:	a904      	add	r1, sp, #16
 801720e:	4640      	mov	r0, r8
 8017210:	f3af 8000 	nop.w
 8017214:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017218:	4681      	mov	r9, r0
 801721a:	d1d6      	bne.n	80171ca <_svfiprintf_r+0x166>
 801721c:	89a3      	ldrh	r3, [r4, #12]
 801721e:	065b      	lsls	r3, r3, #25
 8017220:	f53f af35 	bmi.w	801708e <_svfiprintf_r+0x2a>
 8017224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017226:	b01d      	add	sp, #116	; 0x74
 8017228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801722c:	ab03      	add	r3, sp, #12
 801722e:	9300      	str	r3, [sp, #0]
 8017230:	4622      	mov	r2, r4
 8017232:	4b07      	ldr	r3, [pc, #28]	; (8017250 <_svfiprintf_r+0x1ec>)
 8017234:	a904      	add	r1, sp, #16
 8017236:	4640      	mov	r0, r8
 8017238:	f000 f882 	bl	8017340 <_printf_i>
 801723c:	e7ea      	b.n	8017214 <_svfiprintf_r+0x1b0>
 801723e:	bf00      	nop
 8017240:	08017e94 	.word	0x08017e94
 8017244:	08017e9a 	.word	0x08017e9a
 8017248:	08017e9e 	.word	0x08017e9e
 801724c:	00000000 	.word	0x00000000
 8017250:	08016fb1 	.word	0x08016fb1

08017254 <_printf_common>:
 8017254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017258:	4691      	mov	r9, r2
 801725a:	461f      	mov	r7, r3
 801725c:	688a      	ldr	r2, [r1, #8]
 801725e:	690b      	ldr	r3, [r1, #16]
 8017260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017264:	4293      	cmp	r3, r2
 8017266:	bfb8      	it	lt
 8017268:	4613      	movlt	r3, r2
 801726a:	f8c9 3000 	str.w	r3, [r9]
 801726e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017272:	4606      	mov	r6, r0
 8017274:	460c      	mov	r4, r1
 8017276:	b112      	cbz	r2, 801727e <_printf_common+0x2a>
 8017278:	3301      	adds	r3, #1
 801727a:	f8c9 3000 	str.w	r3, [r9]
 801727e:	6823      	ldr	r3, [r4, #0]
 8017280:	0699      	lsls	r1, r3, #26
 8017282:	bf42      	ittt	mi
 8017284:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017288:	3302      	addmi	r3, #2
 801728a:	f8c9 3000 	strmi.w	r3, [r9]
 801728e:	6825      	ldr	r5, [r4, #0]
 8017290:	f015 0506 	ands.w	r5, r5, #6
 8017294:	d107      	bne.n	80172a6 <_printf_common+0x52>
 8017296:	f104 0a19 	add.w	sl, r4, #25
 801729a:	68e3      	ldr	r3, [r4, #12]
 801729c:	f8d9 2000 	ldr.w	r2, [r9]
 80172a0:	1a9b      	subs	r3, r3, r2
 80172a2:	42ab      	cmp	r3, r5
 80172a4:	dc28      	bgt.n	80172f8 <_printf_common+0xa4>
 80172a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80172aa:	6822      	ldr	r2, [r4, #0]
 80172ac:	3300      	adds	r3, #0
 80172ae:	bf18      	it	ne
 80172b0:	2301      	movne	r3, #1
 80172b2:	0692      	lsls	r2, r2, #26
 80172b4:	d42d      	bmi.n	8017312 <_printf_common+0xbe>
 80172b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80172ba:	4639      	mov	r1, r7
 80172bc:	4630      	mov	r0, r6
 80172be:	47c0      	blx	r8
 80172c0:	3001      	adds	r0, #1
 80172c2:	d020      	beq.n	8017306 <_printf_common+0xb2>
 80172c4:	6823      	ldr	r3, [r4, #0]
 80172c6:	68e5      	ldr	r5, [r4, #12]
 80172c8:	f8d9 2000 	ldr.w	r2, [r9]
 80172cc:	f003 0306 	and.w	r3, r3, #6
 80172d0:	2b04      	cmp	r3, #4
 80172d2:	bf08      	it	eq
 80172d4:	1aad      	subeq	r5, r5, r2
 80172d6:	68a3      	ldr	r3, [r4, #8]
 80172d8:	6922      	ldr	r2, [r4, #16]
 80172da:	bf0c      	ite	eq
 80172dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80172e0:	2500      	movne	r5, #0
 80172e2:	4293      	cmp	r3, r2
 80172e4:	bfc4      	itt	gt
 80172e6:	1a9b      	subgt	r3, r3, r2
 80172e8:	18ed      	addgt	r5, r5, r3
 80172ea:	f04f 0900 	mov.w	r9, #0
 80172ee:	341a      	adds	r4, #26
 80172f0:	454d      	cmp	r5, r9
 80172f2:	d11a      	bne.n	801732a <_printf_common+0xd6>
 80172f4:	2000      	movs	r0, #0
 80172f6:	e008      	b.n	801730a <_printf_common+0xb6>
 80172f8:	2301      	movs	r3, #1
 80172fa:	4652      	mov	r2, sl
 80172fc:	4639      	mov	r1, r7
 80172fe:	4630      	mov	r0, r6
 8017300:	47c0      	blx	r8
 8017302:	3001      	adds	r0, #1
 8017304:	d103      	bne.n	801730e <_printf_common+0xba>
 8017306:	f04f 30ff 	mov.w	r0, #4294967295
 801730a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801730e:	3501      	adds	r5, #1
 8017310:	e7c3      	b.n	801729a <_printf_common+0x46>
 8017312:	18e1      	adds	r1, r4, r3
 8017314:	1c5a      	adds	r2, r3, #1
 8017316:	2030      	movs	r0, #48	; 0x30
 8017318:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801731c:	4422      	add	r2, r4
 801731e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017322:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017326:	3302      	adds	r3, #2
 8017328:	e7c5      	b.n	80172b6 <_printf_common+0x62>
 801732a:	2301      	movs	r3, #1
 801732c:	4622      	mov	r2, r4
 801732e:	4639      	mov	r1, r7
 8017330:	4630      	mov	r0, r6
 8017332:	47c0      	blx	r8
 8017334:	3001      	adds	r0, #1
 8017336:	d0e6      	beq.n	8017306 <_printf_common+0xb2>
 8017338:	f109 0901 	add.w	r9, r9, #1
 801733c:	e7d8      	b.n	80172f0 <_printf_common+0x9c>
	...

08017340 <_printf_i>:
 8017340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017344:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017348:	460c      	mov	r4, r1
 801734a:	7e09      	ldrb	r1, [r1, #24]
 801734c:	b085      	sub	sp, #20
 801734e:	296e      	cmp	r1, #110	; 0x6e
 8017350:	4617      	mov	r7, r2
 8017352:	4606      	mov	r6, r0
 8017354:	4698      	mov	r8, r3
 8017356:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017358:	f000 80b3 	beq.w	80174c2 <_printf_i+0x182>
 801735c:	d822      	bhi.n	80173a4 <_printf_i+0x64>
 801735e:	2963      	cmp	r1, #99	; 0x63
 8017360:	d036      	beq.n	80173d0 <_printf_i+0x90>
 8017362:	d80a      	bhi.n	801737a <_printf_i+0x3a>
 8017364:	2900      	cmp	r1, #0
 8017366:	f000 80b9 	beq.w	80174dc <_printf_i+0x19c>
 801736a:	2958      	cmp	r1, #88	; 0x58
 801736c:	f000 8083 	beq.w	8017476 <_printf_i+0x136>
 8017370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017374:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017378:	e032      	b.n	80173e0 <_printf_i+0xa0>
 801737a:	2964      	cmp	r1, #100	; 0x64
 801737c:	d001      	beq.n	8017382 <_printf_i+0x42>
 801737e:	2969      	cmp	r1, #105	; 0x69
 8017380:	d1f6      	bne.n	8017370 <_printf_i+0x30>
 8017382:	6820      	ldr	r0, [r4, #0]
 8017384:	6813      	ldr	r3, [r2, #0]
 8017386:	0605      	lsls	r5, r0, #24
 8017388:	f103 0104 	add.w	r1, r3, #4
 801738c:	d52a      	bpl.n	80173e4 <_printf_i+0xa4>
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	6011      	str	r1, [r2, #0]
 8017392:	2b00      	cmp	r3, #0
 8017394:	da03      	bge.n	801739e <_printf_i+0x5e>
 8017396:	222d      	movs	r2, #45	; 0x2d
 8017398:	425b      	negs	r3, r3
 801739a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801739e:	486f      	ldr	r0, [pc, #444]	; (801755c <_printf_i+0x21c>)
 80173a0:	220a      	movs	r2, #10
 80173a2:	e039      	b.n	8017418 <_printf_i+0xd8>
 80173a4:	2973      	cmp	r1, #115	; 0x73
 80173a6:	f000 809d 	beq.w	80174e4 <_printf_i+0x1a4>
 80173aa:	d808      	bhi.n	80173be <_printf_i+0x7e>
 80173ac:	296f      	cmp	r1, #111	; 0x6f
 80173ae:	d020      	beq.n	80173f2 <_printf_i+0xb2>
 80173b0:	2970      	cmp	r1, #112	; 0x70
 80173b2:	d1dd      	bne.n	8017370 <_printf_i+0x30>
 80173b4:	6823      	ldr	r3, [r4, #0]
 80173b6:	f043 0320 	orr.w	r3, r3, #32
 80173ba:	6023      	str	r3, [r4, #0]
 80173bc:	e003      	b.n	80173c6 <_printf_i+0x86>
 80173be:	2975      	cmp	r1, #117	; 0x75
 80173c0:	d017      	beq.n	80173f2 <_printf_i+0xb2>
 80173c2:	2978      	cmp	r1, #120	; 0x78
 80173c4:	d1d4      	bne.n	8017370 <_printf_i+0x30>
 80173c6:	2378      	movs	r3, #120	; 0x78
 80173c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80173cc:	4864      	ldr	r0, [pc, #400]	; (8017560 <_printf_i+0x220>)
 80173ce:	e055      	b.n	801747c <_printf_i+0x13c>
 80173d0:	6813      	ldr	r3, [r2, #0]
 80173d2:	1d19      	adds	r1, r3, #4
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	6011      	str	r1, [r2, #0]
 80173d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80173e0:	2301      	movs	r3, #1
 80173e2:	e08c      	b.n	80174fe <_printf_i+0x1be>
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	6011      	str	r1, [r2, #0]
 80173e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80173ec:	bf18      	it	ne
 80173ee:	b21b      	sxthne	r3, r3
 80173f0:	e7cf      	b.n	8017392 <_printf_i+0x52>
 80173f2:	6813      	ldr	r3, [r2, #0]
 80173f4:	6825      	ldr	r5, [r4, #0]
 80173f6:	1d18      	adds	r0, r3, #4
 80173f8:	6010      	str	r0, [r2, #0]
 80173fa:	0628      	lsls	r0, r5, #24
 80173fc:	d501      	bpl.n	8017402 <_printf_i+0xc2>
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	e002      	b.n	8017408 <_printf_i+0xc8>
 8017402:	0668      	lsls	r0, r5, #25
 8017404:	d5fb      	bpl.n	80173fe <_printf_i+0xbe>
 8017406:	881b      	ldrh	r3, [r3, #0]
 8017408:	4854      	ldr	r0, [pc, #336]	; (801755c <_printf_i+0x21c>)
 801740a:	296f      	cmp	r1, #111	; 0x6f
 801740c:	bf14      	ite	ne
 801740e:	220a      	movne	r2, #10
 8017410:	2208      	moveq	r2, #8
 8017412:	2100      	movs	r1, #0
 8017414:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017418:	6865      	ldr	r5, [r4, #4]
 801741a:	60a5      	str	r5, [r4, #8]
 801741c:	2d00      	cmp	r5, #0
 801741e:	f2c0 8095 	blt.w	801754c <_printf_i+0x20c>
 8017422:	6821      	ldr	r1, [r4, #0]
 8017424:	f021 0104 	bic.w	r1, r1, #4
 8017428:	6021      	str	r1, [r4, #0]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d13d      	bne.n	80174aa <_printf_i+0x16a>
 801742e:	2d00      	cmp	r5, #0
 8017430:	f040 808e 	bne.w	8017550 <_printf_i+0x210>
 8017434:	4665      	mov	r5, ip
 8017436:	2a08      	cmp	r2, #8
 8017438:	d10b      	bne.n	8017452 <_printf_i+0x112>
 801743a:	6823      	ldr	r3, [r4, #0]
 801743c:	07db      	lsls	r3, r3, #31
 801743e:	d508      	bpl.n	8017452 <_printf_i+0x112>
 8017440:	6923      	ldr	r3, [r4, #16]
 8017442:	6862      	ldr	r2, [r4, #4]
 8017444:	429a      	cmp	r2, r3
 8017446:	bfde      	ittt	le
 8017448:	2330      	movle	r3, #48	; 0x30
 801744a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801744e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017452:	ebac 0305 	sub.w	r3, ip, r5
 8017456:	6123      	str	r3, [r4, #16]
 8017458:	f8cd 8000 	str.w	r8, [sp]
 801745c:	463b      	mov	r3, r7
 801745e:	aa03      	add	r2, sp, #12
 8017460:	4621      	mov	r1, r4
 8017462:	4630      	mov	r0, r6
 8017464:	f7ff fef6 	bl	8017254 <_printf_common>
 8017468:	3001      	adds	r0, #1
 801746a:	d14d      	bne.n	8017508 <_printf_i+0x1c8>
 801746c:	f04f 30ff 	mov.w	r0, #4294967295
 8017470:	b005      	add	sp, #20
 8017472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017476:	4839      	ldr	r0, [pc, #228]	; (801755c <_printf_i+0x21c>)
 8017478:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801747c:	6813      	ldr	r3, [r2, #0]
 801747e:	6821      	ldr	r1, [r4, #0]
 8017480:	1d1d      	adds	r5, r3, #4
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	6015      	str	r5, [r2, #0]
 8017486:	060a      	lsls	r2, r1, #24
 8017488:	d50b      	bpl.n	80174a2 <_printf_i+0x162>
 801748a:	07ca      	lsls	r2, r1, #31
 801748c:	bf44      	itt	mi
 801748e:	f041 0120 	orrmi.w	r1, r1, #32
 8017492:	6021      	strmi	r1, [r4, #0]
 8017494:	b91b      	cbnz	r3, 801749e <_printf_i+0x15e>
 8017496:	6822      	ldr	r2, [r4, #0]
 8017498:	f022 0220 	bic.w	r2, r2, #32
 801749c:	6022      	str	r2, [r4, #0]
 801749e:	2210      	movs	r2, #16
 80174a0:	e7b7      	b.n	8017412 <_printf_i+0xd2>
 80174a2:	064d      	lsls	r5, r1, #25
 80174a4:	bf48      	it	mi
 80174a6:	b29b      	uxthmi	r3, r3
 80174a8:	e7ef      	b.n	801748a <_printf_i+0x14a>
 80174aa:	4665      	mov	r5, ip
 80174ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80174b0:	fb02 3311 	mls	r3, r2, r1, r3
 80174b4:	5cc3      	ldrb	r3, [r0, r3]
 80174b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80174ba:	460b      	mov	r3, r1
 80174bc:	2900      	cmp	r1, #0
 80174be:	d1f5      	bne.n	80174ac <_printf_i+0x16c>
 80174c0:	e7b9      	b.n	8017436 <_printf_i+0xf6>
 80174c2:	6813      	ldr	r3, [r2, #0]
 80174c4:	6825      	ldr	r5, [r4, #0]
 80174c6:	6961      	ldr	r1, [r4, #20]
 80174c8:	1d18      	adds	r0, r3, #4
 80174ca:	6010      	str	r0, [r2, #0]
 80174cc:	0628      	lsls	r0, r5, #24
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	d501      	bpl.n	80174d6 <_printf_i+0x196>
 80174d2:	6019      	str	r1, [r3, #0]
 80174d4:	e002      	b.n	80174dc <_printf_i+0x19c>
 80174d6:	066a      	lsls	r2, r5, #25
 80174d8:	d5fb      	bpl.n	80174d2 <_printf_i+0x192>
 80174da:	8019      	strh	r1, [r3, #0]
 80174dc:	2300      	movs	r3, #0
 80174de:	6123      	str	r3, [r4, #16]
 80174e0:	4665      	mov	r5, ip
 80174e2:	e7b9      	b.n	8017458 <_printf_i+0x118>
 80174e4:	6813      	ldr	r3, [r2, #0]
 80174e6:	1d19      	adds	r1, r3, #4
 80174e8:	6011      	str	r1, [r2, #0]
 80174ea:	681d      	ldr	r5, [r3, #0]
 80174ec:	6862      	ldr	r2, [r4, #4]
 80174ee:	2100      	movs	r1, #0
 80174f0:	4628      	mov	r0, r5
 80174f2:	f7e8 fefd 	bl	80002f0 <memchr>
 80174f6:	b108      	cbz	r0, 80174fc <_printf_i+0x1bc>
 80174f8:	1b40      	subs	r0, r0, r5
 80174fa:	6060      	str	r0, [r4, #4]
 80174fc:	6863      	ldr	r3, [r4, #4]
 80174fe:	6123      	str	r3, [r4, #16]
 8017500:	2300      	movs	r3, #0
 8017502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017506:	e7a7      	b.n	8017458 <_printf_i+0x118>
 8017508:	6923      	ldr	r3, [r4, #16]
 801750a:	462a      	mov	r2, r5
 801750c:	4639      	mov	r1, r7
 801750e:	4630      	mov	r0, r6
 8017510:	47c0      	blx	r8
 8017512:	3001      	adds	r0, #1
 8017514:	d0aa      	beq.n	801746c <_printf_i+0x12c>
 8017516:	6823      	ldr	r3, [r4, #0]
 8017518:	079b      	lsls	r3, r3, #30
 801751a:	d413      	bmi.n	8017544 <_printf_i+0x204>
 801751c:	68e0      	ldr	r0, [r4, #12]
 801751e:	9b03      	ldr	r3, [sp, #12]
 8017520:	4298      	cmp	r0, r3
 8017522:	bfb8      	it	lt
 8017524:	4618      	movlt	r0, r3
 8017526:	e7a3      	b.n	8017470 <_printf_i+0x130>
 8017528:	2301      	movs	r3, #1
 801752a:	464a      	mov	r2, r9
 801752c:	4639      	mov	r1, r7
 801752e:	4630      	mov	r0, r6
 8017530:	47c0      	blx	r8
 8017532:	3001      	adds	r0, #1
 8017534:	d09a      	beq.n	801746c <_printf_i+0x12c>
 8017536:	3501      	adds	r5, #1
 8017538:	68e3      	ldr	r3, [r4, #12]
 801753a:	9a03      	ldr	r2, [sp, #12]
 801753c:	1a9b      	subs	r3, r3, r2
 801753e:	42ab      	cmp	r3, r5
 8017540:	dcf2      	bgt.n	8017528 <_printf_i+0x1e8>
 8017542:	e7eb      	b.n	801751c <_printf_i+0x1dc>
 8017544:	2500      	movs	r5, #0
 8017546:	f104 0919 	add.w	r9, r4, #25
 801754a:	e7f5      	b.n	8017538 <_printf_i+0x1f8>
 801754c:	2b00      	cmp	r3, #0
 801754e:	d1ac      	bne.n	80174aa <_printf_i+0x16a>
 8017550:	7803      	ldrb	r3, [r0, #0]
 8017552:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017556:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801755a:	e76c      	b.n	8017436 <_printf_i+0xf6>
 801755c:	08017ea5 	.word	0x08017ea5
 8017560:	08017eb6 	.word	0x08017eb6

08017564 <memmove>:
 8017564:	4288      	cmp	r0, r1
 8017566:	b510      	push	{r4, lr}
 8017568:	eb01 0302 	add.w	r3, r1, r2
 801756c:	d807      	bhi.n	801757e <memmove+0x1a>
 801756e:	1e42      	subs	r2, r0, #1
 8017570:	4299      	cmp	r1, r3
 8017572:	d00a      	beq.n	801758a <memmove+0x26>
 8017574:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017578:	f802 4f01 	strb.w	r4, [r2, #1]!
 801757c:	e7f8      	b.n	8017570 <memmove+0xc>
 801757e:	4283      	cmp	r3, r0
 8017580:	d9f5      	bls.n	801756e <memmove+0xa>
 8017582:	1881      	adds	r1, r0, r2
 8017584:	1ad2      	subs	r2, r2, r3
 8017586:	42d3      	cmn	r3, r2
 8017588:	d100      	bne.n	801758c <memmove+0x28>
 801758a:	bd10      	pop	{r4, pc}
 801758c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017590:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017594:	e7f7      	b.n	8017586 <memmove+0x22>

08017596 <_realloc_r>:
 8017596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017598:	4607      	mov	r7, r0
 801759a:	4614      	mov	r4, r2
 801759c:	460e      	mov	r6, r1
 801759e:	b921      	cbnz	r1, 80175aa <_realloc_r+0x14>
 80175a0:	4611      	mov	r1, r2
 80175a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80175a6:	f7ff bc29 	b.w	8016dfc <_malloc_r>
 80175aa:	b922      	cbnz	r2, 80175b6 <_realloc_r+0x20>
 80175ac:	f7ff fbd8 	bl	8016d60 <_free_r>
 80175b0:	4625      	mov	r5, r4
 80175b2:	4628      	mov	r0, r5
 80175b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175b6:	f000 f814 	bl	80175e2 <_malloc_usable_size_r>
 80175ba:	42a0      	cmp	r0, r4
 80175bc:	d20f      	bcs.n	80175de <_realloc_r+0x48>
 80175be:	4621      	mov	r1, r4
 80175c0:	4638      	mov	r0, r7
 80175c2:	f7ff fc1b 	bl	8016dfc <_malloc_r>
 80175c6:	4605      	mov	r5, r0
 80175c8:	2800      	cmp	r0, #0
 80175ca:	d0f2      	beq.n	80175b2 <_realloc_r+0x1c>
 80175cc:	4631      	mov	r1, r6
 80175ce:	4622      	mov	r2, r4
 80175d0:	f7ff fbb2 	bl	8016d38 <memcpy>
 80175d4:	4631      	mov	r1, r6
 80175d6:	4638      	mov	r0, r7
 80175d8:	f7ff fbc2 	bl	8016d60 <_free_r>
 80175dc:	e7e9      	b.n	80175b2 <_realloc_r+0x1c>
 80175de:	4635      	mov	r5, r6
 80175e0:	e7e7      	b.n	80175b2 <_realloc_r+0x1c>

080175e2 <_malloc_usable_size_r>:
 80175e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80175e6:	1f18      	subs	r0, r3, #4
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	bfbc      	itt	lt
 80175ec:	580b      	ldrlt	r3, [r1, r0]
 80175ee:	18c0      	addlt	r0, r0, r3
 80175f0:	4770      	bx	lr

080175f2 <checkint>:
 80175f2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80175f6:	2b7e      	cmp	r3, #126	; 0x7e
 80175f8:	dd10      	ble.n	801761c <checkint+0x2a>
 80175fa:	2b96      	cmp	r3, #150	; 0x96
 80175fc:	dc0c      	bgt.n	8017618 <checkint+0x26>
 80175fe:	2201      	movs	r2, #1
 8017600:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8017604:	fa02 f303 	lsl.w	r3, r2, r3
 8017608:	1e5a      	subs	r2, r3, #1
 801760a:	4202      	tst	r2, r0
 801760c:	d106      	bne.n	801761c <checkint+0x2a>
 801760e:	4203      	tst	r3, r0
 8017610:	bf0c      	ite	eq
 8017612:	2002      	moveq	r0, #2
 8017614:	2001      	movne	r0, #1
 8017616:	4770      	bx	lr
 8017618:	2002      	movs	r0, #2
 801761a:	4770      	bx	lr
 801761c:	2000      	movs	r0, #0
 801761e:	4770      	bx	lr

08017620 <powf>:
 8017620:	ee10 1a10 	vmov	r1, s0
 8017624:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8017628:	ee10 4a90 	vmov	r4, s1
 801762c:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8017630:	0062      	lsls	r2, r4, #1
 8017632:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017636:	eef0 4a60 	vmov.f32	s9, s1
 801763a:	f102 30ff 	add.w	r0, r2, #4294967295
 801763e:	4b92      	ldr	r3, [pc, #584]	; (8017888 <powf+0x268>)
 8017640:	d255      	bcs.n	80176ee <powf+0xce>
 8017642:	4298      	cmp	r0, r3
 8017644:	d855      	bhi.n	80176f2 <powf+0xd2>
 8017646:	2000      	movs	r0, #0
 8017648:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 801764c:	4a8f      	ldr	r2, [pc, #572]	; (801788c <powf+0x26c>)
 801764e:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 8017652:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8017656:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 801765a:	0ddb      	lsrs	r3, r3, #23
 801765c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8017660:	05db      	lsls	r3, r3, #23
 8017662:	ed94 6b00 	vldr	d6, [r4]
 8017666:	1ac9      	subs	r1, r1, r3
 8017668:	ee07 1a90 	vmov	s15, r1
 801766c:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8017670:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017674:	eea6 2b07 	vfma.f64	d2, d6, d7
 8017678:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 801767c:	ee22 6b02 	vmul.f64	d6, d2, d2
 8017680:	eea2 7b05 	vfma.f64	d7, d2, d5
 8017684:	15db      	asrs	r3, r3, #23
 8017686:	ed94 5b02 	vldr	d5, [r4, #8]
 801768a:	ee00 3a10 	vmov	s0, r3
 801768e:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8017692:	ee30 0b05 	vadd.f64	d0, d0, d5
 8017696:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 801769a:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 801769e:	eea2 0b05 	vfma.f64	d0, d2, d5
 80176a2:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 80176a6:	eea2 5b03 	vfma.f64	d5, d2, d3
 80176aa:	eea6 0b05 	vfma.f64	d0, d6, d5
 80176ae:	ee26 6b06 	vmul.f64	d6, d6, d6
 80176b2:	eea7 0b06 	vfma.f64	d0, d7, d6
 80176b6:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 80176ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 80176be:	ee10 3a90 	vmov	r3, s1
 80176c2:	2500      	movs	r5, #0
 80176c4:	0bda      	lsrs	r2, r3, #15
 80176c6:	2300      	movs	r3, #0
 80176c8:	b292      	uxth	r2, r2
 80176ca:	f248 04be 	movw	r4, #32958	; 0x80be
 80176ce:	429d      	cmp	r5, r3
 80176d0:	bf08      	it	eq
 80176d2:	4294      	cmpeq	r4, r2
 80176d4:	f080 8094 	bcs.w	8017800 <powf+0x1e0>
 80176d8:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8017870 <powf+0x250>
 80176dc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80176e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176e4:	dd76      	ble.n	80177d4 <powf+0x1b4>
 80176e6:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80176ea:	f000 b8fd 	b.w	80178e8 <__math_oflowf>
 80176ee:	4298      	cmp	r0, r3
 80176f0:	d92d      	bls.n	801774e <powf+0x12e>
 80176f2:	b952      	cbnz	r2, 801770a <powf+0xea>
 80176f4:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 80176f8:	005b      	lsls	r3, r3, #1
 80176fa:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 80176fe:	f240 80ae 	bls.w	801785e <powf+0x23e>
 8017702:	ee30 0a24 	vadd.f32	s0, s0, s9
 8017706:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 801770a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 801770e:	d105      	bne.n	801771c <powf+0xfc>
 8017710:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8017714:	0064      	lsls	r4, r4, #1
 8017716:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801771a:	e7f0      	b.n	80176fe <powf+0xde>
 801771c:	004b      	lsls	r3, r1, #1
 801771e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8017722:	d8ee      	bhi.n	8017702 <powf+0xe2>
 8017724:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8017728:	d1eb      	bne.n	8017702 <powf+0xe2>
 801772a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801772e:	f000 8096 	beq.w	801785e <powf+0x23e>
 8017732:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017736:	ea6f 0404 	mvn.w	r4, r4
 801773a:	bf34      	ite	cc
 801773c:	2300      	movcc	r3, #0
 801773e:	2301      	movcs	r3, #1
 8017740:	0fe4      	lsrs	r4, r4, #31
 8017742:	42a3      	cmp	r3, r4
 8017744:	f040 808e 	bne.w	8017864 <powf+0x244>
 8017748:	ee24 0aa4 	vmul.f32	s0, s9, s9
 801774c:	e7db      	b.n	8017706 <powf+0xe6>
 801774e:	004d      	lsls	r5, r1, #1
 8017750:	1e6a      	subs	r2, r5, #1
 8017752:	429a      	cmp	r2, r3
 8017754:	d91b      	bls.n	801778e <powf+0x16e>
 8017756:	2900      	cmp	r1, #0
 8017758:	ee20 0a00 	vmul.f32	s0, s0, s0
 801775c:	da0e      	bge.n	801777c <powf+0x15c>
 801775e:	ee10 0a90 	vmov	r0, s1
 8017762:	f7ff ff46 	bl	80175f2 <checkint>
 8017766:	2801      	cmp	r0, #1
 8017768:	d108      	bne.n	801777c <powf+0x15c>
 801776a:	eeb1 0a40 	vneg.f32	s0, s0
 801776e:	b93d      	cbnz	r5, 8017780 <powf+0x160>
 8017770:	2c00      	cmp	r4, #0
 8017772:	dac8      	bge.n	8017706 <powf+0xe6>
 8017774:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8017778:	f000 b8bc 	b.w	80178f4 <__math_divzerof>
 801777c:	2000      	movs	r0, #0
 801777e:	e7f6      	b.n	801776e <powf+0x14e>
 8017780:	2c00      	cmp	r4, #0
 8017782:	dac0      	bge.n	8017706 <powf+0xe6>
 8017784:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017788:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801778c:	e7bb      	b.n	8017706 <powf+0xe6>
 801778e:	2900      	cmp	r1, #0
 8017790:	da1e      	bge.n	80177d0 <powf+0x1b0>
 8017792:	ee10 0a90 	vmov	r0, s1
 8017796:	f7ff ff2c 	bl	80175f2 <checkint>
 801779a:	b918      	cbnz	r0, 80177a4 <powf+0x184>
 801779c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80177a0:	f000 b8b8 	b.w	8017914 <__math_invalidf>
 80177a4:	2801      	cmp	r0, #1
 80177a6:	bf0c      	ite	eq
 80177a8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80177ac:	2000      	movne	r0, #0
 80177ae:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80177b2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80177b6:	f4bf af47 	bcs.w	8017648 <powf+0x28>
 80177ba:	eddf 0a35 	vldr	s1, [pc, #212]	; 8017890 <powf+0x270>
 80177be:	ee20 0a20 	vmul.f32	s0, s0, s1
 80177c2:	ee10 3a10 	vmov	r3, s0
 80177c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80177ca:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80177ce:	e73b      	b.n	8017648 <powf+0x28>
 80177d0:	2000      	movs	r0, #0
 80177d2:	e7ee      	b.n	80177b2 <powf+0x192>
 80177d4:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8017878 <powf+0x258>
 80177d8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80177dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177e0:	d803      	bhi.n	80177ea <powf+0x1ca>
 80177e2:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80177e6:	f000 b873 	b.w	80178d0 <__math_uflowf>
 80177ea:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8017880 <powf+0x260>
 80177ee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80177f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177f6:	d503      	bpl.n	8017800 <powf+0x1e0>
 80177f8:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80177fc:	f000 b86e 	b.w	80178dc <__math_may_uflowf>
 8017800:	4924      	ldr	r1, [pc, #144]	; (8017894 <powf+0x274>)
 8017802:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 8017806:	ee30 6b07 	vadd.f64	d6, d0, d7
 801780a:	ec55 4b16 	vmov	r4, r5, d6
 801780e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017812:	f004 021f 	and.w	r2, r4, #31
 8017816:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801781a:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 801781e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8017822:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8017826:	e9d2 6700 	ldrd	r6, r7, [r2]
 801782a:	eea0 7b06 	vfma.f64	d7, d0, d6
 801782e:	1824      	adds	r4, r4, r0
 8017830:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8017834:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8017838:	2000      	movs	r0, #0
 801783a:	1982      	adds	r2, r0, r6
 801783c:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8017840:	eb41 0307 	adc.w	r3, r1, r7
 8017844:	eea0 6b05 	vfma.f64	d6, d0, d5
 8017848:	ee20 0b00 	vmul.f64	d0, d0, d0
 801784c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8017850:	ec43 2b16 	vmov	d6, r2, r3
 8017854:	ee27 0b06 	vmul.f64	d0, d7, d6
 8017858:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801785c:	e753      	b.n	8017706 <powf+0xe6>
 801785e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017862:	e750      	b.n	8017706 <powf+0xe6>
 8017864:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8017898 <powf+0x278>
 8017868:	e74d      	b.n	8017706 <powf+0xe6>
 801786a:	bf00      	nop
 801786c:	f3af 8000 	nop.w
 8017870:	ffd1d571 	.word	0xffd1d571
 8017874:	405fffff 	.word	0x405fffff
 8017878:	00000000 	.word	0x00000000
 801787c:	c062c000 	.word	0xc062c000
 8017880:	00000000 	.word	0x00000000
 8017884:	c062a000 	.word	0xc062a000
 8017888:	fefffffe 	.word	0xfefffffe
 801788c:	08017f28 	.word	0x08017f28
 8017890:	4b000000 	.word	0x4b000000
 8017894:	08018050 	.word	0x08018050
 8017898:	00000000 	.word	0x00000000

0801789c <with_errnof>:
 801789c:	b510      	push	{r4, lr}
 801789e:	ed2d 8b02 	vpush	{d8}
 80178a2:	eeb0 8a40 	vmov.f32	s16, s0
 80178a6:	4604      	mov	r4, r0
 80178a8:	f7ff fa0c 	bl	8016cc4 <__errno>
 80178ac:	eeb0 0a48 	vmov.f32	s0, s16
 80178b0:	ecbd 8b02 	vpop	{d8}
 80178b4:	6004      	str	r4, [r0, #0]
 80178b6:	bd10      	pop	{r4, pc}

080178b8 <xflowf>:
 80178b8:	b130      	cbz	r0, 80178c8 <xflowf+0x10>
 80178ba:	eef1 7a40 	vneg.f32	s15, s0
 80178be:	2022      	movs	r0, #34	; 0x22
 80178c0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80178c4:	f7ff bfea 	b.w	801789c <with_errnof>
 80178c8:	eef0 7a40 	vmov.f32	s15, s0
 80178cc:	e7f7      	b.n	80178be <xflowf+0x6>
	...

080178d0 <__math_uflowf>:
 80178d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80178d8 <__math_uflowf+0x8>
 80178d4:	f7ff bff0 	b.w	80178b8 <xflowf>
 80178d8:	10000000 	.word	0x10000000

080178dc <__math_may_uflowf>:
 80178dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80178e4 <__math_may_uflowf+0x8>
 80178e0:	f7ff bfea 	b.w	80178b8 <xflowf>
 80178e4:	1a200000 	.word	0x1a200000

080178e8 <__math_oflowf>:
 80178e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80178f0 <__math_oflowf+0x8>
 80178ec:	f7ff bfe4 	b.w	80178b8 <xflowf>
 80178f0:	70000000 	.word	0x70000000

080178f4 <__math_divzerof>:
 80178f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80178f8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80178fc:	2800      	cmp	r0, #0
 80178fe:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8017902:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8017910 <__math_divzerof+0x1c>
 8017906:	2022      	movs	r0, #34	; 0x22
 8017908:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801790c:	f7ff bfc6 	b.w	801789c <with_errnof>
 8017910:	00000000 	.word	0x00000000

08017914 <__math_invalidf>:
 8017914:	eef0 7a40 	vmov.f32	s15, s0
 8017918:	ee30 7a40 	vsub.f32	s14, s0, s0
 801791c:	eef4 7a67 	vcmp.f32	s15, s15
 8017920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017924:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8017928:	d602      	bvs.n	8017930 <__math_invalidf+0x1c>
 801792a:	2021      	movs	r0, #33	; 0x21
 801792c:	f7ff bfb6 	b.w	801789c <with_errnof>
 8017930:	4770      	bx	lr
	...

08017934 <_init>:
 8017934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017936:	bf00      	nop
 8017938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801793a:	bc08      	pop	{r3}
 801793c:	469e      	mov	lr, r3
 801793e:	4770      	bx	lr

08017940 <_fini>:
 8017940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017942:	bf00      	nop
 8017944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017946:	bc08      	pop	{r3}
 8017948:	469e      	mov	lr, r3
 801794a:	4770      	bx	lr
