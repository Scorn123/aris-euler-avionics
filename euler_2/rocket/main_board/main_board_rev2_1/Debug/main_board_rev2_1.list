
main_board_rev2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013cc4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001048  08013f68  08013f68  00023f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014fb0  08014fb0  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08014fb0  08014fb0  00024fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014fb8  08014fb8  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014fb8  08014fb8  00024fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014fbc  08014fbc  00024fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  24000000  08014fc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00022574  240001f4  080151b4  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00001300  24022768  080151b4  00032768  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007aab1  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000d6de  00000000  00000000  000aacd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00025809  00000000  00000000  000b83b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002998  00000000  00000000  000ddbc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003d10  00000000  00000000  000e0558  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0004a7f3  00000000  00000000  000e4268  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0003ac65  00000000  00000000  0012ea5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00194343  00000000  00000000  001696c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  002fda03  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008698  00000000  00000000  002fda80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013f4c 	.word	0x08013f4c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	08013f4c 	.word	0x08013f4c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <calculateCRC>:
uint16_t calculateCRC(uint8_t *data, uint8_t len) {
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;

	for (int i = 0; i < len + 2; i += 2) {
 8000690:	2200      	movs	r2, #0
 8000692:	f101 0c01 	add.w	ip, r1, #1
uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000696:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t crc = 0;
 8000698:	4613      	mov	r3, r2
			carry = crc & 0x8000;
			crc <<= 1;
			if (c & shifter)
				crc++;
			if (carry)
				crc ^= 0x1021;
 800069a:	f241 0e21 	movw	lr, #4129	; 0x1021
	for (int i = 0; i < len + 2; i += 2) {
 800069e:	4594      	cmp	ip, r2
 80006a0:	da01      	bge.n	80006a6 <calculateCRC+0x16>
			shifter >>= 1;
		} while (shifter);
	}
	return crc;
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i == len) {
 80006a6:	4291      	cmp	r1, r2
			c = 0;
 80006a8:	461f      	mov	r7, r3
 80006aa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
			c = data[i + 1] << 8 | data[i];
 80006ae:	bf17      	itett	ne
 80006b0:	1884      	addne	r4, r0, r2
			c = 0;
 80006b2:	2400      	moveq	r4, #0
			c = data[i + 1] << 8 | data[i];
 80006b4:	7865      	ldrbne	r5, [r4, #1]
 80006b6:	5c84      	ldrbne	r4, [r0, r2]
 80006b8:	bf18      	it	ne
 80006ba:	ea44 2405 	orrne.w	r4, r4, r5, lsl #8
			c = 0;
 80006be:	2510      	movs	r5, #16
			crc <<= 1;
 80006c0:	005b      	lsls	r3, r3, #1
			if (c & shifter)
 80006c2:	4226      	tst	r6, r4
			shifter >>= 1;
 80006c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
			crc <<= 1;
 80006c8:	b29b      	uxth	r3, r3
				crc++;
 80006ca:	bf1c      	itt	ne
 80006cc:	3301      	addne	r3, #1
 80006ce:	b29b      	uxthne	r3, r3
			if (carry)
 80006d0:	043f      	lsls	r7, r7, #16
				crc ^= 0x1021;
 80006d2:	bf48      	it	mi
 80006d4:	ea83 030e 	eormi.w	r3, r3, lr
		} while (shifter);
 80006d8:	3d01      	subs	r5, #1
 80006da:	d101      	bne.n	80006e0 <calculateCRC+0x50>
	for (int i = 0; i < len + 2; i += 2) {
 80006dc:	3202      	adds	r2, #2
 80006de:	e7de      	b.n	800069e <calculateCRC+0xe>
 80006e0:	461f      	mov	r7, r3
 80006e2:	e7ed      	b.n	80006c0 <calculateCRC+0x30>

080006e4 <WriteCommand>:

	return status;

}

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer) {
 80006e4:	b570      	push	{r4, r5, r6, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	460d      	mov	r5, r1
	osStatus_t status = osError;

	uint8_t byte_stream_write[14] = { 0 };
 80006ea:	2100      	movs	r1, #0
osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer) {
 80006ec:	4606      	mov	r6, r0
 80006ee:	4614      	mov	r4, r2

	uint8_t dma_buffer[20] = { 0 };
 80006f0:	a807      	add	r0, sp, #28
 80006f2:	2214      	movs	r2, #20
	uint8_t byte_stream_write[14] = { 0 };
 80006f4:	f8cd 1012 	str.w	r1, [sp, #18]
 80006f8:	f8cd 1016 	str.w	r1, [sp, #22]
	uint8_t dma_buffer[20] = { 0 };
 80006fc:	f011 ff9b 	bl	8012636 <memset>

	byte_stream_write[0] = 0x90;			// DLE
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <WriteCommand+0xcc>)
	byte_stream_write[10] = data[1];		// Data
	byte_stream_write[11] = data[0];		// Data - high byte

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
	memcpy(crc_data_array, &byte_stream_write[2],
 8000702:	aa0c      	add	r2, sp, #48	; 0x30
	byte_stream_write[0] = 0x90;			// DLE
 8000704:	9303      	str	r3, [sp, #12]
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 8000706:	2301      	movs	r3, #1
 8000708:	f88d 3010 	strb.w	r3, [sp, #16]
	byte_stream_write[5] = command[1];		// Index Low Byte
 800070c:	7873      	ldrb	r3, [r6, #1]
 800070e:	f88d 3011 	strb.w	r3, [sp, #17]
	byte_stream_write[6] = command[0];		// Index High byte
 8000712:	7833      	ldrb	r3, [r6, #0]

	HAL_UART_DMAResume(&huart4);
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
	osDelay(5);
	HAL_UART_DMAStop(&huart4);
	memcpy(rx_buffer, dma_buffer, 20);
 8000714:	ae0b      	add	r6, sp, #44	; 0x2c
	byte_stream_write[6] = command[0];		// Index High byte
 8000716:	f88d 3012 	strb.w	r3, [sp, #18]
	byte_stream_write[8] = data[3];			// Data - low byte
 800071a:	78eb      	ldrb	r3, [r5, #3]
 800071c:	f88d 3014 	strb.w	r3, [sp, #20]
	byte_stream_write[9] = data[2];			// Data
 8000720:	78ab      	ldrb	r3, [r5, #2]
 8000722:	f88d 3015 	strb.w	r3, [sp, #21]
	byte_stream_write[10] = data[1];		// Data
 8000726:	786b      	ldrb	r3, [r5, #1]
 8000728:	f88d 3016 	strb.w	r3, [sp, #22]
	byte_stream_write[11] = data[0];		// Data - high byte
 800072c:	782b      	ldrb	r3, [r5, #0]
 800072e:	f88d 3017 	strb.w	r3, [sp, #23]
	memcpy(crc_data_array, &byte_stream_write[2],
 8000732:	466b      	mov	r3, sp
 8000734:	f852 0d22 	ldr.w	r0, [r2, #-34]!
 8000738:	6851      	ldr	r1, [r2, #4]
 800073a:	8912      	ldrh	r2, [r2, #8]
 800073c:	c303      	stmia	r3!, {r0, r1}
	crc_calc = calculateCRC(crc_data_array, 10);
 800073e:	210a      	movs	r1, #10
	memcpy(crc_data_array, &byte_stream_write[2],
 8000740:	801a      	strh	r2, [r3, #0]
	crc_calc = calculateCRC(crc_data_array, 10);
 8000742:	4668      	mov	r0, sp
 8000744:	f7ff ffa4 	bl	8000690 <calculateCRC>
	byte_stream_write[12] = crc_calc & 0xFF;
 8000748:	f88d 0018 	strb.w	r0, [sp, #24]
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;
 800074c:	0a00      	lsrs	r0, r0, #8
	HAL_UART_Transmit_DMA(&huart4, byte_stream_write, 14);
 800074e:	220e      	movs	r2, #14
 8000750:	a903      	add	r1, sp, #12
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;
 8000752:	f88d 0019 	strb.w	r0, [sp, #25]
	HAL_UART_Transmit_DMA(&huart4, byte_stream_write, 14);
 8000756:	4817      	ldr	r0, [pc, #92]	; (80007b4 <WriteCommand+0xd0>)
 8000758:	f00b f8b0 	bl	800b8bc <HAL_UART_Transmit_DMA>
	HAL_UART_DMAResume(&huart4);
 800075c:	4815      	ldr	r0, [pc, #84]	; (80007b4 <WriteCommand+0xd0>)
 800075e:	f00b f971 	bl	800ba44 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8000762:	2214      	movs	r2, #20
 8000764:	a907      	add	r1, sp, #28
 8000766:	4813      	ldr	r0, [pc, #76]	; (80007b4 <WriteCommand+0xd0>)
 8000768:	f00b f8f2 	bl	800b950 <HAL_UART_Receive_DMA>
	osDelay(5);
 800076c:	2005      	movs	r0, #5
 800076e:	f00f fa7d 	bl	800fc6c <osDelay>
	HAL_UART_DMAStop(&huart4);
 8000772:	4810      	ldr	r0, [pc, #64]	; (80007b4 <WriteCommand+0xd0>)
 8000774:	f00b f990 	bl	800ba98 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 8000778:	ab07      	add	r3, sp, #28
 800077a:	4622      	mov	r2, r4
 800077c:	461d      	mov	r5, r3
 800077e:	3208      	adds	r2, #8
 8000780:	cd03      	ldmia	r5!, {r0, r1}
 8000782:	42b5      	cmp	r5, r6
 8000784:	f842 0c08 	str.w	r0, [r2, #-8]
 8000788:	f842 1c04 	str.w	r1, [r2, #-4]
 800078c:	462b      	mov	r3, r5
 800078e:	d1f5      	bne.n	800077c <WriteCommand+0x98>
 8000790:	6828      	ldr	r0, [r5, #0]
 8000792:	6010      	str	r0, [r2, #0]

	/* Check if we have an error code */
	if ((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0) {
 8000794:	79a2      	ldrb	r2, [r4, #6]
 8000796:	79e3      	ldrb	r3, [r4, #7]
 8000798:	4313      	orrs	r3, r2
 800079a:	7962      	ldrb	r2, [r4, #5]
 800079c:	4313      	orrs	r3, r2
 800079e:	7922      	ldrb	r2, [r4, #4]
 80007a0:	4313      	orrs	r3, r2
		status = osOK;
	}

	return status;

}
 80007a2:	bf14      	ite	ne
 80007a4:	f04f 30ff 	movne.w	r0, #4294967295
 80007a8:	2000      	moveq	r0, #0
 80007aa:	b00c      	add	sp, #48	; 0x30
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	bf00      	nop
 80007b0:	04680290 	.word	0x04680290
 80007b4:	2401a164 	.word	0x2401a164

080007b8 <DisableMotor>:
osStatus_t DisableMotor() {
 80007b8:	b500      	push	{lr}
	command[0] = 0x60;
 80007ba:	f244 1360 	movw	r3, #16736	; 0x4160
osStatus_t DisableMotor() {
 80007be:	b089      	sub	sp, #36	; 0x24
	command[0] = 0x60;
 80007c0:	f8ad 3004 	strh.w	r3, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 80007c4:	aa03      	add	r2, sp, #12
	data[0] = 0x00;
 80007c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	status = WriteCommand(command, data, rx_buffer_write);
 80007ca:	a902      	add	r1, sp, #8
 80007cc:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 80007ce:	9302      	str	r3, [sp, #8]
	status = WriteCommand(command, data, rx_buffer_write);
 80007d0:	f7ff ff88 	bl	80006e4 <WriteCommand>
}
 80007d4:	b009      	add	sp, #36	; 0x24
 80007d6:	f85d fb04 	ldr.w	pc, [sp], #4

080007da <SetPositionMode>:
osStatus_t SetPositionMode(int8_t position_mode) {
 80007da:	b500      	push	{lr}
	command[0] = 0x60;
 80007dc:	f246 0360 	movw	r3, #24672	; 0x6060
osStatus_t SetPositionMode(int8_t position_mode) {
 80007e0:	b089      	sub	sp, #36	; 0x24
	command[0] = 0x60;
 80007e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 80007e6:	aa03      	add	r2, sp, #12
	data[0] = 0x00;
 80007e8:	2300      	movs	r3, #0
	status = WriteCommand(command, data, rx_buffer_write);
 80007ea:	a902      	add	r1, sp, #8
	data[3] = position_mode;
 80007ec:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 80007f0:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 80007f2:	f8ad 3008 	strh.w	r3, [sp, #8]
	data[1] = 0x00;
 80007f6:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80007fa:	f7ff ff73 	bl	80006e4 <WriteCommand>
}
 80007fe:	b009      	add	sp, #36	; 0x24
 8000800:	f85d fb04 	ldr.w	pc, [sp], #4

08000804 <MoveToPositionPPM>:
osStatus_t MoveToPositionPPM(int32_t position) {
 8000804:	b510      	push	{r4, lr}
	command[0] = 0x60;
 8000806:	f647 2360 	movw	r3, #31328	; 0x7a60
osStatus_t MoveToPositionPPM(int32_t position) {
 800080a:	b088      	sub	sp, #32
	command[0] = 0x60;
 800080c:	f244 0460 	movw	r4, #16480	; 0x4060
	command[0] = 0x60;
 8000810:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (position >> 24) & 0xFF;
 8000814:	0e03      	lsrs	r3, r0, #24
	data[3] = position & 0xFF;
 8000816:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 800081a:	aa03      	add	r2, sp, #12
	data[0] = (position >> 24) & 0xFF;
 800081c:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (position >> 16) & 0xFF;
 8000820:	1403      	asrs	r3, r0, #16
	status = WriteCommand(command, data, rx_buffer_write);
 8000822:	a902      	add	r1, sp, #8
	data[1] = (position >> 16) & 0xFF;
 8000824:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (position >> 8) & 0xFF;
 8000828:	1203      	asrs	r3, r0, #8
	status = WriteCommand(command, data, rx_buffer_write);
 800082a:	a801      	add	r0, sp, #4
	data[2] = (position >> 8) & 0xFF;
 800082c:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 8000830:	f7ff ff58 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 8000834:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
	status = WriteCommand(command, data, rx_buffer_write);
 8000838:	aa03      	add	r2, sp, #12
 800083a:	a902      	add	r1, sp, #8
 800083c:	a801      	add	r0, sp, #4
	data[0] = 0x00;
 800083e:	9302      	str	r3, [sp, #8]
	command[0] = 0x60;
 8000840:	f8ad 4004 	strh.w	r4, [sp, #4]
	status = WriteCommand(command, data, rx_buffer_write);
 8000844:	f7ff ff4e 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 8000848:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
	status = WriteCommand(command, data, rx_buffer_write);
 800084c:	aa03      	add	r2, sp, #12
 800084e:	a902      	add	r1, sp, #8
 8000850:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 8000852:	f8ad 4004 	strh.w	r4, [sp, #4]
	data[0] = 0x00;
 8000856:	9302      	str	r3, [sp, #8]
	status = WriteCommand(command, data, rx_buffer_write);
 8000858:	f7ff ff44 	bl	80006e4 <WriteCommand>
}
 800085c:	b008      	add	sp, #32
 800085e:	bd10      	pop	{r4, pc}

08000860 <ConfigurePPM>:
		int32_t deceleration) {
 8000860:	b530      	push	{r4, r5, lr}
	command[0] = 0x60;
 8000862:	f248 1360 	movw	r3, #33120	; 0x8160
		int32_t deceleration) {
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	460d      	mov	r5, r1
 800086a:	4614      	mov	r4, r2
	command[0] = 0x60;
 800086c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (velocity >> 24) & 0xFF;
 8000870:	0e03      	lsrs	r3, r0, #24
	data[3] = velocity & 0xFF;
 8000872:	f88d 000b 	strb.w	r0, [sp, #11]
	status = WriteCommand(command, data, rx_buffer_write);
 8000876:	aa03      	add	r2, sp, #12
	data[0] = (velocity >> 24) & 0xFF;
 8000878:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (velocity >> 16) & 0xFF;
 800087c:	1403      	asrs	r3, r0, #16
	status = WriteCommand(command, data, rx_buffer_write);
 800087e:	a902      	add	r1, sp, #8
	data[1] = (velocity >> 16) & 0xFF;
 8000880:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (velocity >> 8) & 0xFF;
 8000884:	1203      	asrs	r3, r0, #8
	status = WriteCommand(command, data, rx_buffer_write);
 8000886:	a801      	add	r0, sp, #4
	data[2] = (velocity >> 8) & 0xFF;
 8000888:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 800088c:	f7ff ff2a 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 8000890:	f248 3360 	movw	r3, #33632	; 0x8360
	status = WriteCommand(command, data, rx_buffer_write);
 8000894:	aa03      	add	r2, sp, #12
 8000896:	a902      	add	r1, sp, #8
 8000898:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 800089a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (acceleration >> 24) & 0xFF;
 800089e:	0e2b      	lsrs	r3, r5, #24
	data[3] = acceleration & 0xFF;
 80008a0:	f88d 500b 	strb.w	r5, [sp, #11]
	data[0] = (acceleration >> 24) & 0xFF;
 80008a4:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (acceleration >> 16) & 0xFF;
 80008a8:	142b      	asrs	r3, r5, #16
 80008aa:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (acceleration >> 8) & 0xFF;
 80008ae:	122b      	asrs	r3, r5, #8
 80008b0:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80008b4:	f7ff ff16 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 80008b8:	f248 4360 	movw	r3, #33888	; 0x8460
	status = WriteCommand(command, data, rx_buffer_write);
 80008bc:	aa03      	add	r2, sp, #12
 80008be:	a902      	add	r1, sp, #8
 80008c0:	a801      	add	r0, sp, #4
	command[0] = 0x60;
 80008c2:	f8ad 3004 	strh.w	r3, [sp, #4]
	data[0] = (deceleration >> 24) & 0xFF;
 80008c6:	0e23      	lsrs	r3, r4, #24
	data[3] = deceleration & 0xFF;
 80008c8:	f88d 400b 	strb.w	r4, [sp, #11]
	data[0] = (deceleration >> 24) & 0xFF;
 80008cc:	f88d 3008 	strb.w	r3, [sp, #8]
	data[1] = (deceleration >> 16) & 0xFF;
 80008d0:	1423      	asrs	r3, r4, #16
 80008d2:	f88d 3009 	strb.w	r3, [sp, #9]
	data[2] = (deceleration >> 8) & 0xFF;
 80008d6:	1223      	asrs	r3, r4, #8
 80008d8:	f88d 300a 	strb.w	r3, [sp, #10]
	status = WriteCommand(command, data, rx_buffer_write);
 80008dc:	f7ff ff02 	bl	80006e4 <WriteCommand>
}
 80008e0:	b009      	add	sp, #36	; 0x24
 80008e2:	bd30      	pop	{r4, r5, pc}

080008e4 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer) {
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	4605      	mov	r5, r0
	osStatus_t status = osError;

	uint8_t byte_stream_read[10];

	uint8_t dma_buffer[30] = { 0 };
 80008ea:	221e      	movs	r2, #30
osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer) {
 80008ec:	460c      	mov	r4, r1
	uint8_t dma_buffer[30] = { 0 };
 80008ee:	a806      	add	r0, sp, #24
 80008f0:	2100      	movs	r1, #0
 80008f2:	f011 fea0 	bl	8012636 <memset>

	byte_stream_read[0] = 0x90;				// DLE
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <ReadCommand+0xac>)
	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
	memcpy(crc_data_array, &byte_stream_read[2], 6 * sizeof(*byte_stream_read));

	uint16_t crc_calc = 0;
	crc_calc = calculateCRC(crc_data_array, 6);
 80008f8:	2106      	movs	r1, #6

	HAL_UART_DMAResume(&huart4);
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
	osDelay(5);
	HAL_UART_DMAStop(&huart4);
	memcpy(rx_buffer, dma_buffer, 20);
 80008fa:	ae0a      	add	r6, sp, #40	; 0x28
	byte_stream_read[0] = 0x90;				// DLE
 80008fc:	9303      	str	r3, [sp, #12]
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80008fe:	2301      	movs	r3, #1
 8000900:	f88d 3010 	strb.w	r3, [sp, #16]
	byte_stream_read[5] = command[1];		// Index Low Byte
 8000904:	786b      	ldrb	r3, [r5, #1]
 8000906:	f88d 3011 	strb.w	r3, [sp, #17]
	byte_stream_read[6] = command[0];		// Index High byte
 800090a:	782b      	ldrb	r3, [r5, #0]
 800090c:	f88d 3012 	strb.w	r3, [sp, #18]
	byte_stream_read[7] = 0x00;				// Subindex of object
 8000910:	2300      	movs	r3, #0
 8000912:	f88d 3013 	strb.w	r3, [sp, #19]
	memcpy(crc_data_array, &byte_stream_read[2], 6 * sizeof(*byte_stream_read));
 8000916:	ab0e      	add	r3, sp, #56	; 0x38
 8000918:	f853 0d2a 	ldr.w	r0, [r3, #-42]!
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	9001      	str	r0, [sp, #4]
	crc_calc = calculateCRC(crc_data_array, 6);
 8000920:	a801      	add	r0, sp, #4
	memcpy(crc_data_array, &byte_stream_read[2], 6 * sizeof(*byte_stream_read));
 8000922:	f8ad 3008 	strh.w	r3, [sp, #8]
	crc_calc = calculateCRC(crc_data_array, 6);
 8000926:	f7ff feb3 	bl	8000690 <calculateCRC>
	byte_stream_read[8] = crc_calc & 0xFF;
 800092a:	f88d 0014 	strb.w	r0, [sp, #20]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;
 800092e:	0a00      	lsrs	r0, r0, #8
	HAL_UART_Transmit_DMA(&huart4, byte_stream_read, 10);
 8000930:	220a      	movs	r2, #10
 8000932:	a903      	add	r1, sp, #12
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;
 8000934:	f88d 0015 	strb.w	r0, [sp, #21]
	HAL_UART_Transmit_DMA(&huart4, byte_stream_read, 10);
 8000938:	4816      	ldr	r0, [pc, #88]	; (8000994 <ReadCommand+0xb0>)
 800093a:	f00a ffbf 	bl	800b8bc <HAL_UART_Transmit_DMA>
	HAL_UART_DMAResume(&huart4);
 800093e:	4815      	ldr	r0, [pc, #84]	; (8000994 <ReadCommand+0xb0>)
 8000940:	f00b f880 	bl	800ba44 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8000944:	2214      	movs	r2, #20
 8000946:	a906      	add	r1, sp, #24
 8000948:	4812      	ldr	r0, [pc, #72]	; (8000994 <ReadCommand+0xb0>)
 800094a:	f00b f801 	bl	800b950 <HAL_UART_Receive_DMA>
	osDelay(5);
 800094e:	2005      	movs	r0, #5
 8000950:	f00f f98c 	bl	800fc6c <osDelay>
	HAL_UART_DMAStop(&huart4);
 8000954:	480f      	ldr	r0, [pc, #60]	; (8000994 <ReadCommand+0xb0>)
 8000956:	f00b f89f 	bl	800ba98 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 800095a:	ab06      	add	r3, sp, #24
 800095c:	4622      	mov	r2, r4
 800095e:	461d      	mov	r5, r3
 8000960:	3208      	adds	r2, #8
 8000962:	cd03      	ldmia	r5!, {r0, r1}
 8000964:	42b5      	cmp	r5, r6
 8000966:	f842 0c08 	str.w	r0, [r2, #-8]
 800096a:	f842 1c04 	str.w	r1, [r2, #-4]
 800096e:	462b      	mov	r3, r5
 8000970:	d1f5      	bne.n	800095e <ReadCommand+0x7a>
 8000972:	6828      	ldr	r0, [r5, #0]
 8000974:	6010      	str	r0, [r2, #0]

	/* check if we have an error code */
	if ((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0) {
 8000976:	79a2      	ldrb	r2, [r4, #6]
 8000978:	79e3      	ldrb	r3, [r4, #7]
 800097a:	4313      	orrs	r3, r2
 800097c:	7962      	ldrb	r2, [r4, #5]
 800097e:	4313      	orrs	r3, r2
 8000980:	7922      	ldrb	r2, [r4, #4]
 8000982:	4313      	orrs	r3, r2
		status = osOK;
	}
	return status;

}
 8000984:	bf14      	ite	ne
 8000986:	f04f 30ff 	movne.w	r0, #4294967295
 800098a:	2000      	moveq	r0, #0
 800098c:	b00e      	add	sp, #56	; 0x38
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	02600290 	.word	0x02600290
 8000994:	2401a164 	.word	0x2401a164

08000998 <EnableMotor>:
osStatus_t EnableMotor() {
 8000998:	b510      	push	{r4, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
	data[0] = 0x00;
 800099c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
	command[0] = 0x60;
 80009a0:	f244 0460 	movw	r4, #16480	; 0x4060
	status = WriteCommand(command, data, rx_buffer_write);
 80009a4:	aa02      	add	r2, sp, #8
 80009a6:	a901      	add	r1, sp, #4
 80009a8:	4668      	mov	r0, sp
	data[0] = 0x00;
 80009aa:	9301      	str	r3, [sp, #4]
	command[0] = 0x60;
 80009ac:	f8ad 4000 	strh.w	r4, [sp]
	status = WriteCommand(command, data, rx_buffer_write);
 80009b0:	f7ff fe98 	bl	80006e4 <WriteCommand>
	data[0] = 0x00;
 80009b4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
	status = WriteCommand(command, data, rx_buffer_write);
 80009b8:	aa02      	add	r2, sp, #8
 80009ba:	a901      	add	r1, sp, #4
 80009bc:	4668      	mov	r0, sp
	data[0] = 0x00;
 80009be:	9301      	str	r3, [sp, #4]
	command[0] = 0x60;
 80009c0:	f8ad 4000 	strh.w	r4, [sp]
	status = WriteCommand(command, data, rx_buffer_write);
 80009c4:	f7ff fe8e 	bl	80006e4 <WriteCommand>
	command[0] = 0x60;
 80009c8:	f244 1360 	movw	r3, #16736	; 0x4160
	status = ReadCommand(command, rx_buffer_read);
 80009cc:	a907      	add	r1, sp, #28
 80009ce:	4668      	mov	r0, sp
	command[0] = 0x60;
 80009d0:	f8ad 3000 	strh.w	r3, [sp]
	status = ReadCommand(command, rx_buffer_read);
 80009d4:	f7ff ff86 	bl	80008e4 <ReadCommand>
	if (rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04) {
 80009d8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80009dc:	2b37      	cmp	r3, #55	; 0x37
 80009de:	d104      	bne.n	80009ea <EnableMotor+0x52>
 80009e0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80009e4:	2b04      	cmp	r3, #4
		status = osOK;
 80009e6:	bf08      	it	eq
 80009e8:	2000      	moveq	r0, #0
}
 80009ea:	b00c      	add	sp, #48	; 0x30
 80009ec:	bd10      	pop	{r4, pc}

080009ee <GetPosition>:
osStatus_t GetPosition(int32_t *position) {
 80009ee:	b510      	push	{r4, lr}
 80009f0:	b086      	sub	sp, #24
	command[0] = 0x60;
 80009f2:	f246 4360 	movw	r3, #25696	; 0x6460
osStatus_t GetPosition(int32_t *position) {
 80009f6:	4604      	mov	r4, r0
	status = ReadCommand(command, rx_buffer_read);
 80009f8:	a901      	add	r1, sp, #4
 80009fa:	4668      	mov	r0, sp
	command[0] = 0x60;
 80009fc:	f8ad 3000 	strh.w	r3, [sp]
	status = ReadCommand(command, rx_buffer_read);
 8000a00:	f7ff ff70 	bl	80008e4 <ReadCommand>
	*position = rx_buffer_read[8] + (rx_buffer_read[9] << 8)
 8000a04:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000a08:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000a0c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			+ (rx_buffer_read[10] << 16) + (rx_buffer_read[11] << 24);
 8000a10:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8000a14:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8000a18:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000a1c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
	*position = rx_buffer_read[8] + (rx_buffer_read[9] << 8)
 8000a20:	6023      	str	r3, [r4, #0]
}
 8000a22:	b006      	add	sp, #24
 8000a24:	bd10      	pop	{r4, pc}
	...

08000a28 <write_read_command>:
	write_enable();
	return write_command(&erase_chip_command, sizeof(erase_chip_command));
}


osStatus_t write_read_command(uint8_t *write_data, uint8_t *read_data, uint16_t size){
 8000a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	//	HAL_status = HAL_SPI_Transmit_DMA(&hspi4, write_data, size);
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	//	HAL_status = HAL_SPI_Receive_DMA(&hspi4, read_data, size);
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8000a2c:	4c0f      	ldr	r4, [pc, #60]	; (8000a6c <write_read_command+0x44>)
osStatus_t write_read_command(uint8_t *write_data, uint8_t *read_data, uint16_t size){
 8000a2e:	4616      	mov	r6, r2
 8000a30:	4680      	mov	r8, r0
	HAL_SPI_Transmit(&hspi4, write_data, size, 5);
 8000a32:	4d0f      	ldr	r5, [pc, #60]	; (8000a70 <write_read_command+0x48>)
osStatus_t write_read_command(uint8_t *write_data, uint8_t *read_data, uint16_t size){
 8000a34:	460f      	mov	r7, r1
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8000a36:	4620      	mov	r0, r4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	f006 fd3c 	bl	80074b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi4, write_data, size, 5);
 8000a40:	4632      	mov	r2, r6
 8000a42:	4641      	mov	r1, r8
 8000a44:	2305      	movs	r3, #5
 8000a46:	4628      	mov	r0, r5
 8000a48:	f009 fe7a 	bl	800a740 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi4, read_data, size, 5);
 8000a4c:	2305      	movs	r3, #5
 8000a4e:	4632      	mov	r2, r6
 8000a50:	4639      	mov	r1, r7
 8000a52:	4628      	mov	r0, r5
 8000a54:	f00a f912 	bl	800ac7c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8000a58:	4620      	mov	r0, r4
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	f006 fd2b 	bl	80074b8 <HAL_GPIO_WritePin>
	if (HAL_status != HAL_OK){
		status = osError;
	}

	return status;
}
 8000a62:	f04f 30ff 	mov.w	r0, #4294967295
 8000a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a6a:	bf00      	nop
 8000a6c:	58021000 	.word	0x58021000
 8000a70:	24011f68 	.word	0x24011f68

08000a74 <read_chip_id>:
	uint8_t buffer[4] = { 0 };
 8000a74:	2300      	movs	r3, #0
int32_t read_chip_id(){
 8000a76:	b507      	push	{r0, r1, r2, lr}
	write_read_command(buffer, receive_buffer, sizeof(buffer));
 8000a78:	2204      	movs	r2, #4
 8000a7a:	4668      	mov	r0, sp
	uint8_t receive_buffer[4] = { 0 };
 8000a7c:	e9cd 3300 	strd	r3, r3, [sp]
	buffer[0] = DEVICE_ID_REGISTER;
 8000a80:	2390      	movs	r3, #144	; 0x90
	write_read_command(buffer, receive_buffer, sizeof(buffer));
 8000a82:	eb0d 0102 	add.w	r1, sp, r2
	buffer[0] = DEVICE_ID_REGISTER;
 8000a86:	f88d 3000 	strb.w	r3, [sp]
	write_read_command(buffer, receive_buffer, sizeof(buffer));
 8000a8a:	f7ff ffcd 	bl	8000a28 <write_read_command>
	chip_id = receive_buffer[0] << 4 | receive_buffer[1];
 8000a8e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000a92:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
 8000a96:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8000a9a:	b003      	add	sp, #12
 8000a9c:	f85d fb04 	ldr.w	pc, [sp], #4

08000aa0 <read_data>:
osStatus_t read_data(uint32_t address, void* const data, uint16_t size){
 8000aa0:	b5b0      	push	{r4, r5, r7, lr}
 8000aa2:	b082      	sub	sp, #8
	write_buffer[0] = READ_DATA_REGISTER;
 8000aa4:	2303      	movs	r3, #3
osStatus_t read_data(uint32_t address, void* const data, uint16_t size){
 8000aa6:	460d      	mov	r5, r1
 8000aa8:	4614      	mov	r4, r2
 8000aaa:	af00      	add	r7, sp, #0
	uint8_t read_buffer[size];
 8000aac:	4669      	mov	r1, sp
	write_buffer[0] = READ_DATA_REGISTER;
 8000aae:	713b      	strb	r3, [r7, #4]
	write_buffer[1] = (address) >> 16;
 8000ab0:	0c03      	lsrs	r3, r0, #16
	write_buffer[3] = (address) >> 0;
 8000ab2:	71f8      	strb	r0, [r7, #7]
	write_buffer[1] = (address) >> 16;
 8000ab4:	717b      	strb	r3, [r7, #5]
	write_buffer[2] = (address) >> 8;
 8000ab6:	0a03      	lsrs	r3, r0, #8
	write_read_command(write_buffer, read_buffer, size);
 8000ab8:	1d38      	adds	r0, r7, #4
	write_buffer[2] = (address) >> 8;
 8000aba:	71bb      	strb	r3, [r7, #6]
	uint8_t read_buffer[size];
 8000abc:	1dd3      	adds	r3, r2, #7
 8000abe:	08db      	lsrs	r3, r3, #3
 8000ac0:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8000ac4:	469d      	mov	sp, r3
	write_read_command(write_buffer, read_buffer, size);
 8000ac6:	4669      	mov	r1, sp
 8000ac8:	f7ff ffae 	bl	8000a28 <write_read_command>
	memcpy(data, read_buffer, size);
 8000acc:	4622      	mov	r2, r4
 8000ace:	4669      	mov	r1, sp
 8000ad0:	4628      	mov	r0, r5
 8000ad2:	f011 fda5 	bl	8012620 <memcpy>
}
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000ae0 <write_command>:

osStatus_t write_command(uint8_t *write_data, uint16_t size){
 8000ae0:	b570      	push	{r4, r5, r6, lr}
//		osDelay(1);
//	}

	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	//	HAL_status = HAL_SPI_Transmit_DMA(&hspi4, write_data, size);
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8000ae2:	4c0b      	ldr	r4, [pc, #44]	; (8000b10 <write_command+0x30>)
osStatus_t write_command(uint8_t *write_data, uint16_t size){
 8000ae4:	4605      	mov	r5, r0
 8000ae6:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	4620      	mov	r0, r4
 8000aec:	2110      	movs	r1, #16
 8000aee:	f006 fce3 	bl	80074b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi4, write_data, size, 10);
 8000af2:	230a      	movs	r3, #10
 8000af4:	4632      	mov	r2, r6
 8000af6:	4629      	mov	r1, r5
 8000af8:	4806      	ldr	r0, [pc, #24]	; (8000b14 <write_command+0x34>)
 8000afa:	f009 fe21 	bl	800a740 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8000afe:	4620      	mov	r0, r4
 8000b00:	2201      	movs	r2, #1
 8000b02:	2110      	movs	r1, #16
 8000b04:	f006 fcd8 	bl	80074b8 <HAL_GPIO_WritePin>
	if (HAL_status != HAL_OK){
		status = osError;
	}

	return status;
}
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	bd70      	pop	{r4, r5, r6, pc}
 8000b0e:	bf00      	nop
 8000b10:	58021000 	.word	0x58021000
 8000b14:	24011f68 	.word	0x24011f68

08000b18 <write_enable>:
osStatus_t write_enable(){
 8000b18:	b507      	push	{r0, r1, r2, lr}
	uint8_t enable_command = WRITE_ENABLE_REGISTER;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	a802      	add	r0, sp, #8
	return write_command(&enable_command, sizeof(enable_command));
 8000b1e:	2101      	movs	r1, #1
	uint8_t enable_command = WRITE_ENABLE_REGISTER;
 8000b20:	f800 3d01 	strb.w	r3, [r0, #-1]!
	return write_command(&enable_command, sizeof(enable_command));
 8000b24:	f7ff ffdc 	bl	8000ae0 <write_command>
}
 8000b28:	b003      	add	sp, #12
 8000b2a:	f85d fb04 	ldr.w	pc, [sp], #4

08000b2e <write_data>:
osStatus_t write_data(uint32_t address, void const* data, uint16_t size){
 8000b2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t data_buffer[size];
 8000b32:	1dd3      	adds	r3, r2, #7
osStatus_t write_data(uint32_t address, void const* data, uint16_t size){
 8000b34:	b093      	sub	sp, #76	; 0x4c
 8000b36:	4690      	mov	r8, r2
	uint32_t number_writes = size/block_size;
 8000b38:	253c      	movs	r5, #60	; 0x3c
osStatus_t write_data(uint32_t address, void const* data, uint16_t size){
 8000b3a:	4681      	mov	r9, r0
	uint8_t data_buffer[size];
 8000b3c:	08db      	lsrs	r3, r3, #3
 8000b3e:	4668      	mov	r0, sp
osStatus_t write_data(uint32_t address, void const* data, uint16_t size){
 8000b40:	af00      	add	r7, sp, #0
	for(int i = 0; i < number_writes; i++){
 8000b42:	464c      	mov	r4, r9
	uint8_t data_buffer[size];
 8000b44:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
		write_buffer[0] = WRITE_DATA_REGISTER;
 8000b48:	f04f 0b02 	mov.w	fp, #2
	uint32_t number_writes = size/block_size;
 8000b4c:	fb98 f6f5 	sdiv	r6, r8, r5
	uint8_t data_buffer[size];
 8000b50:	469d      	mov	sp, r3
 8000b52:	4375      	muls	r5, r6
	memcpy(&data_buffer[0], data, size);
 8000b54:	4668      	mov	r0, sp
	uint8_t data_buffer[size];
 8000b56:	46ea      	mov	sl, sp
	memcpy(&data_buffer[0], data, size);
 8000b58:	f011 fd62 	bl	8012620 <memcpy>
 8000b5c:	eb09 0305 	add.w	r3, r9, r5
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	fa5f f389 	uxtb.w	r3, r9
 8000b66:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < number_writes; i++){
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	0c21      	lsrs	r1, r4, #16
 8000b6c:	429c      	cmp	r4, r3
 8000b6e:	ea4f 2314 	mov.w	r3, r4, lsr #8
 8000b72:	d12c      	bne.n	8000bce <write_data+0xa0>
	uint32_t single_bytes = size % block_size;
 8000b74:	203c      	movs	r0, #60	; 0x3c
	single_write_buffer[3] = (address+block_size*number_writes) >> 0;
 8000b76:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
	uint32_t single_bytes = size % block_size;
 8000b7a:	fb98 f2f0 	sdiv	r2, r8, r0
 8000b7e:	fb00 8212 	mls	r2, r0, r2, r8
	uint8_t single_write_buffer[4+single_bytes];
 8000b82:	f102 000b 	add.w	r0, r2, #11
 8000b86:	1d14      	adds	r4, r2, #4
 8000b88:	f020 0007 	bic.w	r0, r0, #7
 8000b8c:	ebad 0d00 	sub.w	sp, sp, r0
	single_write_buffer[0] = WRITE_DATA_REGISTER;
 8000b90:	2002      	movs	r0, #2
	single_write_buffer[2] = (address+block_size*number_writes) >> 8;
 8000b92:	f88d 3002 	strb.w	r3, [sp, #2]
	single_write_buffer[3] = (address+block_size*number_writes) >> 0;
 8000b96:	687b      	ldr	r3, [r7, #4]
	single_write_buffer[0] = WRITE_DATA_REGISTER;
 8000b98:	f88d 0000 	strb.w	r0, [sp]
	memcpy(&single_write_buffer[4], &data_buffer[block_size*number_writes], single_bytes);
 8000b9c:	a801      	add	r0, sp, #4
	single_write_buffer[3] = (address+block_size*number_writes) >> 0;
 8000b9e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
	single_write_buffer[1] = (address+block_size*number_writes) >> 16;
 8000ba2:	f88d 1001 	strb.w	r1, [sp, #1]
	memcpy(&single_write_buffer[4], &data_buffer[block_size*number_writes], single_bytes);
 8000ba6:	eb0a 0105 	add.w	r1, sl, r5
	single_write_buffer[3] = (address+block_size*number_writes) >> 0;
 8000baa:	f88d 6003 	strb.w	r6, [sp, #3]
	memcpy(&single_write_buffer[4], &data_buffer[block_size*number_writes], single_bytes);
 8000bae:	f011 fd37 	bl	8012620 <memcpy>
	write_enable();
 8000bb2:	f7ff ffb1 	bl	8000b18 <write_enable>
	osDelay(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f00f f858 	bl	800fc6c <osDelay>
	write_command(single_write_buffer, sizeof(single_write_buffer));
 8000bbc:	4668      	mov	r0, sp
 8000bbe:	b2a1      	uxth	r1, r4
 8000bc0:	f7ff ff8e 	bl	8000ae0 <write_command>
}
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	374c      	adds	r7, #76	; 0x4c
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		write_buffer[2] = (address+block_size*i) >> 8;
 8000bce:	72bb      	strb	r3, [r7, #10]
		memcpy(&write_buffer[4], &data_buffer[block_size*i], block_size);
 8000bd0:	ebaa 0309 	sub.w	r3, sl, r9
 8000bd4:	f107 020c 	add.w	r2, r7, #12
		write_buffer[0] = WRITE_DATA_REGISTER;
 8000bd8:	f887 b008 	strb.w	fp, [r7, #8]
		memcpy(&write_buffer[4], &data_buffer[block_size*i], block_size);
 8000bdc:	4423      	add	r3, r4
		write_buffer[1] = (address+block_size*i) >> 16;
 8000bde:	7279      	strb	r1, [r7, #9]
		write_buffer[3] = (address+block_size*i) >> 0;
 8000be0:	72fc      	strb	r4, [r7, #11]
		memcpy(&write_buffer[4], &data_buffer[block_size*i], block_size);
 8000be2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	3308      	adds	r3, #8
 8000bea:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8000bee:	4694      	mov	ip, r2
 8000bf0:	4573      	cmp	r3, lr
 8000bf2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8000bf6:	4662      	mov	r2, ip
 8000bf8:	d1f5      	bne.n	8000be6 <write_data+0xb8>
 8000bfa:	6818      	ldr	r0, [r3, #0]
 8000bfc:	343c      	adds	r4, #60	; 0x3c
 8000bfe:	f8cc 0000 	str.w	r0, [ip]
		write_enable();
 8000c02:	f7ff ff89 	bl	8000b18 <write_enable>
		osDelay(1);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f00f f830 	bl	800fc6c <osDelay>
		write_command(write_buffer, sizeof(write_buffer));
 8000c0c:	2140      	movs	r1, #64	; 0x40
 8000c0e:	f107 0008 	add.w	r0, r7, #8
 8000c12:	f7ff ff65 	bl	8000ae0 <write_command>
 8000c16:	e7a7      	b.n	8000b68 <write_data+0x3a>

08000c18 <erase_chip>:
osStatus_t erase_chip(){
 8000c18:	b513      	push	{r0, r1, r4, lr}
	uint8_t erase_chip_command = CHIP_ERASE_REGISTER;
 8000c1a:	2360      	movs	r3, #96	; 0x60
 8000c1c:	ac02      	add	r4, sp, #8
 8000c1e:	f804 3d01 	strb.w	r3, [r4, #-1]!
	write_enable();
 8000c22:	f7ff ff79 	bl	8000b18 <write_enable>
	return write_command(&erase_chip_command, sizeof(erase_chip_command));
 8000c26:	2101      	movs	r1, #1
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f7ff ff59 	bl	8000ae0 <write_command>
}
 8000c2e:	b002      	add	sp, #8
 8000c30:	bd10      	pop	{r4, pc}

08000c32 <_gps_search_start>:

#include "GPS/gps.h"

const uint8_t ubxgga[HEADER_SIZE] = {'G','G','A'};

uint32_t _gps_search_start(uint8_t *arr){
 8000c32:	3001      	adds	r0, #1
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8000c34:	2303      	movs	r3, #3
 8000c36:	f240 32a2 	movw	r2, #930	; 0x3a2
			{
			  if(arr[i-2] == ubxgga[0] && arr[i-1] == ubxgga[1] && arr[i] == ubxgga[2])
 8000c3a:	f810 1b01 	ldrb.w	r1, [r0], #1
 8000c3e:	3301      	adds	r3, #1
 8000c40:	2947      	cmp	r1, #71	; 0x47
 8000c42:	d107      	bne.n	8000c54 <_gps_search_start+0x22>
 8000c44:	7801      	ldrb	r1, [r0, #0]
 8000c46:	2947      	cmp	r1, #71	; 0x47
 8000c48:	d104      	bne.n	8000c54 <_gps_search_start+0x22>
 8000c4a:	7841      	ldrb	r1, [r0, #1]
 8000c4c:	2941      	cmp	r1, #65	; 0x41
 8000c4e:	d101      	bne.n	8000c54 <_gps_search_start+0x22>
			    return i+1;
 8000c50:	4618      	mov	r0, r3
 8000c52:	4770      	bx	lr
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d1f0      	bne.n	8000c3a <_gps_search_start+0x8>
			}
	return 0;
 8000c58:	2000      	movs	r0, #0
}
 8000c5a:	4770      	bx	lr
 8000c5c:	0000      	movs	r0, r0
	...

08000c60 <_parse_data>:

uint8_t _parse_data (struct gps_device *dev, uint8_t* data){


	if (data[22] == 'N' || data[22] == 'S'){
 8000c60:	7d8b      	ldrb	r3, [r1, #22]
 8000c62:	2b4e      	cmp	r3, #78	; 0x4e
uint8_t _parse_data (struct gps_device *dev, uint8_t* data){
 8000c64:	b510      	push	{r4, lr}
 8000c66:	ed2d 8b0a 	vpush	{d8-d12}
	if (data[22] == 'N' || data[22] == 'S'){
 8000c6a:	f040 80dd 	bne.w	8000e28 <_parse_data+0x1c8>
 8000c6e:	1e4b      	subs	r3, r1, #1
 8000c70:	f101 0445 	add.w	r4, r1, #69	; 0x45

		// ASCII to decimal conversion
		for(int i = 0; i < DATA_SIZE; i++) data[i] = data[i]-48;
 8000c74:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000c78:	3a30      	subs	r2, #48	; 0x30
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	d1f9      	bne.n	8000c74 <_parse_data+0x14>


		dev->data.hour = data[1]*10 + data[2];
 8000c80:	788c      	ldrb	r4, [r1, #2]
 8000c82:	230a      	movs	r3, #10
 8000c84:	784a      	ldrb	r2, [r1, #1]
 8000c86:	fb13 4202 	smlabb	r2, r3, r2, r4
 8000c8a:	6082      	str	r2, [r0, #8]
		dev->data.minute = data[3]*10 + data[4];
 8000c8c:	790c      	ldrb	r4, [r1, #4]
 8000c8e:	78ca      	ldrb	r2, [r1, #3]
 8000c90:	fb13 4202 	smlabb	r2, r3, r2, r4
 8000c94:	60c2      	str	r2, [r0, #12]
		dev->data.second = data[5]*10 + data[6];
 8000c96:	798a      	ldrb	r2, [r1, #6]
 8000c98:	794c      	ldrb	r4, [r1, #5]
 8000c9a:	fb13 2304 	smlabb	r3, r3, r4, r2
 8000c9e:	6103      	str	r3, [r0, #16]

		dev->data.lat_deg = data[11]*10 +data[12];
 8000ca0:	7acb      	ldrb	r3, [r1, #11]
 8000ca2:	7b0a      	ldrb	r2, [r1, #12]
 8000ca4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ca8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000cac:	7543      	strb	r3, [r0, #21]
		dev->data.lat_decimal = (data[13]*1e7 + data[14]*1e6 + data[16]*1e5 + data[17]*1e4 + data[18]*1e3 + data[19]*1e2 + data[20])/6;
 8000cae:	7ccb      	ldrb	r3, [r1, #19]
 8000cb0:	ee05 3a10 	vmov	s10, r3
 8000cb4:	7c8b      	ldrb	r3, [r1, #18]
 8000cb6:	ee06 3a10 	vmov	s12, r3
 8000cba:	7c4b      	ldrb	r3, [r1, #17]
 8000cbc:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000cc0:	ee04 3a10 	vmov	s8, r3
 8000cc4:	7c0b      	ldrb	r3, [r1, #16]
 8000cc6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8000cca:	ee03 3a10 	vmov	s6, r3
 8000cce:	7b4b      	ldrb	r3, [r1, #13]
 8000cd0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8000cd4:	ee02 3a10 	vmov	s4, r3
 8000cd8:	7b8b      	ldrb	r3, [r1, #14]
 8000cda:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8000cde:	ee07 3a10 	vmov	s14, r3
 8000ce2:	eeb8 2bc2 	vcvt.f64.s32	d2, s4
 8000ce6:	7d0b      	ldrb	r3, [r1, #20]
 8000ce8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000cec:	ed9f ab52 	vldr	d10, [pc, #328]	; 8000e38 <_parse_data+0x1d8>
 8000cf0:	ed9f 9b53 	vldr	d9, [pc, #332]	; 8000e40 <_parse_data+0x1e0>
 8000cf4:	ed9f 8b54 	vldr	d8, [pc, #336]	; 8000e48 <_parse_data+0x1e8>
 8000cf8:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8000cfc:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8000e50 <_parse_data+0x1f0>
 8000d00:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8000e58 <_parse_data+0x1f8>
 8000d04:	eea2 7b09 	vfma.f64	d7, d2, d9
 8000d08:	ed9f 2b55 	vldr	d2, [pc, #340]	; 8000e60 <_parse_data+0x200>
 8000d0c:	eea3 7b08 	vfma.f64	d7, d3, d8
 8000d10:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 8000d14:	eea4 7b00 	vfma.f64	d7, d4, d0
 8000d18:	eea6 7b01 	vfma.f64	d7, d6, d1
 8000d1c:	eea5 7b02 	vfma.f64	d7, d5, d2
 8000d20:	eeb0 6b47 	vmov.f64	d6, d7
 8000d24:	ee07 3a10 	vmov	s14, r3
 8000d28:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000d2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d30:	ee87 6b03 	vdiv.f64	d6, d7, d3
 8000d34:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000d38:	ed80 6a06 	vstr	s12, [r0, #24]

		dev->data.lon_deg = data[25]*10 +data[26];
 8000d3c:	7e4b      	ldrb	r3, [r1, #25]
 8000d3e:	7e8a      	ldrb	r2, [r1, #26]
 8000d40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d44:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000d48:	7703      	strb	r3, [r0, #28]
		dev->data.lon_decimal = (data[27]*1e7 + data[28]*1e6 + data[30]*1e5 + data[31]*1e4 + data[32]*1e3 + data[33]*1e2 + data[34])/6;
 8000d4a:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8000d4e:	ee0c 3a10 	vmov	s24, r3
 8000d52:	f891 3020 	ldrb.w	r3, [r1, #32]
 8000d56:	ee0b 3a10 	vmov	s22, r3
 8000d5a:	7fcb      	ldrb	r3, [r1, #31]
 8000d5c:	eeb8 cbcc 	vcvt.f64.s32	d12, s24
 8000d60:	ee06 3a10 	vmov	s12, r3
 8000d64:	7f8b      	ldrb	r3, [r1, #30]
 8000d66:	eeb8 bbcb 	vcvt.f64.s32	d11, s22
 8000d6a:	ee05 3a10 	vmov	s10, r3
 8000d6e:	7ecb      	ldrb	r3, [r1, #27]
 8000d70:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8000d74:	ee04 3a10 	vmov	s8, r3
 8000d78:	7f0b      	ldrb	r3, [r1, #28]
 8000d7a:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
 8000d7e:	ee07 3a10 	vmov	s14, r3
 8000d82:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8000d86:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
 8000d8a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000d8e:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8000d92:	eea4 7b09 	vfma.f64	d7, d4, d9
 8000d96:	eea5 7b08 	vfma.f64	d7, d5, d8
 8000d9a:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000d9e:	eeab 7b01 	vfma.f64	d7, d11, d1
 8000da2:	eeac 7b02 	vfma.f64	d7, d12, d2
 8000da6:	eeb0 ab47 	vmov.f64	d10, d7
 8000daa:	ee07 3a10 	vmov	s14, r3
 8000dae:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000db2:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8000db6:	ee87 6b03 	vdiv.f64	d6, d7, d3
 8000dba:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000dbe:	ed80 6a08 	vstr	s12, [r0, #32]

		dev->data.fix = data[38];
 8000dc2:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8000dc6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

		dev->data.satellite = data[40]*10 + data[41];
 8000dca:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000dce:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 8000dd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000dd6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000dda:	7503      	strb	r3, [r0, #20]

		dev->data.HDOP = data[43]*100+data[45]*10+data[46];
 8000ddc:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8000de0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000de4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000de8:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8000dec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000df6:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
 8000dfa:	4413      	add	r3, r2
 8000dfc:	84c3      	strh	r3, [r0, #38]	; 0x26

		dev->data.altitude= data[48]*100+data[49]*10+data[50];
 8000dfe:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8000e02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e06:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000e0a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8000e0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000e18:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
 8000e1c:	4413      	add	r3, r2
 8000e1e:	8503      	strh	r3, [r0, #40]	; 0x28
 8000e20:	2001      	movs	r0, #1
	else {
		dev->data.fix = 0;
		return 0;
	}
	return 1;
}
 8000e22:	ecbd 8b0a 	vpop	{d8-d12}
 8000e26:	bd10      	pop	{r4, pc}
	if (data[22] == 'N' || data[22] == 'S'){
 8000e28:	2b53      	cmp	r3, #83	; 0x53
 8000e2a:	f43f af20 	beq.w	8000c6e <_parse_data+0xe>
		dev->data.fix = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		return 0;
 8000e34:	4618      	mov	r0, r3
 8000e36:	e7f4      	b.n	8000e22 <_parse_data+0x1c2>
 8000e38:	00000000 	.word	0x00000000
 8000e3c:	412e8480 	.word	0x412e8480
 8000e40:	00000000 	.word	0x00000000
 8000e44:	416312d0 	.word	0x416312d0
 8000e48:	00000000 	.word	0x00000000
 8000e4c:	40f86a00 	.word	0x40f86a00
 8000e50:	00000000 	.word	0x00000000
 8000e54:	40c38800 	.word	0x40c38800
 8000e58:	00000000 	.word	0x00000000
 8000e5c:	408f4000 	.word	0x408f4000
 8000e60:	00000000 	.word	0x00000000
 8000e64:	40590000 	.word	0x40590000

08000e68 <gps_dma_init>:


void gps_dma_init(struct gps_device *dev){
 8000e68:	b510      	push	{r4, lr}
 8000e6a:	4604      	mov	r4, r0
	HAL_UART_DMAStop(dev->uart_bus);
 8000e6c:	6840      	ldr	r0, [r0, #4]
 8000e6e:	f00a fe13 	bl	800ba98 <HAL_UART_DMAStop>

	HAL_UART_Receive_DMA(dev->uart_bus, gps_data[dev->id], BUFFER_SIZE);
 8000e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e76:	7821      	ldrb	r1, [r4, #0]
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <gps_dma_init+0x28>)
 8000e7a:	6860      	ldr	r0, [r4, #4]
 8000e7c:	fb02 3101 	mla	r1, r2, r1, r3
 8000e80:	f00a fd66 	bl	800b950 <HAL_UART_Receive_DMA>

	HAL_UART_DMAResume(dev->uart_bus);
 8000e84:	6860      	ldr	r0, [r4, #4]
}
 8000e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_DMAResume(dev->uart_bus);
 8000e8a:	f00a bddb 	b.w	800ba44 <HAL_UART_DMAResume>
 8000e8e:	bf00      	nop
 8000e90:	24008a66 	.word	0x24008a66

08000e94 <gps_read_sensor>:



uint8_t gps_read_sensor (struct gps_device *dev){
 8000e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e96:	4604      	mov	r4, r0
	HAL_UART_DMAPause(dev->uart_bus);
 8000e98:	6840      	ldr	r0, [r0, #4]
 8000e9a:	f00a fda5 	bl	800b9e8 <HAL_UART_DMAPause>

	uint32_t data_start = _gps_search_start(gps_data[dev->id]);
 8000e9e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000ea2:	490d      	ldr	r1, [pc, #52]	; (8000ed8 <gps_read_sensor+0x44>)
 8000ea4:	7827      	ldrb	r7, [r4, #0]
 8000ea6:	4e0d      	ldr	r6, [pc, #52]	; (8000edc <gps_read_sensor+0x48>)
 8000ea8:	fb05 1507 	mla	r5, r5, r7, r1
 8000eac:	4628      	mov	r0, r5
 8000eae:	f7ff fec0 	bl	8000c32 <_gps_search_start>
	if (data_start > 0) memcpy(gps_gga[dev->id], gps_data[dev->id] + data_start, DATA_SIZE);
 8000eb2:	b128      	cbz	r0, 8000ec0 <gps_read_sensor+0x2c>
 8000eb4:	2246      	movs	r2, #70	; 0x46
 8000eb6:	1829      	adds	r1, r5, r0
 8000eb8:	fb07 6002 	mla	r0, r7, r2, r6
 8000ebc:	f011 fbb0 	bl	8012620 <memcpy>

	HAL_UART_DMAResume(dev->uart_bus);
 8000ec0:	6860      	ldr	r0, [r4, #4]
 8000ec2:	f00a fdbf 	bl	800ba44 <HAL_UART_DMAResume>

	return _parse_data(dev, gps_gga[dev->id]);
 8000ec6:	7821      	ldrb	r1, [r4, #0]
 8000ec8:	2346      	movs	r3, #70	; 0x46
 8000eca:	4620      	mov	r0, r4
 8000ecc:	fb01 6103 	mla	r1, r1, r3, r6
}
 8000ed0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return _parse_data(dev, gps_gga[dev->id]);
 8000ed4:	f7ff bec4 	b.w	8000c60 <_parse_data>
 8000ed8:	24008a66 	.word	0x24008a66
 8000edc:	24008868 	.word	0x24008868

08000ee0 <gps_reset>:
	dev->data.hour = 0;
	dev->data.minute = 0;
	dev->data.second = 0;

	dev->data.lat_deg = 0;
	dev->data.lat_decimal = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	6183      	str	r3, [r0, #24]

	dev->data.lon_deg = 0;
 8000ee4:	7703      	strb	r3, [r0, #28]
	dev->data.lon_decimal = 0;
 8000ee6:	6203      	str	r3, [r0, #32]

	dev->data.fix = 0;
 8000ee8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	dev->data.minute = 0;
 8000eec:	6103      	str	r3, [r0, #16]
	dev->data.second = 0;
 8000eee:	8283      	strh	r3, [r0, #20]

	dev->data.satellite = 0;

	dev->data.HDOP = 0;
 8000ef0:	84c3      	strh	r3, [r0, #38]	; 0x26

	dev->data.altitude= 0;
 8000ef2:	8503      	strh	r3, [r0, #40]	; 0x28
	dev->data.hour = 0;
 8000ef4:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 8000ef8:	4770      	bx	lr
	...

08000efc <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 8000efc:	b570      	push	{r4, r5, r6, lr}
    /* The coefficients are sorted in the following way: Gain 1, Gain 2, Gain 3, Optimal Trajectory*/
    const long double coeff0[POLY_DEG+1] = {};
 8000efe:	24f8      	movs	r4, #248	; 0xf8
void init_coeff(control_data_t *control_data){
 8000f00:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
    const long double coeff0[POLY_DEG+1] = {};
 8000f04:	4e1a      	ldr	r6, [pc, #104]	; (8000f70 <init_coeff+0x74>)
void init_coeff(control_data_t *control_data){
 8000f06:	4605      	mov	r5, r0
    const long double coeff0[POLY_DEG+1] = {};
 8000f08:	4622      	mov	r2, r4
 8000f0a:	4668      	mov	r0, sp
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	f011 fb87 	bl	8012620 <memcpy>
    const long double coeff1[POLY_DEG+1] = {};
 8000f12:	4622      	mov	r2, r4
 8000f14:	1931      	adds	r1, r6, r4
 8000f16:	eb0d 0004 	add.w	r0, sp, r4
 8000f1a:	f011 fb81 	bl	8012620 <memcpy>
    const long double coeff2[POLY_DEG+1] = {};
 8000f1e:	4622      	mov	r2, r4
 8000f20:	f506 71f8 	add.w	r1, r6, #496	; 0x1f0
 8000f24:	a87c      	add	r0, sp, #496	; 0x1f0
 8000f26:	f011 fb7b 	bl	8012620 <memcpy>
    const long double coeff3[POLY_DEG+1] = {};
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	f506 713a 	add.w	r1, r6, #744	; 0x2e8
 8000f30:	a8ba      	add	r0, sp, #744	; 0x2e8
 8000f32:	f011 fb75 	bl	8012620 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 8000f36:	4622      	mov	r2, r4
 8000f38:	4669      	mov	r1, sp
 8000f3a:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8000f3e:	f011 fb6f 	bl	8012620 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8000f42:	4622      	mov	r2, r4
 8000f44:	eb0d 0104 	add.w	r1, sp, r4
 8000f48:	f505 709c 	add.w	r0, r5, #312	; 0x138
 8000f4c:	f011 fb68 	bl	8012620 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8000f50:	4622      	mov	r2, r4
 8000f52:	a97c      	add	r1, sp, #496	; 0x1f0
 8000f54:	f505 700c 	add.w	r0, r5, #560	; 0x230
 8000f58:	f011 fb62 	bl	8012620 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 8000f5c:	4622      	mov	r2, r4
 8000f5e:	a9ba      	add	r1, sp, #744	; 0x2e8
 8000f60:	f505 704a 	add.w	r0, r5, #808	; 0x328
 8000f64:	f011 fb5c 	bl	8012620 <memcpy>
}
 8000f68:	f50d 7d78 	add.w	sp, sp, #992	; 0x3e0
 8000f6c:	bd70      	pop	{r4, r5, r6, pc}
 8000f6e:	bf00      	nop
 8000f70:	08013f68 	.word	0x08013f68

08000f74 <control_data_init>:
    }
}


void control_data_reset(control_data_t *control_data){
    control_data->control_input = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	6003      	str	r3, [r0, #0]
    control_data->reference_error = 0;
 8000f78:	6043      	str	r3, [r0, #4]
    control_data->integrated_error = 0;
 8000f7a:	6083      	str	r3, [r0, #8]
}

void control_data_init(control_data_t *control_data){
    control_data_reset(control_data);

    control_data->lowerboundary_aw = 0;
 8000f7c:	6183      	str	r3, [r0, #24]
    control_data->upperboundary_aw = 0;
 8000f7e:	61c3      	str	r3, [r0, #28]

    control_data->safety_counter = 0;
 8000f80:	2300      	movs	r3, #0
void control_data_init(control_data_t *control_data){
 8000f82:	b510      	push	{r4, lr}
    control_data->safety_counter = 0;
 8000f84:	8403      	strh	r3, [r0, #32]
void control_data_init(control_data_t *control_data){
 8000f86:	4604      	mov	r4, r0
    control_data->apogee_approach_phase = false;
 8000f88:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22

    init_coeff(control_data);
 8000f8c:	f7ff ffb6 	bl	8000efc <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
        control_data->gains[i] = 0;
 8000f90:	2200      	movs	r2, #0
 8000f92:	2300      	movs	r3, #0
 8000f94:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8000f98:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8000f9c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    }
}
 8000fa0:	bd10      	pop	{r4, pc}
 8000fa2:	0000      	movs	r0, r0
 8000fa4:	0000      	movs	r0, r0
	...

08000fa8 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	ed2d 8b02 	vpush	{d8}
    /* For Speed */
    double x_placeholder = 0;

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
        control_data->gains[i] = 0;
 8000fae:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 8001028 <evaluate_polyfit+0x80>
void evaluate_polyfit(control_data_t *control_data) {
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	f100 0540 	add.w	r5, r0, #64	; 0x40
        control_data->gains[i] = 0;
 8000fb8:	261e      	movs	r6, #30
 8000fba:	ed80 8b0a 	vstr	d8, [r0, #40]	; 0x28
 8000fbe:	ed80 8b0c 	vstr	d8, [r0, #48]	; 0x30
 8000fc2:	ed80 8b0e 	vstr	d8, [r0, #56]	; 0x38
    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8000fc6:	ee07 6a90 	vmov	s15, r6
 8000fca:	ed94 0a03 	vldr	s0, [r4, #12]
 8000fce:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8000fd2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000fd6:	f012 f8df 	bl	8013198 <pow>
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8000fda:	f116 36ff 	adds.w	r6, r6, #4294967295
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8000fde:	ecb5 6b02 	vldmia	r5!, {d6}
 8000fe2:	ed94 7b0a 	vldr	d7, [r4, #40]	; 0x28
 8000fe6:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000fea:	ed84 7b0a 	vstr	d7, [r4, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8000fee:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
 8000ff2:	ed95 6b3c 	vldr	d6, [r5, #240]	; 0xf0
 8000ff6:	eea6 7b00 	vfma.f64	d7, d6, d0
 8000ffa:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 8000ffe:	ed94 7b0e 	vldr	d7, [r4, #56]	; 0x38
 8001002:	ed95 6b7a 	vldr	d6, [r5, #488]	; 0x1e8
 8001006:	eea6 7b00 	vfma.f64	d7, d6, d0
 800100a:	ed84 7b0e 	vstr	d7, [r4, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 800100e:	ed95 7bb8 	vldr	d7, [r5, #736]	; 0x2e0
 8001012:	eea7 8b00 	vfma.f64	d8, d7, d0
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001016:	d2d6      	bcs.n	8000fc6 <evaluate_polyfit+0x1e>
    }

    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8001018:	eef7 7bc8 	vcvt.f32.f64	s15, d8
}
 800101c:	ecbd 8b02 	vpop	{d8}
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8001020:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8001024:	bd70      	pop	{r4, r5, r6, pc}
 8001026:	bf00      	nop
	...

08001030 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8001030:	ed90 6a03 	vldr	s12, [r0, #12]
 8001034:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001078 <compute_antiwindup_boundaries+0x48>
 8001038:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    control_data->upperboundary_aw = fmaxf(M_AW *
 800103c:	ed9f 4b10 	vldr	d4, [pc, #64]	; 8001080 <compute_antiwindup_boundaries+0x50>
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8001040:	ee35 7b46 	vsub.f64	d7, d5, d6
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8001044:	eeb4 6bc5 	vcmpe.f64	d6, d5
    control_data->upperboundary_aw = fmaxf(M_AW *
 8001048:	ee27 7b04 	vmul.f64	d7, d7, d4
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    control_data->upperboundary_aw = fmaxf(M_AW *
 8001050:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        control_data->upperboundary_aw = 0;
 8001054:	bfc8      	it	gt
 8001056:	2300      	movgt	r3, #0
    control_data->upperboundary_aw = fmaxf(M_AW *
 8001058:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        control_data->upperboundary_aw = 0;
 800105c:	bfc8      	it	gt
 800105e:	61c3      	strgt	r3, [r0, #28]
    control_data->upperboundary_aw = fmaxf(M_AW *
 8001060:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
 8001064:	bfd8      	it	le
 8001066:	ed80 7a07 	vstrle	s14, [r0, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 800106a:	edd0 7a07 	vldr	s15, [r0, #28]
 800106e:	eef1 7a67 	vneg.f32	s15, s15
 8001072:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8001076:	4770      	bx	lr
 8001078:	e7f5e611 	.word	0xe7f5e611
 800107c:	409598a1 	.word	0x409598a1
 8001080:	47ae147b 	.word	0x47ae147b
 8001084:	3f747ae1 	.word	0x3f747ae1

08001088 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
    if (control_data->ref_velocity < 0) {
 8001088:	ed90 7a05 	vldr	s14, [r0, #20]
 800108c:	edd0 7a04 	vldr	s15, [r0, #16]
 8001090:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        control_data->reference_error = control_data->sf_velocity;
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 8001098:	bf58      	it	pl
 800109a:	ee77 7ac7 	vsubpl.f32	s15, s15, s14
 800109e:	edc0 7a01 	vstr	s15, [r0, #4]
    }
}
 80010a2:	4770      	bx	lr
 80010a4:	0000      	movs	r0, r0
	...

080010a8 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 80010a8:	ed91 7a01 	vldr	s14, [r1, #4]
 80010ac:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80010d8 <check_apogee_approach_phase+0x30>
 80010b0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80010b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        control_data->safety_counter += 1;
 80010bc:	bf42      	ittt	mi
 80010be:	8c03      	ldrhmi	r3, [r0, #32]
 80010c0:	3301      	addmi	r3, #1
 80010c2:	8403      	strhmi	r3, [r0, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 80010c4:	8c03      	ldrh	r3, [r0, #32]
 80010c6:	2b04      	cmp	r3, #4
        control_data->apogee_approach_phase = true;
 80010c8:	bf84      	itt	hi
 80010ca:	2301      	movhi	r3, #1
 80010cc:	f880 3022 	strbhi.w	r3, [r0, #34]	; 0x22
    }
}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	f3af 8000 	nop.w
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	3fb99999 	.word	0x3fb99999

080010e0 <compute_control_input>:
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 80010e0:	b538      	push	{r3, r4, r5, lr}
    if ((flight_phase_detection->flight_phase == COASTING) &&
 80010e2:	780b      	ldrb	r3, [r1, #0]
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 80010e4:	4604      	mov	r4, r0
 80010e6:	460d      	mov	r5, r1
 80010e8:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    if ((flight_phase_detection->flight_phase == COASTING) &&
 80010ec:	2b04      	cmp	r3, #4
void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 80010ee:	ed2d 8b02 	vpush	{d8}
 80010f2:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 80011e8 <compute_control_input+0x108>
    if ((flight_phase_detection->flight_phase == COASTING) &&
 80010f6:	d158      	bne.n	80011aa <compute_control_input+0xca>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 80010f8:	784b      	ldrb	r3, [r1, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 80010fa:	3b01      	subs	r3, #1
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d854      	bhi.n	80011aa <compute_control_input+0xca>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8001100:	ed91 7a01 	vldr	s14, [r1, #4]
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001104:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80011d8 <compute_control_input+0xf8>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8001108:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 800110c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	d549      	bpl.n	80011aa <compute_control_input+0xca>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8001116:	2a00      	cmp	r2, #0
 8001118:	d147      	bne.n	80011aa <compute_control_input+0xca>
        evaluate_polyfit(control_data);
 800111a:	f7ff ff45 	bl	8000fa8 <evaluate_polyfit>
        compute_reference_error(control_data);
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff ffb2 	bl	8001088 <compute_reference_error>
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8001124:	ed94 7a00 	vldr	s14, [r4]
 8001128:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
                - control_data->gains[1] * control_data->integrated_error
 800112c:	ed94 7a02 	vldr	s14, [r4, #8]
 8001130:	ed94 3b0c 	vldr	d3, [r4, #48]	; 0x30
 8001134:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001138:	ed94 4b0a 	vldr	d4, [r4, #40]	; 0x28
                - control_data->gains[1] * control_data->integrated_error
 800113c:	ee23 7b47 	vnmul.f64	d7, d3, d7
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001140:	ed94 3a01 	vldr	s6, [r4, #4]
 8001144:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8001148:	ed94 5b0e 	vldr	d5, [r4, #56]	; 0x38
                - control_data->gains[1] * control_data->integrated_error
 800114c:	eea4 7b43 	vfms.f64	d7, d4, d3
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8001150:	ed9f 4b23 	vldr	d4, [pc, #140]	; 80011e0 <compute_control_input+0x100>
 8001154:	ee36 4b44 	vsub.f64	d4, d6, d4
 8001158:	eea5 7b44 	vfms.f64	d7, d5, d4
                + control_data->control_input);
 800115c:	ee37 7b06 	vadd.f64	d7, d7, d6
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001160:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 8001164:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001168:	fe87 7a67 	vminnm.f32	s14, s14, s15
 800116c:	fe88 7a07 	vmaxnm.f32	s14, s16, s14
 8001170:	ed84 7a00 	vstr	s14, [r4]
        compute_antiwindup_boundaries(control_data);
 8001174:	f7ff ff5c 	bl	8001030 <compute_antiwindup_boundaries>
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001178:	edd4 7a02 	vldr	s15, [r4, #8]
 800117c:	edd4 6a01 	vldr	s13, [r4, #4]
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8001180:	4629      	mov	r1, r5
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001182:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80011ec <compute_control_input+0x10c>
 8001186:	eee6 7a87 	vfma.f32	s15, s13, s14
 800118a:	ed94 7a07 	vldr	s14, [r4, #28]
}
 800118e:	ecbd 8b02 	vpop	{d8}
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001192:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 8001196:	ed94 7a06 	vldr	s14, [r4, #24]
 800119a:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 800119e:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80011a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        check_apogee_approach_phase(control_data, flight_phase_detection);
 80011a6:	f7ff bf7f 	b.w	80010a8 <check_apogee_approach_phase>
    control_data->control_input = 0;
 80011aa:	ed84 8a00 	vstr	s16, [r4]
    control_data->reference_error = 0;
 80011ae:	ed84 8a01 	vstr	s16, [r4, #4]
    control_data->integrated_error = 0;
 80011b2:	ed84 8a02 	vstr	s16, [r4, #8]
        if (control_data->apogee_approach_phase == true) {
 80011b6:	b14a      	cbz	r2, 80011cc <compute_control_input+0xec>
            evaluate_polyfit(control_data);
 80011b8:	4620      	mov	r0, r4
 80011ba:	f7ff fef5 	bl	8000fa8 <evaluate_polyfit>
            compute_reference_error(control_data);
 80011be:	4620      	mov	r0, r4
}
 80011c0:	ecbd 8b02 	vpop	{d8}
 80011c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            compute_reference_error(control_data);
 80011c8:	f7ff bf5e 	b.w	8001088 <compute_reference_error>
}
 80011cc:	ecbd 8b02 	vpop	{d8}
 80011d0:	bd38      	pop	{r3, r4, r5, pc}
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	9999999a 	.word	0x9999999a
 80011dc:	3fe19999 	.word	0x3fe19999
 80011e0:	5fbf87db 	.word	0x5fbf87db
 80011e4:	3fdfb4e1 	.word	0x3fdfb4e1
 80011e8:	00000000 	.word	0x00000000
 80011ec:	3c23d70a 	.word	0x3c23d70a

080011f0 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 80011f8:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 80011fc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001218 <init_env+0x28>
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f80d 	bl	8001220 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8001206:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f82c 	bl	8001268 <update_env>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	47c5e680 	.word	0x47c5e680
 800121c:	00000000 	.word	0x00000000

08001220 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	ed87 0a02 	vstr	s0, [r7, #8]
 800122c:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8001230:	edd7 7a01 	vldr	s15, [r7, #4]
 8001234:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001238:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001260 <calibrate_env+0x40>
 800123c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001240:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	edc3 7a01 	vstr	s15, [r3, #4]
	env->p_g = p_g; //
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	f3af 8000 	nop.w
 8001260:	66666666 	.word	0x66666666
 8001264:	40711266 	.word	0x40711266

08001268 <update_env>:

void update_env(env_t *env, float T) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8001274:	edd7 7a00 	vldr	s15, [r7]
 8001278:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800127c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80012c8 <update_env+0x60>
 8001280:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001284:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	edc3 7a02 	vstr	s15, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	edd3 7a02 	vldr	s15, [r3, #8]
 8001294:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001298:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80012d0 <update_env+0x68>
 800129c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012a4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80012a8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ac:	f011 fe34 	bl	8012f18 <powf>
 80012b0:	eef0 7a40 	vmov.f32	s15, s0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	f3af 8000 	nop.w
 80012c8:	66666666 	.word	0x66666666
 80012cc:	40711266 	.word	0x40711266
 80012d0:	8c1557b7 	.word	0x8c1557b7
 80012d4:	40791e2f 	.word	0x40791e2f

080012d8 <mach_number>:

float mach_number(env_t *env, float V_x) {
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 80012e4:	edd7 7a00 	vldr	s15, [r7]
 80012e8:	eef0 6ae7 	vabs.f32	s13, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80012f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f6:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	ee07 3a90 	vmov	s15, r3
}
 8001300:	eeb0 0a67 	vmov.f32	s0, s15
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001310:	b580      	push	{r7, lr}
 8001312:	ed2d 8b02 	vpush	{d8}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e034      	b.n	8001392 <pressure2altitudeAGL+0x82>
		if (p_active[i]) {
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d02b      	beq.n	800138c <pressure2altitudeAGL+0x7c>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	edd3 7a01 	vldr	s15, [r3, #4]
 800133a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800133e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80013a8 <pressure2altitudeAGL+0x98>
 8001342:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	ed93 7a00 	vldr	s14, [r3]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800135c:	eddf 0a14 	vldr	s1, [pc, #80]	; 80013b0 <pressure2altitudeAGL+0xa0>
 8001360:	eeb0 0a66 	vmov.f32	s0, s13
 8001364:	f011 fdd8 	bl	8012f18 <powf>
 8001368:	eeb0 7a40 	vmov.f32	s14, s0
 800136c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001370:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001374:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001378:	ee28 7b07 	vmul.f64	d7, d8, d7
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001382:	4413      	add	r3, r2
 8001384:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001388:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	3301      	adds	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	429a      	cmp	r2, r3
 8001398:	dbc6      	blt.n	8001328 <pressure2altitudeAGL+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	ecbd 8b02 	vpop	{d8}
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	76c8b439 	.word	0x76c8b439
 80013ac:	3f7a9fbe 	.word	0x3f7a9fbe
 80013b0:	3e42c4dc 	.word	0x3e42c4dc
 80013b4:	00000000 	.word	0x00000000

080013b8 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	ed2d 8b02 	vpush	{d8}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	e034      	b.n	800143a <altitudeAGL2pressure+0x82>
		if (h_active[i]) {
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d02b      	beq.n	8001434 <altitudeAGL2pressure+0x7c>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	ed93 8a00 	vldr	s16, [r3]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f2:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001450 <altitudeAGL2pressure+0x98>
 80013f6:	ee27 5b06 	vmul.f64	d5, d7, d6
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001400:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001404:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001408:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800140c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001410:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001414:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001458 <altitudeAGL2pressure+0xa0>
 8001418:	eeb0 0a67 	vmov.f32	s0, s15
 800141c:	f011 fd7c 	bl	8012f18 <powf>
 8001420:	eef0 7a40 	vmov.f32	s15, s0
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800142a:	4413      	add	r3, r2
 800142c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001430:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	429a      	cmp	r2, r3
 8001440:	dbc6      	blt.n	80013d0 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	ecbd 8b02 	vpop	{d8}
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	76c8b439 	.word	0x76c8b439
 8001454:	3f7a9fbe 	.word	0x3f7a9fbe
 8001458:	40a83d87 	.word	0x40a83d87
 800145c:	00000000 	.word	0x00000000

08001460 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8001460:	b580      	push	{r7, lr}
 8001462:	ed2d 8b02 	vpush	{d8}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	edd3 7a01 	vldr	s15, [r3, #4]
 8001476:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80014e0 <altitude_gradient+0x80>
 800147e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800148c:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80014e8 <altitude_gradient+0x88>
 8001490:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001494:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	ed97 7a00 	vldr	s14, [r7]
 80014a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014a6:	eddf 0a12 	vldr	s1, [pc, #72]	; 80014f0 <altitude_gradient+0x90>
 80014aa:	eeb0 0a66 	vmov.f32	s0, s13
 80014ae:	f011 fd33 	bl	8012f18 <powf>
 80014b2:	eef0 7a40 	vmov.f32	s15, s0
 80014b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ba:	ee28 7b07 	vmul.f64	d7, d8, d7
 80014be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014c2:	edc7 7a03 	vstr	s15, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	ee07 3a90 	vmov	s15, r3
}
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	ecbd 8b02 	vpop	{d8}
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	f3af 8000 	nop.w
 80014e0:	640f3ea7 	.word	0x640f3ea7
 80014e4:	c071f0fd 	.word	0xc071f0fd
 80014e8:	51eb851f 	.word	0x51eb851f
 80014ec:	40239eb8 	.word	0x40239eb8
 80014f0:	bf4f4ec9 	.word	0xbf4f4ec9
 80014f4:	00000000 	.word	0x00000000

080014f8 <detect_flight_phase>:

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection,
		state_est_data_t *state_est_data, env_t *env) {

	/* determine state transition events */
	switch (flight_phase_detection->flight_phase) {
 80014f8:	7803      	ldrb	r3, [r0, #0]
 80014fa:	eddf 7a43 	vldr	s15, [pc, #268]	; 8001608 <detect_flight_phase+0x110>
 80014fe:	3b01      	subs	r3, #1
		state_est_data_t *state_est_data, env_t *env) {
 8001500:	b510      	push	{r4, lr}
 8001502:	4604      	mov	r4, r0
	switch (flight_phase_detection->flight_phase) {
 8001504:	2b04      	cmp	r3, #4
 8001506:	d81b      	bhi.n	8001540 <detect_flight_phase+0x48>
 8001508:	e8df f003 	tbb	[pc, r3]
 800150c:	44311a03 	.word	0x44311a03
 8001510:	57          	.byte	0x57
 8001511:	00          	.byte	0x00
	case IDLE:
		if (((float) (state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8001512:	ed91 7a06 	vldr	s14, [r1, #24]
 8001516:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800151a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800151e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001522:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	dd09      	ble.n	8001540 <detect_flight_phase+0x48>
			flight_phase_detection->num_samples_positive += 1;
 800152c:	7a23      	ldrb	r3, [r4, #8]
 800152e:	3301      	adds	r3, #1
 8001530:	b25b      	sxtb	r3, r3
			if (flight_phase_detection->num_samples_positive >= 4) {
 8001532:	2b03      	cmp	r3, #3
			flight_phase_detection->num_samples_positive += 1;
 8001534:	7223      	strb	r3, [r4, #8]
			if (flight_phase_detection->num_samples_positive >= 4) {
 8001536:	dd03      	ble.n	8001540 <detect_flight_phase+0x48>
				flight_phase_detection->flight_phase = THRUSTING;
 8001538:	2303      	movs	r3, #3

	case DESCENT:
		if (((float) (state_est_data->position_world[2])) / 1000 < 20) {
			flight_phase_detection->num_samples_positive += 1;
			if (flight_phase_detection->num_samples_positive >= 4) {
				flight_phase_detection->flight_phase = RECOVERY;
 800153a:	7023      	strb	r3, [r4, #0]
				flight_phase_detection->num_samples_positive = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	7223      	strb	r3, [r4, #8]
	default:
		break;
	}

	flight_phase_detection->mach_number = mach_number(env,
			((float) state_est_data->velocity_rocket[0]) / 1000);
 8001540:	ed91 0a03 	vldr	s0, [r1, #12]
	flight_phase_detection->mach_number = mach_number(env,
 8001544:	4610      	mov	r0, r2
			((float) state_est_data->velocity_rocket[0]) / 1000);
 8001546:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	flight_phase_detection->mach_number = mach_number(env,
 800154a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800154e:	f7ff fec3 	bl	80012d8 <mach_number>
 8001552:	ed84 0a01 	vstr	s0, [r4, #4]

	/* determine the mach regime */
	if (flight_phase_detection->mach_number >= 1.3) {
 8001556:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800155a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80015f8 <detect_flight_phase+0x100>
 800155e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	db3d      	blt.n	80015e4 <detect_flight_phase+0xec>
		flight_phase_detection->mach_regime = SUPERSONIC;
 8001568:	2303      	movs	r3, #3
	} else if (flight_phase_detection->mach_number >= 0.8) {
		flight_phase_detection->mach_regime = TRANSONIC;
	} else {
		flight_phase_detection->mach_regime = SUBSONIC;
 800156a:	7063      	strb	r3, [r4, #1]
	}

}
 800156c:	bd10      	pop	{r4, pc}
		if (((float) (state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 800156e:	ed91 7a06 	vldr	s14, [r1, #24]
 8001572:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001576:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800157a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	d5dd      	bpl.n	8001540 <detect_flight_phase+0x48>
			flight_phase_detection->num_samples_positive += 1;
 8001584:	7a23      	ldrb	r3, [r4, #8]
 8001586:	3301      	adds	r3, #1
 8001588:	b25b      	sxtb	r3, r3
			if (flight_phase_detection->num_samples_positive >= 4) {
 800158a:	2b03      	cmp	r3, #3
			flight_phase_detection->num_samples_positive += 1;
 800158c:	7223      	strb	r3, [r4, #8]
			if (flight_phase_detection->num_samples_positive >= 4) {
 800158e:	ddd7      	ble.n	8001540 <detect_flight_phase+0x48>
				flight_phase_detection->flight_phase = COASTING;
 8001590:	2304      	movs	r3, #4
 8001592:	e7d2      	b.n	800153a <detect_flight_phase+0x42>
		if (((float) (state_est_data->velocity_world[2])) / 1000 < 0) {
 8001594:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8001598:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800159c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	d5ca      	bpl.n	8001540 <detect_flight_phase+0x48>
			flight_phase_detection->num_samples_positive += 1;
 80015aa:	7a23      	ldrb	r3, [r4, #8]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b25b      	sxtb	r3, r3
			if (flight_phase_detection->num_samples_positive >= 4) {
 80015b0:	2b03      	cmp	r3, #3
			flight_phase_detection->num_samples_positive += 1;
 80015b2:	7223      	strb	r3, [r4, #8]
			if (flight_phase_detection->num_samples_positive >= 4) {
 80015b4:	ddc4      	ble.n	8001540 <detect_flight_phase+0x48>
				flight_phase_detection->flight_phase = DESCENT;
 80015b6:	2305      	movs	r3, #5
 80015b8:	e7bf      	b.n	800153a <detect_flight_phase+0x42>
		if (((float) (state_est_data->position_world[2])) / 1000 < 20) {
 80015ba:	ed91 7a02 	vldr	s14, [r1, #8]
 80015be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80015c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015c6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80015ca:	eef4 6ac7 	vcmpe.f32	s13, s14
 80015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d2:	d5b5      	bpl.n	8001540 <detect_flight_phase+0x48>
			flight_phase_detection->num_samples_positive += 1;
 80015d4:	7a23      	ldrb	r3, [r4, #8]
 80015d6:	3301      	adds	r3, #1
 80015d8:	b25b      	sxtb	r3, r3
			if (flight_phase_detection->num_samples_positive >= 4) {
 80015da:	2b03      	cmp	r3, #3
			flight_phase_detection->num_samples_positive += 1;
 80015dc:	7223      	strb	r3, [r4, #8]
			if (flight_phase_detection->num_samples_positive >= 4) {
 80015de:	ddaf      	ble.n	8001540 <detect_flight_phase+0x48>
				flight_phase_detection->flight_phase = RECOVERY;
 80015e0:	2306      	movs	r3, #6
 80015e2:	e7aa      	b.n	800153a <detect_flight_phase+0x42>
	} else if (flight_phase_detection->mach_number >= 0.8) {
 80015e4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001600 <detect_flight_phase+0x108>
 80015e8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80015ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		flight_phase_detection->mach_regime = TRANSONIC;
 80015f0:	bfac      	ite	ge
 80015f2:	2302      	movge	r3, #2
		flight_phase_detection->mach_regime = SUBSONIC;
 80015f4:	2301      	movlt	r3, #1
 80015f6:	e7b8      	b.n	800156a <detect_flight_phase+0x72>
 80015f8:	cccccccd 	.word	0xcccccccd
 80015fc:	3ff4cccc 	.word	0x3ff4cccc
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fe99999 	.word	0x3fe99999
 8001608:	447a0000 	.word	0x447a0000

0800160c <reset_flight_phase_detection>:

void reset_flight_phase_detection(
		flight_phase_detection_t *flight_phase_detection) {
	flight_phase_detection->flight_phase = IDLE;
 800160c:	2301      	movs	r3, #1
 800160e:	7003      	strb	r3, [r0, #0]
	flight_phase_detection->mach_regime = SUBSONIC;
 8001610:	7043      	strb	r3, [r0, #1]
	flight_phase_detection->mach_number = 0.0;
 8001612:	2300      	movs	r3, #0
 8001614:	6043      	str	r3, [r0, #4]
	flight_phase_detection->num_samples_positive = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	7203      	strb	r3, [r0, #8]
}
 800161a:	4770      	bx	lr

0800161c <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 800161c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001620:	4c3d      	ldr	r4, [pc, #244]	; (8001718 <reset_kf_state+0xfc>)
void reset_kf_state(kf_state_t *kf_state){
 8001622:	b090      	sub	sp, #64	; 0x40
 8001624:	4605      	mov	r5, r0
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8001626:	ae07      	add	r6, sp, #28
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001628:	af04      	add	r7, sp, #16
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 800162a:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800162e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001630:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001634:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001636:	f854 3b04 	ldr.w	r3, [r4], #4
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800163a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800163e:	6033      	str	r3, [r6, #0]
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8001640:	ac07      	add	r4, sp, #28
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8001642:	ab01      	add	r3, sp, #4
 8001644:	46a6      	mov	lr, r4
 8001646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800164a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 800164e:	462a      	mov	r2, r5
 8001650:	4626      	mov	r6, r4
 8001652:	3208      	adds	r2, #8
 8001654:	ce03      	ldmia	r6!, {r0, r1}
 8001656:	4566      	cmp	r6, ip
 8001658:	f842 0c08 	str.w	r0, [r2, #-8]
 800165c:	f842 1c04 	str.w	r1, [r2, #-4]
 8001660:	4634      	mov	r4, r6
 8001662:	d1f5      	bne.n	8001650 <reset_kf_state+0x34>
 8001664:	6830      	ldr	r0, [r6, #0]
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8001666:	f105 0854 	add.w	r8, r5, #84	; 0x54
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 800166a:	4e2c      	ldr	r6, [pc, #176]	; (800171c <reset_kf_state+0x100>)
 800166c:	4674      	mov	r4, lr
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 800166e:	6010      	str	r0, [r2, #0]
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8001670:	cb03      	ldmia	r3!, {r0, r1}
 8001672:	64a8      	str	r0, [r5, #72]	; 0x48
 8001674:	6818      	ldr	r0, [r3, #0]
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8001676:	463b      	mov	r3, r7
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8001678:	64e9      	str	r1, [r5, #76]	; 0x4c
 800167a:	6528      	str	r0, [r5, #80]	; 0x50
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 800167c:	cb03      	ldmia	r3!, {r0, r1}
 800167e:	6568      	str	r0, [r5, #84]	; 0x54
 8001680:	6818      	ldr	r0, [r3, #0]
	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8001682:	2300      	movs	r3, #0
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8001684:	f8c8 1004 	str.w	r1, [r8, #4]
 8001688:	f8c8 0008 	str.w	r0, [r8, #8]
	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 800168c:	9304      	str	r3, [sp, #16]
 800168e:	9305      	str	r3, [sp, #20]
 8001690:	9306      	str	r3, [sp, #24]
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8001692:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001696:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001698:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 800169a:	cf03      	ldmia	r7!, {r0, r1}
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 800169c:	6833      	ldr	r3, [r6, #0]
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 800169e:	f505 7288 	add.w	r2, r5, #272	; 0x110
    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 80016a2:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
 80016a6:	2000      	movs	r0, #0
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 80016a8:	6023      	str	r3, [r4, #0]
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80016aa:	4673      	mov	r3, lr
    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 80016ac:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
 80016b0:	f8c5 010c 	str.w	r0, [r5, #268]	; 0x10c
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80016b4:	461c      	mov	r4, r3
 80016b6:	3208      	adds	r2, #8
 80016b8:	cc03      	ldmia	r4!, {r0, r1}
 80016ba:	4564      	cmp	r4, ip
 80016bc:	f842 0c08 	str.w	r0, [r2, #-8]
 80016c0:	f842 1c04 	str.w	r1, [r2, #-4]
 80016c4:	4623      	mov	r3, r4
 80016c6:	d1f5      	bne.n	80016b4 <reset_kf_state+0x98>
 80016c8:	6820      	ldr	r0, [r4, #0]

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80016ca:	2400      	movs	r4, #0
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80016cc:	6010      	str	r0, [r2, #0]
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80016ce:	4621      	mov	r1, r4
    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80016d0:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80016d4:	2224      	movs	r2, #36	; 0x24
 80016d6:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 80016da:	f010 ffac 	bl	8012636 <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
    kf_state->num_z_active = 0;

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80016de:	2103      	movs	r1, #3
 80016e0:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80016e4:	462a      	mov	r2, r5
 80016e6:	4608      	mov	r0, r1
    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 80016e8:	f8c5 4188 	str.w	r4, [r5, #392]	; 0x188
 80016ec:	f8c5 418c 	str.w	r4, [r5, #396]	; 0x18c
 80016f0:	f8c5 4190 	str.w	r4, [r5, #400]	; 0x190
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 80016f4:	f8a5 420c 	strh.w	r4, [r5, #524]	; 0x20c
 80016f8:	f885 420e 	strb.w	r4, [r5, #526]	; 0x20e
    kf_state->num_z_active = 0;
 80016fc:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 8001700:	f000 fb24 	bl	8001d4c <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8001704:	f105 0360 	add.w	r3, r5, #96	; 0x60
 8001708:	4642      	mov	r2, r8
 800170a:	2101      	movs	r1, #1
 800170c:	2003      	movs	r0, #3
}
 800170e:	b010      	add	sp, #64	; 0x40
 8001710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8001714:	f000 bb1a 	b.w	8001d4c <transpose>
 8001718:	08014348 	.word	0x08014348
 800171c:	08014378 	.word	0x08014378

08001720 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8001720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001724:	2103      	movs	r1, #3
void kf_prediction(kf_state_t *kf_state){
 8001726:	b085      	sub	sp, #20
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001728:	2501      	movs	r5, #1
 800172a:	f500 769a 	add.w	r6, r0, #308	; 0x134
void kf_prediction(kf_state_t *kf_state){
 800172e:	4604      	mov	r4, r0
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8001730:	f04f 0800 	mov.w	r8, #0
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001734:	f500 7382 	add.w	r3, r0, #260	; 0x104
 8001738:	4602      	mov	r2, r0
 800173a:	4608      	mov	r0, r1

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 800173c:	f504 7905 	add.w	r9, r4, #532	; 0x214
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8001740:	f504 77a0 	add.w	r7, r4, #320	; 0x140
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8001744:	e9cd 6500 	strd	r6, r5, [sp]
 8001748:	f000 fd2a 	bl	80021a0 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 800174c:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8001750:	f104 0248 	add.w	r2, r4, #72	; 0x48
 8001754:	4629      	mov	r1, r5
 8001756:	2003      	movs	r0, #3
 8001758:	e9cd 6800 	strd	r6, r8, [sp]
 800175c:	f000 fd20 	bl	80021a0 <matvecprod>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8001760:	2203      	movs	r2, #3
 8001762:	f504 7388 	add.w	r3, r4, #272	; 0x110
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8001766:	f504 760e 	add.w	r6, r4, #568	; 0x238
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 800176a:	4611      	mov	r1, r2
 800176c:	4610      	mov	r0, r2
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	4623      	mov	r3, r4
 8001772:	e9cd 9501 	strd	r9, r5, [sp, #4]
 8001776:	f000 fc79 	bl	800206c <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 800177a:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 800177e:	462a      	mov	r2, r5
 8001780:	4629      	mov	r1, r5
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2003      	movs	r0, #3
 8001786:	f104 0354 	add.w	r3, r4, #84	; 0x54
 800178a:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800178e:	f000 fc6d 	bl	800206c <matmul>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8001792:	2203      	movs	r2, #3
 8001794:	f104 0324 	add.w	r3, r4, #36	; 0x24
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8001798:	3460      	adds	r4, #96	; 0x60
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 800179a:	4611      	mov	r1, r2
 800179c:	4610      	mov	r0, r2
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	464b      	mov	r3, r9
 80017a2:	e9cd 7501 	strd	r7, r5, [sp, #4]
 80017a6:	f000 fc61 	bl	800206c <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 80017aa:	2203      	movs	r2, #3
 80017ac:	4633      	mov	r3, r6
 80017ae:	4629      	mov	r1, r5
 80017b0:	4610      	mov	r0, r2
 80017b2:	9400      	str	r4, [sp, #0]
 80017b4:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80017b8:	f000 fc58 	bl	800206c <matmul>
}
 80017bc:	b005      	add	sp, #20
 80017be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080017c2 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 80017c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80017c6:	f100 056c 	add.w	r5, r0, #108	; 0x6c
void select_kf_observation_matrices(kf_state_t *kf_state){
 80017ca:	4604      	mov	r4, r0
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80017cc:	2224      	movs	r2, #36	; 0x24
 80017ce:	2100      	movs	r1, #0
 80017d0:	4628      	mov	r0, r5
        if (kf_state->z_active[i]) {
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 80017d2:	2600      	movs	r6, #0
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80017d4:	f010 ff2f 	bl	8012636 <memset>
            kf_state->H[i][0] = 1;
 80017d8:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 80017dc:	f504 7303 	add.w	r3, r4, #524	; 0x20c
 80017e0:	4621      	mov	r1, r4
 80017e2:	f204 200f 	addw	r0, r4, #527	; 0x20f
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80017e6:	4622      	mov	r2, r4
        if (kf_state->z_active[i]) {
 80017e8:	f813 cb01 	ldrb.w	ip, [r3], #1
 80017ec:	f1bc 0f00 	cmp.w	ip, #0
 80017f0:	d00f      	beq.n	8001812 <select_kf_observation_matrices+0x50>
            kf_state->H[i][0] = 1;
 80017f2:	66cf      	str	r7, [r1, #108]	; 0x6c
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80017f4:	4283      	cmp	r3, r0
 80017f6:	f101 010c 	add.w	r1, r1, #12
 80017fa:	f102 0210 	add.w	r2, r2, #16
 80017fe:	d1f3      	bne.n	80017e8 <select_kf_observation_matrices+0x26>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8001800:	2103      	movs	r1, #3
 8001802:	f104 0390 	add.w	r3, r4, #144	; 0x90
 8001806:	462a      	mov	r2, r5
 8001808:	4608      	mov	r0, r1
}
 800180a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 800180e:	f000 ba9d 	b.w	8001d4c <transpose>
            kf_state->R[i][i] = 0;
 8001812:	f8c2 60b8 	str.w	r6, [r2, #184]	; 0xb8
 8001816:	e7ed      	b.n	80017f4 <select_kf_observation_matrices+0x32>

08001818 <kf_update>:

void kf_update(kf_state_t *kf_state) {
 8001818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 800181c:	2103      	movs	r1, #3
void kf_update(kf_state_t *kf_state) {
 800181e:	b087      	sub	sp, #28
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001820:	2501      	movs	r5, #1
 8001822:	f500 76ca 	add.w	r6, r0, #404	; 0x194
 8001826:	f100 096c 	add.w	r9, r0, #108	; 0x6c
 800182a:	f500 7b9a 	add.w	fp, r0, #308	; 0x134
void kf_update(kf_state_t *kf_state) {
 800182e:	4604      	mov	r4, r0
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001830:	4608      	mov	r0, r1
 8001832:	465b      	mov	r3, fp
 8001834:	464a      	mov	r2, r9
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8001836:	f504 77a0 	add.w	r7, r4, #320	; 0x140
 800183a:	f504 7a11 	add.w	sl, r4, #580	; 0x244
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 800183e:	f504 78d0 	add.w	r8, r4, #416	; 0x1a0
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8001842:	e9cd 6500 	strd	r6, r5, [sp]
 8001846:	f000 fcab 	bl	80021a0 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 800184a:	4633      	mov	r3, r6
 800184c:	4632      	mov	r2, r6
 800184e:	f504 71c4 	add.w	r1, r4, #392	; 0x188
 8001852:	2003      	movs	r0, #3
 8001854:	f000 faf9 	bl	8001e4a <vecsub>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8001858:	2203      	movs	r2, #3
 800185a:	464b      	mov	r3, r9
 800185c:	9700      	str	r7, [sp, #0]
 800185e:	4611      	mov	r1, r2
 8001860:	4610      	mov	r0, r2
 8001862:	e9cd a501 	strd	sl, r5, [sp, #4]
 8001866:	f000 fc01 	bl	800206c <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 800186a:	f104 0390 	add.w	r3, r4, #144	; 0x90
 800186e:	2203      	movs	r2, #3
 8001870:	9304      	str	r3, [sp, #16]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	4611      	mov	r1, r2
 8001876:	4653      	mov	r3, sl
 8001878:	4610      	mov	r0, r2
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 800187a:	f504 7ae2 	add.w	sl, r4, #452	; 0x1c4
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 800187e:	e9cd 8501 	strd	r8, r5, [sp, #4]
 8001882:	f000 fbf3 	bl	800206c <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 8001886:	2103      	movs	r1, #3
 8001888:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 800188c:	f8cd 8000 	str.w	r8, [sp]
 8001890:	4642      	mov	r2, r8
 8001892:	4608      	mov	r0, r1
 8001894:	f000 fb04 	bl	8001ea0 <matadd>
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8001898:	2224      	movs	r2, #36	; 0x24
 800189a:	2100      	movs	r1, #0
 800189c:	4650      	mov	r0, sl
 800189e:	f010 feca 	bl	8012636 <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 80018a2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8001954 <kf_update+0x13c>
 80018a6:	4652      	mov	r2, sl
 80018a8:	4641      	mov	r1, r8
 80018aa:	2003      	movs	r0, #3
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80018ac:	f504 78f4 	add.w	r8, r4, #488	; 0x1e8
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 80018b0:	f000 fe28 	bl	8002504 <cholesky_inverse>
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 80018b4:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80018b8:	2203      	movs	r2, #3
 80018ba:	9305      	str	r3, [sp, #20]
 80018bc:	4611      	mov	r1, r2
 80018be:	4610      	mov	r0, r2
 80018c0:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80018c4:	9b04      	ldr	r3, [sp, #16]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	463b      	mov	r3, r7
 80018ca:	f000 fbcf 	bl	800206c <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80018ce:	2203      	movs	r2, #3
 80018d0:	f8cd a000 	str.w	sl, [sp]

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80018d4:	f504 7a82 	add.w	sl, r4, #260	; 0x104
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80018d8:	9b05      	ldr	r3, [sp, #20]
 80018da:	4611      	mov	r1, r2
 80018dc:	4610      	mov	r0, r2
 80018de:	e9cd 8501 	strd	r8, r5, [sp, #4]
 80018e2:	f000 fbc3 	bl	800206c <matmul>
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80018e6:	2103      	movs	r1, #3
 80018e8:	4633      	mov	r3, r6
 80018ea:	4642      	mov	r2, r8
 80018ec:	4608      	mov	r0, r1


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 80018ee:	f504 7623 	add.w	r6, r4, #652	; 0x28c
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80018f2:	e9cd a500 	strd	sl, r5, [sp]
 80018f6:	f000 fc53 	bl	80021a0 <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80018fa:	4653      	mov	r3, sl
 80018fc:	4652      	mov	r2, sl
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 80018fe:	f504 7a2c 	add.w	sl, r4, #688	; 0x2b0
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 8001902:	4659      	mov	r1, fp
 8001904:	2003      	movs	r0, #3
 8001906:	f000 fa75 	bl	8001df4 <vecadd>
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 800190a:	4651      	mov	r1, sl
 800190c:	2003      	movs	r0, #3
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 800190e:	f504 7b35 	add.w	fp, r4, #724	; 0x2d4
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8001912:	f000 f9cf 	bl	8001cb4 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8001916:	2203      	movs	r2, #3
 8001918:	4643      	mov	r3, r8
 800191a:	f8cd 9000 	str.w	r9, [sp]
 800191e:	4611      	mov	r1, r2
 8001920:	4610      	mov	r0, r2
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8001922:	f504 7488 	add.w	r4, r4, #272	; 0x110
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8001926:	e9cd b501 	strd	fp, r5, [sp, #4]
 800192a:	f000 fb9f 	bl	800206c <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 800192e:	2103      	movs	r1, #3
 8001930:	465b      	mov	r3, fp
 8001932:	4652      	mov	r2, sl
 8001934:	4608      	mov	r0, r1
 8001936:	9600      	str	r6, [sp, #0]
 8001938:	f000 fb25 	bl	8001f86 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 800193c:	2203      	movs	r2, #3
 800193e:	4633      	mov	r3, r6
 8001940:	9502      	str	r5, [sp, #8]
 8001942:	4611      	mov	r1, r2
 8001944:	4610      	mov	r0, r2
 8001946:	e9cd 7400 	strd	r7, r4, [sp]
 800194a:	f000 fb8f 	bl	800206c <matmul>
}
 800194e:	b007      	add	sp, #28
 8001950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001954:	38d1b717 	.word	0x38d1b717

08001958 <update_state_est_data>:
#include "Sim_Con\state_est.h"


void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8001958:	ed91 7a41 	vldr	s14, [r1, #260]	; 0x104
 800195c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001998 <update_state_est_data+0x40>
 8001960:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001964:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001968:	ed80 7a02 	vstr	s14, [r0, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 800196c:	ed91 7a42 	vldr	s14, [r1, #264]	; 0x108
 8001970:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001974:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8001978:	edc0 7a03 	vstr	s15, [r0, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 800197c:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 8001980:	edd1 7a40 	vldr	s15, [r1, #256]	; 0x100
 8001984:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800198c:	edc0 7a06 	vstr	s15, [r0, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 8001990:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	447a0000 	.word	0x447a0000

0800199c <select_noise_models>:
        update_env(env, temp_meas_mean);
    }
} 

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 800199c:	b570      	push	{r4, r5, r6, lr}
 800199e:	461e      	mov	r6, r3
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 80019a0:	780b      	ldrb	r3, [r1, #0]
                        extrapolation_rolling_memory_t *baro_roll_mem){
 80019a2:	4604      	mov	r4, r0
 80019a4:	4615      	mov	r5, r2
    switch (flight_phase_detection->flight_phase) {
 80019a6:	3b01      	subs	r3, #1
                        extrapolation_rolling_memory_t *baro_roll_mem){
 80019a8:	ed2d 8b02 	vpush	{d8}
 80019ac:	b086      	sub	sp, #24
    switch (flight_phase_detection->flight_phase) {
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d808      	bhi.n	80019c4 <select_noise_models+0x28>
 80019b2:	e8df f003 	tbb	[pc, r3]
 80019b6:	4141      	.short	0x4141
 80019b8:	413c3703 	.word	0x413c3703
            accelerometer_x_stdev = 0.0185409;
            barometer_stdev = 1.869;
        break;
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
            barometer_stdev = 13.000;
 80019bc:	eeb2 8a0a 	vmov.f32	s16, #42	; 0x41500000  13.0
            accelerometer_x_stdev = 1.250775;
 80019c0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001a44 <select_noise_models+0xa8>
            barometer_stdev = 3.896;
        break;
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80019c4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 80019c8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    bool h_active[1] = {true};
 80019cc:	2101      	movs	r1, #1
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80019ce:	aa04      	add	r2, sp, #16
    float h[1] = {kf_state->x_est[0]};
 80019d0:	9305      	str	r3, [sp, #20]
    bool h_active[1] = {true};
 80019d2:	ab06      	add	r3, sp, #24
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80019d4:	ee27 7b07 	vmul.f64	d7, d7, d7
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80019d8:	4628      	mov	r0, r5
    bool h_active[1] = {true};
 80019da:	f803 1d0c 	strb.w	r1, [r3, #-12]!
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80019de:	9200      	str	r2, [sp, #0]
 80019e0:	aa05      	add	r2, sp, #20
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80019e2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80019e6:	ed84 7a2d 	vstr	s14, [r4, #180]	; 0xb4
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80019ea:	f7ff fce5 	bl	80013b8 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 80019ee:	ed9d 0a04 	vldr	s0, [sp, #16]
 80019f2:	4628      	mov	r0, r5
 80019f4:	f7ff fd34 	bl	8001460 <altitude_gradient>
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 80019f8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80019fc:	eeb0 0ac0 	vabs.f32	s0, s0

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 8001a00:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8001a04:	ee20 0b00 	vmul.f64	d0, d0, d0
 8001a08:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8001a0c:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
 8001a10:	ed84 0a32 	vstr	s0, [r4, #200]	; 0xc8
 8001a14:	ed84 0a36 	vstr	s0, [r4, #216]	; 0xd8
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8001a18:	ed86 8a25 	vstr	s16, [r6, #148]	; 0x94
}
 8001a1c:	b006      	add	sp, #24
 8001a1e:	ecbd 8b02 	vpop	{d8}
 8001a22:	bd70      	pop	{r4, r5, r6, pc}
            barometer_stdev = 7.380;
 8001a24:	ed9f 8a08 	vldr	s16, [pc, #32]	; 8001a48 <select_noise_models+0xac>
            accelerometer_x_stdev = 0.61803;
 8001a28:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001a4c <select_noise_models+0xb0>
        break;
 8001a2c:	e7ca      	b.n	80019c4 <select_noise_models+0x28>
            barometer_stdev = 3.896;
 8001a2e:	ed9f 8a08 	vldr	s16, [pc, #32]	; 8001a50 <select_noise_models+0xb4>
            accelerometer_x_stdev = 1.955133;
 8001a32:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001a54 <select_noise_models+0xb8>
        break;
 8001a36:	e7c5      	b.n	80019c4 <select_noise_models+0x28>
            barometer_stdev = 1.869;
 8001a38:	ed9f 8a07 	vldr	s16, [pc, #28]	; 8001a58 <select_noise_models+0xbc>
            accelerometer_x_stdev = 0.0185409;
 8001a3c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001a5c <select_noise_models+0xc0>
 8001a40:	e7c0      	b.n	80019c4 <select_noise_models+0x28>
 8001a42:	bf00      	nop
 8001a44:	3fa01965 	.word	0x3fa01965
 8001a48:	40ec28f6 	.word	0x40ec28f6
 8001a4c:	3f1e3737 	.word	0x3f1e3737
 8001a50:	40795810 	.word	0x40795810
 8001a54:	3ffa41cc 	.word	0x3ffa41cc
 8001a58:	3fef3b64 	.word	0x3fef3b64
 8001a5c:	3c97e316 	.word	0x3c97e316

08001a60 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8001a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* calculate mean of the sample */
    int num_active = 0;
    float mean = 0;
    for (int i = 0; i < n; i++){
 8001a62:	2400      	movs	r4, #0
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8001a64:	4606      	mov	r6, r0
 8001a66:	460f      	mov	r7, r1
 8001a68:	4615      	mov	r5, r2
    int num_active = 0;
 8001a6a:	4623      	mov	r3, r4
void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8001a6c:	ed2d 8b02 	vpush	{d8}
    float mean = 0;
 8001a70:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 8001b24 <sensor_elimination_by_stdev+0xc4>
    for (int i = 0; i < n; i++){
 8001a74:	42b4      	cmp	r4, r6
 8001a76:	db1f      	blt.n	8001ab8 <sensor_elimination_by_stdev+0x58>
        if (measurement_active[i]) {
            num_active += 1;
            mean += measurements[i];
        }
    }
    if (num_active > 0){
 8001a78:	b12b      	cbz	r3, 8001a86 <sensor_elimination_by_stdev+0x26>
        mean /= num_active;
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a82:	ee88 8a27 	vdiv.f32	s16, s16, s15
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
    for (int i = 0; i < n; ++i) {
 8001a86:	2400      	movs	r4, #0
    float stdev = 0;
 8001a88:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001b24 <sensor_elimination_by_stdev+0xc4>
    for (int i = 0; i < n; ++i) {
 8001a8c:	42b4      	cmp	r4, r6
 8001a8e:	db1e      	blt.n	8001ace <sensor_elimination_by_stdev+0x6e>
        if (measurement_active[i]) {
            stdev += pow(measurements[i] - mean, 2);
        }
    }
    if (num_active > 0){
 8001a90:	b15b      	cbz	r3, 8001aaa <sensor_elimination_by_stdev+0x4a>
        stdev = sqrt(stdev / num_active);
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a9a:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8001a9e:	eeb7 0ac7 	vcvt.f64.f32	d0, s14
 8001aa2:	f011 fca9 	bl	80133f8 <sqrt>
 8001aa6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8001aaa:	2300      	movs	r3, #0
        if (measurement_active[i]) {
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
                measurement_active[i] = false;
 8001aac:	461a      	mov	r2, r3
    for (int i = 0; i < n; ++i) {
 8001aae:	42b3      	cmp	r3, r6
 8001ab0:	db1f      	blt.n	8001af2 <sensor_elimination_by_stdev+0x92>
            }
        }
    }
}
 8001ab2:	ecbd 8b02 	vpop	{d8}
 8001ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (measurement_active[i]) {
 8001ab8:	5d2a      	ldrb	r2, [r5, r4]
 8001aba:	b132      	cbz	r2, 8001aca <sensor_elimination_by_stdev+0x6a>
            mean += measurements[i];
 8001abc:	eb07 0284 	add.w	r2, r7, r4, lsl #2
            num_active += 1;
 8001ac0:	3301      	adds	r3, #1
            mean += measurements[i];
 8001ac2:	edd2 7a00 	vldr	s15, [r2]
 8001ac6:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int i = 0; i < n; i++){
 8001aca:	3401      	adds	r4, #1
 8001acc:	e7d2      	b.n	8001a74 <sensor_elimination_by_stdev+0x14>
        if (measurement_active[i]) {
 8001ace:	5d2a      	ldrb	r2, [r5, r4]
 8001ad0:	b16a      	cbz	r2, 8001aee <sensor_elimination_by_stdev+0x8e>
            stdev += pow(measurements[i] - mean, 2);
 8001ad2:	eb07 0284 	add.w	r2, r7, r4, lsl #2
 8001ad6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8001ada:	ed92 7a00 	vldr	s14, [r2]
 8001ade:	ee37 7a48 	vsub.f32	s14, s14, s16
 8001ae2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001ae6:	eea7 0b07 	vfma.f64	d0, d7, d7
 8001aea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    for (int i = 0; i < n; ++i) {
 8001aee:	3401      	adds	r4, #1
 8001af0:	e7cc      	b.n	8001a8c <sensor_elimination_by_stdev+0x2c>
        if (measurement_active[i]) {
 8001af2:	5ce9      	ldrb	r1, [r5, r3]
 8001af4:	b199      	cbz	r1, 8001b1e <sensor_elimination_by_stdev+0xbe>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8001af6:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8001afa:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8001afe:	ed91 7a00 	vldr	s14, [r1]
 8001b02:	ee36 6b06 	vadd.f64	d6, d6, d6
 8001b06:	ee37 7a48 	vsub.f32	s14, s14, s16
 8001b0a:	eeb0 7ac7 	vabs.f32	s14, s14
 8001b0e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001b12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                measurement_active[i] = false;
 8001b1a:	bfc8      	it	gt
 8001b1c:	54ea      	strbgt	r2, [r5, r3]
    for (int i = 0; i < n; ++i) {
 8001b1e:	3301      	adds	r3, #1
 8001b20:	e7c5      	b.n	8001aae <sensor_elimination_by_stdev+0x4e>
 8001b22:	bf00      	nop
 8001b24:	00000000 	.word	0x00000000

08001b28 <process_measurements>:
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8001b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b2c:	460d      	mov	r5, r1
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8001b2e:	2400      	movs	r4, #0
 8001b30:	f501 71c4 	add.w	r1, r1, #392	; 0x188
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8001b34:	4694      	mov	ip, r2
 8001b36:	f04f 0b0c 	mov.w	fp, #12
            kf_state->z[i] = 0;
 8001b3a:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8001cb0 <process_measurements+0x188>
 8001b3e:	460f      	mov	r7, r1
            kf_state->z_active[i] = false;
 8001b40:	46a6      	mov	lr, r4
            kf_state->z_active[i] = true;
 8001b42:	f04f 0901 	mov.w	r9, #1
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8001b46:	ed2d 8b02 	vpush	{d8}
 8001b4a:	b08d      	sub	sp, #52	; 0x34
 8001b4c:	f10d 0810 	add.w	r8, sp, #16
 8001b50:	ae05      	add	r6, sp, #20
 8001b52:	9303      	str	r3, [sp, #12]
 8001b54:	9b03      	ldr	r3, [sp, #12]
 8001b56:	fb0b 3a04 	mla	sl, fp, r4, r3
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 8001b5a:	6893      	ldr	r3, [r2, #8]
 8001b5c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8001b60:	4283      	cmp	r3, r0
 8001b62:	eb05 0004 	add.w	r0, r5, r4
 8001b66:	f240 8093 	bls.w	8001c90 <process_measurements+0x168>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8001b6a:	ed92 7a00 	vldr	s14, [r2]
            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8001b6e:	ab06      	add	r3, sp, #24
            temp_meas_active[i] = true;
 8001b70:	f808 9004 	strb.w	r9, [r8, r4]
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8001b74:	ed81 7a00 	vstr	s14, [r1]
            kf_state->z_active[i] = true;
 8001b78:	f880 920c 	strb.w	r9, [r0, #524]	; 0x20c
            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8001b7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8001b80:	ed92 7a01 	vldr	s14, [r2, #4]
 8001b84:	ed80 7a00 	vstr	s14, [r0]
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8001b88:	eb0a 1a04 	add.w	sl, sl, r4, lsl #4
 8001b8c:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 8001b90:	320c      	adds	r2, #12
 8001b92:	f10c 0c1c 	add.w	ip, ip, #28
 8001b96:	f8da 003c 	ldr.w	r0, [sl, #60]	; 0x3c
 8001b9a:	3104      	adds	r1, #4
 8001b9c:	4283      	cmp	r3, r0
 8001b9e:	ea4f 0084 	mov.w	r0, r4, lsl #2
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8001ba2:	ab09      	add	r3, sp, #36	; 0x24
 8001ba4:	bf88      	it	hi
 8001ba6:	f8dc a014 	ldrhi.w	sl, [ip, #20]
 8001baa:	4418      	add	r0, r3
            acc_x_meas_active[i] = true;
 8001bac:	bf8c      	ite	hi
 8001bae:	f806 9004 	strbhi.w	r9, [r6, r4]
            acc_x_meas_active[i] = false;
 8001bb2:	f806 e004 	strbls.w	lr, [r6, r4]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8001bb6:	f104 0401 	add.w	r4, r4, #1
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8001bba:	bf8c      	ite	hi
 8001bbc:	f8c0 a000 	strhi.w	sl, [r0]
            acc_x_meas[i] = 0;
 8001bc0:	edc0 7a00 	vstrls	s15, [r0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8001bc4:	2c03      	cmp	r4, #3
 8001bc6:	d1c5      	bne.n	8001b54 <process_measurements+0x2c>
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 8001bc8:	f505 7903 	add.w	r9, r5, #524	; 0x20c
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4639      	mov	r1, r7
    float temp_meas_mean = 0;
 8001bd0:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8001cb0 <process_measurements+0x188>
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 8001bd4:	464a      	mov	r2, r9
 8001bd6:	f7ff ff43 	bl	8001a60 <sensor_elimination_by_stdev>
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 8001bda:	4642      	mov	r2, r8
 8001bdc:	4620      	mov	r0, r4
 8001bde:	a906      	add	r1, sp, #24
 8001be0:	f7ff ff3e 	bl	8001a60 <sensor_elimination_by_stdev>
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 8001be4:	4620      	mov	r0, r4
 8001be6:	4632      	mov	r2, r6
 8001be8:	a909      	add	r1, sp, #36	; 0x24
 8001bea:	f7ff ff39 	bl	8001a60 <sensor_elimination_by_stdev>
    kf_state->num_z_active = 0;
 8001bee:	2100      	movs	r1, #0
    float u = 0;
 8001bf0:	eef0 8a48 	vmov.f32	s17, s16
 8001bf4:	4648      	mov	r0, r9
 8001bf6:	aa06      	add	r2, sp, #24
    int num_temp_meas_active = 0;
 8001bf8:	460c      	mov	r4, r1
    int num_acc_x_meas_active = 0;
 8001bfa:	4688      	mov	r8, r1
    kf_state->num_z_active = 0;
 8001bfc:	f8c5 1210 	str.w	r1, [r5, #528]	; 0x210
        if (kf_state->z_active[i]){
 8001c00:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001c04:	b123      	cbz	r3, 8001c10 <process_measurements+0xe8>
            kf_state->num_z_active += 1;
 8001c06:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
        if (acc_x_meas_active[i]) {
 8001c10:	5c73      	ldrb	r3, [r6, r1]
 8001c12:	b143      	cbz	r3, 8001c26 <process_measurements+0xfe>
            u += acc_x_meas[i];
 8001c14:	ab09      	add	r3, sp, #36	; 0x24
            num_acc_x_meas_active += 1;
 8001c16:	f108 0801 	add.w	r8, r8, #1
            u += acc_x_meas[i];
 8001c1a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	ee78 8aa7 	vadd.f32	s17, s17, s15
        if (temp_meas[i]) {
 8001c26:	ecf2 7a01 	vldmia	r2!, {s15}
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8001c2a:	3101      	adds	r1, #1
        if (temp_meas[i]) {
 8001c2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            temp_meas_mean += temp_meas[i];
 8001c34:	bf1c      	itt	ne
 8001c36:	ee38 8a27 	vaddne.f32	s16, s16, s15
            num_temp_meas_active += 1;
 8001c3a:	3401      	addne	r4, #1
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8001c3c:	2903      	cmp	r1, #3
 8001c3e:	d1df      	bne.n	8001c00 <process_measurements+0xd8>
    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 8001c40:	9700      	str	r7, [sp, #0]
 8001c42:	464b      	mov	r3, r9
 8001c44:	463a      	mov	r2, r7
 8001c46:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001c48:	f7ff fb62 	bl	8001310 <pressure2altitudeAGL>
    if (num_acc_x_meas_active > 0){
 8001c4c:	f1b8 0f00 	cmp.w	r8, #0
 8001c50:	d00f      	beq.n	8001c72 <process_measurements+0x14a>
        u /= num_acc_x_meas_active;
 8001c52:	ee07 8a90 	vmov	s15, r8
 8001c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        kf_state->u[0] = u - GRAVITATION;
 8001c5a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001ca8 <process_measurements+0x180>
        u /= num_acc_x_meas_active;
 8001c5e:	ee88 7aa7 	vdiv.f32	s14, s17, s15
        kf_state->u[0] = u - GRAVITATION;
 8001c62:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001c66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c6a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001c6e:	ed85 7a40 	vstr	s14, [r5, #256]	; 0x100
    if (num_temp_meas_active > 0){
 8001c72:	b144      	cbz	r4, 8001c86 <process_measurements+0x15e>
        temp_meas_mean /= num_temp_meas_active;
 8001c74:	ee07 4a90 	vmov	s15, r4
        update_env(env, temp_meas_mean);
 8001c78:	9818      	ldr	r0, [sp, #96]	; 0x60
        temp_meas_mean /= num_temp_meas_active;
 8001c7a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        update_env(env, temp_meas_mean);
 8001c7e:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8001c82:	f7ff faf1 	bl	8001268 <update_env>
} 
 8001c86:	b00d      	add	sp, #52	; 0x34
 8001c88:	ecbd 8b02 	vpop	{d8}
 8001c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            temp_meas[i] = 0;
 8001c90:	ab06      	add	r3, sp, #24
            kf_state->z[i] = 0;
 8001c92:	edc1 7a00 	vstr	s15, [r1]
            kf_state->z_active[i] = false;
 8001c96:	f880 e20c 	strb.w	lr, [r0, #524]	; 0x20c
            temp_meas[i] = 0;
 8001c9a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
            temp_meas_active[i] = false;
 8001c9e:	f804 e008 	strb.w	lr, [r4, r8]
            temp_meas[i] = 0;
 8001ca2:	edc0 7a00 	vstr	s15, [r0]
 8001ca6:	e76f      	b.n	8001b88 <process_measurements+0x60>
 8001ca8:	51eb851f 	.word	0x51eb851f
 8001cac:	40239eb8 	.word	0x40239eb8
 8001cb0:	00000000 	.word	0x00000000

08001cb4 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 8001cb4:	b490      	push	{r4, r7}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	1e43      	subs	r3, r0, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	f04f 0400 	mov.w	r4, #0
 8001cd4:	0154      	lsls	r4, r2, #5
 8001cd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cda:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	e02b      	b.n	8001d3a <eye+0x86>
        for(int j = 0; j < dim; j++){
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e021      	b.n	8001d2c <eye+0x78>
            if (i == j){
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d10d      	bne.n	8001d0c <eye+0x58>
				A[i][j] = 1;
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	fb03 f302 	mul.w	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	441a      	add	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	e00c      	b.n	8001d26 <eye+0x72>
			} else {
				A[i][j] = 0;
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	fb03 f302 	mul.w	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	441a      	add	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbd9      	blt.n	8001ce8 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	3301      	adds	r3, #1
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dbcf      	blt.n	8001ce2 <eye+0x2e>
			}
        }
    }
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc90      	pop	{r4, r7}
 8001d4a:	4770      	bx	lr

08001d4c <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8001d4c:	b4b0      	push	{r4, r5, r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	68b8      	ldr	r0, [r7, #8]
 8001d5c:	1e43      	subs	r3, r0, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	4603      	mov	r3, r0
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	f04f 0400 	mov.w	r4, #0
 8001d70:	0154      	lsls	r4, r2, #5
 8001d72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d76:	014b      	lsls	r3, r1, #5
 8001d78:	68fd      	ldr	r5, [r7, #12]
 8001d7a:	1e6b      	subs	r3, r5, #1
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	462b      	mov	r3, r5
 8001d80:	4619      	mov	r1, r3
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	f04f 0400 	mov.w	r4, #0
 8001d8e:	0154      	lsls	r4, r2, #5
 8001d90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d94:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	e022      	b.n	8001de2 <transpose+0x96>
		for(int j = 0; j < n; j++){
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	e018      	b.n	8001dd4 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8001da2:	4602      	mov	r2, r0
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fb03 f302 	mul.w	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	441a      	add	r2, r3
 8001db0:	4629      	mov	r1, r5
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fb03 f301 	mul.w	r3, r3, r1
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	4419      	add	r1, r3
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dbe2      	blt.n	8001da2 <transpose+0x56>
	for(int i = 0; i < m; i++){
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	3301      	adds	r3, #1
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dbd8      	blt.n	8001d9c <transpose+0x50>
		}
	}
}
 8001dea:	bf00      	nop
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bcb0      	pop	{r4, r5, r7}
 8001df2:	4770      	bx	lr

08001df4 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e016      	b.n	8001e36 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	4413      	add	r3, r2
 8001e10:	ed93 7a00 	vldr	s14, [r3]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dbe4      	blt.n	8001e08 <vecadd+0x14>
	}
}
 8001e3e:	bf00      	nop
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8001e4a:	b480      	push	{r7}
 8001e4c:	b087      	sub	sp, #28
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e016      	b.n	8001e8c <vecsub+0x42>
		c[i] = a[i] - b[i];
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	4413      	add	r3, r2
 8001e66:	ed93 7a00 	vldr	s14, [r3]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e82:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	dbe4      	blt.n	8001e5e <vecsub+0x14>
	}
}
 8001e94:	bf00      	nop
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8001ea0:	b4f0      	push	{r4, r5, r6, r7}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	68b8      	ldr	r0, [r7, #8]
 8001eb0:	1e43      	subs	r3, r0, #1
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	f04f 0400 	mov.w	r4, #0
 8001ec4:	0154      	lsls	r4, r2, #5
 8001ec6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001eca:	014b      	lsls	r3, r1, #5
 8001ecc:	68bd      	ldr	r5, [r7, #8]
 8001ece:	1e6b      	subs	r3, r5, #1
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	462b      	mov	r3, r5
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	f04f 0400 	mov.w	r4, #0
 8001ee2:	0154      	lsls	r4, r2, #5
 8001ee4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ee8:	014b      	lsls	r3, r1, #5
 8001eea:	68be      	ldr	r6, [r7, #8]
 8001eec:	1e73      	subs	r3, r6, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	4633      	mov	r3, r6
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	f04f 0400 	mov.w	r4, #0
 8001f00:	0154      	lsls	r4, r2, #5
 8001f02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f06:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	e032      	b.n	8001f74 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
 8001f12:	e028      	b.n	8001f66 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8001f14:	4602      	mov	r2, r0
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fb03 f302 	mul.w	r3, r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	441a      	add	r2, r3
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	ed93 7a00 	vldr	s14, [r3]
 8001f2c:	462a      	mov	r2, r5
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fb03 f302 	mul.w	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	441a      	add	r2, r3
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	4632      	mov	r2, r6
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fb03 f302 	mul.w	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f50:	441a      	add	r2, r3
 8001f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	3301      	adds	r3, #1
 8001f64:	623b      	str	r3, [r7, #32]
 8001f66:	6a3a      	ldr	r2, [r7, #32]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dbd2      	blt.n	8001f14 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dbc8      	blt.n	8001f0e <matadd+0x6e>
        }
    }
}
 8001f7c:	bf00      	nop
 8001f7e:	3728      	adds	r7, #40	; 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bcf0      	pop	{r4, r5, r6, r7}
 8001f84:	4770      	bx	lr

08001f86 <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8001f86:	b4f0      	push	{r4, r5, r6, r7}
 8001f88:	b08a      	sub	sp, #40	; 0x28
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	68b8      	ldr	r0, [r7, #8]
 8001f96:	1e43      	subs	r3, r0, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	f04f 0400 	mov.w	r4, #0
 8001faa:	0154      	lsls	r4, r2, #5
 8001fac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fb0:	014b      	lsls	r3, r1, #5
 8001fb2:	68bd      	ldr	r5, [r7, #8]
 8001fb4:	1e6b      	subs	r3, r5, #1
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	462b      	mov	r3, r5
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	f04f 0400 	mov.w	r4, #0
 8001fc8:	0154      	lsls	r4, r2, #5
 8001fca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fce:	014b      	lsls	r3, r1, #5
 8001fd0:	68be      	ldr	r6, [r7, #8]
 8001fd2:	1e73      	subs	r3, r6, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	4633      	mov	r3, r6
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	f04f 0400 	mov.w	r4, #0
 8001fe6:	0154      	lsls	r4, r2, #5
 8001fe8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fec:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e032      	b.n	800205a <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
 8001ff8:	e028      	b.n	800204c <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	fb03 f302 	mul.w	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	441a      	add	r2, r3
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	ed93 7a00 	vldr	s14, [r3]
 8002012:	462a      	mov	r2, r5
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	fb03 f302 	mul.w	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	441a      	add	r2, r3
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	4632      	mov	r2, r6
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	fb03 f302 	mul.w	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002036:	441a      	add	r2, r3
 8002038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	3301      	adds	r3, #1
 800204a:	623b      	str	r3, [r7, #32]
 800204c:	6a3a      	ldr	r2, [r7, #32]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	429a      	cmp	r2, r3
 8002052:	dbd2      	blt.n	8001ffa <matsub+0x74>
	for(int i = 0; i < m; i++){
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	429a      	cmp	r2, r3
 8002060:	dbc8      	blt.n	8001ff4 <matsub+0x6e>
        }
    }
}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	; 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bcf0      	pop	{r4, r5, r6, r7}
 800206a:	4770      	bx	lr

0800206c <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 800206c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206e:	b08d      	sub	sp, #52	; 0x34
 8002070:	af00      	add	r7, sp, #0
 8002072:	6178      	str	r0, [r7, #20]
 8002074:	6139      	str	r1, [r7, #16]
 8002076:	60fa      	str	r2, [r7, #12]
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	693e      	ldr	r6, [r7, #16]
 800207c:	1e73      	subs	r3, r6, #1
 800207e:	623b      	str	r3, [r7, #32]
 8002080:	4633      	mov	r3, r6
 8002082:	4619      	mov	r1, r3
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	f04f 0400 	mov.w	r4, #0
 8002090:	0154      	lsls	r4, r2, #5
 8002092:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002096:	014b      	lsls	r3, r1, #5
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	3b01      	subs	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	4613      	mov	r3, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	f04f 0400 	mov.w	r4, #0
 80020b2:	0154      	lsls	r4, r2, #5
 80020b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020b8:	014b      	lsls	r3, r1, #5
 80020ba:	68fd      	ldr	r5, [r7, #12]
 80020bc:	1e6b      	subs	r3, r5, #1
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	462b      	mov	r3, r5
 80020c2:	4619      	mov	r1, r3
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	f04f 0400 	mov.w	r4, #0
 80020d0:	0154      	lsls	r4, r2, #5
 80020d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020d6:	014b      	lsls	r3, r1, #5
	if (reset) {
 80020d8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d009      	beq.n	80020f4 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	461a      	mov	r2, r3
 80020ec:	2100      	movs	r1, #0
 80020ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80020f0:	f010 faa1 	bl	8012636 <memset>
	}
	for(int i = 0; i < m; i++){
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	e04a      	b.n	8002190 <matmul+0x124>
        for(int j = 0; j < o; j++){
 80020fa:	2300      	movs	r3, #0
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020fe:	e040      	b.n	8002182 <matmul+0x116>
            for(int k = 0; k < n; k++){
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002104:	e036      	b.n	8002174 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8002106:	4632      	mov	r2, r6
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	fb03 f302 	mul.w	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	441a      	add	r2, r3
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	fb03 f302 	mul.w	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800212a:	441a      	add	r2, r3
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213a:	462a      	mov	r2, r5
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	fb03 f302 	mul.w	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002146:	441a      	add	r2, r3
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	462a      	mov	r2, r5
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	fb03 f302 	mul.w	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800215e:	441a      	add	r2, r3
 8002160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	3301      	adds	r3, #1
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	dbc4      	blt.n	8002106 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	3301      	adds	r3, #1
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
 8002182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	429a      	cmp	r2, r3
 8002188:	dbba      	blt.n	8002100 <matmul+0x94>
	for(int i = 0; i < m; i++){
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	3301      	adds	r3, #1
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
 8002190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	429a      	cmp	r2, r3
 8002196:	dbb0      	blt.n	80020fa <matmul+0x8e>
            }
        }
    }
}
 8002198:	bf00      	nop
 800219a:	3734      	adds	r7, #52	; 0x34
 800219c:	46bd      	mov	sp, r7
 800219e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021a0 <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	68bd      	ldr	r5, [r7, #8]
 80021b0:	1e6b      	subs	r3, r5, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	462b      	mov	r3, r5
 80021b6:	4619      	mov	r1, r3
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	f04f 0400 	mov.w	r4, #0
 80021c4:	0154      	lsls	r4, r2, #5
 80021c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021ca:	014b      	lsls	r3, r1, #5
	if (reset) {
 80021cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	461a      	mov	r2, r3
 80021da:	2100      	movs	r1, #0
 80021dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021de:	f010 fa2a 	bl	8012636 <memset>
	}
	for(int i = 0; i < m; i++){
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	e02e      	b.n	8002246 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	e024      	b.n	8002238 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 80021ee:	462a      	mov	r2, r5
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fb03 f302 	mul.w	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	441a      	add	r2, r3
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	ed93 7a00 	vldr	s14, [r3]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	4413      	add	r3, r2
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800221c:	4413      	add	r3, r2
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002228:	4413      	add	r3, r2
 800222a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	dbd6      	blt.n	80021ee <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	3301      	adds	r3, #1
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	429a      	cmp	r2, r3
 800224c:	dbcc      	blt.n	80021e8 <matvecprod+0x48>
        }
    }
}
 800224e:	bf00      	nop
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bdb0      	pop	{r4, r5, r7, pc}

08002256 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 8002256:	b480      	push	{r7}
 8002258:	b08b      	sub	sp, #44	; 0x2c
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	e01d      	b.n	80022a6 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	d102      	bne.n	8002280 <lower_triangular_inverse+0x2a>
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
 800227e:	e076      	b.n	800236e <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	ed93 7a00 	vldr	s14, [r3]
 8002286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800228a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3301      	adds	r3, #1
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	3301      	adds	r3, #1
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dbdd      	blt.n	800226a <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80022ae:	2301      	movs	r3, #1
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	4413      	add	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	e052      	b.n	8002364 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e041      	b.n	800234c <lower_triangular_inverse+0xf6>
            sum = 0.0;
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	e01b      	b.n	8002310 <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4413      	add	r3, r2
 80022e0:	ed93 7a00 	vldr	s14, [r3]
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80022f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fc:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3301      	adds	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	429a      	cmp	r2, r3
 8002316:	dbdf      	blt.n	80022d8 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4413      	add	r3, r2
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	eeb1 7a67 	vneg.f32	s14, s15
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4413      	add	r3, r2
 8002330:	edd7 7a03 	vldr	s15, [r7, #12]
 8002334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002338:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	4413      	add	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	3301      	adds	r3, #1
 800234a:	623b      	str	r3, [r7, #32]
 800234c:	6a3a      	ldr	r2, [r7, #32]
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	429a      	cmp	r2, r3
 8002352:	dbb9      	blt.n	80022c8 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	3301      	adds	r3, #1
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4413      	add	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	dba8      	blt.n	80022be <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	372c      	adds	r7, #44	; 0x2c
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 800237a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237c:	b08b      	sub	sp, #44	; 0x2c
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	68fe      	ldr	r6, [r7, #12]
 8002388:	1e73      	subs	r3, r6, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	4633      	mov	r3, r6
 800238e:	4619      	mov	r1, r3
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	f04f 0400 	mov.w	r4, #0
 800239c:	0154      	lsls	r4, r2, #5
 800239e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023a2:	014b      	lsls	r3, r1, #5
 80023a4:	68fd      	ldr	r5, [r7, #12]
 80023a6:	1e6b      	subs	r3, r5, #1
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	462b      	mov	r3, r5
 80023ac:	4619      	mov	r1, r3
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	f04f 0400 	mov.w	r4, #0
 80023ba:	0154      	lsls	r4, r2, #5
 80023bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023c0:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	461a      	mov	r2, r3
 80023ce:	2100      	movs	r1, #0
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f010 f930 	bl	8012636 <memset>
    for (int i = 0; i < n; i++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	e08a      	b.n	80024f2 <cholesky+0x178>
        for (int j = 0; j < (i+1); j++) {
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	e07e      	b.n	80024e0 <cholesky+0x166>
            float s = 0;
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
 80023ec:	e022      	b.n	8002434 <cholesky+0xba>
                s += L[i][k] * L[j][k];
 80023ee:	462a      	mov	r2, r5
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fb03 f302 	mul.w	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	441a      	add	r2, r3
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	ed93 7a00 	vldr	s14, [r3]
 8002406:	462a      	mov	r2, r5
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	fb03 f302 	mul.w	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	441a      	add	r2, r3
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	ed97 7a08 	vldr	s14, [r7, #32]
 8002426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242a:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	3301      	adds	r3, #1
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
 8002434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	429a      	cmp	r2, r3
 800243a:	dbd8      	blt.n	80023ee <cholesky+0x74>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	429a      	cmp	r2, r3
 8002442:	d116      	bne.n	8002472 <cholesky+0xf8>
 8002444:	4632      	mov	r2, r6
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	fb03 f302 	mul.w	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	441a      	add	r2, r3
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	ed93 7a00 	vldr	s14, [r3]
 800245c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002464:	eeb0 0a67 	vmov.f32	s0, s15
 8002468:	f011 f812 	bl	8013490 <sqrtf>
 800246c:	eef0 7a40 	vmov.f32	s15, s0
 8002470:	e027      	b.n	80024c2 <cholesky+0x148>
 8002472:	462a      	mov	r2, r5
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	fb03 f302 	mul.w	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	441a      	add	r2, r3
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800248e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002492:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002496:	4632      	mov	r2, r6
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fb03 f302 	mul.w	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	441a      	add	r2, r3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	ed93 7a00 	vldr	s14, [r3]
 80024ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80024b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80024be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024c2:	462a      	mov	r2, r5
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fb03 f302 	mul.w	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	441a      	add	r2, r3
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < (i+1); j++) {
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	3301      	adds	r3, #1
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	f6ff af7b 	blt.w	80023e2 <cholesky+0x68>
    for (int i = 0; i < n; i++)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	f6ff af70 	blt.w	80023dc <cholesky+0x62>
        }
}
 80024fc:	bf00      	nop
 80024fe:	372c      	adds	r7, #44	; 0x2c
 8002500:	46bd      	mov	sp, r7
 8002502:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002504 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8002504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002508:	b090      	sub	sp, #64	; 0x40
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	ed87 0a00 	vstr	s0, [r7]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1e5a      	subs	r2, r3, #1
 800251a:	63ba      	str	r2, [r7, #56]	; 0x38
 800251c:	4619      	mov	r1, r3
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	f04f 0400 	mov.w	r4, #0
 800252a:	0154      	lsls	r4, r2, #5
 800252c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002530:	014b      	lsls	r3, r1, #5
 8002532:	68fd      	ldr	r5, [r7, #12]
 8002534:	1e6b      	subs	r3, r5, #1
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002538:	462b      	mov	r3, r5
 800253a:	4619      	mov	r1, r3
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	f04f 0400 	mov.w	r4, #0
 8002548:	0154      	lsls	r4, r2, #5
 800254a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800254e:	014b      	lsls	r3, r1, #5
 8002550:	466b      	mov	r3, sp
 8002552:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	68fe      	ldr	r6, [r7, #12]
 8002558:	1e43      	subs	r3, r0, #1
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
 800255c:	4603      	mov	r3, r0
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	f04f 0400 	mov.w	r4, #0
 800256c:	0154      	lsls	r4, r2, #5
 800256e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002572:	014b      	lsls	r3, r1, #5
 8002574:	4603      	mov	r3, r0
 8002576:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800257a:	1e73      	subs	r3, r6, #1
 800257c:	623b      	str	r3, [r7, #32]
 800257e:	4603      	mov	r3, r0
 8002580:	4619      	mov	r1, r3
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	4633      	mov	r3, r6
 8002588:	f04f 0400 	mov.w	r4, #0
 800258c:	fb03 fe02 	mul.w	lr, r3, r2
 8002590:	fb01 fc04 	mul.w	ip, r1, r4
 8002594:	44f4      	add	ip, lr
 8002596:	fba1 3403 	umull	r3, r4, r1, r3
 800259a:	eb0c 0204 	add.w	r2, ip, r4
 800259e:	4614      	mov	r4, r2
 80025a0:	f04f 0100 	mov.w	r1, #0
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	0162      	lsls	r2, r4, #5
 80025aa:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80025ae:	0159      	lsls	r1, r3, #5
 80025b0:	4603      	mov	r3, r0
 80025b2:	4619      	mov	r1, r3
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	4633      	mov	r3, r6
 80025ba:	f04f 0400 	mov.w	r4, #0
 80025be:	fb03 fe02 	mul.w	lr, r3, r2
 80025c2:	fb01 fc04 	mul.w	ip, r1, r4
 80025c6:	44f4      	add	ip, lr
 80025c8:	fba1 3403 	umull	r3, r4, r1, r3
 80025cc:	eb0c 0204 	add.w	r2, ip, r4
 80025d0:	4614      	mov	r4, r2
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	0162      	lsls	r2, r4, #5
 80025dc:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80025e0:	0159      	lsls	r1, r3, #5
 80025e2:	4603      	mov	r3, r0
 80025e4:	4632      	mov	r2, r6
 80025e6:	fb02 f303 	mul.w	r3, r2, r3
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3303      	adds	r3, #3
 80025ee:	3307      	adds	r3, #7
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	ebad 0d03 	sub.w	sp, sp, r3
 80025f8:	466b      	mov	r3, sp
 80025fa:	3303      	adds	r3, #3
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8002602:	69f8      	ldr	r0, [r7, #28]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	461a      	mov	r2, r3
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	f010 f805 	bl	8012620 <memcpy>
    for (int i = 0; i < n; i++) {
 8002616:	2300      	movs	r3, #0
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
 800261a:	e022      	b.n	8002662 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 800261c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002624:	fb01 f103 	mul.w	r1, r1, r3
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	440b      	add	r3, r1
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	ed93 7a00 	vldr	s14, [r3]
 8002634:	edd7 6a00 	vldr	s13, [r7]
 8002638:	edd7 7a00 	vldr	s15, [r7]
 800263c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002640:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8002644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800264c:	fb01 f103 	mul.w	r1, r1, r3
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	440b      	add	r3, r1
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	3301      	adds	r3, #1
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
 8002662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	429a      	cmp	r2, r3
 8002668:	dbd8      	blt.n	800261c <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	68fe      	ldr	r6, [r7, #12]
 800266e:	466b      	mov	r3, sp
 8002670:	469a      	mov	sl, r3
 8002672:	1e43      	subs	r3, r0, #1
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	4603      	mov	r3, r0
 8002678:	4619      	mov	r1, r3
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	f04f 0400 	mov.w	r4, #0
 8002686:	0154      	lsls	r4, r2, #5
 8002688:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800268c:	014b      	lsls	r3, r1, #5
 800268e:	4603      	mov	r3, r0
 8002690:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002694:	1e73      	subs	r3, r6, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	4603      	mov	r3, r0
 800269a:	4619      	mov	r1, r3
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	4633      	mov	r3, r6
 80026a2:	f04f 0400 	mov.w	r4, #0
 80026a6:	fb03 fe02 	mul.w	lr, r3, r2
 80026aa:	fb01 fc04 	mul.w	ip, r1, r4
 80026ae:	44f4      	add	ip, lr
 80026b0:	fba1 3403 	umull	r3, r4, r1, r3
 80026b4:	eb0c 0204 	add.w	r2, ip, r4
 80026b8:	4614      	mov	r4, r2
 80026ba:	f04f 0100 	mov.w	r1, #0
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	0162      	lsls	r2, r4, #5
 80026c4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80026c8:	0159      	lsls	r1, r3, #5
 80026ca:	4603      	mov	r3, r0
 80026cc:	4619      	mov	r1, r3
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	4633      	mov	r3, r6
 80026d4:	f04f 0400 	mov.w	r4, #0
 80026d8:	fb03 fe02 	mul.w	lr, r3, r2
 80026dc:	fb01 fc04 	mul.w	ip, r1, r4
 80026e0:	44f4      	add	ip, lr
 80026e2:	fba1 3403 	umull	r3, r4, r1, r3
 80026e6:	eb0c 0204 	add.w	r2, ip, r4
 80026ea:	4614      	mov	r4, r2
 80026ec:	f04f 0100 	mov.w	r1, #0
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	0162      	lsls	r2, r4, #5
 80026f6:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80026fa:	0159      	lsls	r1, r3, #5
 80026fc:	4603      	mov	r3, r0
 80026fe:	4632      	mov	r2, r6
 8002700:	fb02 f303 	mul.w	r3, r2, r3
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	3303      	adds	r3, #3
 8002708:	3307      	adds	r3, #7
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	ebad 0d03 	sub.w	sp, sp, r3
 8002712:	466b      	mov	r3, sp
 8002714:	3303      	adds	r3, #3
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4619      	mov	r1, r3
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f7ff fe29 	bl	800237a <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4619      	mov	r1, r3
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7ff fd92 	bl	8002256 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	461a      	mov	r2, r3
 800273e:	2100      	movs	r1, #0
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f00f ff78 	bl	8012636 <memset>
    for(int i = 0; i < n; i++){
 8002746:	2300      	movs	r3, #0
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800274a:	e04e      	b.n	80027ea <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 800274c:	2300      	movs	r3, #0
 800274e:	633b      	str	r3, [r7, #48]	; 0x30
 8002750:	e044      	b.n	80027dc <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8002752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002756:	4293      	cmp	r3, r2
 8002758:	bfb8      	it	lt
 800275a:	4613      	movlt	r3, r2
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
 800275e:	e036      	b.n	80027ce <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8002760:	462a      	mov	r2, r5
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	fb03 f302 	mul.w	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	441a      	add	r2, r3
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	ed93 7a00 	vldr	s14, [r3]
 8002778:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002780:	fb01 f103 	mul.w	r1, r1, r3
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	440b      	add	r3, r1
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	edd3 6a00 	vldr	s13, [r3]
 8002790:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002798:	fb01 f103 	mul.w	r1, r1, r3
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	440b      	add	r3, r1
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ac:	462a      	mov	r2, r5
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	fb03 f302 	mul.w	r3, r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	441a      	add	r2, r3
 80027ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 80027c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ca:	3301      	adds	r3, #1
 80027cc:	637b      	str	r3, [r7, #52]	; 0x34
 80027ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	dbc4      	blt.n	8002760 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	3301      	adds	r3, #1
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
 80027dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	dbb6      	blt.n	8002752 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e6:	3301      	adds	r3, #1
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	dbac      	blt.n	800274c <cholesky_inverse+0x248>
 80027f2:	46d5      	mov	sp, sl
 80027f4:	46cd      	mov	sp, r9
            }
        }
    }
}
 80027f6:	bf00      	nop
 80027f8:	3740      	adds	r7, #64	; 0x40
 80027fa:	46bd      	mov	sp, r7
 80027fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002800 <AcquireMutex>:
 *      Author: Jonas
 */
#include "Util/mutex.h"
#include "Sim_Con/env.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 8002800:	b510      	push	{r4, lr}
	osStatus_t status = osOK;
	status = osMutexAcquire(custom_mutex->mutex, 10);
 8002802:	210a      	movs	r1, #10
osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 8002804:	4604      	mov	r4, r0
	status = osMutexAcquire(custom_mutex->mutex, 10);
 8002806:	6800      	ldr	r0, [r0, #0]
 8002808:	f00d fab0 	bl	800fd6c <osMutexAcquire>
	if(status == osOK){
 800280c:	b910      	cbnz	r0, 8002814 <AcquireMutex+0x14>
		custom_mutex->counter++;
 800280e:	6863      	ldr	r3, [r4, #4]
 8002810:	3301      	adds	r3, #1
 8002812:	6063      	str	r3, [r4, #4]
	}

	return status;
}
 8002814:	bd10      	pop	{r4, pc}

08002816 <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
	return osMutexRelease(custom_mutex->mutex);
 8002816:	6800      	ldr	r0, [r0, #0]
 8002818:	f00d bad8 	b.w	800fdcc <osMutexRelease>

0800281c <ReadMutex>:
}

osStatus_t ReadMutex(custom_mutex_t *custom_mutex,void const* global_data, void* const local_data, int32_t size){
 800281c:	b570      	push	{r4, r5, r6, lr}
 800281e:	b09a      	sub	sp, #104	; 0x68
 8002820:	461c      	mov	r4, r3
 8002822:	460e      	mov	r6, r1
 8002824:	4615      	mov	r5, r2
	uint8_t buffer[100] = { 0 };
 8002826:	2100      	movs	r1, #0
 8002828:	2264      	movs	r2, #100	; 0x64
 800282a:	a801      	add	r0, sp, #4
 800282c:	f00f ff03 	bl	8012636 <memset>
	uint32_t counter = custom_mutex->counter;
	osStatus_t status = osError;
	for(int i = 0; i < 5; i++){
		memcpy(&buffer[0], global_data, size);
 8002830:	4622      	mov	r2, r4
 8002832:	4631      	mov	r1, r6
 8002834:	a801      	add	r0, sp, #4
 8002836:	f00f fef3 	bl	8012620 <memcpy>
		if(custom_mutex->counter == counter){
			memcpy(local_data, buffer, size);
 800283a:	4622      	mov	r2, r4
 800283c:	a901      	add	r1, sp, #4
 800283e:	4628      	mov	r0, r5
 8002840:	f00f feee 	bl	8012620 <memcpy>
			break;
		}
		counter = custom_mutex->counter;
	}
	return status;
}
 8002844:	2000      	movs	r0, #0
 8002846:	b01a      	add	sp, #104	; 0x68
 8002848:	bd70      	pop	{r4, r5, r6, pc}
 800284a:	0000      	movs	r0, r0
 800284c:	0000      	movs	r0, r0
	...

08002850 <ReadMutexStateEst>:
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
		Placeholder_timestamps[0] = baro->ts;
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
		Placeholder_timestamps[1] = imu->ts;
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 8002850:	edd1 7a01 	vldr	s15, [r1, #4]
 8002854:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80028c0 <ReadMutexStateEst+0x70>
 8002858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 800285c:	b570      	push	{r4, r5, r6, lr}
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 800285e:	eec7 6a86 	vdiv.f32	s13, s15, s12
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8002862:	f9b2 400a 	ldrsh.w	r4, [r2, #10]
		Placeholder_measurement[0] = (float) (baro->pressure);
 8002866:	edd1 7a00 	vldr	s15, [r1]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 800286a:	ee07 4a10 	vmov	s14, r4
osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 800286e:	9804      	ldr	r0, [sp, #16]
 8002870:	240c      	movs	r4, #12
		Placeholder_timestamps[1] = imu->ts;
 8002872:	68d5      	ldr	r5, [r2, #12]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 8002874:	1e42      	subs	r2, r0, #1
		Placeholder_timestamps[0] = baro->ts;
 8002876:	688e      	ldr	r6, [r1, #8]
		Placeholder_measurement[0] = (float) (baro->pressure);
 8002878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800287c:	fb04 3000 	mla	r0, r4, r0, r3
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8002880:	eeba 7acb 	vcvt.f32.s32	s14, s14, #10
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8002884:	211c      	movs	r1, #28
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8002886:	fb04 3402 	mla	r4, r4, r2, r3
		Placeholder_measurement[0] = (float) (baro->pressure);
 800288a:	ed40 7a03 	vstr	s15, [r0, #-12]
			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 800288e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002892:	fb01 3302 	mla	r3, r1, r2, r3
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 8002896:	ed40 6a02 	vstr	s13, [r0, #-8]
		counter = custom_mutex->counter;
	}


	return status;
}
 800289a:	2000      	movs	r0, #0
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 800289c:	60a6      	str	r6, [r4, #8]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 800289e:	63dd      	str	r5, [r3, #60]	; 0x3c
			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 80028a0:	ed9f 6b05 	vldr	d6, [pc, #20]	; 80028b8 <ReadMutexStateEst+0x68>
 80028a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80028a8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80028ac:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
}
 80028b0:	bd70      	pop	{r4, r5, r6, pc}
 80028b2:	bf00      	nop
 80028b4:	f3af 8000 	nop.w
 80028b8:	51eb851f 	.word	0x51eb851f
 80028bc:	40239eb8 	.word	0x40239eb8
 80028c0:	42c80000 	.word	0x42c80000

080028c4 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 80028c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c6:	b0b1      	sub	sp, #196	; 0xc4
 80028c8:	4615      	mov	r5, r2
 80028ca:	4606      	mov	r6, r0
 80028cc:	460f      	mov	r7, r1
	log_entry_t log_entry = { 0 };
 80028ce:	2296      	movs	r2, #150	; 0x96
 80028d0:	2100      	movs	r1, #0
 80028d2:	a80a      	add	r0, sp, #40	; 0x28
		sensor_type_e sensor_type, void *sensor_data) {
 80028d4:	461c      	mov	r4, r3
	log_entry_t log_entry = { 0 };
 80028d6:	f00f feae 	bl	8012636 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 80028da:	2301      	movs	r3, #1
 80028dc:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <logSensor+0x108>)
 80028de:	2196      	movs	r1, #150	; 0x96
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	a80a      	add	r0, sp, #40	; 0x28
 80028e4:	4633      	mov	r3, r6
 80028e6:	e9cd 7501 	strd	r7, r5, [sp, #4]
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 80028ea:	3d01      	subs	r5, #1
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 80028ec:	f00f ff64 	bl	80127b8 <sniprintf>
			battery_data->battery, battery_data->consumption,
			battery_data->current, battery_data->supply);
	}
		break;
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 80028f0:	a80a      	add	r0, sp, #40	; 0x28
	switch (sensor_type) {
 80028f2:	2d03      	cmp	r5, #3
 80028f4:	d861      	bhi.n	80029ba <logSensor+0xf6>
 80028f6:	e8df f005 	tbb	[pc, r5]
 80028fa:	1802      	.short	0x1802
 80028fc:	5034      	.short	0x5034
		snprintf(log_entry.str + strlen(log_entry.str),
 80028fe:	f7fd fcef 	bl	80002e0 <strlen>
 8002902:	68a3      	ldr	r3, [r4, #8]
 8002904:	4a32      	ldr	r2, [pc, #200]	; (80029d0 <logSensor+0x10c>)
 8002906:	2196      	movs	r1, #150	; 0x96
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	6863      	ldr	r3, [r4, #4]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	ac0a      	add	r4, sp, #40	; 0x28
 8002912:	4420      	add	r0, r4
 8002914:	f00f ff50 	bl	80127b8 <sniprintf>
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002918:	2300      	movs	r3, #0
 800291a:	482e      	ldr	r0, [pc, #184]	; (80029d4 <logSensor+0x110>)
 800291c:	a90a      	add	r1, sp, #40	; 0x28
 800291e:	461a      	mov	r2, r3
 8002920:	6800      	ldr	r0, [r0, #0]
 8002922:	f00d fbad 	bl	8010080 <osMessageQueuePut>
}
 8002926:	b031      	add	sp, #196	; 0xc4
 8002928:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintf(log_entry.str + strlen(log_entry.str),
 800292a:	f7fd fcd9 	bl	80002e0 <strlen>
 800292e:	68e2      	ldr	r2, [r4, #12]
 8002930:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8002934:	2196      	movs	r1, #150	; 0x96
 8002936:	9205      	str	r2, [sp, #20]
 8002938:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800293c:	9204      	str	r2, [sp, #16]
 800293e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8002942:	9203      	str	r2, [sp, #12]
 8002944:	f9b4 2000 	ldrsh.w	r2, [r4]
 8002948:	9202      	str	r2, [sp, #8]
 800294a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800294e:	9201      	str	r2, [sp, #4]
 8002950:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8002954:	ac0a      	add	r4, sp, #40	; 0x28
 8002956:	9200      	str	r2, [sp, #0]
 8002958:	4420      	add	r0, r4
 800295a:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <logSensor+0x114>)
 800295c:	f00f ff2c 	bl	80127b8 <sniprintf>
		break;
 8002960:	e7da      	b.n	8002918 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 8002962:	f7fd fcbd 	bl	80002e0 <strlen>
 8002966:	8be3      	ldrh	r3, [r4, #30]
 8002968:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <logSensor+0x118>)
 800296a:	2196      	movs	r1, #150	; 0x96
 800296c:	9308      	str	r3, [sp, #32]
 800296e:	8c23      	ldrh	r3, [r4, #32]
 8002970:	9307      	str	r3, [sp, #28]
 8002972:	7b23      	ldrb	r3, [r4, #12]
 8002974:	9306      	str	r3, [sp, #24]
 8002976:	69a3      	ldr	r3, [r4, #24]
 8002978:	9305      	str	r3, [sp, #20]
 800297a:	7d23      	ldrb	r3, [r4, #20]
 800297c:	9304      	str	r3, [sp, #16]
 800297e:	6923      	ldr	r3, [r4, #16]
 8002980:	9303      	str	r3, [sp, #12]
 8002982:	7b63      	ldrb	r3, [r4, #13]
 8002984:	9302      	str	r3, [sp, #8]
 8002986:	68a3      	ldr	r3, [r4, #8]
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	6863      	ldr	r3, [r4, #4]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	ac0a      	add	r4, sp, #40	; 0x28
 8002992:	4420      	add	r0, r4
 8002994:	f00f ff10 	bl	80127b8 <sniprintf>
		break;
 8002998:	e7be      	b.n	8002918 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 800299a:	f7fd fca1 	bl	80002e0 <strlen>
 800299e:	8822      	ldrh	r2, [r4, #0]
 80029a0:	8863      	ldrh	r3, [r4, #2]
 80029a2:	2196      	movs	r1, #150	; 0x96
 80029a4:	9202      	str	r2, [sp, #8]
 80029a6:	88a2      	ldrh	r2, [r4, #4]
 80029a8:	9201      	str	r2, [sp, #4]
 80029aa:	88e2      	ldrh	r2, [r4, #6]
 80029ac:	ac0a      	add	r4, sp, #40	; 0x28
 80029ae:	9200      	str	r2, [sp, #0]
 80029b0:	4420      	add	r0, r4
 80029b2:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <logSensor+0x11c>)
 80029b4:	f00f ff00 	bl	80127b8 <sniprintf>
		break;
 80029b8:	e7ae      	b.n	8002918 <logSensor+0x54>
		snprintf(log_entry.str + strlen(log_entry.str),
 80029ba:	f7fd fc91 	bl	80002e0 <strlen>
 80029be:	ab0a      	add	r3, sp, #40	; 0x28
 80029c0:	4908      	ldr	r1, [pc, #32]	; (80029e4 <logSensor+0x120>)
 80029c2:	4418      	add	r0, r3
 80029c4:	f00f ff2c 	bl	8012820 <strcpy>
		break;
 80029c8:	e7a6      	b.n	8002918 <logSensor+0x54>
 80029ca:	bf00      	nop
 80029cc:	080144bb 	.word	0x080144bb
 80029d0:	080144ca 	.word	0x080144ca
 80029d4:	2401a27c 	.word	0x2401a27c
 80029d8:	080144d7 	.word	0x080144d7
 80029dc:	080144f4 	.word	0x080144f4
 80029e0:	0801451a 	.word	0x0801451a
 80029e4:	0801452b 	.word	0x0801452b

080029e8 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 80029e8:	b530      	push	{r4, r5, lr}
 80029ea:	b0ad      	sub	sp, #180	; 0xb4
 80029ec:	4605      	mov	r5, r0
	log_entry_t log_entry = { 0 };
 80029ee:	2496      	movs	r4, #150	; 0x96
osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 80029f0:	a803      	add	r0, sp, #12
 80029f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 80029f6:	4622      	mov	r2, r4
 80029f8:	2100      	movs	r1, #0
 80029fa:	a806      	add	r0, sp, #24
 80029fc:	f00f fe1b 	bl	8012636 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 8002a00:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002a04:	4621      	mov	r1, r4
 8002a06:	4a08      	ldr	r2, [pc, #32]	; (8002a28 <logRocketState+0x40>)
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	a806      	add	r0, sp, #24
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	462b      	mov	r3, r5
 8002a12:	f00f fed1 	bl	80127b8 <sniprintf>
			flight_phase_detection.flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002a16:	2300      	movs	r3, #0
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <logRocketState+0x44>)
 8002a1a:	a906      	add	r1, sp, #24
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	6800      	ldr	r0, [r0, #0]
 8002a20:	f00d fb2e 	bl	8010080 <osMessageQueuePut>
}
 8002a24:	b02d      	add	sp, #180	; 0xb4
 8002a26:	bd30      	pop	{r4, r5, pc}
 8002a28:	080144b0 	.word	0x080144b0
 8002a2c:	2401a27c 	.word	0x2401a27c

08002a30 <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8002a30:	b084      	sub	sp, #16
 8002a32:	b530      	push	{r4, r5, lr}
 8002a34:	b0ab      	sub	sp, #172	; 0xac
 8002a36:	4605      	mov	r5, r0
	log_entry_t log_entry = { 0 };
 8002a38:	2496      	movs	r4, #150	; 0x96
osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8002a3a:	a82f      	add	r0, sp, #188	; 0xbc
 8002a3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8002a40:	4622      	mov	r2, r4
 8002a42:	2100      	movs	r1, #0
 8002a44:	a804      	add	r0, sp, #16
 8002a46:	f00f fdf6 	bl	8012636 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, ESTIMATOR_VAR,
 8002a4a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <logEstimatorVar+0x50>)
 8002a50:	9303      	str	r3, [sp, #12]
 8002a52:	a804      	add	r0, sp, #16
 8002a54:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8002a56:	9302      	str	r3, [sp, #8]
 8002a58:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	462b      	mov	r3, r5
 8002a62:	f00f fea9 	bl	80127b8 <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0], estimator_data.acceleration_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002a66:	2300      	movs	r3, #0
 8002a68:	4806      	ldr	r0, [pc, #24]	; (8002a84 <logEstimatorVar+0x54>)
 8002a6a:	a904      	add	r1, sp, #16
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	6800      	ldr	r0, [r0, #0]
 8002a70:	f00d fb06 	bl	8010080 <osMessageQueuePut>
}
 8002a74:	b02b      	add	sp, #172	; 0xac
 8002a76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a7a:	b004      	add	sp, #16
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	0801448c 	.word	0x0801448c
 8002a84:	2401a27c 	.word	0x2401a27c

08002a88 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 8002a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_entry_t log_entry = { 0 };
 8002a8c:	2496      	movs	r4, #150	; 0x96
		int32_t integrated_error) {
 8002a8e:	b0aa      	sub	sp, #168	; 0xa8
 8002a90:	4605      	mov	r5, r0
 8002a92:	460e      	mov	r6, r1
 8002a94:	4617      	mov	r7, r2
	log_entry_t log_entry = { 0 };
 8002a96:	2100      	movs	r1, #0
 8002a98:	4622      	mov	r2, r4
 8002a9a:	a804      	add	r0, sp, #16
		int32_t integrated_error) {
 8002a9c:	4698      	mov	r8, r3
	log_entry_t log_entry = { 0 };
 8002a9e:	f00f fdca 	bl	8012636 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	9601      	str	r6, [sp, #4]
 8002aa8:	a804      	add	r0, sp, #16
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	462b      	mov	r3, r5
 8002aae:	4a07      	ldr	r2, [pc, #28]	; (8002acc <logControllerOutput+0x44>)
 8002ab0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8002ab4:	f00f fe80 	bl	80127b8 <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <logControllerOutput+0x48>)
 8002abc:	a904      	add	r1, sp, #16
 8002abe:	461a      	mov	r2, r3
 8002ac0:	6800      	ldr	r0, [r0, #0]
 8002ac2:	f00d fadd 	bl	8010080 <osMessageQueuePut>
}
 8002ac6:	b02a      	add	sp, #168	; 0xa8
 8002ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002acc:	0801448c 	.word	0x0801448c
 8002ad0:	2401a27c 	.word	0x2401a27c

08002ad4 <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 8002ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	log_entry_t log_entry = { 0 };
 8002ad6:	2496      	movs	r4, #150	; 0x96
osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 8002ad8:	b0ab      	sub	sp, #172	; 0xac
 8002ada:	4605      	mov	r5, r0
 8002adc:	460e      	mov	r6, r1
 8002ade:	4617      	mov	r7, r2
	log_entry_t log_entry = { 0 };
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4622      	mov	r2, r4
 8002ae4:	a804      	add	r0, sp, #16
 8002ae6:	f00f fda6 	bl	8012636 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 8002aea:	2305      	movs	r3, #5
 8002aec:	4621      	mov	r1, r4
 8002aee:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <logMotor+0x3c>)
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	a804      	add	r0, sp, #16
 8002af4:	462b      	mov	r3, r5
 8002af6:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002afa:	f00f fe5d 	bl	80127b8 <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8002afe:	2300      	movs	r3, #0
 8002b00:	4804      	ldr	r0, [pc, #16]	; (8002b14 <logMotor+0x40>)
 8002b02:	a904      	add	r1, sp, #16
 8002b04:	461a      	mov	r2, r3
 8002b06:	6800      	ldr	r0, [r0, #0]
 8002b08:	f00d faba 	bl	8010080 <osMessageQueuePut>
}
 8002b0c:	b02b      	add	sp, #172	; 0xac
 8002b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b10:	080144a0 	.word	0x080144a0
 8002b14:	2401a27c 	.word	0x2401a27c

08002b18 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8002b18:	b40f      	push	{r0, r1, r2, r3}
 8002b1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t ret = 1;
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8002b1c:	4d10      	ldr	r5, [pc, #64]	; (8002b60 <UsbPrint+0x48>)
 8002b1e:	2100      	movs	r1, #0
 8002b20:	6828      	ldr	r0, [r5, #0]
 8002b22:	f00d f923 	bl	800fd6c <osMutexAcquire>
 8002b26:	b9c0      	cbnz	r0, 8002b5a <UsbPrint+0x42>
		va_list argptr;
		va_start(argptr, format);
 8002b28:	ab07      	add	r3, sp, #28
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8002b2a:	9a06      	ldr	r2, [sp, #24]
 8002b2c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002b30:	480c      	ldr	r0, [pc, #48]	; (8002b64 <UsbPrint+0x4c>)
		va_start(argptr, format);
 8002b32:	9301      	str	r3, [sp, #4]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8002b34:	f00f fea8 	bl	8012888 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8002b38:	480a      	ldr	r0, [pc, #40]	; (8002b64 <UsbPrint+0x4c>)
 8002b3a:	f7fd fbd1 	bl	80002e0 <strlen>
 8002b3e:	b281      	uxth	r1, r0
 8002b40:	4808      	ldr	r0, [pc, #32]	; (8002b64 <UsbPrint+0x4c>)
 8002b42:	f00f fb51 	bl	80121e8 <CDC_Transmit_FS>
 8002b46:	4604      	mov	r4, r0
		osMutexRelease(print_mutex);
 8002b48:	6828      	ldr	r0, [r5, #0]
 8002b4a:	f00d f93f 	bl	800fdcc <osMutexRelease>
	}
#endif
	return ret;
}
 8002b4e:	4620      	mov	r0, r4
 8002b50:	b003      	add	sp, #12
 8002b52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b56:	b004      	add	sp, #16
 8002b58:	4770      	bx	lr
	uint8_t ret = 1;
 8002b5a:	2401      	movs	r4, #1
 8002b5c:	e7f7      	b.n	8002b4e <UsbPrint+0x36>
 8002b5e:	bf00      	nop
 8002b60:	24009620 	.word	0x24009620
 8002b64:	2400893a 	.word	0x2400893a

08002b68 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b68:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002b6a:	f00f fadd 	bl	8012128 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	osDelay(5000);
 8002b6e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002b72:	f00d f87b 	bl	800fc6c <osDelay>
#if ( configUSE_TRACE_FACILITY == 1 )
	vTraceEnable(TRC_START);
#endif

	for (;;) {
		osDelay(1000);
 8002b76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b7a:	e7fa      	b.n	8002b72 <StartDefaultTask+0xa>

08002b7c <SystemClock_Config>:
{
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b80:	224c      	movs	r2, #76	; 0x4c
 8002b82:	2100      	movs	r1, #0
 8002b84:	a80a      	add	r0, sp, #40	; 0x28
 8002b86:	f00f fd56 	bl	8012636 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	a802      	add	r0, sp, #8
 8002b90:	f00f fd51 	bl	8012636 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b94:	22bc      	movs	r2, #188	; 0xbc
 8002b96:	2100      	movs	r1, #0
 8002b98:	a81d      	add	r0, sp, #116	; 0x74
 8002b9a:	f00f fd4c 	bl	8012636 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002b9e:	2002      	movs	r0, #2
 8002ba0:	f005 f988 	bl	8007eb4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <SystemClock_Config+0xf4>)
 8002baa:	699a      	ldr	r2, [r3, #24]
 8002bac:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002bb0:	619a      	str	r2, [r3, #24]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002bb8:	9201      	str	r2, [sp, #4]
 8002bba:	4a2e      	ldr	r2, [pc, #184]	; (8002c74 <SystemClock_Config+0xf8>)
 8002bbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bbe:	f041 0101 	orr.w	r1, r1, #1
 8002bc2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002bc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bc6:	f002 0201 	and.w	r2, r2, #1
 8002bca:	9201      	str	r2, [sp, #4]
 8002bcc:	9a01      	ldr	r2, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	0490      	lsls	r0, r2, #18
 8002bd2:	d5fc      	bpl.n	8002bce <SystemClock_Config+0x52>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002bd4:	4a28      	ldr	r2, [pc, #160]	; (8002c78 <SystemClock_Config+0xfc>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bd6:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bd8:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002bda:	2400      	movs	r4, #0
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002bdc:	6a93      	ldr	r3, [r2, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bde:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002be0:	f023 0303 	bic.w	r3, r3, #3
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002bee:	9615      	str	r6, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002bf0:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bf2:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002bf6:	2378      	movs	r3, #120	; 0x78
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002bf8:	e9cd 3516 	strd	r3, r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8002bfc:	2314      	movs	r3, #20
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002bfe:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002c02:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c04:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002c08:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c0c:	f005 f97e 	bl	8007f0c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c10:	223f      	movs	r2, #63	; 0x3f
 8002c12:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c14:	2104      	movs	r1, #4
 8002c16:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c18:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8002c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002c24:	e9cd 3404 	strd	r3, r4, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002c28:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002c2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002c2e:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c32:	f005 fc9b 	bl	800856c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <SystemClock_Config+0x100>)
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002c38:	21c0      	movs	r1, #192	; 0xc0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c3a:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002c3c:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002c3e:	9430      	str	r4, [sp, #192]	; 0xc0
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002c40:	9445      	str	r4, [sp, #276]	; 0x114
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002c42:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8002c46:	2313      	movs	r3, #19
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8002c48:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002c52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002c56:	e9cd 5521 	strd	r5, r5, [sp, #132]	; 0x84
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002c5a:	933e      	str	r3, [sp, #248]	; 0xf8
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002c5c:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002c60:	e9cd 443a 	strd	r4, r4, [sp, #232]	; 0xe8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c64:	f005 ff08 	bl	8008a78 <HAL_RCCEx_PeriphCLKConfig>
  HAL_PWREx_EnableUSBVoltageDetector();
 8002c68:	f005 f948 	bl	8007efc <HAL_PWREx_EnableUSBVoltageDetector>
}
 8002c6c:	b04c      	add	sp, #304	; 0x130
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	58024800 	.word	0x58024800
 8002c74:	58000400 	.word	0x58000400
 8002c78:	58024400 	.word	0x58024400
 8002c7c:	000d3003 	.word	0x000d3003

08002c80 <main>:
{
 8002c80:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002c84:	b0c1      	sub	sp, #260	; 0x104
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c86:	4de4      	ldr	r5, [pc, #912]	; (8003018 <main+0x398>)
  HAL_Init();
 8002c88:	f002 faae 	bl	80051e8 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8e:	ae39      	add	r6, sp, #228	; 0xe4
  SystemClock_Config();
 8002c90:	f7ff ff74 	bl	8002b7c <SystemClock_Config>
	init_env(&global_env);
 8002c94:	48e1      	ldr	r0, [pc, #900]	; (800301c <main+0x39c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c96:	2701      	movs	r7, #1
	init_env(&global_env);
 8002c98:	f7fe faaa 	bl	80011f0 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8002c9c:	48e0      	ldr	r0, [pc, #896]	; (8003020 <main+0x3a0>)
 8002c9e:	f7fe fcb5 	bl	800160c <reset_flight_phase_detection>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca2:	2214      	movs	r2, #20
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	f00f fcc5 	bl	8012636 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|CAMERA1_Pin|CAMERA2_Pin, GPIO_PIN_RESET);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f641 0110 	movw	r1, #6160	; 0x1810
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cb6:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|CAMERA1_Pin|CAMERA2_Pin, GPIO_PIN_RESET);
 8002cba:	48da      	ldr	r0, [pc, #872]	; (8003024 <main+0x3a4>)
  hadc1.Instance = ADC1;
 8002cbc:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8003068 <main+0x3e8>
  ADC_MultiModeTypeDef multimode = {0};
 8002cc0:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cc4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cc8:	f04f 0b07 	mov.w	fp, #7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ccc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  huart4.Instance = UART4;
 8002cd0:	f8df a398 	ldr.w	sl, [pc, #920]	; 800306c <main+0x3ec>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	9303      	str	r3, [sp, #12]
 8002cda:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cdc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002ce8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	9304      	str	r3, [sp, #16]
 8002cf2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cf4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfc:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002d00:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	9305      	str	r3, [sp, #20]
 8002d0a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002d18:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	9306      	str	r3, [sp, #24]
 8002d22:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d24:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002d30:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	9307      	str	r3, [sp, #28]
 8002d3a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d3c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002d48:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	9308      	str	r3, [sp, #32]
 8002d52:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|CAMERA1_Pin|CAMERA2_Pin, GPIO_PIN_RESET);
 8002d54:	f004 fbb0 	bl	80074b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	48b2      	ldr	r0, [pc, #712]	; (8003028 <main+0x3a8>)
 8002d5e:	f004 fbab 	bl	80074b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin
 8002d62:	2200      	movs	r2, #0
 8002d64:	f643 0103 	movw	r1, #14339	; 0x3803
 8002d68:	48b0      	ldr	r0, [pc, #704]	; (800302c <main+0x3ac>)
 8002d6a:	f004 fba5 	bl	80074b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6e:	f641 0310 	movw	r3, #6160	; 0x1810
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d72:	4631      	mov	r1, r6
 8002d74:	48ab      	ldr	r0, [pc, #684]	; (8003024 <main+0x3a4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d76:	e9cd 3739 	strd	r3, r7, [sp, #228]	; 0xe4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d7e:	f004 faab 	bl	80072d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8002d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8002d86:	4631      	mov	r1, r6
 8002d88:	48a9      	ldr	r0, [pc, #676]	; (8003030 <main+0x3b0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	943b      	str	r4, [sp, #236]	; 0xec
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d8c:	e9cd 3439 	strd	r3, r4, [sp, #228]	; 0xe4
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8002d90:	f004 faa2 	bl	80072d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PW_HOLD_Pin;
 8002d94:	2302      	movs	r3, #2
  HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002d96:	4631      	mov	r1, r6
 8002d98:	48a3      	ldr	r0, [pc, #652]	; (8003028 <main+0x3a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9a:	e9cd 3739 	strd	r3, r7, [sp, #228]	; 0xe4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9e:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
  HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002da2:	f004 fa99 	bl	80072d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin
 8002da6:	f643 0303 	movw	r3, #14339	; 0x3803
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002daa:	4631      	mov	r1, r6
 8002dac:	489f      	ldr	r0, [pc, #636]	; (800302c <main+0x3ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dae:	e9cd 3739 	strd	r3, r7, [sp, #228]	; 0xe4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002db6:	f004 fa8f 	bl	80072d8 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dba:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dc2:	f043 0302 	orr.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002dc6:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dc8:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8002dcc:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002dd8:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 8002ddc:	433b      	orrs	r3, r7
 8002dde:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8002de2:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002de6:	2504      	movs	r5, #4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002de8:	403b      	ands	r3, r7
 8002dea:	9302      	str	r3, [sp, #8]
 8002dec:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002dee:	f003 f8b1 	bl	8005f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002df2:	200b      	movs	r0, #11
 8002df4:	f003 f8e0 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002df8:	4622      	mov	r2, r4
 8002dfa:	2105      	movs	r1, #5
 8002dfc:	200c      	movs	r0, #12
 8002dfe:	f003 f8a9 	bl	8005f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002e02:	200c      	movs	r0, #12
 8002e04:	f003 f8d8 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002e08:	4622      	mov	r2, r4
 8002e0a:	2105      	movs	r1, #5
 8002e0c:	200d      	movs	r0, #13
 8002e0e:	f003 f8a1 	bl	8005f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002e12:	200d      	movs	r0, #13
 8002e14:	f003 f8d0 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002e18:	4622      	mov	r2, r4
 8002e1a:	2105      	movs	r1, #5
 8002e1c:	200e      	movs	r0, #14
 8002e1e:	f003 f899 	bl	8005f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002e22:	200e      	movs	r0, #14
 8002e24:	f003 f8c8 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002e28:	4622      	mov	r2, r4
 8002e2a:	2105      	movs	r1, #5
 8002e2c:	200f      	movs	r0, #15
 8002e2e:	f003 f891 	bl	8005f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002e32:	200f      	movs	r0, #15
 8002e34:	f003 f8c0 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002e38:	4622      	mov	r2, r4
 8002e3a:	2105      	movs	r1, #5
 8002e3c:	2010      	movs	r0, #16
 8002e3e:	f003 f889 	bl	8005f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002e42:	2010      	movs	r0, #16
 8002e44:	f003 f8b8 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002e48:	4622      	mov	r2, r4
 8002e4a:	2105      	movs	r1, #5
 8002e4c:	2011      	movs	r0, #17
 8002e4e:	f003 f881 	bl	8005f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002e52:	2011      	movs	r0, #17
 8002e54:	f003 f8b0 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002e58:	4622      	mov	r2, r4
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	202f      	movs	r0, #47	; 0x2f
 8002e5e:	f003 f879 	bl	8005f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002e62:	202f      	movs	r0, #47	; 0x2f
 8002e64:	f003 f8a8 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8002e68:	4622      	mov	r2, r4
 8002e6a:	2105      	movs	r1, #5
 8002e6c:	203c      	movs	r0, #60	; 0x3c
 8002e6e:	f003 f871 	bl	8005f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002e72:	203c      	movs	r0, #60	; 0x3c
 8002e74:	f003 f8a0 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e78:	4621      	mov	r1, r4
 8002e7a:	221c      	movs	r2, #28
 8002e7c:	4630      	mov	r0, r6
  ADC_MultiModeTypeDef multimode = {0};
 8002e7e:	9437      	str	r4, [sp, #220]	; 0xdc
 8002e80:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e84:	f00f fbd7 	bl	8012636 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002e88:	4a6a      	ldr	r2, [pc, #424]	; (8003034 <main+0x3b4>)
 8002e8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e8e:	4648      	mov	r0, r9
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e90:	f8c9 5010 	str.w	r5, [r9, #16]
  hadc1.Init.NbrOfConversion = 4;
 8002e94:	f8c9 5018 	str.w	r5, [r9, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e98:	f889 4014 	strb.w	r4, [r9, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e9c:	f889 7015 	strb.w	r7, [r9, #21]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ea0:	f889 401c 	strb.w	r4, [r9, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002ea4:	f8c9 4034 	str.w	r4, [r9, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002ea8:	f889 4038 	strb.w	r4, [r9, #56]	; 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002eac:	e9c9 2300 	strd	r2, r3, [r9]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002eb0:	e9c9 4702 	strd	r4, r7, [r9, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002eb4:	e9c9 4409 	strd	r4, r4, [r9, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002eb8:	e9c9 440b 	strd	r4, r4, [r9, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ebc:	f002 fe86 	bl	8005bcc <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	4648      	mov	r0, r9
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002ec4:	9435      	str	r4, [sp, #212]	; 0xd4
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002ec6:	f002 ff95 	bl	8005df4 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002eca:	2306      	movs	r3, #6
 8002ecc:	495a      	ldr	r1, [pc, #360]	; (8003038 <main+0x3b8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ece:	4648      	mov	r0, r9
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8002ed0:	933b      	str	r3, [sp, #236]	; 0xec
  sConfig.Offset = 0;
 8002ed2:	943e      	str	r4, [sp, #248]	; 0xf8
  sConfig.OffsetSignedSaturation = DISABLE;
 8002ed4:	f88d 40fd 	strb.w	r4, [sp, #253]	; 0xfd
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ed8:	e9cd 1339 	strd	r1, r3, [sp, #228]	; 0xe4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002edc:	f240 73ff 	movw	r3, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ee0:	4631      	mov	r1, r6
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ee2:	e9cd 353c 	strd	r3, r5, [sp, #240]	; 0xf0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ee6:	f002 fa39 	bl	800535c <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002eea:	250c      	movs	r5, #12
 8002eec:	4b53      	ldr	r3, [pc, #332]	; (800303c <main+0x3bc>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002eee:	4631      	mov	r1, r6
 8002ef0:	4648      	mov	r0, r9
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002ef2:	e9cd 3539 	strd	r3, r5, [sp, #228]	; 0xe4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ef6:	f002 fa31 	bl	800535c <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002efa:	2312      	movs	r3, #18
 8002efc:	4850      	ldr	r0, [pc, #320]	; (8003040 <main+0x3c0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002efe:	4631      	mov	r1, r6
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002f00:	e9cd 0339 	strd	r0, r3, [sp, #228]	; 0xe4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f04:	4648      	mov	r0, r9
 8002f06:	f002 fa29 	bl	800535c <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002f0a:	f8df c164 	ldr.w	ip, [pc, #356]	; 8003070 <main+0x3f0>
 8002f0e:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f10:	4631      	mov	r1, r6
 8002f12:	4648      	mov	r0, r9
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f14:	f44f 2980 	mov.w	r9, #262144	; 0x40000
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002f18:	e9cd c339 	strd	ip, r3, [sp, #228]	; 0xe4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f1c:	f002 fa1e 	bl	800535c <HAL_ADC_ConfigChannel>
  hsd1.Instance = SDMMC1;
 8002f20:	4b48      	ldr	r3, [pc, #288]	; (8003044 <main+0x3c4>)
 8002f22:	4a49      	ldr	r2, [pc, #292]	; (8003048 <main+0x3c8>)
  hspi1.Instance = SPI1;
 8002f24:	4849      	ldr	r0, [pc, #292]	; (800304c <main+0x3cc>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002f26:	609c      	str	r4, [r3, #8]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002f28:	e9c3 2400 	strd	r2, r4, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002f2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8002f30:	e9c3 4705 	strd	r4, r7, [r3, #20]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002f34:	e9c3 2403 	strd	r2, r4, [r3, #12]
  hspi1.Instance = SPI1;
 8002f38:	4b45      	ldr	r3, [pc, #276]	; (8003050 <main+0x3d0>)
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002f3a:	e9c0 3400 	strd	r3, r4, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f42:	e9c0 9b02 	strd	r9, fp, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f46:	6183      	str	r3, [r0, #24]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f48:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f4c:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 8002f50:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002f54:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f58:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002f5c:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f60:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002f64:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f68:	f007 fb60 	bl	800a62c <HAL_SPI_Init>
  hspi2.Instance = SPI2;
 8002f6c:	4839      	ldr	r0, [pc, #228]	; (8003054 <main+0x3d4>)
 8002f6e:	4b3a      	ldr	r3, [pc, #232]	; (8003058 <main+0x3d8>)
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002f70:	e9c0 3400 	strd	r3, r4, [r0]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f78:	e9c0 9b02 	strd	r9, fp, [r0, #8]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f7c:	6183      	str	r3, [r0, #24]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f7e:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f82:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi2.Init.CRCPolynomial = 0x0;
 8002f86:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002f8a:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f8e:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002f92:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f96:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002f9a:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f9e:	f007 fb45 	bl	800a62c <HAL_SPI_Init>
  hspi3.Instance = SPI3;
 8002fa2:	482e      	ldr	r0, [pc, #184]	; (800305c <main+0x3dc>)
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <main+0x3e0>)
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8002fa6:	e9c0 3400 	strd	r3, r4, [r0]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002faa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fae:	e9c0 9b02 	strd	r9, fp, [r0, #8]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002fb2:	6183      	str	r3, [r0, #24]
  huart4.Init.BaudRate = 115200;
 8002fb4:	f44f 39e1 	mov.w	r9, #115200	; 0x1c200
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fb8:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fbc:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi3.Init.CRCPolynomial = 0x0;
 8002fc0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002fc4:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002fc8:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002fcc:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002fd0:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002fd4:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002fd8:	f007 fb28 	bl	800a62c <HAL_SPI_Init>
  huart4.Init.BaudRate = 115200;
 8002fdc:	4a21      	ldr	r2, [pc, #132]	; (8003064 <main+0x3e4>)
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002fde:	4650      	mov	r0, sl
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fe0:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  huart4.Init.BaudRate = 115200;
 8002fe4:	e9ca 2900 	strd	r2, r9, [sl]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002fe8:	e9ca 4504 	strd	r4, r5, [sl, #16]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002fec:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff0:	e9ca 4406 	strd	r4, r4, [sl, #24]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ff4:	e9ca 4408 	strd	r4, r4, [sl, #32]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ff8:	f009 f989 	bl	800c30e <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4650      	mov	r0, sl
 8003000:	f009 fa07 	bl	800c412 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003004:	4621      	mov	r1, r4
 8003006:	4650      	mov	r0, sl
 8003008:	f009 fa27 	bl	800c45a <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800300c:	4650      	mov	r0, sl
  huart7.Instance = UART7;
 800300e:	f8df a064 	ldr.w	sl, [pc, #100]	; 8003074 <main+0x3f4>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003012:	f009 f9e3 	bl	800c3dc <HAL_UARTEx_DisableFifoMode>
 8003016:	e02f      	b.n	8003078 <main+0x3f8>
 8003018:	58024400 	.word	0x58024400
 800301c:	24000214 	.word	0x24000214
 8003020:	24000224 	.word	0x24000224
 8003024:	58021000 	.word	0x58021000
 8003028:	58020400 	.word	0x58020400
 800302c:	58020c00 	.word	0x58020c00
 8003030:	58020800 	.word	0x58020800
 8003034:	40022000 	.word	0x40022000
 8003038:	21800100 	.word	0x21800100
 800303c:	25b00200 	.word	0x25b00200
 8003040:	2a000400 	.word	0x2a000400
 8003044:	2400bb1c 	.word	0x2400bb1c
 8003048:	52007000 	.word	0x52007000
 800304c:	2401a1f4 	.word	0x2401a1f4
 8003050:	40013000 	.word	0x40013000
 8003054:	24009768 	.word	0x24009768
 8003058:	40003800 	.word	0x40003800
 800305c:	2400dc70 	.word	0x2400dc70
 8003060:	40003c00 	.word	0x40003c00
 8003064:	40004c00 	.word	0x40004c00
 8003068:	2400dd08 	.word	0x2400dd08
 800306c:	2401a164 	.word	0x2401a164
 8003070:	2e300800 	.word	0x2e300800
 8003074:	240097f8 	.word	0x240097f8
  huart7.Instance = UART7;
 8003078:	4acb      	ldr	r2, [pc, #812]	; (80033a8 <main+0x728>)
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800307a:	4650      	mov	r0, sl
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800307c:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  huart7.Init.BaudRate = 115200;
 8003080:	e9ca 2900 	strd	r2, r9, [sl]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003084:	e9ca 4504 	strd	r4, r5, [sl, #16]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003088:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800308c:	e9ca 4406 	strd	r4, r4, [sl, #24]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003090:	e9ca 4408 	strd	r4, r4, [sl, #32]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003094:	f009 f93b 	bl	800c30e <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003098:	4621      	mov	r1, r4
 800309a:	4650      	mov	r0, sl
 800309c:	f009 f9b9 	bl	800c412 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030a0:	4621      	mov	r1, r4
 80030a2:	4650      	mov	r0, sl
 80030a4:	f009 f9d9 	bl	800c45a <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80030a8:	4650      	mov	r0, sl
  huart1.Instance = USART1;
 80030aa:	f8df a3b4 	ldr.w	sl, [pc, #948]	; 8003460 <main+0x7e0>
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80030ae:	f009 f995 	bl	800c3dc <HAL_UARTEx_DisableFifoMode>
  huart1.Instance = USART1;
 80030b2:	4abe      	ldr	r2, [pc, #760]	; (80033ac <main+0x72c>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030b4:	4650      	mov	r0, sl
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030b6:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  huart1.Init.BaudRate = 115200;
 80030ba:	e9ca 2900 	strd	r2, r9, [sl]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030be:	e9ca 4504 	strd	r4, r5, [sl, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030c2:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c6:	e9ca 4406 	strd	r4, r4, [sl, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030ca:	e9ca 4408 	strd	r4, r4, [sl, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030ce:	f009 f91e 	bl	800c30e <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030d2:	4621      	mov	r1, r4
 80030d4:	4650      	mov	r0, sl
 80030d6:	f009 f99c 	bl	800c412 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030da:	4621      	mov	r1, r4
 80030dc:	4650      	mov	r0, sl
 80030de:	f009 f9bc 	bl	800c45a <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80030e2:	4650      	mov	r0, sl
  huart2.Instance = USART2;
 80030e4:	f8df a37c 	ldr.w	sl, [pc, #892]	; 8003464 <main+0x7e4>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80030e8:	f009 f978 	bl	800c3dc <HAL_UARTEx_DisableFifoMode>
  huart2.Instance = USART2;
 80030ec:	4ab0      	ldr	r2, [pc, #704]	; (80033b0 <main+0x730>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030ee:	4650      	mov	r0, sl
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030f0:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  huart2.Init.BaudRate = 115200;
 80030f4:	e9ca 2900 	strd	r2, r9, [sl]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030f8:	e9ca 4504 	strd	r4, r5, [sl, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030fc:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003100:	e9ca 4406 	strd	r4, r4, [sl, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003104:	e9ca 4408 	strd	r4, r4, [sl, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003108:	f009 f901 	bl	800c30e <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800310c:	4621      	mov	r1, r4
 800310e:	4650      	mov	r0, sl
 8003110:	f009 f97f 	bl	800c412 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003114:	4621      	mov	r1, r4
 8003116:	4650      	mov	r0, sl
 8003118:	f009 f99f 	bl	800c45a <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800311c:	4650      	mov	r0, sl
  huart3.Instance = USART3;
 800311e:	f8df a348 	ldr.w	sl, [pc, #840]	; 8003468 <main+0x7e8>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003122:	f009 f95b 	bl	800c3dc <HAL_UARTEx_DisableFifoMode>
  huart3.Instance = USART3;
 8003126:	4aa3      	ldr	r2, [pc, #652]	; (80033b4 <main+0x734>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003128:	4650      	mov	r0, sl
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800312a:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 800312e:	e9ca 2900 	strd	r2, r9, [sl]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003132:	e9ca 4504 	strd	r4, r5, [sl, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003136:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800313a:	e9ca 4406 	strd	r4, r4, [sl, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800313e:	e9ca 4408 	strd	r4, r4, [sl, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003142:	f009 f8e4 	bl	800c30e <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003146:	4621      	mov	r1, r4
 8003148:	4650      	mov	r0, sl
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800314a:	f04f 6980 	mov.w	r9, #67108864	; 0x4000000
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800314e:	f009 f960 	bl	800c412 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003152:	4621      	mov	r1, r4
 8003154:	4650      	mov	r0, sl
	const osMutexAttr_t sb1_mutex_attr = { "sb1_mutex_only", // human readable mutex name
 8003156:	4d98      	ldr	r5, [pc, #608]	; (80033b8 <main+0x738>)
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003158:	f009 f97f 	bl	800c45a <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800315c:	4650      	mov	r0, sl
 800315e:	f009 f93d 	bl	800c3dc <HAL_UARTEx_DisableFifoMode>
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 8003162:	f8df a308 	ldr.w	sl, [pc, #776]	; 800346c <main+0x7ec>
  MX_FATFS_Init();
 8003166:	f00a f9f1 	bl	800d54c <MX_FATFS_Init>
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800316a:	f8df e304 	ldr.w	lr, [pc, #772]	; 8003470 <main+0x7f0>
  hspi4.Instance = SPI4;
 800316e:	4893      	ldr	r0, [pc, #588]	; (80033bc <main+0x73c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003170:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003174:	e9c0 e300 	strd	lr, r3, [r0]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003178:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800317c:	e9c0 9306 	strd	r9, r3, [r0, #24]
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 8003184:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 8003474 <main+0x7f4>
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003188:	e9c0 340d 	strd	r3, r4, [r0, #52]	; 0x34
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800318c:	e9c0 4b02 	strd	r4, fp, [r0, #8]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003190:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003194:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi4.Init.CRCPolynomial = 0x0;
 8003198:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800319c:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80031a0:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80031a4:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80031a8:	e9c0 4415 	strd	r4, r4, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80031ac:	f007 fa3e 	bl	800a62c <HAL_SPI_Init>
	command_mutex_only = osMutexNew(&command_mutex_attr);
 80031b0:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 8003478 <main+0x7f8>
	MX_USB_DEVICE_Init();
 80031b4:	f00e ffb8 	bl	8012128 <MX_USB_DEVICE_Init>
  osKernelInitialize();
 80031b8:	f00c fca0 	bl	800fafc <osKernelInitialize>
	const osMutexAttr_t sb1_mutex_attr = { "sb1_mutex_only", // human readable mutex name
 80031bc:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 80031c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80031c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 80031c8:	4660      	mov	r0, ip
 80031ca:	f00c fd8d 	bl	800fce8 <osMutexNew>
 80031ce:	4b7c      	ldr	r3, [pc, #496]	; (80033c0 <main+0x740>)
	const osMutexAttr_t sb2_mutex_attr = { "sb2_mutex_only", // human readable mutex name
 80031d0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 80031d4:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t sb2_mutex_attr = { "sb2_mutex_only", // human readable mutex name
 80031d6:	f105 0310 	add.w	r3, r5, #16
 80031da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 80031e0:	4660      	mov	r0, ip
 80031e2:	f00c fd81 	bl	800fce8 <osMutexNew>
 80031e6:	4a77      	ldr	r2, [pc, #476]	; (80033c4 <main+0x744>)
	const osMutexAttr_t sb3_mutex_attr = { "sb3_mutex_only", // human readable mutex name
 80031e8:	f105 0320 	add.w	r3, r5, #32
 80031ec:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 80031f0:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t sb3_mutex_attr = { "sb3_mutex_only", // human readable mutex name
 80031f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 80031f8:	4660      	mov	r0, ip
 80031fa:	f00c fd75 	bl	800fce8 <osMutexNew>
 80031fe:	4972      	ldr	r1, [pc, #456]	; (80033c8 <main+0x748>)
	const osMutexAttr_t state_est_mutex_attr = { "state_est_mutex_only", // human readable mutex name
 8003200:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8003204:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 8003208:	6008      	str	r0, [r1, #0]
	const osMutexAttr_t state_est_mutex_attr = { "state_est_mutex_only", // human readable mutex name
 800320a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800320c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8003210:	4660      	mov	r0, ip
 8003212:	f00c fd69 	bl	800fce8 <osMutexNew>
 8003216:	4b6d      	ldr	r3, [pc, #436]	; (80033cc <main+0x74c>)
	const osMutexAttr_t controller_mutex_attr = { "controller_mutex_only", // human readable mutex name
 8003218:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 800321c:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t controller_mutex_attr = { "controller_mutex_only", // human readable mutex name
 800321e:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8003222:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003224:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 8003228:	4660      	mov	r0, ip
 800322a:	f00c fd5d 	bl	800fce8 <osMutexNew>
 800322e:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <main+0x750>)
	const osMutexAttr_t fsm_mutex_attr = { "fsm_mutex_only", // human readable mutex name
 8003230:	f105 0350 	add.w	r3, r5, #80	; 0x50
 8003234:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 8003238:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t fsm_mutex_attr = { "fsm_mutex_only", // human readable mutex name
 800323a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800323c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8003240:	4660      	mov	r0, ip
 8003242:	f00c fd51 	bl	800fce8 <osMutexNew>
 8003246:	4963      	ldr	r1, [pc, #396]	; (80033d4 <main+0x754>)
	const osMutexAttr_t environment_mutex_attr = { "environment_mutex_only", // human readable mutex name
 8003248:	f105 0360 	add.w	r3, r5, #96	; 0x60
 800324c:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8003250:	6008      	str	r0, [r1, #0]
	const osMutexAttr_t environment_mutex_attr = { "environment_mutex_only", // human readable mutex name
 8003252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003254:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8003258:	4660      	mov	r0, ip
 800325a:	f00c fd45 	bl	800fce8 <osMutexNew>
 800325e:	4b5e      	ldr	r3, [pc, #376]	; (80033d8 <main+0x758>)
	const osMutexAttr_t usb_data_mutex_attr = { "usb_data_mutex_only", // human readable mutex name
 8003260:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8003264:	6018      	str	r0, [r3, #0]
	const osMutexAttr_t usb_data_mutex_attr = { "usb_data_mutex_only", // human readable mutex name
 8003266:	f105 0370 	add.w	r3, r5, #112	; 0x70
 800326a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800326c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8003270:	4660      	mov	r0, ip
 8003272:	f00c fd39 	bl	800fce8 <osMutexNew>
 8003276:	4a59      	ldr	r2, [pc, #356]	; (80033dc <main+0x75c>)
	const osMutexAttr_t command_mutex_attr = { "command_mutex_only", // human readable mutex name
 8003278:	f105 0380 	add.w	r3, r5, #128	; 0x80
 800327c:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8003280:	6010      	str	r0, [r2, #0]
	const osMutexAttr_t command_mutex_attr = { "command_mutex_only", // human readable mutex name
 8003282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003284:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	command_mutex_only = osMutexNew(&command_mutex_attr);
 8003288:	4660      	mov	r0, ip
 800328a:	f00c fd2d 	bl	800fce8 <osMutexNew>
	const osMutexAttr_t gps_mutex_attr = { "gps_mutex_only", // human readable mutex name
 800328e:	f105 0390 	add.w	r3, r5, #144	; 0x90
 8003292:	f10d 0cb4 	add.w	ip, sp, #180	; 0xb4
	command_mutex_only = osMutexNew(&command_mutex_attr);
 8003296:	f8cb 0000 	str.w	r0, [fp]
	const osMutexAttr_t gps_mutex_attr = { "gps_mutex_only", // human readable mutex name
 800329a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800329c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 80032a0:	4660      	mov	r0, ip
 80032a2:	f00c fd21 	bl	800fce8 <osMutexNew>
	const osMutexAttr_t battery_mutex_attr = { "battery_mutex_only", // human readable mutex name
 80032a6:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
 80032aa:	f10d 0cc4 	add.w	ip, sp, #196	; 0xc4
	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 80032ae:	f8ca 0000 	str.w	r0, [sl]
	const osMutexAttr_t battery_mutex_attr = { "battery_mutex_only", // human readable mutex name
 80032b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 80032b8:	4660      	mov	r0, ip
 80032ba:	f00c fd15 	bl	800fce8 <osMutexNew>
	const osMutexAttr_t motor_mutex_attr = { "motor_mutex_only", // human readable mutex name
 80032be:	f105 03b0 	add.w	r3, r5, #176	; 0xb0
	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 80032c2:	f8c9 0000 	str.w	r0, [r9]
	const osMutexAttr_t print_mutex_attr = { "print_mutex", // human readable mutex name
 80032c6:	35c0      	adds	r5, #192	; 0xc0
	const osMutexAttr_t motor_mutex_attr = { "motor_mutex_only", // human readable mutex name
 80032c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032ca:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 80032ce:	4640      	mov	r0, r8
 80032d0:	f00c fd0a 	bl	800fce8 <osMutexNew>
 80032d4:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <main+0x760>)
	sb3_mutex.mutex = sb3_mutex_only;
 80032d6:	493c      	ldr	r1, [pc, #240]	; (80033c8 <main+0x748>)
	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 80032d8:	6018      	str	r0, [r3, #0]
	sb1_mutex.mutex = sb1_mutex_only;
 80032da:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <main+0x740>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b41      	ldr	r3, [pc, #260]	; (80033e4 <main+0x764>)
 80032e0:	601a      	str	r2, [r3, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 80032e2:	4a38      	ldr	r2, [pc, #224]	; (80033c4 <main+0x744>)
 80032e4:	4b40      	ldr	r3, [pc, #256]	; (80033e8 <main+0x768>)
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	601a      	str	r2, [r3, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 80032ea:	680a      	ldr	r2, [r1, #0]
 80032ec:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <main+0x76c>)
	fsm_mutex.mutex = fsm_mutex_only;
 80032ee:	4939      	ldr	r1, [pc, #228]	; (80033d4 <main+0x754>)
	sb3_mutex.mutex = sb3_mutex_only;
 80032f0:	601a      	str	r2, [r3, #0]
	env_mutex.mutex = environment_mutex_only;
 80032f2:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <main+0x758>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b3e      	ldr	r3, [pc, #248]	; (80033f0 <main+0x770>)
 80032f8:	601a      	str	r2, [r3, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 80032fa:	680a      	ldr	r2, [r1, #0]
 80032fc:	4b3d      	ldr	r3, [pc, #244]	; (80033f4 <main+0x774>)
 80032fe:	601a      	str	r2, [r3, #0]
	controller_mutex.mutex = controller_mutex_only;
 8003300:	4a33      	ldr	r2, [pc, #204]	; (80033d0 <main+0x750>)
 8003302:	4b3d      	ldr	r3, [pc, #244]	; (80033f8 <main+0x778>)
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	601a      	str	r2, [r3, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 8003308:	4b30      	ldr	r3, [pc, #192]	; (80033cc <main+0x74c>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <main+0x77c>)
 800330e:	601a      	str	r2, [r3, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 8003310:	4a32      	ldr	r2, [pc, #200]	; (80033dc <main+0x75c>)
 8003312:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <main+0x780>)
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	601a      	str	r2, [r3, #0]
	command_mutex.mutex = command_mutex_only;
 8003318:	f8db 2000 	ldr.w	r2, [fp]
 800331c:	4b39      	ldr	r3, [pc, #228]	; (8003404 <main+0x784>)
 800331e:	601a      	str	r2, [r3, #0]
	gps_mutex.mutex = gps_mutex_only;
 8003320:	f8da 2000 	ldr.w	r2, [sl]
 8003324:	4b38      	ldr	r3, [pc, #224]	; (8003408 <main+0x788>)
 8003326:	601a      	str	r2, [r3, #0]
	battery_mutex.mutex = battery_mutex_only;
 8003328:	f8d9 2000 	ldr.w	r2, [r9]
 800332c:	4b37      	ldr	r3, [pc, #220]	; (800340c <main+0x78c>)
 800332e:	601a      	str	r2, [r3, #0]
	global_telemetry_command = IDLE_COMMAND;
 8003330:	229b      	movs	r2, #155	; 0x9b
	motor_mutex.mutex = motor_mutex_only;
 8003332:	4b37      	ldr	r3, [pc, #220]	; (8003410 <main+0x790>)
 8003334:	6018      	str	r0, [r3, #0]
	global_flight_phase_detection.flight_phase = IDLE;
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <main+0x794>)
 8003338:	701f      	strb	r7, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 800333a:	705f      	strb	r7, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 800333c:	4b36      	ldr	r3, [pc, #216]	; (8003418 <main+0x798>)
 800333e:	701a      	strb	r2, [r3, #0]
	const osMutexAttr_t print_mutex_attr = { "print_mutex", // human readable mutex name
 8003340:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003344:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	print_mutex = osMutexNew(&print_mutex_attr);
 8003348:	4630      	mov	r0, r6
 800334a:	f00c fccd 	bl	800fce8 <osMutexNew>
 800334e:	4b33      	ldr	r3, [pc, #204]	; (800341c <main+0x79c>)
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8003350:	4622      	mov	r2, r4
 8003352:	2196      	movs	r1, #150	; 0x96
	print_mutex = osMutexNew(&print_mutex_attr);
 8003354:	6018      	str	r0, [r3, #0]
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8003356:	2080      	movs	r0, #128	; 0x80
 8003358:	f00c fe4c 	bl	800fff4 <osMessageQueueNew>
 800335c:	4b30      	ldr	r3, [pc, #192]	; (8003420 <main+0x7a0>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800335e:	4a31      	ldr	r2, [pc, #196]	; (8003424 <main+0x7a4>)
 8003360:	4621      	mov	r1, r4
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8003362:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003364:	4830      	ldr	r0, [pc, #192]	; (8003428 <main+0x7a8>)
 8003366:	f00c fc2b 	bl	800fbc0 <osThreadNew>
 800336a:	4b30      	ldr	r3, [pc, #192]	; (800342c <main+0x7ac>)
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 800336c:	4a30      	ldr	r2, [pc, #192]	; (8003430 <main+0x7b0>)
 800336e:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003370:	6018      	str	r0, [r3, #0]
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8003372:	4830      	ldr	r0, [pc, #192]	; (8003434 <main+0x7b4>)
 8003374:	f00c fc24 	bl	800fbc0 <osThreadNew>
 8003378:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <main+0x7b8>)
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 800337a:	4a30      	ldr	r2, [pc, #192]	; (800343c <main+0x7bc>)
 800337c:	4621      	mov	r1, r4
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 800337e:	6018      	str	r0, [r3, #0]
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8003380:	482f      	ldr	r0, [pc, #188]	; (8003440 <main+0x7c0>)
 8003382:	f00c fc1d 	bl	800fbc0 <osThreadNew>
 8003386:	4b2f      	ldr	r3, [pc, #188]	; (8003444 <main+0x7c4>)
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8003388:	4a2f      	ldr	r2, [pc, #188]	; (8003448 <main+0x7c8>)
 800338a:	4621      	mov	r1, r4
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 800338c:	6018      	str	r0, [r3, #0]
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 800338e:	482f      	ldr	r0, [pc, #188]	; (800344c <main+0x7cc>)
 8003390:	f00c fc16 	bl	800fbc0 <osThreadNew>
 8003394:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <main+0x7d0>)
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8003396:	4a2f      	ldr	r2, [pc, #188]	; (8003454 <main+0x7d4>)
 8003398:	4621      	mov	r1, r4
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 800339a:	6018      	str	r0, [r3, #0]
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 800339c:	482e      	ldr	r0, [pc, #184]	; (8003458 <main+0x7d8>)
 800339e:	f00c fc0f 	bl	800fbc0 <osThreadNew>
 80033a2:	4b2e      	ldr	r3, [pc, #184]	; (800345c <main+0x7dc>)
 80033a4:	e06a      	b.n	800347c <main+0x7fc>
 80033a6:	bf00      	nop
 80033a8:	40007800 	.word	0x40007800
 80033ac:	40011000 	.word	0x40011000
 80033b0:	40004400 	.word	0x40004400
 80033b4:	40004800 	.word	0x40004800
 80033b8:	0801439c 	.word	0x0801439c
 80033bc:	24011f68 	.word	0x24011f68
 80033c0:	2401206c 	.word	0x2401206c
 80033c4:	2401c280 	.word	0x2401c280
 80033c8:	2400bc50 	.word	0x2400bc50
 80033cc:	24011f54 	.word	0x24011f54
 80033d0:	24020494 	.word	0x24020494
 80033d4:	24012068 	.word	0x24012068
 80033d8:	24011f5c 	.word	0x24011f5c
 80033dc:	2400bb9c 	.word	0x2400bb9c
 80033e0:	24014070 	.word	0x24014070
 80033e4:	2400fe64 	.word	0x2400fe64
 80033e8:	24020518 	.word	0x24020518
 80033ec:	24011f60 	.word	0x24011f60
 80033f0:	2400bc64 	.word	0x2400bc64
 80033f4:	24009760 	.word	0x24009760
 80033f8:	2400dcf8 	.word	0x2400dcf8
 80033fc:	24016078 	.word	0x24016078
 8003400:	2400ba44 	.word	0x2400ba44
 8003404:	2400bc5c 	.word	0x2400bc5c
 8003408:	2401a104 	.word	0x2401a104
 800340c:	240097f0 	.word	0x240097f0
 8003410:	240098fc 	.word	0x240098fc
 8003414:	24000224 	.word	0x24000224
 8003418:	240160a4 	.word	0x240160a4
 800341c:	24009620 	.word	0x24009620
 8003420:	2401a27c 	.word	0x2401a27c
 8003424:	08014540 	.word	0x08014540
 8003428:	08002b69 	.word	0x08002b69
 800342c:	240096e4 	.word	0x240096e4
 8003430:	08014828 	.word	0x08014828
 8003434:	08004cf1 	.word	0x08004cf1
 8003438:	2400dde8 	.word	0x2400dde8
 800343c:	08014708 	.word	0x08014708
 8003440:	080040a5 	.word	0x080040a5
 8003444:	24020514 	.word	0x24020514
 8003448:	08014804 	.word	0x08014804
 800344c:	08004bd1 	.word	0x08004bd1
 8003450:	2400bc6c 	.word	0x2400bc6c
 8003454:	080147e0 	.word	0x080147e0
 8003458:	08004829 	.word	0x08004829
 800345c:	240099e8 	.word	0x240099e8
 8003460:	2400fec8 	.word	0x2400fec8
 8003464:	2401c2dc 	.word	0x2401c2dc
 8003468:	24009904 	.word	0x24009904
 800346c:	24016074 	.word	0x24016074
 8003470:	40013400 	.word	0x40013400
 8003474:	24011f58 	.word	0x24011f58
 8003478:	2400bc58 	.word	0x2400bc58
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 800347c:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <main+0x868>)
 800347e:	4621      	mov	r1, r4
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8003480:	6018      	str	r0, [r3, #0]
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 8003482:	481a      	ldr	r0, [pc, #104]	; (80034ec <main+0x86c>)
 8003484:	f00c fb9c 	bl	800fbc0 <osThreadNew>
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <main+0x870>)
  task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 800348a:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <main+0x874>)
 800348c:	4621      	mov	r1, r4
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 800348e:	6018      	str	r0, [r3, #0]
  task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 8003490:	4819      	ldr	r0, [pc, #100]	; (80034f8 <main+0x878>)
 8003492:	f00c fb95 	bl	800fbc0 <osThreadNew>
 8003496:	4b19      	ldr	r3, [pc, #100]	; (80034fc <main+0x87c>)
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 8003498:	4a19      	ldr	r2, [pc, #100]	; (8003500 <main+0x880>)
 800349a:	4621      	mov	r1, r4
  task_fsmHandle = osThreadNew(vTaskFsm, NULL, &task_fsm_attributes);
 800349c:	6018      	str	r0, [r3, #0]
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 800349e:	4819      	ldr	r0, [pc, #100]	; (8003504 <main+0x884>)
 80034a0:	f00c fb8e 	bl	800fbc0 <osThreadNew>
 80034a4:	4b18      	ldr	r3, [pc, #96]	; (8003508 <main+0x888>)
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 80034a6:	4a19      	ldr	r2, [pc, #100]	; (800350c <main+0x88c>)
 80034a8:	4621      	mov	r1, r4
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 80034aa:	6018      	str	r0, [r3, #0]
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 80034ac:	4818      	ldr	r0, [pc, #96]	; (8003510 <main+0x890>)
 80034ae:	f00c fb87 	bl	800fbc0 <osThreadNew>
 80034b2:	4b18      	ldr	r3, [pc, #96]	; (8003514 <main+0x894>)
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 80034b4:	4a18      	ldr	r2, [pc, #96]	; (8003518 <main+0x898>)
 80034b6:	4621      	mov	r1, r4
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 80034b8:	6018      	str	r0, [r3, #0]
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 80034ba:	4818      	ldr	r0, [pc, #96]	; (800351c <main+0x89c>)
 80034bc:	f00c fb80 	bl	800fbc0 <osThreadNew>
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <main+0x8a0>)
  task_peripheralsHandle = osThreadNew(vTaskPeripherals, NULL, &task_peripherals_attributes);
 80034c2:	4a18      	ldr	r2, [pc, #96]	; (8003524 <main+0x8a4>)
 80034c4:	4621      	mov	r1, r4
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 80034c6:	6018      	str	r0, [r3, #0]
  task_peripheralsHandle = osThreadNew(vTaskPeripherals, NULL, &task_peripherals_attributes);
 80034c8:	4817      	ldr	r0, [pc, #92]	; (8003528 <main+0x8a8>)
 80034ca:	f00c fb79 	bl	800fbc0 <osThreadNew>
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <main+0x8ac>)
  task_flashHandle = osThreadNew(vTaskFlash, NULL, &task_flash_attributes);
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <main+0x8b0>)
 80034d2:	4621      	mov	r1, r4
  task_peripheralsHandle = osThreadNew(vTaskPeripherals, NULL, &task_peripherals_attributes);
 80034d4:	6018      	str	r0, [r3, #0]
  task_flashHandle = osThreadNew(vTaskFlash, NULL, &task_flash_attributes);
 80034d6:	4817      	ldr	r0, [pc, #92]	; (8003534 <main+0x8b4>)
 80034d8:	f00c fb72 	bl	800fbc0 <osThreadNew>
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <main+0x8b8>)
 80034de:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80034e0:	f00c fb36 	bl	800fb50 <osKernelStart>
 80034e4:	e7fe      	b.n	80034e4 <main+0x864>
 80034e6:	bf00      	nop
 80034e8:	08014798 	.word	0x08014798
 80034ec:	080044e9 	.word	0x080044e9
 80034f0:	2400dde4 	.word	0x2400dde4
 80034f4:	08014750 	.word	0x08014750
 80034f8:	08004235 	.word	0x08004235
 80034fc:	24020510 	.word	0x24020510
 8003500:	08014774 	.word	0x08014774
 8003504:	08004325 	.word	0x08004325
 8003508:	24009668 	.word	0x24009668
 800350c:	080146e4 	.word	0x080146e4
 8003510:	08003e91 	.word	0x08003e91
 8003514:	2401e438 	.word	0x2401e438
 8003518:	0801484c 	.word	0x0801484c
 800351c:	08004f89 	.word	0x08004f89
 8003520:	2401a100 	.word	0x2401a100
 8003524:	080147bc 	.word	0x080147bc
 8003528:	08004679 	.word	0x08004679
 800352c:	2400fe6c 	.word	0x2400fe6c
 8003530:	0801472c 	.word	0x0801472c
 8003534:	080041a9 	.word	0x080041a9
 8003538:	2400bc54 	.word	0x2400bc54

0800353c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800353c:	6802      	ldr	r2, [r0, #0]
 800353e:	4b03      	ldr	r3, [pc, #12]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003540:	429a      	cmp	r2, r3
 8003542:	d101      	bne.n	8003548 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003544:	f001 be7e 	b.w	8005244 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000

08003550 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003550:	4770      	bx	lr
	...

08003554 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003554:	4b07      	ldr	r3, [pc, #28]	; (8003574 <HAL_MspInit+0x20>)
{
 8003556:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003558:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800355c:	f042 0202 	orr.w	r2, r2, #2
 8003560:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003564:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003570:	b002      	add	sp, #8
 8003572:	4770      	bx	lr
 8003574:	58024400 	.word	0x58024400

08003578 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357e:	2214      	movs	r2, #20
 8003580:	2100      	movs	r1, #0
 8003582:	a803      	add	r0, sp, #12
 8003584:	f00f f857 	bl	8012636 <memset>
  if(hadc->Instance==ADC1)
 8003588:	6832      	ldr	r2, [r6, #0]
 800358a:	4b2c      	ldr	r3, [pc, #176]	; (800363c <HAL_ADC_MspInit+0xc4>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d152      	bne.n	8003636 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003590:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <HAL_ADC_MspInit+0xc8>)
    PC1     ------> ADC1_INP11
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = VSENS3V3_Pin|VSENSBAT_Pin|CURRBAT1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003592:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003594:	a903      	add	r1, sp, #12
 8003596:	482b      	ldr	r0, [pc, #172]	; (8003644 <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003598:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

    GPIO_InitStruct.Pin = CURRBAT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2500      	movs	r5, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 800359e:	f042 0220 	orr.w	r2, r2, #32
 80035a2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80035a6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80035aa:	f002 0220 	and.w	r2, r2, #32
 80035ae:	9200      	str	r2, [sp, #0]
 80035b0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80035b6:	f042 0204 	orr.w	r2, r2, #4
 80035ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80035be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80035c2:	f002 0204 	and.w	r2, r2, #4
 80035c6:	9201      	str	r2, [sp, #4]
 80035c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80035ce:	f042 0202 	orr.w	r2, r2, #2
 80035d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80035d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	9302      	str	r3, [sp, #8]
 80035e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035e2:	2323      	movs	r3, #35	; 0x23
 80035e4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e8:	f003 fe76 	bl	80072d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CURRBAT2_Pin;
 80035ec:	2301      	movs	r3, #1
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 80035ee:	a903      	add	r1, sp, #12
 80035f0:	4815      	ldr	r0, [pc, #84]	; (8003648 <HAL_ADC_MspInit+0xd0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035f4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 80035f8:	f003 fe6e 	bl	80072d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80035fc:	4c13      	ldr	r4, [pc, #76]	; (800364c <HAL_ADC_MspInit+0xd4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80035fe:	2309      	movs	r3, #9
 8003600:	4a13      	ldr	r2, [pc, #76]	; (8003650 <HAL_ADC_MspInit+0xd8>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003602:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003606:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800360a:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800360e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003612:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800361a:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800361e:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003620:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003624:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003628:	f002 fe64 	bl	80062f4 <HAL_DMA_Init>
 800362c:	b108      	cbz	r0, 8003632 <HAL_ADC_MspInit+0xba>
    {
      Error_Handler();
 800362e:	f7ff ff8f 	bl	8003550 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003632:	64f4      	str	r4, [r6, #76]	; 0x4c
 8003634:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003636:	b008      	add	sp, #32
 8003638:	bd70      	pop	{r4, r5, r6, pc}
 800363a:	bf00      	nop
 800363c:	40022000 	.word	0x40022000
 8003640:	58024400 	.word	0x58024400
 8003644:	58020800 	.word	0x58020800
 8003648:	58020400 	.word	0x58020400
 800364c:	24011ff0 	.word	0x24011ff0
 8003650:	40020470 	.word	0x40020470

08003654 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365a:	2214      	movs	r2, #20
 800365c:	2100      	movs	r1, #0
 800365e:	a803      	add	r0, sp, #12
 8003660:	f00e ffe9 	bl	8012636 <memset>
  if(hsd->Instance==SDMMC1)
 8003664:	6822      	ldr	r2, [r4, #0]
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <HAL_SD_MspInit+0xac>)
 8003668:	429a      	cmp	r2, r3
 800366a:	d146      	bne.n	80036fa <HAL_SD_MspInit+0xa6>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_SD_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800366e:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003672:	2603      	movs	r6, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003674:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003678:	eb0d 0105 	add.w	r1, sp, r5
 800367c:	4822      	ldr	r0, [pc, #136]	; (8003708 <HAL_SD_MspInit+0xb4>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800367e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003682:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003686:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800368a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800368e:	9200      	str	r2, [sp, #0]
 8003690:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003692:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003696:	f042 0204 	orr.w	r2, r2, #4
 800369a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800369e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80036a2:	f002 0204 	and.w	r2, r2, #4
 80036a6:	9201      	str	r2, [sp, #4]
 80036a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80036ae:	f042 0208 	orr.w	r2, r2, #8
 80036b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80036b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	9302      	str	r3, [sp, #8]
 80036c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80036c6:	e9cd 6506 	strd	r6, r5, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ce:	f003 fe03 	bl	80072d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036d2:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036d4:	eb0d 0105 	add.w	r1, sp, r5
 80036d8:	480c      	ldr	r0, [pc, #48]	; (800370c <HAL_SD_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80036da:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036dc:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e2:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e6:	f003 fdf7 	bl	80072d8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80036ea:	2031      	movs	r0, #49	; 0x31
 80036ec:	4622      	mov	r2, r4
 80036ee:	2105      	movs	r1, #5
 80036f0:	f002 fc30 	bl	8005f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80036f4:	2031      	movs	r0, #49	; 0x31
 80036f6:	f002 fc5f 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80036fa:	b008      	add	sp, #32
 80036fc:	bd70      	pop	{r4, r5, r6, pc}
 80036fe:	bf00      	nop
 8003700:	52007000 	.word	0x52007000
 8003704:	58024400 	.word	0x58024400
 8003708:	58020800 	.word	0x58020800
 800370c:	58020c00 	.word	0x58020c00

08003710 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003714:	b08e      	sub	sp, #56	; 0x38
 8003716:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	2214      	movs	r2, #20
 800371a:	2100      	movs	r1, #0
 800371c:	a809      	add	r0, sp, #36	; 0x24
 800371e:	f00e ff8a 	bl	8012636 <memset>
  if(hspi->Instance==SPI1)
 8003722:	682b      	ldr	r3, [r5, #0]
 8003724:	4a9e      	ldr	r2, [pc, #632]	; (80039a0 <HAL_SPI_MspInit+0x290>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d154      	bne.n	80037d4 <HAL_SPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800372a:	4b9e      	ldr	r3, [pc, #632]	; (80039a4 <HAL_SPI_MspInit+0x294>)
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800372e:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003730:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003732:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003736:	489c      	ldr	r0, [pc, #624]	; (80039a8 <HAL_SPI_MspInit+0x298>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003738:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800373c:	4f9b      	ldr	r7, [pc, #620]	; (80039ac <HAL_SPI_MspInit+0x29c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800373e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003742:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003746:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800374a:	9200      	str	r2, [sp, #0]
 800374c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800375a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	23a0      	movs	r3, #160	; 0xa0
 8003768:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800376c:	2301      	movs	r3, #1
 800376e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003772:	f003 fdb1 	bl	80072d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377a:	488b      	ldr	r0, [pc, #556]	; (80039a8 <HAL_SPI_MspInit+0x298>)
 800377c:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800377e:	940d      	str	r4, [sp, #52]	; 0x34
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8003780:	4c8b      	ldr	r4, [pc, #556]	; (80039b0 <HAL_SPI_MspInit+0x2a0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003782:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003788:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800378c:	f003 fda4 	bl	80072d8 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003790:	2325      	movs	r3, #37	; 0x25
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003792:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003794:	61a6      	str	r6, [r4, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003796:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003798:	e9c4 7300 	strd	r7, r3, [r4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800379c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037a0:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80037a4:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a8:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037ac:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80037b0:	f002 fda0 	bl	80062f4 <HAL_DMA_Init>
 80037b4:	b108      	cbz	r0, 80037ba <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 80037b6:	f7ff fecb 	bl	8003550 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80037ba:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80037bc:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80037be:	2200      	movs	r2, #0
 80037c0:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80037c2:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80037c4:	f002 fbc6 	bl	8005f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80037c8:	2023      	movs	r0, #35	; 0x23

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80037ca:	f002 fbf5 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80037ce:	b00e      	add	sp, #56	; 0x38
 80037d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hspi->Instance==SPI2)
 80037d4:	4a77      	ldr	r2, [pc, #476]	; (80039b4 <HAL_SPI_MspInit+0x2a4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d150      	bne.n	800387c <HAL_SPI_MspInit+0x16c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037da:	4b72      	ldr	r3, [pc, #456]	; (80039a4 <HAL_SPI_MspInit+0x294>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037dc:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037de:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e0:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037e2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e6:	4874      	ldr	r0, [pc, #464]	; (80039b8 <HAL_SPI_MspInit+0x2a8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ec:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80037f0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80037f4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80037f8:	9202      	str	r2, [sp, #8]
 80037fa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003800:	f042 0202 	orr.w	r2, r2, #2
 8003804:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800380c:	940d      	str	r4, [sp, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	9303      	str	r3, [sp, #12]
 8003814:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800381a:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800381e:	f003 fd5b 	bl	80072d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003822:	f44f 4320 	mov.w	r3, #40960	; 0xa000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003826:	4864      	ldr	r0, [pc, #400]	; (80039b8 <HAL_SPI_MspInit+0x2a8>)
 8003828:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800382a:	940d      	str	r4, [sp, #52]	; 0x34
    hdma_spi2_rx.Instance = DMA1_Stream1;
 800382c:	4c63      	ldr	r4, [pc, #396]	; (80039bc <HAL_SPI_MspInit+0x2ac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003832:	2600      	movs	r6, #0
 8003834:	2303      	movs	r3, #3
 8003836:	e9cd 630b 	strd	r6, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383a:	f003 fd4d 	bl	80072d8 <HAL_GPIO_Init>
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800383e:	4860      	ldr	r0, [pc, #384]	; (80039c0 <HAL_SPI_MspInit+0x2b0>)
 8003840:	2327      	movs	r3, #39	; 0x27
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003842:	61a6      	str	r6, [r4, #24]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003844:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003846:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800384a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800384e:	4620      	mov	r0, r4
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003850:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8003854:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003858:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800385c:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003860:	f002 fd48 	bl	80062f4 <HAL_DMA_Init>
 8003864:	b108      	cbz	r0, 800386a <HAL_SPI_MspInit+0x15a>
      Error_Handler();
 8003866:	f7ff fe73 	bl	8003550 <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800386a:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800386c:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800386e:	2200      	movs	r2, #0
 8003870:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003872:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003874:	f002 fb6e 	bl	8005f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003878:	2024      	movs	r0, #36	; 0x24
 800387a:	e7a6      	b.n	80037ca <HAL_SPI_MspInit+0xba>
  else if(hspi->Instance==SPI3)
 800387c:	4a51      	ldr	r2, [pc, #324]	; (80039c4 <HAL_SPI_MspInit+0x2b4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d166      	bne.n	8003950 <HAL_SPI_MspInit+0x240>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003882:	4b48      	ldr	r3, [pc, #288]	; (80039a4 <HAL_SPI_MspInit+0x294>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003884:	2402      	movs	r4, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003886:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003888:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI3_CLK_ENABLE();
 800388a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800388e:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003890:	4845      	ldr	r0, [pc, #276]	; (80039a8 <HAL_SPI_MspInit+0x298>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003892:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800389a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800389e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80038a2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80038a6:	9204      	str	r2, [sp, #16]
 80038a8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80038b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80038ba:	f002 0201 	and.w	r2, r2, #1
 80038be:	9205      	str	r2, [sp, #20]
 80038c0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80038c6:	f042 0202 	orr.w	r2, r2, #2
 80038ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80038ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80038d2:	970d      	str	r7, [sp, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	9306      	str	r3, [sp, #24]
 80038da:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038dc:	2310      	movs	r3, #16
 80038de:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e2:	f003 fcf9 	bl	80072d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038e6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e8:	a909      	add	r1, sp, #36	; 0x24
 80038ea:	4833      	ldr	r0, [pc, #204]	; (80039b8 <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ec:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80038f0:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80038f2:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80038f6:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f8:	f003 fcee 	bl	80072d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038fc:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fe:	a909      	add	r1, sp, #36	; 0x24
 8003900:	482d      	ldr	r0, [pc, #180]	; (80039b8 <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003902:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003904:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003908:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
    hdma_spi3_rx.Instance = DMA1_Stream2;
 800390c:	4c2e      	ldr	r4, [pc, #184]	; (80039c8 <HAL_SPI_MspInit+0x2b8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800390e:	f003 fce3 	bl	80072d8 <HAL_GPIO_Init>
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8003912:	233d      	movs	r3, #61	; 0x3d
 8003914:	492d      	ldr	r1, [pc, #180]	; (80039cc <HAL_SPI_MspInit+0x2bc>)
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003916:	4620      	mov	r0, r4
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003918:	61a6      	str	r6, [r4, #24]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800391a:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800391c:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003920:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003924:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8003928:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800392c:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003930:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003934:	f002 fcde 	bl	80062f4 <HAL_DMA_Init>
 8003938:	b108      	cbz	r0, 800393e <HAL_SPI_MspInit+0x22e>
      Error_Handler();
 800393a:	f7ff fe09 	bl	8003550 <Error_Handler>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 800393e:	2033      	movs	r0, #51	; 0x33
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8003940:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003942:	2200      	movs	r2, #0
 8003944:	2105      	movs	r1, #5
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8003946:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003948:	f002 fb04 	bl	8005f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800394c:	2033      	movs	r0, #51	; 0x33
 800394e:	e73c      	b.n	80037ca <HAL_SPI_MspInit+0xba>
  else if(hspi->Instance==SPI4)
 8003950:	4a1f      	ldr	r2, [pc, #124]	; (80039d0 <HAL_SPI_MspInit+0x2c0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	f47f af3b 	bne.w	80037ce <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_SPI_MspInit+0x294>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800395a:	a909      	add	r1, sp, #36	; 0x24
 800395c:	481d      	ldr	r0, [pc, #116]	; (80039d4 <HAL_SPI_MspInit+0x2c4>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 800395e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003966:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800396a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800396e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003972:	9207      	str	r2, [sp, #28]
 8003974:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003976:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800397a:	f042 0210 	orr.w	r2, r2, #16
 800397e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003982:	2264      	movs	r2, #100	; 0x64
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	9308      	str	r3, [sp, #32]
 800398e:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	2302      	movs	r3, #2
 8003992:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003996:	2305      	movs	r3, #5
 8003998:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800399a:	f003 fc9d 	bl	80072d8 <HAL_GPIO_Init>
}
 800399e:	e716      	b.n	80037ce <HAL_SPI_MspInit+0xbe>
 80039a0:	40013000 	.word	0x40013000
 80039a4:	58024400 	.word	0x58024400
 80039a8:	58020000 	.word	0x58020000
 80039ac:	40020010 	.word	0x40020010
 80039b0:	2401c368 	.word	0x2401c368
 80039b4:	40003800 	.word	0x40003800
 80039b8:	58020400 	.word	0x58020400
 80039bc:	2400baa4 	.word	0x2400baa4
 80039c0:	40020028 	.word	0x40020028
 80039c4:	40003c00 	.word	0x40003c00
 80039c8:	24020498 	.word	0x24020498
 80039cc:	40020040 	.word	0x40020040
 80039d0:	40013400 	.word	0x40013400
 80039d4:	58021000 	.word	0x58021000

080039d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039d8:	b530      	push	{r4, r5, lr}
 80039da:	b091      	sub	sp, #68	; 0x44
 80039dc:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039de:	2214      	movs	r2, #20
 80039e0:	2100      	movs	r1, #0
 80039e2:	a80b      	add	r0, sp, #44	; 0x2c
 80039e4:	f00e fe27 	bl	8012636 <memset>
  if(huart->Instance==UART4)
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	4a78      	ldr	r2, [pc, #480]	; (8003bcc <HAL_UART_MspInit+0x1f4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d13d      	bne.n	8003a6c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80039f0:	4b77      	ldr	r3, [pc, #476]	; (8003bd0 <HAL_UART_MspInit+0x1f8>)
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f2:	f04f 0c03 	mov.w	ip, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f6:	a90b      	add	r1, sp, #44	; 0x2c
 80039f8:	4876      	ldr	r0, [pc, #472]	; (8003bd4 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80039fa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80039fe:	4c76      	ldr	r4, [pc, #472]	; (8003bd8 <HAL_UART_MspInit+0x200>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8003a00:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003a04:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003a08:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003a0c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003a10:	9201      	str	r2, [sp, #4]
 8003a12:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	9302      	str	r3, [sp, #8]
 8003a2a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e9cd c30b 	strd	ip, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003a32:	2308      	movs	r3, #8
 8003a34:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a36:	f003 fc4f 	bl	80072d8 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8003a3a:	4b68      	ldr	r3, [pc, #416]	; (8003bdc <HAL_UART_MspInit+0x204>)
 8003a3c:	6023      	str	r3, [r4, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003a3e:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003a40:	6063      	str	r3, [r4, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a46:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003a48:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a4a:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a4e:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003a52:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a56:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003a5a:	f002 fc4b 	bl	80062f4 <HAL_DMA_Init>
 8003a5e:	b108      	cbz	r0, 8003a64 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8003a60:	f7ff fd76 	bl	8003550 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003a64:	67ac      	str	r4, [r5, #120]	; 0x78
 8003a66:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003a68:	b011      	add	sp, #68	; 0x44
 8003a6a:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==UART7)
 8003a6c:	4a5c      	ldr	r2, [pc, #368]	; (8003be0 <HAL_UART_MspInit+0x208>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d128      	bne.n	8003ac4 <HAL_UART_MspInit+0xec>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003a72:	4b57      	ldr	r3, [pc, #348]	; (8003bd0 <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	f44f 74c0 	mov.w	r4, #384	; 0x180
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a78:	a90b      	add	r1, sp, #44	; 0x2c
 8003a7a:	485a      	ldr	r0, [pc, #360]	; (8003be4 <HAL_UART_MspInit+0x20c>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8003a7c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003a80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a84:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003a88:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003a8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a90:	9203      	str	r2, [sp, #12]
 8003a92:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003a98:	f042 0210 	orr.w	r2, r2, #16
 8003a9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	9304      	str	r3, [sp, #16]
 8003aaa:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003ab2:	2307      	movs	r3, #7
    hdma_uart7_rx.Instance = DMA1_Stream4;
 8003ab4:	4c4c      	ldr	r4, [pc, #304]	; (8003be8 <HAL_UART_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003ab6:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ab8:	f003 fc0e 	bl	80072d8 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream4;
 8003abc:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <HAL_UART_MspInit+0x214>)
 8003abe:	6023      	str	r3, [r4, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8003ac0:	234f      	movs	r3, #79	; 0x4f
 8003ac2:	e7bd      	b.n	8003a40 <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART1)
 8003ac4:	4a4a      	ldr	r2, [pc, #296]	; (8003bf0 <HAL_UART_MspInit+0x218>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d128      	bne.n	8003b1c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003aca:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003acc:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad0:	a90b      	add	r1, sp, #44	; 0x2c
    hdma_usart1_rx.Instance = DMA1_Stream5;
 8003ad2:	4c48      	ldr	r4, [pc, #288]	; (8003bf4 <HAL_UART_MspInit+0x21c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ad4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003ad8:	f042 0210 	orr.w	r2, r2, #16
 8003adc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003ae0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003ae4:	f002 0210 	and.w	r2, r2, #16
 8003ae8:	9205      	str	r2, [sp, #20]
 8003aea:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	9306      	str	r3, [sp, #24]
 8003b02:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b0a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0c:	4831      	ldr	r0, [pc, #196]	; (8003bd4 <HAL_UART_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b0e:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b10:	f003 fbe2 	bl	80072d8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream5;
 8003b14:	4b38      	ldr	r3, [pc, #224]	; (8003bf8 <HAL_UART_MspInit+0x220>)
 8003b16:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003b18:	2329      	movs	r3, #41	; 0x29
 8003b1a:	e791      	b.n	8003a40 <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART2)
 8003b1c:	4a37      	ldr	r2, [pc, #220]	; (8003bfc <HAL_UART_MspInit+0x224>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d127      	bne.n	8003b72 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b22:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_UART_MspInit+0x1f8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b24:	210c      	movs	r1, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b26:	482b      	ldr	r0, [pc, #172]	; (8003bd4 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b28:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart2_rx.Instance = DMA1_Stream6;
 8003b2c:	4c34      	ldr	r4, [pc, #208]	; (8003c00 <HAL_UART_MspInit+0x228>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003b32:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003b36:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003b3a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003b3e:	9207      	str	r2, [sp, #28]
 8003b40:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	9308      	str	r3, [sp, #32]
 8003b58:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b60:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b62:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b64:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b66:	f003 fbb7 	bl	80072d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream6;
 8003b6a:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <HAL_UART_MspInit+0x22c>)
 8003b6c:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003b6e:	232b      	movs	r3, #43	; 0x2b
 8003b70:	e766      	b.n	8003a40 <HAL_UART_MspInit+0x68>
  else if(huart->Instance==USART3)
 8003b72:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <HAL_UART_MspInit+0x230>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	f47f af77 	bne.w	8003a68 <HAL_UART_MspInit+0x90>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <HAL_UART_MspInit+0x1f8>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b7c:	a90b      	add	r1, sp, #44	; 0x2c
 8003b7e:	4823      	ldr	r0, [pc, #140]	; (8003c0c <HAL_UART_MspInit+0x234>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b80:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8003b84:	4c22      	ldr	r4, [pc, #136]	; (8003c10 <HAL_UART_MspInit+0x238>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b86:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b8a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003b8e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003b92:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003b96:	9209      	str	r2, [sp, #36]	; 0x24
 8003b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003b9e:	f042 0208 	orr.w	r2, r2, #8
 8003ba2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba6:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8003bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003bbc:	2307      	movs	r3, #7
 8003bbe:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bc0:	f003 fb8a 	bl	80072d8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8003bc4:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <HAL_UART_MspInit+0x23c>)
 8003bc6:	6023      	str	r3, [r4, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003bc8:	232d      	movs	r3, #45	; 0x2d
 8003bca:	e739      	b.n	8003a40 <HAL_UART_MspInit+0x68>
 8003bcc:	40004c00 	.word	0x40004c00
 8003bd0:	58024400 	.word	0x58024400
 8003bd4:	58020000 	.word	0x58020000
 8003bd8:	2400966c 	.word	0x2400966c
 8003bdc:	40020058 	.word	0x40020058
 8003be0:	40007800 	.word	0x40007800
 8003be4:	58021000 	.word	0x58021000
 8003be8:	2400dd6c 	.word	0x2400dd6c
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40011000 	.word	0x40011000
 8003bf4:	2400ddec 	.word	0x2400ddec
 8003bf8:	40020088 	.word	0x40020088
 8003bfc:	40004400 	.word	0x40004400
 8003c00:	240096e8 	.word	0x240096e8
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	40004800 	.word	0x40004800
 8003c0c:	58020c00 	.word	0x58020c00
 8003c10:	24009884 	.word	0x24009884
 8003c14:	400200b8 	.word	0x400200b8

08003c18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c18:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003c1a:	4601      	mov	r1, r0
{
 8003c1c:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2019      	movs	r0, #25
 8003c22:	f002 f997 	bl	8005f54 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003c26:	2019      	movs	r0, #25
 8003c28:	f002 f9c6 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003c2c:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <HAL_InitTick+0x70>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c2e:	4669      	mov	r1, sp
 8003c30:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003c32:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003c36:	4c15      	ldr	r4, [pc, #84]	; (8003c8c <HAL_InitTick+0x74>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003c38:	f042 0201 	orr.w	r2, r2, #1
 8003c3c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003c40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c4c:	f004 fdfa 	bl	8008844 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003c50:	f004 fde6 	bl	8008820 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <HAL_InitTick+0x78>)
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003c56:	0040      	lsls	r0, r0, #1
  htim1.Instance = TIM1;
 8003c58:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003c5a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003c5e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <HAL_InitTick+0x7c>)
 8003c62:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c66:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8003c68:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8003c6a:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003c6c:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8003c6e:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c70:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003c72:	f007 fd67 	bl	800b744 <HAL_TIM_Base_Init>
 8003c76:	b920      	cbnz	r0, 8003c82 <HAL_InitTick+0x6a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f007 fc2b 	bl	800b4d4 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8003c7e:	b00a      	add	sp, #40	; 0x28
 8003c80:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8003c82:	2001      	movs	r0, #1
 8003c84:	e7fb      	b.n	8003c7e <HAL_InitTick+0x66>
 8003c86:	bf00      	nop
 8003c88:	58024400 	.word	0x58024400
 8003c8c:	24020520 	.word	0x24020520
 8003c90:	40010000 	.word	0x40010000
 8003c94:	000f4240 	.word	0x000f4240

08003c98 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c98:	4770      	bx	lr

08003c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c9a:	e7fe      	b.n	8003c9a <HardFault_Handler>

08003c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c9c:	e7fe      	b.n	8003c9c <MemManage_Handler>

08003c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c9e:	e7fe      	b.n	8003c9e <BusFault_Handler>

08003ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ca0:	e7fe      	b.n	8003ca0 <UsageFault_Handler>

08003ca2 <DebugMon_Handler>:
 8003ca2:	4770      	bx	lr

08003ca4 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003ca4:	4801      	ldr	r0, [pc, #4]	; (8003cac <DMA1_Stream0_IRQHandler+0x8>)
 8003ca6:	f003 b86d 	b.w	8006d84 <HAL_DMA_IRQHandler>
 8003caa:	bf00      	nop
 8003cac:	2401c368 	.word	0x2401c368

08003cb0 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003cb0:	4801      	ldr	r0, [pc, #4]	; (8003cb8 <DMA1_Stream1_IRQHandler+0x8>)
 8003cb2:	f003 b867 	b.w	8006d84 <HAL_DMA_IRQHandler>
 8003cb6:	bf00      	nop
 8003cb8:	2400baa4 	.word	0x2400baa4

08003cbc <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8003cbc:	4801      	ldr	r0, [pc, #4]	; (8003cc4 <DMA1_Stream2_IRQHandler+0x8>)
 8003cbe:	f003 b861 	b.w	8006d84 <HAL_DMA_IRQHandler>
 8003cc2:	bf00      	nop
 8003cc4:	24020498 	.word	0x24020498

08003cc8 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003cc8:	4801      	ldr	r0, [pc, #4]	; (8003cd0 <DMA1_Stream3_IRQHandler+0x8>)
 8003cca:	f003 b85b 	b.w	8006d84 <HAL_DMA_IRQHandler>
 8003cce:	bf00      	nop
 8003cd0:	2400966c 	.word	0x2400966c

08003cd4 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8003cd4:	4801      	ldr	r0, [pc, #4]	; (8003cdc <DMA1_Stream4_IRQHandler+0x8>)
 8003cd6:	f003 b855 	b.w	8006d84 <HAL_DMA_IRQHandler>
 8003cda:	bf00      	nop
 8003cdc:	2400dd6c 	.word	0x2400dd6c

08003ce0 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ce0:	4801      	ldr	r0, [pc, #4]	; (8003ce8 <DMA1_Stream5_IRQHandler+0x8>)
 8003ce2:	f003 b84f 	b.w	8006d84 <HAL_DMA_IRQHandler>
 8003ce6:	bf00      	nop
 8003ce8:	2400ddec 	.word	0x2400ddec

08003cec <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003cec:	4801      	ldr	r0, [pc, #4]	; (8003cf4 <DMA1_Stream6_IRQHandler+0x8>)
 8003cee:	f003 b849 	b.w	8006d84 <HAL_DMA_IRQHandler>
 8003cf2:	bf00      	nop
 8003cf4:	240096e8 	.word	0x240096e8

08003cf8 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cf8:	4801      	ldr	r0, [pc, #4]	; (8003d00 <TIM1_UP_IRQHandler+0x8>)
 8003cfa:	f007 bc0d 	b.w	800b518 <HAL_TIM_IRQHandler>
 8003cfe:	bf00      	nop
 8003d00:	24020520 	.word	0x24020520

08003d04 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003d04:	4801      	ldr	r0, [pc, #4]	; (8003d0c <SPI1_IRQHandler+0x8>)
 8003d06:	f007 babb 	b.w	800b280 <HAL_SPI_IRQHandler>
 8003d0a:	bf00      	nop
 8003d0c:	2401a1f4 	.word	0x2401a1f4

08003d10 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003d10:	4801      	ldr	r0, [pc, #4]	; (8003d18 <SPI2_IRQHandler+0x8>)
 8003d12:	f007 bab5 	b.w	800b280 <HAL_SPI_IRQHandler>
 8003d16:	bf00      	nop
 8003d18:	24009768 	.word	0x24009768

08003d1c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003d1c:	4801      	ldr	r0, [pc, #4]	; (8003d24 <DMA1_Stream7_IRQHandler+0x8>)
 8003d1e:	f003 b831 	b.w	8006d84 <HAL_DMA_IRQHandler>
 8003d22:	bf00      	nop
 8003d24:	24009884 	.word	0x24009884

08003d28 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003d28:	4801      	ldr	r0, [pc, #4]	; (8003d30 <SDMMC1_IRQHandler+0x8>)
 8003d2a:	f006 bb07 	b.w	800a33c <HAL_SD_IRQHandler>
 8003d2e:	bf00      	nop
 8003d30:	2400bb1c 	.word	0x2400bb1c

08003d34 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003d34:	4801      	ldr	r0, [pc, #4]	; (8003d3c <SPI3_IRQHandler+0x8>)
 8003d36:	f007 baa3 	b.w	800b280 <HAL_SPI_IRQHandler>
 8003d3a:	bf00      	nop
 8003d3c:	2400dc70 	.word	0x2400dc70

08003d40 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d40:	4801      	ldr	r0, [pc, #4]	; (8003d48 <DMA2_Stream4_IRQHandler+0x8>)
 8003d42:	f003 b81f 	b.w	8006d84 <HAL_DMA_IRQHandler>
 8003d46:	bf00      	nop
 8003d48:	24011ff0 	.word	0x24011ff0

08003d4c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003d4c:	4801      	ldr	r0, [pc, #4]	; (8003d54 <OTG_FS_IRQHandler+0x8>)
 8003d4e:	f003 bc69 	b.w	8007624 <HAL_PCD_IRQHandler>
 8003d52:	bf00      	nop
 8003d54:	2402235c 	.word	0x2402235c

08003d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <_sbrk+0x5c>)
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <_sbrk+0x60>)
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <_sbrk+0x64>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <_sbrk+0x64>)
 8003d76:	4a12      	ldr	r2, [pc, #72]	; (8003dc0 <_sbrk+0x68>)
 8003d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <_sbrk+0x64>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d207      	bcs.n	8003d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d88:	f00e fc10 	bl	80125ac <__errno>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	230c      	movs	r3, #12
 8003d90:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
 8003d96:	e009      	b.n	8003dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <_sbrk+0x64>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <_sbrk+0x64>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <_sbrk+0x64>)
 8003da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003daa:	68fb      	ldr	r3, [r7, #12]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	24080000 	.word	0x24080000
 8003db8:	00000f00 	.word	0x00000f00
 8003dbc:	240002c0 	.word	0x240002c0
 8003dc0:	24022768 	.word	0x24022768

08003dc4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003dc4:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <SystemInit+0xa4>)
 8003dc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003dca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003dd2:	4a26      	ldr	r2, [pc, #152]	; (8003e6c <SystemInit+0xa8>)
 8003dd4:	6813      	ldr	r3, [r2, #0]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	2b06      	cmp	r3, #6
 8003ddc:	d805      	bhi.n	8003dea <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003dde:	6813      	ldr	r3, [r2, #0]
 8003de0:	f023 030f 	bic.w	r3, r3, #15
 8003de4:	f043 0307 	orr.w	r3, r3, #7
 8003de8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003dea:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <SystemInit+0xac>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003df8:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <SystemInit+0xb0>)
 8003dfa:	6819      	ldr	r1, [r3, #0]
 8003dfc:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003dfe:	491b      	ldr	r1, [pc, #108]	; (8003e6c <SystemInit+0xa8>)
  RCC->CR &= 0xEAF6ED7FU;
 8003e00:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e02:	680a      	ldr	r2, [r1, #0]
 8003e04:	f002 020f 	and.w	r2, r2, #15
 8003e08:	2a07      	cmp	r2, #7
 8003e0a:	d905      	bls.n	8003e18 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e0c:	680a      	ldr	r2, [r1, #0]
 8003e0e:	f022 020f 	bic.w	r2, r2, #15
 8003e12:	f042 0207 	orr.w	r2, r2, #7
 8003e16:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e18:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e1a:	4917      	ldr	r1, [pc, #92]	; (8003e78 <SystemInit+0xb4>)
  RCC->D1CFGR = 0x00000000;
 8003e1c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003e1e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003e20:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003e22:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e24:	4915      	ldr	r1, [pc, #84]	; (8003e7c <SystemInit+0xb8>)
 8003e26:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e28:	4915      	ldr	r1, [pc, #84]	; (8003e80 <SystemInit+0xbc>)
 8003e2a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e2e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e30:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e32:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003e3c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e3e:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003e40:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <SystemInit+0xc0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e4c:	d202      	bcs.n	8003e54 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <SystemInit+0xc4>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e54:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <SystemInit+0xc8>)
 8003e56:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e60:	4b01      	ldr	r3, [pc, #4]	; (8003e68 <SystemInit+0xa4>)
 8003e62:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	e000ed00 	.word	0xe000ed00
 8003e6c:	52002000 	.word	0x52002000
 8003e70:	58024400 	.word	0x58024400
 8003e74:	eaf6ed7f 	.word	0xeaf6ed7f
 8003e78:	02020200 	.word	0x02020200
 8003e7c:	01ff0000 	.word	0x01ff0000
 8003e80:	01010280 	.word	0x01010280
 8003e84:	5c001000 	.word	0x5c001000
 8003e88:	51008108 	.word	0x51008108
 8003e8c:	52004000 	.word	0x52004000

08003e90 <vTaskBattery>:

#include "tasks/task_battery.h"

float get_temp(uint16_t adc_value);

void vTaskBattery(void *argument) {
 8003e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e94:	ed2d 8b10 	vpush	{d8-d15}

	/* Initialise Variables */
	double mah;
	double curr = 0;
	double supp = 0;
	double bat = 0;
 8003e98:	ed9f db6d 	vldr	d13, [pc, #436]	; 8004050 <vTaskBattery+0x1c0>
		tick_count += tick_update;

		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
				- (3.3 * 0.107)) / 0.264; // CURR2
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003e9c:	ed9f ab6e 	vldr	d10, [pc, #440]	; 8004058 <vTaskBattery+0x1c8>
void vTaskBattery(void *argument) {
 8003ea0:	b08a      	sub	sp, #40	; 0x28
	battery_data_t battery_data = { 0 };
 8003ea2:	2400      	movs	r4, #0
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 8003ea4:	2732      	movs	r7, #50	; 0x32
	double supp = 0;
 8003ea6:	eeb0 cb4d 	vmov.f64	d12, d13
	battery_data_t battery_data = { 0 };
 8003eaa:	f8ad 4010 	strh.w	r4, [sp, #16]
	double curr = 0;
 8003eae:	eeb0 eb4d 	vmov.f64	d14, d13
 8003eb2:	eeb0 8b4a 	vmov.f64	d8, d10
	battery_data_t battery_data = { 0 };
 8003eb6:	e9cd 4402 	strd	r4, r4, [sp, #8]
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003eba:	ed9f bb69 	vldr	d11, [pc, #420]	; 8004060 <vTaskBattery+0x1d0>
	tick_count = osKernelGetTickCount();
 8003ebe:	f00b fe67 	bl	800fb90 <osKernelGetTickCount>
 8003ec2:	4606      	mov	r6, r0
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 8003ec4:	f00b fe78 	bl	800fbb8 <osKernelGetTickFreq>
 8003ec8:	fbb0 f7f7 	udiv	r7, r0, r7
	HAL_ADC_Stop_DMA(&hadc1);
 8003ecc:	4870      	ldr	r0, [pc, #448]	; (8004090 <vTaskBattery+0x200>)
 8003ece:	f001 fda6 	bl	8005a1e <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8003ed2:	2205      	movs	r2, #5
 8003ed4:	a905      	add	r1, sp, #20
 8003ed6:	486e      	ldr	r0, [pc, #440]	; (8004090 <vTaskBattery+0x200>)
 8003ed8:	f001 fcde 	bl	8005898 <HAL_ADC_Start_DMA>
	osDelay(500);
 8003edc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ee0:	f00b fec4 	bl	800fc6c <osDelay>
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003ee4:	eddd 7a07 	vldr	s15, [sp, #28]
		tick_count += tick_update;
 8003ee8:	443e      	add	r6, r7
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003eea:	eeb8 fb67 	vcvt.f64.u32	d15, s15
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
 8003eee:	e9dd 8505 	ldrd	r8, r5, [sp, #20]
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003ef2:	ee2f fb0a 	vmul.f64	d15, d15, d10
		double current1 = ((double) adc_value[3] * (2.5 / 4096.0)
				- (3.3 * 0.107)) / 0.264; // CURR1
		get_temp(adc_value[4]); // temp

		if ((adc_value[0] | adc_value[1]) == 0) {
 8003ef6:	ea58 0305 	orrs.w	r3, r8, r5
		float battery_voltage = adc_value[2] * (2.5 / 4096) * 5.2; // BAT
 8003efa:	ee2f fb0b 	vmul.f64	d15, d15, d11
 8003efe:	eeb7 fbcf 	vcvt.f32.f64	s30, d15
		double current1 = ((double) adc_value[3] * (2.5 / 4096.0)
 8003f02:	eddd fa08 	vldr	s31, [sp, #32]
		if ((adc_value[0] | adc_value[1]) == 0) {
 8003f06:	d107      	bne.n	8003f18 <vTaskBattery+0x88>
			HAL_ADC_Stop_DMA(&hadc1);
 8003f08:	4861      	ldr	r0, [pc, #388]	; (8004090 <vTaskBattery+0x200>)
 8003f0a:	f001 fd88 	bl	8005a1e <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8003f0e:	2205      	movs	r2, #5
 8003f10:	a905      	add	r1, sp, #20
 8003f12:	485f      	ldr	r0, [pc, #380]	; (8004090 <vTaskBattery+0x200>)
 8003f14:	f001 fcc0 	bl	8005898 <HAL_ADC_Start_DMA>
		}
		// Filter adc values
		if (counter < 50) {
 8003f18:	2c31      	cmp	r4, #49	; 0x31
 8003f1a:	dc2e      	bgt.n	8003f7a <vTaskBattery+0xea>
		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
 8003f1c:	ee07 8a90 	vmov	s15, r8
			counter++;
 8003f20:	3401      	adds	r4, #1
				- (3.3 * 0.107)) / 0.264; // CURR2
 8003f22:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8004068 <vTaskBattery+0x1d8>
		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
 8003f26:	eeb8 7b67 	vcvt.f64.u32	d7, s15
				- (3.3 * 0.107)) / 0.264; // CURR2
 8003f2a:	eeb0 4b46 	vmov.f64	d4, d6
		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
 8003f2e:	ed9f 3b50 	vldr	d3, [pc, #320]	; 8004070 <vTaskBattery+0x1e0>
				- (3.3 * 0.107)) / 0.264; // CURR2
 8003f32:	eea7 4b08 	vfma.f64	d4, d7, d8
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
 8003f36:	ee07 5a90 	vmov	s15, r5
 8003f3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003f3e:	ee27 7b08 	vmul.f64	d7, d7, d8
		double current2 = ((double) adc_value[0] * (2.5 / 4096.0)
 8003f42:	ee84 5b03 	vdiv.f64	d5, d4, d3
		double current1 = ((double) adc_value[3] * (2.5 / 4096.0)
 8003f46:	eeb8 4b6f 	vcvt.f64.u32	d4, s31
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
 8003f4a:	ee37 7b07 	vadd.f64	d7, d7, d7
			curr += current1 + current2;
			supp += supply_voltage;
			bat += battery_voltage;
 8003f4e:	eeb7 facf 	vcvt.f64.f32	d15, s30
				- (3.3 * 0.107)) / 0.264; // CURR1
 8003f52:	eea4 6b08 	vfma.f64	d6, d4, d8
		float supply_voltage = adc_value[1] * (2.5 / 4096) * 2; // 3V3
 8003f56:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			bat += battery_voltage;
 8003f5a:	ee3d db0f 	vadd.f64	d13, d13, d15
			supp += supply_voltage;
 8003f5e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
		double current1 = ((double) adc_value[3] * (2.5 / 4096.0)
 8003f62:	ee86 4b03 	vdiv.f64	d4, d6, d3
			supp += supply_voltage;
 8003f66:	ee3c cb07 	vadd.f64	d12, d12, d7
			curr += current1 + current2;
 8003f6a:	ee35 5b04 	vadd.f64	d5, d5, d4
 8003f6e:	ee3e eb05 	vadd.f64	d14, d14, d5
				global_battery_data.current = battery_data.current;
				ReleaseMutex(&battery_mutex);
			}
		}
		/* Sleep */
		osDelayUntil(tick_count);
 8003f72:	4630      	mov	r0, r6
 8003f74:	f00b fe94 	bl	800fca0 <osDelayUntil>
	for (;;) {
 8003f78:	e7b4      	b.n	8003ee4 <vTaskBattery+0x54>
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8003f7a:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8004078 <vTaskBattery+0x1e8>
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003f7e:	2232      	movs	r2, #50	; 0x32
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8003f80:	ee8e 7b06 	vdiv.f64	d7, d14, d6
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 8003f84:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8004080 <vTaskBattery+0x1f0>
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8003f88:	ee39 9b07 	vadd.f64	d9, d9, d7
			battery_data.consumption = (uint16_t) mah;
 8003f8c:	eefc 7bc9 	vcvt.u32.f64	s15, d9
 8003f90:	ee17 3a90 	vmov	r3, s15
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003f94:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8004088 <vTaskBattery+0x1f8>
			battery_data.consumption = (uint16_t) mah;
 8003f98:	b29c      	uxth	r4, r3
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003f9a:	ee2e eb07 	vmul.f64	d14, d14, d7
			battery_data.consumption = (uint16_t) mah;
 8003f9e:	f8ad 400e 	strh.w	r4, [sp, #14]
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003fa2:	eefc 7bce 	vcvt.u32.f64	s15, d14
 8003fa6:	ee17 3a90 	vmov	r3, s15
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 8003faa:	ee8e 7b06 	vdiv.f64	d7, d14, d6
 8003fae:	eddf 6a39 	vldr	s13, [pc, #228]	; 8004094 <vTaskBattery+0x204>
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003fb2:	b29b      	uxth	r3, r3
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 8003fb4:	ee8f 6a26 	vdiv.f32	s12, s30, s13
			battery_data.current = (uint16_t) (curr * 1000) / 50;
 8003fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fbc:	f8ad 300c 	strh.w	r3, [sp, #12]
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 8003fc0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003fc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003fc8:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8003fcc:	ee17 2a10 	vmov	r2, s14
			battery_data.supply = (uint16_t) (supp * 20);
 8003fd0:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 8003fd4:	b290      	uxth	r0, r2
			battery_data.supply = (uint16_t) (supp * 20);
 8003fd6:	ee2c cb07 	vmul.f64	d12, d12, d7
			battery_data.power = (curr * 1000) / 50 * (battery_voltage / 50);
 8003fda:	f8ad 0010 	strh.w	r0, [sp, #16]
			battery_data.battery = (uint16_t) (bat * 20);
 8003fde:	ee2d db07 	vmul.f64	d13, d13, d7
			battery_data.supply = (uint16_t) (supp * 20);
 8003fe2:	eebc cbcc 	vcvt.u32.f64	s24, d12
			UsbPrint(
 8003fe6:	e9cd 4000 	strd	r4, r0, [sp]
			battery_data.battery = (uint16_t) (bat * 20);
 8003fea:	eebc dbcd 	vcvt.u32.f64	s26, d13
			battery_data.supply = (uint16_t) (supp * 20);
 8003fee:	ee1c 2a10 	vmov	r2, s24
			UsbPrint(
 8003ff2:	4829      	ldr	r0, [pc, #164]	; (8004098 <vTaskBattery+0x208>)
			battery_data.supply = (uint16_t) (supp * 20);
 8003ff4:	b291      	uxth	r1, r2
			battery_data.battery = (uint16_t) (bat * 20);
 8003ff6:	ee1d 2a10 	vmov	r2, s26
			battery_data.supply = (uint16_t) (supp * 20);
 8003ffa:	f8ad 1008 	strh.w	r1, [sp, #8]
			battery_data.battery = (uint16_t) (bat * 20);
 8003ffe:	b292      	uxth	r2, r2
 8004000:	f8ad 200a 	strh.w	r2, [sp, #10]
			UsbPrint(
 8004004:	f7fe fd88 	bl	8002b18 <UsbPrint>
			logSensor(osKernelGetTickCount(), 1, BATTERY, &battery_data);
 8004008:	f00b fdc2 	bl	800fb90 <osKernelGetTickCount>
 800400c:	ab02      	add	r3, sp, #8
 800400e:	2204      	movs	r2, #4
 8004010:	2101      	movs	r1, #1
 8004012:	f7fe fc57 	bl	80028c4 <logSensor>
			if (AcquireMutex(&battery_mutex) == osOK) {
 8004016:	4821      	ldr	r0, [pc, #132]	; (800409c <vTaskBattery+0x20c>)
 8004018:	f7fe fbf2 	bl	8002800 <AcquireMutex>
 800401c:	4604      	mov	r4, r0
 800401e:	b998      	cbnz	r0, 8004048 <vTaskBattery+0x1b8>
				global_battery_data.battery = battery_data.battery;
 8004020:	4b1f      	ldr	r3, [pc, #124]	; (80040a0 <vTaskBattery+0x210>)
 8004022:	f8bd 200a 	ldrh.w	r2, [sp, #10]
				ReleaseMutex(&battery_mutex);
 8004026:	481d      	ldr	r0, [pc, #116]	; (800409c <vTaskBattery+0x20c>)
				global_battery_data.battery = battery_data.battery;
 8004028:	801a      	strh	r2, [r3, #0]
				global_battery_data.consumption = battery_data.consumption;
 800402a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800402e:	809a      	strh	r2, [r3, #4]
				global_battery_data.current = battery_data.current;
 8004030:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8004034:	805a      	strh	r2, [r3, #2]
				ReleaseMutex(&battery_mutex);
 8004036:	f7fe fbee 	bl	8002816 <ReleaseMutex>
			bat = 0;
 800403a:	ed9f db05 	vldr	d13, [pc, #20]	; 8004050 <vTaskBattery+0x1c0>
			supp = 0;
 800403e:	eeb0 cb4d 	vmov.f64	d12, d13
			curr = 0;
 8004042:	eeb0 eb4d 	vmov.f64	d14, d13
 8004046:	e794      	b.n	8003f72 <vTaskBattery+0xe2>
			counter = 0;
 8004048:	2400      	movs	r4, #0
 800404a:	e7f6      	b.n	800403a <vTaskBattery+0x1aa>
 800404c:	f3af 8000 	nop.w
	...
 800405c:	3f440000 	.word	0x3f440000
 8004060:	cccccccd 	.word	0xcccccccd
 8004064:	4014cccc 	.word	0x4014cccc
 8004068:	be0ded28 	.word	0xbe0ded28
 800406c:	bfd69930 	.word	0xbfd69930
 8004070:	4189374c 	.word	0x4189374c
 8004074:	3fd0e560 	.word	0x3fd0e560
 8004078:	00000000 	.word	0x00000000
 800407c:	40668000 	.word	0x40668000
 8004080:	00000000 	.word	0x00000000
 8004084:	40490000 	.word	0x40490000
 8004088:	00000000 	.word	0x00000000
 800408c:	408f4000 	.word	0x408f4000
 8004090:	2400dd08 	.word	0x2400dd08
 8004094:	42480000 	.word	0x42480000
 8004098:	08014880 	.word	0x08014880
 800409c:	240097f0 	.word	0x240097f0
 80040a0:	2400dd00 	.word	0x2400dd00

080040a4 <vTaskController>:

#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */

void vTaskController(void *argument) {
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	ed2d 8b02 	vpush	{d8}
 80040aa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
	flight_phase_detection_t current_flight_phase_detection = { 0 };
 80040ae:	2100      	movs	r1, #0

	/* Initialize the control_data struct */
	control_data_t control_data = { 0 };
 80040b0:	f44f 6284 	mov.w	r2, #1056	; 0x420

	osDelay(1100);

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80040b4:	2564      	movs	r5, #100	; 0x64
	control_data_t control_data = { 0 };
 80040b6:	a812      	add	r0, sp, #72	; 0x48
	flight_phase_detection_t current_flight_phase_detection = { 0 };
 80040b8:	9102      	str	r1, [sp, #8]
		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global,
				&state_est_data_local, sizeof(state_est_data_local));

		control_data.sf_ref_altitude_AGL =
				((float) state_est_data_global.position_world[2]) / 1000;
 80040ba:	ed9f 8a34 	vldr	s16, [pc, #208]	; 800418c <vTaskController+0xe8>
		ReadMutex(&state_est_mutex, &state_est_data_global,
 80040be:	4e34      	ldr	r6, [pc, #208]	; (8004190 <vTaskController+0xec>)
 80040c0:	eef0 8a48 	vmov.f32	s17, s16
	flight_phase_detection_t current_flight_phase_detection = { 0 };
 80040c4:	e9cd 1100 	strd	r1, r1, [sp]
	control_data_t control_data = { 0 };
 80040c8:	f00e fab5 	bl	8012636 <memset>
	control_data_init(&control_data);
 80040cc:	a812      	add	r0, sp, #72	; 0x48
 80040ce:	f7fc ff51 	bl	8000f74 <control_data_init>
	osDelay(1100);
 80040d2:	f240 404c 	movw	r0, #1100	; 0x44c
 80040d6:	f00b fdc9 	bl	800fc6c <osDelay>
	tick_count = osKernelGetTickCount();
 80040da:	f00b fd59 	bl	800fb90 <osKernelGetTickCount>
 80040de:	4604      	mov	r4, r0
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80040e0:	f00b fd6a 	bl	800fbb8 <osKernelGetTickFreq>
 80040e4:	fbb0 f5f5 	udiv	r5, r0, r5
		ReadMutex(&state_est_mutex, &state_est_data_global,
 80040e8:	233c      	movs	r3, #60	; 0x3c
 80040ea:	aa03      	add	r2, sp, #12
 80040ec:	4928      	ldr	r1, [pc, #160]	; (8004190 <vTaskController+0xec>)
		tick_count += tick_update;
 80040ee:	442c      	add	r4, r5
		ReadMutex(&state_est_mutex, &state_est_data_global,
 80040f0:	4828      	ldr	r0, [pc, #160]	; (8004194 <vTaskController+0xf0>)
 80040f2:	f7fe fb93 	bl	800281c <ReadMutex>
				((float) state_est_data_global.position_world[2]) / 1000;
 80040f6:	edd6 7a02 	vldr	s15, [r6, #8]
		control_data.sf_velocity =
				((float) state_est_data_global.velocity_world[2]) / 1000;

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 80040fa:	233c      	movs	r3, #60	; 0x3c
 80040fc:	466a      	mov	r2, sp
				((float) state_est_data_global.position_world[2]) / 1000;
 80040fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8004102:	4925      	ldr	r1, [pc, #148]	; (8004198 <vTaskController+0xf4>)
 8004104:	4825      	ldr	r0, [pc, #148]	; (800419c <vTaskController+0xf8>)
				((float) state_est_data_global.position_world[2]) / 1000;
 8004106:	ee87 7a88 	vdiv.f32	s14, s15, s16
				((float) state_est_data_global.velocity_world[2]) / 1000;
 800410a:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
 800410e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		control_data.sf_ref_altitude_AGL =
 8004112:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
				((float) state_est_data_global.velocity_world[2]) / 1000;
 8004116:	ee87 7a88 	vdiv.f32	s14, s15, s16
		control_data.sf_velocity =
 800411a:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 800411e:	f7fe fb7d 	bl	800281c <ReadMutex>
				&current_flight_phase_detection, sizeof(state_est_data_local));

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
		if (LQR_ACTIVE) {
			compute_control_input(&control_data,
 8004122:	a812      	add	r0, sp, #72	; 0x48
 8004124:	4669      	mov	r1, sp
 8004126:	f7fc ffdb 	bl	80010e0 <compute_control_input>
		} else {
			compute_test_control_input(&control_data);
		}

		/* Write Control Input into Global Variable */
		if (AcquireMutex(&controller_mutex) == osOK) {
 800412a:	481d      	ldr	r0, [pc, #116]	; (80041a0 <vTaskController+0xfc>)
 800412c:	f7fe fb68 	bl	8002800 <AcquireMutex>
 8004130:	b958      	cbnz	r0, 800414a <vTaskController+0xa6>
			controller_output_global = (int32_t) (control_data.control_input
					* 1000);
 8004132:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
			controller_output_global = (int32_t) (control_data.control_input
 8004136:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <vTaskController+0x100>)
					* 1000);
 8004138:	ee67 7a88 	vmul.f32	s15, s15, s16
			ReleaseMutex(&controller_mutex);
 800413c:	4818      	ldr	r0, [pc, #96]	; (80041a0 <vTaskController+0xfc>)
			controller_output_global = (int32_t) (control_data.control_input
 800413e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004142:	edc3 7a00 	vstr	s15, [r3]
			ReleaseMutex(&controller_mutex);
 8004146:	f7fe fb66 	bl	8002816 <ReleaseMutex>
		}

		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 800414a:	f00b fd21 	bl	800fb90 <osKernelGetTickCount>
				(int32_t) (control_data.control_input * 1000),
				(int32_t) (control_data.reference_error * 1000),
				(int32_t) (control_data.integrated_error * 1000));
 800414e:	eddd 6a14 	vldr	s13, [sp, #80]	; 0x50
				(int32_t) (control_data.reference_error * 1000),
 8004152:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
				(int32_t) (control_data.control_input * 1000),
 8004156:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
				(int32_t) (control_data.integrated_error * 1000));
 800415a:	ee66 6aa8 	vmul.f32	s13, s13, s17
				(int32_t) (control_data.reference_error * 1000),
 800415e:	ee27 7a28 	vmul.f32	s14, s14, s17
				(int32_t) (control_data.control_input * 1000),
 8004162:	ee67 7aa8 	vmul.f32	s15, s15, s17
		logControllerOutput(osKernelGetTickCount(),
 8004166:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800416a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800416e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004172:	ee16 3a90 	vmov	r3, s13
 8004176:	ee17 2a10 	vmov	r2, s14
 800417a:	ee17 1a90 	vmov	r1, s15
 800417e:	f7fe fc83 	bl	8002a88 <logControllerOutput>

		/* Sleep */
		osDelayUntil(tick_count);
 8004182:	4620      	mov	r0, r4
 8004184:	f00b fd8c 	bl	800fca0 <osDelayUntil>
		tick_count += tick_update;
 8004188:	e7ae      	b.n	80040e8 <vTaskController+0x44>
 800418a:	bf00      	nop
 800418c:	447a0000 	.word	0x447a0000
 8004190:	24000284 	.word	0x24000284
 8004194:	24016078 	.word	0x24016078
 8004198:	24000224 	.word	0x24000224
 800419c:	24009760 	.word	0x24009760
 80041a0:	2400dcf8 	.word	0x2400dcf8
 80041a4:	24000210 	.word	0x24000210

080041a8 <vTaskFlash>:
 *  Created on: Aug 20, 2020
 *      Author: Jonas
 */
#include "tasks/task_flash.h"

void vTaskFlash(void *argument) {
 80041a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tick_count, tick_update;
	erase_chip();

	osDelay(500);

	tick_update = osKernelGetTickFreq() / FLASH_SAMPLING_FREQ;
 80041ac:	260a      	movs	r6, #10
void vTaskFlash(void *argument) {
 80041ae:	b08a      	sub	sp, #40	; 0x28
	erase_chip();
 80041b0:	f7fc fd32 	bl	8000c18 <erase_chip>
	osDelay(500);
 80041b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041b8:	f00b fd58 	bl	800fc6c <osDelay>
		data_write.data[i] = i;
	}

//	uint32_t data_read = 0;

	uint32_t address = 0x0000F300;
 80041bc:	f44f 4473 	mov.w	r4, #62208	; 0xf300
	tick_update = osKernelGetTickFreq() / FLASH_SAMPLING_FREQ;
 80041c0:	f00b fcfa 	bl	800fbb8 <osKernelGetTickFreq>
		osDelay(1);
		write_data(address, &data_write, sizeof(data_write));
		osDelay(1);
		read_data(address, &data_read, sizeof(data_read));

		UsbPrint("[FLASH]: ID: %ld, D0: %ld\n", chip_id, data_read.data[2]);
 80041c4:	4f1a      	ldr	r7, [pc, #104]	; (8004230 <vTaskFlash+0x88>)
	tick_update = osKernelGetTickFreq() / FLASH_SAMPLING_FREQ;
 80041c6:	fbb0 f6f6 	udiv	r6, r0, r6
	tick_count = osKernelGetTickCount();
 80041ca:	f00b fce1 	bl	800fb90 <osKernelGetTickCount>
		data_write.data[i] = i;
 80041ce:	2301      	movs	r3, #1
 80041d0:	2200      	movs	r2, #0
 80041d2:	2102      	movs	r1, #2
	tick_count = osKernelGetTickCount();
 80041d4:	4605      	mov	r5, r0
		data_write.data[i] = i;
 80041d6:	e9cd 2300 	strd	r2, r3, [sp]
 80041da:	2303      	movs	r3, #3
 80041dc:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80041e0:	2304      	movs	r3, #4
 80041e2:	9304      	str	r3, [sp, #16]
		osDelay(1);
 80041e4:	2001      	movs	r0, #1
		tick_count += tick_update;
 80041e6:	4435      	add	r5, r6
		osDelay(1);
 80041e8:	f00b fd40 	bl	800fc6c <osDelay>
		chip_id =  read_chip_id();
 80041ec:	f7fc fc42 	bl	8000a74 <read_chip_id>
 80041f0:	4680      	mov	r8, r0
		osDelay(1);
 80041f2:	2001      	movs	r0, #1
 80041f4:	f00b fd3a 	bl	800fc6c <osDelay>
		write_data(address, &data_write, sizeof(data_write));
 80041f8:	4669      	mov	r1, sp
 80041fa:	2214      	movs	r2, #20
 80041fc:	4620      	mov	r0, r4
 80041fe:	f7fc fc96 	bl	8000b2e <write_data>
		osDelay(1);
 8004202:	2001      	movs	r0, #1
 8004204:	f00b fd32 	bl	800fc6c <osDelay>
		read_data(address, &data_read, sizeof(data_read));
 8004208:	2214      	movs	r2, #20
 800420a:	4620      	mov	r0, r4
		address += 0x100;
 800420c:	f504 7480 	add.w	r4, r4, #256	; 0x100
		read_data(address, &data_read, sizeof(data_read));
 8004210:	eb0d 0102 	add.w	r1, sp, r2
 8004214:	f7fc fc44 	bl	8000aa0 <read_data>
		UsbPrint("[FLASH]: ID: %ld, D0: %ld\n", chip_id, data_read.data[2]);
 8004218:	9a07      	ldr	r2, [sp, #28]
 800421a:	4641      	mov	r1, r8
 800421c:	4638      	mov	r0, r7
 800421e:	f7fe fc7b 	bl	8002b18 <UsbPrint>

		data_write.data[2]++;
 8004222:	9b02      	ldr	r3, [sp, #8]
			counter = 1;
			address = start_address;
		};

		/* Sleep */
		osDelayUntil(tick_count);
 8004224:	4628      	mov	r0, r5
		data_write.data[2]++;
 8004226:	3301      	adds	r3, #1
 8004228:	9302      	str	r3, [sp, #8]
		osDelayUntil(tick_count);
 800422a:	f00b fd39 	bl	800fca0 <osDelayUntil>
 800422e:	e7d9      	b.n	80041e4 <vTaskFlash+0x3c>
 8004230:	080148d0 	.word	0x080148d0

08004234 <vTaskFsm>:
 *      Author: Jonas
 */

#include "tasks/task_fsm.h"

void vTaskFsm(void *argument) {
 8004234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004238:	b09d      	sub	sp, #116	; 0x74
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 800423a:	2500      	movs	r5, #0

	osDelay(1000);

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 800423c:	2664      	movs	r6, #100	; 0x64
	while (1) {
		/* Tick Update */
		tick_count += tick_update;

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 800423e:	4f31      	ldr	r7, [pc, #196]	; (8004304 <vTaskFsm+0xd0>)
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004240:	ac02      	add	r4, sp, #8
 8004242:	9502      	str	r5, [sp, #8]
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8004244:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800431c <vTaskFsm+0xe8>
	reset_flight_phase_detection(&flight_phase_detection);
 8004248:	4620      	mov	r0, r4
			reset_flight_phase_detection(&flight_phase_detection);
			telemetry_command = IDLE_COMMAND;
		}

		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm,
 800424a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8004320 <vTaskFsm+0xec>
	flight_phase_detection_t flight_phase_detection = { 0 };
 800424e:	e9c4 5501 	strd	r5, r5, [r4, #4]
	reset_flight_phase_detection(&flight_phase_detection);
 8004252:	f7fd f9db 	bl	800160c <reset_flight_phase_detection>
	state_est_data_t state_est_data_fsm = { 0 };
 8004256:	4629      	mov	r1, r5
 8004258:	223c      	movs	r2, #60	; 0x3c
 800425a:	a80d      	add	r0, sp, #52	; 0x34
 800425c:	f00e f9eb 	bl	8012636 <memset>
	init_env(&dummy_env);
 8004260:	a809      	add	r0, sp, #36	; 0x24
 8004262:	f7fc ffc5 	bl	80011f0 <init_env>
	init_env(&environment);
 8004266:	a805      	add	r0, sp, #20
 8004268:	f7fc ffc2 	bl	80011f0 <init_env>
	command_e telemetry_command = IDLE_COMMAND;
 800426c:	239b      	movs	r3, #155	; 0x9b
	osDelay(1000);
 800426e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	command_e telemetry_command = IDLE_COMMAND;
 8004272:	f88d 3007 	strb.w	r3, [sp, #7]
	osDelay(1000);
 8004276:	f00b fcf9 	bl	800fc6c <osDelay>
	tick_count = osKernelGetTickCount();
 800427a:	f00b fc89 	bl	800fb90 <osKernelGetTickCount>
 800427e:	4605      	mov	r5, r0
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 8004280:	f00b fc9a 	bl	800fbb8 <osKernelGetTickFreq>
 8004284:	fbb0 f6f6 	udiv	r6, r0, r6
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8004288:	2301      	movs	r3, #1
 800428a:	f10d 0207 	add.w	r2, sp, #7
 800428e:	4639      	mov	r1, r7
 8004290:	4640      	mov	r0, r8
 8004292:	f7fe fac3 	bl	800281c <ReadMutex>
		if (telemetry_command == CALIBRATE_SENSORS
 8004296:	f89d 3007 	ldrb.w	r3, [sp, #7]
		tick_count += tick_update;
 800429a:	4435      	add	r5, r6
		if (telemetry_command == CALIBRATE_SENSORS
 800429c:	2b49      	cmp	r3, #73	; 0x49
 800429e:	d109      	bne.n	80042b4 <vTaskFsm+0x80>
				&& flight_phase_detection.flight_phase == IDLE) {
 80042a0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d105      	bne.n	80042b4 <vTaskFsm+0x80>
			reset_flight_phase_detection(&flight_phase_detection);
 80042a8:	4620      	mov	r0, r4
 80042aa:	f7fd f9af 	bl	800160c <reset_flight_phase_detection>
			telemetry_command = IDLE_COMMAND;
 80042ae:	239b      	movs	r3, #155	; 0x9b
 80042b0:	f88d 3007 	strb.w	r3, [sp, #7]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm,
 80042b4:	233c      	movs	r3, #60	; 0x3c
 80042b6:	aa0d      	add	r2, sp, #52	; 0x34
 80042b8:	4649      	mov	r1, r9
 80042ba:	4813      	ldr	r0, [pc, #76]	; (8004308 <vTaskFsm+0xd4>)
 80042bc:	f7fe faae 	bl	800281c <ReadMutex>
				sizeof(state_est_data_global));

		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 80042c0:	2310      	movs	r3, #16
 80042c2:	aa05      	add	r2, sp, #20
 80042c4:	4911      	ldr	r1, [pc, #68]	; (800430c <vTaskFsm+0xd8>)
 80042c6:	4812      	ldr	r0, [pc, #72]	; (8004310 <vTaskFsm+0xdc>)
 80042c8:	f7fe faa8 	bl	800281c <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm,
 80042cc:	4620      	mov	r0, r4
 80042ce:	aa05      	add	r2, sp, #20
 80042d0:	a90d      	add	r1, sp, #52	; 0x34
 80042d2:	f7fd f911 	bl	80014f8 <detect_flight_phase>
				&environment);

		/* Write updated flight Phase detection */
		if (AcquireMutex(&fsm_mutex) == osOK) {
 80042d6:	480f      	ldr	r0, [pc, #60]	; (8004314 <vTaskFsm+0xe0>)
 80042d8:	f7fe fa92 	bl	8002800 <AcquireMutex>
 80042dc:	b938      	cbnz	r0, 80042ee <vTaskFsm+0xba>
			global_flight_phase_detection = flight_phase_detection;
 80042de:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <vTaskFsm+0xe4>)
 80042e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80042e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 80042e8:	480a      	ldr	r0, [pc, #40]	; (8004314 <vTaskFsm+0xe0>)
 80042ea:	f7fe fa94 	bl	8002816 <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 80042ee:	f00b fc4f 	bl	800fb90 <osKernelGetTickCount>
 80042f2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80042f6:	f7fe fb77 	bl	80029e8 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 80042fa:	4628      	mov	r0, r5
 80042fc:	f00b fcd0 	bl	800fca0 <osDelayUntil>
		tick_count += tick_update;
 8004300:	e7c2      	b.n	8004288 <vTaskFsm+0x54>
 8004302:	bf00      	nop
 8004304:	240160a4 	.word	0x240160a4
 8004308:	24016078 	.word	0x24016078
 800430c:	24000214 	.word	0x24000214
 8004310:	2400bc64 	.word	0x2400bc64
 8004314:	24009760 	.word	0x24009760
 8004318:	24000224 	.word	0x24000224
 800431c:	2400bc5c 	.word	0x2400bc5c
 8004320:	24000284 	.word	0x24000284

08004324 <vTaskGps>:
 *      Author: Luca Jost
 */

#include "tasks/task_gps.h"

void vTaskGps(void *argument) {
 8004324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	UBLOX GPS1 = { 0, &huart1 };
 8004328:	222c      	movs	r2, #44	; 0x2c
void vTaskGps(void *argument) {
 800432a:	b0ad      	sub	sp, #180	; 0xb4
	UBLOX GPS1 = { 0, &huart1 };
 800432c:	2100      	movs	r1, #0
	UBLOX GPS2 = { 1, &huart2 };
 800432e:	2401      	movs	r4, #1
	UBLOX GPS1 = { 0, &huart1 };
 8004330:	eb0d 0002 	add.w	r0, sp, r2
	UBLOX GPS3 = { 2, &huart3 };
 8004334:	ae21      	add	r6, sp, #132	; 0x84
	UBLOX GPS1 = { 0, &huart1 };
 8004336:	f00e f97e 	bl	8012636 <memset>
 800433a:	4b60      	ldr	r3, [pc, #384]	; (80044bc <vTaskGps+0x198>)
	UBLOX GPS2 = { 1, &huart2 };
 800433c:	222c      	movs	r2, #44	; 0x2c
 800433e:	2100      	movs	r1, #0
 8004340:	a816      	add	r0, sp, #88	; 0x58
	UBLOX GPS1 = { 0, &huart1 };
 8004342:	930c      	str	r3, [sp, #48]	; 0x30
	UBLOX GPS2 = { 1, &huart2 };
 8004344:	f00e f977 	bl	8012636 <memset>
 8004348:	4b5d      	ldr	r3, [pc, #372]	; (80044c0 <vTaskGps+0x19c>)
	UBLOX GPS3 = { 2, &huart3 };
 800434a:	222c      	movs	r2, #44	; 0x2c
 800434c:	2100      	movs	r1, #0
 800434e:	4630      	mov	r0, r6
	UBLOX GPS2 = { 1, &huart2 };
 8004350:	9317      	str	r3, [sp, #92]	; 0x5c
 8004352:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
	UBLOX GPS3 = { 2, &huart3 };
 8004356:	f00e f96e 	bl	8012636 <memset>
 800435a:	2302      	movs	r3, #2

	int timeout_counter1 = 0;
	int timeout_counter2 = 0;
	int timeout_counter3 = 0;
 800435c:	2500      	movs	r5, #0
//			gps_telemetry.lon_deg = GPS3.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS3.data.lon_decimal;
//			gps_telemetry.satellite = GPS3.data.satellite;
		}

		if (AcquireMutex(&gps_mutex) == osOK) {
 800435e:	f8df a168 	ldr.w	sl, [pc, #360]	; 80044c8 <vTaskGps+0x1a4>
	UBLOX GPS3 = { 2, &huart3 };
 8004362:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
	int timeout_counter2 = 0;
 8004366:	46a8      	mov	r8, r5
	UBLOX GPS3 = { 2, &huart3 };
 8004368:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <vTaskGps+0x1a0>)
	int timeout_counter1 = 0;
 800436a:	462f      	mov	r7, r5
	UBLOX GPS3 = { 2, &huart3 };
 800436c:	9322      	str	r3, [sp, #136]	; 0x88
	tick_count = osKernelGetTickCount();
 800436e:	f00b fc0f 	bl	800fb90 <osKernelGetTickCount>
 8004372:	4681      	mov	r9, r0
	tick_update = osKernelGetTickFreq() / GPS_SAMPLE_RATE;
 8004374:	f00b fc20 	bl	800fbb8 <osKernelGetTickFreq>
 8004378:	fa20 fb04 	lsr.w	fp, r0, r4
	osDelay(600);
 800437c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004380:	f00b fc74 	bl	800fc6c <osDelay>
	gps_dma_init(&GPS1);
 8004384:	a80b      	add	r0, sp, #44	; 0x2c
 8004386:	f7fc fd6f 	bl	8000e68 <gps_dma_init>
	gps_dma_init(&GPS2);
 800438a:	a816      	add	r0, sp, #88	; 0x58
 800438c:	f7fc fd6c 	bl	8000e68 <gps_dma_init>
	gps_dma_init(&GPS3);
 8004390:	4630      	mov	r0, r6
 8004392:	f7fc fd69 	bl	8000e68 <gps_dma_init>
		if (gps_read_sensor(&GPS1)) {
 8004396:	a80b      	add	r0, sp, #44	; 0x2c
		tick_count += tick_update;
 8004398:	44d9      	add	r9, fp
		if (gps_read_sensor(&GPS1)) {
 800439a:	f7fc fd7b 	bl	8000e94 <gps_read_sensor>
 800439e:	b930      	cbnz	r0, 80043ae <vTaskGps+0x8a>
			timeout_counter1++;
 80043a0:	3701      	adds	r7, #1
			if (timeout_counter1 == 10) {
 80043a2:	2f0a      	cmp	r7, #10
 80043a4:	d104      	bne.n	80043b0 <vTaskGps+0x8c>
 80043a6:	9001      	str	r0, [sp, #4]
				gps_reset(&GPS1);
 80043a8:	a80b      	add	r0, sp, #44	; 0x2c
 80043aa:	f7fc fd99 	bl	8000ee0 <gps_reset>
			timeout_counter1 = 0;
 80043ae:	2700      	movs	r7, #0
		if (gps_read_sensor(&GPS2)) {
 80043b0:	a816      	add	r0, sp, #88	; 0x58
 80043b2:	f7fc fd6f 	bl	8000e94 <gps_read_sensor>
 80043b6:	b940      	cbnz	r0, 80043ca <vTaskGps+0xa6>
			timeout_counter2++;
 80043b8:	f108 0801 	add.w	r8, r8, #1
			if (timeout_counter2 == 10) {
 80043bc:	f1b8 0f0a 	cmp.w	r8, #10
 80043c0:	d105      	bne.n	80043ce <vTaskGps+0xaa>
 80043c2:	9001      	str	r0, [sp, #4]
				gps_reset(&GPS2);
 80043c4:	a816      	add	r0, sp, #88	; 0x58
 80043c6:	f7fc fd8b 	bl	8000ee0 <gps_reset>
			timeout_counter2 = 0;
 80043ca:	f04f 0800 	mov.w	r8, #0
		if (gps_read_sensor(&GPS3)) {
 80043ce:	4630      	mov	r0, r6
 80043d0:	f7fc fd60 	bl	8000e94 <gps_read_sensor>
 80043d4:	b930      	cbnz	r0, 80043e4 <vTaskGps+0xc0>
			timeout_counter3++;
 80043d6:	3501      	adds	r5, #1
			if (timeout_counter3 == 10) {
 80043d8:	2d0a      	cmp	r5, #10
 80043da:	d104      	bne.n	80043e6 <vTaskGps+0xc2>
 80043dc:	9001      	str	r0, [sp, #4]
				gps_reset(&GPS3);
 80043de:	4630      	mov	r0, r6
 80043e0:	f7fc fd7e 	bl	8000ee0 <gps_reset>
			timeout_counter3 = 0;
 80043e4:	2500      	movs	r5, #0
		logSensor(osKernelGetTickCount(), 1, GPS, &GPS1.data);
 80043e6:	f00b fbd3 	bl	800fb90 <osKernelGetTickCount>
 80043ea:	ab0d      	add	r3, sp, #52	; 0x34
 80043ec:	2203      	movs	r2, #3
 80043ee:	2101      	movs	r1, #1
 80043f0:	f7fe fa68 	bl	80028c4 <logSensor>
		logSensor(osKernelGetTickCount(), 2, GPS, &GPS2.data);
 80043f4:	f00b fbcc 	bl	800fb90 <osKernelGetTickCount>
 80043f8:	ab18      	add	r3, sp, #96	; 0x60
 80043fa:	2203      	movs	r2, #3
 80043fc:	2102      	movs	r1, #2
 80043fe:	f7fe fa61 	bl	80028c4 <logSensor>
		logSensor(osKernelGetTickCount(), 3, GPS, &GPS3.data);
 8004402:	f00b fbc5 	bl	800fb90 <osKernelGetTickCount>
 8004406:	2203      	movs	r2, #3
 8004408:	ab23      	add	r3, sp, #140	; 0x8c
 800440a:	4611      	mov	r1, r2
 800440c:	f7fe fa5a 	bl	80028c4 <logSensor>
		if (GPS1.data.satellite >= GPS2.data.satellite) {
 8004410:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8004414:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8004418:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 800441c:	428a      	cmp	r2, r1
 800441e:	d30f      	bcc.n	8004440 <vTaskGps+0x11c>
			if (GPS1.data.satellite >= GPS3.data.satellite) {
 8004420:	4293      	cmp	r3, r2
 8004422:	d913      	bls.n	800444c <vTaskGps+0x128>
			gps_telemetry = GPS3.data;
 8004424:	f10d 0c8c 	add.w	ip, sp, #140	; 0x8c
 8004428:	ac02      	add	r4, sp, #8
 800442a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800442e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004430:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004436:	f8dc 3000 	ldr.w	r3, [ip]
 800443a:	6023      	str	r3, [r4, #0]
 800443c:	2403      	movs	r4, #3
 800443e:	e012      	b.n	8004466 <vTaskGps+0x142>
		} else if (GPS2.data.satellite >= GPS3.data.satellite) {
 8004440:	4299      	cmp	r1, r3
 8004442:	d22d      	bcs.n	80044a0 <vTaskGps+0x17c>
		} else if (GPS3.data.satellite >= GPS1.data.satellite) {
 8004444:	429a      	cmp	r2, r3
 8004446:	d9ed      	bls.n	8004424 <vTaskGps+0x100>
		if (choose_GPS == 1) {
 8004448:	2c01      	cmp	r4, #1
 800444a:	d127      	bne.n	800449c <vTaskGps+0x178>
			gps_telemetry = GPS1.data;
 800444c:	ac0d      	add	r4, sp, #52	; 0x34
 800444e:	f10d 0c08 	add.w	ip, sp, #8
 8004452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004454:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800445a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	2401      	movs	r4, #1
 8004462:	f8cc 3000 	str.w	r3, [ip]
		if (AcquireMutex(&gps_mutex) == osOK) {
 8004466:	4650      	mov	r0, sl
 8004468:	f7fe f9ca 	bl	8002800 <AcquireMutex>
 800446c:	b990      	cbnz	r0, 8004494 <vTaskGps+0x170>
			globalGPS = gps_telemetry;
 800446e:	f10d 0e08 	add.w	lr, sp, #8
 8004472:	f8df c058 	ldr.w	ip, [pc, #88]	; 80044cc <vTaskGps+0x1a8>
 8004476:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800447a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800447e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004482:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004486:	f8de 3000 	ldr.w	r3, [lr]
			ReleaseMutex(&gps_mutex);
 800448a:	4650      	mov	r0, sl
			globalGPS = gps_telemetry;
 800448c:	f8cc 3000 	str.w	r3, [ip]
			ReleaseMutex(&gps_mutex);
 8004490:	f7fe f9c1 	bl	8002816 <ReleaseMutex>
		}
		/* Sleep */
		osDelayUntil(tick_count);
 8004494:	4648      	mov	r0, r9
 8004496:	f00b fc03 	bl	800fca0 <osDelayUntil>
		tick_count += tick_update;
 800449a:	e77c      	b.n	8004396 <vTaskGps+0x72>
		} else if (choose_GPS == 2) {
 800449c:	2c02      	cmp	r4, #2
 800449e:	d1c1      	bne.n	8004424 <vTaskGps+0x100>
			gps_telemetry = GPS2.data;
 80044a0:	ac18      	add	r4, sp, #96	; 0x60
 80044a2:	f10d 0c08 	add.w	ip, sp, #8
 80044a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80044ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	2402      	movs	r4, #2
 80044b6:	f8cc 3000 	str.w	r3, [ip]
 80044ba:	e7d4      	b.n	8004466 <vTaskGps+0x142>
 80044bc:	2400fec8 	.word	0x2400fec8
 80044c0:	2401c2dc 	.word	0x2401c2dc
 80044c4:	24009904 	.word	0x24009904
 80044c8:	2401a104 	.word	0x2401a104
 80044cc:	24016080 	.word	0x24016080

080044d0 <testairbrakes>:

		osDelayUntil(tick_count);
	}
}

void testairbrakes(int32_t position) {
 80044d0:	b508      	push	{r3, lr}
	MoveToPositionPPM(position);
 80044d2:	f7fc f997 	bl	8000804 <MoveToPositionPPM>
	osDelay(100);
 80044d6:	2064      	movs	r0, #100	; 0x64
 80044d8:	f00b fbc8 	bl	800fc6c <osDelay>
	MoveToPositionPPM(2);
 80044dc:	2002      	movs	r0, #2
}
 80044de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MoveToPositionPPM(2);
 80044e2:	f7fc b98f 	b.w	8000804 <MoveToPositionPPM>
	...

080044e8 <vTaskMotorCont>:
void vTaskMotorCont(void *argument) {
 80044e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	command_e telemetry_command = IDLE_COMMAND;
 80044ec:	239b      	movs	r3, #155	; 0x9b
void vTaskMotorCont(void *argument) {
 80044ee:	b086      	sub	sp, #24
	flight_phase_detection_t flight_phase_detection = { 0 };
 80044f0:	2400      	movs	r4, #0
	osDelay(3000);
 80044f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
	command_e telemetry_command = IDLE_COMMAND;
 80044f6:	f88d 3003 	strb.w	r3, [sp, #3]
	flight_phase_detection.flight_phase = IDLE;
 80044fa:	2301      	movs	r3, #1
	flight_phase_detection_t flight_phase_detection = { 0 };
 80044fc:	9403      	str	r4, [sp, #12]
	flight_phase_detection.flight_phase = IDLE;
 80044fe:	f88d 300c 	strb.w	r3, [sp, #12]
	flight_phase_detection.mach_number = SUBSONIC;
 8004502:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004506:	9405      	str	r4, [sp, #20]
	flight_phase_detection.mach_number = SUBSONIC;
 8004508:	9304      	str	r3, [sp, #16]
	osDelay(3000);
 800450a:	f00b fbaf 	bl	800fc6c <osDelay>
	int32_t measured_motor_position = 0;
 800450e:	e9cd 4401 	strd	r4, r4, [sp, #4]
	while (EnableMotor() != osOK) {
 8004512:	f7fc fa41 	bl	8000998 <EnableMotor>
 8004516:	2800      	cmp	r0, #0
 8004518:	f040 808e 	bne.w	8004638 <vTaskMotorCont+0x150>
	SetPositionMode(position_mode);
 800451c:	2001      	movs	r0, #1
 800451e:	f7fc f95c 	bl	80007da <SetPositionMode>
	while (SetPositionMode(position_mode) != osOK) {
 8004522:	2001      	movs	r0, #1
 8004524:	f7fc f959 	bl	80007da <SetPositionMode>
 8004528:	2800      	cmp	r0, #0
 800452a:	f040 808a 	bne.w	8004642 <vTaskMotorCont+0x15a>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration,
 800452e:	4a47      	ldr	r2, [pc, #284]	; (800464c <vTaskMotorCont+0x164>)
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8004530:	2619      	movs	r6, #25
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration,
 8004532:	f242 7010 	movw	r0, #10000	; 0x2710
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8004536:	f8df 8134 	ldr.w	r8, [pc, #308]	; 800466c <vTaskMotorCont+0x184>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration,
 800453a:	4611      	mov	r1, r2
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 800453c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8004670 <vTaskMotorCont+0x188>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration,
 8004540:	f7fc f98e 	bl	8000860 <ConfigurePPM>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8004544:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8004674 <vTaskMotorCont+0x18c>
	tick_count = osKernelGetTickCount();
 8004548:	f00b fb22 	bl	800fb90 <osKernelGetTickCount>
 800454c:	4605      	mov	r5, r0
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 800454e:	f00b fb33 	bl	800fbb8 <osKernelGetTickFreq>
 8004552:	fbb0 f6f6 	udiv	r6, r0, r6
		motor_status = GetPosition(&measured_motor_position);
 8004556:	a802      	add	r0, sp, #8
		tick_count += tick_update;
 8004558:	4435      	add	r5, r6
		motor_status = GetPosition(&measured_motor_position);
 800455a:	f7fc fa48 	bl	80009ee <GetPosition>
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 800455e:	2301      	movs	r3, #1
 8004560:	f10d 0203 	add.w	r2, sp, #3
 8004564:	4641      	mov	r1, r8
 8004566:	4648      	mov	r0, r9
 8004568:	f7fe f958 	bl	800281c <ReadMutex>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 800456c:	230c      	movs	r3, #12
 800456e:	4651      	mov	r1, sl
 8004570:	4837      	ldr	r0, [pc, #220]	; (8004650 <vTaskMotorCont+0x168>)
 8004572:	eb0d 0203 	add.w	r2, sp, r3
 8004576:	f7fe f951 	bl	800281c <ReadMutex>
		ReadMutex(&controller_mutex, &controller_output_global,
 800457a:	2304      	movs	r3, #4
 800457c:	4935      	ldr	r1, [pc, #212]	; (8004654 <vTaskMotorCont+0x16c>)
 800457e:	eb0d 0203 	add.w	r2, sp, r3
 8004582:	4835      	ldr	r0, [pc, #212]	; (8004658 <vTaskMotorCont+0x170>)
 8004584:	f7fe f94a 	bl	800281c <ReadMutex>
		desired_motor_position = (int32_t) (((float) controller_actuation)
 8004588:	eddd 7a01 	vldr	s15, [sp, #4]
				/ 1000 * (-150));
 800458c:	eddf 6a33 	vldr	s13, [pc, #204]	; 800465c <vTaskMotorCont+0x174>
 8004590:	f06f 0395 	mvn.w	r3, #149	; 0x95
		desired_motor_position = (int32_t) (((float) controller_actuation)
 8004594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				/ 1000 * (-150));
 8004598:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800459c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004660 <vTaskMotorCont+0x178>
 80045a0:	ee67 7a87 	vmul.f32	s15, s15, s14
		desired_motor_position = (int32_t) (((float) controller_actuation)
 80045a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045a8:	ee17 1a90 	vmov	r1, s15
 80045ac:	4299      	cmp	r1, r3
 80045ae:	bfb8      	it	lt
 80045b0:	4619      	movlt	r1, r3
		if (flight_phase_detection.flight_phase == COASTING) {
 80045b2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80045b6:	2902      	cmp	r1, #2
 80045b8:	bfa8      	it	ge
 80045ba:	2102      	movge	r1, #2
 80045bc:	2b04      	cmp	r3, #4
			motor_status = MoveToPositionPPM(desired_motor_position);
 80045be:	bf0c      	ite	eq
 80045c0:	4608      	moveq	r0, r1
			motor_status = MoveToPositionPPM(2);
 80045c2:	2002      	movne	r0, #2
 80045c4:	460c      	mov	r4, r1
 80045c6:	f7fc f91d 	bl	8000804 <MoveToPositionPPM>
		if (flight_phase_detection.flight_phase == IDLE
 80045ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
			motor_status = MoveToPositionPPM(2);
 80045ce:	4607      	mov	r7, r0
		if (flight_phase_detection.flight_phase == IDLE
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d110      	bne.n	80045f6 <vTaskMotorCont+0x10e>
				&& telemetry_command == AIRBRAKE_TEST_COMMAND
 80045d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80045d8:	2bd9      	cmp	r3, #217	; 0xd9
 80045da:	d10c      	bne.n	80045f6 <vTaskMotorCont+0x10e>
				&& osKernelGetTickCount() < 60000) {
 80045dc:	f00b fad8 	bl	800fb90 <osKernelGetTickCount>
 80045e0:	f64e 235f 	movw	r3, #59999	; 0xea5f
 80045e4:	4298      	cmp	r0, r3
 80045e6:	d806      	bhi.n	80045f6 <vTaskMotorCont+0x10e>
			testairbrakes(-140);
 80045e8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 80045ec:	f7ff ff70 	bl	80044d0 <testairbrakes>
			telemetry_command = IDLE_COMMAND;
 80045f0:	239b      	movs	r3, #155	; 0x9b
 80045f2:	f88d 3003 	strb.w	r3, [sp, #3]
		logMotor(osKernelGetTickCount(), desired_motor_position,
 80045f6:	f00b facb 	bl	800fb90 <osKernelGetTickCount>
 80045fa:	9a02      	ldr	r2, [sp, #8]
 80045fc:	4621      	mov	r1, r4
 80045fe:	f7fe fa69 	bl	8002ad4 <logMotor>
		if (motor_status != osOK
 8004602:	b15f      	cbz	r7, 800461c <vTaskMotorCont+0x134>
				&& flight_phase_detection.flight_phase == IDLE) {
 8004604:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d107      	bne.n	800461c <vTaskMotorCont+0x134>
			DisableMotor();
 800460c:	f7fc f8d4 	bl	80007b8 <DisableMotor>
			osDelay(1000);
 8004610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004614:	f00b fb2a 	bl	800fc6c <osDelay>
			EnableMotor();
 8004618:	f7fc f9be 	bl	8000998 <EnableMotor>
		if (AcquireMutex(&motor_mutex) == osOK) {
 800461c:	4811      	ldr	r0, [pc, #68]	; (8004664 <vTaskMotorCont+0x17c>)
 800461e:	f7fe f8ef 	bl	8002800 <AcquireMutex>
 8004622:	b928      	cbnz	r0, 8004630 <vTaskMotorCont+0x148>
			global_airbrake_extension = measured_motor_position;
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <vTaskMotorCont+0x180>)
 8004626:	9a02      	ldr	r2, [sp, #8]
			ReleaseMutex(&motor_mutex);
 8004628:	480e      	ldr	r0, [pc, #56]	; (8004664 <vTaskMotorCont+0x17c>)
			global_airbrake_extension = measured_motor_position;
 800462a:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&motor_mutex);
 800462c:	f7fe f8f3 	bl	8002816 <ReleaseMutex>
		osDelayUntil(tick_count);
 8004630:	4628      	mov	r0, r5
 8004632:	f00b fb35 	bl	800fca0 <osDelayUntil>
		tick_count += tick_update;
 8004636:	e78e      	b.n	8004556 <vTaskMotorCont+0x6e>
		osDelay(1000);
 8004638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800463c:	f00b fb16 	bl	800fc6c <osDelay>
 8004640:	e767      	b.n	8004512 <vTaskMotorCont+0x2a>
		osDelay(1000);
 8004642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004646:	f00b fb11 	bl	800fc6c <osDelay>
 800464a:	e76a      	b.n	8004522 <vTaskMotorCont+0x3a>
 800464c:	000186a0 	.word	0x000186a0
 8004650:	24009760 	.word	0x24009760
 8004654:	24000210 	.word	0x24000210
 8004658:	2400dcf8 	.word	0x2400dcf8
 800465c:	447a0000 	.word	0x447a0000
 8004660:	c3160000 	.word	0xc3160000
 8004664:	240098fc 	.word	0x240098fc
 8004668:	2401a1f0 	.word	0x2401a1f0
 800466c:	240160a4 	.word	0x240160a4
 8004670:	2400bc5c 	.word	0x2400bc5c
 8004674:	24000224 	.word	0x24000224

08004678 <vTaskPeripherals>:
 *      Author: Jonas
 */

#include "tasks/task_peripherals.h"

void vTaskPeripherals(void *argument) {
 8004678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* For periodic update */
	uint32_t tick_count, tick_update;

	osDelay(1200);
 800467c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
void vTaskPeripherals(void *argument) {
 8004680:	b087      	sub	sp, #28
	osDelay(1200);
 8004682:	f00b faf3 	bl	800fc6c <osDelay>
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 8004686:	2201      	movs	r2, #1
 8004688:	2102      	movs	r1, #2
 800468a:	4860      	ldr	r0, [pc, #384]	; (800480c <vTaskPeripherals+0x194>)

	/* Telemetry Command */
	command_e telemetry_command = IDLE_COMMAND;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 800468c:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 800468e:	f002 ff13 	bl	80074b8 <HAL_GPIO_WritePin>
	command_e telemetry_command = IDLE_COMMAND;
 8004692:	239b      	movs	r3, #155	; 0x9b
	reset_flight_phase_detection(&flight_phase_detection);
 8004694:	a803      	add	r0, sp, #12
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004696:	9405      	str	r4, [sp, #20]
	bool buzzer_on_telemetry = false;
 8004698:	46a2      	mov	sl, r4
	command_e telemetry_command = IDLE_COMMAND;
 800469a:	f88d 300b 	strb.w	r3, [sp, #11]
	bool buzzer_on_fsm = false;
 800469e:	46a1      	mov	r9, r4
	bool camera_ready = false;
 80046a0:	4627      	mov	r7, r4
	bool camera_wait = false;
 80046a2:	4626      	mov	r6, r4
	uint32_t camera_counter = 0;
 80046a4:	4625      	mov	r5, r4
	flight_phase_detection_t flight_phase_detection = { 0 };
 80046a6:	e9cd 4403 	strd	r4, r4, [sp, #12]
	reset_flight_phase_detection(&flight_phase_detection);
 80046aa:	f7fc ffaf 	bl	800160c <reset_flight_phase_detection>

	/* Infinite loop */

	tick_update = osKernelGetTickFreq() / PERIPHERALS_SAMPLING_FREQ;
 80046ae:	f00b fa83 	bl	800fbb8 <osKernelGetTickFreq>
 80046b2:	230a      	movs	r3, #10
 80046b4:	fbb0 fbf3 	udiv	fp, r0, r3
	tick_count = osKernelGetTickCount();
 80046b8:	f00b fa6a 	bl	800fb90 <osKernelGetTickCount>
 80046bc:	4680      	mov	r8, r0
	bool camera_trigger = false;
 80046be:	9401      	str	r4, [sp, #4]
	bool camera_enabled = false;
 80046c0:	9400      	str	r4, [sp, #0]
	while (1) {
		/* Tick Update */
		tick_count += tick_update;

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 80046c2:	2301      	movs	r3, #1
 80046c4:	f10d 020b 	add.w	r2, sp, #11
 80046c8:	4951      	ldr	r1, [pc, #324]	; (8004810 <vTaskPeripherals+0x198>)
		tick_count += tick_update;
 80046ca:	44d8      	add	r8, fp
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 80046cc:	4851      	ldr	r0, [pc, #324]	; (8004814 <vTaskPeripherals+0x19c>)
 80046ce:	f7fe f8a5 	bl	800281c <ReadMutex>
				sizeof(global_telemetry_command));

		/* Read Flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 80046d2:	230c      	movs	r3, #12
 80046d4:	4950      	ldr	r1, [pc, #320]	; (8004818 <vTaskPeripherals+0x1a0>)
 80046d6:	eb0d 0203 	add.w	r2, sp, r3
 80046da:	4850      	ldr	r0, [pc, #320]	; (800481c <vTaskPeripherals+0x1a4>)
 80046dc:	f7fe f89e 	bl	800281c <ReadMutex>
				&flight_phase_detection, sizeof(global_flight_phase_detection));

		/* Enable Buzzer trough Telemetry */
		if (telemetry_command == ENABLE_BUZZER) {
 80046e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
			buzzer_on_telemetry = !buzzer_on_telemetry;
		}

		/* Enable Buzzer Trough FSM */
		if (flight_phase_detection.flight_phase == RECOVERY) {
 80046e4:	f89d 200c 	ldrb.w	r2, [sp, #12]
		if (telemetry_command == ENABLE_BUZZER) {
 80046e8:	2b71      	cmp	r3, #113	; 0x71
			buzzer_on_telemetry = !buzzer_on_telemetry;
 80046ea:	bf08      	it	eq
 80046ec:	f08a 0a01 	eoreq.w	sl, sl, #1
			buzzer_on_fsm = true;
 80046f0:	2a06      	cmp	r2, #6
 80046f2:	bf08      	it	eq
 80046f4:	f04f 0901 	moveq.w	r9, #1
		}

		/* Enable Self Power Hold */
		if (telemetry_command == TELEMETRY_HIGH_SAMPLING) {
 80046f8:	2b0d      	cmp	r3, #13
 80046fa:	d104      	bne.n	8004706 <vTaskPeripherals+0x8e>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 80046fc:	2200      	movs	r2, #0
 80046fe:	2102      	movs	r1, #2
 8004700:	4842      	ldr	r0, [pc, #264]	; (800480c <vTaskPeripherals+0x194>)
 8004702:	f002 fed9 	bl	80074b8 <HAL_GPIO_WritePin>
		}

		/* Disable Self Power Hold */
		if (telemetry_command == DISABLE_SELF_HOLD) {
 8004706:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800470a:	2bfb      	cmp	r3, #251	; 0xfb
 800470c:	d104      	bne.n	8004718 <vTaskPeripherals+0xa0>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 800470e:	2201      	movs	r2, #1
 8004710:	2102      	movs	r1, #2
 8004712:	483e      	ldr	r0, [pc, #248]	; (800480c <vTaskPeripherals+0x194>)
 8004714:	f002 fed0 	bl	80074b8 <HAL_GPIO_WritePin>
		}

		/* Start Enable Camera Sequence */
		if ((telemetry_command == ENABLE_CAMERA) && !camera_enabled) {
 8004718:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d113      	bne.n	8004748 <vTaskPeripherals+0xd0>
 8004720:	9b00      	ldr	r3, [sp, #0]
 8004722:	b98b      	cbnz	r3, 8004748 <vTaskPeripherals+0xd0>
			camera_enabled = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_SET);
 8004724:	2201      	movs	r2, #1
 8004726:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800472a:	483d      	ldr	r0, [pc, #244]	; (8004820 <vTaskPeripherals+0x1a8>)
 800472c:	f002 fec4 	bl	80074b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_SET);
 8004730:	2201      	movs	r2, #1
 8004732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004736:	483a      	ldr	r0, [pc, #232]	; (8004820 <vTaskPeripherals+0x1a8>)
 8004738:	f002 febe 	bl	80074b8 <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_ON;
 800473c:	f00b fa28 	bl	800fb90 <osKernelGetTickCount>
			camera_enabled = true;
 8004740:	2301      	movs	r3, #1
			camera_counter = osKernelGetTickCount() + CAMERA_ON;
 8004742:	f600 55ac 	addw	r5, r0, #3500	; 0xdac
			camera_enabled = true;
 8004746:	9300      	str	r3, [sp, #0]
		}

		if ((camera_counter > osKernelGetTickCount()) && !camera_wait) {
 8004748:	f00b fa22 	bl	800fb90 <osKernelGetTickCount>
 800474c:	42a8      	cmp	r0, r5
 800474e:	d211      	bcs.n	8004774 <vTaskPeripherals+0xfc>
 8004750:	b986      	cbnz	r6, 8004774 <vTaskPeripherals+0xfc>
			camera_wait = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_RESET);
 8004752:	4632      	mov	r2, r6
 8004754:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004758:	4831      	ldr	r0, [pc, #196]	; (8004820 <vTaskPeripherals+0x1a8>)
 800475a:	f002 fead 	bl	80074b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 800475e:	4632      	mov	r2, r6
 8004760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004764:	482e      	ldr	r0, [pc, #184]	; (8004820 <vTaskPeripherals+0x1a8>)
 8004766:	f002 fea7 	bl	80074b8 <HAL_GPIO_WritePin>
			camera_wait = true;
 800476a:	2601      	movs	r6, #1
			camera_counter = osKernelGetTickCount() + CAMERA_WAIT;
 800476c:	f00b fa10 	bl	800fb90 <osKernelGetTickCount>
 8004770:	f500 757a 	add.w	r5, r0, #1000	; 0x3e8
		}

		if ((camera_counter > osKernelGetTickCount()) && !camera_trigger) {
 8004774:	f00b fa0c 	bl	800fb90 <osKernelGetTickCount>
 8004778:	42a8      	cmp	r0, r5
 800477a:	d213      	bcs.n	80047a4 <vTaskPeripherals+0x12c>
 800477c:	9b01      	ldr	r3, [sp, #4]
 800477e:	b98b      	cbnz	r3, 80047a4 <vTaskPeripherals+0x12c>
			camera_trigger = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_SET);
 8004780:	2201      	movs	r2, #1
 8004782:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004786:	4826      	ldr	r0, [pc, #152]	; (8004820 <vTaskPeripherals+0x1a8>)
 8004788:	f002 fe96 	bl	80074b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_SET);
 800478c:	2201      	movs	r2, #1
 800478e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004792:	4823      	ldr	r0, [pc, #140]	; (8004820 <vTaskPeripherals+0x1a8>)
 8004794:	f002 fe90 	bl	80074b8 <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_TRIGGER;
 8004798:	f00b f9fa 	bl	800fb90 <osKernelGetTickCount>
			camera_trigger = true;
 800479c:	2301      	movs	r3, #1
			camera_counter = osKernelGetTickCount() + CAMERA_TRIGGER;
 800479e:	f100 05c8 	add.w	r5, r0, #200	; 0xc8
			camera_trigger = true;
 80047a2:	9301      	str	r3, [sp, #4]
		}

		if ((camera_counter > osKernelGetTickCount()) && !camera_ready) {
 80047a4:	f00b f9f4 	bl	800fb90 <osKernelGetTickCount>
 80047a8:	42a8      	cmp	r0, r5
 80047aa:	d20d      	bcs.n	80047c8 <vTaskPeripherals+0x150>
 80047ac:	b967      	cbnz	r7, 80047c8 <vTaskPeripherals+0x150>
			camera_ready = true;
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_RESET);
 80047ae:	463a      	mov	r2, r7
 80047b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047b4:	481a      	ldr	r0, [pc, #104]	; (8004820 <vTaskPeripherals+0x1a8>)
 80047b6:	f002 fe7f 	bl	80074b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 80047ba:	463a      	mov	r2, r7
			camera_ready = true;
 80047bc:	2701      	movs	r7, #1
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 80047be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047c2:	4817      	ldr	r0, [pc, #92]	; (8004820 <vTaskPeripherals+0x1a8>)
 80047c4:	f002 fe78 	bl	80074b8 <HAL_GPIO_WritePin>
		}

		/* Camera first enable for some time, then turn off and finally turn on again */

		/* Enable Buzzer */
		if (buzzer_on_fsm ^ buzzer_on_telemetry) {
 80047c8:	45d1      	cmp	r9, sl
 80047ca:	d011      	beq.n	80047f0 <vTaskPeripherals+0x178>
			if (buzzercounter > (400 / tick_update)) {
 80047cc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80047d0:	fbb3 f3fb 	udiv	r3, r3, fp
 80047d4:	429c      	cmp	r4, r3
 80047d6:	d905      	bls.n	80047e4 <vTaskPeripherals+0x16c>
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
				buzzercounter = 0;
 80047d8:	2400      	movs	r4, #0
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80047da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047de:	4811      	ldr	r0, [pc, #68]	; (8004824 <vTaskPeripherals+0x1ac>)
 80047e0:	f002 fe6f 	bl	80074c2 <HAL_GPIO_TogglePin>
		}

		else if (osKernelGetTickCount() > 5000) {
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
		}
		buzzercounter++;
 80047e4:	3401      	adds	r4, #1

		/* Sleep */
		osDelayUntil(tick_count);
 80047e6:	4640      	mov	r0, r8
		buzzercounter++;
 80047e8:	b2e4      	uxtb	r4, r4
		osDelayUntil(tick_count);
 80047ea:	f00b fa59 	bl	800fca0 <osDelayUntil>
		tick_count += tick_update;
 80047ee:	e768      	b.n	80046c2 <vTaskPeripherals+0x4a>
		else if (osKernelGetTickCount() > 5000) {
 80047f0:	f00b f9ce 	bl	800fb90 <osKernelGetTickCount>
 80047f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80047f8:	4298      	cmp	r0, r3
 80047fa:	d9f3      	bls.n	80047e4 <vTaskPeripherals+0x16c>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80047fc:	2200      	movs	r2, #0
 80047fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004802:	4808      	ldr	r0, [pc, #32]	; (8004824 <vTaskPeripherals+0x1ac>)
 8004804:	f002 fe58 	bl	80074b8 <HAL_GPIO_WritePin>
 8004808:	e7ec      	b.n	80047e4 <vTaskPeripherals+0x16c>
 800480a:	bf00      	nop
 800480c:	58020400 	.word	0x58020400
 8004810:	240160a4 	.word	0x240160a4
 8004814:	2400bc5c 	.word	0x2400bc5c
 8004818:	24000224 	.word	0x24000224
 800481c:	24009760 	.word	0x24009760
 8004820:	58021000 	.word	0x58021000
 8004824:	58020c00 	.word	0x58020c00

08004828 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8004828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Try everything forever;
	for (;;) {
		osDelay(100);
 800482c:	2064      	movs	r0, #100	; 0x64
void vTaskSdCard(void *argument) {
 800482e:	b0cd      	sub	sp, #308	; 0x134
		osDelay(100);
 8004830:	f00b fa1c 	bl	800fc6c <osDelay>
		flight_phase_detection_t local_flight_phase;
		FRESULT res;
		char EULER_LOG_FILE_NAME[13] = "";
 8004834:	2300      	movs	r3, #0
		UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8004836:	4890      	ldr	r0, [pc, #576]	; (8004a78 <vTaskSdCard+0x250>)
		char EULER_LOG_FILE_NAME[13] = "";
 8004838:	9309      	str	r3, [sp, #36]	; 0x24
 800483a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		local_flight_phase.flight_phase = IDLE;
		resetSDCard: //UsbPrint("[STORAGE TASK] Mounting SD card\n");
		do {
			EULER_LOG_FILE_NAME[0] = 0;
			res = f_mount(&EULER_FatFS, "", 1);
 800483e:	4c8f      	ldr	r4, [pc, #572]	; (8004a7c <vTaskSdCard+0x254>)
 8004840:	4d8f      	ldr	r5, [pc, #572]	; (8004a80 <vTaskSdCard+0x258>)
			if (res != FR_OK) {
				UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8004842:	4e90      	ldr	r6, [pc, #576]	; (8004a84 <vTaskSdCard+0x25c>)
		char EULER_LOG_FILE_NAME[13] = "";
 8004844:	e9cd 3307 	strd	r3, r3, [sp, #28]
		UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8004848:	f7fe f966 	bl	8002b18 <UsbPrint>
		local_flight_phase.flight_phase = IDLE;
 800484c:	2301      	movs	r3, #1
 800484e:	f88d 3010 	strb.w	r3, [sp, #16]
			EULER_LOG_FILE_NAME[0] = 0;
 8004852:	2700      	movs	r7, #0
			res = f_mount(&EULER_FatFS, "", 1);
 8004854:	4621      	mov	r1, r4
 8004856:	2201      	movs	r2, #1
 8004858:	4628      	mov	r0, r5
			EULER_LOG_FILE_NAME[0] = 0;
 800485a:	f88d 701c 	strb.w	r7, [sp, #28]
			res = f_mount(&EULER_FatFS, "", 1);
 800485e:	f00a fc9b 	bl	800f198 <f_mount>
			if (res != FR_OK) {
 8004862:	4601      	mov	r1, r0
 8004864:	2800      	cmp	r0, #0
 8004866:	d147      	bne.n	80048f8 <vTaskSdCard+0xd0>
				osDelay(10);
			}
		} while (res != FR_OK);

		logToNewFile: if (!EULER_LOG_FILE_NAME[0]) {
			UsbPrint("[STORAGE TASK] Creating file name\n");
 8004868:	4f87      	ldr	r7, [pc, #540]	; (8004a88 <vTaskSdCard+0x260>)

			unsigned int file_number = 1;

			DIR dj;
			FILINFO fno;
			res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 800486a:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8004ad4 <vTaskSdCard+0x2ac>
		logToNewFile: if (!EULER_LOG_FILE_NAME[0]) {
 800486e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d165      	bne.n	8004942 <vTaskSdCard+0x11a>
			UsbPrint("[STORAGE TASK] Creating file name\n");
 8004876:	4638      	mov	r0, r7
			unsigned int file_number = 1;
 8004878:	f04f 0901 	mov.w	r9, #1
			while (res == FR_OK && fno.fname[0]) {
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 800487c:	f04f 0a64 	mov.w	sl, #100	; 0x64
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8004880:	f04f 0b0a 	mov.w	fp, #10
			UsbPrint("[STORAGE TASK] Creating file name\n");
 8004884:	f7fe f948 	bl	8002b18 <UsbPrint>
			res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8004888:	4643      	mov	r3, r8
 800488a:	4622      	mov	r2, r4
 800488c:	a90b      	add	r1, sp, #44	; 0x2c
 800488e:	a819      	add	r0, sp, #100	; 0x64
 8004890:	f00b f8e3 	bl	800fa5a <f_findfirst>
			while (res == FR_OK && fno.fname[0]) {
 8004894:	2800      	cmp	r0, #0
 8004896:	f040 80eb 	bne.w	8004a70 <vTaskSdCard+0x248>
 800489a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d139      	bne.n	8004916 <vTaskSdCard+0xee>
						"[STORAGE TASK] Failed finding first or next file: %d\n",
						res);
				goto resetSDCard;
			}

			strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 80048a2:	497a      	ldr	r1, [pc, #488]	; (8004a8c <vTaskSdCard+0x264>)
 80048a4:	a807      	add	r0, sp, #28
 80048a6:	f00d ffbb 	bl	8012820 <strcpy>
			EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 80048aa:	230a      	movs	r3, #10
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
			EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;

			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 80048ac:	4878      	ldr	r0, [pc, #480]	; (8004a90 <vTaskSdCard+0x268>)
			EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 80048ae:	fbb9 f1f3 	udiv	r1, r9, r3
 80048b2:	fb03 9211 	mls	r2, r3, r1, r9
 80048b6:	3230      	adds	r2, #48	; 0x30
 80048b8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 80048bc:	fbb1 f2f3 	udiv	r2, r1, r3
 80048c0:	fb03 1212 	mls	r2, r3, r2, r1
			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 80048c4:	a907      	add	r1, sp, #28
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 80048c6:	3230      	adds	r2, #48	; 0x30
 80048c8:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
			EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 80048cc:	2264      	movs	r2, #100	; 0x64
 80048ce:	fbb9 f9f2 	udiv	r9, r9, r2
 80048d2:	fbb9 f2f3 	udiv	r2, r9, r3
 80048d6:	fb03 9912 	mls	r9, r3, r2, r9
 80048da:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80048de:	f88d 9020 	strb.w	r9, [sp, #32]
			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 80048e2:	f7fe f919 	bl	8002b18 <UsbPrint>
					EULER_LOG_FILE_NAME);

			res = f_closedir(&dj);
 80048e6:	a819      	add	r0, sp, #100	; 0x64
 80048e8:	f00b f85e 	bl	800f9a8 <f_closedir>
			if (res != FR_OK) {
 80048ec:	4601      	mov	r1, r0
 80048ee:	b340      	cbz	r0, 8004942 <vTaskSdCard+0x11a>
				UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 80048f0:	4868      	ldr	r0, [pc, #416]	; (8004a94 <vTaskSdCard+0x26c>)

					UsbPrint("[STORAGE TASK] Syncing file..\n");
					HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
					res = f_sync(&EULER_LOG_FILE);
					if (res != FR_OK) {
						UsbPrint("[STORAGE TASK] Failed syncing file: %d\n",
 80048f2:	f7fe f911 	bl	8002b18 <UsbPrint>
								res);
						goto resetSDCard;
 80048f6:	e7ac      	b.n	8004852 <vTaskSdCard+0x2a>
				UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 80048f8:	4630      	mov	r0, r6
 80048fa:	f7fe f90d 	bl	8002b18 <UsbPrint>
				disk.is_initialized[0] = 0;
 80048fe:	4b66      	ldr	r3, [pc, #408]	; (8004a98 <vTaskSdCard+0x270>)
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004900:	2201      	movs	r2, #1
 8004902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004906:	4865      	ldr	r0, [pc, #404]	; (8004a9c <vTaskSdCard+0x274>)
				disk.is_initialized[0] = 0;
 8004908:	701f      	strb	r7, [r3, #0]
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800490a:	f002 fdd5 	bl	80074b8 <HAL_GPIO_WritePin>
				osDelay(10);
 800490e:	200a      	movs	r0, #10
 8004910:	f00b f9ac 	bl	800fc6c <osDelay>
 8004914:	e79d      	b.n	8004852 <vTaskSdCard+0x2a>
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8004916:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				res = f_findnext(&dj, &fno);
 800491a:	a90b      	add	r1, sp, #44	; 0x2c
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 800491c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
				res = f_findnext(&dj, &fno);
 8004920:	a819      	add	r0, sp, #100	; 0x64
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8004922:	3a30      	subs	r2, #48	; 0x30
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8004924:	3b30      	subs	r3, #48	; 0x30
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8004926:	fb0b f202 	mul.w	r2, fp, r2
 800492a:	fb0a 2303 	mla	r3, sl, r3, r2
 800492e:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8004932:	4413      	add	r3, r2
				if (current_file_number + 1 > file_number) {
 8004934:	3b2f      	subs	r3, #47	; 0x2f
 8004936:	4599      	cmp	r9, r3
 8004938:	bf38      	it	cc
 800493a:	4699      	movcc	r9, r3
				res = f_findnext(&dj, &fno);
 800493c:	f00b f875 	bl	800fa2a <f_findnext>
 8004940:	e7a8      	b.n	8004894 <vTaskSdCard+0x6c>
		res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8004942:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8004ab8 <vTaskSdCard+0x290>
		UsbPrint("[STORAGE TASK] Opening log file\n");
 8004946:	4856      	ldr	r0, [pc, #344]	; (8004aa0 <vTaskSdCard+0x278>)
 8004948:	f7fe f8e6 	bl	8002b18 <UsbPrint>
		res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 800494c:	a907      	add	r1, sp, #28
 800494e:	2212      	movs	r2, #18
 8004950:	4648      	mov	r0, r9
 8004952:	f00a fc6b 	bl	800f22c <f_open>
		if (res != FR_OK) {
 8004956:	4601      	mov	r1, r0
 8004958:	b108      	cbz	r0, 800495e <vTaskSdCard+0x136>
			UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 800495a:	4852      	ldr	r0, [pc, #328]	; (8004aa4 <vTaskSdCard+0x27c>)
 800495c:	e7c9      	b.n	80048f2 <vTaskSdCard+0xca>
		UsbPrint("[STORAGE TASK] Going to end of file\n");
 800495e:	4852      	ldr	r0, [pc, #328]	; (8004aa8 <vTaskSdCard+0x280>)
 8004960:	f7fe f8da 	bl	8002b18 <UsbPrint>
		res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8004964:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8004968:	4648      	mov	r0, r9
 800496a:	f00a feae 	bl	800f6ca <f_lseek>
		if (res != FR_OK) {
 800496e:	4601      	mov	r1, r0
 8004970:	b108      	cbz	r0, 8004976 <vTaskSdCard+0x14e>
			UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8004972:	484e      	ldr	r0, [pc, #312]	; (8004aac <vTaskSdCard+0x284>)
 8004974:	e7bd      	b.n	80048f2 <vTaskSdCard+0xca>
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8004976:	4b4e      	ldr	r3, [pc, #312]	; (8004ab0 <vTaskSdCard+0x288>)
 8004978:	aa11      	add	r2, sp, #68	; 0x44
		volatile int32_t msgCounter = 0;
 800497a:	9003      	str	r0, [sp, #12]
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 800497c:	f103 0e18 	add.w	lr, r3, #24
 8004980:	4691      	mov	r9, r2
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	3308      	adds	r3, #8
 8004986:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800498a:	4694      	mov	ip, r2
 800498c:	4573      	cmp	r3, lr
 800498e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004992:	4662      	mov	r2, ip
 8004994:	d1f5      	bne.n	8004982 <vTaskSdCard+0x15a>
 8004996:	8899      	ldrh	r1, [r3, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	799b      	ldrb	r3, [r3, #6]
 800499c:	f8cc 0000 	str.w	r0, [ip]
		res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 80049a0:	4648      	mov	r0, r9
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 80049a2:	f88c 3006 	strb.w	r3, [ip, #6]
 80049a6:	2300      	movs	r3, #0
 80049a8:	f8ac 1004 	strh.w	r1, [ip, #4]
 80049ac:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 80049b0:	f7fb fc96 	bl	80002e0 <strlen>
 80049b4:	4649      	mov	r1, r9
 80049b6:	4602      	mov	r2, r0
 80049b8:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <vTaskSdCard+0x28c>)
 80049ba:	483f      	ldr	r0, [pc, #252]	; (8004ab8 <vTaskSdCard+0x290>)
 80049bc:	f00a fd46 	bl	800f44c <f_write>
		if (res != FR_OK) {
 80049c0:	4681      	mov	r9, r0
 80049c2:	b110      	cbz	r0, 80049ca <vTaskSdCard+0x1a2>
			UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 80049c4:	4601      	mov	r1, r0
						UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 80049c6:	483d      	ldr	r0, [pc, #244]	; (8004abc <vTaskSdCard+0x294>)
 80049c8:	e793      	b.n	80048f2 <vTaskSdCard+0xca>
		log_entry_t log_entry = { 0 };
 80049ca:	4601      	mov	r1, r0
 80049cc:	2296      	movs	r2, #150	; 0x96
 80049ce:	a826      	add	r0, sp, #152	; 0x98
			if (osMessageQueueGet(log_queue, &log_entry, NULL,
 80049d0:	f8df a104 	ldr.w	sl, [pc, #260]	; 8004ad8 <vTaskSdCard+0x2b0>
		log_entry_t log_entry = { 0 };
 80049d4:	f00d fe2f 	bl	8012636 <memset>
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 80049d8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8004ab4 <vTaskSdCard+0x28c>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80049dc:	464a      	mov	r2, r9
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 80049de:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8004ab8 <vTaskSdCard+0x290>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80049e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049e6:	482d      	ldr	r0, [pc, #180]	; (8004a9c <vTaskSdCard+0x274>)
 80049e8:	f002 fd66 	bl	80074b8 <HAL_GPIO_WritePin>
			if (osMessageQueueGet(log_queue, &log_entry, NULL,
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295
 80049f0:	2200      	movs	r2, #0
 80049f2:	a926      	add	r1, sp, #152	; 0x98
 80049f4:	f8da 0000 	ldr.w	r0, [sl]
 80049f8:	f00b fb84 	bl	8010104 <osMessageQueueGet>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d1f5      	bne.n	80049ec <vTaskSdCard+0x1c4>
				num_bytes = strlen(log_entry.str);
 8004a00:	a826      	add	r0, sp, #152	; 0x98
 8004a02:	f7fb fc6d 	bl	80002e0 <strlen>
				if (num_bytes > 0) {
 8004a06:	4602      	mov	r2, r0
 8004a08:	b138      	cbz	r0, 8004a1a <vTaskSdCard+0x1f2>
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8004a0a:	a926      	add	r1, sp, #152	; 0x98
 8004a0c:	465b      	mov	r3, fp
 8004a0e:	4648      	mov	r0, r9
 8004a10:	f00a fd1c 	bl	800f44c <f_write>
					if (res != FR_OK) {
 8004a14:	4601      	mov	r1, r0
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d1d5      	bne.n	80049c6 <vTaskSdCard+0x19e>
				msgCounter++;
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	9303      	str	r3, [sp, #12]
				if (msgCounter >= SYNC_AFTER_COUNT) {
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	2b7f      	cmp	r3, #127	; 0x7f
 8004a24:	dde2      	ble.n	80049ec <vTaskSdCard+0x1c4>
					msgCounter = 0;
 8004a26:	2300      	movs	r3, #0
					UsbPrint("[STORAGE TASK] Syncing file..\n");
 8004a28:	4825      	ldr	r0, [pc, #148]	; (8004ac0 <vTaskSdCard+0x298>)
					msgCounter = 0;
 8004a2a:	9303      	str	r3, [sp, #12]
					UsbPrint("[STORAGE TASK] Syncing file..\n");
 8004a2c:	f7fe f874 	bl	8002b18 <UsbPrint>
					HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8004a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a34:	4819      	ldr	r0, [pc, #100]	; (8004a9c <vTaskSdCard+0x274>)
 8004a36:	f002 fd44 	bl	80074c2 <HAL_GPIO_TogglePin>
					res = f_sync(&EULER_LOG_FILE);
 8004a3a:	4648      	mov	r0, r9
 8004a3c:	f00a fddc 	bl	800f5f8 <f_sync>
					if (res != FR_OK) {
 8004a40:	4601      	mov	r1, r0
 8004a42:	b108      	cbz	r0, 8004a48 <vTaskSdCard+0x220>
						UsbPrint("[STORAGE TASK] Failed syncing file: %d\n",
 8004a44:	481f      	ldr	r0, [pc, #124]	; (8004ac4 <vTaskSdCard+0x29c>)
 8004a46:	e754      	b.n	80048f2 <vTaskSdCard+0xca>
					}

					;

					// if the rocket landed, create a new file and write to that one
					if (ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8004a48:	230c      	movs	r3, #12
 8004a4a:	aa04      	add	r2, sp, #16
 8004a4c:	491e      	ldr	r1, [pc, #120]	; (8004ac8 <vTaskSdCard+0x2a0>)
 8004a4e:	481f      	ldr	r0, [pc, #124]	; (8004acc <vTaskSdCard+0x2a4>)
 8004a50:	f7fd fee4 	bl	800281c <ReadMutex>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d1c9      	bne.n	80049ec <vTaskSdCard+0x1c4>
							&local_flight_phase,
							sizeof(global_flight_phase_detection)) == osOK
							&& local_flight_phase.flight_phase == RECOVERY) {
 8004a58:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8004a5c:	2a06      	cmp	r2, #6
 8004a5e:	d1c5      	bne.n	80049ec <vTaskSdCard+0x1c4>
 8004a60:	9001      	str	r0, [sp, #4]
						f_close(&EULER_LOG_FILE);
 8004a62:	4815      	ldr	r0, [pc, #84]	; (8004ab8 <vTaskSdCard+0x290>)
 8004a64:	f00a fe18 	bl	800f698 <f_close>
						// "clean" current file name
						EULER_LOG_FILE_NAME[0] = 0;
 8004a68:	9b01      	ldr	r3, [sp, #4]
 8004a6a:	f88d 301c 	strb.w	r3, [sp, #28]
						goto logToNewFile;
 8004a6e:	e6fe      	b.n	800486e <vTaskSdCard+0x46>
				UsbPrint(
 8004a70:	4601      	mov	r1, r0
 8004a72:	4817      	ldr	r0, [pc, #92]	; (8004ad0 <vTaskSdCard+0x2a8>)
 8004a74:	e73d      	b.n	80048f2 <vTaskSdCard+0xca>
 8004a76:	bf00      	nop
 8004a78:	080148eb 	.word	0x080148eb
 8004a7c:	08014a86 	.word	0x08014a86
 8004a80:	2402079c 	.word	0x2402079c
 8004a84:	08014913 	.word	0x08014913
 8004a88:	0801493f 	.word	0x0801493f
 8004a8c:	08014ae5 	.word	0x08014ae5
 8004a90:	08014af1 	.word	0x08014af1
 8004a94:	0801496e 	.word	0x0801496e
 8004a98:	24000360 	.word	0x24000360
 8004a9c:	58020c00 	.word	0x58020c00
 8004aa0:	0801499b 	.word	0x0801499b
 8004aa4:	080149bc 	.word	0x080149bc
 8004aa8:	080149e8 	.word	0x080149e8
 8004aac:	08014a0d 	.word	0x08014a0d
 8004ab0:	0801446c 	.word	0x0801446c
 8004ab4:	240209d0 	.word	0x240209d0
 8004ab8:	2402056c 	.word	0x2402056c
 8004abc:	08014a3d 	.word	0x08014a3d
 8004ac0:	08014a68 	.word	0x08014a68
 8004ac4:	08014a87 	.word	0x08014a87
 8004ac8:	24000224 	.word	0x24000224
 8004acc:	24009760 	.word	0x24009760
 8004ad0:	08014aaf 	.word	0x08014aaf
 8004ad4:	08014962 	.word	0x08014962
 8004ad8:	2401a27c 	.word	0x2401a27c

08004adc <calculate_checksum_sb>:
	}
}

uint8_t calculate_checksum_sb(sb_data_t *sb_data) {

	return sb_data->baro.pressure + sb_data->baro.temperature
 8004adc:	e9d0 3200 	ldrd	r3, r2, [r0]
 8004ae0:	4413      	add	r3, r2
			+ sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z
 8004ae2:	7b02      	ldrb	r2, [r0, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	7b82      	ldrb	r2, [r0, #14]
 8004ae8:	4413      	add	r3, r2
 8004aea:	7c02      	ldrb	r2, [r0, #16]
 8004aec:	4413      	add	r3, r2
			+ sb_data->imu.acc_x + sb_data->imu.acc_y + sb_data->imu.acc_z;
 8004aee:	7c82      	ldrb	r2, [r0, #18]
 8004af0:	4413      	add	r3, r2
 8004af2:	7d02      	ldrb	r2, [r0, #20]
 8004af4:	7d80      	ldrb	r0, [r0, #22]
 8004af6:	4413      	add	r3, r2
 8004af8:	4418      	add	r0, r3
}
 8004afa:	b2c0      	uxtb	r0, r0
 8004afc:	4770      	bx	lr
	...

08004b00 <ReadDataSB>:
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3) {
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	4606      	mov	r6, r0
 8004b04:	460d      	mov	r5, r1
 8004b06:	4614      	mov	r4, r2
	checksum = calculate_checksum_sb(sb1);
 8004b08:	f7ff ffe8 	bl	8004adc <calculate_checksum_sb>
	if (checksum == sb1->checksum) {
 8004b0c:	7f33      	ldrb	r3, [r6, #28]
 8004b0e:	4283      	cmp	r3, r0
 8004b10:	d114      	bne.n	8004b3c <ReadDataSB+0x3c>
		if (AcquireMutex(&sb1_mutex) == osOK) {
 8004b12:	4826      	ldr	r0, [pc, #152]	; (8004bac <ReadDataSB+0xac>)
 8004b14:	f7fd fe74 	bl	8002800 <AcquireMutex>
 8004b18:	b980      	cbnz	r0, 8004b3c <ReadDataSB+0x3c>
			sb1_baro = sb1->baro;
 8004b1a:	4b25      	ldr	r3, [pc, #148]	; (8004bb0 <ReadDataSB+0xb0>)
			sb1_imu = sb1->imu;
 8004b1c:	4f25      	ldr	r7, [pc, #148]	; (8004bb4 <ReadDataSB+0xb4>)
			sb1_baro = sb1->baro;
 8004b1e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
			sb1_imu = sb1->imu;
 8004b22:	360c      	adds	r6, #12
			sb1_baro = sb1->baro;
 8004b24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb1->imu;
 8004b28:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b2c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 8004b30:	481e      	ldr	r0, [pc, #120]	; (8004bac <ReadDataSB+0xac>)
 8004b32:	f7fd fe70 	bl	8002816 <ReleaseMutex>
			sb1_imu.acc_z = -sb1_imu.acc_z;
 8004b36:	897b      	ldrh	r3, [r7, #10]
 8004b38:	425b      	negs	r3, r3
 8004b3a:	817b      	strh	r3, [r7, #10]
	checksum = calculate_checksum_sb(sb2);
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f7ff ffcd 	bl	8004adc <calculate_checksum_sb>
	if (checksum == sb2->checksum) {
 8004b42:	7f2b      	ldrb	r3, [r5, #28]
 8004b44:	4283      	cmp	r3, r0
 8004b46:	d114      	bne.n	8004b72 <ReadDataSB+0x72>
		if (AcquireMutex(&sb2_mutex) == osOK) {
 8004b48:	481b      	ldr	r0, [pc, #108]	; (8004bb8 <ReadDataSB+0xb8>)
 8004b4a:	f7fd fe59 	bl	8002800 <AcquireMutex>
 8004b4e:	b980      	cbnz	r0, 8004b72 <ReadDataSB+0x72>
			sb2_baro = sb2->baro;
 8004b50:	4b1a      	ldr	r3, [pc, #104]	; (8004bbc <ReadDataSB+0xbc>)
			sb2_imu = sb2->imu;
 8004b52:	4e1b      	ldr	r6, [pc, #108]	; (8004bc0 <ReadDataSB+0xc0>)
			sb2_baro = sb2->baro;
 8004b54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8004b58:	350c      	adds	r5, #12
			sb2_baro = sb2->baro;
 8004b5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8004b5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b62:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 8004b66:	4814      	ldr	r0, [pc, #80]	; (8004bb8 <ReadDataSB+0xb8>)
 8004b68:	f7fd fe55 	bl	8002816 <ReleaseMutex>
			sb2_imu.acc_z = -sb2_imu.acc_z;
 8004b6c:	8973      	ldrh	r3, [r6, #10]
 8004b6e:	425b      	negs	r3, r3
 8004b70:	8173      	strh	r3, [r6, #10]
	checksum = calculate_checksum_sb(sb3);
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7ff ffb2 	bl	8004adc <calculate_checksum_sb>
	if (checksum == sb3->checksum) {
 8004b78:	7f23      	ldrb	r3, [r4, #28]
 8004b7a:	4283      	cmp	r3, r0
 8004b7c:	d114      	bne.n	8004ba8 <ReadDataSB+0xa8>
		if (AcquireMutex(&sb3_mutex) == osOK) {
 8004b7e:	4811      	ldr	r0, [pc, #68]	; (8004bc4 <ReadDataSB+0xc4>)
 8004b80:	f7fd fe3e 	bl	8002800 <AcquireMutex>
 8004b84:	b980      	cbnz	r0, 8004ba8 <ReadDataSB+0xa8>
			sb3_baro = sb3->baro;
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <ReadDataSB+0xc8>)
			sb3_imu = sb3->imu;
 8004b88:	4d10      	ldr	r5, [pc, #64]	; (8004bcc <ReadDataSB+0xcc>)
			sb3_baro = sb3->baro;
 8004b8a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8004b8e:	340c      	adds	r4, #12
			sb3_baro = sb3->baro;
 8004b90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8004b94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 8004b9c:	4809      	ldr	r0, [pc, #36]	; (8004bc4 <ReadDataSB+0xc4>)
 8004b9e:	f7fd fe3a 	bl	8002816 <ReleaseMutex>
			sb3_imu.acc_z = -sb3_imu.acc_z;
 8004ba2:	896b      	ldrh	r3, [r5, #10]
 8004ba4:	425b      	negs	r3, r3
 8004ba6:	816b      	strh	r3, [r5, #10]
}
 8004ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004baa:	bf00      	nop
 8004bac:	2400fe64 	.word	0x2400fe64
 8004bb0:	24000230 	.word	0x24000230
 8004bb4:	2400023c 	.word	0x2400023c
 8004bb8:	24020518 	.word	0x24020518
 8004bbc:	2400024c 	.word	0x2400024c
 8004bc0:	24000258 	.word	0x24000258
 8004bc4:	24011f60 	.word	0x24011f60
 8004bc8:	24000268 	.word	0x24000268
 8004bcc:	24000274 	.word	0x24000274

08004bd0 <vTaskSensRead>:
void vTaskSensRead(void *argument) {
 8004bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8004bd4:	f04f 0864 	mov.w	r8, #100	; 0x64
	osDelay(800);
 8004bd8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004bdc:	f00b f846 	bl	800fc6c <osDelay>
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8004be0:	4d23      	ldr	r5, [pc, #140]	; (8004c70 <vTaskSensRead+0xa0>)
	tick_count = osKernelGetTickCount();
 8004be2:	f00a ffd5 	bl	800fb90 <osKernelGetTickCount>
 8004be6:	4604      	mov	r4, r0
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8004be8:	f00a ffe6 	bl	800fbb8 <osKernelGetTickFreq>
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8004bec:	4e21      	ldr	r6, [pc, #132]	; (8004c74 <vTaskSensRead+0xa4>)
 8004bee:	4f22      	ldr	r7, [pc, #136]	; (8004c78 <vTaskSensRead+0xa8>)
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8004bf0:	fbb0 f8f8 	udiv	r8, r0, r8
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8004bf4:	462a      	mov	r2, r5
 8004bf6:	4631      	mov	r1, r6
 8004bf8:	4638      	mov	r0, r7
		tick_count += tick_update;
 8004bfa:	4444      	add	r4, r8
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8004bfc:	f7ff ff80 	bl	8004b00 <ReadDataSB>
		logSensor(tick_count, 1, BARO, &sb1_data.baro);
 8004c00:	2201      	movs	r2, #1
 8004c02:	463b      	mov	r3, r7
 8004c04:	4620      	mov	r0, r4
 8004c06:	4611      	mov	r1, r2
 8004c08:	f7fd fe5c 	bl	80028c4 <logSensor>
		logSensor(tick_count, 1, IMU, &sb1_data.imu);
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <vTaskSensRead+0xac>)
 8004c0e:	2202      	movs	r2, #2
 8004c10:	2101      	movs	r1, #1
 8004c12:	4620      	mov	r0, r4
 8004c14:	f7fd fe56 	bl	80028c4 <logSensor>
		logSensor(tick_count, 2, BARO, &sb2_data.baro);
 8004c18:	4633      	mov	r3, r6
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f7fd fe50 	bl	80028c4 <logSensor>
		logSensor(tick_count, 2, IMU, &sb2_data.imu);
 8004c24:	2202      	movs	r2, #2
 8004c26:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <vTaskSensRead+0xb0>)
 8004c28:	4620      	mov	r0, r4
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	f7fd fe4a 	bl	80028c4 <logSensor>
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 8004c30:	462b      	mov	r3, r5
 8004c32:	2201      	movs	r2, #1
 8004c34:	2103      	movs	r1, #3
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7fd fe44 	bl	80028c4 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 8004c3c:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <vTaskSensRead+0xb4>)
 8004c3e:	2202      	movs	r2, #2
 8004c40:	2103      	movs	r1, #3
 8004c42:	4620      	mov	r0, r4
 8004c44:	f7fd fe3e 	bl	80028c4 <logSensor>
		HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) &sb1_data, sizeof(sb1_data));
 8004c48:	4639      	mov	r1, r7
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	480e      	ldr	r0, [pc, #56]	; (8004c88 <vTaskSensRead+0xb8>)
 8004c4e:	f006 fa0d 	bl	800b06c <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &sb2_data, sizeof(sb2_data));
 8004c52:	4631      	mov	r1, r6
 8004c54:	2220      	movs	r2, #32
 8004c56:	480d      	ldr	r0, [pc, #52]	; (8004c8c <vTaskSensRead+0xbc>)
 8004c58:	f006 fa08 	bl	800b06c <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	4629      	mov	r1, r5
 8004c60:	480b      	ldr	r0, [pc, #44]	; (8004c90 <vTaskSensRead+0xc0>)
 8004c62:	f006 fa03 	bl	800b06c <HAL_SPI_Receive_DMA>
		osDelayUntil(tick_count);
 8004c66:	4620      	mov	r0, r4
 8004c68:	f00b f81a 	bl	800fca0 <osDelayUntil>
 8004c6c:	e7c2      	b.n	8004bf4 <vTaskSensRead+0x24>
 8004c6e:	bf00      	nop
 8004c70:	24000304 	.word	0x24000304
 8004c74:	240002e4 	.word	0x240002e4
 8004c78:	240002c4 	.word	0x240002c4
 8004c7c:	240002d0 	.word	0x240002d0
 8004c80:	240002f0 	.word	0x240002f0
 8004c84:	24000310 	.word	0x24000310
 8004c88:	2401a1f4 	.word	0x2401a1f4
 8004c8c:	24009768 	.word	0x24009768
 8004c90:	2400dc70 	.word	0x2400dc70

08004c94 <resetStateEstimation>:
}

void resetStateEstimation(kf_state_t *kf_state,
		flight_phase_detection_t *flight_phase_detection, env_t *environment,
		extrapolation_rolling_memory_t *extrapolation_rolling_memory,
		float pressure, float temperature) {
 8004c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c98:	ed2d 8b02 	vpush	{d8}
 8004c9c:	eeb0 8a60 	vmov.f32	s16, s1
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	eef0 8a40 	vmov.f32	s17, s0
 8004ca6:	4605      	mov	r5, r0
	reset_flight_phase_detection(flight_phase_detection);
 8004ca8:	4608      	mov	r0, r1
		float pressure, float temperature) {
 8004caa:	461f      	mov	r7, r3
 8004cac:	460e      	mov	r6, r1
	reset_flight_phase_detection(flight_phase_detection);
 8004cae:	f7fc fcad 	bl	800160c <reset_flight_phase_detection>
	calibrate_env(environment, pressure, temperature);
 8004cb2:	eef0 0a48 	vmov.f32	s1, s16
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	eeb0 0a68 	vmov.f32	s0, s17
 8004cbc:	f7fc fab0 	bl	8001220 <calibrate_env>
	update_env(environment, temperature);
 8004cc0:	eeb0 0a48 	vmov.f32	s0, s16
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f7fc facf 	bl	8001268 <update_env>
	reset_kf_state(kf_state);
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f7fc fca6 	bl	800161c <reset_kf_state>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 8004cd0:	22b0      	movs	r2, #176	; 0xb0
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	f00d fcae 	bl	8012636 <memset>
	select_noise_models(kf_state, flight_phase_detection, environment,
 8004cda:	463b      	mov	r3, r7
 8004cdc:	4622      	mov	r2, r4
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
			extrapolation_rolling_memory);
}
 8004ce2:	ecbd 8b02 	vpop	{d8}
 8004ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	select_noise_models(kf_state, flight_phase_detection, environment,
 8004cea:	f7fc be57 	b.w	800199c <select_noise_models>
	...

08004cf0 <vTaskStateEst>:
void vTaskStateEst(void *argument) {
 8004cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf4:	ed2d 8b04 	vpush	{d8-d9}
 8004cf8:	f2ad 5dac 	subw	sp, sp, #1452	; 0x5ac
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004cfc:	2600      	movs	r6, #0
	float sum_press = 0;
 8004cfe:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 8004f3c <vTaskStateEst+0x24c>
	init_env(&env);
 8004d02:	ad12      	add	r5, sp, #72	; 0x48
	uint32_t reset_counter = 0;
 8004d04:	46b0      	mov	r8, r6
	float average_press = 0;
 8004d06:	eef0 9a48 	vmov.f32	s19, s16
	uint16_t calibrate_count = 0;
 8004d0a:	4634      	mov	r4, r6
	init_env(&env);
 8004d0c:	4628      	mov	r0, r5
	float sum_temp = 0;
 8004d0e:	eef0 8a48 	vmov.f32	s17, s16
	init_env(&env);
 8004d12:	f7fc fa6d 	bl	80011f0 <init_env>
	state_est_meas_t state_est_meas = { 0 };
 8004d16:	2278      	movs	r2, #120	; 0x78
 8004d18:	2100      	movs	r1, #0
 8004d1a:	a816      	add	r0, sp, #88	; 0x58
 8004d1c:	f00d fc8b 	bl	8012636 <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8004d20:	2278      	movs	r2, #120	; 0x78
 8004d22:	2100      	movs	r1, #0
 8004d24:	a834      	add	r0, sp, #208	; 0xd0
 8004d26:	f00d fc86 	bl	8012636 <memset>
	reset_kf_state(&kf_state);
 8004d2a:	a87f      	add	r0, sp, #508	; 0x1fc
 8004d2c:	f7fc fc76 	bl	800161c <reset_kf_state>
	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 8004d30:	22b0      	movs	r2, #176	; 0xb0
 8004d32:	2100      	movs	r1, #0
 8004d34:	a852      	add	r0, sp, #328	; 0x148
 8004d36:	f00d fc7e 	bl	8012636 <memset>
	reset_flight_phase_detection(&flight_phase_detection);
 8004d3a:	a80f      	add	r0, sp, #60	; 0x3c
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004d3c:	9611      	str	r6, [sp, #68]	; 0x44
	float average_temp = 0;
 8004d3e:	eeb0 9a48 	vmov.f32	s18, s16
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004d42:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
	reset_flight_phase_detection(&flight_phase_detection);
 8004d46:	f7fc fc61 	bl	800160c <reset_flight_phase_detection>
	command_e telemetry_command = IDLE_COMMAND;
 8004d4a:	239b      	movs	r3, #155	; 0x9b
	select_noise_models(&kf_state, &flight_phase_detection, &env,
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	a90f      	add	r1, sp, #60	; 0x3c
	command_e telemetry_command = IDLE_COMMAND;
 8004d50:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	select_noise_models(&kf_state, &flight_phase_detection, &env,
 8004d54:	a87f      	add	r0, sp, #508	; 0x1fc
 8004d56:	ab52      	add	r3, sp, #328	; 0x148
 8004d58:	f7fc fe20 	bl	800199c <select_noise_models>
	osDelay(900);
 8004d5c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8004d60:	f00a ff84 	bl	800fc6c <osDelay>
	tick_count = osKernelGetTickCount();
 8004d64:	f00a ff14 	bl	800fb90 <osKernelGetTickCount>
 8004d68:	4607      	mov	r7, r0
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8004d6a:	f00a ff25 	bl	800fbb8 <osKernelGetTickFreq>
 8004d6e:	2364      	movs	r3, #100	; 0x64
 8004d70:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d74:	930d      	str	r3, [sp, #52]	; 0x34
		tick_count += tick_update;
 8004d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8004d78:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 8004d7c:	4970      	ldr	r1, [pc, #448]	; (8004f40 <vTaskStateEst+0x250>)
		tick_count += tick_update;
 8004d7e:	441f      	add	r7, r3
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command,
 8004d80:	4870      	ldr	r0, [pc, #448]	; (8004f44 <vTaskStateEst+0x254>)
 8004d82:	2301      	movs	r3, #1
 8004d84:	f7fd fd4a 	bl	800281c <ReadMutex>
		if (flight_phase_detection.flight_phase == IDLE
 8004d88:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10d      	bne.n	8004dac <vTaskStateEst+0xbc>
				&& global_telemetry_command == CALIBRATE_SENSORS) {
 8004d90:	4b6b      	ldr	r3, [pc, #428]	; (8004f40 <vTaskStateEst+0x250>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b49      	cmp	r3, #73	; 0x49
 8004d96:	d109      	bne.n	8004dac <vTaskStateEst+0xbc>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env,
 8004d98:	eef0 0a49 	vmov.f32	s1, s18
 8004d9c:	ab52      	add	r3, sp, #328	; 0x148
 8004d9e:	eeb0 0a69 	vmov.f32	s0, s19
 8004da2:	462a      	mov	r2, r5
 8004da4:	a90f      	add	r1, sp, #60	; 0x3c
 8004da6:	a87f      	add	r0, sp, #508	; 0x1fc
 8004da8:	f7ff ff74 	bl	8004c94 <resetStateEstimation>
		if (reset_counter > 30 * STATE_ESTIMATION_FREQUENCY && !was_reset) {
 8004dac:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004db0:	4598      	cmp	r8, r3
 8004db2:	d90b      	bls.n	8004dcc <vTaskStateEst+0xdc>
 8004db4:	b956      	cbnz	r6, 8004dcc <vTaskStateEst+0xdc>
			was_reset = true;
 8004db6:	2601      	movs	r6, #1
			resetStateEstimation(&kf_state, &flight_phase_detection, &env,
 8004db8:	eef0 0a49 	vmov.f32	s1, s18
 8004dbc:	eeb0 0a69 	vmov.f32	s0, s19
 8004dc0:	ab52      	add	r3, sp, #328	; 0x148
 8004dc2:	462a      	mov	r2, r5
 8004dc4:	a90f      	add	r1, sp, #60	; 0x3c
 8004dc6:	a87f      	add	r0, sp, #508	; 0x1fc
 8004dc8:	f7ff ff64 	bl	8004c94 <resetStateEstimation>
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8004f74 <vTaskStateEst+0x284>
 8004dd2:	4a5d      	ldr	r2, [pc, #372]	; (8004f48 <vTaskStateEst+0x258>)
		reset_counter++;
 8004dd4:	f108 0801 	add.w	r8, r8, #1
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	4659      	mov	r1, fp
 8004ddc:	ab16      	add	r3, sp, #88	; 0x58
 8004dde:	485b      	ldr	r0, [pc, #364]	; (8004f4c <vTaskStateEst+0x25c>)
 8004de0:	f7fd fd36 	bl	8002850 <ReadMutexStateEst>
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 8004de4:	f8df a190 	ldr.w	sl, [pc, #400]	; 8004f78 <vTaskStateEst+0x288>
 8004de8:	2302      	movs	r3, #2
 8004dea:	4a59      	ldr	r2, [pc, #356]	; (8004f50 <vTaskStateEst+0x260>)
 8004dec:	4651      	mov	r1, sl
 8004dee:	4859      	ldr	r0, [pc, #356]	; (8004f54 <vTaskStateEst+0x264>)
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	ab16      	add	r3, sp, #88	; 0x58
 8004df4:	f7fd fd2c 	bl	8002850 <ReadMutexStateEst>
		ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 8004df8:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004f7c <vTaskStateEst+0x28c>
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	4a56      	ldr	r2, [pc, #344]	; (8004f58 <vTaskStateEst+0x268>)
 8004e00:	4649      	mov	r1, r9
 8004e02:	4856      	ldr	r0, [pc, #344]	; (8004f5c <vTaskStateEst+0x26c>)
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	ab16      	add	r3, sp, #88	; 0x58
 8004e08:	f7fd fd22 	bl	8002850 <ReadMutexStateEst>
		if (flight_phase_detection.flight_phase == IDLE) {
 8004e0c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d130      	bne.n	8004e76 <vTaskStateEst+0x186>
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004e14:	f8da 2000 	ldr.w	r2, [sl]
			calibrate_count += 3;
 8004e18:	3403      	adds	r4, #3
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004e1a:	f8db 3000 	ldr.w	r3, [fp]
					+ sb3_baro.temperature)) / 100;
 8004e1e:	eddf 6a50 	vldr	s13, [pc, #320]	; 8004f60 <vTaskStateEst+0x270>
			calibrate_count += 3;
 8004e22:	b2a4      	uxth	r4, r4
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004e24:	4413      	add	r3, r2
					+ sb3_baro.pressure);
 8004e26:	f8d9 2000 	ldr.w	r2, [r9]
			if (calibrate_count > 150) {
 8004e2a:	2c96      	cmp	r4, #150	; 0x96
					+ sb3_baro.pressure);
 8004e2c:	4413      	add	r3, r2
			sum_temp += ((float) (sb1_baro.temperature + sb2_baro.temperature
 8004e2e:	f8da 2004 	ldr.w	r2, [sl, #4]
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004e32:	ee07 3a90 	vmov	s15, r3
			sum_temp += ((float) (sb1_baro.temperature + sb2_baro.temperature
 8004e36:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004e3a:	4413      	add	r3, r2
					+ sb3_baro.temperature)) / 100;
 8004e3c:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					+ sb3_baro.temperature)) / 100;
 8004e44:	4413      	add	r3, r2
			sum_press += (float) (sb1_baro.pressure + sb2_baro.pressure
 8004e46:	ee38 8a27 	vadd.f32	s16, s16, s15
			sum_temp += ((float) (sb1_baro.temperature + sb2_baro.temperature
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					+ sb3_baro.temperature)) / 100;
 8004e52:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			sum_temp += ((float) (sb1_baro.temperature + sb2_baro.temperature
 8004e56:	ee78 8a87 	vadd.f32	s17, s17, s14
			if (calibrate_count > 150) {
 8004e5a:	d90c      	bls.n	8004e76 <vTaskStateEst+0x186>
				average_press = sum_press / (float) calibrate_count;
 8004e5c:	ee07 4a90 	vmov	s15, r4
				calibrate_count = 0;
 8004e60:	2400      	movs	r4, #0
				average_press = sum_press / (float) calibrate_count;
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	eec8 9a27 	vdiv.f32	s19, s16, s15
				sum_press = 0;
 8004e6a:	ed9f 8a34 	vldr	s16, [pc, #208]	; 8004f3c <vTaskStateEst+0x24c>
				average_temp = sum_temp / (float) calibrate_count;
 8004e6e:	ee88 9aa7 	vdiv.f32	s18, s17, s15
				sum_temp = 0;
 8004e72:	eef0 8a48 	vmov.f32	s17, s16
		process_measurements(tick_count, &kf_state, &state_est_meas,
 8004e76:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
		ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8004e7a:	230c      	movs	r3, #12
 8004e7c:	aa0f      	add	r2, sp, #60	; 0x3c
 8004e7e:	4939      	ldr	r1, [pc, #228]	; (8004f64 <vTaskStateEst+0x274>)
 8004e80:	4839      	ldr	r0, [pc, #228]	; (8004f68 <vTaskStateEst+0x278>)
 8004e82:	f7fd fccb 	bl	800281c <ReadMutex>
		process_measurements(tick_count, &kf_state, &state_est_meas,
 8004e86:	ab34      	add	r3, sp, #208	; 0xd0
 8004e88:	aa16      	add	r2, sp, #88	; 0x58
 8004e8a:	a97f      	add	r1, sp, #508	; 0x1fc
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	e9cd 5900 	strd	r5, r9, [sp]
 8004e92:	f7fc fe49 	bl	8001b28 <process_measurements>
		select_noise_models(&kf_state, &flight_phase_detection, &env,
 8004e96:	464b      	mov	r3, r9
 8004e98:	462a      	mov	r2, r5
 8004e9a:	a90f      	add	r1, sp, #60	; 0x3c
 8004e9c:	a87f      	add	r0, sp, #508	; 0x1fc
 8004e9e:	f7fc fd7d 	bl	800199c <select_noise_models>
		kf_prediction(&kf_state);
 8004ea2:	a87f      	add	r0, sp, #508	; 0x1fc
 8004ea4:	f7fc fc3c 	bl	8001720 <kf_prediction>
		if (kf_state.num_z_active > 0) {
 8004ea8:	f8dd 340c 	ldr.w	r3, [sp, #1036]	; 0x40c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	dd3e      	ble.n	8004f2e <vTaskStateEst+0x23e>
			select_kf_observation_matrices(&kf_state);
 8004eb0:	a87f      	add	r0, sp, #508	; 0x1fc
 8004eb2:	f7fc fc86 	bl	80017c2 <select_kf_observation_matrices>
			kf_update(&kf_state);
 8004eb6:	a87f      	add	r0, sp, #508	; 0x1fc
 8004eb8:	f7fc fcae 	bl	8001818 <kf_update>
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 8004ebc:	2278      	movs	r2, #120	; 0x78
 8004ebe:	a916      	add	r1, sp, #88	; 0x58
 8004ec0:	a834      	add	r0, sp, #208	; 0xd0
 8004ec2:	f00d fbad 	bl	8012620 <memcpy>
		if (AcquireMutex(&state_est_mutex) == osOK) {
 8004ec6:	4829      	ldr	r0, [pc, #164]	; (8004f6c <vTaskStateEst+0x27c>)
 8004ec8:	f7fd fc9a 	bl	8002800 <AcquireMutex>
 8004ecc:	b930      	cbnz	r0, 8004edc <vTaskStateEst+0x1ec>
			update_state_est_data(&state_est_data_global, &kf_state);
 8004ece:	4828      	ldr	r0, [pc, #160]	; (8004f70 <vTaskStateEst+0x280>)
 8004ed0:	a97f      	add	r1, sp, #508	; 0x1fc
 8004ed2:	f7fc fd41 	bl	8001958 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 8004ed6:	4825      	ldr	r0, [pc, #148]	; (8004f6c <vTaskStateEst+0x27c>)
 8004ed8:	f7fd fc9d 	bl	8002816 <ReleaseMutex>
		if (AcquireMutex(&fsm_mutex) == osOK) {
 8004edc:	4822      	ldr	r0, [pc, #136]	; (8004f68 <vTaskStateEst+0x278>)
 8004ede:	f7fd fc8f 	bl	8002800 <AcquireMutex>
 8004ee2:	b940      	cbnz	r0, 8004ef6 <vTaskStateEst+0x206>
			global_env = env;
 8004ee4:	f8df c098 	ldr.w	ip, [pc, #152]	; 8004f80 <vTaskStateEst+0x290>
 8004ee8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004eec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 8004ef0:	481d      	ldr	r0, [pc, #116]	; (8004f68 <vTaskStateEst+0x278>)
 8004ef2:	f7fd fc90 	bl	8002816 <ReleaseMutex>
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 8004ef6:	f00a fe4b 	bl	800fb90 <osKernelGetTickCount>
 8004efa:	f8df e088 	ldr.w	lr, [pc, #136]	; 8004f84 <vTaskStateEst+0x294>
 8004efe:	4681      	mov	r9, r0
 8004f00:	46ec      	mov	ip, sp
 8004f02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004f06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004f0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004f0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004f12:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8004f16:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8004f1a:	f1ae 032c 	sub.w	r3, lr, #44	; 0x2c
 8004f1e:	4648      	mov	r0, r9
 8004f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f22:	f7fd fd85 	bl	8002a30 <logEstimatorVar>
		osDelayUntil(tick_count);
 8004f26:	4638      	mov	r0, r7
 8004f28:	f00a feba 	bl	800fca0 <osDelayUntil>
		tick_count += tick_update;
 8004f2c:	e723      	b.n	8004d76 <vTaskStateEst+0x86>
			memcpy(kf_state.x_est, kf_state.x_priori,
 8004f2e:	aacc      	add	r2, sp, #816	; 0x330
 8004f30:	abc0      	add	r3, sp, #768	; 0x300
 8004f32:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004f38:	e7c0      	b.n	8004ebc <vTaskStateEst+0x1cc>
 8004f3a:	bf00      	nop
 8004f3c:	00000000 	.word	0x00000000
 8004f40:	240160a4 	.word	0x240160a4
 8004f44:	2400bc5c 	.word	0x2400bc5c
 8004f48:	2400023c 	.word	0x2400023c
 8004f4c:	2400fe64 	.word	0x2400fe64
 8004f50:	24000258 	.word	0x24000258
 8004f54:	24020518 	.word	0x24020518
 8004f58:	24000274 	.word	0x24000274
 8004f5c:	24011f60 	.word	0x24011f60
 8004f60:	42c80000 	.word	0x42c80000
 8004f64:	24000224 	.word	0x24000224
 8004f68:	24009760 	.word	0x24009760
 8004f6c:	24016078 	.word	0x24016078
 8004f70:	24000284 	.word	0x24000284
 8004f74:	24000230 	.word	0x24000230
 8004f78:	2400024c 	.word	0x2400024c
 8004f7c:	24000268 	.word	0x24000268
 8004f80:	24000214 	.word	0x24000214
 8004f84:	24000290 	.word	0x24000290

08004f88 <vTaskXbee>:

int uart_counter = 0;

uint8_t calculate_checksum(telemetry_t *cnf);

void vTaskXbee(void *argument) {
 8004f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* local Data */
	state_est_data_t state_est_data;
	sb_data_t local_sb_data;

	/* Telemetry struct */
	telemetry_t telemetry_send = { 0 };
 8004f8c:	225c      	movs	r2, #92	; 0x5c
void vTaskXbee(void *argument) {
 8004f8e:	b0af      	sub	sp, #188	; 0xbc
	telemetry_t telemetry_send = { 0 };
 8004f90:	2100      	movs	r1, #0
	telemetry_send.flight_phase = IDLE;
	telemetry_send.startbyte = 0x17;

	/* Command struct */
	local_command_rx = IDLE_COMMAND;
	local_command = IDLE_COMMAND;
 8004f92:	4d50      	ldr	r5, [pc, #320]	; (80050d4 <vTaskXbee+0x14c>)
	telemetry_t telemetry_send = { 0 };
 8004f94:	eb0d 0002 	add.w	r0, sp, r2

	osDelay(700);

	/* Infinite loop */

	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 8004f98:	270a      	movs	r7, #10
	telemetry_t telemetry_send = { 0 };
 8004f9a:	f00d fb4c 	bl	8012636 <memset>
	telemetry_send.flight_phase = IDLE;
 8004f9e:	2301      	movs	r3, #1
	local_command_rx = IDLE_COMMAND;
 8004fa0:	4a4d      	ldr	r2, [pc, #308]	; (80050d8 <vTaskXbee+0x150>)
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 8004fa2:	f04f 0864 	mov.w	r8, #100	; 0x64
	telemetry_send.flight_phase = IDLE;
 8004fa6:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
	telemetry_send.startbyte = 0x17;
 8004faa:	2317      	movs	r3, #23
	osDelay(700);
 8004fac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
	bool fast_sampling = false;
 8004fb0:	2400      	movs	r4, #0
	telemetry_send.startbyte = 0x17;
 8004fb2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	local_command_rx = IDLE_COMMAND;
 8004fb6:	239b      	movs	r3, #155	; 0x9b
		/* Read Command */
//		HAL_UART_Receive_IT(&huart7, (uint8_t*) &local_command_rx, 1);
//		UsbPrint("[Telemetry] ts: %u, Received Commmand: %u, Rx_buffer; %u\n",
//				telemetry_send.ts, local_command, local_command_rx);

		if (AcquireMutex(&command_mutex) == osOK) {
 8004fb8:	f8df a158 	ldr.w	sl, [pc, #344]	; 8005114 <vTaskXbee+0x18c>
	local_command_rx = IDLE_COMMAND;
 8004fbc:	7013      	strb	r3, [r2, #0]
	local_command = IDLE_COMMAND;
 8004fbe:	702b      	strb	r3, [r5, #0]
	osDelay(700);
 8004fc0:	f00a fe54 	bl	800fc6c <osDelay>
			global_telemetry_command = local_command;
 8004fc4:	f8df b150 	ldr.w	fp, [pc, #336]	; 8005118 <vTaskXbee+0x190>
	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 8004fc8:	f00a fdf6 	bl	800fbb8 <osKernelGetTickFreq>
			local_command = IDLE_COMMAND;
			new_command = false;
		}

		/* Read Sensor Board Data */
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 8004fcc:	f8df 914c 	ldr.w	r9, [pc, #332]	; 800511c <vTaskXbee+0x194>
	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 8004fd0:	fbb0 f7f7 	udiv	r7, r0, r7
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 8004fd4:	f00a fdf0 	bl	800fbb8 <osKernelGetTickFreq>
 8004fd8:	fbb0 f8f8 	udiv	r8, r0, r8
	tick_count = osKernelGetTickCount();
 8004fdc:	f00a fdd8 	bl	800fb90 <osKernelGetTickCount>
 8004fe0:	4606      	mov	r6, r0
		if (fast_sampling) {
 8004fe2:	2c00      	cmp	r4, #0
 8004fe4:	d072      	beq.n	80050cc <vTaskXbee+0x144>
			tick_count += tick_update_fast;
 8004fe6:	4446      	add	r6, r8
		if (AcquireMutex(&command_mutex) == osOK) {
 8004fe8:	4650      	mov	r0, sl
 8004fea:	f7fd fc09 	bl	8002800 <AcquireMutex>
 8004fee:	b928      	cbnz	r0, 8004ffc <vTaskXbee+0x74>
			global_telemetry_command = local_command;
 8004ff0:	782b      	ldrb	r3, [r5, #0]
			ReleaseMutex(&command_mutex);
 8004ff2:	4650      	mov	r0, sl
			global_telemetry_command = local_command;
 8004ff4:	f88b 3000 	strb.w	r3, [fp]
			ReleaseMutex(&command_mutex);
 8004ff8:	f7fd fc0d 	bl	8002816 <ReleaseMutex>
		if (local_command == TELEMETRY_HIGH_SAMPLING) {
 8004ffc:	782b      	ldrb	r3, [r5, #0]
 8004ffe:	2b0d      	cmp	r3, #13
 8005000:	d066      	beq.n	80050d0 <vTaskXbee+0x148>
			fast_sampling = false;
 8005002:	2bc5      	cmp	r3, #197	; 0xc5
 8005004:	bf08      	it	eq
 8005006:	2400      	moveq	r4, #0
		if (telemetry_send.flight_phase == RECOVERY) {
 8005008:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
			fast_sampling = false;
 800500c:	2b06      	cmp	r3, #6
		if (new_command) {
 800500e:	4b33      	ldr	r3, [pc, #204]	; (80050dc <vTaskXbee+0x154>)
 8005010:	781a      	ldrb	r2, [r3, #0]
			fast_sampling = false;
 8005012:	bf08      	it	eq
 8005014:	2400      	moveq	r4, #0
		if (new_command) {
 8005016:	b11a      	cbz	r2, 8005020 <vTaskXbee+0x98>
			local_command = IDLE_COMMAND;
 8005018:	229b      	movs	r2, #155	; 0x9b
 800501a:	702a      	strb	r2, [r5, #0]
			new_command = false;
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 8005020:	466a      	mov	r2, sp
 8005022:	230c      	movs	r3, #12
 8005024:	492e      	ldr	r1, [pc, #184]	; (80050e0 <vTaskXbee+0x158>)
 8005026:	4648      	mov	r0, r9
 8005028:	f7fd fbf8 	bl	800281c <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &local_sb_data.imu, sizeof(sb1_imu));
 800502c:	aa03      	add	r2, sp, #12
 800502e:	2310      	movs	r3, #16
 8005030:	492c      	ldr	r1, [pc, #176]	; (80050e4 <vTaskXbee+0x15c>)
 8005032:	4648      	mov	r0, r9
 8005034:	f7fd fbf2 	bl	800281c <ReadMutex>

		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 8005038:	9b00      	ldr	r3, [sp, #0]
		telemetry_send.sb_data.gyro_x = local_sb_data.imu.gyro_x;
		telemetry_send.sb_data.gyro_y = local_sb_data.imu.gyro_y;
		telemetry_send.sb_data.gyro_z = local_sb_data.imu.gyro_z;

		/* Read Control Data*/
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data,
 800503a:	aa08      	add	r2, sp, #32
 800503c:	492a      	ldr	r1, [pc, #168]	; (80050e8 <vTaskXbee+0x160>)
		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 800503e:	9318      	str	r3, [sp, #96]	; 0x60
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 8005040:	9b01      	ldr	r3, [sp, #4]
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data,
 8005042:	482a      	ldr	r0, [pc, #168]	; (80050ec <vTaskXbee+0x164>)
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 8005044:	9319      	str	r3, [sp, #100]	; 0x64
		telemetry_send.sb_data.acc_x = local_sb_data.imu.acc_x;
 8005046:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800504a:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
		telemetry_send.sb_data.acc_y = local_sb_data.imu.acc_y;
 800504e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8005052:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
		telemetry_send.sb_data.acc_z = local_sb_data.imu.acc_z;
 8005056:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800505a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
		telemetry_send.sb_data.gyro_x = local_sb_data.imu.gyro_x;
 800505e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005062:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
		telemetry_send.sb_data.gyro_y = local_sb_data.imu.gyro_y;
 8005066:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800506a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
		telemetry_send.sb_data.gyro_z = local_sb_data.imu.gyro_z;
 800506e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005072:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data,
 8005076:	233c      	movs	r3, #60	; 0x3c
 8005078:	f7fd fbd0 	bl	800281c <ReadMutex>
				sizeof(state_est_data));

		ReadMutex(&motor_mutex, &global_airbrake_extension,
 800507c:	aa2a      	add	r2, sp, #168	; 0xa8
 800507e:	2304      	movs	r3, #4
 8005080:	491b      	ldr	r1, [pc, #108]	; (80050f0 <vTaskXbee+0x168>)
 8005082:	481c      	ldr	r0, [pc, #112]	; (80050f4 <vTaskXbee+0x16c>)
 8005084:	f7fd fbca 	bl	800281c <ReadMutex>
				&telemetry_send.airbrake_extension,
				sizeof(global_airbrake_extension));

		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase,
 8005088:	aa2b      	add	r2, sp, #172	; 0xac
 800508a:	2301      	movs	r3, #1
 800508c:	491a      	ldr	r1, [pc, #104]	; (80050f8 <vTaskXbee+0x170>)
 800508e:	481b      	ldr	r0, [pc, #108]	; (80050fc <vTaskXbee+0x174>)
 8005090:	f7fd fbc4 	bl	800281c <ReadMutex>
				&telemetry_send.flight_phase,
				sizeof(global_flight_phase_detection.flight_phase));

		/* read GPS */
		ReadMutex(&gps_mutex, &globalGPS, &telemetry_send.gps,
 8005094:	aa1f      	add	r2, sp, #124	; 0x7c
 8005096:	2324      	movs	r3, #36	; 0x24
 8005098:	4919      	ldr	r1, [pc, #100]	; (8005100 <vTaskXbee+0x178>)
 800509a:	481a      	ldr	r0, [pc, #104]	; (8005104 <vTaskXbee+0x17c>)
 800509c:	f7fd fbbe 	bl	800281c <ReadMutex>
				sizeof(globalGPS));

		/* read Battery */
		ReadMutex(&battery_mutex, &global_battery_data, &telemetry_send.battery,
 80050a0:	aa1d      	add	r2, sp, #116	; 0x74
 80050a2:	4919      	ldr	r1, [pc, #100]	; (8005108 <vTaskXbee+0x180>)
 80050a4:	2306      	movs	r3, #6
 80050a6:	4819      	ldr	r0, [pc, #100]	; (800510c <vTaskXbee+0x184>)
 80050a8:	f7fd fbb8 	bl	800281c <ReadMutex>
				sizeof(global_battery_data));

		telemetry_send.height = state_est_data.position_world[2];
 80050ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ae:	9328      	str	r3, [sp, #160]	; 0xa0
		telemetry_send.velocity = state_est_data.velocity_world[2];
 80050b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80050b2:	9329      	str	r3, [sp, #164]	; 0xa4
		telemetry_send.ts = osKernelGetTickCount();
 80050b4:	f00a fd6c 	bl	800fb90 <osKernelGetTickCount>

		/* Send to Xbee module */
//		HAL_UART_Transmit_DMA(&huart7, (uint8_t*) &telemetry_send,
//				sizeof(telemetry_send));

		telemetry_send.checksum = 0;
 80050b8:	2300      	movs	r3, #0

		uart_counter = 0;
 80050ba:	4a15      	ldr	r2, [pc, #84]	; (8005110 <vTaskXbee+0x188>)
		telemetry_send.ts = osKernelGetTickCount();
 80050bc:	902c      	str	r0, [sp, #176]	; 0xb0
		/* Sleep */
		osDelayUntil(tick_count);
 80050be:	4630      	mov	r0, r6
		telemetry_send.checksum = 0;
 80050c0:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
		uart_counter = 0;
 80050c4:	6013      	str	r3, [r2, #0]
		osDelayUntil(tick_count);
 80050c6:	f00a fdeb 	bl	800fca0 <osDelayUntil>
		if (fast_sampling) {
 80050ca:	e78a      	b.n	8004fe2 <vTaskXbee+0x5a>
			tick_count += tick_update_slow;
 80050cc:	443e      	add	r6, r7
 80050ce:	e78b      	b.n	8004fe8 <vTaskXbee+0x60>
			fast_sampling = true;
 80050d0:	2401      	movs	r4, #1
 80050d2:	e799      	b.n	8005008 <vTaskXbee+0x80>
 80050d4:	240209d4 	.word	0x240209d4
 80050d8:	240209d5 	.word	0x240209d5
 80050dc:	24000328 	.word	0x24000328
 80050e0:	24000230 	.word	0x24000230
 80050e4:	2400023c 	.word	0x2400023c
 80050e8:	24000284 	.word	0x24000284
 80050ec:	24016078 	.word	0x24016078
 80050f0:	2401a1f0 	.word	0x2401a1f0
 80050f4:	240098fc 	.word	0x240098fc
 80050f8:	24000224 	.word	0x24000224
 80050fc:	24009760 	.word	0x24009760
 8005100:	24016080 	.word	0x24016080
 8005104:	2401a104 	.word	0x2401a104
 8005108:	2400dd00 	.word	0x2400dd00
 800510c:	240097f0 	.word	0x240097f0
 8005110:	2400032c 	.word	0x2400032c
 8005114:	2400bc5c 	.word	0x2400bc5c
 8005118:	240160a4 	.word	0x240160a4
 800511c:	2400fe64 	.word	0x2400fe64

08005120 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == &huart7) {
 8005120:	4b16      	ldr	r3, [pc, #88]	; (800517c <HAL_UART_RxCpltCallback+0x5c>)
 8005122:	4283      	cmp	r3, r0
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005124:	b430      	push	{r4, r5}
	if (huart == &huart7) {
 8005126:	d126      	bne.n	8005176 <HAL_UART_RxCpltCallback+0x56>

		static uint8_t buffer[4];
		buffer[uart_counter] = local_command_rx;
 8005128:	4915      	ldr	r1, [pc, #84]	; (8005180 <HAL_UART_RxCpltCallback+0x60>)
 800512a:	4a16      	ldr	r2, [pc, #88]	; (8005184 <HAL_UART_RxCpltCallback+0x64>)
 800512c:	680b      	ldr	r3, [r1, #0]
 800512e:	7814      	ldrb	r4, [r2, #0]
 8005130:	4a15      	ldr	r2, [pc, #84]	; (8005188 <HAL_UART_RxCpltCallback+0x68>)
 8005132:	54d4      	strb	r4, [r2, r3]
		uart_counter++;
 8005134:	3301      	adds	r3, #1
		if (uart_counter == 4) {
 8005136:	2b04      	cmp	r3, #4
		uart_counter++;
 8005138:	600b      	str	r3, [r1, #0]
		if (uart_counter == 4) {
 800513a:	d10e      	bne.n	800515a <HAL_UART_RxCpltCallback+0x3a>
			uint8_t succesful = 1;
			for (int i = 1; i < 4; i++)
				if (buffer[0] != buffer[i])
 800513c:	7810      	ldrb	r0, [r2, #0]
 800513e:	7853      	ldrb	r3, [r2, #1]
					succesful = 0;
 8005140:	1a1d      	subs	r5, r3, r0
 8005142:	426b      	negs	r3, r5
 8005144:	416b      	adcs	r3, r5
				if (buffer[0] != buffer[i])
 8005146:	7895      	ldrb	r5, [r2, #2]
 8005148:	78d2      	ldrb	r2, [r2, #3]
					succesful = 0;
 800514a:	4285      	cmp	r5, r0
 800514c:	bf18      	it	ne
 800514e:	2300      	movne	r3, #0
				if (buffer[0] != buffer[i])
 8005150:	4282      	cmp	r2, r0
 8005152:	f04f 0200 	mov.w	r2, #0
			uart_counter = 0;
 8005156:	600a      	str	r2, [r1, #0]
				if (buffer[0] != buffer[i])
 8005158:	d005      	beq.n	8005166 <HAL_UART_RxCpltCallback+0x46>
				new_command = true;
				local_command = local_command_rx;
			}
		}

		HAL_UART_Receive_IT(huart, (uint8_t*) &local_command_rx, 1);
 800515a:	2201      	movs	r2, #1
 800515c:	4909      	ldr	r1, [pc, #36]	; (8005184 <HAL_UART_RxCpltCallback+0x64>)
 800515e:	4807      	ldr	r0, [pc, #28]	; (800517c <HAL_UART_RxCpltCallback+0x5c>)
	}
}
 8005160:	bc30      	pop	{r4, r5}
		HAL_UART_Receive_IT(huart, (uint8_t*) &local_command_rx, 1);
 8005162:	f006 bb33 	b.w	800b7cc <HAL_UART_Receive_IT>
			if (succesful) {
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f7      	beq.n	800515a <HAL_UART_RxCpltCallback+0x3a>
				new_command = true;
 800516a:	4b08      	ldr	r3, [pc, #32]	; (800518c <HAL_UART_RxCpltCallback+0x6c>)
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
				local_command = local_command_rx;
 8005170:	4b07      	ldr	r3, [pc, #28]	; (8005190 <HAL_UART_RxCpltCallback+0x70>)
 8005172:	701c      	strb	r4, [r3, #0]
 8005174:	e7f1      	b.n	800515a <HAL_UART_RxCpltCallback+0x3a>
}
 8005176:	bc30      	pop	{r4, r5}
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	240097f8 	.word	0x240097f8
 8005180:	2400032c 	.word	0x2400032c
 8005184:	240209d5 	.word	0x240209d5
 8005188:	24000324 	.word	0x24000324
 800518c:	24000328 	.word	0x24000328
 8005190:	240209d4 	.word	0x240209d4

08005194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051cc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005198:	f7fe fe14 	bl	8003dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800519c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800519e:	e003      	b.n	80051a8 <LoopCopyDataInit>

080051a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80051a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80051a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80051a6:	3104      	adds	r1, #4

080051a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80051a8:	480a      	ldr	r0, [pc, #40]	; (80051d4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80051aa:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80051ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80051ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80051b0:	d3f6      	bcc.n	80051a0 <CopyDataInit>
  ldr  r2, =_sbss
 80051b2:	4a0a      	ldr	r2, [pc, #40]	; (80051dc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80051b4:	e002      	b.n	80051bc <LoopFillZerobss>

080051b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80051b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80051b8:	f842 3b04 	str.w	r3, [r2], #4

080051bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80051bc:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80051be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80051c0:	d3f9      	bcc.n	80051b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80051c2:	f00d f9f9 	bl	80125b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051c6:	f7fd fd5b 	bl	8002c80 <main>
  bx  lr    
 80051ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80051cc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80051d0:	08014fc0 	.word	0x08014fc0
  ldr  r0, =_sdata
 80051d4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80051d8:	240001f4 	.word	0x240001f4
  ldr  r2, =_sbss
 80051dc:	240001f4 	.word	0x240001f4
  ldr  r3, = _ebss
 80051e0:	24022768 	.word	0x24022768

080051e4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051e4:	e7fe      	b.n	80051e4 <ADC3_IRQHandler>
	...

080051e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051e8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051ea:	2003      	movs	r0, #3
 80051ec:	f000 fea0 	bl	8005f30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051f0:	f003 f920 	bl	8008434 <HAL_RCC_GetSysClockFreq>
 80051f4:	490f      	ldr	r1, [pc, #60]	; (8005234 <HAL_Init+0x4c>)
 80051f6:	4a10      	ldr	r2, [pc, #64]	; (8005238 <HAL_Init+0x50>)
 80051f8:	698b      	ldr	r3, [r1, #24]
 80051fa:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80051fe:	5cd3      	ldrb	r3, [r2, r3]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005206:	698b      	ldr	r3, [r1, #24]
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	5cd3      	ldrb	r3, [r2, r3]
 800520e:	4a0b      	ldr	r2, [pc, #44]	; (800523c <HAL_Init+0x54>)
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	fa20 f303 	lsr.w	r3, r0, r3
 8005218:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800521a:	4b09      	ldr	r3, [pc, #36]	; (8005240 <HAL_Init+0x58>)
 800521c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800521e:	2000      	movs	r0, #0
 8005220:	f7fe fcfa 	bl	8003c18 <HAL_InitTick>
 8005224:	4604      	mov	r4, r0
 8005226:	b918      	cbnz	r0, 8005230 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005228:	f7fe f994 	bl	8003554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800522c:	4620      	mov	r0, r4
 800522e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005230:	2401      	movs	r4, #1
 8005232:	e7fb      	b.n	800522c <HAL_Init+0x44>
 8005234:	58024400 	.word	0x58024400
 8005238:	08014870 	.word	0x08014870
 800523c:	24000004 	.word	0x24000004
 8005240:	24000000 	.word	0x24000000

08005244 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005244:	4a03      	ldr	r2, [pc, #12]	; (8005254 <HAL_IncTick+0x10>)
 8005246:	4b04      	ldr	r3, [pc, #16]	; (8005258 <HAL_IncTick+0x14>)
 8005248:	6811      	ldr	r1, [r2, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	440b      	add	r3, r1
 800524e:	6013      	str	r3, [r2, #0]
}
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	240209dc 	.word	0x240209dc
 8005258:	24000008 	.word	0x24000008

0800525c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800525c:	4b01      	ldr	r3, [pc, #4]	; (8005264 <HAL_GetTick+0x8>)
 800525e:	6818      	ldr	r0, [r3, #0]
}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	240209dc 	.word	0x240209dc

08005268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800526c:	f7ff fff6 	bl	800525c <HAL_GetTick>
 8005270:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005272:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005274:	bf1e      	ittt	ne
 8005276:	4b04      	ldrne	r3, [pc, #16]	; (8005288 <HAL_Delay+0x20>)
 8005278:	781b      	ldrbne	r3, [r3, #0]
 800527a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800527c:	f7ff ffee 	bl	800525c <HAL_GetTick>
 8005280:	1b40      	subs	r0, r0, r5
 8005282:	42a0      	cmp	r0, r4
 8005284:	d3fa      	bcc.n	800527c <HAL_Delay+0x14>
  {
  }
}
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	24000008 	.word	0x24000008

0800528c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800528c:	4b01      	ldr	r3, [pc, #4]	; (8005294 <HAL_GetREVID+0x8>)
 800528e:	6818      	ldr	r0, [r3, #0]
}
 8005290:	0c00      	lsrs	r0, r0, #16
 8005292:	4770      	bx	lr
 8005294:	5c001000 	.word	0x5c001000

08005298 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005298:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800529a:	0dcc      	lsrs	r4, r1, #23
 800529c:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 800529e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 80052a2:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80052a4:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80052a8:	408d      	lsls	r5, r1
 80052aa:	fa02 f101 	lsl.w	r1, r2, r1
 80052ae:	5823      	ldr	r3, [r4, r0]
 80052b0:	ea23 0305 	bic.w	r3, r3, r5
 80052b4:	4319      	orrs	r1, r3
 80052b6:	5021      	str	r1, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80052b8:	bd30      	pop	{r4, r5, pc}

080052ba <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052ba:	6880      	ldr	r0, [r0, #8]
}
 80052bc:	f000 0001 	and.w	r0, r0, #1
 80052c0:	4770      	bx	lr

080052c2 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052c2:	6880      	ldr	r0, [r0, #8]
}
 80052c4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80052c8:	4770      	bx	lr

080052ca <HAL_ADC_ConvCpltCallback>:
 80052ca:	4770      	bx	lr

080052cc <HAL_ADC_ConvHalfCpltCallback>:
 80052cc:	4770      	bx	lr

080052ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80052ce:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80052d0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80052d2:	f7ff fffb 	bl	80052cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052d6:	bd08      	pop	{r3, pc}

080052d8 <HAL_ADC_ErrorCallback>:
 80052d8:	4770      	bx	lr

080052da <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052da:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80052dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052de:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 80052e4:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80052e6:	d121      	bne.n	800532c <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	6811      	ldr	r1, [r2, #0]
 80052f2:	0708      	lsls	r0, r1, #28
 80052f4:	d516      	bpl.n	8005324 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80052f6:	68d1      	ldr	r1, [r2, #12]
 80052f8:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 80052fc:	d10e      	bne.n	800531c <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80052fe:	68d2      	ldr	r2, [r2, #12]
 8005300:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005304:	d10a      	bne.n	800531c <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005306:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800530e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005310:	04d1      	lsls	r1, r2, #19
 8005312:	d403      	bmi.n	800531c <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff ffd4 	bl	80052ca <HAL_ADC_ConvCpltCallback>
}
 8005322:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005324:	68d2      	ldr	r2, [r2, #12]
 8005326:	f012 0f03 	tst.w	r2, #3
 800532a:	e7eb      	b.n	8005304 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800532c:	06d2      	lsls	r2, r2, #27
 800532e:	d503      	bpl.n	8005338 <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff ffd1 	bl	80052d8 <HAL_ADC_ErrorCallback>
 8005336:	e7f4      	b.n	8005322 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800533a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800533e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005340:	4718      	bx	r3

08005342 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005342:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005344:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005346:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534c:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800534e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005350:	f043 0304 	orr.w	r3, r3, #4
 8005354:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005356:	f7ff ffbf 	bl	80052d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800535a:	bd08      	pop	{r3, pc}

0800535c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800535c:	2300      	movs	r3, #0
{
 800535e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8005360:	9301      	str	r3, [sp, #4]
{
 8005362:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005364:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8005368:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 800536a:	2b01      	cmp	r3, #1
 800536c:	f000 8173 	beq.w	8005656 <HAL_ADC_ConfigChannel+0x2fa>
 8005370:	2301      	movs	r3, #1
 8005372:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005376:	6800      	ldr	r0, [r0, #0]
 8005378:	f7ff ffa3 	bl	80052c2 <LL_ADC_REG_IsConversionOngoing>
 800537c:	2800      	cmp	r0, #0
 800537e:	f040 8164 	bne.w	800564a <HAL_ADC_ConfigChannel+0x2ee>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005382:	680a      	ldr	r2, [r1, #0]
 8005384:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8005388:	f3c2 6184 	ubfx	r1, r2, #26, #5
 800538c:	bb50      	cbnz	r0, 80053e4 <HAL_ADC_ConfigChannel+0x88>
 800538e:	408b      	lsls	r3, r1
 8005390:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(*preg,
 8005392:	271f      	movs	r7, #31
 8005394:	69c2      	ldr	r2, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005396:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 800539a:	4313      	orrs	r3, r2
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800539c:	686a      	ldr	r2, [r5, #4]
 800539e:	0996      	lsrs	r6, r2, #6
  MODIFY_REG(*preg,
 80053a0:	f002 021f 	and.w	r2, r2, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80053a4:	61c3      	str	r3, [r0, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80053a6:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80053aa:	4097      	lsls	r7, r2
 80053ac:	fa01 f202 	lsl.w	r2, r1, r2
 80053b0:	f856 300c 	ldr.w	r3, [r6, ip]
 80053b4:	ea23 0307 	bic.w	r3, r3, r7
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f846 300c 	str.w	r3, [r6, ip]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053be:	f7ff ff80 	bl	80052c2 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80053c2:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80053c4:	689e      	ldr	r6, [r3, #8]
 80053c6:	f016 0608 	ands.w	r6, r6, #8
 80053ca:	f000 8146 	beq.w	800565a <HAL_ADC_ConfigChannel+0x2fe>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053ce:	6820      	ldr	r0, [r4, #0]
 80053d0:	f7ff ff73 	bl	80052ba <LL_ADC_IsEnabled>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d03c      	beq.n	8005452 <HAL_ADC_ConfigChannel+0xf6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053d8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80053da:	2300      	movs	r3, #0
 80053dc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80053e0:	b003      	add	sp, #12
 80053e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e4:	fa92 f0a2 	rbit	r0, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80053e8:	fab0 f080 	clz	r0, r0
 80053ec:	f000 001f 	and.w	r0, r0, #31
 80053f0:	4083      	lsls	r3, r0
 80053f2:	e7cd      	b.n	8005390 <HAL_ADC_ConfigChannel+0x34>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80053f4:	68d9      	ldr	r1, [r3, #12]
 80053f6:	68d8      	ldr	r0, [r3, #12]
 80053f8:	06c9      	lsls	r1, r1, #27
 80053fa:	f140 8141 	bpl.w	8005680 <HAL_ADC_ConfigChannel+0x324>
 80053fe:	0840      	lsrs	r0, r0, #1
 8005400:	f000 0008 	and.w	r0, r0, #8
 8005404:	e13f      	b.n	8005686 <HAL_ADC_ConfigChannel+0x32a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005406:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005408:	0692      	lsls	r2, r2, #26
 800540a:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 800540e:	4291      	cmp	r1, r2
 8005410:	d103      	bne.n	800541a <HAL_ADC_ConfigChannel+0xbe>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005412:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005418:	6619      	str	r1, [r3, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800541a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800541c:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005420:	428a      	cmp	r2, r1
 8005422:	d103      	bne.n	800542c <HAL_ADC_ConfigChannel+0xd0>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005424:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005426:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800542a:	6659      	str	r1, [r3, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800542c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800542e:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005432:	428a      	cmp	r2, r1
 8005434:	d103      	bne.n	800543e <HAL_ADC_ConfigChannel+0xe2>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005436:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005438:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800543c:	6699      	str	r1, [r3, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800543e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8005440:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005444:	428a      	cmp	r2, r1
 8005446:	d1c2      	bne.n	80053ce <HAL_ADC_ConfigChannel+0x72>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005448:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800544a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800544e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005450:	e7bd      	b.n	80053ce <HAL_ADC_ConfigChannel+0x72>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005452:	68ee      	ldr	r6, [r5, #12]
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8005458:	f006 0c18 	and.w	ip, r6, #24
 800545c:	4aa3      	ldr	r2, [pc, #652]	; (80056ec <HAL_ADC_ConfigChannel+0x390>)
 800545e:	f3c3 0713 	ubfx	r7, r3, #0, #20
 8005462:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 8005466:	fa22 f20c 	lsr.w	r2, r2, ip
 800546a:	ea21 0107 	bic.w	r1, r1, r7
 800546e:	401a      	ands	r2, r3
 8005470:	430a      	orrs	r2, r1
 8005472:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005476:	4a9e      	ldr	r2, [pc, #632]	; (80056f0 <HAL_ADC_ConfigChannel+0x394>)
 8005478:	4296      	cmp	r6, r2
 800547a:	d11d      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x15c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800547c:	2f00      	cmp	r7, #0
 800547e:	d161      	bne.n	8005544 <HAL_ADC_ConfigChannel+0x1e8>
 8005480:	0e9a      	lsrs	r2, r3, #26
 8005482:	3201      	adds	r2, #1
 8005484:	f002 061f 	and.w	r6, r2, #31
 8005488:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800548a:	2e09      	cmp	r6, #9
 800548c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005490:	f04f 0201 	mov.w	r2, #1
 8005494:	fa02 f206 	lsl.w	r2, r2, r6
 8005498:	f200 8085 	bhi.w	80055a6 <HAL_ADC_ConfigChannel+0x24a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800549c:	4311      	orrs	r1, r2
 800549e:	2f00      	cmp	r7, #0
 80054a0:	d16b      	bne.n	800557a <HAL_ADC_ConfigChannel+0x21e>
 80054a2:	0e9b      	lsrs	r3, r3, #26
 80054a4:	3301      	adds	r3, #1
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80054ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054b0:	4319      	orrs	r1, r3
 80054b2:	68aa      	ldr	r2, [r5, #8]
 80054b4:	f7ff fef0 	bl	8005298 <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da8c      	bge.n	80053d8 <HAL_ADC_ConfigChannel+0x7c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054be:	6822      	ldr	r2, [r4, #0]
 80054c0:	498c      	ldr	r1, [pc, #560]	; (80056f4 <HAL_ADC_ConfigChannel+0x398>)
 80054c2:	428a      	cmp	r2, r1
 80054c4:	f000 8089 	beq.w	80055da <HAL_ADC_ConfigChannel+0x27e>
 80054c8:	4e8b      	ldr	r6, [pc, #556]	; (80056f8 <HAL_ADC_ConfigChannel+0x39c>)
 80054ca:	4b8c      	ldr	r3, [pc, #560]	; (80056fc <HAL_ADC_ConfigChannel+0x3a0>)
 80054cc:	488c      	ldr	r0, [pc, #560]	; (8005700 <HAL_ADC_ConfigChannel+0x3a4>)
 80054ce:	42b2      	cmp	r2, r6
 80054d0:	bf08      	it	eq
 80054d2:	4603      	moveq	r3, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054d4:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	d002      	beq.n	80054e0 <HAL_ADC_ConfigChannel+0x184>
 80054da:	4987      	ldr	r1, [pc, #540]	; (80056f8 <HAL_ADC_ConfigChannel+0x39c>)
 80054dc:	428a      	cmp	r2, r1
 80054de:	d17e      	bne.n	80055de <HAL_ADC_ConfigChannel+0x282>
 80054e0:	4884      	ldr	r0, [pc, #528]	; (80056f4 <HAL_ADC_ConfigChannel+0x398>)
 80054e2:	f7ff feea 	bl	80052ba <LL_ADC_IsEnabled>
 80054e6:	4602      	mov	r2, r0
 80054e8:	4883      	ldr	r0, [pc, #524]	; (80056f8 <HAL_ADC_ConfigChannel+0x39c>)
 80054ea:	f7ff fee6 	bl	80052ba <LL_ADC_IsEnabled>
 80054ee:	4302      	orrs	r2, r0
 80054f0:	bf0c      	ite	eq
 80054f2:	2001      	moveq	r0, #1
 80054f4:	2000      	movne	r0, #0
 80054f6:	2800      	cmp	r0, #0
 80054f8:	f000 80a1 	beq.w	800563e <HAL_ADC_ConfigChannel+0x2e2>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054fc:	6829      	ldr	r1, [r5, #0]
 80054fe:	f003 72e0 	and.w	r2, r3, #29360128	; 0x1c00000
 8005502:	4880      	ldr	r0, [pc, #512]	; (8005704 <HAL_ADC_ConfigChannel+0x3a8>)
 8005504:	4281      	cmp	r1, r0
 8005506:	d171      	bne.n	80055ec <HAL_ADC_ConfigChannel+0x290>
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	f53f af65 	bmi.w	80053d8 <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800550e:	6821      	ldr	r1, [r4, #0]
 8005510:	4b7d      	ldr	r3, [pc, #500]	; (8005708 <HAL_ADC_ConfigChannel+0x3ac>)
 8005512:	4299      	cmp	r1, r3
 8005514:	f47f af60 	bne.w	80053d8 <HAL_ADC_ConfigChannel+0x7c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005518:	4978      	ldr	r1, [pc, #480]	; (80056fc <HAL_ADC_ConfigChannel+0x3a0>)
 800551a:	688b      	ldr	r3, [r1, #8]
 800551c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005520:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005524:	4313      	orrs	r3, r2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005526:	4a79      	ldr	r2, [pc, #484]	; (800570c <HAL_ADC_ConfigChannel+0x3b0>)
 8005528:	608b      	str	r3, [r1, #8]
 800552a:	4b79      	ldr	r3, [pc, #484]	; (8005710 <HAL_ADC_ConfigChannel+0x3b4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005532:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8005534:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8005536:	9b01      	ldr	r3, [sp, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f43f af4d 	beq.w	80053d8 <HAL_ADC_ConfigChannel+0x7c>
                wait_loop_index--;
 800553e:	9b01      	ldr	r3, [sp, #4]
 8005540:	3b01      	subs	r3, #1
 8005542:	e7f7      	b.n	8005534 <HAL_ADC_ConfigChannel+0x1d8>
 8005544:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005548:	fab2 f282 	clz	r2, r2
 800554c:	3201      	adds	r2, #1
 800554e:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005552:	2a09      	cmp	r2, #9
 8005554:	d816      	bhi.n	8005584 <HAL_ADC_ConfigChannel+0x228>
 8005556:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800555a:	fab1 f181 	clz	r1, r1
 800555e:	3101      	adds	r1, #1
 8005560:	0689      	lsls	r1, r1, #26
 8005562:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005566:	fa93 f2a3 	rbit	r2, r3
 800556a:	fab2 f282 	clz	r2, r2
 800556e:	3201      	adds	r2, #1
 8005570:	f002 061f 	and.w	r6, r2, #31
 8005574:	2201      	movs	r2, #1
 8005576:	40b2      	lsls	r2, r6
 8005578:	e790      	b.n	800549c <HAL_ADC_ConfigChannel+0x140>
 800557a:	fa93 f3a3 	rbit	r3, r3
 800557e:	fab3 f383 	clz	r3, r3
 8005582:	e78f      	b.n	80054a4 <HAL_ADC_ConfigChannel+0x148>
 8005584:	fa93 f1a3 	rbit	r1, r3
 8005588:	fab1 f181 	clz	r1, r1
 800558c:	3101      	adds	r1, #1
 800558e:	0689      	lsls	r1, r1, #26
 8005590:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8005594:	fa93 f2a3 	rbit	r2, r3
 8005598:	fab2 f282 	clz	r2, r2
 800559c:	3201      	adds	r2, #1
 800559e:	f002 061f 	and.w	r6, r2, #31
 80055a2:	2201      	movs	r2, #1
 80055a4:	40b2      	lsls	r2, r6
 80055a6:	430a      	orrs	r2, r1
 80055a8:	b95f      	cbnz	r7, 80055c2 <HAL_ADC_ConfigChannel+0x266>
 80055aa:	0e9b      	lsrs	r3, r3, #26
 80055ac:	3301      	adds	r3, #1
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80055b6:	391e      	subs	r1, #30
 80055b8:	0509      	lsls	r1, r1, #20
 80055ba:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055be:	4311      	orrs	r1, r2
 80055c0:	e777      	b.n	80054b2 <HAL_ADC_ConfigChannel+0x156>
 80055c2:	fa93 f3a3 	rbit	r3, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055c6:	fab3 f383 	clz	r3, r3
 80055ca:	3301      	adds	r3, #1
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80055d4:	f1a3 011e 	sub.w	r1, r3, #30
 80055d8:	e7ee      	b.n	80055b8 <HAL_ADC_ConfigChannel+0x25c>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80055da:	4b49      	ldr	r3, [pc, #292]	; (8005700 <HAL_ADC_ConfigChannel+0x3a4>)
 80055dc:	e77a      	b.n	80054d4 <HAL_ADC_ConfigChannel+0x178>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055de:	484a      	ldr	r0, [pc, #296]	; (8005708 <HAL_ADC_ConfigChannel+0x3ac>)
 80055e0:	f7ff fe6b 	bl	80052ba <LL_ADC_IsEnabled>
 80055e4:	fab0 f080 	clz	r0, r0
 80055e8:	0940      	lsrs	r0, r0, #5
 80055ea:	e784      	b.n	80054f6 <HAL_ADC_ConfigChannel+0x19a>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80055ec:	4849      	ldr	r0, [pc, #292]	; (8005714 <HAL_ADC_ConfigChannel+0x3b8>)
 80055ee:	4281      	cmp	r1, r0
 80055f0:	d111      	bne.n	8005616 <HAL_ADC_ConfigChannel+0x2ba>
 80055f2:	f013 7080 	ands.w	r0, r3, #16777216	; 0x1000000
 80055f6:	f47f aeef 	bne.w	80053d8 <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055fa:	6821      	ldr	r1, [r4, #0]
 80055fc:	4b42      	ldr	r3, [pc, #264]	; (8005708 <HAL_ADC_ConfigChannel+0x3ac>)
 80055fe:	4299      	cmp	r1, r3
 8005600:	f47f aeea 	bne.w	80053d8 <HAL_ADC_ConfigChannel+0x7c>
 8005604:	493d      	ldr	r1, [pc, #244]	; (80056fc <HAL_ADC_ConfigChannel+0x3a0>)
 8005606:	688b      	ldr	r3, [r1, #8]
 8005608:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800560c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005610:	4313      	orrs	r3, r2
 8005612:	608b      	str	r3, [r1, #8]
 8005614:	e6e1      	b.n	80053da <HAL_ADC_ConfigChannel+0x7e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005616:	4840      	ldr	r0, [pc, #256]	; (8005718 <HAL_ADC_ConfigChannel+0x3bc>)
 8005618:	4281      	cmp	r1, r0
 800561a:	f47f aedd 	bne.w	80053d8 <HAL_ADC_ConfigChannel+0x7c>
 800561e:	f413 0080 	ands.w	r0, r3, #4194304	; 0x400000
 8005622:	f47f aed9 	bne.w	80053d8 <HAL_ADC_ConfigChannel+0x7c>
            if (ADC_VREFINT_INSTANCE(hadc))
 8005626:	6821      	ldr	r1, [r4, #0]
 8005628:	4b37      	ldr	r3, [pc, #220]	; (8005708 <HAL_ADC_ConfigChannel+0x3ac>)
 800562a:	4299      	cmp	r1, r3
 800562c:	f47f aed4 	bne.w	80053d8 <HAL_ADC_ConfigChannel+0x7c>
 8005630:	4932      	ldr	r1, [pc, #200]	; (80056fc <HAL_ADC_ConfigChannel+0x3a0>)
 8005632:	688b      	ldr	r3, [r1, #8]
 8005634:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800563c:	e7e8      	b.n	8005610 <HAL_ADC_ConfigChannel+0x2b4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800563e:	6d63      	ldr	r3, [r4, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005640:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005642:	f043 0320 	orr.w	r3, r3, #32
 8005646:	6563      	str	r3, [r4, #84]	; 0x54
 8005648:	e6c7      	b.n	80053da <HAL_ADC_ConfigChannel+0x7e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800564a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800564c:	4618      	mov	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800564e:	f042 0220 	orr.w	r2, r2, #32
 8005652:	6562      	str	r2, [r4, #84]	; 0x54
 8005654:	e6c1      	b.n	80053da <HAL_ADC_ConfigChannel+0x7e>
  __HAL_LOCK(hadc);
 8005656:	2002      	movs	r0, #2
 8005658:	e6c2      	b.n	80053e0 <HAL_ADC_ConfigChannel+0x84>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800565a:	2800      	cmp	r0, #0
 800565c:	f47f aeb7 	bne.w	80053ce <HAL_ADC_ConfigChannel+0x72>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005660:	68aa      	ldr	r2, [r5, #8]
 8005662:	4618      	mov	r0, r3
 8005664:	6829      	ldr	r1, [r5, #0]
 8005666:	f7ff fe17 	bl	8005298 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800566a:	4b2c      	ldr	r3, [pc, #176]	; (800571c <HAL_ADC_ConfigChannel+0x3c0>)
 800566c:	696a      	ldr	r2, [r5, #20]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	f47f aebb 	bne.w	80053f4 <HAL_ADC_ConfigChannel+0x98>
 800567e:	68d8      	ldr	r0, [r3, #12]
 8005680:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8005684:	0040      	lsls	r0, r0, #1
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005686:	f8d5 c010 	ldr.w	ip, [r5, #16]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800568a:	fa02 f000 	lsl.w	r0, r2, r0
 800568e:	682a      	ldr	r2, [r5, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005690:	f1bc 0f04 	cmp.w	ip, #4
 8005694:	f43f aeb7 	beq.w	8005406 <HAL_ADC_ConfigChannel+0xaa>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005698:	f103 0760 	add.w	r7, r3, #96	; 0x60
    MODIFY_REG(*preg,
 800569c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80056a0:	f857 102c 	ldr.w	r1, [r7, ip, lsl #2]
 80056a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80056a8:	430a      	orrs	r2, r1
 80056aa:	4302      	orrs	r2, r0
 80056ac:	f847 202c 	str.w	r2, [r7, ip, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80056b0:	7e6a      	ldrb	r2, [r5, #25]
 80056b2:	6929      	ldr	r1, [r5, #16]
 80056b4:	2a01      	cmp	r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80056b6:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 80056ba:	bf14      	ite	ne
 80056bc:	2000      	movne	r0, #0
 80056be:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 80056c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056c6:	4302      	orrs	r2, r0
 80056c8:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80056cc:	7e29      	ldrb	r1, [r5, #24]
 80056ce:	692a      	ldr	r2, [r5, #16]
 80056d0:	2901      	cmp	r1, #1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80056d2:	6919      	ldr	r1, [r3, #16]
 80056d4:	f002 021f 	and.w	r2, r2, #31
 80056d8:	bf08      	it	eq
 80056da:	f44f 6600 	moveq.w	r6, #2048	; 0x800
 80056de:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
 80056e2:	fa06 f202 	lsl.w	r2, r6, r2
 80056e6:	430a      	orrs	r2, r1
 80056e8:	611a      	str	r2, [r3, #16]
 80056ea:	e670      	b.n	80053ce <HAL_ADC_ConfigChannel+0x72>
 80056ec:	000fffff 	.word	0x000fffff
 80056f0:	47ff0000 	.word	0x47ff0000
 80056f4:	40022000 	.word	0x40022000
 80056f8:	40022100 	.word	0x40022100
 80056fc:	58026300 	.word	0x58026300
 8005700:	40022300 	.word	0x40022300
 8005704:	cb840000 	.word	0xcb840000
 8005708:	58026000 	.word	0x58026000
 800570c:	00030d40 	.word	0x00030d40
 8005710:	24000000 	.word	0x24000000
 8005714:	c7520000 	.word	0xc7520000
 8005718:	cfb80000 	.word	0xcfb80000
 800571c:	5c001000 	.word	0x5c001000

08005720 <ADC_ConversionStop>:
{
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005724:	6800      	ldr	r0, [r0, #0]
 8005726:	f7ff fdcc 	bl	80052c2 <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800572a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	0716      	lsls	r6, r2, #28
 8005730:	d556      	bpl.n	80057e0 <ADC_ConversionStop+0xc0>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	0190      	lsls	r0, r2, #6
 8005736:	d52b      	bpl.n	8005790 <ADC_ConversionStop+0x70>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005738:	8aa0      	ldrh	r0, [r4, #20]
 800573a:	f240 1201 	movw	r2, #257	; 0x101
 800573e:	4290      	cmp	r0, r2
 8005740:	d126      	bne.n	8005790 <ADC_ConversionStop+0x70>
 8005742:	4a29      	ldr	r2, [pc, #164]	; (80057e8 <ADC_ConversionStop+0xc8>)
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005744:	6819      	ldr	r1, [r3, #0]
 8005746:	0649      	lsls	r1, r1, #25
 8005748:	d516      	bpl.n	8005778 <ADC_ConversionStop+0x58>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800574a:	2240      	movs	r2, #64	; 0x40
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800574c:	2101      	movs	r1, #1
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800574e:	601a      	str	r2, [r3, #0]
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fdb6 	bl	80052c2 <LL_ADC_REG_IsConversionOngoing>
 8005756:	b158      	cbz	r0, 8005770 <ADC_ConversionStop+0x50>
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005758:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800575a:	6893      	ldr	r3, [r2, #8]
 800575c:	079e      	lsls	r6, r3, #30
 800575e:	d407      	bmi.n	8005770 <ADC_ConversionStop+0x50>
  MODIFY_REG(ADCx->CR,
 8005760:	6893      	ldr	r3, [r2, #8]
 8005762:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005766:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800576a:	f043 0310 	orr.w	r3, r3, #16
 800576e:	6093      	str	r3, [r2, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005770:	2901      	cmp	r1, #1
 8005772:	d10f      	bne.n	8005794 <ADC_ConversionStop+0x74>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005774:	2504      	movs	r5, #4
 8005776:	e022      	b.n	80057be <ADC_ConversionStop+0x9e>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005778:	3a01      	subs	r2, #1
 800577a:	d1e3      	bne.n	8005744 <ADC_ConversionStop+0x24>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800577c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800577e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005780:	f043 0310 	orr.w	r3, r3, #16
 8005784:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005786:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800578e:	bd70      	pop	{r4, r5, r6, pc}
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005790:	2902      	cmp	r1, #2
 8005792:	d1dd      	bne.n	8005750 <ADC_ConversionStop+0x30>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005794:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005796:	6893      	ldr	r3, [r2, #8]
 8005798:	0718      	lsls	r0, r3, #28
 800579a:	d50a      	bpl.n	80057b2 <ADC_ConversionStop+0x92>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800579c:	6893      	ldr	r3, [r2, #8]
 800579e:	079b      	lsls	r3, r3, #30
 80057a0:	d407      	bmi.n	80057b2 <ADC_ConversionStop+0x92>
  MODIFY_REG(ADCx->CR,
 80057a2:	6893      	ldr	r3, [r2, #8]
 80057a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057ac:	f043 0320 	orr.w	r3, r3, #32
 80057b0:	6093      	str	r3, [r2, #8]
    switch (conversion_group_reassigned)
 80057b2:	2902      	cmp	r1, #2
 80057b4:	d00c      	beq.n	80057d0 <ADC_ConversionStop+0xb0>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80057b6:	2903      	cmp	r1, #3
 80057b8:	bf0c      	ite	eq
 80057ba:	250c      	moveq	r5, #12
 80057bc:	2504      	movne	r5, #4
    tickstart = HAL_GetTick();
 80057be:	f7ff fd4d 	bl	800525c <HAL_GetTick>
 80057c2:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	422b      	tst	r3, r5
 80057ca:	d103      	bne.n	80057d4 <ADC_ConversionStop+0xb4>
  return HAL_OK;
 80057cc:	2000      	movs	r0, #0
 80057ce:	e7de      	b.n	800578e <ADC_ConversionStop+0x6e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80057d0:	2508      	movs	r5, #8
 80057d2:	e7f4      	b.n	80057be <ADC_ConversionStop+0x9e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80057d4:	f7ff fd42 	bl	800525c <HAL_GetTick>
 80057d8:	1b80      	subs	r0, r0, r6
 80057da:	2805      	cmp	r0, #5
 80057dc:	d9f2      	bls.n	80057c4 <ADC_ConversionStop+0xa4>
 80057de:	e7cd      	b.n	800577c <ADC_ConversionStop+0x5c>
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d1a6      	bne.n	8005732 <ADC_ConversionStop+0x12>
 80057e4:	e7f2      	b.n	80057cc <ADC_ConversionStop+0xac>
 80057e6:	bf00      	nop
 80057e8:	000cdc01 	.word	0x000cdc01

080057ec <ADC_Enable>:
{
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057f0:	6800      	ldr	r0, [r0, #0]
 80057f2:	f7ff fd62 	bl	80052ba <LL_ADC_IsEnabled>
 80057f6:	b108      	cbz	r0, 80057fc <ADC_Enable+0x10>
  return HAL_OK;
 80057f8:	2000      	movs	r0, #0
}
 80057fa:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80057fc:	6822      	ldr	r2, [r4, #0]
 80057fe:	4b21      	ldr	r3, [pc, #132]	; (8005884 <ADC_Enable+0x98>)
 8005800:	6891      	ldr	r1, [r2, #8]
 8005802:	4219      	tst	r1, r3
 8005804:	d009      	beq.n	800581a <ADC_Enable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005806:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8005808:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800580a:	f043 0310 	orr.w	r3, r3, #16
 800580e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005810:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	65a3      	str	r3, [r4, #88]	; 0x58
 8005818:	e7ef      	b.n	80057fa <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 800581a:	6893      	ldr	r3, [r2, #8]
 800581c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005820:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800582a:	f7ff fd17 	bl	800525c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	4b15      	ldr	r3, [pc, #84]	; (8005888 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8005832:	4605      	mov	r5, r0
 8005834:	4915      	ldr	r1, [pc, #84]	; (800588c <ADC_Enable+0xa0>)
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005836:	429a      	cmp	r2, r3
 8005838:	d00e      	beq.n	8005858 <ADC_Enable+0x6c>
 800583a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800583e:	4814      	ldr	r0, [pc, #80]	; (8005890 <ADC_Enable+0xa4>)
 8005840:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8005844:	428a      	cmp	r2, r1
 8005846:	bf08      	it	eq
 8005848:	4603      	moveq	r3, r0
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800584a:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	d101      	bne.n	8005854 <ADC_Enable+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005850:	06db      	lsls	r3, r3, #27
 8005852:	d1d1      	bne.n	80057f8 <ADC_Enable+0xc>
  MODIFY_REG(ADCx->CR,
 8005854:	4e0f      	ldr	r6, [pc, #60]	; (8005894 <ADC_Enable+0xa8>)
 8005856:	e00f      	b.n	8005878 <ADC_Enable+0x8c>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005858:	4b0d      	ldr	r3, [pc, #52]	; (8005890 <ADC_Enable+0xa4>)
 800585a:	e7f6      	b.n	800584a <ADC_Enable+0x5e>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800585c:	f7ff fd2d 	bl	80052ba <LL_ADC_IsEnabled>
 8005860:	b928      	cbnz	r0, 800586e <ADC_Enable+0x82>
          LL_ADC_Enable(hadc->Instance);
 8005862:	6822      	ldr	r2, [r4, #0]
 8005864:	6893      	ldr	r3, [r2, #8]
 8005866:	4033      	ands	r3, r6
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800586e:	f7ff fcf5 	bl	800525c <HAL_GetTick>
 8005872:	1b40      	subs	r0, r0, r5
 8005874:	2802      	cmp	r0, #2
 8005876:	d8c6      	bhi.n	8005806 <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005878:	6820      	ldr	r0, [r4, #0]
 800587a:	6803      	ldr	r3, [r0, #0]
 800587c:	07da      	lsls	r2, r3, #31
 800587e:	d5ed      	bpl.n	800585c <ADC_Enable+0x70>
 8005880:	e7ba      	b.n	80057f8 <ADC_Enable+0xc>
 8005882:	bf00      	nop
 8005884:	8000003f 	.word	0x8000003f
 8005888:	40022000 	.word	0x40022000
 800588c:	40022100 	.word	0x40022100
 8005890:	40022300 	.word	0x40022300
 8005894:	7fffffc0 	.word	0x7fffffc0

08005898 <HAL_ADC_Start_DMA>:
{
 8005898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800589c:	4b40      	ldr	r3, [pc, #256]	; (80059a0 <HAL_ADC_Start_DMA+0x108>)
{
 800589e:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058a0:	6800      	ldr	r0, [r0, #0]
{
 80058a2:	460e      	mov	r6, r1
 80058a4:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058a6:	4298      	cmp	r0, r3
 80058a8:	d069      	beq.n	800597e <HAL_ADC_Start_DMA+0xe6>
 80058aa:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80058ae:	493d      	ldr	r1, [pc, #244]	; (80059a4 <HAL_ADC_Start_DMA+0x10c>)
 80058b0:	4a3d      	ldr	r2, [pc, #244]	; (80059a8 <HAL_ADC_Start_DMA+0x110>)
 80058b2:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 80058b6:	4288      	cmp	r0, r1
 80058b8:	bf08      	it	eq
 80058ba:	4613      	moveq	r3, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80058bc:	689b      	ldr	r3, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058be:	f7ff fd00 	bl	80052c2 <LL_ADC_REG_IsConversionOngoing>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d165      	bne.n	8005992 <HAL_ADC_Start_DMA+0xfa>
    __HAL_LOCK(hadc);
 80058c6:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80058ca:	2a01      	cmp	r2, #1
 80058cc:	d061      	beq.n	8005992 <HAL_ADC_Start_DMA+0xfa>
 80058ce:	f003 081f 	and.w	r8, r3, #31
 80058d2:	2301      	movs	r3, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058d4:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 80058d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058dc:	d854      	bhi.n	8005988 <HAL_ADC_Start_DMA+0xf0>
 80058de:	f240 2321 	movw	r3, #545	; 0x221
 80058e2:	fa23 f308 	lsr.w	r3, r3, r8
 80058e6:	43db      	mvns	r3, r3
 80058e8:	f013 0501 	ands.w	r5, r3, #1
 80058ec:	d14c      	bne.n	8005988 <HAL_ADC_Start_DMA+0xf0>
      tmp_hal_status = ADC_Enable(hadc);
 80058ee:	4620      	mov	r0, r4
 80058f0:	f7ff ff7c 	bl	80057ec <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d144      	bne.n	8005982 <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 80058f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058fa:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80058fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005908:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800590a:	4b26      	ldr	r3, [pc, #152]	; (80059a4 <HAL_ADC_Start_DMA+0x10c>)
 800590c:	4299      	cmp	r1, r3
 800590e:	d042      	beq.n	8005996 <HAL_ADC_Start_DMA+0xfe>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005910:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005912:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005916:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005918:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800591a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800591e:	d002      	beq.n	8005926 <HAL_ADC_Start_DMA+0x8e>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005920:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005922:	f023 0306 	bic.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8005926:	65a3      	str	r3, [r4, #88]	; 0x58
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005928:	3140      	adds	r1, #64	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800592a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800592c:	4b1f      	ldr	r3, [pc, #124]	; (80059ac <HAL_ADC_Start_DMA+0x114>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800592e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005930:	63c3      	str	r3, [r0, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005932:	4b1f      	ldr	r3, [pc, #124]	; (80059b0 <HAL_ADC_Start_DMA+0x118>)
 8005934:	6403      	str	r3, [r0, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005936:	4b1f      	ldr	r3, [pc, #124]	; (80059b4 <HAL_ADC_Start_DMA+0x11c>)
 8005938:	64c3      	str	r3, [r0, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800593a:	231c      	movs	r3, #28
 800593c:	f841 3c40 	str.w	r3, [r1, #-64]
        __HAL_UNLOCK(hadc);
 8005940:	2300      	movs	r3, #0
 8005942:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005946:	f851 3c3c 	ldr.w	r3, [r1, #-60]
 800594a:	f043 0310 	orr.w	r3, r3, #16
 800594e:	f841 3c3c 	str.w	r3, [r1, #-60]
 8005952:	f851 3c34 	ldr.w	r3, [r1, #-52]
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	4313      	orrs	r3, r2
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800595c:	4632      	mov	r2, r6
 800595e:	f841 3c34 	str.w	r3, [r1, #-52]
 8005962:	463b      	mov	r3, r7
 8005964:	f000 fe8a 	bl	800667c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005968:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800596a:	6893      	ldr	r3, [r2, #8]
 800596c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005970:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005974:	f043 0304 	orr.w	r3, r3, #4
 8005978:	6093      	str	r3, [r2, #8]
}
 800597a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800597e:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <HAL_ADC_Start_DMA+0x110>)
 8005980:	e79c      	b.n	80058bc <HAL_ADC_Start_DMA+0x24>
        __HAL_UNLOCK(hadc);
 8005982:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8005986:	e7f8      	b.n	800597a <HAL_ADC_Start_DMA+0xe2>
      __HAL_UNLOCK(hadc);
 8005988:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 800598a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hadc);
 800598c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8005990:	e7f3      	b.n	800597a <HAL_ADC_Start_DMA+0xe2>
    tmp_hal_status = HAL_BUSY;
 8005992:	2002      	movs	r0, #2
 8005994:	e7f1      	b.n	800597a <HAL_ADC_Start_DMA+0xe2>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005996:	f1b8 0f00 	cmp.w	r8, #0
 800599a:	d0b9      	beq.n	8005910 <HAL_ADC_Start_DMA+0x78>
 800599c:	e7bc      	b.n	8005918 <HAL_ADC_Start_DMA+0x80>
 800599e:	bf00      	nop
 80059a0:	40022000 	.word	0x40022000
 80059a4:	40022100 	.word	0x40022100
 80059a8:	40022300 	.word	0x40022300
 80059ac:	080052db 	.word	0x080052db
 80059b0:	080052cf 	.word	0x080052cf
 80059b4:	08005343 	.word	0x08005343

080059b8 <ADC_Disable>:
{
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80059bc:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80059be:	6883      	ldr	r3, [r0, #8]
 80059c0:	f003 0302 	and.w	r3, r3, #2
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80059c4:	f7ff fc79 	bl	80052ba <LL_ADC_IsEnabled>
 80059c8:	b908      	cbnz	r0, 80059ce <ADC_Disable+0x16>
  return HAL_OK;
 80059ca:	2000      	movs	r0, #0
}
 80059cc:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1fb      	bne.n	80059ca <ADC_Disable+0x12>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80059d2:	6822      	ldr	r2, [r4, #0]
 80059d4:	6893      	ldr	r3, [r2, #8]
 80059d6:	f003 030d 	and.w	r3, r3, #13
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d115      	bne.n	8005a0a <ADC_Disable+0x52>
  MODIFY_REG(ADCx->CR,
 80059de:	6893      	ldr	r3, [r2, #8]
 80059e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059e8:	f043 0302 	orr.w	r3, r3, #2
 80059ec:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80059ee:	2303      	movs	r3, #3
 80059f0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80059f2:	f7ff fc33 	bl	800525c <HAL_GetTick>
 80059f6:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	07db      	lsls	r3, r3, #31
 80059fe:	d5e4      	bpl.n	80059ca <ADC_Disable+0x12>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005a00:	f7ff fc2c 	bl	800525c <HAL_GetTick>
 8005a04:	1b40      	subs	r0, r0, r5
 8005a06:	2802      	cmp	r0, #2
 8005a08:	d9f6      	bls.n	80059f8 <ADC_Disable+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8005a0c:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a0e:	f043 0310 	orr.w	r3, r3, #16
 8005a12:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a16:	f043 0301 	orr.w	r3, r3, #1
 8005a1a:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a1c:	e7d6      	b.n	80059cc <ADC_Disable+0x14>

08005a1e <HAL_ADC_Stop_DMA>:
{
 8005a1e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8005a20:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8005a24:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d035      	beq.n	8005a96 <HAL_ADC_Stop_DMA+0x78>
 8005a2a:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005a2c:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8005a2e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005a32:	f7ff fe75 	bl	8005720 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8005a36:	4605      	mov	r5, r0
 8005a38:	b9e0      	cbnz	r0, 8005a74 <HAL_ADC_Stop_DMA+0x56>
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8005a3a:	6822      	ldr	r2, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005a3c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8005a3e:	68d3      	ldr	r3, [r2, #12]
 8005a40:	f023 0303 	bic.w	r3, r3, #3
 8005a44:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005a46:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d107      	bne.n	8005a5e <HAL_ADC_Stop_DMA+0x40>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005a4e:	f000 ff33 	bl	80068b8 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8005a52:	4605      	mov	r5, r0
 8005a54:	b118      	cbz	r0, 8005a5e <HAL_ADC_Stop_DMA+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a5c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005a5e:	6822      	ldr	r2, [r4, #0]
      tmp_hal_status = ADC_Disable(hadc);
 8005a60:	4620      	mov	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005a62:	6853      	ldr	r3, [r2, #4]
 8005a64:	f023 0310 	bic.w	r3, r3, #16
 8005a68:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8005a6a:	b945      	cbnz	r5, 8005a7e <HAL_ADC_Stop_DMA+0x60>
      tmp_hal_status = ADC_Disable(hadc);
 8005a6c:	f7ff ffa4 	bl	80059b8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8005a70:	4605      	mov	r5, r0
 8005a72:	b138      	cbz	r0, 8005a84 <HAL_ADC_Stop_DMA+0x66>
  __HAL_UNLOCK(hadc);
 8005a74:	2300      	movs	r3, #0
 8005a76:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	bd38      	pop	{r3, r4, r5, pc}
      (void)ADC_Disable(hadc);
 8005a7e:	f7ff ff9b 	bl	80059b8 <ADC_Disable>
 8005a82:	e7f7      	b.n	8005a74 <HAL_ADC_Stop_DMA+0x56>
      ADC_STATE_CLR_SET(hadc->State,
 8005a84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6563      	str	r3, [r4, #84]	; 0x54
 8005a94:	e7ee      	b.n	8005a74 <HAL_ADC_Stop_DMA+0x56>
  __HAL_LOCK(hadc);
 8005a96:	2502      	movs	r5, #2
 8005a98:	e7ef      	b.n	8005a7a <HAL_ADC_Stop_DMA+0x5c>
	...

08005a9c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005a9c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005a9e:	4a44      	ldr	r2, [pc, #272]	; (8005bb0 <ADC_ConfigureBoostMode+0x114>)
{
 8005aa0:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005aa2:	6803      	ldr	r3, [r0, #0]
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <ADC_ConfigureBoostMode+0x14>
 8005aa8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d118      	bne.n	8005ae2 <ADC_ConfigureBoostMode+0x46>
 8005ab0:	4b40      	ldr	r3, [pc, #256]	; (8005bb4 <ADC_ConfigureBoostMode+0x118>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005ab8:	bf14      	ite	ne
 8005aba:	2301      	movne	r3, #1
 8005abc:	2300      	moveq	r3, #0
 8005abe:	b30b      	cbz	r3, 8005b04 <ADC_ConfigureBoostMode+0x68>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005ac0:	f002 fe7a 	bl	80087b8 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8005ac4:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8005ac6:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8005ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005acc:	d005      	beq.n	8005ada <ADC_ConfigureBoostMode+0x3e>
 8005ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ad2:	d008      	beq.n	8005ae6 <ADC_ConfigureBoostMode+0x4a>
 8005ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad8:	d106      	bne.n	8005ae8 <ADC_ConfigureBoostMode+0x4c>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005ada:	0c1b      	lsrs	r3, r3, #16
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005adc:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8005ae0:	e002      	b.n	8005ae8 <ADC_ConfigureBoostMode+0x4c>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005ae2:	4b35      	ldr	r3, [pc, #212]	; (8005bb8 <ADC_ConfigureBoostMode+0x11c>)
 8005ae4:	e7e5      	b.n	8005ab2 <ADC_ConfigureBoostMode+0x16>
        freq /= 4UL;
 8005ae6:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005ae8:	f7ff fbd0 	bl	800528c <HAL_GetREVID>
 8005aec:	f241 0303 	movw	r3, #4099	; 0x1003
 8005af0:	4298      	cmp	r0, r3
 8005af2:	682b      	ldr	r3, [r5, #0]
 8005af4:	d841      	bhi.n	8005b7a <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8005af6:	4a31      	ldr	r2, [pc, #196]	; (8005bbc <ADC_ConfigureBoostMode+0x120>)
 8005af8:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005afa:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 8005afc:	d939      	bls.n	8005b72 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b02:	e038      	b.n	8005b76 <ADC_ConfigureBoostMode+0xda>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005b04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005b08:	f003 fe18 	bl	800973c <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8005b0c:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005b0e:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8005b10:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005b14:	d00a      	beq.n	8005b2c <ADC_ConfigureBoostMode+0x90>
 8005b16:	d812      	bhi.n	8005b3e <ADC_ConfigureBoostMode+0xa2>
 8005b18:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b1c:	d006      	beq.n	8005b2c <ADC_ConfigureBoostMode+0x90>
 8005b1e:	d808      	bhi.n	8005b32 <ADC_ConfigureBoostMode+0x96>
 8005b20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b24:	d002      	beq.n	8005b2c <ADC_ConfigureBoostMode+0x90>
 8005b26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b2a:	d1dd      	bne.n	8005ae8 <ADC_ConfigureBoostMode+0x4c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005b2c:	0c9b      	lsrs	r3, r3, #18
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	e7d4      	b.n	8005adc <ADC_ConfigureBoostMode+0x40>
    switch (hadc->Init.ClockPrescaler)
 8005b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b36:	d0f9      	beq.n	8005b2c <ADC_ConfigureBoostMode+0x90>
 8005b38:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005b3c:	e7f5      	b.n	8005b2a <ADC_ConfigureBoostMode+0x8e>
 8005b3e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005b42:	d012      	beq.n	8005b6a <ADC_ConfigureBoostMode+0xce>
 8005b44:	d807      	bhi.n	8005b56 <ADC_ConfigureBoostMode+0xba>
 8005b46:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005b4a:	d00c      	beq.n	8005b66 <ADC_ConfigureBoostMode+0xca>
 8005b4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b50:	d1ca      	bne.n	8005ae8 <ADC_ConfigureBoostMode+0x4c>
        freq /= 32UL;
 8005b52:	0944      	lsrs	r4, r0, #5
        break;
 8005b54:	e7c8      	b.n	8005ae8 <ADC_ConfigureBoostMode+0x4c>
    switch (hadc->Init.ClockPrescaler)
 8005b56:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005b5a:	d008      	beq.n	8005b6e <ADC_ConfigureBoostMode+0xd2>
 8005b5c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005b60:	d1c2      	bne.n	8005ae8 <ADC_ConfigureBoostMode+0x4c>
        freq /= 256UL;
 8005b62:	0a04      	lsrs	r4, r0, #8
        break;
 8005b64:	e7c0      	b.n	8005ae8 <ADC_ConfigureBoostMode+0x4c>
        freq /= 16UL;
 8005b66:	0904      	lsrs	r4, r0, #4
        break;
 8005b68:	e7be      	b.n	8005ae8 <ADC_ConfigureBoostMode+0x4c>
        freq /= 64UL;
 8005b6a:	0984      	lsrs	r4, r0, #6
        break;
 8005b6c:	e7bc      	b.n	8005ae8 <ADC_ConfigureBoostMode+0x4c>
        freq /= 128UL;
 8005b6e:	09c4      	lsrs	r4, r0, #7
        break;
 8005b70:	e7ba      	b.n	8005ae8 <ADC_ConfigureBoostMode+0x4c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005b72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005b76:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005b78:	bd38      	pop	{r3, r4, r5, pc}
    freq /= 2U; /* divider by 2 for Rev.V */
 8005b7a:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8005b7c:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <ADC_ConfigureBoostMode+0x124>)
 8005b7e:	4294      	cmp	r4, r2
 8005b80:	d803      	bhi.n	8005b8a <ADC_ConfigureBoostMode+0xee>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b88:	e7f5      	b.n	8005b76 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8005b8a:	4a0e      	ldr	r2, [pc, #56]	; (8005bc4 <ADC_ConfigureBoostMode+0x128>)
 8005b8c:	4294      	cmp	r4, r2
 8005b8e:	d803      	bhi.n	8005b98 <ADC_ConfigureBoostMode+0xfc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b96:	e7b2      	b.n	8005afe <ADC_ConfigureBoostMode+0x62>
    else if (freq <= 25000000UL)
 8005b98:	4a0b      	ldr	r2, [pc, #44]	; (8005bc8 <ADC_ConfigureBoostMode+0x12c>)
 8005b9a:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	bf96      	itet	ls
 8005ba0:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005ba4:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005ba8:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
 8005bac:	e7e3      	b.n	8005b76 <ADC_ConfigureBoostMode+0xda>
 8005bae:	bf00      	nop
 8005bb0:	40022000 	.word	0x40022000
 8005bb4:	40022300 	.word	0x40022300
 8005bb8:	58026300 	.word	0x58026300
 8005bbc:	01312d00 	.word	0x01312d00
 8005bc0:	005f5e10 	.word	0x005f5e10
 8005bc4:	00bebc20 	.word	0x00bebc20
 8005bc8:	017d7840 	.word	0x017d7840

08005bcc <HAL_ADC_Init>:
  __IO uint32_t wait_loop_index = 0UL;
 8005bcc:	2300      	movs	r3, #0
{
 8005bce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (hadc == NULL)
 8005bd0:	4604      	mov	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8005bd2:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	f000 80c8 	beq.w	8005d6a <HAL_ADC_Init+0x19e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005bda:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8005bdc:	b925      	cbnz	r5, 8005be8 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 8005bde:	f7fd fccb 	bl	8003578 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005be2:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8005be4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005be8:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005bea:	6883      	ldr	r3, [r0, #8]
 8005bec:	009d      	lsls	r5, r3, #2
 8005bee:	d505      	bpl.n	8005bfc <HAL_ADC_Init+0x30>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005bf0:	6883      	ldr	r3, [r0, #8]
 8005bf2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005bf6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005bfa:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005bfc:	6883      	ldr	r3, [r0, #8]
 8005bfe:	00d9      	lsls	r1, r3, #3
 8005c00:	d504      	bpl.n	8005c0c <HAL_ADC_Init+0x40>
 8005c02:	6883      	ldr	r3, [r0, #8]
 8005c04:	00da      	lsls	r2, r3, #3
 8005c06:	d515      	bpl.n	8005c34 <HAL_ADC_Init+0x68>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c08:	2500      	movs	r5, #0
 8005c0a:	e01c      	b.n	8005c46 <HAL_ADC_Init+0x7a>
  MODIFY_REG(ADCx->CR,
 8005c0c:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005c0e:	4a6d      	ldr	r2, [pc, #436]	; (8005dc4 <HAL_ADC_Init+0x1f8>)
 8005c10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	6083      	str	r3, [r0, #8]
 8005c1e:	4b6a      	ldr	r3, [pc, #424]	; (8005dc8 <HAL_ADC_Init+0x1fc>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8005c26:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005c28:	9b01      	ldr	r3, [sp, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0e9      	beq.n	8005c02 <HAL_ADC_Init+0x36>
      wait_loop_index--;
 8005c2e:	9b01      	ldr	r3, [sp, #4]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	e7f8      	b.n	8005c26 <HAL_ADC_Init+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c34:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8005c36:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c38:	f043 0310 	orr.w	r3, r3, #16
 8005c3c:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	65a3      	str	r3, [r4, #88]	; 0x58
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c46:	f7ff fb3c 	bl	80052c2 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c4c:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8005c50:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c52:	f040 8087 	bne.w	8005d64 <HAL_ADC_Init+0x198>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c56:	2800      	cmp	r0, #0
 8005c58:	f040 8084 	bne.w	8005d64 <HAL_ADC_Init+0x198>
    ADC_STATE_CLR_SET(hadc->State,
 8005c5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c60:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8005c62:	f043 0302 	orr.w	r3, r3, #2
 8005c66:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c68:	f7ff fb27 	bl	80052ba <LL_ADC_IsEnabled>
 8005c6c:	bb30      	cbnz	r0, 8005cbc <HAL_ADC_Init+0xf0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	4a56      	ldr	r2, [pc, #344]	; (8005dcc <HAL_ADC_Init+0x200>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d003      	beq.n	8005c7e <HAL_ADC_Init+0xb2>
 8005c76:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d15f      	bne.n	8005d3e <HAL_ADC_Init+0x172>
 8005c7e:	4853      	ldr	r0, [pc, #332]	; (8005dcc <HAL_ADC_Init+0x200>)
 8005c80:	f7ff fb1b 	bl	80052ba <LL_ADC_IsEnabled>
 8005c84:	4603      	mov	r3, r0
 8005c86:	4852      	ldr	r0, [pc, #328]	; (8005dd0 <HAL_ADC_Init+0x204>)
 8005c88:	f7ff fb17 	bl	80052ba <LL_ADC_IsEnabled>
 8005c8c:	4303      	orrs	r3, r0
 8005c8e:	bf0c      	ite	eq
 8005c90:	2001      	moveq	r0, #1
 8005c92:	2000      	movne	r0, #0
 8005c94:	b190      	cbz	r0, 8005cbc <HAL_ADC_Init+0xf0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	4b4c      	ldr	r3, [pc, #304]	; (8005dcc <HAL_ADC_Init+0x200>)
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d056      	beq.n	8005d4c <HAL_ADC_Init+0x180>
 8005c9e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8005ca2:	484b      	ldr	r0, [pc, #300]	; (8005dd0 <HAL_ADC_Init+0x204>)
 8005ca4:	494b      	ldr	r1, [pc, #300]	; (8005dd4 <HAL_ADC_Init+0x208>)
 8005ca6:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 8005caa:	4282      	cmp	r2, r0
 8005cac:	bf08      	it	eq
 8005cae:	460b      	moveq	r3, r1
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	6861      	ldr	r1, [r4, #4]
 8005cb4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005cbc:	f7ff fae6 	bl	800528c <HAL_GetREVID>
 8005cc0:	f241 0303 	movw	r3, #4099	; 0x1003
 8005cc4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005cc6:	4298      	cmp	r0, r3
 8005cc8:	7f21      	ldrb	r1, [r4, #28]
 8005cca:	7d60      	ldrb	r0, [r4, #21]
 8005ccc:	68a3      	ldr	r3, [r4, #8]
 8005cce:	d93f      	bls.n	8005d50 <HAL_ADC_Init+0x184>
 8005cd0:	2b10      	cmp	r3, #16
 8005cd2:	d13d      	bne.n	8005d50 <HAL_ADC_Init+0x184>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005cd4:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005cd8:	2901      	cmp	r1, #1
                  hadc->Init.Overrun                                                    |
 8005cda:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005cde:	bf08      	it	eq
 8005ce0:	6a22      	ldreq	r2, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ce2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005ce6:	bf04      	itt	eq
 8005ce8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8005cec:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cf0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005cf2:	b122      	cbz	r2, 8005cfe <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005cf4:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005cf8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005cfa:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005cfc:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005cfe:	6820      	ldr	r0, [r4, #0]
 8005d00:	4a35      	ldr	r2, [pc, #212]	; (8005dd8 <HAL_ADC_Init+0x20c>)
 8005d02:	68c1      	ldr	r1, [r0, #12]
 8005d04:	400a      	ands	r2, r1
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60c3      	str	r3, [r0, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d0a:	f7ff fada 	bl	80052c2 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d0e:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005d10:	6893      	ldr	r3, [r2, #8]
 8005d12:	071b      	lsls	r3, r3, #28
 8005d14:	d52b      	bpl.n	8005d6e <HAL_ADC_Init+0x1a2>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005d16:	68e3      	ldr	r3, [r4, #12]
 8005d18:	6822      	ldr	r2, [r4, #0]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d11e      	bne.n	8005d5c <HAL_ADC_Init+0x190>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005d1e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005d20:	69a3      	ldr	r3, [r4, #24]
 8005d22:	f021 010f 	bic.w	r1, r1, #15
 8005d26:	3b01      	subs	r3, #1
 8005d28:	430b      	orrs	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d2a:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005d38:	4628      	mov	r0, r5
 8005d3a:	b003      	add	sp, #12
 8005d3c:	bd30      	pop	{r4, r5, pc}
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d3e:	4827      	ldr	r0, [pc, #156]	; (8005ddc <HAL_ADC_Init+0x210>)
 8005d40:	f7ff fabb 	bl	80052ba <LL_ADC_IsEnabled>
 8005d44:	fab0 f080 	clz	r0, r0
 8005d48:	0940      	lsrs	r0, r0, #5
 8005d4a:	e7a3      	b.n	8005c94 <HAL_ADC_Init+0xc8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005d4c:	4b21      	ldr	r3, [pc, #132]	; (8005dd4 <HAL_ADC_Init+0x208>)
 8005d4e:	e7af      	b.n	8005cb0 <HAL_ADC_Init+0xe4>
                  hadc->Init.Overrun                                                    |
 8005d50:	4313      	orrs	r3, r2
 8005d52:	e7c1      	b.n	8005cd8 <HAL_ADC_Init+0x10c>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005d54:	6913      	ldr	r3, [r2, #16]
 8005d56:	f023 0301 	bic.w	r3, r3, #1
 8005d5a:	e028      	b.n	8005dae <HAL_ADC_Init+0x1e2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d5e:	f023 030f 	bic.w	r3, r3, #15
 8005d62:	e7e2      	b.n	8005d2a <HAL_ADC_Init+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d64:	f043 0310 	orr.w	r3, r3, #16
 8005d68:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8005d6a:	2501      	movs	r5, #1
 8005d6c:	e7e4      	b.n	8005d38 <HAL_ADC_Init+0x16c>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d1d1      	bne.n	8005d16 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005d72:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d74:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d7a:	f023 0303 	bic.w	r3, r3, #3
 8005d7e:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8005d82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005d84:	430b      	orrs	r3, r1
 8005d86:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8005d88:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d1e1      	bne.n	8005d54 <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005d90:	6910      	ldr	r0, [r2, #16]
 8005d92:	e9d4 3110 	ldrd	r3, r1, [r4, #64]	; 0x40
 8005d96:	430b      	orrs	r3, r1
 8005d98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	490f      	ldr	r1, [pc, #60]	; (8005de0 <HAL_ADC_Init+0x214>)
 8005da2:	4001      	ands	r1, r0
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005da8:	3901      	subs	r1, #1
 8005daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005dae:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8005db0:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005db2:	6913      	ldr	r3, [r2, #16]
 8005db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005db6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8005dbe:	f7ff fe6d 	bl	8005a9c <ADC_ConfigureBoostMode>
 8005dc2:	e7a8      	b.n	8005d16 <HAL_ADC_Init+0x14a>
 8005dc4:	00030d40 	.word	0x00030d40
 8005dc8:	24000000 	.word	0x24000000
 8005dcc:	40022000 	.word	0x40022000
 8005dd0:	40022100 	.word	0x40022100
 8005dd4:	40022300 	.word	0x40022300
 8005dd8:	fff0c003 	.word	0xfff0c003
 8005ddc:	58026000 	.word	0x58026000
 8005de0:	fc00f81e 	.word	0xfc00f81e

08005de4 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005de4:	6880      	ldr	r0, [r0, #8]
}
 8005de6:	f000 0001 	and.w	r0, r0, #1
 8005dea:	4770      	bx	lr

08005dec <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005dec:	6880      	ldr	r0, [r0, #8]
}
 8005dee:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8005df2:	4770      	bx	lr

08005df4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005df4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8005df8:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8005dfa:	2a01      	cmp	r2, #1
{
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 8005e00:	f000 808b 	beq.w	8005f1a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8005e04:	2201      	movs	r2, #1
 8005e06:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005e0a:	4a45      	ldr	r2, [pc, #276]	; (8005f20 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005e0c:	6800      	ldr	r0, [r0, #0]
 8005e0e:	4290      	cmp	r0, r2
 8005e10:	bf0c      	ite	eq
 8005e12:	f502 7280 	addeq.w	r2, r2, #256	; 0x100
 8005e16:	2200      	movne	r2, #0
 8005e18:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8005e1a:	9801      	ldr	r0, [sp, #4]
 8005e1c:	b940      	cbnz	r0, 8005e30 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e20:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005e24:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e26:	f042 0220 	orr.w	r2, r2, #32
 8005e2a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005e2c:	b01a      	add	sp, #104	; 0x68
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005e30:	f7ff ffdc 	bl	8005dec <LL_ADC_REG_IsConversionOngoing>
 8005e34:	4602      	mov	r2, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	f7ff ffd8 	bl	8005dec <LL_ADC_REG_IsConversionOngoing>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d166      	bne.n	8005f0e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005e40:	2a00      	cmp	r2, #0
 8005e42:	d164      	bne.n	8005f0e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	4a36      	ldr	r2, [pc, #216]	; (8005f20 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005e48:	4290      	cmp	r0, r2
 8005e4a:	d029      	beq.n	8005ea0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005e4c:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8005e50:	4d34      	ldr	r5, [pc, #208]	; (8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8005e52:	4c35      	ldr	r4, [pc, #212]	; (8005f28 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005e54:	f502 4286 	add.w	r2, r2, #17152	; 0x4300
 8005e58:	42a8      	cmp	r0, r5
 8005e5a:	bf08      	it	eq
 8005e5c:	4622      	moveq	r2, r4
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e5e:	680c      	ldr	r4, [r1, #0]
 8005e60:	4d2f      	ldr	r5, [pc, #188]	; (8005f20 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005e62:	2c00      	cmp	r4, #0
 8005e64:	d030      	beq.n	8005ec8 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005e66:	6894      	ldr	r4, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e68:	42a8      	cmp	r0, r5
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005e6a:	684e      	ldr	r6, [r1, #4]
 8005e6c:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
 8005e70:	ea44 0406 	orr.w	r4, r4, r6
 8005e74:	6094      	str	r4, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e76:	d002      	beq.n	8005e7e <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8005e78:	4c2a      	ldr	r4, [pc, #168]	; (8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8005e7a:	42a0      	cmp	r0, r4
 8005e7c:	d112      	bne.n	8005ea4 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 8005e7e:	4828      	ldr	r0, [pc, #160]	; (8005f20 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005e80:	f7ff ffb0 	bl	8005de4 <LL_ADC_IsEnabled>
 8005e84:	4604      	mov	r4, r0
 8005e86:	4827      	ldr	r0, [pc, #156]	; (8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8005e88:	f7ff ffac 	bl	8005de4 <LL_ADC_IsEnabled>
 8005e8c:	4320      	orrs	r0, r4
 8005e8e:	bf0c      	ite	eq
 8005e90:	2001      	moveq	r0, #1
 8005e92:	2000      	movne	r0, #0
 8005e94:	b968      	cbnz	r0, 8005eb2 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e96:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return tmp_hal_status;
 8005e9e:	e7c5      	b.n	8005e2c <HAL_ADCEx_MultiModeConfigChannel+0x38>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005ea0:	4a21      	ldr	r2, [pc, #132]	; (8005f28 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005ea2:	e7dc      	b.n	8005e5e <HAL_ADCEx_MultiModeConfigChannel+0x6a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ea4:	4821      	ldr	r0, [pc, #132]	; (8005f2c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005ea6:	f7ff ff9d 	bl	8005de4 <LL_ADC_IsEnabled>
 8005eaa:	fab0 f080 	clz	r0, r0
 8005eae:	0940      	lsrs	r0, r0, #5
 8005eb0:	e7f0      	b.n	8005e94 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
        MODIFY_REG(tmpADC_Common->CCR,
 8005eb2:	6808      	ldr	r0, [r1, #0]
 8005eb4:	6894      	ldr	r4, [r2, #8]
 8005eb6:	6889      	ldr	r1, [r1, #8]
 8005eb8:	4301      	orrs	r1, r0
 8005eba:	f424 6071 	bic.w	r0, r4, #3856	; 0xf10
 8005ebe:	f020 000f 	bic.w	r0, r0, #15
 8005ec2:	4301      	orrs	r1, r0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005ec4:	6091      	str	r1, [r2, #8]
 8005ec6:	e7e6      	b.n	8005e96 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005ec8:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005eca:	42a8      	cmp	r0, r5
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005ecc:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8005ed0:	6091      	str	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ed2:	d002      	beq.n	8005eda <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 8005ed4:	4913      	ldr	r1, [pc, #76]	; (8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8005ed6:	4288      	cmp	r0, r1
 8005ed8:	d112      	bne.n	8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
 8005eda:	4811      	ldr	r0, [pc, #68]	; (8005f20 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005edc:	f7ff ff82 	bl	8005de4 <LL_ADC_IsEnabled>
 8005ee0:	4601      	mov	r1, r0
 8005ee2:	4810      	ldr	r0, [pc, #64]	; (8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8005ee4:	f7ff ff7e 	bl	8005de4 <LL_ADC_IsEnabled>
 8005ee8:	4301      	orrs	r1, r0
 8005eea:	bf0c      	ite	eq
 8005eec:	2001      	moveq	r0, #1
 8005eee:	2000      	movne	r0, #0
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d0d0      	beq.n	8005e96 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005ef4:	6891      	ldr	r1, [r2, #8]
 8005ef6:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8005efa:	f021 010f 	bic.w	r1, r1, #15
 8005efe:	e7e1      	b.n	8005ec4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f00:	480a      	ldr	r0, [pc, #40]	; (8005f2c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005f02:	f7ff ff6f 	bl	8005de4 <LL_ADC_IsEnabled>
 8005f06:	fab0 f080 	clz	r0, r0
 8005f0a:	0940      	lsrs	r0, r0, #5
 8005f0c:	e7f0      	b.n	8005ef0 <HAL_ADCEx_MultiModeConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8005f10:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f12:	f042 0220 	orr.w	r2, r2, #32
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
 8005f18:	e7be      	b.n	8005e98 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
  __HAL_LOCK(hadc);
 8005f1a:	2002      	movs	r0, #2
 8005f1c:	e786      	b.n	8005e2c <HAL_ADCEx_MultiModeConfigChannel+0x38>
 8005f1e:	bf00      	nop
 8005f20:	40022000 	.word	0x40022000
 8005f24:	40022100 	.word	0x40022100
 8005f28:	40022300 	.word	0x40022300
 8005f2c:	58026000 	.word	0x58026000

08005f30 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f30:	4a07      	ldr	r2, [pc, #28]	; (8005f50 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f32:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f34:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005f3e:	041b      	lsls	r3, r3, #16
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8005f4a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005f4c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005f4e:	4770      	bx	lr
 8005f50:	e000ed00 	.word	0xe000ed00

08005f54 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f54:	4b16      	ldr	r3, [pc, #88]	; (8005fb0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f56:	b570      	push	{r4, r5, r6, lr}
 8005f58:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f5a:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f5e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f62:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f66:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f68:	2d04      	cmp	r5, #4
 8005f6a:	bf28      	it	cs
 8005f6c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f6e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f70:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f74:	bf8c      	ite	hi
 8005f76:	3c03      	subhi	r4, #3
 8005f78:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8005f7a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f7c:	ea21 0303 	bic.w	r3, r1, r3
 8005f80:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f84:	fa06 f404 	lsl.w	r4, r6, r4
 8005f88:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f8c:	ea43 0304 	orr.w	r3, r3, r4
 8005f90:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005f94:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8005f96:	db06      	blt.n	8005fa6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f98:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005f9c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005fa0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005fa4:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fa6:	f000 000f 	and.w	r0, r0, #15
 8005faa:	4a02      	ldr	r2, [pc, #8]	; (8005fb4 <HAL_NVIC_SetPriority+0x60>)
 8005fac:	5413      	strb	r3, [r2, r0]
 8005fae:	e7f9      	b.n	8005fa4 <HAL_NVIC_SetPriority+0x50>
 8005fb0:	e000ed00 	.word	0xe000ed00
 8005fb4:	e000ed14 	.word	0xe000ed14

08005fb8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	db08      	blt.n	8005fce <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fbc:	0942      	lsrs	r2, r0, #5
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f000 001f 	and.w	r0, r0, #31
 8005fc4:	fa03 f000 	lsl.w	r0, r3, r0
 8005fc8:	4b01      	ldr	r3, [pc, #4]	; (8005fd0 <HAL_NVIC_EnableIRQ+0x18>)
 8005fca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005fce:	4770      	bx	lr
 8005fd0:	e000e100 	.word	0xe000e100

08005fd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fd6:	4d5c      	ldr	r5, [pc, #368]	; (8006148 <DMA_SetConfig+0x174>)
 8005fd8:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fda:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8005fdc:	46ac      	mov	ip, r5
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fde:	42ac      	cmp	r4, r5
 8005fe0:	d045      	beq.n	800606e <DMA_SetConfig+0x9a>
 8005fe2:	4e5a      	ldr	r6, [pc, #360]	; (800614c <DMA_SetConfig+0x178>)
 8005fe4:	42b4      	cmp	r4, r6
 8005fe6:	d042      	beq.n	800606e <DMA_SetConfig+0x9a>
 8005fe8:	3618      	adds	r6, #24
 8005fea:	42b4      	cmp	r4, r6
 8005fec:	d03f      	beq.n	800606e <DMA_SetConfig+0x9a>
 8005fee:	3618      	adds	r6, #24
 8005ff0:	42b4      	cmp	r4, r6
 8005ff2:	d03c      	beq.n	800606e <DMA_SetConfig+0x9a>
 8005ff4:	3618      	adds	r6, #24
 8005ff6:	42b4      	cmp	r4, r6
 8005ff8:	d039      	beq.n	800606e <DMA_SetConfig+0x9a>
 8005ffa:	3618      	adds	r6, #24
 8005ffc:	42b4      	cmp	r4, r6
 8005ffe:	d036      	beq.n	800606e <DMA_SetConfig+0x9a>
 8006000:	3618      	adds	r6, #24
 8006002:	42b4      	cmp	r4, r6
 8006004:	d033      	beq.n	800606e <DMA_SetConfig+0x9a>
 8006006:	3618      	adds	r6, #24
 8006008:	42b4      	cmp	r4, r6
 800600a:	d030      	beq.n	800606e <DMA_SetConfig+0x9a>
 800600c:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8006010:	42b4      	cmp	r4, r6
 8006012:	d02c      	beq.n	800606e <DMA_SetConfig+0x9a>
 8006014:	3618      	adds	r6, #24
 8006016:	42b4      	cmp	r4, r6
 8006018:	d029      	beq.n	800606e <DMA_SetConfig+0x9a>
 800601a:	3618      	adds	r6, #24
 800601c:	42b4      	cmp	r4, r6
 800601e:	d026      	beq.n	800606e <DMA_SetConfig+0x9a>
 8006020:	3618      	adds	r6, #24
 8006022:	42b4      	cmp	r4, r6
 8006024:	d023      	beq.n	800606e <DMA_SetConfig+0x9a>
 8006026:	3618      	adds	r6, #24
 8006028:	42b4      	cmp	r4, r6
 800602a:	d020      	beq.n	800606e <DMA_SetConfig+0x9a>
 800602c:	3618      	adds	r6, #24
 800602e:	42b4      	cmp	r4, r6
 8006030:	d01d      	beq.n	800606e <DMA_SetConfig+0x9a>
 8006032:	3618      	adds	r6, #24
 8006034:	42b4      	cmp	r4, r6
 8006036:	d01a      	beq.n	800606e <DMA_SetConfig+0x9a>
 8006038:	3618      	adds	r6, #24
 800603a:	42b4      	cmp	r4, r6
 800603c:	d017      	beq.n	800606e <DMA_SetConfig+0x9a>
 800603e:	4e44      	ldr	r6, [pc, #272]	; (8006150 <DMA_SetConfig+0x17c>)
 8006040:	42b4      	cmp	r4, r6
 8006042:	d014      	beq.n	800606e <DMA_SetConfig+0x9a>
 8006044:	3614      	adds	r6, #20
 8006046:	42b4      	cmp	r4, r6
 8006048:	d011      	beq.n	800606e <DMA_SetConfig+0x9a>
 800604a:	3614      	adds	r6, #20
 800604c:	42b4      	cmp	r4, r6
 800604e:	d00e      	beq.n	800606e <DMA_SetConfig+0x9a>
 8006050:	3614      	adds	r6, #20
 8006052:	42b4      	cmp	r4, r6
 8006054:	d00b      	beq.n	800606e <DMA_SetConfig+0x9a>
 8006056:	3614      	adds	r6, #20
 8006058:	42b4      	cmp	r4, r6
 800605a:	d008      	beq.n	800606e <DMA_SetConfig+0x9a>
 800605c:	3614      	adds	r6, #20
 800605e:	42b4      	cmp	r4, r6
 8006060:	d005      	beq.n	800606e <DMA_SetConfig+0x9a>
 8006062:	3614      	adds	r6, #20
 8006064:	42b4      	cmp	r4, r6
 8006066:	d002      	beq.n	800606e <DMA_SetConfig+0x9a>
 8006068:	3614      	adds	r6, #20
 800606a:	42b4      	cmp	r4, r6
 800606c:	d167      	bne.n	800613e <DMA_SetConfig+0x16a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800606e:	e9d0 6519 	ldrd	r6, r5, [r0, #100]	; 0x64
 8006072:	6075      	str	r5, [r6, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006074:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 8006076:	b116      	cbz	r6, 800607e <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006078:	e9d0 651c 	ldrd	r6, r5, [r0, #112]	; 0x70
 800607c:	6075      	str	r5, [r6, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800607e:	4564      	cmp	r4, ip
 8006080:	d037      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 8006082:	4d32      	ldr	r5, [pc, #200]	; (800614c <DMA_SetConfig+0x178>)
 8006084:	42ac      	cmp	r4, r5
 8006086:	d034      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 8006088:	3518      	adds	r5, #24
 800608a:	42ac      	cmp	r4, r5
 800608c:	d031      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 800608e:	3518      	adds	r5, #24
 8006090:	42ac      	cmp	r4, r5
 8006092:	d02e      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 8006094:	3518      	adds	r5, #24
 8006096:	42ac      	cmp	r4, r5
 8006098:	d02b      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 800609a:	3518      	adds	r5, #24
 800609c:	42ac      	cmp	r4, r5
 800609e:	d028      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 80060a0:	3518      	adds	r5, #24
 80060a2:	42ac      	cmp	r4, r5
 80060a4:	d025      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 80060a6:	3518      	adds	r5, #24
 80060a8:	42ac      	cmp	r4, r5
 80060aa:	d022      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 80060ac:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80060b0:	42ac      	cmp	r4, r5
 80060b2:	d01e      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 80060b4:	3518      	adds	r5, #24
 80060b6:	42ac      	cmp	r4, r5
 80060b8:	d01b      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 80060ba:	3518      	adds	r5, #24
 80060bc:	42ac      	cmp	r4, r5
 80060be:	d018      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 80060c0:	3518      	adds	r5, #24
 80060c2:	42ac      	cmp	r4, r5
 80060c4:	d015      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 80060c6:	3518      	adds	r5, #24
 80060c8:	42ac      	cmp	r4, r5
 80060ca:	d012      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 80060cc:	3518      	adds	r5, #24
 80060ce:	42ac      	cmp	r4, r5
 80060d0:	d00f      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 80060d2:	3518      	adds	r5, #24
 80060d4:	42ac      	cmp	r4, r5
 80060d6:	d00c      	beq.n	80060f2 <DMA_SetConfig+0x11e>
 80060d8:	3518      	adds	r5, #24
 80060da:	42ac      	cmp	r4, r5
 80060dc:	d009      	beq.n	80060f2 <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060de:	4d1c      	ldr	r5, [pc, #112]	; (8006150 <DMA_SetConfig+0x17c>)
 80060e0:	42ac      	cmp	r4, r5
 80060e2:	d117      	bne.n	8006114 <DMA_SetConfig+0x140>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80060e4:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80060e6:	f005 061f 	and.w	r6, r5, #31
 80060ea:	2501      	movs	r5, #1
 80060ec:	40b5      	lsls	r5, r6
 80060ee:	607d      	str	r5, [r7, #4]
 80060f0:	e009      	b.n	8006106 <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060f2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80060f4:	f005 061f 	and.w	r6, r5, #31
 80060f8:	253f      	movs	r5, #63	; 0x3f
 80060fa:	40b5      	lsls	r5, r6
 80060fc:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060fe:	6825      	ldr	r5, [r4, #0]
 8006100:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8006104:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006106:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006108:	6883      	ldr	r3, [r0, #8]
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	d118      	bne.n	8006140 <DMA_SetConfig+0x16c>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800610e:	60a2      	str	r2, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006110:	60e1      	str	r1, [r4, #12]
 8006112:	e014      	b.n	800613e <DMA_SetConfig+0x16a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006114:	4d0f      	ldr	r5, [pc, #60]	; (8006154 <DMA_SetConfig+0x180>)
 8006116:	42ac      	cmp	r4, r5
 8006118:	d0e4      	beq.n	80060e4 <DMA_SetConfig+0x110>
 800611a:	3514      	adds	r5, #20
 800611c:	42ac      	cmp	r4, r5
 800611e:	d0e1      	beq.n	80060e4 <DMA_SetConfig+0x110>
 8006120:	3514      	adds	r5, #20
 8006122:	42ac      	cmp	r4, r5
 8006124:	d0de      	beq.n	80060e4 <DMA_SetConfig+0x110>
 8006126:	3514      	adds	r5, #20
 8006128:	42ac      	cmp	r4, r5
 800612a:	d0db      	beq.n	80060e4 <DMA_SetConfig+0x110>
 800612c:	3514      	adds	r5, #20
 800612e:	42ac      	cmp	r4, r5
 8006130:	d0d8      	beq.n	80060e4 <DMA_SetConfig+0x110>
 8006132:	3514      	adds	r5, #20
 8006134:	42ac      	cmp	r4, r5
 8006136:	d0d5      	beq.n	80060e4 <DMA_SetConfig+0x110>
 8006138:	3514      	adds	r5, #20
 800613a:	42ac      	cmp	r4, r5
 800613c:	d0d2      	beq.n	80060e4 <DMA_SetConfig+0x110>
  }
  else
  {
    /* Nothing To Do */
  }
}
 800613e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006140:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006142:	60e2      	str	r2, [r4, #12]
}
 8006144:	e7fb      	b.n	800613e <DMA_SetConfig+0x16a>
 8006146:	bf00      	nop
 8006148:	40020010 	.word	0x40020010
 800614c:	40020028 	.word	0x40020028
 8006150:	58025408 	.word	0x58025408
 8006154:	5802541c 	.word	0x5802541c

08006158 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006158:	6803      	ldr	r3, [r0, #0]
 800615a:	4a24      	ldr	r2, [pc, #144]	; (80061ec <DMA_CalcBaseAndBitshift+0x94>)
 800615c:	4293      	cmp	r3, r2
{
 800615e:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006160:	d032      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 8006162:	3218      	adds	r2, #24
 8006164:	4293      	cmp	r3, r2
 8006166:	d02f      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 8006168:	3218      	adds	r2, #24
 800616a:	4293      	cmp	r3, r2
 800616c:	d02c      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 800616e:	3218      	adds	r2, #24
 8006170:	4293      	cmp	r3, r2
 8006172:	d029      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 8006174:	3218      	adds	r2, #24
 8006176:	4293      	cmp	r3, r2
 8006178:	d026      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 800617a:	3218      	adds	r2, #24
 800617c:	4293      	cmp	r3, r2
 800617e:	d023      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 8006180:	3218      	adds	r2, #24
 8006182:	4293      	cmp	r3, r2
 8006184:	d020      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 8006186:	3218      	adds	r2, #24
 8006188:	4293      	cmp	r3, r2
 800618a:	d01d      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 800618c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006190:	4293      	cmp	r3, r2
 8006192:	d019      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 8006194:	3218      	adds	r2, #24
 8006196:	4293      	cmp	r3, r2
 8006198:	d016      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 800619a:	3218      	adds	r2, #24
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 80061a0:	3218      	adds	r2, #24
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d010      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 80061a6:	3218      	adds	r2, #24
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00d      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 80061ac:	3218      	adds	r2, #24
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00a      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 80061b2:	3218      	adds	r2, #24
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d007      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
 80061b8:	3218      	adds	r2, #24
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80061be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80061c2:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 80061c4:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80061c6:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	2118      	movs	r1, #24
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80061cc:	4c08      	ldr	r4, [pc, #32]	; (80061f0 <DMA_CalcBaseAndBitshift+0x98>)
 80061ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80061d2:	3a10      	subs	r2, #16
 80061d4:	f023 0303 	bic.w	r3, r3, #3
 80061d8:	fbb2 f2f1 	udiv	r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80061dc:	f002 0107 	and.w	r1, r2, #7
    if (stream_number > 3U)
 80061e0:	2a03      	cmp	r2, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80061e2:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80061e4:	bf88      	it	hi
 80061e6:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80061e8:	65c1      	str	r1, [r0, #92]	; 0x5c
 80061ea:	e7ea      	b.n	80061c2 <DMA_CalcBaseAndBitshift+0x6a>
 80061ec:	40020010 	.word	0x40020010
 80061f0:	08014b15 	.word	0x08014b15

080061f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80061f4:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061f6:	491f      	ldr	r1, [pc, #124]	; (8006274 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80061f8:	b2d3      	uxtb	r3, r2
 80061fa:	428a      	cmp	r2, r1
 80061fc:	d024      	beq.n	8006248 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 80061fe:	3114      	adds	r1, #20
 8006200:	428a      	cmp	r2, r1
 8006202:	d021      	beq.n	8006248 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006204:	3114      	adds	r1, #20
 8006206:	428a      	cmp	r2, r1
 8006208:	d01e      	beq.n	8006248 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 800620a:	3114      	adds	r1, #20
 800620c:	428a      	cmp	r2, r1
 800620e:	d01b      	beq.n	8006248 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006210:	3114      	adds	r1, #20
 8006212:	428a      	cmp	r2, r1
 8006214:	d018      	beq.n	8006248 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006216:	3114      	adds	r1, #20
 8006218:	428a      	cmp	r2, r1
 800621a:	d015      	beq.n	8006248 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 800621c:	3114      	adds	r1, #20
 800621e:	428a      	cmp	r2, r1
 8006220:	d012      	beq.n	8006248 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
 8006222:	3114      	adds	r1, #20
 8006224:	428a      	cmp	r2, r1
 8006226:	d00f      	beq.n	8006248 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006228:	2118      	movs	r1, #24
 800622a:	3b10      	subs	r3, #16
 800622c:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006230:	4911      	ldr	r1, [pc, #68]	; (8006278 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006232:	4411      	add	r1, r2
 8006234:	29a8      	cmp	r1, #168	; 0xa8
 8006236:	d91a      	bls.n	800626e <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006238:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 800623c:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
 8006240:	0092      	lsls	r2, r2, #2
 8006242:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006244:	4a0d      	ldr	r2, [pc, #52]	; (800627c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8006246:	e00a      	b.n	800625e <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006248:	2214      	movs	r2, #20
 800624a:	3b08      	subs	r3, #8
 800624c:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006250:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 8006254:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
 8006258:	0092      	lsls	r2, r2, #2
 800625a:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800625c:	4a08      	ldr	r2, [pc, #32]	; (8006280 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800625e:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	2201      	movs	r2, #1
 8006266:	fa02 f303 	lsl.w	r3, r2, r3
 800626a:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 800626c:	4770      	bx	lr
      stream_number += 8U;
 800626e:	3308      	adds	r3, #8
 8006270:	e7e2      	b.n	8006238 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8006272:	bf00      	nop
 8006274:	58025408 	.word	0x58025408
 8006278:	bffdfbf0 	.word	0xbffdfbf0
 800627c:	40020880 	.word	0x40020880
 8006280:	58025880 	.word	0x58025880

08006284 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006284:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006286:	1e51      	subs	r1, r2, #1
 8006288:	2907      	cmp	r1, #7
{
 800628a:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800628c:	d821      	bhi.n	80062d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800628e:	6803      	ldr	r3, [r0, #0]
 8006290:	4c13      	ldr	r4, [pc, #76]	; (80062e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8006292:	42a3      	cmp	r3, r4
 8006294:	d01e      	beq.n	80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8006296:	3414      	adds	r4, #20
 8006298:	42a3      	cmp	r3, r4
 800629a:	d01b      	beq.n	80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 800629c:	3414      	adds	r4, #20
 800629e:	42a3      	cmp	r3, r4
 80062a0:	d018      	beq.n	80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80062a2:	3414      	adds	r4, #20
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d015      	beq.n	80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80062a8:	3414      	adds	r4, #20
 80062aa:	42a3      	cmp	r3, r4
 80062ac:	d012      	beq.n	80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80062ae:	3414      	adds	r4, #20
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	d00f      	beq.n	80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80062b4:	3414      	adds	r4, #20
 80062b6:	42a3      	cmp	r3, r4
 80062b8:	d00c      	beq.n	80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 80062ba:	3414      	adds	r4, #20
 80062bc:	42a3      	cmp	r3, r4
 80062be:	d009      	beq.n	80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062c0:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062c8:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80062ca:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80062cc:	2301      	movs	r3, #1
 80062ce:	408b      	lsls	r3, r1
 80062d0:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 80062d2:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80062dc:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80062de:	e7f4      	b.n	80062ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x46>
 80062e0:	58025408 	.word	0x58025408
 80062e4:	1000823f 	.word	0x1000823f
 80062e8:	40020940 	.word	0x40020940
 80062ec:	1600963f 	.word	0x1600963f
 80062f0:	58025940 	.word	0x58025940

080062f4 <HAL_DMA_Init>:
{
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80062f8:	f7fe ffb0 	bl	800525c <HAL_GetTick>
 80062fc:	4606      	mov	r6, r0
  if(hdma == NULL)
 80062fe:	2c00      	cmp	r4, #0
 8006300:	f000 8165 	beq.w	80065ce <HAL_DMA_Init+0x2da>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	4db3      	ldr	r5, [pc, #716]	; (80065d4 <HAL_DMA_Init+0x2e0>)
 8006308:	42ab      	cmp	r3, r5
 800630a:	d06a      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 800630c:	4ab2      	ldr	r2, [pc, #712]	; (80065d8 <HAL_DMA_Init+0x2e4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d067      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 8006312:	3218      	adds	r2, #24
 8006314:	4293      	cmp	r3, r2
 8006316:	d064      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 8006318:	3218      	adds	r2, #24
 800631a:	4293      	cmp	r3, r2
 800631c:	d061      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 800631e:	3218      	adds	r2, #24
 8006320:	4293      	cmp	r3, r2
 8006322:	d05e      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 8006324:	3218      	adds	r2, #24
 8006326:	4293      	cmp	r3, r2
 8006328:	d05b      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 800632a:	3218      	adds	r2, #24
 800632c:	4293      	cmp	r3, r2
 800632e:	d058      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 8006330:	3218      	adds	r2, #24
 8006332:	4293      	cmp	r3, r2
 8006334:	d055      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 8006336:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800633a:	4293      	cmp	r3, r2
 800633c:	d051      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 800633e:	3218      	adds	r2, #24
 8006340:	4293      	cmp	r3, r2
 8006342:	d04e      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 8006344:	3218      	adds	r2, #24
 8006346:	4293      	cmp	r3, r2
 8006348:	d04b      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 800634a:	3218      	adds	r2, #24
 800634c:	4293      	cmp	r3, r2
 800634e:	d048      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 8006350:	3218      	adds	r2, #24
 8006352:	4293      	cmp	r3, r2
 8006354:	d045      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 8006356:	3218      	adds	r2, #24
 8006358:	4293      	cmp	r3, r2
 800635a:	d042      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 800635c:	3218      	adds	r2, #24
 800635e:	4293      	cmp	r3, r2
 8006360:	d03f      	beq.n	80063e2 <HAL_DMA_Init+0xee>
 8006362:	3218      	adds	r2, #24
 8006364:	4293      	cmp	r3, r2
 8006366:	d03c      	beq.n	80063e2 <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006368:	4a9c      	ldr	r2, [pc, #624]	; (80065dc <HAL_DMA_Init+0x2e8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	f040 8160 	bne.w	8006630 <HAL_DMA_Init+0x33c>
    __HAL_UNLOCK(hdma);
 8006370:	2200      	movs	r2, #0
 8006372:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8006376:	2202      	movs	r2, #2
 8006378:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800637c:	68a2      	ldr	r2, [r4, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800637e:	6819      	ldr	r1, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006380:	2a40      	cmp	r2, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006382:	f421 31ff 	bic.w	r1, r1, #130560	; 0x1fe00
 8006386:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800638a:	f000 816f 	beq.w	800666c <HAL_DMA_Init+0x378>
 800638e:	2a80      	cmp	r2, #128	; 0x80
 8006390:	bf14      	ite	ne
 8006392:	2000      	movne	r0, #0
 8006394:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006398:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 800639c:	08d2      	lsrs	r2, r2, #3
 800639e:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80063a2:	6966      	ldr	r6, [r4, #20]
 80063a4:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80063a8:	69a6      	ldr	r6, [r4, #24]
 80063aa:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80063ae:	69e6      	ldr	r6, [r4, #28]
 80063b0:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80063b4:	6a26      	ldr	r6, [r4, #32]
 80063b6:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 80063ba:	430a      	orrs	r2, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063bc:	4302      	orrs	r2, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063be:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80063c0:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80063c2:	4a87      	ldr	r2, [pc, #540]	; (80065e0 <HAL_DMA_Init+0x2ec>)
 80063c4:	441a      	add	r2, r3
 80063c6:	2314      	movs	r3, #20
 80063c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80063cc:	0092      	lsls	r2, r2, #2
 80063ce:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063d0:	f7ff fec2 	bl	8006158 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80063d6:	f003 021f 	and.w	r2, r3, #31
 80063da:	2301      	movs	r3, #1
 80063dc:	4093      	lsls	r3, r2
 80063de:	6043      	str	r3, [r0, #4]
 80063e0:	e081      	b.n	80064e6 <HAL_DMA_Init+0x1f2>
    __HAL_UNLOCK(hdma);
 80063e2:	2200      	movs	r2, #0
    __HAL_DMA_DISABLE(hdma);
 80063e4:	42ab      	cmp	r3, r5
    __HAL_UNLOCK(hdma);
 80063e6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 80063ea:	f04f 0202 	mov.w	r2, #2
 80063ee:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80063f2:	d01e      	beq.n	8006432 <HAL_DMA_Init+0x13e>
 80063f4:	4a78      	ldr	r2, [pc, #480]	; (80065d8 <HAL_DMA_Init+0x2e4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01b      	beq.n	8006432 <HAL_DMA_Init+0x13e>
 80063fa:	3218      	adds	r2, #24
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d018      	beq.n	8006432 <HAL_DMA_Init+0x13e>
 8006400:	3218      	adds	r2, #24
 8006402:	4293      	cmp	r3, r2
 8006404:	d015      	beq.n	8006432 <HAL_DMA_Init+0x13e>
 8006406:	3218      	adds	r2, #24
 8006408:	4293      	cmp	r3, r2
 800640a:	d012      	beq.n	8006432 <HAL_DMA_Init+0x13e>
 800640c:	3218      	adds	r2, #24
 800640e:	4293      	cmp	r3, r2
 8006410:	d00f      	beq.n	8006432 <HAL_DMA_Init+0x13e>
 8006412:	3218      	adds	r2, #24
 8006414:	4293      	cmp	r3, r2
 8006416:	d00c      	beq.n	8006432 <HAL_DMA_Init+0x13e>
 8006418:	3218      	adds	r2, #24
 800641a:	4293      	cmp	r3, r2
 800641c:	d009      	beq.n	8006432 <HAL_DMA_Init+0x13e>
 800641e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006422:	4293      	cmp	r3, r2
 8006424:	d005      	beq.n	8006432 <HAL_DMA_Init+0x13e>
 8006426:	3218      	adds	r2, #24
 8006428:	4293      	cmp	r3, r2
 800642a:	d002      	beq.n	8006432 <HAL_DMA_Init+0x13e>
 800642c:	3218      	adds	r2, #24
 800642e:	4293      	cmp	r3, r2
 8006430:	d0ff      	beq.n	8006432 <HAL_DMA_Init+0x13e>
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800643a:	6821      	ldr	r1, [r4, #0]
 800643c:	680b      	ldr	r3, [r1, #0]
 800643e:	07db      	lsls	r3, r3, #31
 8006440:	f100 80ba 	bmi.w	80065b8 <HAL_DMA_Init+0x2c4>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006444:	680b      	ldr	r3, [r1, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006446:	4e67      	ldr	r6, [pc, #412]	; (80065e4 <HAL_DMA_Init+0x2f0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006448:	69a0      	ldr	r0, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800644a:	401e      	ands	r6, r3
    registerValue |=  hdma->Init.Direction           |
 800644c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8006450:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006452:	6922      	ldr	r2, [r4, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	6962      	ldr	r2, [r4, #20]
 8006458:	4313      	orrs	r3, r2
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800645a:	69e2      	ldr	r2, [r4, #28]
 800645c:	4303      	orrs	r3, r0
 800645e:	4313      	orrs	r3, r2
            hdma->Init.Mode                | hdma->Init.Priority;
 8006460:	6a22      	ldr	r2, [r4, #32]
 8006462:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006464:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006466:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006468:	2e04      	cmp	r6, #4
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800646a:	bf02      	ittt	eq
 800646c:	e9d4 270b 	ldrdeq	r2, r7, [r4, #44]	; 0x2c
 8006470:	433a      	orreq	r2, r7
 8006472:	4313      	orreq	r3, r2
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006474:	4a5c      	ldr	r2, [pc, #368]	; (80065e8 <HAL_DMA_Init+0x2f4>)
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	0c12      	lsrs	r2, r2, #16
 800647a:	0412      	lsls	r2, r2, #16
 800647c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006480:	d30f      	bcc.n	80064a2 <HAL_DMA_Init+0x1ae>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006482:	6862      	ldr	r2, [r4, #4]
 8006484:	f1a2 0c29 	sub.w	ip, r2, #41	; 0x29
 8006488:	f1bc 0f1f 	cmp.w	ip, #31
 800648c:	d804      	bhi.n	8006498 <HAL_DMA_Init+0x1a4>
 800648e:	4f57      	ldr	r7, [pc, #348]	; (80065ec <HAL_DMA_Init+0x2f8>)
 8006490:	fa27 f70c 	lsr.w	r7, r7, ip
 8006494:	07ff      	lsls	r7, r7, #31
 8006496:	d402      	bmi.n	800649e <HAL_DMA_Init+0x1aa>
 8006498:	3a4f      	subs	r2, #79	; 0x4f
 800649a:	2a03      	cmp	r2, #3
 800649c:	d801      	bhi.n	80064a2 <HAL_DMA_Init+0x1ae>
        registerValue |= DMA_SxCR_TRBUFF;
 800649e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80064a2:	600b      	str	r3, [r1, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064a4:	2e04      	cmp	r6, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80064a6:	694b      	ldr	r3, [r1, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064a8:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80064ac:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064b0:	d10f      	bne.n	80064d2 <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 80064b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80064b6:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064b8:	b15e      	cbz	r6, 80064d2 <HAL_DMA_Init+0x1de>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064ba:	2800      	cmp	r0, #0
 80064bc:	f040 8098 	bne.w	80065f0 <HAL_DMA_Init+0x2fc>
    switch (hdma->Init.FIFOThreshold)
 80064c0:	2a01      	cmp	r2, #1
 80064c2:	f000 80a7 	beq.w	8006614 <HAL_DMA_Init+0x320>
 80064c6:	d301      	bcc.n	80064cc <HAL_DMA_Init+0x1d8>
 80064c8:	2a02      	cmp	r2, #2
    switch (hdma->Init.FIFOThreshold)
 80064ca:	d102      	bne.n	80064d2 <HAL_DMA_Init+0x1de>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064cc:	01f2      	lsls	r2, r6, #7
 80064ce:	f100 80a5 	bmi.w	800661c <HAL_DMA_Init+0x328>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80064d2:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064d4:	4620      	mov	r0, r4
 80064d6:	f7ff fe3f 	bl	8006158 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80064dc:	f003 021f 	and.w	r2, r3, #31
 80064e0:	233f      	movs	r3, #63	; 0x3f
 80064e2:	4093      	lsls	r3, r2
 80064e4:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	42ab      	cmp	r3, r5
 80064ea:	d045      	beq.n	8006578 <HAL_DMA_Init+0x284>
 80064ec:	4a3a      	ldr	r2, [pc, #232]	; (80065d8 <HAL_DMA_Init+0x2e4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d042      	beq.n	8006578 <HAL_DMA_Init+0x284>
 80064f2:	3218      	adds	r2, #24
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d03f      	beq.n	8006578 <HAL_DMA_Init+0x284>
 80064f8:	3218      	adds	r2, #24
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d03c      	beq.n	8006578 <HAL_DMA_Init+0x284>
 80064fe:	3218      	adds	r2, #24
 8006500:	4293      	cmp	r3, r2
 8006502:	d039      	beq.n	8006578 <HAL_DMA_Init+0x284>
 8006504:	3218      	adds	r2, #24
 8006506:	4293      	cmp	r3, r2
 8006508:	d036      	beq.n	8006578 <HAL_DMA_Init+0x284>
 800650a:	3218      	adds	r2, #24
 800650c:	4293      	cmp	r3, r2
 800650e:	d033      	beq.n	8006578 <HAL_DMA_Init+0x284>
 8006510:	3218      	adds	r2, #24
 8006512:	4293      	cmp	r3, r2
 8006514:	d030      	beq.n	8006578 <HAL_DMA_Init+0x284>
 8006516:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800651a:	4293      	cmp	r3, r2
 800651c:	d02c      	beq.n	8006578 <HAL_DMA_Init+0x284>
 800651e:	3218      	adds	r2, #24
 8006520:	4293      	cmp	r3, r2
 8006522:	d029      	beq.n	8006578 <HAL_DMA_Init+0x284>
 8006524:	3218      	adds	r2, #24
 8006526:	4293      	cmp	r3, r2
 8006528:	d026      	beq.n	8006578 <HAL_DMA_Init+0x284>
 800652a:	3218      	adds	r2, #24
 800652c:	4293      	cmp	r3, r2
 800652e:	d023      	beq.n	8006578 <HAL_DMA_Init+0x284>
 8006530:	3218      	adds	r2, #24
 8006532:	4293      	cmp	r3, r2
 8006534:	d020      	beq.n	8006578 <HAL_DMA_Init+0x284>
 8006536:	3218      	adds	r2, #24
 8006538:	4293      	cmp	r3, r2
 800653a:	d01d      	beq.n	8006578 <HAL_DMA_Init+0x284>
 800653c:	3218      	adds	r2, #24
 800653e:	4293      	cmp	r3, r2
 8006540:	d01a      	beq.n	8006578 <HAL_DMA_Init+0x284>
 8006542:	3218      	adds	r2, #24
 8006544:	4293      	cmp	r3, r2
 8006546:	d017      	beq.n	8006578 <HAL_DMA_Init+0x284>
 8006548:	4a24      	ldr	r2, [pc, #144]	; (80065dc <HAL_DMA_Init+0x2e8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d014      	beq.n	8006578 <HAL_DMA_Init+0x284>
 800654e:	3214      	adds	r2, #20
 8006550:	4293      	cmp	r3, r2
 8006552:	d011      	beq.n	8006578 <HAL_DMA_Init+0x284>
 8006554:	3214      	adds	r2, #20
 8006556:	4293      	cmp	r3, r2
 8006558:	d00e      	beq.n	8006578 <HAL_DMA_Init+0x284>
 800655a:	3214      	adds	r2, #20
 800655c:	4293      	cmp	r3, r2
 800655e:	d00b      	beq.n	8006578 <HAL_DMA_Init+0x284>
 8006560:	3214      	adds	r2, #20
 8006562:	4293      	cmp	r3, r2
 8006564:	d008      	beq.n	8006578 <HAL_DMA_Init+0x284>
 8006566:	3214      	adds	r2, #20
 8006568:	4293      	cmp	r3, r2
 800656a:	d005      	beq.n	8006578 <HAL_DMA_Init+0x284>
 800656c:	3214      	adds	r2, #20
 800656e:	4293      	cmp	r3, r2
 8006570:	d002      	beq.n	8006578 <HAL_DMA_Init+0x284>
 8006572:	3214      	adds	r2, #20
 8006574:	4293      	cmp	r3, r2
 8006576:	d119      	bne.n	80065ac <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006578:	4620      	mov	r0, r4
 800657a:	2500      	movs	r5, #0
 800657c:	f7ff fe3a 	bl	80061f4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006580:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006582:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006584:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006586:	bf04      	itt	eq
 8006588:	2300      	moveq	r3, #0
 800658a:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800658c:	6863      	ldr	r3, [r4, #4]
 800658e:	b2d9      	uxtb	r1, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006590:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006592:	6011      	str	r1, [r2, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006594:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006596:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
 800659a:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800659c:	d868      	bhi.n	8006670 <HAL_DMA_Init+0x37c>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800659e:	f7ff fe71 	bl	8006284 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80065a2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80065a4:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065a6:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 80065aa:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065ac:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80065ae:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065b0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80065b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80065b6:	e036      	b.n	8006626 <HAL_DMA_Init+0x332>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065b8:	f7fe fe50 	bl	800525c <HAL_GetTick>
 80065bc:	1b80      	subs	r0, r0, r6
 80065be:	2805      	cmp	r0, #5
 80065c0:	f67f af3b 	bls.w	800643a <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065c4:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80065c6:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80065c8:	2303      	movs	r3, #3
 80065ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80065ce:	2001      	movs	r0, #1
 80065d0:	e029      	b.n	8006626 <HAL_DMA_Init+0x332>
 80065d2:	bf00      	nop
 80065d4:	40020010 	.word	0x40020010
 80065d8:	40020028 	.word	0x40020028
 80065dc:	58025408 	.word	0x58025408
 80065e0:	a7fdabf8 	.word	0xa7fdabf8
 80065e4:	fe10803f 	.word	0xfe10803f
 80065e8:	5c001000 	.word	0x5c001000
 80065ec:	c3c0003f 	.word	0xc3c0003f
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80065f0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80065f4:	d118      	bne.n	8006628 <HAL_DMA_Init+0x334>
    switch (hdma->Init.FIFOThreshold)
 80065f6:	2a03      	cmp	r2, #3
 80065f8:	f63f af6b 	bhi.w	80064d2 <HAL_DMA_Init+0x1de>
 80065fc:	a001      	add	r0, pc, #4	; (adr r0, 8006604 <HAL_DMA_Init+0x310>)
 80065fe:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8006602:	bf00      	nop
 8006604:	0800661d 	.word	0x0800661d
 8006608:	080064cd 	.word	0x080064cd
 800660c:	0800661d 	.word	0x0800661d
 8006610:	08006615 	.word	0x08006615
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006614:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8006618:	f47f af5b 	bne.w	80064d2 <HAL_DMA_Init+0x1de>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800661c:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 800661e:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006620:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8006622:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8006626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8006628:	2a02      	cmp	r2, #2
 800662a:	d9f7      	bls.n	800661c <HAL_DMA_Init+0x328>
 800662c:	2a03      	cmp	r2, #3
 800662e:	e74c      	b.n	80064ca <HAL_DMA_Init+0x1d6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006630:	4a11      	ldr	r2, [pc, #68]	; (8006678 <HAL_DMA_Init+0x384>)
 8006632:	4293      	cmp	r3, r2
 8006634:	f43f ae9c 	beq.w	8006370 <HAL_DMA_Init+0x7c>
 8006638:	3214      	adds	r2, #20
 800663a:	4293      	cmp	r3, r2
 800663c:	f43f ae98 	beq.w	8006370 <HAL_DMA_Init+0x7c>
 8006640:	3214      	adds	r2, #20
 8006642:	4293      	cmp	r3, r2
 8006644:	f43f ae94 	beq.w	8006370 <HAL_DMA_Init+0x7c>
 8006648:	3214      	adds	r2, #20
 800664a:	4293      	cmp	r3, r2
 800664c:	f43f ae90 	beq.w	8006370 <HAL_DMA_Init+0x7c>
 8006650:	3214      	adds	r2, #20
 8006652:	4293      	cmp	r3, r2
 8006654:	f43f ae8c 	beq.w	8006370 <HAL_DMA_Init+0x7c>
 8006658:	3214      	adds	r2, #20
 800665a:	4293      	cmp	r3, r2
 800665c:	f43f ae88 	beq.w	8006370 <HAL_DMA_Init+0x7c>
 8006660:	3214      	adds	r2, #20
 8006662:	4293      	cmp	r3, r2
 8006664:	f43f ae84 	beq.w	8006370 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006668:	2340      	movs	r3, #64	; 0x40
 800666a:	e7ac      	b.n	80065c6 <HAL_DMA_Init+0x2d2>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800666c:	2010      	movs	r0, #16
 800666e:	e693      	b.n	8006398 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8006670:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006674:	6765      	str	r5, [r4, #116]	; 0x74
 8006676:	e799      	b.n	80065ac <HAL_DMA_Init+0x2b8>
 8006678:	5802541c 	.word	0x5802541c

0800667c <HAL_DMA_Start_IT>:
{
 800667c:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 800667e:	4604      	mov	r4, r0
 8006680:	2800      	cmp	r0, #0
 8006682:	f000 810d 	beq.w	80068a0 <HAL_DMA_Start_IT+0x224>
  __HAL_LOCK(hdma);
 8006686:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800668a:	2801      	cmp	r0, #1
 800668c:	f000 810a 	beq.w	80068a4 <HAL_DMA_Start_IT+0x228>
 8006690:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8006692:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 8006696:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 8006698:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 800669c:	f04f 0500 	mov.w	r5, #0
  if(HAL_DMA_STATE_READY == hdma->State)
 80066a0:	f040 80f8 	bne.w	8006894 <HAL_DMA_Start_IT+0x218>
    hdma->State = HAL_DMA_STATE_BUSY;
 80066a4:	2002      	movs	r0, #2
 80066a6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066aa:	6565      	str	r5, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80066ac:	6820      	ldr	r0, [r4, #0]
 80066ae:	4d7e      	ldr	r5, [pc, #504]	; (80068a8 <HAL_DMA_Start_IT+0x22c>)
 80066b0:	42a8      	cmp	r0, r5
 80066b2:	d01e      	beq.n	80066f2 <HAL_DMA_Start_IT+0x76>
 80066b4:	4e7d      	ldr	r6, [pc, #500]	; (80068ac <HAL_DMA_Start_IT+0x230>)
 80066b6:	42b0      	cmp	r0, r6
 80066b8:	d01b      	beq.n	80066f2 <HAL_DMA_Start_IT+0x76>
 80066ba:	3618      	adds	r6, #24
 80066bc:	42b0      	cmp	r0, r6
 80066be:	d018      	beq.n	80066f2 <HAL_DMA_Start_IT+0x76>
 80066c0:	3618      	adds	r6, #24
 80066c2:	42b0      	cmp	r0, r6
 80066c4:	d015      	beq.n	80066f2 <HAL_DMA_Start_IT+0x76>
 80066c6:	3618      	adds	r6, #24
 80066c8:	42b0      	cmp	r0, r6
 80066ca:	d012      	beq.n	80066f2 <HAL_DMA_Start_IT+0x76>
 80066cc:	3618      	adds	r6, #24
 80066ce:	42b0      	cmp	r0, r6
 80066d0:	d00f      	beq.n	80066f2 <HAL_DMA_Start_IT+0x76>
 80066d2:	3618      	adds	r6, #24
 80066d4:	42b0      	cmp	r0, r6
 80066d6:	d00c      	beq.n	80066f2 <HAL_DMA_Start_IT+0x76>
 80066d8:	3618      	adds	r6, #24
 80066da:	42b0      	cmp	r0, r6
 80066dc:	d009      	beq.n	80066f2 <HAL_DMA_Start_IT+0x76>
 80066de:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80066e2:	42b0      	cmp	r0, r6
 80066e4:	d005      	beq.n	80066f2 <HAL_DMA_Start_IT+0x76>
 80066e6:	3618      	adds	r6, #24
 80066e8:	42b0      	cmp	r0, r6
 80066ea:	d002      	beq.n	80066f2 <HAL_DMA_Start_IT+0x76>
 80066ec:	3618      	adds	r6, #24
 80066ee:	42b0      	cmp	r0, r6
 80066f0:	d0ff      	beq.n	80066f2 <HAL_DMA_Start_IT+0x76>
 80066f2:	6806      	ldr	r6, [r0, #0]
 80066f4:	f026 0601 	bic.w	r6, r6, #1
 80066f8:	6006      	str	r6, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066fa:	4620      	mov	r0, r4
 80066fc:	f7ff fc6a 	bl	8005fd4 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006704:	42ab      	cmp	r3, r5
 8006706:	d053      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 8006708:	4a68      	ldr	r2, [pc, #416]	; (80068ac <HAL_DMA_Start_IT+0x230>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d050      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 800670e:	3218      	adds	r2, #24
 8006710:	4293      	cmp	r3, r2
 8006712:	d04d      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 8006714:	3218      	adds	r2, #24
 8006716:	4293      	cmp	r3, r2
 8006718:	d04a      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 800671a:	3218      	adds	r2, #24
 800671c:	4293      	cmp	r3, r2
 800671e:	d047      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 8006720:	3218      	adds	r2, #24
 8006722:	4293      	cmp	r3, r2
 8006724:	d044      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 8006726:	3218      	adds	r2, #24
 8006728:	4293      	cmp	r3, r2
 800672a:	d041      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 800672c:	3218      	adds	r2, #24
 800672e:	4293      	cmp	r3, r2
 8006730:	d03e      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 8006732:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006736:	4293      	cmp	r3, r2
 8006738:	d03a      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 800673a:	3218      	adds	r2, #24
 800673c:	4293      	cmp	r3, r2
 800673e:	d037      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 8006740:	3218      	adds	r2, #24
 8006742:	4293      	cmp	r3, r2
 8006744:	d034      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 8006746:	3218      	adds	r2, #24
 8006748:	4293      	cmp	r3, r2
 800674a:	d031      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 800674c:	3218      	adds	r2, #24
 800674e:	4293      	cmp	r3, r2
 8006750:	d02e      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 8006752:	3218      	adds	r2, #24
 8006754:	4293      	cmp	r3, r2
 8006756:	d02b      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 8006758:	3218      	adds	r2, #24
 800675a:	4293      	cmp	r3, r2
 800675c:	d028      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
 800675e:	3218      	adds	r2, #24
 8006760:	4293      	cmp	r3, r2
 8006762:	d025      	beq.n	80067b0 <HAL_DMA_Start_IT+0x134>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	f022 020e 	bic.w	r2, r2, #14
 800676a:	f042 020a 	orr.w	r2, r2, #10
 800676e:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006770:	2900      	cmp	r1, #0
 8006772:	d156      	bne.n	8006822 <HAL_DMA_Start_IT+0x1a6>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006774:	4a4e      	ldr	r2, [pc, #312]	; (80068b0 <HAL_DMA_Start_IT+0x234>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d027      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 800677a:	4a4e      	ldr	r2, [pc, #312]	; (80068b4 <HAL_DMA_Start_IT+0x238>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d024      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006780:	3214      	adds	r2, #20
 8006782:	4293      	cmp	r3, r2
 8006784:	d021      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006786:	3214      	adds	r2, #20
 8006788:	4293      	cmp	r3, r2
 800678a:	d01e      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 800678c:	3214      	adds	r2, #20
 800678e:	4293      	cmp	r3, r2
 8006790:	d01b      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006792:	3214      	adds	r2, #20
 8006794:	4293      	cmp	r3, r2
 8006796:	d018      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006798:	3214      	adds	r2, #20
 800679a:	4293      	cmp	r3, r2
 800679c:	d015      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 800679e:	3214      	adds	r2, #20
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d012      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
    __HAL_DMA_ENABLE(hdma);
 80067a4:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067a6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80067a8:	f042 0201 	orr.w	r2, r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
}
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	f022 021e 	bic.w	r2, r2, #30
 80067b6:	f042 0216 	orr.w	r2, r2, #22
 80067ba:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80067bc:	b119      	cbz	r1, 80067c6 <HAL_DMA_Start_IT+0x14a>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	f042 0208 	orr.w	r2, r2, #8
 80067c4:	601a      	str	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067c6:	42ab      	cmp	r3, r5
 80067c8:	d130      	bne.n	800682c <HAL_DMA_Start_IT+0x1b0>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80067ca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80067cc:	6811      	ldr	r1, [r2, #0]
 80067ce:	03c9      	lsls	r1, r1, #15
 80067d0:	d45b      	bmi.n	800688a <HAL_DMA_Start_IT+0x20e>
      if(hdma->DMAmuxRequestGen != 0U)
 80067d2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80067d4:	b11a      	cbz	r2, 80067de <HAL_DMA_Start_IT+0x162>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067d6:	6811      	ldr	r1, [r2, #0]
 80067d8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80067dc:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80067de:	42ab      	cmp	r3, r5
 80067e0:	d0e0      	beq.n	80067a4 <HAL_DMA_Start_IT+0x128>
 80067e2:	4a32      	ldr	r2, [pc, #200]	; (80068ac <HAL_DMA_Start_IT+0x230>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d0dd      	beq.n	80067a4 <HAL_DMA_Start_IT+0x128>
 80067e8:	3218      	adds	r2, #24
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d0da      	beq.n	80067a4 <HAL_DMA_Start_IT+0x128>
 80067ee:	3218      	adds	r2, #24
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d0d7      	beq.n	80067a4 <HAL_DMA_Start_IT+0x128>
 80067f4:	3218      	adds	r2, #24
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d0d4      	beq.n	80067a4 <HAL_DMA_Start_IT+0x128>
 80067fa:	3218      	adds	r2, #24
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d0d1      	beq.n	80067a4 <HAL_DMA_Start_IT+0x128>
 8006800:	3218      	adds	r2, #24
 8006802:	4293      	cmp	r3, r2
 8006804:	d0ce      	beq.n	80067a4 <HAL_DMA_Start_IT+0x128>
 8006806:	3218      	adds	r2, #24
 8006808:	4293      	cmp	r3, r2
 800680a:	d0cb      	beq.n	80067a4 <HAL_DMA_Start_IT+0x128>
 800680c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006810:	4293      	cmp	r3, r2
 8006812:	d0c7      	beq.n	80067a4 <HAL_DMA_Start_IT+0x128>
 8006814:	3218      	adds	r2, #24
 8006816:	4293      	cmp	r3, r2
 8006818:	d0c4      	beq.n	80067a4 <HAL_DMA_Start_IT+0x128>
 800681a:	3218      	adds	r2, #24
 800681c:	4293      	cmp	r3, r2
 800681e:	d0c1      	beq.n	80067a4 <HAL_DMA_Start_IT+0x128>
 8006820:	e7c0      	b.n	80067a4 <HAL_DMA_Start_IT+0x128>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	f042 0204 	orr.w	r2, r2, #4
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	e7a3      	b.n	8006774 <HAL_DMA_Start_IT+0xf8>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800682c:	4a1f      	ldr	r2, [pc, #124]	; (80068ac <HAL_DMA_Start_IT+0x230>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d0cb      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006832:	3218      	adds	r2, #24
 8006834:	4293      	cmp	r3, r2
 8006836:	d0c8      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006838:	3218      	adds	r2, #24
 800683a:	4293      	cmp	r3, r2
 800683c:	d0c5      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 800683e:	3218      	adds	r2, #24
 8006840:	4293      	cmp	r3, r2
 8006842:	d0c2      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006844:	3218      	adds	r2, #24
 8006846:	4293      	cmp	r3, r2
 8006848:	d0bf      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 800684a:	3218      	adds	r2, #24
 800684c:	4293      	cmp	r3, r2
 800684e:	d0bc      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006850:	3218      	adds	r2, #24
 8006852:	4293      	cmp	r3, r2
 8006854:	d0b9      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006856:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800685a:	4293      	cmp	r3, r2
 800685c:	d0b5      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 800685e:	3218      	adds	r2, #24
 8006860:	4293      	cmp	r3, r2
 8006862:	d0b2      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006864:	3218      	adds	r2, #24
 8006866:	4293      	cmp	r3, r2
 8006868:	d0af      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 800686a:	3218      	adds	r2, #24
 800686c:	4293      	cmp	r3, r2
 800686e:	d0ac      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006870:	3218      	adds	r2, #24
 8006872:	4293      	cmp	r3, r2
 8006874:	d0a9      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006876:	3218      	adds	r2, #24
 8006878:	4293      	cmp	r3, r2
 800687a:	d0a6      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 800687c:	3218      	adds	r2, #24
 800687e:	4293      	cmp	r3, r2
 8006880:	d0a3      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006882:	3218      	adds	r2, #24
 8006884:	4293      	cmp	r3, r2
 8006886:	d0a0      	beq.n	80067ca <HAL_DMA_Start_IT+0x14e>
 8006888:	e774      	b.n	8006774 <HAL_DMA_Start_IT+0xf8>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800688a:	6811      	ldr	r1, [r2, #0]
 800688c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006890:	6011      	str	r1, [r2, #0]
 8006892:	e79e      	b.n	80067d2 <HAL_DMA_Start_IT+0x156>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006894:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8006898:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800689c:	6563      	str	r3, [r4, #84]	; 0x54
 800689e:	e786      	b.n	80067ae <HAL_DMA_Start_IT+0x132>
    return HAL_ERROR;
 80068a0:	2001      	movs	r0, #1
 80068a2:	e784      	b.n	80067ae <HAL_DMA_Start_IT+0x132>
  __HAL_LOCK(hdma);
 80068a4:	2002      	movs	r0, #2
 80068a6:	e782      	b.n	80067ae <HAL_DMA_Start_IT+0x132>
 80068a8:	40020010 	.word	0x40020010
 80068ac:	40020028 	.word	0x40020028
 80068b0:	58025408 	.word	0x58025408
 80068b4:	5802541c 	.word	0x5802541c

080068b8 <HAL_DMA_Abort>:
{
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80068bc:	f7fe fcce 	bl	800525c <HAL_GetTick>
 80068c0:	4607      	mov	r7, r0
  if(hdma == NULL)
 80068c2:	b145      	cbz	r5, 80068d6 <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068c4:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d006      	beq.n	80068da <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068cc:	2380      	movs	r3, #128	; 0x80
 80068ce:	656b      	str	r3, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80068d0:	2300      	movs	r3, #0
 80068d2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 80068d6:	2001      	movs	r0, #1
 80068d8:	e162      	b.n	8006ba0 <HAL_DMA_Abort+0x2e8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068da:	682c      	ldr	r4, [r5, #0]
 80068dc:	4ecc      	ldr	r6, [pc, #816]	; (8006c10 <HAL_DMA_Abort+0x358>)
 80068de:	42b4      	cmp	r4, r6
 80068e0:	f000 80d3 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 80068e4:	4bcb      	ldr	r3, [pc, #812]	; (8006c14 <HAL_DMA_Abort+0x35c>)
 80068e6:	429c      	cmp	r4, r3
 80068e8:	f000 80cf 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 80068ec:	3318      	adds	r3, #24
 80068ee:	429c      	cmp	r4, r3
 80068f0:	f000 80cb 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 80068f4:	3318      	adds	r3, #24
 80068f6:	429c      	cmp	r4, r3
 80068f8:	f000 80c7 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 80068fc:	3318      	adds	r3, #24
 80068fe:	429c      	cmp	r4, r3
 8006900:	f000 80c3 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 8006904:	3318      	adds	r3, #24
 8006906:	429c      	cmp	r4, r3
 8006908:	f000 80bf 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 800690c:	3318      	adds	r3, #24
 800690e:	429c      	cmp	r4, r3
 8006910:	f000 80bb 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 8006914:	3318      	adds	r3, #24
 8006916:	429c      	cmp	r4, r3
 8006918:	f000 80b7 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 800691c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006920:	429c      	cmp	r4, r3
 8006922:	f000 80b2 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 8006926:	3318      	adds	r3, #24
 8006928:	429c      	cmp	r4, r3
 800692a:	f000 80ae 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 800692e:	3318      	adds	r3, #24
 8006930:	429c      	cmp	r4, r3
 8006932:	f000 80aa 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 8006936:	3318      	adds	r3, #24
 8006938:	429c      	cmp	r4, r3
 800693a:	f000 80a6 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 800693e:	3318      	adds	r3, #24
 8006940:	429c      	cmp	r4, r3
 8006942:	f000 80a2 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 8006946:	3318      	adds	r3, #24
 8006948:	429c      	cmp	r4, r3
 800694a:	f000 809e 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 800694e:	3318      	adds	r3, #24
 8006950:	429c      	cmp	r4, r3
 8006952:	f000 809a 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
 8006956:	3318      	adds	r3, #24
 8006958:	429c      	cmp	r4, r3
 800695a:	f000 8096 	beq.w	8006a8a <HAL_DMA_Abort+0x1d2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	f023 030e 	bic.w	r3, r3, #14
 8006964:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006966:	4bac      	ldr	r3, [pc, #688]	; (8006c18 <HAL_DMA_Abort+0x360>)
 8006968:	429c      	cmp	r4, r3
 800696a:	f000 80c7 	beq.w	8006afc <HAL_DMA_Abort+0x244>
 800696e:	3314      	adds	r3, #20
 8006970:	429c      	cmp	r4, r3
 8006972:	f000 80c3 	beq.w	8006afc <HAL_DMA_Abort+0x244>
 8006976:	3314      	adds	r3, #20
 8006978:	429c      	cmp	r4, r3
 800697a:	f000 80bf 	beq.w	8006afc <HAL_DMA_Abort+0x244>
 800697e:	3314      	adds	r3, #20
 8006980:	429c      	cmp	r4, r3
 8006982:	f000 80bb 	beq.w	8006afc <HAL_DMA_Abort+0x244>
 8006986:	3314      	adds	r3, #20
 8006988:	429c      	cmp	r4, r3
 800698a:	f000 80b7 	beq.w	8006afc <HAL_DMA_Abort+0x244>
 800698e:	3314      	adds	r3, #20
 8006990:	429c      	cmp	r4, r3
 8006992:	f000 80b3 	beq.w	8006afc <HAL_DMA_Abort+0x244>
 8006996:	3314      	adds	r3, #20
 8006998:	429c      	cmp	r4, r3
 800699a:	f000 80af 	beq.w	8006afc <HAL_DMA_Abort+0x244>
 800699e:	3314      	adds	r3, #20
 80069a0:	429c      	cmp	r4, r3
 80069a2:	f000 80ab 	beq.w	8006afc <HAL_DMA_Abort+0x244>
    __HAL_DMA_DISABLE(hdma);
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	f023 0301 	bic.w	r3, r3, #1
 80069ac:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	07db      	lsls	r3, r3, #31
 80069b2:	f100 80d5 	bmi.w	8006b60 <HAL_DMA_Abort+0x2a8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80069ba:	42b3      	cmp	r3, r6
 80069bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069be:	f002 021f 	and.w	r2, r2, #31
 80069c2:	f000 80dc 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 80069c6:	4993      	ldr	r1, [pc, #588]	; (8006c14 <HAL_DMA_Abort+0x35c>)
 80069c8:	428b      	cmp	r3, r1
 80069ca:	f000 80d8 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 80069ce:	3118      	adds	r1, #24
 80069d0:	428b      	cmp	r3, r1
 80069d2:	f000 80d4 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 80069d6:	3118      	adds	r1, #24
 80069d8:	428b      	cmp	r3, r1
 80069da:	f000 80d0 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 80069de:	3118      	adds	r1, #24
 80069e0:	428b      	cmp	r3, r1
 80069e2:	f000 80cc 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 80069e6:	3118      	adds	r1, #24
 80069e8:	428b      	cmp	r3, r1
 80069ea:	f000 80c8 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 80069ee:	3118      	adds	r1, #24
 80069f0:	428b      	cmp	r3, r1
 80069f2:	f000 80c4 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 80069f6:	3118      	adds	r1, #24
 80069f8:	428b      	cmp	r3, r1
 80069fa:	f000 80c0 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 80069fe:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006a02:	428b      	cmp	r3, r1
 8006a04:	f000 80bb 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 8006a08:	3118      	adds	r1, #24
 8006a0a:	428b      	cmp	r3, r1
 8006a0c:	f000 80b7 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 8006a10:	3118      	adds	r1, #24
 8006a12:	428b      	cmp	r3, r1
 8006a14:	f000 80b3 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 8006a18:	3118      	adds	r1, #24
 8006a1a:	428b      	cmp	r3, r1
 8006a1c:	f000 80af 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 8006a20:	3118      	adds	r1, #24
 8006a22:	428b      	cmp	r3, r1
 8006a24:	f000 80ab 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 8006a28:	3118      	adds	r1, #24
 8006a2a:	428b      	cmp	r3, r1
 8006a2c:	f000 80a7 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 8006a30:	3118      	adds	r1, #24
 8006a32:	428b      	cmp	r3, r1
 8006a34:	f000 80a3 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
 8006a38:	3118      	adds	r1, #24
 8006a3a:	428b      	cmp	r3, r1
 8006a3c:	f000 809f 	beq.w	8006b7e <HAL_DMA_Abort+0x2c6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a40:	2101      	movs	r1, #1
 8006a42:	fa01 f202 	lsl.w	r2, r1, r2
 8006a46:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a48:	4a73      	ldr	r2, [pc, #460]	; (8006c18 <HAL_DMA_Abort+0x360>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	f000 809d 	beq.w	8006b8a <HAL_DMA_Abort+0x2d2>
 8006a50:	3214      	adds	r2, #20
 8006a52:	4293      	cmp	r3, r2
 8006a54:	f000 8099 	beq.w	8006b8a <HAL_DMA_Abort+0x2d2>
 8006a58:	3214      	adds	r2, #20
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	f000 8095 	beq.w	8006b8a <HAL_DMA_Abort+0x2d2>
 8006a60:	3214      	adds	r2, #20
 8006a62:	4293      	cmp	r3, r2
 8006a64:	f000 8091 	beq.w	8006b8a <HAL_DMA_Abort+0x2d2>
 8006a68:	3214      	adds	r2, #20
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	f000 808d 	beq.w	8006b8a <HAL_DMA_Abort+0x2d2>
 8006a70:	3214      	adds	r2, #20
 8006a72:	4293      	cmp	r3, r2
 8006a74:	f000 8089 	beq.w	8006b8a <HAL_DMA_Abort+0x2d2>
 8006a78:	3214      	adds	r2, #20
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	f000 8085 	beq.w	8006b8a <HAL_DMA_Abort+0x2d2>
 8006a80:	3214      	adds	r2, #20
 8006a82:	4293      	cmp	r3, r2
 8006a84:	f040 8086 	bne.w	8006b94 <HAL_DMA_Abort+0x2dc>
 8006a88:	e07f      	b.n	8006b8a <HAL_DMA_Abort+0x2d2>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006a8a:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a8c:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006a8e:	f023 031e 	bic.w	r3, r3, #30
 8006a92:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a94:	6963      	ldr	r3, [r4, #20]
 8006a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a9a:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a9c:	d02e      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006a9e:	4b5d      	ldr	r3, [pc, #372]	; (8006c14 <HAL_DMA_Abort+0x35c>)
 8006aa0:	429c      	cmp	r4, r3
 8006aa2:	d02b      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006aa4:	3318      	adds	r3, #24
 8006aa6:	429c      	cmp	r4, r3
 8006aa8:	d028      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006aaa:	3318      	adds	r3, #24
 8006aac:	429c      	cmp	r4, r3
 8006aae:	d025      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006ab0:	3318      	adds	r3, #24
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	d022      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006ab6:	3318      	adds	r3, #24
 8006ab8:	429c      	cmp	r4, r3
 8006aba:	d01f      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006abc:	3318      	adds	r3, #24
 8006abe:	429c      	cmp	r4, r3
 8006ac0:	d01c      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	429c      	cmp	r4, r3
 8006ac6:	d019      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006ac8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006acc:	429c      	cmp	r4, r3
 8006ace:	d015      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	429c      	cmp	r4, r3
 8006ad4:	d012      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006ad6:	3318      	adds	r3, #24
 8006ad8:	429c      	cmp	r4, r3
 8006ada:	d00f      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006adc:	3318      	adds	r3, #24
 8006ade:	429c      	cmp	r4, r3
 8006ae0:	d00c      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006ae2:	3318      	adds	r3, #24
 8006ae4:	429c      	cmp	r4, r3
 8006ae6:	d009      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006ae8:	3318      	adds	r3, #24
 8006aea:	429c      	cmp	r4, r3
 8006aec:	d006      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006aee:	3318      	adds	r3, #24
 8006af0:	429c      	cmp	r4, r3
 8006af2:	d003      	beq.n	8006afc <HAL_DMA_Abort+0x244>
 8006af4:	3318      	adds	r3, #24
 8006af6:	429c      	cmp	r4, r3
 8006af8:	f47f af35 	bne.w	8006966 <HAL_DMA_Abort+0xae>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006afc:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    __HAL_DMA_DISABLE(hdma);
 8006afe:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b00:	6813      	ldr	r3, [r2, #0]
 8006b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b06:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006b08:	f43f af4d 	beq.w	80069a6 <HAL_DMA_Abort+0xee>
 8006b0c:	4b41      	ldr	r3, [pc, #260]	; (8006c14 <HAL_DMA_Abort+0x35c>)
 8006b0e:	429c      	cmp	r4, r3
 8006b10:	f43f af49 	beq.w	80069a6 <HAL_DMA_Abort+0xee>
 8006b14:	3318      	adds	r3, #24
 8006b16:	429c      	cmp	r4, r3
 8006b18:	f43f af45 	beq.w	80069a6 <HAL_DMA_Abort+0xee>
 8006b1c:	3318      	adds	r3, #24
 8006b1e:	429c      	cmp	r4, r3
 8006b20:	f43f af41 	beq.w	80069a6 <HAL_DMA_Abort+0xee>
 8006b24:	3318      	adds	r3, #24
 8006b26:	429c      	cmp	r4, r3
 8006b28:	f43f af3d 	beq.w	80069a6 <HAL_DMA_Abort+0xee>
 8006b2c:	3318      	adds	r3, #24
 8006b2e:	429c      	cmp	r4, r3
 8006b30:	f43f af39 	beq.w	80069a6 <HAL_DMA_Abort+0xee>
 8006b34:	3318      	adds	r3, #24
 8006b36:	429c      	cmp	r4, r3
 8006b38:	f43f af35 	beq.w	80069a6 <HAL_DMA_Abort+0xee>
 8006b3c:	3318      	adds	r3, #24
 8006b3e:	429c      	cmp	r4, r3
 8006b40:	f43f af31 	beq.w	80069a6 <HAL_DMA_Abort+0xee>
 8006b44:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b48:	429c      	cmp	r4, r3
 8006b4a:	f43f af2c 	beq.w	80069a6 <HAL_DMA_Abort+0xee>
 8006b4e:	3318      	adds	r3, #24
 8006b50:	429c      	cmp	r4, r3
 8006b52:	f43f af28 	beq.w	80069a6 <HAL_DMA_Abort+0xee>
 8006b56:	3318      	adds	r3, #24
 8006b58:	429c      	cmp	r4, r3
 8006b5a:	f43f af24 	beq.w	80069a6 <HAL_DMA_Abort+0xee>
 8006b5e:	e722      	b.n	80069a6 <HAL_DMA_Abort+0xee>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b60:	f7fe fb7c 	bl	800525c <HAL_GetTick>
 8006b64:	1bc0      	subs	r0, r0, r7
 8006b66:	2805      	cmp	r0, #5
 8006b68:	f67f af21 	bls.w	80069ae <HAL_DMA_Abort+0xf6>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b6c:	2320      	movs	r3, #32
 8006b6e:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8006b70:	2300      	movs	r3, #0
 8006b72:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b76:	2303      	movs	r3, #3
 8006b78:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8006b7c:	e6ab      	b.n	80068d6 <HAL_DMA_Abort+0x1e>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b7e:	213f      	movs	r1, #63	; 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b80:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b82:	fa01 f202 	lsl.w	r2, r1, r2
 8006b86:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b88:	d10b      	bne.n	8006ba2 <HAL_DMA_Abort+0x2ea>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b8a:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 8006b8e:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8006b90:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8006b92:	bbab      	cbnz	r3, 8006c00 <HAL_DMA_Abort+0x348>
    __HAL_UNLOCK(hdma);
 8006b94:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8006b96:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8006b98:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8006b9c:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8006ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ba2:	4a1c      	ldr	r2, [pc, #112]	; (8006c14 <HAL_DMA_Abort+0x35c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d0f0      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006ba8:	3218      	adds	r2, #24
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d0ed      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006bae:	3218      	adds	r2, #24
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d0ea      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006bb4:	3218      	adds	r2, #24
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d0e7      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006bba:	3218      	adds	r2, #24
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d0e4      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006bc0:	3218      	adds	r2, #24
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d0e1      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006bc6:	3218      	adds	r2, #24
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d0de      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006bcc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d0da      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006bd4:	3218      	adds	r2, #24
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d0d7      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006bda:	3218      	adds	r2, #24
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d0d4      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006be0:	3218      	adds	r2, #24
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d0d1      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006be6:	3218      	adds	r2, #24
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d0ce      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006bec:	3218      	adds	r2, #24
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d0cb      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006bf2:	3218      	adds	r2, #24
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d0c8      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006bf8:	3218      	adds	r2, #24
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d0c5      	beq.n	8006b8a <HAL_DMA_Abort+0x2d2>
 8006bfe:	e723      	b.n	8006a48 <HAL_DMA_Abort+0x190>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c06:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c08:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 8006c0c:	605a      	str	r2, [r3, #4]
 8006c0e:	e7c1      	b.n	8006b94 <HAL_DMA_Abort+0x2dc>
 8006c10:	40020010 	.word	0x40020010
 8006c14:	40020028 	.word	0x40020028
 8006c18:	58025408 	.word	0x58025408

08006c1c <HAL_DMA_Abort_IT>:
{
 8006c1c:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8006c1e:	b128      	cbz	r0, 8006c2c <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c20:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d003      	beq.n	8006c30 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	e07f      	b.n	8006d30 <HAL_DMA_Abort_IT+0x114>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c30:	6803      	ldr	r3, [r0, #0]
 8006c32:	4a50      	ldr	r2, [pc, #320]	; (8006d74 <HAL_DMA_Abort_IT+0x158>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d052      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c38:	494f      	ldr	r1, [pc, #316]	; (8006d78 <HAL_DMA_Abort_IT+0x15c>)
 8006c3a:	428b      	cmp	r3, r1
 8006c3c:	d04f      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c3e:	3118      	adds	r1, #24
 8006c40:	428b      	cmp	r3, r1
 8006c42:	d04c      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c44:	3118      	adds	r1, #24
 8006c46:	428b      	cmp	r3, r1
 8006c48:	d049      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c4a:	3118      	adds	r1, #24
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	d046      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c50:	3118      	adds	r1, #24
 8006c52:	428b      	cmp	r3, r1
 8006c54:	d043      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c56:	3118      	adds	r1, #24
 8006c58:	428b      	cmp	r3, r1
 8006c5a:	d040      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c5c:	3118      	adds	r1, #24
 8006c5e:	428b      	cmp	r3, r1
 8006c60:	d03d      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c62:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006c66:	428b      	cmp	r3, r1
 8006c68:	d039      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c6a:	3118      	adds	r1, #24
 8006c6c:	428b      	cmp	r3, r1
 8006c6e:	d036      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c70:	3118      	adds	r1, #24
 8006c72:	428b      	cmp	r3, r1
 8006c74:	d033      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c76:	3118      	adds	r1, #24
 8006c78:	428b      	cmp	r3, r1
 8006c7a:	d030      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c7c:	3118      	adds	r1, #24
 8006c7e:	428b      	cmp	r3, r1
 8006c80:	d02d      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c82:	3118      	adds	r1, #24
 8006c84:	428b      	cmp	r3, r1
 8006c86:	d02a      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c88:	3118      	adds	r1, #24
 8006c8a:	428b      	cmp	r3, r1
 8006c8c:	d027      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
 8006c8e:	3118      	adds	r1, #24
 8006c90:	428b      	cmp	r3, r1
 8006c92:	d024      	beq.n	8006cde <HAL_DMA_Abort_IT+0xc2>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	f022 020e 	bic.w	r2, r2, #14
 8006c9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	f022 0201 	bic.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ca4:	4a35      	ldr	r2, [pc, #212]	; (8006d7c <HAL_DMA_Abort_IT+0x160>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d143      	bne.n	8006d32 <HAL_DMA_Abort_IT+0x116>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006caa:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006cac:	6813      	ldr	r3, [r2, #0]
 8006cae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb2:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006cb4:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 8006cb8:	f003 021f 	and.w	r2, r3, #31
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	4093      	lsls	r3, r2
 8006cc0:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cc2:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 8006cc6:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8006cc8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d046      	beq.n	8006d5c <HAL_DMA_Abort_IT+0x140>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cd4:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cd6:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 8006cda:	605a      	str	r2, [r3, #4]
 8006cdc:	e03e      	b.n	8006d5c <HAL_DMA_Abort_IT+0x140>
      hdma->State = HAL_DMA_STATE_ABORT;
 8006cde:	2104      	movs	r1, #4
      __HAL_DMA_DISABLE(hdma);
 8006ce0:	4293      	cmp	r3, r2
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ce2:	f880 1035 	strb.w	r1, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8006ce6:	d01e      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x10a>
 8006ce8:	4a23      	ldr	r2, [pc, #140]	; (8006d78 <HAL_DMA_Abort_IT+0x15c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01b      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x10a>
 8006cee:	3218      	adds	r2, #24
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d018      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x10a>
 8006cf4:	3218      	adds	r2, #24
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d015      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x10a>
 8006cfa:	3218      	adds	r2, #24
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d012      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x10a>
 8006d00:	3218      	adds	r2, #24
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00f      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x10a>
 8006d06:	3218      	adds	r2, #24
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00c      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x10a>
 8006d0c:	3218      	adds	r2, #24
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d009      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x10a>
 8006d12:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d005      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x10a>
 8006d1a:	3218      	adds	r2, #24
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d002      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x10a>
 8006d20:	3218      	adds	r2, #24
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d0ff      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x10a>
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	f022 0201 	bic.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006d2e:	2000      	movs	r0, #0
}
 8006d30:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d32:	4a13      	ldr	r2, [pc, #76]	; (8006d80 <HAL_DMA_Abort_IT+0x164>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d0b8      	beq.n	8006caa <HAL_DMA_Abort_IT+0x8e>
 8006d38:	3214      	adds	r2, #20
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d0b5      	beq.n	8006caa <HAL_DMA_Abort_IT+0x8e>
 8006d3e:	3214      	adds	r2, #20
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d0b2      	beq.n	8006caa <HAL_DMA_Abort_IT+0x8e>
 8006d44:	3214      	adds	r2, #20
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d0af      	beq.n	8006caa <HAL_DMA_Abort_IT+0x8e>
 8006d4a:	3214      	adds	r2, #20
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d0ac      	beq.n	8006caa <HAL_DMA_Abort_IT+0x8e>
 8006d50:	3214      	adds	r2, #20
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d0a9      	beq.n	8006caa <HAL_DMA_Abort_IT+0x8e>
 8006d56:	3214      	adds	r2, #20
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d0a6      	beq.n	8006caa <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8006d5c:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8006d5e:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8006d60:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8006d64:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8006d66:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8006d6a:	b10b      	cbz	r3, 8006d70 <HAL_DMA_Abort_IT+0x154>
        hdma->XferAbortCallback(hdma);
 8006d6c:	4798      	blx	r3
 8006d6e:	e7de      	b.n	8006d2e <HAL_DMA_Abort_IT+0x112>
  return HAL_OK;
 8006d70:	4618      	mov	r0, r3
 8006d72:	e7dd      	b.n	8006d30 <HAL_DMA_Abort_IT+0x114>
 8006d74:	40020010 	.word	0x40020010
 8006d78:	40020028 	.word	0x40020028
 8006d7c:	58025408 	.word	0x58025408
 8006d80:	5802541c 	.word	0x5802541c

08006d84 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8006d84:	2300      	movs	r3, #0
{
 8006d86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8006d8a:	9301      	str	r3, [sp, #4]
{
 8006d8c:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d8e:	4bb4      	ldr	r3, [pc, #720]	; (8007060 <HAL_DMA_IRQHandler+0x2dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006d90:	4eb4      	ldr	r6, [pc, #720]	; (8007064 <HAL_DMA_IRQHandler+0x2e0>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d92:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006d94:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d96:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006d98:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8006d9a:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 8006d9e:	f8d5 c000 	ldr.w	ip, [r5]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006da2:	d047      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006da4:	4ab0      	ldr	r2, [pc, #704]	; (8007068 <HAL_DMA_IRQHandler+0x2e4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d044      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006daa:	3218      	adds	r2, #24
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d041      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006db0:	3218      	adds	r2, #24
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d03e      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006db6:	3218      	adds	r2, #24
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d03b      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006dbc:	3218      	adds	r2, #24
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d038      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006dc2:	3218      	adds	r2, #24
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d035      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006dc8:	3218      	adds	r2, #24
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d032      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006dce:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d02e      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006dd6:	3218      	adds	r2, #24
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d02b      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006ddc:	3218      	adds	r2, #24
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d028      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006de2:	3218      	adds	r2, #24
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d025      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006de8:	3218      	adds	r2, #24
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d022      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006dee:	3218      	adds	r2, #24
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d01f      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006df4:	3218      	adds	r2, #24
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01c      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
 8006dfa:	3218      	adds	r2, #24
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d019      	beq.n	8006e34 <HAL_DMA_IRQHandler+0xb0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006e00:	4a9a      	ldr	r2, [pc, #616]	; (800706c <HAL_DMA_IRQHandler+0x2e8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	f040 820a 	bne.w	800721c <HAL_DMA_IRQHandler+0x498>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006e08:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006e0a:	2004      	movs	r0, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006e0c:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006e0e:	f001 011f 	and.w	r1, r1, #31
 8006e12:	4088      	lsls	r0, r1
 8006e14:	ea10 0f0c 	tst.w	r0, ip
 8006e18:	f000 8227 	beq.w	800726a <HAL_DMA_IRQHandler+0x4e6>
 8006e1c:	0756      	lsls	r6, r2, #29
 8006e1e:	f140 8224 	bpl.w	800726a <HAL_DMA_IRQHandler+0x4e6>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e22:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006e24:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e26:	f140 8218 	bpl.w	800725a <HAL_DMA_IRQHandler+0x4d6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e2a:	03d3      	lsls	r3, r2, #15
 8006e2c:	f100 821b 	bmi.w	8007266 <HAL_DMA_IRQHandler+0x4e2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e30:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006e32:	e17f      	b.n	8007134 <HAL_DMA_IRQHandler+0x3b0>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e34:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006e36:	2008      	movs	r0, #8
 8006e38:	f002 021f 	and.w	r2, r2, #31
 8006e3c:	4090      	lsls	r0, r2
 8006e3e:	ea10 0f08 	tst.w	r0, r8
 8006e42:	d03d      	beq.n	8006ec0 <HAL_DMA_IRQHandler+0x13c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006e44:	42b3      	cmp	r3, r6
 8006e46:	d02e      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e48:	4987      	ldr	r1, [pc, #540]	; (8007068 <HAL_DMA_IRQHandler+0x2e4>)
 8006e4a:	428b      	cmp	r3, r1
 8006e4c:	d02b      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e4e:	3118      	adds	r1, #24
 8006e50:	428b      	cmp	r3, r1
 8006e52:	d028      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e54:	3118      	adds	r1, #24
 8006e56:	428b      	cmp	r3, r1
 8006e58:	d025      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e5a:	3118      	adds	r1, #24
 8006e5c:	428b      	cmp	r3, r1
 8006e5e:	d022      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e60:	3118      	adds	r1, #24
 8006e62:	428b      	cmp	r3, r1
 8006e64:	d01f      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e66:	3118      	adds	r1, #24
 8006e68:	428b      	cmp	r3, r1
 8006e6a:	d01c      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e6c:	3118      	adds	r1, #24
 8006e6e:	428b      	cmp	r3, r1
 8006e70:	d019      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e72:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006e76:	428b      	cmp	r3, r1
 8006e78:	d015      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e7a:	3118      	adds	r1, #24
 8006e7c:	428b      	cmp	r3, r1
 8006e7e:	d012      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e80:	3118      	adds	r1, #24
 8006e82:	428b      	cmp	r3, r1
 8006e84:	d00f      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e86:	3118      	adds	r1, #24
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	d00c      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e8c:	3118      	adds	r1, #24
 8006e8e:	428b      	cmp	r3, r1
 8006e90:	d009      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e92:	3118      	adds	r1, #24
 8006e94:	428b      	cmp	r3, r1
 8006e96:	d006      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e98:	3118      	adds	r1, #24
 8006e9a:	428b      	cmp	r3, r1
 8006e9c:	d003      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x122>
 8006e9e:	3118      	adds	r1, #24
 8006ea0:	428b      	cmp	r3, r1
 8006ea2:	f040 80c3 	bne.w	800702c <HAL_DMA_IRQHandler+0x2a8>
 8006ea6:	6819      	ldr	r1, [r3, #0]
 8006ea8:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8006eac:	b141      	cbz	r1, 8006ec0 <HAL_DMA_IRQHandler+0x13c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	f021 0104 	bic.w	r1, r1, #4
 8006eb4:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006eb6:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006eb8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006eba:	f041 0101 	orr.w	r1, r1, #1
 8006ebe:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ec0:	fa28 f102 	lsr.w	r1, r8, r2
 8006ec4:	07c8      	lsls	r0, r1, #31
 8006ec6:	d534      	bpl.n	8006f32 <HAL_DMA_IRQHandler+0x1ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006ec8:	42b3      	cmp	r3, r6
 8006eca:	d02e      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006ecc:	4966      	ldr	r1, [pc, #408]	; (8007068 <HAL_DMA_IRQHandler+0x2e4>)
 8006ece:	428b      	cmp	r3, r1
 8006ed0:	d02b      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006ed2:	3118      	adds	r1, #24
 8006ed4:	428b      	cmp	r3, r1
 8006ed6:	d028      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006ed8:	3118      	adds	r1, #24
 8006eda:	428b      	cmp	r3, r1
 8006edc:	d025      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006ede:	3118      	adds	r1, #24
 8006ee0:	428b      	cmp	r3, r1
 8006ee2:	d022      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006ee4:	3118      	adds	r1, #24
 8006ee6:	428b      	cmp	r3, r1
 8006ee8:	d01f      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006eea:	3118      	adds	r1, #24
 8006eec:	428b      	cmp	r3, r1
 8006eee:	d01c      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006ef0:	3118      	adds	r1, #24
 8006ef2:	428b      	cmp	r3, r1
 8006ef4:	d019      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006ef6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006efa:	428b      	cmp	r3, r1
 8006efc:	d015      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006efe:	3118      	adds	r1, #24
 8006f00:	428b      	cmp	r3, r1
 8006f02:	d012      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006f04:	3118      	adds	r1, #24
 8006f06:	428b      	cmp	r3, r1
 8006f08:	d00f      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006f0a:	3118      	adds	r1, #24
 8006f0c:	428b      	cmp	r3, r1
 8006f0e:	d00c      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006f10:	3118      	adds	r1, #24
 8006f12:	428b      	cmp	r3, r1
 8006f14:	d009      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006f16:	3118      	adds	r1, #24
 8006f18:	428b      	cmp	r3, r1
 8006f1a:	d006      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006f1c:	3118      	adds	r1, #24
 8006f1e:	428b      	cmp	r3, r1
 8006f20:	d003      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x1a6>
 8006f22:	3118      	adds	r1, #24
 8006f24:	428b      	cmp	r3, r1
 8006f26:	f040 8085 	bne.w	8007034 <HAL_DMA_IRQHandler+0x2b0>
 8006f2a:	6959      	ldr	r1, [r3, #20]
 8006f2c:	0609      	lsls	r1, r1, #24
 8006f2e:	f100 8083 	bmi.w	8007038 <HAL_DMA_IRQHandler+0x2b4>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f32:	2104      	movs	r1, #4
 8006f34:	4091      	lsls	r1, r2
 8006f36:	ea11 0f08 	tst.w	r1, r8
 8006f3a:	d032      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x21e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006f3c:	42b3      	cmp	r3, r6
 8006f3e:	d02d      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f40:	4849      	ldr	r0, [pc, #292]	; (8007068 <HAL_DMA_IRQHandler+0x2e4>)
 8006f42:	4283      	cmp	r3, r0
 8006f44:	d02a      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f46:	3018      	adds	r0, #24
 8006f48:	4283      	cmp	r3, r0
 8006f4a:	d027      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f4c:	3018      	adds	r0, #24
 8006f4e:	4283      	cmp	r3, r0
 8006f50:	d024      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f52:	3018      	adds	r0, #24
 8006f54:	4283      	cmp	r3, r0
 8006f56:	d021      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f58:	3018      	adds	r0, #24
 8006f5a:	4283      	cmp	r3, r0
 8006f5c:	d01e      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f5e:	3018      	adds	r0, #24
 8006f60:	4283      	cmp	r3, r0
 8006f62:	d01b      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f64:	3018      	adds	r0, #24
 8006f66:	4283      	cmp	r3, r0
 8006f68:	d018      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f6a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8006f6e:	4283      	cmp	r3, r0
 8006f70:	d014      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f72:	3018      	adds	r0, #24
 8006f74:	4283      	cmp	r3, r0
 8006f76:	d011      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f78:	3018      	adds	r0, #24
 8006f7a:	4283      	cmp	r3, r0
 8006f7c:	d00e      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f7e:	3018      	adds	r0, #24
 8006f80:	4283      	cmp	r3, r0
 8006f82:	d00b      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f84:	3018      	adds	r0, #24
 8006f86:	4283      	cmp	r3, r0
 8006f88:	d008      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f8a:	3018      	adds	r0, #24
 8006f8c:	4283      	cmp	r3, r0
 8006f8e:	d005      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f90:	3018      	adds	r0, #24
 8006f92:	4283      	cmp	r3, r0
 8006f94:	d002      	beq.n	8006f9c <HAL_DMA_IRQHandler+0x218>
 8006f96:	3018      	adds	r0, #24
 8006f98:	4283      	cmp	r3, r0
 8006f9a:	d155      	bne.n	8007048 <HAL_DMA_IRQHandler+0x2c4>
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	0780      	lsls	r0, r0, #30
 8006fa0:	d454      	bmi.n	800704c <HAL_DMA_IRQHandler+0x2c8>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006fa2:	2110      	movs	r1, #16
 8006fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8006fa8:	ea12 0f08 	tst.w	r2, r8
 8006fac:	d064      	beq.n	8007078 <HAL_DMA_IRQHandler+0x2f4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006fae:	42b3      	cmp	r3, r6
 8006fb0:	d02d      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006fb2:	492d      	ldr	r1, [pc, #180]	; (8007068 <HAL_DMA_IRQHandler+0x2e4>)
 8006fb4:	428b      	cmp	r3, r1
 8006fb6:	d02a      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006fb8:	3118      	adds	r1, #24
 8006fba:	428b      	cmp	r3, r1
 8006fbc:	d027      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006fbe:	3118      	adds	r1, #24
 8006fc0:	428b      	cmp	r3, r1
 8006fc2:	d024      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006fc4:	3118      	adds	r1, #24
 8006fc6:	428b      	cmp	r3, r1
 8006fc8:	d021      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006fca:	3118      	adds	r1, #24
 8006fcc:	428b      	cmp	r3, r1
 8006fce:	d01e      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006fd0:	3118      	adds	r1, #24
 8006fd2:	428b      	cmp	r3, r1
 8006fd4:	d01b      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006fd6:	3118      	adds	r1, #24
 8006fd8:	428b      	cmp	r3, r1
 8006fda:	d018      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006fdc:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006fe0:	428b      	cmp	r3, r1
 8006fe2:	d014      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006fe4:	3118      	adds	r1, #24
 8006fe6:	428b      	cmp	r3, r1
 8006fe8:	d011      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006fea:	3118      	adds	r1, #24
 8006fec:	428b      	cmp	r3, r1
 8006fee:	d00e      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006ff0:	3118      	adds	r1, #24
 8006ff2:	428b      	cmp	r3, r1
 8006ff4:	d00b      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006ff6:	3118      	adds	r1, #24
 8006ff8:	428b      	cmp	r3, r1
 8006ffa:	d008      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8006ffc:	3118      	adds	r1, #24
 8006ffe:	428b      	cmp	r3, r1
 8007000:	d005      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8007002:	3118      	adds	r1, #24
 8007004:	428b      	cmp	r3, r1
 8007006:	d002      	beq.n	800700e <HAL_DMA_IRQHandler+0x28a>
 8007008:	3118      	adds	r1, #24
 800700a:	428b      	cmp	r3, r1
 800700c:	d124      	bne.n	8007058 <HAL_DMA_IRQHandler+0x2d4>
 800700e:	6819      	ldr	r1, [r3, #0]
 8007010:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8007014:	2900      	cmp	r1, #0
 8007016:	d02f      	beq.n	8007078 <HAL_DMA_IRQHandler+0x2f4>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007018:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	0350      	lsls	r0, r2, #13
 800701e:	f140 8091 	bpl.w	8007144 <HAL_DMA_IRQHandler+0x3c0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	0319      	lsls	r1, r3, #12
 8007026:	d423      	bmi.n	8007070 <HAL_DMA_IRQHandler+0x2ec>
          if(hdma->XferHalfCpltCallback != NULL)
 8007028:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800702a:	e022      	b.n	8007072 <HAL_DMA_IRQHandler+0x2ee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800702c:	6819      	ldr	r1, [r3, #0]
 800702e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8007032:	e73b      	b.n	8006eac <HAL_DMA_IRQHandler+0x128>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007034:	6819      	ldr	r1, [r3, #0]
 8007036:	e77c      	b.n	8006f32 <HAL_DMA_IRQHandler+0x1ae>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007038:	2101      	movs	r1, #1
 800703a:	4091      	lsls	r1, r2
 800703c:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800703e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007040:	f041 0102 	orr.w	r1, r1, #2
 8007044:	6561      	str	r1, [r4, #84]	; 0x54
 8007046:	e774      	b.n	8006f32 <HAL_DMA_IRQHandler+0x1ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007048:	6819      	ldr	r1, [r3, #0]
 800704a:	e7aa      	b.n	8006fa2 <HAL_DMA_IRQHandler+0x21e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800704c:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800704e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007050:	f041 0104 	orr.w	r1, r1, #4
 8007054:	6561      	str	r1, [r4, #84]	; 0x54
 8007056:	e7a4      	b.n	8006fa2 <HAL_DMA_IRQHandler+0x21e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007058:	6819      	ldr	r1, [r3, #0]
 800705a:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800705e:	e7d9      	b.n	8007014 <HAL_DMA_IRQHandler+0x290>
 8007060:	24000000 	.word	0x24000000
 8007064:	40020010 	.word	0x40020010
 8007068:	40020028 	.word	0x40020028
 800706c:	58025408 	.word	0x58025408
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007070:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8007072:	b10b      	cbz	r3, 8007078 <HAL_DMA_IRQHandler+0x2f4>
            hdma->XferHalfCpltCallback(hdma);
 8007074:	4620      	mov	r0, r4
 8007076:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007078:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800707a:	2020      	movs	r0, #32
 800707c:	f001 011f 	and.w	r1, r1, #31
 8007080:	4088      	lsls	r0, r1
 8007082:	ea10 0f08 	tst.w	r0, r8
 8007086:	d073      	beq.n	8007170 <HAL_DMA_IRQHandler+0x3ec>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	42b3      	cmp	r3, r6
 800708c:	d02d      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 800708e:	4a8f      	ldr	r2, [pc, #572]	; (80072cc <HAL_DMA_IRQHandler+0x548>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d02a      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 8007094:	3218      	adds	r2, #24
 8007096:	4293      	cmp	r3, r2
 8007098:	d027      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 800709a:	3218      	adds	r2, #24
 800709c:	4293      	cmp	r3, r2
 800709e:	d024      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 80070a0:	3218      	adds	r2, #24
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d021      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 80070a6:	3218      	adds	r2, #24
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d01e      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 80070ac:	3218      	adds	r2, #24
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d01b      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 80070b2:	3218      	adds	r2, #24
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d018      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 80070b8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80070bc:	4293      	cmp	r3, r2
 80070be:	d014      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 80070c0:	3218      	adds	r2, #24
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d011      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 80070c6:	3218      	adds	r2, #24
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00e      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 80070cc:	3218      	adds	r2, #24
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00b      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 80070d2:	3218      	adds	r2, #24
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d008      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 80070d8:	3218      	adds	r2, #24
 80070da:	4293      	cmp	r3, r2
 80070dc:	d005      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 80070de:	3218      	adds	r2, #24
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d002      	beq.n	80070ea <HAL_DMA_IRQHandler+0x366>
 80070e4:	3218      	adds	r2, #24
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d135      	bne.n	8007156 <HAL_DMA_IRQHandler+0x3d2>
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80070f0:	2a00      	cmp	r2, #0
 80070f2:	d03d      	beq.n	8007170 <HAL_DMA_IRQHandler+0x3ec>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070f4:	60a8      	str	r0, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80070f6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80070fa:	2a04      	cmp	r2, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070fc:	681a      	ldr	r2, [r3, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80070fe:	d12e      	bne.n	800715e <HAL_DMA_IRQHandler+0x3da>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007100:	f022 0216 	bic.w	r2, r2, #22
 8007104:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007106:	695a      	ldr	r2, [r3, #20]
 8007108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800710c:	615a      	str	r2, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800710e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007110:	b90a      	cbnz	r2, 8007116 <HAL_DMA_IRQHandler+0x392>
 8007112:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007114:	b11a      	cbz	r2, 800711e <HAL_DMA_IRQHandler+0x39a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	f022 0208 	bic.w	r2, r2, #8
 800711c:	601a      	str	r2, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800711e:	233f      	movs	r3, #63	; 0x3f
 8007120:	fa03 f101 	lsl.w	r1, r3, r1
          __HAL_UNLOCK(hdma);
 8007124:	2300      	movs	r3, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007126:	60a9      	str	r1, [r5, #8]
          __HAL_UNLOCK(hdma);
 8007128:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800712c:	2301      	movs	r3, #1
 800712e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8007132:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 808d 	beq.w	8007254 <HAL_DMA_IRQHandler+0x4d0>
        hdma->XferErrorCallback(hdma);
 800713a:	4620      	mov	r0, r4
}
 800713c:	b002      	add	sp, #8
 800713e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8007142:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	05d2      	lsls	r2, r2, #23
 8007148:	f53f af6e 	bmi.w	8007028 <HAL_DMA_IRQHandler+0x2a4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	f022 0208 	bic.w	r2, r2, #8
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	e768      	b.n	8007028 <HAL_DMA_IRQHandler+0x2a4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800715c:	e7c8      	b.n	80070f0 <HAL_DMA_IRQHandler+0x36c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800715e:	0355      	lsls	r5, r2, #13
 8007160:	d54d      	bpl.n	80071fe <HAL_DMA_IRQHandler+0x47a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	0318      	lsls	r0, r3, #12
 8007166:	d457      	bmi.n	8007218 <HAL_DMA_IRQHandler+0x494>
            if(hdma->XferM1CpltCallback != NULL)
 8007168:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 800716a:	b10b      	cbz	r3, 8007170 <HAL_DMA_IRQHandler+0x3ec>
            hdma->XferCpltCallback(hdma);
 800716c:	4620      	mov	r0, r4
 800716e:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007170:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007172:	2b00      	cmp	r3, #0
 8007174:	d06e      	beq.n	8007254 <HAL_DMA_IRQHandler+0x4d0>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007176:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007178:	07d9      	lsls	r1, r3, #31
 800717a:	d53e      	bpl.n	80071fa <HAL_DMA_IRQHandler+0x476>
        hdma->State = HAL_DMA_STATE_ABORT;
 800717c:	2304      	movs	r3, #4
 800717e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	42b3      	cmp	r3, r6
 8007186:	d01e      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x442>
 8007188:	4a50      	ldr	r2, [pc, #320]	; (80072cc <HAL_DMA_IRQHandler+0x548>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d01b      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x442>
 800718e:	3218      	adds	r2, #24
 8007190:	4293      	cmp	r3, r2
 8007192:	d018      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x442>
 8007194:	3218      	adds	r2, #24
 8007196:	4293      	cmp	r3, r2
 8007198:	d015      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x442>
 800719a:	3218      	adds	r2, #24
 800719c:	4293      	cmp	r3, r2
 800719e:	d012      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x442>
 80071a0:	3218      	adds	r2, #24
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00f      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x442>
 80071a6:	3218      	adds	r2, #24
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00c      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x442>
 80071ac:	3218      	adds	r2, #24
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d009      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x442>
 80071b2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d005      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x442>
 80071ba:	3218      	adds	r2, #24
 80071bc:	4293      	cmp	r3, r2
 80071be:	d002      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x442>
 80071c0:	3218      	adds	r2, #24
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d0ff      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x442>
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	f022 0201 	bic.w	r2, r2, #1
 80071cc:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80071ce:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80071d2:	fbb7 f7f2 	udiv	r7, r7, r2
          if (++count > timeout)
 80071d6:	9a01      	ldr	r2, [sp, #4]
 80071d8:	3201      	adds	r2, #1
 80071da:	42ba      	cmp	r2, r7
 80071dc:	9201      	str	r2, [sp, #4]
 80071de:	d802      	bhi.n	80071e6 <HAL_DMA_IRQHandler+0x462>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	07d2      	lsls	r2, r2, #31
 80071e4:	d4f7      	bmi.n	80071d6 <HAL_DMA_IRQHandler+0x452>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80071e6:	681b      	ldr	r3, [r3, #0]
        __HAL_UNLOCK(hdma);
 80071e8:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80071ea:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 80071ec:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 80071f0:	bf4c      	ite	mi
 80071f2:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80071f4:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 80071f6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 80071fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80071fc:	e79a      	b.n	8007134 <HAL_DMA_IRQHandler+0x3b0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8007204:	d108      	bne.n	8007218 <HAL_DMA_IRQHandler+0x494>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007206:	6819      	ldr	r1, [r3, #0]
 8007208:	f021 0110 	bic.w	r1, r1, #16
 800720c:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800720e:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8007210:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8007214:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8007218:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800721a:	e7a6      	b.n	800716a <HAL_DMA_IRQHandler+0x3e6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800721c:	4a2c      	ldr	r2, [pc, #176]	; (80072d0 <HAL_DMA_IRQHandler+0x54c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	f43f adf2 	beq.w	8006e08 <HAL_DMA_IRQHandler+0x84>
 8007224:	3214      	adds	r2, #20
 8007226:	4293      	cmp	r3, r2
 8007228:	f43f adee 	beq.w	8006e08 <HAL_DMA_IRQHandler+0x84>
 800722c:	3214      	adds	r2, #20
 800722e:	4293      	cmp	r3, r2
 8007230:	f43f adea 	beq.w	8006e08 <HAL_DMA_IRQHandler+0x84>
 8007234:	3214      	adds	r2, #20
 8007236:	4293      	cmp	r3, r2
 8007238:	f43f ade6 	beq.w	8006e08 <HAL_DMA_IRQHandler+0x84>
 800723c:	3214      	adds	r2, #20
 800723e:	4293      	cmp	r3, r2
 8007240:	f43f ade2 	beq.w	8006e08 <HAL_DMA_IRQHandler+0x84>
 8007244:	3214      	adds	r2, #20
 8007246:	4293      	cmp	r3, r2
 8007248:	f43f adde 	beq.w	8006e08 <HAL_DMA_IRQHandler+0x84>
 800724c:	3214      	adds	r2, #20
 800724e:	4293      	cmp	r3, r2
 8007250:	f43f adda 	beq.w	8006e08 <HAL_DMA_IRQHandler+0x84>
}
 8007254:	b002      	add	sp, #8
 8007256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800725a:	0697      	lsls	r7, r2, #26
 800725c:	d403      	bmi.n	8007266 <HAL_DMA_IRQHandler+0x4e2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	f022 0204 	bic.w	r2, r2, #4
 8007264:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8007266:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007268:	e764      	b.n	8007134 <HAL_DMA_IRQHandler+0x3b0>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800726a:	2002      	movs	r0, #2
 800726c:	4088      	lsls	r0, r1
 800726e:	ea10 0f0c 	tst.w	r0, ip
 8007272:	d016      	beq.n	80072a2 <HAL_DMA_IRQHandler+0x51e>
 8007274:	0796      	lsls	r6, r2, #30
 8007276:	d514      	bpl.n	80072a2 <HAL_DMA_IRQHandler+0x51e>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007278:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800727a:	0410      	lsls	r0, r2, #16
 800727c:	d503      	bpl.n	8007286 <HAL_DMA_IRQHandler+0x502>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800727e:	03d1      	lsls	r1, r2, #15
 8007280:	d40d      	bmi.n	800729e <HAL_DMA_IRQHandler+0x51a>
          if(hdma->XferM1CpltCallback != NULL)
 8007282:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007284:	e756      	b.n	8007134 <HAL_DMA_IRQHandler+0x3b0>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007286:	f012 0220 	ands.w	r2, r2, #32
 800728a:	d108      	bne.n	800729e <HAL_DMA_IRQHandler+0x51a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800728c:	6819      	ldr	r1, [r3, #0]
 800728e:	f021 010a 	bic.w	r1, r1, #10
 8007292:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007294:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8007296:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800729a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800729e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80072a0:	e748      	b.n	8007134 <HAL_DMA_IRQHandler+0x3b0>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80072a2:	2008      	movs	r0, #8
 80072a4:	4088      	lsls	r0, r1
 80072a6:	ea10 0f0c 	tst.w	r0, ip
 80072aa:	d0d3      	beq.n	8007254 <HAL_DMA_IRQHandler+0x4d0>
 80072ac:	0712      	lsls	r2, r2, #28
 80072ae:	d5d1      	bpl.n	8007254 <HAL_DMA_IRQHandler+0x4d0>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	f022 020e 	bic.w	r2, r2, #14
 80072b6:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80072b8:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80072ba:	2200      	movs	r2, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80072bc:	fa03 f101 	lsl.w	r1, r3, r1
 80072c0:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072c2:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80072c4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 80072c8:	e795      	b.n	80071f6 <HAL_DMA_IRQHandler+0x472>
 80072ca:	bf00      	nop
 80072cc:	40020028 	.word	0x40020028
 80072d0:	5802541c 	.word	0x5802541c

080072d4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80072d4:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80072d6:	4770      	bx	lr

080072d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072dc:	680b      	ldr	r3, [r1, #0]
{
 80072de:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80074a4 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072e4:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072e8:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80072ea:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 80072ec:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80074a8 <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072f0:	9a01      	ldr	r2, [sp, #4]
 80072f2:	40da      	lsrs	r2, r3
 80072f4:	d102      	bne.n	80072fc <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 80072f6:	b005      	add	sp, #20
 80072f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80072fc:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 80072fe:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007300:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8007302:	ea17 0502 	ands.w	r5, r7, r2
 8007306:	f000 80b6 	beq.w	8007476 <HAL_GPIO_Init+0x19e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800730a:	684a      	ldr	r2, [r1, #4]
 800730c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8007310:	2403      	movs	r4, #3
 8007312:	f022 0a10 	bic.w	sl, r2, #16
 8007316:	fa04 f40e 	lsl.w	r4, r4, lr
 800731a:	f10a 36ff 	add.w	r6, sl, #4294967295
 800731e:	43e4      	mvns	r4, r4
 8007320:	2e01      	cmp	r6, #1
 8007322:	d810      	bhi.n	8007346 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8007324:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007326:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800732a:	68ce      	ldr	r6, [r1, #12]
 800732c:	fa06 f60e 	lsl.w	r6, r6, lr
 8007330:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8007334:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8007336:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007338:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800733c:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8007340:	409e      	lsls	r6, r3
 8007342:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8007344:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007346:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007348:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800734c:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800734e:	ea07 0704 	and.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007352:	fa06 f60e 	lsl.w	r6, r6, lr
 8007356:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 800735a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800735c:	d114      	bne.n	8007388 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3U];
 800735e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007362:	f003 0b07 	and.w	fp, r3, #7
 8007366:	270f      	movs	r7, #15
 8007368:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800736c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8007370:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007374:	fa07 f70b 	lsl.w	r7, r7, fp
 8007378:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800737c:	690e      	ldr	r6, [r1, #16]
 800737e:	fa06 f60b 	lsl.w	r6, r6, fp
 8007382:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8007384:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 8007388:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800738a:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800738c:	f002 0603 	and.w	r6, r2, #3
 8007390:	fa06 fe0e 	lsl.w	lr, r6, lr
 8007394:	ea4e 0404 	orr.w	r4, lr, r4
      GPIOx->MODER = temp;
 8007398:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800739a:	00d4      	lsls	r4, r2, #3
 800739c:	d56b      	bpl.n	8007476 <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800739e:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80073a2:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073a6:	f003 0703 	and.w	r7, r3, #3
 80073aa:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073ae:	f044 0402 	orr.w	r4, r4, #2
 80073b2:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073b6:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073b8:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 80073bc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80073c0:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80073c4:	f004 0402 	and.w	r4, r4, #2
 80073c8:	9403      	str	r4, [sp, #12]
 80073ca:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073cc:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 80073d0:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80073d4:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80073d8:	4c31      	ldr	r4, [pc, #196]	; (80074a0 <HAL_GPIO_Init+0x1c8>)
 80073da:	42a0      	cmp	r0, r4
 80073dc:	d04d      	beq.n	800747a <HAL_GPIO_Init+0x1a2>
 80073de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073e2:	42a0      	cmp	r0, r4
 80073e4:	d04b      	beq.n	800747e <HAL_GPIO_Init+0x1a6>
 80073e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073ea:	42a0      	cmp	r0, r4
 80073ec:	d049      	beq.n	8007482 <HAL_GPIO_Init+0x1aa>
 80073ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073f2:	42a0      	cmp	r0, r4
 80073f4:	d047      	beq.n	8007486 <HAL_GPIO_Init+0x1ae>
 80073f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80073fa:	42a0      	cmp	r0, r4
 80073fc:	d045      	beq.n	800748a <HAL_GPIO_Init+0x1b2>
 80073fe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007402:	42a0      	cmp	r0, r4
 8007404:	d043      	beq.n	800748e <HAL_GPIO_Init+0x1b6>
 8007406:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800740a:	42a0      	cmp	r0, r4
 800740c:	d041      	beq.n	8007492 <HAL_GPIO_Init+0x1ba>
 800740e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007412:	42a0      	cmp	r0, r4
 8007414:	d03f      	beq.n	8007496 <HAL_GPIO_Init+0x1be>
 8007416:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800741a:	42a0      	cmp	r0, r4
 800741c:	d03d      	beq.n	800749a <HAL_GPIO_Init+0x1c2>
 800741e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007422:	42a0      	cmp	r0, r4
 8007424:	bf14      	ite	ne
 8007426:	240a      	movne	r4, #10
 8007428:	2409      	moveq	r4, #9
 800742a:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800742c:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800742e:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007432:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8007434:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 8007438:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 800743c:	bf54      	ite	pl
 800743e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007440:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007442:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8007444:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8007448:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 800744c:	bf54      	ite	pl
 800744e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007450:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007452:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8007454:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8007458:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 800745c:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8007460:	bf54      	ite	pl
 8007462:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007464:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007466:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8007468:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 800746a:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 800746c:	bf54      	ite	pl
 800746e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8007470:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8007472:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8007476:	3301      	adds	r3, #1
 8007478:	e73a      	b.n	80072f0 <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800747a:	2400      	movs	r4, #0
 800747c:	e7d5      	b.n	800742a <HAL_GPIO_Init+0x152>
 800747e:	2401      	movs	r4, #1
 8007480:	e7d3      	b.n	800742a <HAL_GPIO_Init+0x152>
 8007482:	2402      	movs	r4, #2
 8007484:	e7d1      	b.n	800742a <HAL_GPIO_Init+0x152>
 8007486:	2403      	movs	r4, #3
 8007488:	e7cf      	b.n	800742a <HAL_GPIO_Init+0x152>
 800748a:	2404      	movs	r4, #4
 800748c:	e7cd      	b.n	800742a <HAL_GPIO_Init+0x152>
 800748e:	2405      	movs	r4, #5
 8007490:	e7cb      	b.n	800742a <HAL_GPIO_Init+0x152>
 8007492:	2406      	movs	r4, #6
 8007494:	e7c9      	b.n	800742a <HAL_GPIO_Init+0x152>
 8007496:	2407      	movs	r4, #7
 8007498:	e7c7      	b.n	800742a <HAL_GPIO_Init+0x152>
 800749a:	2408      	movs	r4, #8
 800749c:	e7c5      	b.n	800742a <HAL_GPIO_Init+0x152>
 800749e:	bf00      	nop
 80074a0:	58020000 	.word	0x58020000
 80074a4:	58024400 	.word	0x58024400
 80074a8:	58000080 	.word	0x58000080

080074ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80074ac:	6903      	ldr	r3, [r0, #16]
 80074ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80074b0:	bf14      	ite	ne
 80074b2:	2001      	movne	r0, #1
 80074b4:	2000      	moveq	r0, #0
 80074b6:	4770      	bx	lr

080074b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074b8:	b10a      	cbz	r2, 80074be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80074ba:	6181      	str	r1, [r0, #24]
  }
}
 80074bc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80074be:	0409      	lsls	r1, r1, #16
 80074c0:	e7fb      	b.n	80074ba <HAL_GPIO_WritePin+0x2>

080074c2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80074c2:	6943      	ldr	r3, [r0, #20]
 80074c4:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80074c8:	bf08      	it	eq
 80074ca:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80074cc:	6181      	str	r1, [r0, #24]
  }
}
 80074ce:	4770      	bx	lr

080074d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80074d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80074d2:	4604      	mov	r4, r0
{
 80074d4:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80074d6:	b360      	cbz	r0, 8007532 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80074d8:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 80074dc:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80074de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80074e2:	b91b      	cbnz	r3, 80074ec <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80074e4:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80074e8:	f00a ff0c 	bl	8012304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80074ec:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074ee:	466e      	mov	r6, sp
 80074f0:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80074f2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80074f6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 80074f8:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80074fa:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 80074fe:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8007502:	bf08      	it	eq
 8007504:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8007506:	f005 fc31 	bl	800cd6c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800750a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800750c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800750e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007510:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007512:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007516:	4625      	mov	r5, r4
 8007518:	e886 0003 	stmia.w	r6, {r0, r1}
 800751c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8007520:	f855 0b10 	ldr.w	r0, [r5], #16
 8007524:	f005 fb66 	bl	800cbf4 <USB_CoreInit>
 8007528:	4606      	mov	r6, r0
 800752a:	b120      	cbz	r0, 8007536 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800752c:	2302      	movs	r3, #2
 800752e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8007532:	2501      	movs	r5, #1
 8007534:	e054      	b.n	80075e0 <HAL_PCD_Init+0x110>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007536:	4601      	mov	r1, r0
 8007538:	6820      	ldr	r0, [r4, #0]
 800753a:	f005 fc1d 	bl	800cd78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800753e:	4630      	mov	r0, r6
 8007540:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007544:	261c      	movs	r6, #28
 8007546:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800754a:	4601      	mov	r1, r0
 800754c:	b2c2      	uxtb	r2, r0
 800754e:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007550:	4594      	cmp	ip, r2
 8007552:	d81b      	bhi.n	800758c <HAL_PCD_Init+0xbc>
 8007554:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007556:	261c      	movs	r6, #28
 8007558:	4619      	mov	r1, r3
 800755a:	b2d8      	uxtb	r0, r3
 800755c:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800755e:	4584      	cmp	ip, r0
 8007560:	d822      	bhi.n	80075a8 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007562:	466e      	mov	r6, sp
 8007564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007566:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800756a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800756c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007570:	e886 0003 	stmia.w	r6, {r0, r1}
 8007574:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8007578:	6820      	ldr	r0, [r4, #0]
 800757a:	f005 fc3f 	bl	800cdfc <USB_DevInit>
 800757e:	2301      	movs	r3, #1
 8007580:	4605      	mov	r5, r0
 8007582:	b300      	cbz	r0, 80075c6 <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007584:	2202      	movs	r2, #2
 8007586:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 800758a:	e7d2      	b.n	8007532 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 800758c:	fb06 4302 	mla	r3, r6, r2, r4
 8007590:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007598:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800759c:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 80075a0:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 80075a2:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
 80075a6:	e7d1      	b.n	800754c <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80075a8:	fb06 4200 	mla	r2, r6, r0, r4
 80075ac:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80075b0:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80075b4:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80075b8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80075bc:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80075c0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 80075c4:	e7c9      	b.n	800755a <HAL_PCD_Init+0x8a>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80075c6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80075ca:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80075ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d102      	bne.n	80075da <HAL_PCD_Init+0x10a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fc58 	bl	8007e8a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80075da:	6820      	ldr	r0, [r4, #0]
 80075dc:	f005 ff40 	bl	800d460 <USB_DevDisconnect>

  return HAL_OK;
}
 80075e0:	4628      	mov	r0, r5
 80075e2:	b00b      	add	sp, #44	; 0x2c
 80075e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075e6 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80075e6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80075ea:	2b01      	cmp	r3, #1
{
 80075ec:	b510      	push	{r4, lr}
 80075ee:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80075f0:	d016      	beq.n	8007620 <HAL_PCD_Start+0x3a>
 80075f2:	2301      	movs	r3, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075f4:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80075f6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80075fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d106      	bne.n	800760e <HAL_PCD_Start+0x28>
 8007600:	69a3      	ldr	r3, [r4, #24]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d003      	beq.n	800760e <HAL_PCD_Start+0x28>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007606:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800760c:	6383      	str	r3, [r0, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800760e:	f005 ff1b 	bl	800d448 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007612:	6820      	ldr	r0, [r4, #0]
 8007614:	f005 fba4 	bl	800cd60 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007618:	2000      	movs	r0, #0
 800761a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 800761e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007620:	2002      	movs	r0, #2
 8007622:	e7fc      	b.n	800761e <HAL_PCD_Start+0x38>

08007624 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007628:	6805      	ldr	r5, [r0, #0]
{
 800762a:	b087      	sub	sp, #28
 800762c:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800762e:	4628      	mov	r0, r5
 8007630:	f005 ff51 	bl	800d4d6 <USB_GetMode>
 8007634:	9002      	str	r0, [sp, #8]
 8007636:	2800      	cmp	r0, #0
 8007638:	f040 813a 	bne.w	80078b0 <HAL_PCD_IRQHandler+0x28c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	f005 ff1b 	bl	800d478 <USB_ReadInterrupts>
 8007642:	2800      	cmp	r0, #0
 8007644:	f000 8134 	beq.w	80078b0 <HAL_PCD_IRQHandler+0x28c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007648:	6820      	ldr	r0, [r4, #0]
 800764a:	f005 ff15 	bl	800d478 <USB_ReadInterrupts>
 800764e:	0782      	lsls	r2, r0, #30
 8007650:	d504      	bpl.n	800765c <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007652:	6822      	ldr	r2, [r4, #0]
 8007654:	6953      	ldr	r3, [r2, #20]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	6153      	str	r3, [r2, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800765c:	6820      	ldr	r0, [r4, #0]
 800765e:	f005 ff0b 	bl	800d478 <USB_ReadInterrupts>
 8007662:	06c3      	lsls	r3, r0, #27
 8007664:	d52a      	bpl.n	80076bc <HAL_PCD_IRQHandler+0x98>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007666:	6822      	ldr	r2, [r4, #0]
 8007668:	6993      	ldr	r3, [r2, #24]
 800766a:	f023 0310 	bic.w	r3, r3, #16
 800766e:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8007670:	6a2e      	ldr	r6, [r5, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007672:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007676:	f006 080f 	and.w	r8, r6, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800767a:	2b02      	cmp	r3, #2
 800767c:	f040 811b 	bne.w	80078b6 <HAL_PCD_IRQHandler+0x292>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007680:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007684:	421e      	tst	r6, r3
 8007686:	d014      	beq.n	80076b2 <HAL_PCD_IRQHandler+0x8e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007688:	271c      	movs	r7, #28
 800768a:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800768e:	4628      	mov	r0, r5
 8007690:	fb07 4708 	mla	r7, r7, r8, r4
 8007694:	4632      	mov	r2, r6
 8007696:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 800769a:	f005 fe63 	bl	800d364 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800769e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80076a2:	4433      	add	r3, r6
 80076a4:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80076a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80076ac:	441e      	add	r6, r3
 80076ae:	f8c7 6214 	str.w	r6, [r7, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80076b2:	6822      	ldr	r2, [r4, #0]
 80076b4:	6993      	ldr	r3, [r2, #24]
 80076b6:	f043 0310 	orr.w	r3, r3, #16
 80076ba:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80076bc:	6820      	ldr	r0, [r4, #0]
 80076be:	f005 fedb 	bl	800d478 <USB_ReadInterrupts>
 80076c2:	0307      	lsls	r7, r0, #12
 80076c4:	f100 8106 	bmi.w	80078d4 <HAL_PCD_IRQHandler+0x2b0>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	f005 fed5 	bl	800d478 <USB_ReadInterrupts>
 80076ce:	0346      	lsls	r6, r0, #13
 80076d0:	d50b      	bpl.n	80076ea <HAL_PCD_IRQHandler+0xc6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80076d2:	6820      	ldr	r0, [r4, #0]
 80076d4:	4626      	mov	r6, r4
 80076d6:	f005 fedb 	bl	800d490 <USB_ReadDevAllInEpInterrupt>

      epnum = 0U;
 80076da:	2700      	movs	r7, #0
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80076dc:	4682      	mov	sl, r0
 80076de:	f505 6910 	add.w	r9, r5, #2304	; 0x900

      while (ep_intr != 0U)
 80076e2:	f1ba 0f00 	cmp.w	sl, #0
 80076e6:	f040 81a3 	bne.w	8007a30 <HAL_PCD_IRQHandler+0x40c>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80076ea:	6820      	ldr	r0, [r4, #0]
 80076ec:	f005 fec4 	bl	800d478 <USB_ReadInterrupts>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	da15      	bge.n	8007720 <HAL_PCD_IRQHandler+0xfc>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80076f4:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8007700:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8007704:	2b01      	cmp	r3, #1
 8007706:	f040 822e 	bne.w	8007b66 <HAL_PCD_IRQHandler+0x542>
      {
        hpcd->LPM_State = LPM_L0;
 800770a:	2100      	movs	r1, #0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800770c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800770e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007712:	f000 fbcd 	bl	8007eb0 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007716:	6822      	ldr	r2, [r4, #0]
 8007718:	6953      	ldr	r3, [r2, #20]
 800771a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800771e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	f005 fea9 	bl	800d478 <USB_ReadInterrupts>
 8007726:	0500      	lsls	r0, r0, #20
 8007728:	d50b      	bpl.n	8007742 <HAL_PCD_IRQHandler+0x11e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800772a:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 800772e:	07d9      	lsls	r1, r3, #31
 8007730:	d502      	bpl.n	8007738 <HAL_PCD_IRQHandler+0x114>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007732:	4620      	mov	r0, r4
 8007734:	f00a fe54 	bl	80123e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007738:	6822      	ldr	r2, [r4, #0]
 800773a:	6953      	ldr	r3, [r2, #20]
 800773c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007740:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007742:	6820      	ldr	r0, [r4, #0]
 8007744:	f005 fe98 	bl	800d478 <USB_ReadInterrupts>
 8007748:	0102      	lsls	r2, r0, #4
 800774a:	d514      	bpl.n	8007776 <HAL_PCD_IRQHandler+0x152>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	695a      	ldr	r2, [r3, #20]
 8007750:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007754:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007756:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 800775a:	2a00      	cmp	r2, #0
 800775c:	f040 8207 	bne.w	8007b6e <HAL_PCD_IRQHandler+0x54a>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8007762:	2101      	movs	r1, #1

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007764:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007766:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800776a:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800776e:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007772:	f000 fb9d 	bl	8007eb0 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007776:	6820      	ldr	r0, [r4, #0]
 8007778:	f005 fe7e 	bl	800d478 <USB_ReadInterrupts>
 800777c:	04c3      	lsls	r3, r0, #19
 800777e:	d535      	bpl.n	80077ec <HAL_PCD_IRQHandler+0x1c8>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007780:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 8007784:	6873      	ldr	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007786:	2110      	movs	r1, #16
 8007788:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800778a:	f023 0301 	bic.w	r3, r3, #1
 800778e:	6073      	str	r3, [r6, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007790:	f005 fb0a 	bl	800cda8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007794:	6860      	ldr	r0, [r4, #4]
 8007796:	f505 6310 	add.w	r3, r5, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800779a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800779e:	9a02      	ldr	r2, [sp, #8]
 80077a0:	4290      	cmp	r0, r2
 80077a2:	f040 81e8 	bne.w	8007b76 <HAL_PCD_IRQHandler+0x552>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80077a6:	69f3      	ldr	r3, [r6, #28]
 80077a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80077ac:	61f3      	str	r3, [r6, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80077ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 8200 	beq.w	8007bb6 <HAL_PCD_IRQHandler+0x592>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80077b6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80077ba:	f043 030b 	orr.w	r3, r3, #11
 80077be:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80077c2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80077c4:	f043 030b 	orr.w	r3, r3, #11
 80077c8:	6473      	str	r3, [r6, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80077ca:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077ce:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80077d2:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80077d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077d8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80077da:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077de:	f005 fe8f 	bl	800d500 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80077e2:	6822      	ldr	r2, [r4, #0]
 80077e4:	6953      	ldr	r3, [r2, #20]
 80077e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077ea:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80077ec:	6820      	ldr	r0, [r4, #0]
 80077ee:	f005 fe43 	bl	800d478 <USB_ReadInterrupts>
 80077f2:	0487      	lsls	r7, r0, #18
 80077f4:	d516      	bpl.n	8007824 <HAL_PCD_IRQHandler+0x200>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80077f6:	6820      	ldr	r0, [r4, #0]
 80077f8:	f005 fe71 	bl	800d4de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80077fc:	6820      	ldr	r0, [r4, #0]
 80077fe:	f005 fbb5 	bl	800cf6c <USB_GetDevSpeed>

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007802:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007804:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007806:	f000 ffd7 	bl	80087b8 <HAL_RCC_GetHCLKFreq>
 800780a:	7b22      	ldrb	r2, [r4, #12]
 800780c:	4601      	mov	r1, r0
 800780e:	4628      	mov	r0, r5
 8007810:	f005 fa32 	bl	800cc78 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007814:	4620      	mov	r0, r4
 8007816:	f00a fdd0 	bl	80123ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800781a:	6822      	ldr	r2, [r4, #0]
 800781c:	6953      	ldr	r3, [r2, #20]
 800781e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007822:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007824:	6820      	ldr	r0, [r4, #0]
 8007826:	f005 fe27 	bl	800d478 <USB_ReadInterrupts>
 800782a:	0706      	lsls	r6, r0, #28
 800782c:	d507      	bpl.n	800783e <HAL_PCD_IRQHandler+0x21a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800782e:	4620      	mov	r0, r4
 8007830:	f00a fdbf 	bl	80123b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007834:	6822      	ldr	r2, [r4, #0]
 8007836:	6953      	ldr	r3, [r2, #20]
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800783e:	6820      	ldr	r0, [r4, #0]
 8007840:	f005 fe1a 	bl	800d478 <USB_ReadInterrupts>
 8007844:	02c5      	lsls	r5, r0, #11
 8007846:	d508      	bpl.n	800785a <HAL_PCD_IRQHandler+0x236>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007848:	2100      	movs	r1, #0
 800784a:	4620      	mov	r0, r4
 800784c:	f00a fde8 	bl	8012420 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007850:	6822      	ldr	r2, [r4, #0]
 8007852:	6953      	ldr	r3, [r2, #20]
 8007854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007858:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800785a:	6820      	ldr	r0, [r4, #0]
 800785c:	f005 fe0c 	bl	800d478 <USB_ReadInterrupts>
 8007860:	0280      	lsls	r0, r0, #10
 8007862:	d508      	bpl.n	8007876 <HAL_PCD_IRQHandler+0x252>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007864:	2100      	movs	r1, #0
 8007866:	4620      	mov	r0, r4
 8007868:	f00a fdd6 	bl	8012418 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800786c:	6822      	ldr	r2, [r4, #0]
 800786e:	6953      	ldr	r3, [r2, #20]
 8007870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007874:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007876:	6820      	ldr	r0, [r4, #0]
 8007878:	f005 fdfe 	bl	800d478 <USB_ReadInterrupts>
 800787c:	0041      	lsls	r1, r0, #1
 800787e:	d507      	bpl.n	8007890 <HAL_PCD_IRQHandler+0x26c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007880:	4620      	mov	r0, r4
 8007882:	f00a fdd1 	bl	8012428 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007886:	6822      	ldr	r2, [r4, #0]
 8007888:	6953      	ldr	r3, [r2, #20]
 800788a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800788e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007890:	6820      	ldr	r0, [r4, #0]
 8007892:	f005 fdf1 	bl	800d478 <USB_ReadInterrupts>
 8007896:	0742      	lsls	r2, r0, #29
 8007898:	d50a      	bpl.n	80078b0 <HAL_PCD_IRQHandler+0x28c>
    {
      temp = hpcd->Instance->GOTGINT;
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800789e:	076b      	lsls	r3, r5, #29
 80078a0:	d502      	bpl.n	80078a8 <HAL_PCD_IRQHandler+0x284>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80078a2:	4620      	mov	r0, r4
 80078a4:	f00a fdc4 	bl	8012430 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80078a8:	6822      	ldr	r2, [r4, #0]
 80078aa:	6853      	ldr	r3, [r2, #4]
 80078ac:	432b      	orrs	r3, r5
 80078ae:	6053      	str	r3, [r2, #4]
    }
  }
}
 80078b0:	b007      	add	sp, #28
 80078b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80078b6:	2b06      	cmp	r3, #6
 80078b8:	f47f aefb 	bne.w	80076b2 <HAL_PCD_IRQHandler+0x8e>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078bc:	271c      	movs	r7, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80078be:	2208      	movs	r2, #8
 80078c0:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80078c4:	4628      	mov	r0, r5
 80078c6:	f005 fd4d 	bl	800d364 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078ca:	fb07 4708 	mla	r7, r7, r8, r4
 80078ce:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80078d2:	e6e9      	b.n	80076a8 <HAL_PCD_IRQHandler+0x84>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80078d4:	6820      	ldr	r0, [r4, #0]
      epnum = 0U;
 80078d6:	2600      	movs	r6, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80078d8:	f005 fdd2 	bl	800d480 <USB_ReadDevAllOutEpInterrupt>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078dc:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 8007bcc <HAL_PCD_IRQHandler+0x5a8>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80078e0:	4680      	mov	r8, r0
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80078e2:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 8007bd0 <HAL_PCD_IRQHandler+0x5ac>
      while (ep_intr != 0U)
 80078e6:	f1b8 0f00 	cmp.w	r8, #0
 80078ea:	f43f aeed 	beq.w	80076c8 <HAL_PCD_IRQHandler+0xa4>
        if ((ep_intr & 0x1U) != 0U)
 80078ee:	f018 0f01 	tst.w	r8, #1
 80078f2:	d061      	beq.n	80079b8 <HAL_PCD_IRQHandler+0x394>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80078f4:	fa5f fa86 	uxtb.w	sl, r6
 80078f8:	6820      	ldr	r0, [r4, #0]
 80078fa:	4651      	mov	r1, sl
 80078fc:	f005 fdd0 	bl	800d4a0 <USB_ReadDevOutEPInterrupt>
 8007900:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007902:	07f8      	lsls	r0, r7, #31
 8007904:	d51c      	bpl.n	8007940 <HAL_PCD_IRQHandler+0x31c>
 8007906:	0173      	lsls	r3, r6, #5
 8007908:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800790c:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800790e:	6820      	ldr	r0, [r4, #0]
 8007910:	441a      	add	r2, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007912:	6091      	str	r1, [r2, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007914:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8007918:	6921      	ldr	r1, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800791a:	4413      	add	r3, r2
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800791c:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  if (hpcd->Init.dma_enable == 1U)
 8007920:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007922:	689a      	ldr	r2, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8007924:	d16d      	bne.n	8007a02 <HAL_PCD_IRQHandler+0x3de>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007926:	0711      	lsls	r1, r2, #28
 8007928:	d506      	bpl.n	8007938 <HAL_PCD_IRQHandler+0x314>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800792a:	45cc      	cmp	ip, r9
 800792c:	d908      	bls.n	8007940 <HAL_PCD_IRQHandler+0x31c>
 800792e:	0410      	lsls	r0, r2, #16
 8007930:	d506      	bpl.n	8007940 <HAL_PCD_IRQHandler+0x31c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007932:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007936:	e002      	b.n	800793e <HAL_PCD_IRQHandler+0x31a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007938:	0691      	lsls	r1, r2, #26
 800793a:	d541      	bpl.n	80079c0 <HAL_PCD_IRQHandler+0x39c>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800793c:	2220      	movs	r2, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800793e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007940:	0738      	lsls	r0, r7, #28
 8007942:	d520      	bpl.n	8007986 <HAL_PCD_IRQHandler+0x362>
 8007944:	0173      	lsls	r3, r6, #5
 8007946:	f505 6230 	add.w	r2, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800794a:	2108      	movs	r1, #8
 800794c:	441a      	add	r2, r3
 800794e:	6091      	str	r1, [r2, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007950:	6822      	ldr	r2, [r4, #0]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007952:	f8d2 a040 	ldr.w	sl, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800795a:	45ca      	cmp	sl, r9
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800795c:	4413      	add	r3, r2
 800795e:	689a      	ldr	r2, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007960:	d904      	bls.n	800796c <HAL_PCD_IRQHandler+0x348>
 8007962:	0411      	lsls	r1, r2, #16
 8007964:	d502      	bpl.n	800796c <HAL_PCD_IRQHandler+0x348>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007966:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800796a:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800796c:	4620      	mov	r0, r4
 800796e:	f00a fd09 	bl	8012384 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007972:	45ca      	cmp	sl, r9
 8007974:	d907      	bls.n	8007986 <HAL_PCD_IRQHandler+0x362>
 8007976:	6921      	ldr	r1, [r4, #16]
 8007978:	2901      	cmp	r1, #1
 800797a:	d104      	bne.n	8007986 <HAL_PCD_IRQHandler+0x362>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800797c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007980:	6820      	ldr	r0, [r4, #0]
 8007982:	f005 fdbd 	bl	800d500 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007986:	06fa      	lsls	r2, r7, #27
 8007988:	d505      	bpl.n	8007996 <HAL_PCD_IRQHandler+0x372>
 800798a:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800798e:	2210      	movs	r2, #16
 8007990:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8007994:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007996:	06bb      	lsls	r3, r7, #26
 8007998:	d505      	bpl.n	80079a6 <HAL_PCD_IRQHandler+0x382>
 800799a:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800799e:	2220      	movs	r2, #32
 80079a0:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 80079a4:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80079a6:	04bf      	lsls	r7, r7, #18
 80079a8:	d506      	bpl.n	80079b8 <HAL_PCD_IRQHandler+0x394>
 80079aa:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80079ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80079b2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 80079b6:	609a      	str	r2, [r3, #8]
        epnum++;
 80079b8:	3601      	adds	r6, #1
        ep_intr >>= 1U;
 80079ba:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80079be:	e792      	b.n	80078e6 <HAL_PCD_IRQHandler+0x2c2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80079c0:	f012 0f28 	tst.w	r2, #40	; 0x28
 80079c4:	d1bc      	bne.n	8007940 <HAL_PCD_IRQHandler+0x31c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079c6:	45cc      	cmp	ip, r9
 80079c8:	d901      	bls.n	80079ce <HAL_PCD_IRQHandler+0x3aa>
 80079ca:	0412      	lsls	r2, r2, #16
 80079cc:	d4b1      	bmi.n	8007932 <HAL_PCD_IRQHandler+0x30e>
 80079ce:	221c      	movs	r2, #28
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	fb02 4206 	mla	r2, r2, r6, r4
 80079d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80079da:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80079de:	1acb      	subs	r3, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80079e0:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80079e4:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 80079e8:	4419      	add	r1, r3
 80079ea:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80079ee:	b986      	cbnz	r6, 8007a12 <HAL_PCD_IRQHandler+0x3ee>
 80079f0:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80079f4:	b96b      	cbnz	r3, 8007a12 <HAL_PCD_IRQHandler+0x3ee>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079f6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80079fa:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80079fc:	f005 fd80 	bl	800d500 <USB_EP0_OutStart>
 8007a00:	e007      	b.n	8007a12 <HAL_PCD_IRQHandler+0x3ee>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007a02:	45dc      	cmp	ip, fp
 8007a04:	d10a      	bne.n	8007a1c <HAL_PCD_IRQHandler+0x3f8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007a06:	0411      	lsls	r1, r2, #16
 8007a08:	d493      	bmi.n	8007932 <HAL_PCD_IRQHandler+0x30e>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a0a:	0692      	lsls	r2, r2, #26
 8007a0c:	d501      	bpl.n	8007a12 <HAL_PCD_IRQHandler+0x3ee>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a0e:	2220      	movs	r2, #32
 8007a10:	609a      	str	r2, [r3, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a12:	4651      	mov	r1, sl
 8007a14:	4620      	mov	r0, r4
 8007a16:	f00a fcbb 	bl	8012390 <HAL_PCD_DataOutStageCallback>
 8007a1a:	e791      	b.n	8007940 <HAL_PCD_IRQHandler+0x31c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007a1c:	2e00      	cmp	r6, #0
 8007a1e:	d1f8      	bne.n	8007a12 <HAL_PCD_IRQHandler+0x3ee>
 8007a20:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1f4      	bne.n	8007a12 <HAL_PCD_IRQHandler+0x3ee>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007a28:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	e7e5      	b.n	80079fc <HAL_PCD_IRQHandler+0x3d8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007a30:	f01a 0f01 	tst.w	sl, #1
 8007a34:	d074      	beq.n	8007b20 <HAL_PCD_IRQHandler+0x4fc>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a36:	fa5f fb87 	uxtb.w	fp, r7
 8007a3a:	6820      	ldr	r0, [r4, #0]
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	f005 fd38 	bl	800d4b2 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007a42:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a46:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007a48:	d020      	beq.n	8007a8c <HAL_PCD_IRQHandler+0x468>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	f007 020f 	and.w	r2, r7, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a50:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007a54:	fa00 f202 	lsl.w	r2, r0, r2
            if (hpcd->Init.dma_enable == 1U)
 8007a58:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a5a:	ea23 0302 	bic.w	r3, r3, r2
            if (hpcd->Init.dma_enable == 1U)
 8007a5e:	4281      	cmp	r1, r0
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a60:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
 8007a64:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007a68:	6098      	str	r0, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 8007a6a:	d10b      	bne.n	8007a84 <HAL_PCD_IRQHandler+0x460>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007a6c:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 8007a70:	4413      	add	r3, r2
 8007a72:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007a74:	b937      	cbnz	r7, 8007a84 <HAL_PCD_IRQHandler+0x460>
 8007a76:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007a78:	b923      	cbnz	r3, 8007a84 <HAL_PCD_IRQHandler+0x460>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a7a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007a7e:	6820      	ldr	r0, [r4, #0]
 8007a80:	f005 fd3e 	bl	800d500 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007a84:	4659      	mov	r1, fp
 8007a86:	4620      	mov	r0, r4
 8007a88:	f00a fc8b 	bl	80123a2 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007a8c:	f018 0f08 	tst.w	r8, #8
 8007a90:	d003      	beq.n	8007a9a <HAL_PCD_IRQHandler+0x476>
 8007a92:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007a96:	2208      	movs	r2, #8
 8007a98:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007a9a:	f018 0f10 	tst.w	r8, #16
 8007a9e:	d003      	beq.n	8007aa8 <HAL_PCD_IRQHandler+0x484>
 8007aa0:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007aa4:	2210      	movs	r2, #16
 8007aa6:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007aa8:	f018 0f40 	tst.w	r8, #64	; 0x40
 8007aac:	d003      	beq.n	8007ab6 <HAL_PCD_IRQHandler+0x492>
 8007aae:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007ab2:	2240      	movs	r2, #64	; 0x40
 8007ab4:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007ab6:	f018 0f02 	tst.w	r8, #2
 8007aba:	d003      	beq.n	8007ac4 <HAL_PCD_IRQHandler+0x4a0>
 8007abc:	eb09 1347 	add.w	r3, r9, r7, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007ac4:	f018 0f80 	tst.w	r8, #128	; 0x80
 8007ac8:	d02a      	beq.n	8007b20 <HAL_PCD_IRQHandler+0x4fc>
  if (ep->xfer_count > ep->xfer_len)
 8007aca:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d826      	bhi.n	8007b20 <HAL_PCD_IRQHandler+0x4fc>
  len = ep->xfer_len - ep->xfer_count;
 8007ad2:	1a9b      	subs	r3, r3, r2
  len32b = (len + 3U) / 4U;
 8007ad4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8007ad6:	6821      	ldr	r1, [r4, #0]
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	9103      	str	r1, [sp, #12]
 8007adc:	bf28      	it	cs
 8007ade:	4613      	movcs	r3, r2
 8007ae0:	3303      	adds	r3, #3
 8007ae2:	089b      	lsrs	r3, r3, #2
 8007ae4:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ae6:	f501 6310 	add.w	r3, r1, #2304	; 0x900
 8007aea:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 8007aee:	9305      	str	r3, [sp, #20]
 8007af0:	9b05      	ldr	r3, [sp, #20]
 8007af2:	9804      	ldr	r0, [sp, #16]
 8007af4:	6999      	ldr	r1, [r3, #24]
 8007af6:	b289      	uxth	r1, r1
 8007af8:	4281      	cmp	r1, r0
 8007afa:	e9d6 3214 	ldrd	r3, r2, [r6, #80]	; 0x50
 8007afe:	d214      	bcs.n	8007b2a <HAL_PCD_IRQHandler+0x506>
  if (ep->xfer_len <= ep->xfer_count)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d80d      	bhi.n	8007b20 <HAL_PCD_IRQHandler+0x4fc>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007b04:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007b06:	f007 020f 	and.w	r2, r7, #15
 8007b0a:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007b0c:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8007b10:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007b14:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007b18:	ea23 0302 	bic.w	r3, r3, r2
 8007b1c:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
        epnum++;
 8007b20:	3701      	adds	r7, #1
        ep_intr >>= 1U;
 8007b22:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 8007b26:	361c      	adds	r6, #28
 8007b28:	e5db      	b.n	80076e2 <HAL_PCD_IRQHandler+0xbe>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d9ea      	bls.n	8007b04 <HAL_PCD_IRQHandler+0x4e0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0e8      	beq.n	8007b04 <HAL_PCD_IRQHandler+0x4e0>
    len = ep->xfer_len - ep->xfer_count;
 8007b32:	eba3 0802 	sub.w	r8, r3, r2
 8007b36:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b38:	465a      	mov	r2, fp
 8007b3a:	9803      	ldr	r0, [sp, #12]
 8007b3c:	4598      	cmp	r8, r3
 8007b3e:	bf28      	it	cs
 8007b40:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
 8007b42:	f108 0303 	add.w	r3, r8, #3
 8007b46:	089b      	lsrs	r3, r3, #2
 8007b48:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b4a:	7c23      	ldrb	r3, [r4, #16]
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	fa1f f388 	uxth.w	r3, r8
 8007b52:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8007b54:	f005 fb1a 	bl	800d18c <USB_WritePacket>
    ep->xfer_buff  += len;
 8007b58:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8007b5a:	4443      	add	r3, r8
 8007b5c:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8007b5e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8007b60:	4443      	add	r3, r8
 8007b62:	6573      	str	r3, [r6, #84]	; 0x54
 8007b64:	e7c4      	b.n	8007af0 <HAL_PCD_IRQHandler+0x4cc>
        HAL_PCD_ResumeCallback(hpcd);
 8007b66:	4620      	mov	r0, r4
 8007b68:	f00a fc52 	bl	8012410 <HAL_PCD_ResumeCallback>
 8007b6c:	e5d3      	b.n	8007716 <HAL_PCD_IRQHandler+0xf2>
        HAL_PCD_SuspendCallback(hpcd);
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f00a fc36 	bl	80123e0 <HAL_PCD_SuspendCallback>
 8007b74:	e5ff      	b.n	8007776 <HAL_PCD_IRQHandler+0x152>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007b76:	6099      	str	r1, [r3, #8]
 8007b78:	3320      	adds	r3, #32
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b7a:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8007b7e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007b82:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007b86:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8007b8a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007b8e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007b92:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b96:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8007b9a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007b9e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ba2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8007ba6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007baa:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bae:	9a02      	ldr	r2, [sp, #8]
 8007bb0:	3201      	adds	r2, #1
 8007bb2:	9202      	str	r2, [sp, #8]
 8007bb4:	e5f3      	b.n	800779e <HAL_PCD_IRQHandler+0x17a>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007bb6:	6973      	ldr	r3, [r6, #20]
 8007bb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007bbc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007bc0:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007bc2:	6933      	ldr	r3, [r6, #16]
 8007bc4:	f043 030b 	orr.w	r3, r3, #11
 8007bc8:	6133      	str	r3, [r6, #16]
 8007bca:	e5fe      	b.n	80077ca <HAL_PCD_IRQHandler+0x1a6>
 8007bcc:	4f54300a 	.word	0x4f54300a
 8007bd0:	4f54310a 	.word	0x4f54310a

08007bd4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8007bd4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8007bd8:	2a01      	cmp	r2, #1
{
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007bde:	d00b      	beq.n	8007bf8 <HAL_PCD_SetAddress+0x24>
 8007be0:	2201      	movs	r2, #1
 8007be2:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007be6:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007bea:	6800      	ldr	r0, [r0, #0]
 8007bec:	f005 fc1c 	bl	800d428 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007bf6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007bf8:	2002      	movs	r0, #2
 8007bfa:	e7fc      	b.n	8007bf6 <HAL_PCD_SetAddress+0x22>

08007bfc <HAL_PCD_EP_Open>:
{
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	f001 050f 	and.w	r5, r1, #15
 8007c02:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007c04:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007c08:	f04f 061c 	mov.w	r6, #28
 8007c0c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8007c10:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8007c14:	d01f      	beq.n	8007c56 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c16:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 8007c1a:	fb06 4605 	mla	r6, r6, r5, r4
 8007c1e:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c20:	4421      	add	r1, r4
    ep->is_in = 1U;
 8007c22:	f886 003d 	strb.w	r0, [r6, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 8007c26:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8007c28:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c2a:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8007c2c:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007c2e:	b102      	cbz	r2, 8007c32 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8007c30:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8007c32:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8007c34:	bf04      	itt	eq
 8007c36:	2300      	moveq	r3, #0
 8007c38:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8007c3a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d012      	beq.n	8007c68 <HAL_PCD_EP_Open+0x6c>
 8007c42:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c44:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007c46:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c4a:	f005 f99a 	bl	800cf82 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c4e:	2000      	movs	r0, #0
 8007c50:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007c54:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c56:	f500 71fe 	add.w	r1, r0, #508	; 0x1fc
    ep->is_in = 0U;
 8007c5a:	fb06 4605 	mla	r6, r6, r5, r4
 8007c5e:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c60:	4421      	add	r1, r4
    ep->is_in = 0U;
 8007c62:	f886 01fd 	strb.w	r0, [r6, #509]	; 0x1fd
 8007c66:	e7de      	b.n	8007c26 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8007c68:	2002      	movs	r0, #2
 8007c6a:	e7f3      	b.n	8007c54 <HAL_PCD_EP_Open+0x58>

08007c6c <HAL_PCD_EP_Close>:
{
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	4604      	mov	r4, r0
 8007c70:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8007c74:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007c78:	f04f 021c 	mov.w	r2, #28
 8007c7c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8007c80:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007c84:	d016      	beq.n	8007cb4 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c86:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8007c8a:	fb02 4200 	mla	r2, r2, r0, r4
 8007c8e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c90:	4421      	add	r1, r4
    ep->is_in = 1U;
 8007c92:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007c96:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8007c98:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d012      	beq.n	8007cc6 <HAL_PCD_EP_Close+0x5a>
 8007ca0:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ca2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007ca4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ca8:	f005 f9aa 	bl	800d000 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007cac:	2000      	movs	r0, #0
 8007cae:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007cb2:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cb4:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8007cb8:	fb02 4200 	mla	r2, r2, r0, r4
 8007cbc:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cbe:	4421      	add	r1, r4
    ep->is_in = 0U;
 8007cc0:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 8007cc4:	e7e7      	b.n	8007c96 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8007cc6:	2002      	movs	r0, #2
 8007cc8:	e7f3      	b.n	8007cb2 <HAL_PCD_EP_Close+0x46>

08007cca <HAL_PCD_EP_Receive>:
{
 8007cca:	b538      	push	{r3, r4, r5, lr}
 8007ccc:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cd0:	241c      	movs	r4, #28
 8007cd2:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8007cd6:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cda:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8007cde:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8007ce2:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8007ce4:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8007ce8:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8007cec:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cf0:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8007cf4:	6903      	ldr	r3, [r0, #16]
 8007cf6:	6800      	ldr	r0, [r0, #0]
 8007cf8:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8007cfa:	bf08      	it	eq
 8007cfc:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 8007d00:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d02:	b91d      	cbnz	r5, 8007d0c <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d04:	f005 f9ce 	bl	800d0a4 <USB_EP0StartXfer>
}
 8007d08:	2000      	movs	r0, #0
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d0c:	f005 fa52 	bl	800d1b4 <USB_EPStartXfer>
 8007d10:	e7fa      	b.n	8007d08 <HAL_PCD_EP_Receive+0x3e>

08007d12 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007d12:	231c      	movs	r3, #28
 8007d14:	f001 010f 	and.w	r1, r1, #15
 8007d18:	fb03 0101 	mla	r1, r3, r1, r0
}
 8007d1c:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8007d20:	4770      	bx	lr

08007d22 <HAL_PCD_EP_Transmit>:
{
 8007d22:	b538      	push	{r3, r4, r5, lr}
 8007d24:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d28:	241c      	movs	r4, #28
 8007d2a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8007d2e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d32:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8007d34:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8007d36:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8007d38:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8007d3a:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8007d3c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d3e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 8007d42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8007d46:	6903      	ldr	r3, [r0, #16]
 8007d48:	6800      	ldr	r0, [r0, #0]
 8007d4a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8007d4c:	bf08      	it	eq
 8007d4e:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8007d50:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d52:	b91d      	cbnz	r5, 8007d5c <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d54:	f005 f9a6 	bl	800d0a4 <USB_EP0StartXfer>
}
 8007d58:	2000      	movs	r0, #0
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d5c:	f005 fa2a 	bl	800d1b4 <USB_EPStartXfer>
 8007d60:	e7fa      	b.n	8007d58 <HAL_PCD_EP_Transmit+0x36>

08007d62 <HAL_PCD_EP_SetStall>:
{
 8007d62:	b538      	push	{r3, r4, r5, lr}
 8007d64:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007d68:	6843      	ldr	r3, [r0, #4]
{
 8007d6a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007d6c:	429d      	cmp	r5, r3
 8007d6e:	d82e      	bhi.n	8007dce <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8007d70:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007d74:	f04f 021c 	mov.w	r2, #28
 8007d78:	d01f      	beq.n	8007dba <HAL_PCD_EP_SetStall+0x58>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d7a:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8007d7e:	fb02 0105 	mla	r1, r2, r5, r0
 8007d82:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d84:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8007d86:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8007d8a:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d8c:	701d      	strb	r5, [r3, #0]
  ep->is_stall = 1U;
 8007d8e:	709a      	strb	r2, [r3, #2]
  __HAL_LOCK(hpcd);
 8007d90:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8007d94:	4291      	cmp	r1, r2
 8007d96:	d01c      	beq.n	8007dd2 <HAL_PCD_EP_SetStall+0x70>
 8007d98:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6820      	ldr	r0, [r4, #0]
 8007da0:	f005 faee 	bl	800d380 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007da4:	b92d      	cbnz	r5, 8007db2 <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007da6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007daa:	7c21      	ldrb	r1, [r4, #16]
 8007dac:	6820      	ldr	r0, [r4, #0]
 8007dae:	f005 fba7 	bl	800d500 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8007db2:	2000      	movs	r0, #0
 8007db4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007db8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8007dba:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8007dbe:	fb02 0101 	mla	r1, r2, r1, r0
 8007dc2:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8007dc4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8007dc8:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8007dcc:	e7dd      	b.n	8007d8a <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8007dce:	2001      	movs	r0, #1
 8007dd0:	e7f2      	b.n	8007db8 <HAL_PCD_EP_SetStall+0x56>
  __HAL_LOCK(hpcd);
 8007dd2:	2002      	movs	r0, #2
 8007dd4:	e7f0      	b.n	8007db8 <HAL_PCD_EP_SetStall+0x56>

08007dd6 <HAL_PCD_EP_ClrStall>:
{
 8007dd6:	b538      	push	{r3, r4, r5, lr}
 8007dd8:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007ddc:	6843      	ldr	r3, [r0, #4]
{
 8007dde:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d82a      	bhi.n	8007e3a <HAL_PCD_EP_ClrStall+0x64>
 8007de4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8007de8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007dec:	f04f 001c 	mov.w	r0, #28
 8007df0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007df4:	d018      	beq.n	8007e28 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007df6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8007dfa:	fb00 4002 	mla	r0, r0, r2, r4
 8007dfe:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e00:	4421      	add	r1, r4
    ep->is_in = 1U;
 8007e02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 8007e06:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e08:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8007e0a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007e0c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d014      	beq.n	8007e3e <HAL_PCD_EP_ClrStall+0x68>
 8007e14:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007e16:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007e18:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007e1c:	f005 fadb 	bl	800d3d6 <USB_EPClearStall>
  return HAL_OK;
 8007e20:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8007e22:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e28:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8007e2c:	fb00 4002 	mla	r0, r0, r2, r4
 8007e30:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e32:	4421      	add	r1, r4
    ep->is_in = 0U;
 8007e34:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 8007e38:	e7e5      	b.n	8007e06 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8007e3a:	2001      	movs	r0, #1
 8007e3c:	e7f3      	b.n	8007e26 <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 8007e3e:	2002      	movs	r0, #2
 8007e40:	e7f1      	b.n	8007e26 <HAL_PCD_EP_ClrStall+0x50>

08007e42 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007e42:	6800      	ldr	r0, [r0, #0]
 8007e44:	0412      	lsls	r2, r2, #16
{
 8007e46:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007e48:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (fifo == 0U)
 8007e4a:	b919      	cbnz	r1, 8007e54 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007e4c:	4322      	orrs	r2, r4
 8007e4e:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8007e50:	2000      	movs	r0, #0
 8007e52:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007e54:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8007e56:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007e58:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	1c5e      	adds	r6, r3, #1
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	429d      	cmp	r5, r3
 8007e64:	d805      	bhi.n	8007e72 <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007e66:	313f      	adds	r1, #63	; 0x3f
 8007e68:	4322      	orrs	r2, r4
 8007e6a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007e6e:	6042      	str	r2, [r0, #4]
 8007e70:	e7ee      	b.n	8007e50 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007e72:	3340      	adds	r3, #64	; 0x40
 8007e74:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007e7e:	4633      	mov	r3, r6
 8007e80:	e7ed      	b.n	8007e5e <HAL_PCDEx_SetTxFiFo+0x1c>

08007e82 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8007e82:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8007e84:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8007e86:	6259      	str	r1, [r3, #36]	; 0x24
}
 8007e88:	4770      	bx	lr

08007e8a <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8007e8a:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e8c:	6802      	ldr	r2, [r0, #0]
{
 8007e8e:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8007e90:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007e94:	2000      	movs	r0, #0
 8007e96:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007e9a:	6993      	ldr	r3, [r2, #24]
 8007e9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ea0:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007ea2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ea8:	f043 0303 	orr.w	r3, r3, #3
 8007eac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8007eae:	4770      	bx	lr

08007eb0 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007eb0:	4770      	bx	lr
	...

08007eb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007eb4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007eb6:	4c10      	ldr	r4, [pc, #64]	; (8007ef8 <HAL_PWREx_ConfigSupply+0x44>)
 8007eb8:	68e3      	ldr	r3, [r4, #12]
 8007eba:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007ebe:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ec0:	d105      	bne.n	8007ece <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007ec2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007ec6:	1a18      	subs	r0, r3, r0
 8007ec8:	bf18      	it	ne
 8007eca:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8007ecc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007ece:	f023 0307 	bic.w	r3, r3, #7
 8007ed2:	4318      	orrs	r0, r3
 8007ed4:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8007ed6:	f7fd f9c1 	bl	800525c <HAL_GetTick>
 8007eda:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007edc:	6863      	ldr	r3, [r4, #4]
 8007ede:	049b      	lsls	r3, r3, #18
 8007ee0:	d501      	bpl.n	8007ee6 <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	e7f2      	b.n	8007ecc <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ee6:	f7fd f9b9 	bl	800525c <HAL_GetTick>
 8007eea:	1b40      	subs	r0, r0, r5
 8007eec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007ef0:	d9f4      	bls.n	8007edc <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	e7ea      	b.n	8007ecc <HAL_PWREx_ConfigSupply+0x18>
 8007ef6:	bf00      	nop
 8007ef8:	58024800 	.word	0x58024800

08007efc <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007efc:	4a02      	ldr	r2, [pc, #8]	; (8007f08 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8007efe:	68d3      	ldr	r3, [r2, #12]
 8007f00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f04:	60d3      	str	r3, [r2, #12]
}
 8007f06:	4770      	bx	lr
 8007f08:	58024800 	.word	0x58024800

08007f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f0e:	4604      	mov	r4, r0
 8007f10:	b908      	cbnz	r0, 8007f16 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8007f12:	2001      	movs	r0, #1
 8007f14:	e08c      	b.n	8008030 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f16:	6803      	ldr	r3, [r0, #0]
 8007f18:	07d8      	lsls	r0, r3, #31
 8007f1a:	d45e      	bmi.n	8007fda <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	0799      	lsls	r1, r3, #30
 8007f20:	f100 80ac 	bmi.w	800807c <HAL_RCC_OscConfig+0x170>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	06da      	lsls	r2, r3, #27
 8007f28:	d527      	bpl.n	8007f7a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f2a:	4ba8      	ldr	r3, [pc, #672]	; (80081cc <HAL_RCC_OscConfig+0x2c0>)
 8007f2c:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f30:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f34:	2a08      	cmp	r2, #8
 8007f36:	d007      	beq.n	8007f48 <HAL_RCC_OscConfig+0x3c>
 8007f38:	2a18      	cmp	r2, #24
 8007f3a:	f040 810a 	bne.w	8008152 <HAL_RCC_OscConfig+0x246>
 8007f3e:	f001 0203 	and.w	r2, r1, #3
 8007f42:	2a01      	cmp	r2, #1
 8007f44:	f040 8105 	bne.w	8008152 <HAL_RCC_OscConfig+0x246>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	05db      	lsls	r3, r3, #23
 8007f4c:	d502      	bpl.n	8007f54 <HAL_RCC_OscConfig+0x48>
 8007f4e:	69e3      	ldr	r3, [r4, #28]
 8007f50:	2b80      	cmp	r3, #128	; 0x80
 8007f52:	d1de      	bne.n	8007f12 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f54:	f7fd f99a 	bl	800528c <HAL_GetREVID>
 8007f58:	f241 0303 	movw	r3, #4099	; 0x1003
 8007f5c:	6a21      	ldr	r1, [r4, #32]
 8007f5e:	4298      	cmp	r0, r3
 8007f60:	4b9a      	ldr	r3, [pc, #616]	; (80081cc <HAL_RCC_OscConfig+0x2c0>)
 8007f62:	f200 80ef 	bhi.w	8008144 <HAL_RCC_OscConfig+0x238>
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	2920      	cmp	r1, #32
 8007f6a:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8007f6e:	bf0c      	ite	eq
 8007f70:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8007f74:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8007f78:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	0719      	lsls	r1, r3, #28
 8007f7e:	f100 8129 	bmi.w	80081d4 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	069a      	lsls	r2, r3, #26
 8007f86:	f100 814a 	bmi.w	800821e <HAL_RCC_OscConfig+0x312>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	075d      	lsls	r5, r3, #29
 8007f8e:	d51e      	bpl.n	8007fce <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8007f90:	4d8f      	ldr	r5, [pc, #572]	; (80081d0 <HAL_RCC_OscConfig+0x2c4>)
 8007f92:	682b      	ldr	r3, [r5, #0]
 8007f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f98:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8007f9a:	f7fd f95f 	bl	800525c <HAL_GetTick>
 8007f9e:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	05da      	lsls	r2, r3, #23
 8007fa4:	f140 8160 	bpl.w	8008268 <HAL_RCC_OscConfig+0x35c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fa8:	68a3      	ldr	r3, [r4, #8]
 8007faa:	4d88      	ldr	r5, [pc, #544]	; (80081cc <HAL_RCC_OscConfig+0x2c0>)
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	f040 8162 	bne.w	8008276 <HAL_RCC_OscConfig+0x36a>
 8007fb2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007fb4:	f043 0301 	orr.w	r3, r3, #1
 8007fb8:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fba:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007fbe:	f7fd f94d 	bl	800525c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fc2:	4e82      	ldr	r6, [pc, #520]	; (80081cc <HAL_RCC_OscConfig+0x2c0>)
      tickstart = HAL_GetTick();
 8007fc4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fc6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007fc8:	079b      	lsls	r3, r3, #30
 8007fca:	f140 817a 	bpl.w	80082c2 <HAL_RCC_OscConfig+0x3b6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f040 817d 	bne.w	80082d0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
  }
  return HAL_OK;
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	e02a      	b.n	8008030 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fda:	4b7c      	ldr	r3, [pc, #496]	; (80081cc <HAL_RCC_OscConfig+0x2c0>)
 8007fdc:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fde:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fe0:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007fe4:	2a10      	cmp	r2, #16
 8007fe6:	d005      	beq.n	8007ff4 <HAL_RCC_OscConfig+0xe8>
 8007fe8:	2a18      	cmp	r2, #24
 8007fea:	d10a      	bne.n	8008002 <HAL_RCC_OscConfig+0xf6>
 8007fec:	f001 0203 	and.w	r2, r1, #3
 8007ff0:	2a02      	cmp	r2, #2
 8007ff2:	d106      	bne.n	8008002 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	039a      	lsls	r2, r3, #14
 8007ff8:	d590      	bpl.n	8007f1c <HAL_RCC_OscConfig+0x10>
 8007ffa:	6863      	ldr	r3, [r4, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d18d      	bne.n	8007f1c <HAL_RCC_OscConfig+0x10>
 8008000:	e787      	b.n	8007f12 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008002:	6863      	ldr	r3, [r4, #4]
 8008004:	4d71      	ldr	r5, [pc, #452]	; (80081cc <HAL_RCC_OscConfig+0x2c0>)
 8008006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800800a:	d112      	bne.n	8008032 <HAL_RCC_OscConfig+0x126>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008012:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008014:	f7fd f922 	bl	800525c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008018:	4d6c      	ldr	r5, [pc, #432]	; (80081cc <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 800801a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	039b      	lsls	r3, r3, #14
 8008020:	f53f af7c 	bmi.w	8007f1c <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008024:	f7fd f91a 	bl	800525c <HAL_GetTick>
 8008028:	1b80      	subs	r0, r0, r6
 800802a:	2864      	cmp	r0, #100	; 0x64
 800802c:	d9f6      	bls.n	800801c <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800802e:	2003      	movs	r0, #3
}
 8008030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008032:	b9a3      	cbnz	r3, 800805e <HAL_RCC_OscConfig+0x152>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800803a:	602b      	str	r3, [r5, #0]
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008042:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008044:	f7fd f90a 	bl	800525c <HAL_GetTick>
 8008048:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800804a:	682b      	ldr	r3, [r5, #0]
 800804c:	039f      	lsls	r7, r3, #14
 800804e:	f57f af65 	bpl.w	8007f1c <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008052:	f7fd f903 	bl	800525c <HAL_GetTick>
 8008056:	1b80      	subs	r0, r0, r6
 8008058:	2864      	cmp	r0, #100	; 0x64
 800805a:	d9f6      	bls.n	800804a <HAL_RCC_OscConfig+0x13e>
 800805c:	e7e7      	b.n	800802e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800805e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008062:	682b      	ldr	r3, [r5, #0]
 8008064:	d103      	bne.n	800806e <HAL_RCC_OscConfig+0x162>
 8008066:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800806a:	602b      	str	r3, [r5, #0]
 800806c:	e7ce      	b.n	800800c <HAL_RCC_OscConfig+0x100>
 800806e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008072:	602b      	str	r3, [r5, #0]
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800807a:	e7ca      	b.n	8008012 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800807c:	4b53      	ldr	r3, [pc, #332]	; (80081cc <HAL_RCC_OscConfig+0x2c0>)
 800807e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008080:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008082:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8008086:	d003      	beq.n	8008090 <HAL_RCC_OscConfig+0x184>
 8008088:	2a18      	cmp	r2, #24
 800808a:	d120      	bne.n	80080ce <HAL_RCC_OscConfig+0x1c2>
 800808c:	078e      	lsls	r6, r1, #30
 800808e:	d11e      	bne.n	80080ce <HAL_RCC_OscConfig+0x1c2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	075d      	lsls	r5, r3, #29
 8008094:	d503      	bpl.n	800809e <HAL_RCC_OscConfig+0x192>
 8008096:	68e3      	ldr	r3, [r4, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	f43f af3a 	beq.w	8007f12 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800809e:	f7fd f8f5 	bl	800528c <HAL_GetREVID>
 80080a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80080a6:	6921      	ldr	r1, [r4, #16]
 80080a8:	4298      	cmp	r0, r3
 80080aa:	4b48      	ldr	r3, [pc, #288]	; (80081cc <HAL_RCC_OscConfig+0x2c0>)
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	d809      	bhi.n	80080c4 <HAL_RCC_OscConfig+0x1b8>
 80080b0:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80080b4:	2940      	cmp	r1, #64	; 0x40
 80080b6:	bf0c      	ite	eq
 80080b8:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 80080bc:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 80080c0:	605a      	str	r2, [r3, #4]
 80080c2:	e72f      	b.n	8007f24 <HAL_RCC_OscConfig+0x18>
 80080c4:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80080c8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80080cc:	e7f8      	b.n	80080c0 <HAL_RCC_OscConfig+0x1b4>
 80080ce:	4d3f      	ldr	r5, [pc, #252]	; (80081cc <HAL_RCC_OscConfig+0x2c0>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080d0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080d2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080d4:	b332      	cbz	r2, 8008124 <HAL_RCC_OscConfig+0x218>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080d6:	f023 0319 	bic.w	r3, r3, #25
 80080da:	4313      	orrs	r3, r2
 80080dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80080de:	f7fd f8bd 	bl	800525c <HAL_GetTick>
 80080e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	0758      	lsls	r0, r3, #29
 80080e8:	d511      	bpl.n	800810e <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ea:	f7fd f8cf 	bl	800528c <HAL_GetREVID>
 80080ee:	f241 0303 	movw	r3, #4099	; 0x1003
 80080f2:	6922      	ldr	r2, [r4, #16]
 80080f4:	4298      	cmp	r0, r3
 80080f6:	686b      	ldr	r3, [r5, #4]
 80080f8:	d80f      	bhi.n	800811a <HAL_RCC_OscConfig+0x20e>
 80080fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80080fe:	2a40      	cmp	r2, #64	; 0x40
 8008100:	bf0c      	ite	eq
 8008102:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008106:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800810a:	606b      	str	r3, [r5, #4]
 800810c:	e70a      	b.n	8007f24 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800810e:	f7fd f8a5 	bl	800525c <HAL_GetTick>
 8008112:	1b80      	subs	r0, r0, r6
 8008114:	2802      	cmp	r0, #2
 8008116:	d9e5      	bls.n	80080e4 <HAL_RCC_OscConfig+0x1d8>
 8008118:	e789      	b.n	800802e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800811a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800811e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008122:	e7f2      	b.n	800810a <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_DISABLE();
 8008124:	f023 0301 	bic.w	r3, r3, #1
 8008128:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800812a:	f7fd f897 	bl	800525c <HAL_GetTick>
 800812e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	0759      	lsls	r1, r3, #29
 8008134:	f57f aef6 	bpl.w	8007f24 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008138:	f7fd f890 	bl	800525c <HAL_GetTick>
 800813c:	1b80      	subs	r0, r0, r6
 800813e:	2802      	cmp	r0, #2
 8008140:	d9f6      	bls.n	8008130 <HAL_RCC_OscConfig+0x224>
 8008142:	e774      	b.n	800802e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008144:	68da      	ldr	r2, [r3, #12]
 8008146:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800814a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800814e:	60da      	str	r2, [r3, #12]
 8008150:	e713      	b.n	8007f7a <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008152:	69e3      	ldr	r3, [r4, #28]
 8008154:	4d1d      	ldr	r5, [pc, #116]	; (80081cc <HAL_RCC_OscConfig+0x2c0>)
 8008156:	b343      	cbz	r3, 80081aa <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_CSI_ENABLE();
 8008158:	682b      	ldr	r3, [r5, #0]
 800815a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800815e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008160:	f7fd f87c 	bl	800525c <HAL_GetTick>
 8008164:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008166:	682b      	ldr	r3, [r5, #0]
 8008168:	05df      	lsls	r7, r3, #23
 800816a:	d511      	bpl.n	8008190 <HAL_RCC_OscConfig+0x284>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800816c:	f7fd f88e 	bl	800528c <HAL_GetREVID>
 8008170:	f241 0303 	movw	r3, #4099	; 0x1003
 8008174:	6a22      	ldr	r2, [r4, #32]
 8008176:	4298      	cmp	r0, r3
 8008178:	d810      	bhi.n	800819c <HAL_RCC_OscConfig+0x290>
 800817a:	686b      	ldr	r3, [r5, #4]
 800817c:	2a20      	cmp	r2, #32
 800817e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008182:	bf0c      	ite	eq
 8008184:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8008188:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800818c:	606b      	str	r3, [r5, #4]
 800818e:	e6f4      	b.n	8007f7a <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008190:	f7fd f864 	bl	800525c <HAL_GetTick>
 8008194:	1b80      	subs	r0, r0, r6
 8008196:	2802      	cmp	r0, #2
 8008198:	d9e5      	bls.n	8008166 <HAL_RCC_OscConfig+0x25a>
 800819a:	e748      	b.n	800802e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800819c:	68eb      	ldr	r3, [r5, #12]
 800819e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80081a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80081a6:	60eb      	str	r3, [r5, #12]
 80081a8:	e6e7      	b.n	8007f7a <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_CSI_DISABLE();
 80081aa:	682b      	ldr	r3, [r5, #0]
 80081ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80081b2:	f7fd f853 	bl	800525c <HAL_GetTick>
 80081b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	05d8      	lsls	r0, r3, #23
 80081bc:	f57f aedd 	bpl.w	8007f7a <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80081c0:	f7fd f84c 	bl	800525c <HAL_GetTick>
 80081c4:	1b80      	subs	r0, r0, r6
 80081c6:	2802      	cmp	r0, #2
 80081c8:	d9f6      	bls.n	80081b8 <HAL_RCC_OscConfig+0x2ac>
 80081ca:	e730      	b.n	800802e <HAL_RCC_OscConfig+0x122>
 80081cc:	58024400 	.word	0x58024400
 80081d0:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081d4:	6963      	ldr	r3, [r4, #20]
 80081d6:	4d96      	ldr	r5, [pc, #600]	; (8008430 <HAL_RCC_OscConfig+0x524>)
 80081d8:	b183      	cbz	r3, 80081fc <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_ENABLE();
 80081da:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80081dc:	f043 0301 	orr.w	r3, r3, #1
 80081e0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80081e2:	f7fd f83b 	bl	800525c <HAL_GetTick>
 80081e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081e8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80081ea:	079b      	lsls	r3, r3, #30
 80081ec:	f53f aec9 	bmi.w	8007f82 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081f0:	f7fd f834 	bl	800525c <HAL_GetTick>
 80081f4:	1b80      	subs	r0, r0, r6
 80081f6:	2802      	cmp	r0, #2
 80081f8:	d9f6      	bls.n	80081e8 <HAL_RCC_OscConfig+0x2dc>
 80081fa:	e718      	b.n	800802e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 80081fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80081fe:	f023 0301 	bic.w	r3, r3, #1
 8008202:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008204:	f7fd f82a 	bl	800525c <HAL_GetTick>
 8008208:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800820a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800820c:	079f      	lsls	r7, r3, #30
 800820e:	f57f aeb8 	bpl.w	8007f82 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008212:	f7fd f823 	bl	800525c <HAL_GetTick>
 8008216:	1b80      	subs	r0, r0, r6
 8008218:	2802      	cmp	r0, #2
 800821a:	d9f6      	bls.n	800820a <HAL_RCC_OscConfig+0x2fe>
 800821c:	e707      	b.n	800802e <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800821e:	69a3      	ldr	r3, [r4, #24]
 8008220:	4d83      	ldr	r5, [pc, #524]	; (8008430 <HAL_RCC_OscConfig+0x524>)
 8008222:	b183      	cbz	r3, 8008246 <HAL_RCC_OscConfig+0x33a>
      __HAL_RCC_HSI48_ENABLE();
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800822a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800822c:	f7fd f816 	bl	800525c <HAL_GetTick>
 8008230:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008232:	682b      	ldr	r3, [r5, #0]
 8008234:	0498      	lsls	r0, r3, #18
 8008236:	f53f aea8 	bmi.w	8007f8a <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800823a:	f7fd f80f 	bl	800525c <HAL_GetTick>
 800823e:	1b80      	subs	r0, r0, r6
 8008240:	2802      	cmp	r0, #2
 8008242:	d9f6      	bls.n	8008232 <HAL_RCC_OscConfig+0x326>
 8008244:	e6f3      	b.n	800802e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8008246:	682b      	ldr	r3, [r5, #0]
 8008248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800824c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800824e:	f7fd f805 	bl	800525c <HAL_GetTick>
 8008252:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	0499      	lsls	r1, r3, #18
 8008258:	f57f ae97 	bpl.w	8007f8a <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800825c:	f7fc fffe 	bl	800525c <HAL_GetTick>
 8008260:	1b80      	subs	r0, r0, r6
 8008262:	2802      	cmp	r0, #2
 8008264:	d9f6      	bls.n	8008254 <HAL_RCC_OscConfig+0x348>
 8008266:	e6e2      	b.n	800802e <HAL_RCC_OscConfig+0x122>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008268:	f7fc fff8 	bl	800525c <HAL_GetTick>
 800826c:	1b80      	subs	r0, r0, r6
 800826e:	2864      	cmp	r0, #100	; 0x64
 8008270:	f67f ae96 	bls.w	8007fa0 <HAL_RCC_OscConfig+0x94>
 8008274:	e6db      	b.n	800802e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008276:	b9b3      	cbnz	r3, 80082a6 <HAL_RCC_OscConfig+0x39a>
 8008278:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800827a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800827e:	f023 0301 	bic.w	r3, r3, #1
 8008282:	672b      	str	r3, [r5, #112]	; 0x70
 8008284:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008286:	f023 0304 	bic.w	r3, r3, #4
 800828a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800828c:	f7fc ffe6 	bl	800525c <HAL_GetTick>
 8008290:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008292:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008294:	0798      	lsls	r0, r3, #30
 8008296:	f57f ae9a 	bpl.w	8007fce <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800829a:	f7fc ffdf 	bl	800525c <HAL_GetTick>
 800829e:	1b80      	subs	r0, r0, r6
 80082a0:	42b8      	cmp	r0, r7
 80082a2:	d9f6      	bls.n	8008292 <HAL_RCC_OscConfig+0x386>
 80082a4:	e6c3      	b.n	800802e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80082aa:	d103      	bne.n	80082b4 <HAL_RCC_OscConfig+0x3a8>
 80082ac:	f043 0304 	orr.w	r3, r3, #4
 80082b0:	672b      	str	r3, [r5, #112]	; 0x70
 80082b2:	e67e      	b.n	8007fb2 <HAL_RCC_OscConfig+0xa6>
 80082b4:	f023 0301 	bic.w	r3, r3, #1
 80082b8:	672b      	str	r3, [r5, #112]	; 0x70
 80082ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80082bc:	f023 0304 	bic.w	r3, r3, #4
 80082c0:	e67a      	b.n	8007fb8 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082c2:	f7fc ffcb 	bl	800525c <HAL_GetTick>
 80082c6:	1bc0      	subs	r0, r0, r7
 80082c8:	42a8      	cmp	r0, r5
 80082ca:	f67f ae7c 	bls.w	8007fc6 <HAL_RCC_OscConfig+0xba>
 80082ce:	e6ae      	b.n	800802e <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082d0:	4d57      	ldr	r5, [pc, #348]	; (8008430 <HAL_RCC_OscConfig+0x524>)
 80082d2:	692b      	ldr	r3, [r5, #16]
 80082d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082d8:	2b18      	cmp	r3, #24
 80082da:	d07a      	beq.n	80083d2 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_DISABLE();
 80082dc:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082de:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80082e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082e4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082e6:	d167      	bne.n	80083b8 <HAL_RCC_OscConfig+0x4ac>
        tickstart = HAL_GetTick();
 80082e8:	f7fc ffb8 	bl	800525c <HAL_GetTick>
 80082ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082ee:	682b      	ldr	r3, [r5, #0]
 80082f0:	0199      	lsls	r1, r3, #6
 80082f2:	d45b      	bmi.n	80083ac <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80082f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80082f8:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80082fc:	f023 0303 	bic.w	r3, r3, #3
 8008300:	4313      	orrs	r3, r2
 8008302:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008304:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008308:	62ab      	str	r3, [r5, #40]	; 0x28
 800830a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800830c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800830e:	3b01      	subs	r3, #1
 8008310:	3a01      	subs	r2, #1
 8008312:	025b      	lsls	r3, r3, #9
 8008314:	0412      	lsls	r2, r2, #16
 8008316:	b29b      	uxth	r3, r3
 8008318:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800831c:	4313      	orrs	r3, r2
 800831e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008320:	3a01      	subs	r2, #1
 8008322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008326:	4313      	orrs	r3, r2
 8008328:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800832a:	3a01      	subs	r2, #1
 800832c:	0612      	lsls	r2, r2, #24
 800832e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008332:	4313      	orrs	r3, r2
 8008334:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008336:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008338:	f023 0301 	bic.w	r3, r3, #1
 800833c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800833e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008340:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008346:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800834a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800834e:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008350:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008352:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008354:	f023 030c 	bic.w	r3, r3, #12
 8008358:	4313      	orrs	r3, r2
 800835a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800835c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800835e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008360:	f023 0302 	bic.w	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008364:	4c32      	ldr	r4, [pc, #200]	; (8008430 <HAL_RCC_OscConfig+0x524>)
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008366:	4313      	orrs	r3, r2
 8008368:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800836a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800836c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008370:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008372:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008378:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800837a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800837c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008380:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008382:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008384:	f043 0301 	orr.w	r3, r3, #1
 8008388:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800838a:	682b      	ldr	r3, [r5, #0]
 800838c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008390:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008392:	f7fc ff63 	bl	800525c <HAL_GetTick>
 8008396:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	019a      	lsls	r2, r3, #6
 800839c:	f53f ae1b 	bmi.w	8007fd6 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083a0:	f7fc ff5c 	bl	800525c <HAL_GetTick>
 80083a4:	1b40      	subs	r0, r0, r5
 80083a6:	2802      	cmp	r0, #2
 80083a8:	d9f6      	bls.n	8008398 <HAL_RCC_OscConfig+0x48c>
 80083aa:	e640      	b.n	800802e <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083ac:	f7fc ff56 	bl	800525c <HAL_GetTick>
 80083b0:	1b80      	subs	r0, r0, r6
 80083b2:	2802      	cmp	r0, #2
 80083b4:	d99b      	bls.n	80082ee <HAL_RCC_OscConfig+0x3e2>
 80083b6:	e63a      	b.n	800802e <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 80083b8:	f7fc ff50 	bl	800525c <HAL_GetTick>
 80083bc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083be:	682b      	ldr	r3, [r5, #0]
 80083c0:	019b      	lsls	r3, r3, #6
 80083c2:	f57f ae08 	bpl.w	8007fd6 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083c6:	f7fc ff49 	bl	800525c <HAL_GetTick>
 80083ca:	1b00      	subs	r0, r0, r4
 80083cc:	2802      	cmp	r0, #2
 80083ce:	d9f6      	bls.n	80083be <HAL_RCC_OscConfig+0x4b2>
 80083d0:	e62d      	b.n	800802e <HAL_RCC_OscConfig+0x122>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083d2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80083d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80083d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083d8:	f43f ae2a 	beq.w	8008030 <HAL_RCC_OscConfig+0x124>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083dc:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80083e2:	4281      	cmp	r1, r0
 80083e4:	f47f ad95 	bne.w	8007f12 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083e8:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80083ee:	428a      	cmp	r2, r1
 80083f0:	f47f ad8f 	bne.w	8007f12 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80083f6:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80083fa:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083fc:	4291      	cmp	r1, r2
 80083fe:	f47f ad88 	bne.w	8007f12 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008402:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008404:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8008408:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800840a:	4291      	cmp	r1, r2
 800840c:	f47f ad81 	bne.w	8007f12 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008410:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008412:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8008416:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008418:	4291      	cmp	r1, r2
 800841a:	f47f ad7a 	bne.w	8007f12 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800841e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008420:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008424:	3801      	subs	r0, #1
    return HAL_ERROR;
 8008426:	1a18      	subs	r0, r3, r0
 8008428:	bf18      	it	ne
 800842a:	2001      	movne	r0, #1
 800842c:	e600      	b.n	8008030 <HAL_RCC_OscConfig+0x124>
 800842e:	bf00      	nop
 8008430:	58024400 	.word	0x58024400

08008434 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008434:	4b46      	ldr	r3, [pc, #280]	; (8008550 <HAL_RCC_GetSysClockFreq+0x11c>)
 8008436:	691a      	ldr	r2, [r3, #16]
 8008438:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800843c:	2a10      	cmp	r2, #16
{
 800843e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008440:	f000 8084 	beq.w	800854c <HAL_RCC_GetSysClockFreq+0x118>
 8008444:	2a18      	cmp	r2, #24
 8008446:	d00c      	beq.n	8008462 <HAL_RCC_GetSysClockFreq+0x2e>
 8008448:	b10a      	cbz	r2, 800844e <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800844a:	4842      	ldr	r0, [pc, #264]	; (8008554 <HAL_RCC_GetSysClockFreq+0x120>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800844c:	bd10      	pop	{r4, pc}
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	4841      	ldr	r0, [pc, #260]	; (8008558 <HAL_RCC_GetSysClockFreq+0x124>)
 8008452:	f012 0f20 	tst.w	r2, #32
 8008456:	d0f9      	beq.n	800844c <HAL_RCC_GetSysClockFreq+0x18>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800845e:	40d8      	lsrs	r0, r3
 8008460:	e7f4      	b.n	800844c <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008462:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008464:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008468:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800846c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 800846e:	2800      	cmp	r0, #0
 8008470:	d0ec      	beq.n	800844c <HAL_RCC_GetSysClockFreq+0x18>
 8008472:	ee07 0a90 	vmov	s15, r0
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008476:	f002 0201 	and.w	r2, r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800847a:	f3c4 00cc 	ubfx	r0, r4, #3, #13
 800847e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008482:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008486:	4342      	muls	r2, r0
 8008488:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800848c:	f001 0203 	and.w	r2, r1, #3
      switch (pllsource)
 8008490:	2a01      	cmp	r2, #1
 8008492:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8008496:	d002      	beq.n	800849e <HAL_RCC_GetSysClockFreq+0x6a>
 8008498:	d30f      	bcc.n	80084ba <HAL_RCC_GetSysClockFreq+0x86>
 800849a:	2a02      	cmp	r2, #2
 800849c:	d048      	beq.n	8008530 <HAL_RCC_GetSysClockFreq+0xfc>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800849e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a4:	ee07 3a10 	vmov	s14, r3
 80084a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80084ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084b0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80084b4:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800855c <HAL_RCC_GetSysClockFreq+0x128>
 80084b8:	e037      	b.n	800852a <HAL_RCC_GetSysClockFreq+0xf6>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	0692      	lsls	r2, r2, #26
 80084be:	d527      	bpl.n	8008510 <HAL_RCC_GetSysClockFreq+0xdc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084c0:	6819      	ldr	r1, [r3, #0]
 80084c2:	4a25      	ldr	r2, [pc, #148]	; (8008558 <HAL_RCC_GetSysClockFreq+0x124>)
 80084c4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084ca:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d0:	ee07 2a10 	vmov	s14, r2
 80084d4:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80084d8:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80084dc:	ee06 3a90 	vmov	s13, r3
 80084e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80084e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084e8:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80084ec:	4b18      	ldr	r3, [pc, #96]	; (8008550 <HAL_RCC_GetSysClockFreq+0x11c>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084ee:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80084f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80084f8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80084fa:	ee07 3a10 	vmov	s14, r3
 80084fe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008502:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008506:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800850a:	ee17 0a90 	vmov	r0, s15
 800850e:	e79d      	b.n	800844c <HAL_RCC_GetSysClockFreq+0x18>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008516:	ee07 3a10 	vmov	s14, r3
 800851a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800851e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008522:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008526:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8008560 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800852a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800852e:	e7dd      	b.n	80084ec <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008536:	ee07 3a10 	vmov	s14, r3
 800853a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800853e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008542:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008546:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8008564 <HAL_RCC_GetSysClockFreq+0x130>
 800854a:	e7ee      	b.n	800852a <HAL_RCC_GetSysClockFreq+0xf6>
    sysclockfreq = HSE_VALUE;
 800854c:	4806      	ldr	r0, [pc, #24]	; (8008568 <HAL_RCC_GetSysClockFreq+0x134>)
 800854e:	e77d      	b.n	800844c <HAL_RCC_GetSysClockFreq+0x18>
 8008550:	58024400 	.word	0x58024400
 8008554:	003d0900 	.word	0x003d0900
 8008558:	03d09000 	.word	0x03d09000
 800855c:	4a742400 	.word	0x4a742400
 8008560:	4c742400 	.word	0x4c742400
 8008564:	4af42400 	.word	0x4af42400
 8008568:	007a1200 	.word	0x007a1200

0800856c <HAL_RCC_ClockConfig>:
{
 800856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008570:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8008572:	4604      	mov	r4, r0
 8008574:	b910      	cbnz	r0, 800857c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008576:	2001      	movs	r0, #1
}
 8008578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800857c:	4a88      	ldr	r2, [pc, #544]	; (80087a0 <HAL_RCC_ClockConfig+0x234>)
 800857e:	6813      	ldr	r3, [r2, #0]
 8008580:	f003 030f 	and.w	r3, r3, #15
 8008584:	428b      	cmp	r3, r1
 8008586:	f0c0 8093 	bcc.w	80086b0 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	075f      	lsls	r7, r3, #29
 800858e:	f100 809b 	bmi.w	80086c8 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008592:	071e      	lsls	r6, r3, #28
 8008594:	d50b      	bpl.n	80085ae <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008596:	4983      	ldr	r1, [pc, #524]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 8008598:	6966      	ldr	r6, [r4, #20]
 800859a:	69c8      	ldr	r0, [r1, #28]
 800859c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80085a0:	4286      	cmp	r6, r0
 80085a2:	d904      	bls.n	80085ae <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085a4:	69ca      	ldr	r2, [r1, #28]
 80085a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80085aa:	4332      	orrs	r2, r6
 80085ac:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085ae:	06d8      	lsls	r0, r3, #27
 80085b0:	d50b      	bpl.n	80085ca <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085b2:	497c      	ldr	r1, [pc, #496]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 80085b4:	69a6      	ldr	r6, [r4, #24]
 80085b6:	69c8      	ldr	r0, [r1, #28]
 80085b8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80085bc:	4286      	cmp	r6, r0
 80085be:	d904      	bls.n	80085ca <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085c0:	69ca      	ldr	r2, [r1, #28]
 80085c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085c6:	4332      	orrs	r2, r6
 80085c8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085ca:	0699      	lsls	r1, r3, #26
 80085cc:	d50b      	bpl.n	80085e6 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085ce:	4975      	ldr	r1, [pc, #468]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 80085d0:	69e6      	ldr	r6, [r4, #28]
 80085d2:	6a08      	ldr	r0, [r1, #32]
 80085d4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80085d8:	4286      	cmp	r6, r0
 80085da:	d904      	bls.n	80085e6 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80085dc:	6a0a      	ldr	r2, [r1, #32]
 80085de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80085e2:	4332      	orrs	r2, r6
 80085e4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085e6:	079a      	lsls	r2, r3, #30
 80085e8:	d50b      	bpl.n	8008602 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80085ea:	496e      	ldr	r1, [pc, #440]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 80085ec:	68e6      	ldr	r6, [r4, #12]
 80085ee:	6988      	ldr	r0, [r1, #24]
 80085f0:	f000 000f 	and.w	r0, r0, #15
 80085f4:	4286      	cmp	r6, r0
 80085f6:	d904      	bls.n	8008602 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085f8:	698a      	ldr	r2, [r1, #24]
 80085fa:	f022 020f 	bic.w	r2, r2, #15
 80085fe:	4332      	orrs	r2, r6
 8008600:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008602:	07df      	lsls	r7, r3, #31
 8008604:	d46e      	bmi.n	80086e4 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	079e      	lsls	r6, r3, #30
 800860a:	f100 80a1 	bmi.w	8008750 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800860e:	4964      	ldr	r1, [pc, #400]	; (80087a0 <HAL_RCC_ClockConfig+0x234>)
 8008610:	680a      	ldr	r2, [r1, #0]
 8008612:	f002 020f 	and.w	r2, r2, #15
 8008616:	42aa      	cmp	r2, r5
 8008618:	f200 80a8 	bhi.w	800876c <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800861c:	0758      	lsls	r0, r3, #29
 800861e:	f100 80b1 	bmi.w	8008784 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008622:	0719      	lsls	r1, r3, #28
 8008624:	d50b      	bpl.n	800863e <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008626:	495f      	ldr	r1, [pc, #380]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 8008628:	6965      	ldr	r5, [r4, #20]
 800862a:	69c8      	ldr	r0, [r1, #28]
 800862c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008630:	4285      	cmp	r5, r0
 8008632:	d204      	bcs.n	800863e <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008634:	69ca      	ldr	r2, [r1, #28]
 8008636:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800863a:	432a      	orrs	r2, r5
 800863c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800863e:	06da      	lsls	r2, r3, #27
 8008640:	d50b      	bpl.n	800865a <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008642:	4958      	ldr	r1, [pc, #352]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 8008644:	69a5      	ldr	r5, [r4, #24]
 8008646:	69c8      	ldr	r0, [r1, #28]
 8008648:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800864c:	4285      	cmp	r5, r0
 800864e:	d204      	bcs.n	800865a <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008650:	69ca      	ldr	r2, [r1, #28]
 8008652:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008656:	432a      	orrs	r2, r5
 8008658:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800865a:	069b      	lsls	r3, r3, #26
 800865c:	d50b      	bpl.n	8008676 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800865e:	4a51      	ldr	r2, [pc, #324]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 8008660:	69e0      	ldr	r0, [r4, #28]
 8008662:	6a11      	ldr	r1, [r2, #32]
 8008664:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8008668:	4288      	cmp	r0, r1
 800866a:	d204      	bcs.n	8008676 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800866c:	6a13      	ldr	r3, [r2, #32]
 800866e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008672:	4303      	orrs	r3, r0
 8008674:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008676:	f7ff fedd 	bl	8008434 <HAL_RCC_GetSysClockFreq>
 800867a:	494a      	ldr	r1, [pc, #296]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 800867c:	4a4a      	ldr	r2, [pc, #296]	; (80087a8 <HAL_RCC_ClockConfig+0x23c>)
 800867e:	698b      	ldr	r3, [r1, #24]
 8008680:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008684:	5cd3      	ldrb	r3, [r2, r3]
 8008686:	f003 031f 	and.w	r3, r3, #31
 800868a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800868c:	698b      	ldr	r3, [r1, #24]
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	5cd3      	ldrb	r3, [r2, r3]
 8008694:	4a45      	ldr	r2, [pc, #276]	; (80087ac <HAL_RCC_ClockConfig+0x240>)
 8008696:	f003 031f 	and.w	r3, r3, #31
 800869a:	fa20 f303 	lsr.w	r3, r0, r3
 800869e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80086a0:	4b43      	ldr	r3, [pc, #268]	; (80087b0 <HAL_RCC_ClockConfig+0x244>)
 80086a2:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80086a4:	4b43      	ldr	r3, [pc, #268]	; (80087b4 <HAL_RCC_ClockConfig+0x248>)
}
 80086a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	f7fb bab4 	b.w	8003c18 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086b0:	6813      	ldr	r3, [r2, #0]
 80086b2:	f023 030f 	bic.w	r3, r3, #15
 80086b6:	430b      	orrs	r3, r1
 80086b8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ba:	6813      	ldr	r3, [r2, #0]
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	428b      	cmp	r3, r1
 80086c2:	f47f af58 	bne.w	8008576 <HAL_RCC_ClockConfig+0xa>
 80086c6:	e760      	b.n	800858a <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086c8:	4936      	ldr	r1, [pc, #216]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 80086ca:	6926      	ldr	r6, [r4, #16]
 80086cc:	6988      	ldr	r0, [r1, #24]
 80086ce:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80086d2:	4286      	cmp	r6, r0
 80086d4:	f67f af5d 	bls.w	8008592 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086d8:	698a      	ldr	r2, [r1, #24]
 80086da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80086de:	4332      	orrs	r2, r6
 80086e0:	618a      	str	r2, [r1, #24]
 80086e2:	e756      	b.n	8008592 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80086e4:	4b2f      	ldr	r3, [pc, #188]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 80086e6:	68a1      	ldr	r1, [r4, #8]
 80086e8:	699a      	ldr	r2, [r3, #24]
 80086ea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80086ee:	430a      	orrs	r2, r1
 80086f0:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086f2:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086f4:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086f6:	2902      	cmp	r1, #2
 80086f8:	d11d      	bne.n	8008736 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086fa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086fe:	f43f af3a 	beq.w	8008576 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008702:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008704:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008708:	4e26      	ldr	r6, [pc, #152]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800870a:	f022 0207 	bic.w	r2, r2, #7
 800870e:	430a      	orrs	r2, r1
 8008710:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8008712:	f7fc fda3 	bl	800525c <HAL_GetTick>
 8008716:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008718:	6933      	ldr	r3, [r6, #16]
 800871a:	6862      	ldr	r2, [r4, #4]
 800871c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008720:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008724:	f43f af6f 	beq.w	8008606 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008728:	f7fc fd98 	bl	800525c <HAL_GetTick>
 800872c:	1bc0      	subs	r0, r0, r7
 800872e:	4540      	cmp	r0, r8
 8008730:	d9f2      	bls.n	8008718 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8008732:	2003      	movs	r0, #3
 8008734:	e720      	b.n	8008578 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008736:	2903      	cmp	r1, #3
 8008738:	d102      	bne.n	8008740 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800873a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800873e:	e7de      	b.n	80086fe <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008740:	2901      	cmp	r1, #1
 8008742:	d102      	bne.n	800874a <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008744:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008748:	e7d9      	b.n	80086fe <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800874a:	f012 0f04 	tst.w	r2, #4
 800874e:	e7d6      	b.n	80086fe <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008750:	4914      	ldr	r1, [pc, #80]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 8008752:	68e6      	ldr	r6, [r4, #12]
 8008754:	6988      	ldr	r0, [r1, #24]
 8008756:	f000 000f 	and.w	r0, r0, #15
 800875a:	4286      	cmp	r6, r0
 800875c:	f4bf af57 	bcs.w	800860e <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008760:	698a      	ldr	r2, [r1, #24]
 8008762:	f022 020f 	bic.w	r2, r2, #15
 8008766:	4332      	orrs	r2, r6
 8008768:	618a      	str	r2, [r1, #24]
 800876a:	e750      	b.n	800860e <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800876c:	680a      	ldr	r2, [r1, #0]
 800876e:	f022 020f 	bic.w	r2, r2, #15
 8008772:	432a      	orrs	r2, r5
 8008774:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008776:	680a      	ldr	r2, [r1, #0]
 8008778:	f002 020f 	and.w	r2, r2, #15
 800877c:	42aa      	cmp	r2, r5
 800877e:	f47f aefa 	bne.w	8008576 <HAL_RCC_ClockConfig+0xa>
 8008782:	e74b      	b.n	800861c <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008784:	4907      	ldr	r1, [pc, #28]	; (80087a4 <HAL_RCC_ClockConfig+0x238>)
 8008786:	6925      	ldr	r5, [r4, #16]
 8008788:	6988      	ldr	r0, [r1, #24]
 800878a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800878e:	4285      	cmp	r5, r0
 8008790:	f4bf af47 	bcs.w	8008622 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008794:	698a      	ldr	r2, [r1, #24]
 8008796:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800879a:	432a      	orrs	r2, r5
 800879c:	618a      	str	r2, [r1, #24]
 800879e:	e740      	b.n	8008622 <HAL_RCC_ClockConfig+0xb6>
 80087a0:	52002000 	.word	0x52002000
 80087a4:	58024400 	.word	0x58024400
 80087a8:	08014870 	.word	0x08014870
 80087ac:	24000004 	.word	0x24000004
 80087b0:	24000000 	.word	0x24000000
 80087b4:	2400000c 	.word	0x2400000c

080087b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087b8:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80087ba:	f7ff fe3b 	bl	8008434 <HAL_RCC_GetSysClockFreq>
 80087be:	4a0b      	ldr	r2, [pc, #44]	; (80087ec <HAL_RCC_GetHCLKFreq+0x34>)
 80087c0:	490b      	ldr	r1, [pc, #44]	; (80087f0 <HAL_RCC_GetHCLKFreq+0x38>)
 80087c2:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087c4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80087c6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087ca:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80087ce:	5ccb      	ldrb	r3, [r1, r3]
 80087d0:	f003 031f 	and.w	r3, r3, #31
 80087d4:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087d8:	5c88      	ldrb	r0, [r1, r2]
 80087da:	4a06      	ldr	r2, [pc, #24]	; (80087f4 <HAL_RCC_GetHCLKFreq+0x3c>)
 80087dc:	f000 001f 	and.w	r0, r0, #31
 80087e0:	fa23 f000 	lsr.w	r0, r3, r0
 80087e4:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087e6:	4a04      	ldr	r2, [pc, #16]	; (80087f8 <HAL_RCC_GetHCLKFreq+0x40>)
 80087e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80087ea:	bd08      	pop	{r3, pc}
 80087ec:	58024400 	.word	0x58024400
 80087f0:	08014870 	.word	0x08014870
 80087f4:	24000004 	.word	0x24000004
 80087f8:	24000000 	.word	0x24000000

080087fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087fc:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80087fe:	f7ff ffdb 	bl	80087b8 <HAL_RCC_GetHCLKFreq>
 8008802:	4b05      	ldr	r3, [pc, #20]	; (8008818 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008804:	4a05      	ldr	r2, [pc, #20]	; (800881c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800880c:	5cd3      	ldrb	r3, [r2, r3]
 800880e:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008812:	40d8      	lsrs	r0, r3
 8008814:	bd08      	pop	{r3, pc}
 8008816:	bf00      	nop
 8008818:	58024400 	.word	0x58024400
 800881c:	08014870 	.word	0x08014870

08008820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008820:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008822:	f7ff ffc9 	bl	80087b8 <HAL_RCC_GetHCLKFreq>
 8008826:	4b05      	ldr	r3, [pc, #20]	; (800883c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008828:	4a05      	ldr	r2, [pc, #20]	; (8008840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800882a:	69db      	ldr	r3, [r3, #28]
 800882c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008830:	5cd3      	ldrb	r3, [r2, r3]
 8008832:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008836:	40d8      	lsrs	r0, r3
 8008838:	bd08      	pop	{r3, pc}
 800883a:	bf00      	nop
 800883c:	58024400 	.word	0x58024400
 8008840:	08014870 	.word	0x08014870

08008844 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008844:	233f      	movs	r3, #63	; 0x3f
 8008846:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008848:	4b11      	ldr	r3, [pc, #68]	; (8008890 <HAL_RCC_GetClockConfig+0x4c>)
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	f002 0207 	and.w	r2, r2, #7
 8008850:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008852:	699a      	ldr	r2, [r3, #24]
 8008854:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8008858:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800885a:	699a      	ldr	r2, [r3, #24]
 800885c:	f002 020f 	and.w	r2, r2, #15
 8008860:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008862:	699a      	ldr	r2, [r3, #24]
 8008864:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008868:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800886a:	69da      	ldr	r2, [r3, #28]
 800886c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008870:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008872:	69da      	ldr	r2, [r3, #28]
 8008874:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008878:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800887a:	6a1b      	ldr	r3, [r3, #32]
 800887c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008880:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008882:	4b04      	ldr	r3, [pc, #16]	; (8008894 <HAL_RCC_GetClockConfig+0x50>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 030f 	and.w	r3, r3, #15
 800888a:	600b      	str	r3, [r1, #0]
}
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	58024400 	.word	0x58024400
 8008894:	52002000 	.word	0x52002000

08008898 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800889a:	4c3a      	ldr	r4, [pc, #232]	; (8008984 <RCCEx_PLL2_Config+0xec>)
{
 800889c:	4606      	mov	r6, r0
 800889e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d069      	beq.n	800897e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088b0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088b2:	f7fc fcd3 	bl	800525c <HAL_GetTick>
 80088b6:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	011a      	lsls	r2, r3, #4
 80088bc:	d44b      	bmi.n	8008956 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80088be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80088c0:	6832      	ldr	r2, [r6, #0]
 80088c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088c6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80088ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80088cc:	68b3      	ldr	r3, [r6, #8]
 80088ce:	68f2      	ldr	r2, [r6, #12]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	3a01      	subs	r2, #1
 80088d4:	025b      	lsls	r3, r3, #9
 80088d6:	0412      	lsls	r2, r2, #16
 80088d8:	b29b      	uxth	r3, r3
 80088da:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80088de:	4313      	orrs	r3, r2
 80088e0:	6872      	ldr	r2, [r6, #4]
 80088e2:	3a01      	subs	r2, #1
 80088e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088e8:	4313      	orrs	r3, r2
 80088ea:	6932      	ldr	r2, [r6, #16]
 80088ec:	3a01      	subs	r2, #1
 80088ee:	0612      	lsls	r2, r2, #24
 80088f0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80088f4:	4313      	orrs	r3, r2
 80088f6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80088f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80088fa:	6972      	ldr	r2, [r6, #20]
 80088fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008900:	4313      	orrs	r3, r2
 8008902:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008904:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008906:	69b2      	ldr	r2, [r6, #24]
 8008908:	f023 0320 	bic.w	r3, r3, #32
 800890c:	4313      	orrs	r3, r2
 800890e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008910:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008912:	f023 0310 	bic.w	r3, r3, #16
 8008916:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008918:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800891a:	69f2      	ldr	r2, [r6, #28]
 800891c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008920:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008924:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008928:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800892a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800892c:	f043 0310 	orr.w	r3, r3, #16
 8008930:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008932:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008934:	b9b5      	cbnz	r5, 8008964 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008936:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800893a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800893c:	4c11      	ldr	r4, [pc, #68]	; (8008984 <RCCEx_PLL2_Config+0xec>)
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008944:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008946:	f7fc fc89 	bl	800525c <HAL_GetTick>
 800894a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	011b      	lsls	r3, r3, #4
 8008950:	d50f      	bpl.n	8008972 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8008952:	2000      	movs	r0, #0
 8008954:	e005      	b.n	8008962 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008956:	f7fc fc81 	bl	800525c <HAL_GetTick>
 800895a:	1bc0      	subs	r0, r0, r7
 800895c:	2802      	cmp	r0, #2
 800895e:	d9ab      	bls.n	80088b8 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8008960:	2003      	movs	r0, #3
}
 8008962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008964:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008966:	bf0c      	ite	eq
 8008968:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800896c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008970:	e7e3      	b.n	800893a <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008972:	f7fc fc73 	bl	800525c <HAL_GetTick>
 8008976:	1b40      	subs	r0, r0, r5
 8008978:	2802      	cmp	r0, #2
 800897a:	d9e7      	bls.n	800894c <RCCEx_PLL2_Config+0xb4>
 800897c:	e7f0      	b.n	8008960 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800897e:	2001      	movs	r0, #1
 8008980:	e7ef      	b.n	8008962 <RCCEx_PLL2_Config+0xca>
 8008982:	bf00      	nop
 8008984:	58024400 	.word	0x58024400

08008988 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800898a:	4c3a      	ldr	r4, [pc, #232]	; (8008a74 <RCCEx_PLL3_Config+0xec>)
{
 800898c:	4606      	mov	r6, r0
 800898e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008990:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008992:	f003 0303 	and.w	r3, r3, #3
 8008996:	2b03      	cmp	r3, #3
 8008998:	d069      	beq.n	8008a6e <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089a0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a2:	f7fc fc5b 	bl	800525c <HAL_GetTick>
 80089a6:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	009a      	lsls	r2, r3, #2
 80089ac:	d44b      	bmi.n	8008a46 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80089ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80089b0:	6832      	ldr	r2, [r6, #0]
 80089b2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80089b6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80089ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80089bc:	68b3      	ldr	r3, [r6, #8]
 80089be:	68f2      	ldr	r2, [r6, #12]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	3a01      	subs	r2, #1
 80089c4:	025b      	lsls	r3, r3, #9
 80089c6:	0412      	lsls	r2, r2, #16
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80089ce:	4313      	orrs	r3, r2
 80089d0:	6872      	ldr	r2, [r6, #4]
 80089d2:	3a01      	subs	r2, #1
 80089d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089d8:	4313      	orrs	r3, r2
 80089da:	6932      	ldr	r2, [r6, #16]
 80089dc:	3a01      	subs	r2, #1
 80089de:	0612      	lsls	r2, r2, #24
 80089e0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80089e4:	4313      	orrs	r3, r2
 80089e6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80089e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089ea:	6972      	ldr	r2, [r6, #20]
 80089ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80089f0:	4313      	orrs	r3, r2
 80089f2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80089f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089f6:	69b2      	ldr	r2, [r6, #24]
 80089f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089fc:	4313      	orrs	r3, r2
 80089fe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a06:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008a0a:	69f2      	ldr	r2, [r6, #28]
 8008a0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a10:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008a14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008a18:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a20:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008a24:	b9b5      	cbnz	r5, 8008a54 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a2a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a2c:	4c11      	ldr	r4, [pc, #68]	; (8008a74 <RCCEx_PLL3_Config+0xec>)
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a34:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a36:	f7fc fc11 	bl	800525c <HAL_GetTick>
 8008a3a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	d50f      	bpl.n	8008a62 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8008a42:	2000      	movs	r0, #0
 8008a44:	e005      	b.n	8008a52 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a46:	f7fc fc09 	bl	800525c <HAL_GetTick>
 8008a4a:	1bc0      	subs	r0, r0, r7
 8008a4c:	2802      	cmp	r0, #2
 8008a4e:	d9ab      	bls.n	80089a8 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8008a50:	2003      	movs	r0, #3
}
 8008a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a54:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a56:	bf0c      	ite	eq
 8008a58:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a5c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008a60:	e7e3      	b.n	8008a2a <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a62:	f7fc fbfb 	bl	800525c <HAL_GetTick>
 8008a66:	1b40      	subs	r0, r0, r5
 8008a68:	2802      	cmp	r0, #2
 8008a6a:	d9e7      	bls.n	8008a3c <RCCEx_PLL3_Config+0xb4>
 8008a6c:	e7f0      	b.n	8008a50 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8008a6e:	2001      	movs	r0, #1
 8008a70:	e7ef      	b.n	8008a52 <RCCEx_PLL3_Config+0xca>
 8008a72:	bf00      	nop
 8008a74:	58024400 	.word	0x58024400

08008a78 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a7c:	6806      	ldr	r6, [r0, #0]
{
 8008a7e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a80:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8008a84:	d023      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008a86:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a8c:	d018      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8008a8e:	d802      	bhi.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8008a90:	b183      	cbz	r3, 8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8008a92:	2601      	movs	r6, #1
 8008a94:	e01b      	b.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a9a:	d023      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8008a9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aa0:	d1f7      	bne.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008aa2:	4a9f      	ldr	r2, [pc, #636]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008aa4:	2600      	movs	r6, #0
 8008aa6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008aa8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008aaa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008aae:	430b      	orrs	r3, r1
 8008ab0:	6513      	str	r3, [r2, #80]	; 0x50
 8008ab2:	e00c      	b.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab4:	4a9a      	ldr	r2, [pc, #616]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008ab6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008abc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008abe:	e7f0      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ac0:	2102      	movs	r1, #2
 8008ac2:	3004      	adds	r0, #4
 8008ac4:	f7ff fee8 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ac8:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008aca:	2800      	cmp	r0, #0
 8008acc:	d0e9      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	05dd      	lsls	r5, r3, #23
 8008ad2:	d534      	bpl.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008ad4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	d830      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8008ada:	e8df f003 	tbb	[pc, r3]
 8008ade:	0f08      	.short	0x0f08
 8008ae0:	0d29      	.short	0x0d29
 8008ae2:	0d          	.byte	0x0d
 8008ae3:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ae4:	2102      	movs	r1, #2
 8008ae6:	3024      	adds	r0, #36	; 0x24
 8008ae8:	f7ff ff4e 	bl	8008988 <RCCEx_PLL3_Config>
 8008aec:	e7ec      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aee:	4a8c      	ldr	r2, [pc, #560]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008af0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008af6:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8008af8:	4635      	mov	r5, r6
 8008afa:	e004      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008afc:	2100      	movs	r1, #0
 8008afe:	1d20      	adds	r0, r4, #4
 8008b00:	f7ff feca 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b04:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b06:	b9e5      	cbnz	r5, 8008b42 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b08:	4a85      	ldr	r2, [pc, #532]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008b0a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008b0c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008b0e:	f023 0307 	bic.w	r3, r3, #7
 8008b12:	430b      	orrs	r3, r1
 8008b14:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	0598      	lsls	r0, r3, #22
 8008b1a:	d521      	bpl.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008b1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b1e:	2b80      	cmp	r3, #128	; 0x80
 8008b20:	d03b      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
 8008b22:	d810      	bhi.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8008b24:	b36b      	cbz	r3, 8008b82 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8008b26:	2b40      	cmp	r3, #64	; 0x40
 8008b28:	d031      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x116>
      ret = HAL_ERROR;
 8008b2a:	2601      	movs	r6, #1
 8008b2c:	4635      	mov	r5, r6
 8008b2e:	e017      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b30:	2100      	movs	r1, #0
 8008b32:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b36:	f7ff ff27 	bl	8008988 <RCCEx_PLL3_Config>
 8008b3a:	e7e3      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = HAL_ERROR;
 8008b3c:	2601      	movs	r6, #1
 8008b3e:	4635      	mov	r5, r6
 8008b40:	e7e9      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8008b42:	462e      	mov	r6, r5
 8008b44:	e7e7      	b.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008b46:	2bc0      	cmp	r3, #192	; 0xc0
 8008b48:	d002      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8008b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b4e:	d1ec      	bne.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    if(ret == HAL_OK)
 8008b50:	bb4d      	cbnz	r5, 8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008b52:	4a73      	ldr	r2, [pc, #460]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008b54:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008b56:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008b58:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8008b5c:	430b      	orrs	r3, r1
 8008b5e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	0559      	lsls	r1, r3, #21
 8008b64:	d530      	bpl.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008b66:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8008b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b6e:	d047      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8008b70:	d81b      	bhi.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x132>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d038      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8008b76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b7a:	d03b      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = HAL_ERROR;
 8008b7c:	2601      	movs	r6, #1
 8008b7e:	4635      	mov	r5, r6
 8008b80:	e022      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b82:	4a67      	ldr	r2, [pc, #412]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008b84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008b8c:	e7e0      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b8e:	2100      	movs	r1, #0
 8008b90:	1d20      	adds	r0, r4, #4
 8008b92:	f7ff fe81 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b96:	4605      	mov	r5, r0
      break;
 8008b98:	e7da      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ba0:	f7ff fef2 	bl	8008988 <RCCEx_PLL3_Config>
 8008ba4:	e7f7      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8008ba6:	462e      	mov	r6, r5
 8008ba8:	e7da      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008baa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bae:	d002      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008bb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bb4:	d1e2      	bne.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(ret == HAL_OK)
 8008bb6:	bb4d      	cbnz	r5, 8008c0c <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008bb8:	4a59      	ldr	r2, [pc, #356]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008bba:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8008bbe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008bc0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8008bc4:	430b      	orrs	r3, r1
 8008bc6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	051a      	lsls	r2, r3, #20
 8008bcc:	d52f      	bpl.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008bce:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8008bd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bd6:	d041      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008bd8:	d81a      	bhi.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008bda:	b39b      	cbz	r3, 8008c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008be0:	d036      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      ret = HAL_ERROR;
 8008be2:	2601      	movs	r6, #1
 8008be4:	4635      	mov	r5, r6
 8008be6:	e022      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008be8:	4a4d      	ldr	r2, [pc, #308]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008bea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bf0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008bf2:	e7e0      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	1d20      	adds	r0, r4, #4
 8008bf8:	f7ff fe4e 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008bfc:	4605      	mov	r5, r0
      break;
 8008bfe:	e7da      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c00:	2100      	movs	r1, #0
 8008c02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c06:	f7ff febf 	bl	8008988 <RCCEx_PLL3_Config>
 8008c0a:	e7f7      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x184>
 8008c0c:	462e      	mov	r6, r5
 8008c0e:	e7db      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008c10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c14:	d002      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008c16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c1a:	d1e2      	bne.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    if(ret == HAL_OK)
 8008c1c:	bb25      	cbnz	r5, 8008c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008c1e:	4a40      	ldr	r2, [pc, #256]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008c20:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8008c24:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008c26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c2a:	430b      	orrs	r3, r1
 8008c2c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	019b      	lsls	r3, r3, #6
 8008c32:	d527      	bpl.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->QspiClockSelection)
 8008c34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008c36:	2b10      	cmp	r3, #16
 8008c38:	d033      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c3a:	d817      	bhi.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8008c3c:	b1d3      	cbz	r3, 8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = HAL_ERROR;
 8008c3e:	2601      	movs	r6, #1
 8008c40:	4635      	mov	r5, r6
 8008c42:	e01f      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c44:	4a36      	ldr	r2, [pc, #216]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008c46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c4c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008c4e:	e7e5      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c50:	2100      	movs	r1, #0
 8008c52:	1d20      	adds	r0, r4, #4
 8008c54:	f7ff fe20 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c58:	4605      	mov	r5, r0
      break;
 8008c5a:	e7df      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c62:	f7ff fe91 	bl	8008988 <RCCEx_PLL3_Config>
 8008c66:	e7f7      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8008c68:	462e      	mov	r6, r5
 8008c6a:	e7e0      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->QspiClockSelection)
 8008c6c:	2b20      	cmp	r3, #32
 8008c6e:	d01e      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x236>
 8008c70:	2b30      	cmp	r3, #48	; 0x30
 8008c72:	d1e4      	bne.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    if(ret == HAL_OK)
 8008c74:	bb0d      	cbnz	r5, 8008cba <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008c76:	4a2a      	ldr	r2, [pc, #168]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008c78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008c7a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008c7c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008c80:	430b      	orrs	r3, r1
 8008c82:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	04df      	lsls	r7, r3, #19
 8008c88:	d527      	bpl.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x262>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008c8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c90:	d03e      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008c92:	d814      	bhi.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x246>
 8008c94:	b383      	cbz	r3, 8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8008c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c9a:	d033      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      ret = HAL_ERROR;
 8008c9c:	2601      	movs	r6, #1
 8008c9e:	4635      	mov	r5, r6
 8008ca0:	e01b      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x262>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ca2:	4a1f      	ldr	r2, [pc, #124]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008ca4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008caa:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008cac:	e7e2      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008cae:	2102      	movs	r1, #2
 8008cb0:	1d20      	adds	r0, r4, #4
 8008cb2:	f7ff fdf1 	bl	8008898 <RCCEx_PLL2_Config>
 8008cb6:	4605      	mov	r5, r0
      break;
 8008cb8:	e7dc      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8008cba:	462e      	mov	r6, r5
 8008cbc:	e7e2      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008cbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cc2:	d002      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x252>
 8008cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cc8:	d1e8      	bne.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8008cca:	bb3d      	cbnz	r5, 8008d1c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ccc:	4a14      	ldr	r2, [pc, #80]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008cce:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008cd0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd6:	430b      	orrs	r3, r1
 8008cd8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	0498      	lsls	r0, r3, #18
 8008cde:	d532      	bpl.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ce0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ce6:	d044      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8008ce8:	d81c      	bhi.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008cea:	b323      	cbz	r3, 8008d36 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8008cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cf0:	d039      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = HAL_ERROR;
 8008cf2:	2601      	movs	r6, #1
 8008cf4:	4635      	mov	r5, r6
 8008cf6:	e026      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cf8:	4a09      	ldr	r2, [pc, #36]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008cfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d00:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008d02:	e7e2      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d04:	2100      	movs	r1, #0
 8008d06:	1d20      	adds	r0, r4, #4
 8008d08:	f7ff fdc6 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d0c:	4605      	mov	r5, r0
      break;
 8008d0e:	e7dc      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x252>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d10:	2100      	movs	r1, #0
 8008d12:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d16:	f7ff fe37 	bl	8008988 <RCCEx_PLL3_Config>
 8008d1a:	e7f7      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x294>
 8008d1c:	462e      	mov	r6, r5
 8008d1e:	e7dc      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008d20:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8008d24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d28:	d005      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8008d2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d2e:	d002      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8008d30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d34:	d1dd      	bne.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    if(ret == HAL_OK)
 8008d36:	bb15      	cbnz	r5, 8008d7e <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008d38:	4aa0      	ldr	r2, [pc, #640]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8008d3a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8008d3c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008d3e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008d42:	430b      	orrs	r3, r1
 8008d44:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	0459      	lsls	r1, r3, #17
 8008d4a:	d52d      	bpl.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008d4c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8008d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d54:	d04b      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d56:	d814      	bhi.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8008d58:	b1e3      	cbz	r3, 8008d94 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8008d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d5e:	d040      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      ret = HAL_ERROR;
 8008d60:	2601      	movs	r6, #1
 8008d62:	4635      	mov	r5, r6
 8008d64:	e020      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d66:	2101      	movs	r1, #1
 8008d68:	1d20      	adds	r0, r4, #4
 8008d6a:	f7ff fd95 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d6e:	4605      	mov	r5, r0
      break;
 8008d70:	e7e1      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d72:	2101      	movs	r1, #1
 8008d74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d78:	f7ff fe06 	bl	8008988 <RCCEx_PLL3_Config>
 8008d7c:	e7f7      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8008d7e:	462e      	mov	r6, r5
 8008d80:	e7e1      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d86:	d005      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8008d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d8c:	d002      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8008d8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d92:	d1e5      	bne.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    if(ret == HAL_OK)
 8008d94:	2d00      	cmp	r5, #0
 8008d96:	d130      	bne.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x382>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d98:	4a88      	ldr	r2, [pc, #544]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8008d9a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8008d9e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008da0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8008da4:	430b      	orrs	r3, r1
 8008da6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	041a      	lsls	r2, r3, #16
 8008dac:	d50f      	bpl.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x356>
    switch(PeriphClkInit->FdcanClockSelection)
 8008dae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008db4:	d023      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x386>
 8008db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dba:	d026      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008dbc:	bb5b      	cbnz	r3, 8008e16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    if(ret == HAL_OK)
 8008dbe:	bb6d      	cbnz	r5, 8008e1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008dc0:	4a7e      	ldr	r2, [pc, #504]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8008dc2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008dc4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008dc6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008dca:	430b      	orrs	r3, r1
 8008dcc:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	01db      	lsls	r3, r3, #7
 8008dd2:	d533      	bpl.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch(PeriphClkInit->FmcClockSelection)
 8008dd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d874      	bhi.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8008dda:	e8df f003 	tbb	[pc, r3]
 8008dde:	2126      	.short	0x2126
 8008de0:	266d      	.short	0x266d
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008de2:	2101      	movs	r1, #1
 8008de4:	1d20      	adds	r0, r4, #4
 8008de6:	f7ff fd57 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008dea:	4605      	mov	r5, r0
      break;
 8008dec:	e7d2      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008dee:	2101      	movs	r1, #1
 8008df0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008df4:	f7ff fdc8 	bl	8008988 <RCCEx_PLL3_Config>
 8008df8:	e7f7      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008dfa:	462e      	mov	r6, r5
 8008dfc:	e7d4      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dfe:	4a6f      	ldr	r2, [pc, #444]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8008e00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e06:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008e08:	e7d9      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	1d20      	adds	r0, r4, #4
 8008e0e:	f7ff fd43 	bl	8008898 <RCCEx_PLL2_Config>
 8008e12:	4605      	mov	r5, r0
      break;
 8008e14:	e7d3      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x346>
      ret = HAL_ERROR;
 8008e16:	2601      	movs	r6, #1
 8008e18:	4635      	mov	r5, r6
 8008e1a:	e7d8      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x356>
 8008e1c:	462e      	mov	r6, r5
 8008e1e:	e7d6      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x356>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e20:	4a66      	ldr	r2, [pc, #408]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8008e22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e28:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008e2a:	2d00      	cmp	r5, #0
 8008e2c:	d14d      	bne.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x452>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e2e:	4a63      	ldr	r2, [pc, #396]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8008e30:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008e32:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008e34:	f023 0303 	bic.w	r3, r3, #3
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	025f      	lsls	r7, r3, #9
 8008e40:	d54d      	bpl.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x466>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e42:	4f5f      	ldr	r7, [pc, #380]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e4a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8008e4c:	f7fc fa06 	bl	800525c <HAL_GetTick>
 8008e50:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	05d8      	lsls	r0, r3, #23
 8008e56:	d53a      	bpl.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x456>
    if(ret == HAL_OK)
 8008e58:	2d00      	cmp	r5, #0
 8008e5a:	d161      	bne.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008e5c:	4b57      	ldr	r3, [pc, #348]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8008e5e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8008e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e64:	4042      	eors	r2, r0
 8008e66:	f412 7f40 	tst.w	r2, #768	; 0x300
 8008e6a:	d00b      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e6e:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e74:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008e78:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e7a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008e7c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008e80:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8008e82:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008e84:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8008e88:	d036      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e8a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8008e8e:	494b      	ldr	r1, [pc, #300]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8008e90:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008e94:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8008e98:	d13e      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008e9a:	6908      	ldr	r0, [r1, #16]
 8008e9c:	4a49      	ldr	r2, [pc, #292]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8008e9e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8008ea2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8008ea6:	4302      	orrs	r2, r0
 8008ea8:	610a      	str	r2, [r1, #16]
 8008eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008eae:	4a43      	ldr	r2, [pc, #268]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8008eb0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008eb2:	430b      	orrs	r3, r1
 8008eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8008eb6:	e012      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008eb8:	2102      	movs	r1, #2
 8008eba:	1d20      	adds	r0, r4, #4
 8008ebc:	f7ff fcec 	bl	8008898 <RCCEx_PLL2_Config>
 8008ec0:	4605      	mov	r5, r0
      break;
 8008ec2:	e7b2      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = HAL_ERROR;
 8008ec4:	2601      	movs	r6, #1
 8008ec6:	4635      	mov	r5, r6
 8008ec8:	e7b8      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8008eca:	462e      	mov	r6, r5
 8008ecc:	e7b6      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ece:	f7fc f9c5 	bl	800525c <HAL_GetTick>
 8008ed2:	eba0 0008 	sub.w	r0, r0, r8
 8008ed6:	2864      	cmp	r0, #100	; 0x64
 8008ed8:	d9bb      	bls.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x3da>
        ret = HAL_TIMEOUT;
 8008eda:	2603      	movs	r6, #3
 8008edc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	07da      	lsls	r2, r3, #31
 8008ee2:	d52d      	bpl.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008ee4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008ee6:	2b10      	cmp	r3, #16
 8008ee8:	d03b      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8008eea:	d81b      	bhi.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8008eec:	b303      	cbz	r3, 8008f30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8008eee:	2b08      	cmp	r3, #8
 8008ef0:	d031      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = HAL_ERROR;
 8008ef2:	2601      	movs	r6, #1
 8008ef4:	4635      	mov	r5, r6
 8008ef6:	e023      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
        tickstart = HAL_GetTick();
 8008ef8:	f7fc f9b0 	bl	800525c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008efc:	4f2f      	ldr	r7, [pc, #188]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x544>)
        tickstart = HAL_GetTick();
 8008efe:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f00:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f06:	0799      	lsls	r1, r3, #30
 8008f08:	d4bf      	bmi.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f0a:	f7fc f9a7 	bl	800525c <HAL_GetTick>
 8008f0e:	eba0 0008 	sub.w	r0, r0, r8
 8008f12:	4548      	cmp	r0, r9
 8008f14:	d9f6      	bls.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008f16:	e7e0      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x462>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f18:	690a      	ldr	r2, [r1, #16]
 8008f1a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8008f1e:	e7c3      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8008f20:	462e      	mov	r6, r5
 8008f22:	e7dc      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x466>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008f24:	2b20      	cmp	r3, #32
 8008f26:	d003      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8008f28:	2b28      	cmp	r3, #40	; 0x28
 8008f2a:	d001      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8008f2c:	2b18      	cmp	r3, #24
 8008f2e:	d1e0      	bne.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    if(ret == HAL_OK)
 8008f30:	b9ed      	cbnz	r5, 8008f6e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f32:	4a22      	ldr	r2, [pc, #136]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8008f34:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008f36:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008f38:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008f3c:	430b      	orrs	r3, r1
 8008f3e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	079b      	lsls	r3, r3, #30
 8008f44:	d522      	bpl.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f46:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008f48:	2b05      	cmp	r3, #5
 8008f4a:	d831      	bhi.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008f4c:	e8df f003 	tbb	[pc, r3]
 8008f50:	162a1116 	.word	0x162a1116
 8008f54:	1616      	.short	0x1616
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f56:	2101      	movs	r1, #1
 8008f58:	1d20      	adds	r0, r4, #4
 8008f5a:	f7ff fc9d 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f5e:	4605      	mov	r5, r0
      break;
 8008f60:	e7e6      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f62:	2101      	movs	r1, #1
 8008f64:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f68:	f7ff fd0e 	bl	8008988 <RCCEx_PLL3_Config>
 8008f6c:	e7f7      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008f6e:	462e      	mov	r6, r5
 8008f70:	e7e6      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f72:	2101      	movs	r1, #1
 8008f74:	1d20      	adds	r0, r4, #4
 8008f76:	f7ff fc8f 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f7a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008f7c:	b9dd      	cbnz	r5, 8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x53e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008f7e:	4a0f      	ldr	r2, [pc, #60]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8008f80:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8008f82:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008f84:	f023 0307 	bic.w	r3, r3, #7
 8008f88:	430b      	orrs	r3, r1
 8008f8a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f8c:	6823      	ldr	r3, [r4, #0]
 8008f8e:	075f      	lsls	r7, r3, #29
 8008f90:	d528      	bpl.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008f92:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8008f96:	2b05      	cmp	r3, #5
 8008f98:	d83a      	bhi.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8008f9a:	e8df f003 	tbb	[pc, r3]
 8008f9e:	151a      	.short	0x151a
 8008fa0:	1a1a1a33 	.word	0x1a1a1a33
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008faa:	f7ff fced 	bl	8008988 <RCCEx_PLL3_Config>
 8008fae:	e7e4      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x502>
      ret = HAL_ERROR;
 8008fb0:	2601      	movs	r6, #1
 8008fb2:	4635      	mov	r5, r6
 8008fb4:	e7ea      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008fb6:	462e      	mov	r6, r5
 8008fb8:	e7e8      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008fba:	bf00      	nop
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	58024800 	.word	0x58024800
 8008fc4:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fc8:	2101      	movs	r1, #1
 8008fca:	1d20      	adds	r0, r4, #4
 8008fcc:	f7ff fc64 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fd0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008fd2:	bb05      	cbnz	r5, 8009016 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008fd4:	4a98      	ldr	r2, [pc, #608]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8008fd6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8008fda:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008fdc:	f023 0307 	bic.w	r3, r3, #7
 8008fe0:	430b      	orrs	r3, r1
 8008fe2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	0698      	lsls	r0, r3, #26
 8008fe8:	d529      	bpl.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008fea:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff2:	d03a      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8008ff4:	d811      	bhi.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008ff6:	b1cb      	cbz	r3, 800902c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8008ff8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ffc:	d02f      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      ret = HAL_ERROR;
 8008ffe:	2601      	movs	r6, #1
 8009000:	4635      	mov	r5, r6
 8009002:	e01c      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009004:	2101      	movs	r1, #1
 8009006:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800900a:	f7ff fcbd 	bl	8008988 <RCCEx_PLL3_Config>
 800900e:	e7df      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x558>
      ret = HAL_ERROR;
 8009010:	2601      	movs	r6, #1
 8009012:	4635      	mov	r5, r6
 8009014:	e7e6      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8009016:	462e      	mov	r6, r5
 8009018:	e7e4      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800901a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800901e:	d005      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8009020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009024:	d002      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8009026:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800902a:	d1e8      	bne.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x586>
    if(ret == HAL_OK)
 800902c:	bb1d      	cbnz	r5, 8009076 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800902e:	4a82      	ldr	r2, [pc, #520]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009030:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009034:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009036:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800903a:	430b      	orrs	r3, r1
 800903c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	0659      	lsls	r1, r3, #25
 8009042:	d52c      	bpl.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009044:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800904c:	d03f      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x656>
 800904e:	d814      	bhi.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x602>
 8009050:	b1e3      	cbz	r3, 800908c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8009052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009056:	d034      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      ret = HAL_ERROR;
 8009058:	2601      	movs	r6, #1
 800905a:	4635      	mov	r5, r6
 800905c:	e01f      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x626>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800905e:	2100      	movs	r1, #0
 8009060:	1d20      	adds	r0, r4, #4
 8009062:	f7ff fc19 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009066:	4605      	mov	r5, r0
      break;
 8009068:	e7e0      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800906a:	2102      	movs	r1, #2
 800906c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009070:	f7ff fc8a 	bl	8008988 <RCCEx_PLL3_Config>
 8009074:	e7f7      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8009076:	462e      	mov	r6, r5
 8009078:	e7e1      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800907a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800907e:	d005      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8009080:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009084:	d002      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8009086:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800908a:	d1e5      	bne.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    if(ret == HAL_OK)
 800908c:	bb2d      	cbnz	r5, 80090da <HAL_RCCEx_PeriphCLKConfig+0x662>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800908e:	4a6a      	ldr	r2, [pc, #424]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009090:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8009094:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009096:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800909a:	430b      	orrs	r3, r1
 800909c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	061a      	lsls	r2, r3, #24
 80090a2:	d530      	bpl.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80090a4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80090a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090ac:	f000 80a4 	beq.w	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x780>
 80090b0:	d815      	bhi.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x666>
 80090b2:	b1eb      	cbz	r3, 80090f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80090b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090b8:	f000 8098 	beq.w	80091ec <HAL_RCCEx_PeriphCLKConfig+0x774>
      ret = HAL_ERROR;
 80090bc:	2601      	movs	r6, #1
 80090be:	4635      	mov	r5, r6
 80090c0:	e021      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090c2:	2100      	movs	r1, #0
 80090c4:	1d20      	adds	r0, r4, #4
 80090c6:	f7ff fbe7 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090ca:	4605      	mov	r5, r0
      break;
 80090cc:	e7de      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x614>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090ce:	2102      	movs	r1, #2
 80090d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80090d4:	f7ff fc58 	bl	8008988 <RCCEx_PLL3_Config>
 80090d8:	e7f7      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x652>
 80090da:	462e      	mov	r6, r5
 80090dc:	e7df      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x626>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80090de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090e2:	d005      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80090e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80090e8:	d002      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80090ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80090ee:	d1e5      	bne.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 80090f0:	2d00      	cmp	r5, #0
 80090f2:	f040 8087 	bne.w	8009204 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80090f6:	4a50      	ldr	r2, [pc, #320]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80090f8:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80090fc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80090fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009102:	430b      	orrs	r3, r1
 8009104:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	071b      	lsls	r3, r3, #28
 800910a:	d514      	bpl.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x6be>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800910c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009114:	d107      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009116:	2102      	movs	r1, #2
 8009118:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800911c:	f7ff fc34 	bl	8008988 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8009120:	2800      	cmp	r0, #0
 8009122:	bf18      	it	ne
 8009124:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009126:	4a44      	ldr	r2, [pc, #272]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009128:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800912c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800912e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009132:	430b      	orrs	r3, r1
 8009134:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	06df      	lsls	r7, r3, #27
 800913a:	d514      	bpl.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800913c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009144:	d107      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x6de>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009146:	2102      	movs	r1, #2
 8009148:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800914c:	f7ff fc1c 	bl	8008988 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8009150:	2800      	cmp	r0, #0
 8009152:	bf18      	it	ne
 8009154:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009156:	4a38      	ldr	r2, [pc, #224]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8009158:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800915c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800915e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009162:	430b      	orrs	r3, r1
 8009164:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	0318      	lsls	r0, r3, #12
 800916a:	d517      	bpl.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x724>
    switch(PeriphClkInit->AdcClockSelection)
 800916c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009170:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009174:	d048      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8009176:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800917a:	d005      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x710>
 800917c:	2900      	cmp	r1, #0
 800917e:	d149      	bne.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009180:	1d20      	adds	r0, r4, #4
 8009182:	f7ff fb89 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009186:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009188:	2d00      	cmp	r5, #0
 800918a:	d146      	bne.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800918c:	4a2a      	ldr	r2, [pc, #168]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800918e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009192:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009194:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009198:	430b      	orrs	r3, r1
 800919a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	0359      	lsls	r1, r3, #13
 80091a0:	d518      	bpl.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch(PeriphClkInit->UsbClockSelection)
 80091a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80091a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091aa:	d038      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 80091ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091b0:	d007      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80091b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091b6:	d139      	bne.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091b8:	4a1f      	ldr	r2, [pc, #124]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80091ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80091bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80091c2:	bbb5      	cbnz	r5, 8009232 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091c4:	4a1c      	ldr	r2, [pc, #112]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80091c6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80091ca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80091cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80091d0:	430b      	orrs	r3, r1
 80091d2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	03da      	lsls	r2, r3, #15
 80091d8:	d53e      	bpl.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->SdmmcClockSelection)
 80091da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80091dc:	b373      	cbz	r3, 800923c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 80091de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e2:	f000 808c 	beq.w	80092fe <HAL_RCCEx_PeriphCLKConfig+0x886>
      ret = HAL_ERROR;
 80091e6:	2601      	movs	r6, #1
 80091e8:	4635      	mov	r5, r6
 80091ea:	e035      	b.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091ec:	2100      	movs	r1, #0
 80091ee:	1d20      	adds	r0, r4, #4
 80091f0:	f7ff fb52 	bl	8008898 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091f4:	4605      	mov	r5, r0
      break;
 80091f6:	e77b      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091f8:	2102      	movs	r1, #2
 80091fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80091fe:	f7ff fbc3 	bl	8008988 <RCCEx_PLL3_Config>
 8009202:	e7f7      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8009204:	462e      	mov	r6, r5
 8009206:	e77e      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009208:	2102      	movs	r1, #2
 800920a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800920e:	f7ff fbbb 	bl	8008988 <RCCEx_PLL3_Config>
 8009212:	e7b8      	b.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x70e>
      ret = HAL_ERROR;
 8009214:	2601      	movs	r6, #1
 8009216:	4635      	mov	r5, r6
 8009218:	e7c0      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x724>
 800921a:	462e      	mov	r6, r5
 800921c:	e7be      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x724>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800921e:	2101      	movs	r1, #1
 8009220:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009224:	f7ff fbb0 	bl	8008988 <RCCEx_PLL3_Config>
 8009228:	4605      	mov	r5, r0
      break;
 800922a:	e7ca      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      ret = HAL_ERROR;
 800922c:	2601      	movs	r6, #1
 800922e:	4635      	mov	r5, r6
 8009230:	e7d0      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8009232:	462e      	mov	r6, r5
 8009234:	e7ce      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8009236:	bf00      	nop
 8009238:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800923c:	4a3c      	ldr	r2, [pc, #240]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800923e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009244:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009246:	2d00      	cmp	r5, #0
 8009248:	d15f      	bne.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x892>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800924a:	4a39      	ldr	r2, [pc, #228]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 800924c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800924e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009254:	430b      	orrs	r3, r1
 8009256:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	d507      	bpl.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800925e:	2102      	movs	r1, #2
 8009260:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009264:	f7ff fb90 	bl	8008988 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8009268:	2800      	cmp	r0, #0
 800926a:	bf18      	it	ne
 800926c:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	039f      	lsls	r7, r3, #14
 8009272:	d50e      	bpl.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch(PeriphClkInit->RngClockSelection)
 8009274:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8009276:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800927a:	d050      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800927c:	d847      	bhi.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x896>
 800927e:	2900      	cmp	r1, #0
 8009280:	d14b      	bne.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    if(ret == HAL_OK)
 8009282:	2d00      	cmp	r5, #0
 8009284:	d151      	bne.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009286:	482a      	ldr	r0, [pc, #168]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009288:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800928a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800928e:	430a      	orrs	r2, r1
 8009290:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009292:	02dd      	lsls	r5, r3, #11
 8009294:	d506      	bpl.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009296:	4926      	ldr	r1, [pc, #152]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009298:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800929a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800929c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80092a0:	4302      	orrs	r2, r0
 80092a2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80092a4:	00d8      	lsls	r0, r3, #3
 80092a6:	d507      	bpl.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80092a8:	4921      	ldr	r1, [pc, #132]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80092aa:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80092ae:	690a      	ldr	r2, [r1, #16]
 80092b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092b4:	4302      	orrs	r2, r0
 80092b6:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092b8:	0299      	lsls	r1, r3, #10
 80092ba:	d506      	bpl.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092bc:	491c      	ldr	r1, [pc, #112]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80092be:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80092c0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80092c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80092c6:	4302      	orrs	r2, r0
 80092c8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80092ca:	005a      	lsls	r2, r3, #1
 80092cc:	d509      	bpl.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80092ce:	4a18      	ldr	r2, [pc, #96]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80092d0:	6911      	ldr	r1, [r2, #16]
 80092d2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80092d6:	6111      	str	r1, [r2, #16]
 80092d8:	6911      	ldr	r1, [r2, #16]
 80092da:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80092de:	4301      	orrs	r1, r0
 80092e0:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	da06      	bge.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80092e6:	4a12      	ldr	r2, [pc, #72]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 80092e8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80092ea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80092ec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80092f0:	430b      	orrs	r3, r1
 80092f2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80092f4:	1c30      	adds	r0, r6, #0
 80092f6:	bf18      	it	ne
 80092f8:	2001      	movne	r0, #1
 80092fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80092fe:	2102      	movs	r1, #2
 8009300:	1d20      	adds	r0, r4, #4
 8009302:	f7ff fac9 	bl	8008898 <RCCEx_PLL2_Config>
 8009306:	4605      	mov	r5, r0
      break;
 8009308:	e79d      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800930a:	462e      	mov	r6, r5
 800930c:	e7a4      	b.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->RngClockSelection)
 800930e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009312:	d0b6      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8009314:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8009318:	d0b3      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = HAL_ERROR;
 800931a:	2601      	movs	r6, #1
 800931c:	e7b9      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800931e:	4804      	ldr	r0, [pc, #16]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0x8b8>)
 8009320:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009322:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009326:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8009328:	e7ab      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800932a:	462e      	mov	r6, r5
 800932c:	e7b1      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800932e:	bf00      	nop
 8009330:	58024400 	.word	0x58024400

08009334 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8009334:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009336:	f7ff fa3f 	bl	80087b8 <HAL_RCC_GetHCLKFreq>
 800933a:	4b05      	ldr	r3, [pc, #20]	; (8009350 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800933c:	4a05      	ldr	r2, [pc, #20]	; (8009354 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009344:	5cd3      	ldrb	r3, [r2, r3]
 8009346:	f003 031f 	and.w	r3, r3, #31
}
 800934a:	40d8      	lsrs	r0, r3
 800934c:	bd08      	pop	{r3, pc}
 800934e:	bf00      	nop
 8009350:	58024400 	.word	0x58024400
 8009354:	08014870 	.word	0x08014870

08009358 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009358:	494d      	ldr	r1, [pc, #308]	; (8009490 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
{
 800935a:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800935c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800935e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009360:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009362:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009366:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 808c 	beq.w	8009486 <HAL_RCCEx_GetPLL2ClockFreq+0x12e>
 800936e:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009372:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009376:	f3c2 1300 	ubfx	r3, r2, #4, #1
 800937a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800937e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009382:	436b      	muls	r3, r5
 8009384:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009388:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 800938c:	2b01      	cmp	r3, #1
 800938e:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8009392:	d002      	beq.n	800939a <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8009394:	d30f      	bcc.n	80093b6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8009396:	2b02      	cmp	r3, #2
 8009398:	d067      	beq.n	800946a <HAL_RCCEx_GetPLL2ClockFreq+0x112>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800939a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800939c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8009494 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>
 80093a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a4:	ee07 3a10 	vmov	s14, r3
 80093a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80093ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093b0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80093b4:	e056      	b.n	8009464 <HAL_RCCEx_GetPLL2ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093b6:	680b      	ldr	r3, [r1, #0]
 80093b8:	069b      	lsls	r3, r3, #26
 80093ba:	d546      	bpl.n	800944a <HAL_RCCEx_GetPLL2ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093bc:	680a      	ldr	r2, [r1, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093be:	6b8b      	ldr	r3, [r1, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093c0:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 80093c4:	4a34      	ldr	r2, [pc, #208]	; (8009498 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093ca:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093cc:	ee07 2a10 	vmov	s14, r2
 80093d0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80093d4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80093d8:	ee06 3a90 	vmov	s13, r3
 80093dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80093e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e4:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80093e8:	4a29      	ldr	r2, [pc, #164]	; (8009490 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093ea:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80093ee:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80093f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80093f4:	ee07 3a10 	vmov	s14, r3
 80093f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80093fc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009400:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009404:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009408:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800940c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800940e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009412:	ee07 3a10 	vmov	s14, r3
 8009416:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800941a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800941e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009422:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009426:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800942a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800942c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009430:	ee07 3a10 	vmov	s14, r3
 8009434:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009438:	ee37 6a06 	vadd.f32	s12, s14, s12
 800943c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8009440:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009444:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009448:	bd30      	pop	{r4, r5, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800944a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800944c:	eddf 5a13 	vldr	s11, [pc, #76]	; 800949c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8009450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009454:	ee07 3a10 	vmov	s14, r3
 8009458:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800945c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009460:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009464:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009468:	e7be      	b.n	80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x90>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800946a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800946c:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8009470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009474:	ee07 3a10 	vmov	s14, r3
 8009478:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800947c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009480:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009484:	e7ee      	b.n	8009464 <HAL_RCCEx_GetPLL2ClockFreq+0x10c>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009486:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800948a:	6083      	str	r3, [r0, #8]
}
 800948c:	e7dc      	b.n	8009448 <HAL_RCCEx_GetPLL2ClockFreq+0xf0>
 800948e:	bf00      	nop
 8009490:	58024400 	.word	0x58024400
 8009494:	4a742400 	.word	0x4a742400
 8009498:	03d09000 	.word	0x03d09000
 800949c:	4c742400 	.word	0x4c742400
 80094a0:	4af42400 	.word	0x4af42400

080094a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094a4:	494d      	ldr	r1, [pc, #308]	; (80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
{
 80094a6:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094a8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80094aa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094ac:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80094ae:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80094b2:	6c4d      	ldr	r5, [r1, #68]	; 0x44
  if (pll3m != 0U)
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f000 808c 	beq.w	80095d2 <HAL_RCCEx_GetPLL3ClockFreq+0x12e>
 80094ba:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80094be:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094c2:	f3c2 2300 	ubfx	r3, r2, #8, #1
 80094c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80094ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80094ce:	436b      	muls	r3, r5
 80094d0:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094d4:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 80094d8:	2b01      	cmp	r3, #1
 80094da:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 80094de:	d002      	beq.n	80094e6 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80094e0:	d30f      	bcc.n	8009502 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d067      	beq.n	80095b6 <HAL_RCCEx_GetPLL3ClockFreq+0x112>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094e8:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80095e0 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>
 80094ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f0:	ee07 3a10 	vmov	s14, r3
 80094f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094fc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009500:	e056      	b.n	80095b0 <HAL_RCCEx_GetPLL3ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009502:	680b      	ldr	r3, [r1, #0]
 8009504:	069b      	lsls	r3, r3, #26
 8009506:	d546      	bpl.n	8009596 <HAL_RCCEx_GetPLL3ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009508:	680a      	ldr	r2, [r1, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800950a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800950c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8009510:	4a34      	ldr	r2, [pc, #208]	; (80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009512:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009516:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009518:	ee07 2a10 	vmov	s14, r2
 800951c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009520:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009524:	ee06 3a90 	vmov	s13, r3
 8009528:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800952c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009530:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009534:	4a29      	ldr	r2, [pc, #164]	; (80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009536:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800953a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800953c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009540:	ee07 3a10 	vmov	s14, r3
 8009544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009548:	ee37 7a06 	vadd.f32	s14, s14, s12
 800954c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009550:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009554:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009558:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800955a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800955e:	ee07 3a10 	vmov	s14, r3
 8009562:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009566:	ee37 7a06 	vadd.f32	s14, s14, s12
 800956a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800956e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009572:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009576:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009578:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800957c:	ee07 3a10 	vmov	s14, r3
 8009580:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009584:	ee37 6a06 	vadd.f32	s12, s14, s12
 8009588:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800958c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009590:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009594:	bd30      	pop	{r4, r5, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009596:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009598:	eddf 5a13 	vldr	s11, [pc, #76]	; 80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800959c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a0:	ee07 3a10 	vmov	s14, r3
 80095a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80095a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095ac:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095b0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80095b4:	e7be      	b.n	8009534 <HAL_RCCEx_GetPLL3ClockFreq+0x90>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095b8:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80095ec <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80095bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c0:	ee07 3a10 	vmov	s14, r3
 80095c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80095c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095cc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80095d0:	e7ee      	b.n	80095b0 <HAL_RCCEx_GetPLL3ClockFreq+0x10c>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095d2:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095d6:	6083      	str	r3, [r0, #8]
}
 80095d8:	e7dc      	b.n	8009594 <HAL_RCCEx_GetPLL3ClockFreq+0xf0>
 80095da:	bf00      	nop
 80095dc:	58024400 	.word	0x58024400
 80095e0:	4a742400 	.word	0x4a742400
 80095e4:	03d09000 	.word	0x03d09000
 80095e8:	4c742400 	.word	0x4c742400
 80095ec:	4af42400 	.word	0x4af42400

080095f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095f0:	494d      	ldr	r1, [pc, #308]	; (8009728 <HAL_RCCEx_GetPLL1ClockFreq+0x138>)
{
 80095f2:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095f4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80095f6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80095f8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80095fa:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80095fe:	6b4d      	ldr	r5, [r1, #52]	; 0x34
  if (pll1m != 0U)
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 808c 	beq.w	800971e <HAL_RCCEx_GetPLL1ClockFreq+0x12e>
 8009606:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800960a:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800960e:	f002 0301 	and.w	r3, r2, #1
 8009612:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009616:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800961a:	436b      	muls	r3, r5
 800961c:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009620:	f004 0303 	and.w	r3, r4, #3
    switch (pllsource)
 8009624:	2b01      	cmp	r3, #1
 8009626:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800962a:	d002      	beq.n	8009632 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 800962c:	d30f      	bcc.n	800964e <HAL_RCCEx_GetPLL1ClockFreq+0x5e>
 800962e:	2b02      	cmp	r3, #2
 8009630:	d067      	beq.n	8009702 <HAL_RCCEx_GetPLL1ClockFreq+0x112>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009632:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8009634:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800972c <HAL_RCCEx_GetPLL1ClockFreq+0x13c>
 8009638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800963c:	ee07 3a10 	vmov	s14, r3
 8009640:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009648:	ee77 7a86 	vadd.f32	s15, s15, s12
 800964c:	e056      	b.n	80096fc <HAL_RCCEx_GetPLL1ClockFreq+0x10c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800964e:	680b      	ldr	r3, [r1, #0]
 8009650:	069b      	lsls	r3, r3, #26
 8009652:	d546      	bpl.n	80096e2 <HAL_RCCEx_GetPLL1ClockFreq+0xf2>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009654:	680a      	ldr	r2, [r1, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009656:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009658:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800965c:	4a34      	ldr	r2, [pc, #208]	; (8009730 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800965e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009662:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009664:	ee07 2a10 	vmov	s14, r2
 8009668:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800966c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009670:	ee06 3a90 	vmov	s13, r3
 8009674:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967c:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009680:	4a29      	ldr	r2, [pc, #164]	; (8009728 <HAL_RCCEx_GetPLL1ClockFreq+0x138>)
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009682:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009686:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009688:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800968c:	ee07 3a10 	vmov	s14, r3
 8009690:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009694:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009698:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800969c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80096a0:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80096a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80096a6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80096aa:	ee07 3a10 	vmov	s14, r3
 80096ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80096b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80096b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80096ba:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80096be:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80096c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80096c4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80096c8:	ee07 3a10 	vmov	s14, r3
 80096cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80096d0:	ee37 6a06 	vadd.f32	s12, s14, s12
 80096d4:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80096d8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80096dc:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80096e0:	bd30      	pop	{r4, r5, pc}
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096e2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80096e4:	eddf 5a13 	vldr	s11, [pc, #76]	; 8009734 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80096e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ec:	ee07 3a10 	vmov	s14, r3
 80096f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80096f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096f8:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096fc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009700:	e7be      	b.n	8009680 <HAL_RCCEx_GetPLL1ClockFreq+0x90>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009702:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8009704:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8009738 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800970c:	ee07 3a10 	vmov	s14, r3
 8009710:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009718:	ee77 7a86 	vadd.f32	s15, s15, s12
 800971c:	e7ee      	b.n	80096fc <HAL_RCCEx_GetPLL1ClockFreq+0x10c>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800971e:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009722:	6083      	str	r3, [r0, #8]
}
 8009724:	e7dc      	b.n	80096e0 <HAL_RCCEx_GetPLL1ClockFreq+0xf0>
 8009726:	bf00      	nop
 8009728:	58024400 	.word	0x58024400
 800972c:	4a742400 	.word	0x4a742400
 8009730:	03d09000 	.word	0x03d09000
 8009734:	4c742400 	.word	0x4c742400
 8009738:	4af42400 	.word	0x4af42400

0800973c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800973c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8009740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009742:	d122      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009744:	4b6a      	ldr	r3, [pc, #424]	; (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009748:	f002 0207 	and.w	r2, r2, #7
      switch (saiclocksource)
 800974c:	2a04      	cmp	r2, #4
 800974e:	d82a      	bhi.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8009750:	e8df f002 	tbb	[pc, r2]
 8009754:	c9088503 	.word	0xc9088503
 8009758:	0c          	.byte	0x0c
 8009759:	00          	.byte	0x00
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800975a:	a801      	add	r0, sp, #4
 800975c:	f7ff ff48 	bl	80095f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009760:	9802      	ldr	r0, [sp, #8]
          break;
 8009762:	e080      	b.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009764:	a801      	add	r0, sp, #4
 8009766:	f7ff fe9d 	bl	80094a4 <HAL_RCCEx_GetPLL3ClockFreq>
 800976a:	e07b      	b.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800976c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800976e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8009772:	f000 80ad 	beq.w	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800977a:	f000 80b6 	beq.w	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
            frequency = HSE_VALUE;
 800977e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009782:	485c      	ldr	r0, [pc, #368]	; (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8009784:	bf18      	it	ne
 8009786:	2000      	movne	r0, #0
 8009788:	e06d      	b.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800978a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800978e:	d114      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009790:	4a57      	ldr	r2, [pc, #348]	; (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009792:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009794:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8009798:	2b80      	cmp	r3, #128	; 0x80
 800979a:	d0e3      	beq.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800979c:	d805      	bhi.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0db      	beq.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 80097a2:	2b40      	cmp	r3, #64	; 0x40
      switch (srcclk)
 80097a4:	d05b      	beq.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          frequency = 0;
 80097a6:	2000      	movs	r0, #0
  return frequency;
 80097a8:	e05d      	b.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
      switch (saiclocksource)
 80097aa:	2bc0      	cmp	r3, #192	; 0xc0
 80097ac:	f000 809b 	beq.w	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80097b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
      switch (srcclk)
 80097b4:	d1f7      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80097b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80097b8:	e7d9      	b.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x32>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80097ba:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80097be:	d113      	bne.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80097c0:	4a4b      	ldr	r2, [pc, #300]	; (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80097c2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80097c4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80097c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097cc:	d0ca      	beq.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 80097ce:	d804      	bhi.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d0c2      	beq.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 80097d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097d8:	e7e4      	b.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 80097da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097de:	f000 8082 	beq.w	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80097e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097e6:	e7e5      	b.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80097e8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80097ec:	d112      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80097ee:	4a40      	ldr	r2, [pc, #256]	; (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80097f0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80097f2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 80097f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097fa:	d0b3      	beq.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 80097fc:	d804      	bhi.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d0ab      	beq.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8009802:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009806:	e7cd      	b.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8009808:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800980c:	d06b      	beq.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800980e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009812:	e7cf      	b.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009814:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009818:	d112      	bne.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800981a:	4a35      	ldr	r2, [pc, #212]	; (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800981c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800981e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009826:	d09d      	beq.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8009828:	d804      	bhi.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 800982a:	2b00      	cmp	r3, #0
 800982c:	d095      	beq.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 800982e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009832:	e7b7      	b.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8009834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009838:	d055      	beq.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800983a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800983e:	e7b9      	b.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009840:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009844:	d117      	bne.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009846:	4a2a      	ldr	r2, [pc, #168]	; (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8009848:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800984a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800984e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009852:	d00b      	beq.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8009854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009858:	d0ad      	beq.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1a3      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800985e:	a801      	add	r0, sp, #4
 8009860:	f7ff fd7a 	bl	8009358 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009864:	9801      	ldr	r0, [sp, #4]
}
 8009866:	b005      	add	sp, #20
 8009868:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800986c:	a801      	add	r0, sp, #4
 800986e:	f7ff fe19 	bl	80094a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009872:	9803      	ldr	r0, [sp, #12]
          break;
 8009874:	e7f7      	b.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009876:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800987a:	d10b      	bne.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800987c:	4b1c      	ldr	r3, [pc, #112]	; (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800987e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8009880:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8009884:	f43f af69 	beq.w	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 8009888:	2b00      	cmp	r3, #0
 800988a:	d08c      	beq.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800988c:	a801      	add	r0, sp, #4
 800988e:	f7ff fd63 	bl	8009358 <HAL_RCCEx_GetPLL2ClockFreq>
 8009892:	e7ee      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009894:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009898:	d185      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800989a:	4b15      	ldr	r3, [pc, #84]	; (80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800989c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80098a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098a6:	d018      	beq.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80098a8:	d808      	bhi.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 80098aa:	b19b      	cbz	r3, 80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80098ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098b0:	f47f af79 	bne.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098b4:	a801      	add	r0, sp, #4
 80098b6:	f7ff fd4f 	bl	8009358 <HAL_RCCEx_GetPLL2ClockFreq>
 80098ba:	e751      	b.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
      switch (srcclk)
 80098bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c0:	d013      	beq.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 80098c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098c6:	d00c      	beq.n	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 80098c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098cc:	f47f af6b 	bne.w	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
            frequency = HSI_VALUE;
 80098d0:	4809      	ldr	r0, [pc, #36]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80098d2:	e7c8      	b.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80098d4:	f7ff fd2e 	bl	8009334 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 80098d8:	e7c5      	b.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098da:	a801      	add	r0, sp, #4
 80098dc:	f7ff fde2 	bl	80094a4 <HAL_RCCEx_GetPLL3ClockFreq>
 80098e0:	e73e      	b.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
          frequency = HSE_VALUE;
 80098e2:	4804      	ldr	r0, [pc, #16]	; (80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
          break;
 80098e4:	e7bf      	b.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          frequency = EXTERNAL_CLOCK_VALUE;
 80098e6:	4805      	ldr	r0, [pc, #20]	; (80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80098e8:	e7bd      	b.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = CSI_VALUE;
 80098ea:	4805      	ldr	r0, [pc, #20]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80098ec:	e7bb      	b.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80098ee:	bf00      	nop
 80098f0:	58024400 	.word	0x58024400
 80098f4:	007a1200 	.word	0x007a1200
 80098f8:	03d09000 	.word	0x03d09000
 80098fc:	00bb8000 	.word	0x00bb8000
 8009900:	003d0900 	.word	0x003d0900

08009904 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	4606      	mov	r6, r0
 800990a:	b087      	sub	sp, #28
 800990c:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800990e:	f7fb fca5 	bl	800525c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009912:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8009914:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009916:	6830      	ldr	r0, [r6, #0]
 8009918:	f002 fefa 	bl	800c710 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800991c:	4604      	mov	r4, r0
 800991e:	bb50      	cbnz	r0, 8009976 <SD_FindSCR+0x72>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009920:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8009922:	6830      	ldr	r0, [r6, #0]
 8009924:	0409      	lsls	r1, r1, #16
 8009926:	f003 f81f 	bl	800c968 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800992a:	4604      	mov	r4, r0
 800992c:	bb18      	cbnz	r0, 8009976 <SD_FindSCR+0x72>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 800992e:	f04f 32ff 	mov.w	r2, #4294967295
 8009932:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009934:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009936:	9004      	str	r0, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009938:	6830      	ldr	r0, [r6, #0]
  config.DataLength    = 8U;
 800993a:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800993e:	2302      	movs	r3, #2
 8009940:	e9cd 1302 	strd	r1, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009944:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009946:	4669      	mov	r1, sp
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009948:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800994a:	f002 fece 	bl	800c6ea <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800994e:	6830      	ldr	r0, [r6, #0]
 8009950:	f003 f852 	bl	800c9f8 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009954:	4604      	mov	r4, r0
 8009956:	b970      	cbnz	r0, 8009976 <SD_FindSCR+0x72>
  uint32_t index = 0U;
 8009958:	4683      	mov	fp, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 800995a:	4605      	mov	r5, r0
 800995c:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800995e:	f240 592a 	movw	r9, #1322	; 0x52a
 8009962:	6830      	ldr	r0, [r6, #0]
 8009964:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009966:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800996a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800996c:	d007      	beq.n	800997e <SD_FindSCR+0x7a>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800996e:	0719      	lsls	r1, r3, #28
 8009970:	d51c      	bpl.n	80099ac <SD_FindSCR+0xa8>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009972:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009974:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8009976:	4620      	mov	r0, r4
 8009978:	b007      	add	sp, #28
 800997a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800997e:	031b      	lsls	r3, r3, #12
 8009980:	d40b      	bmi.n	800999a <SD_FindSCR+0x96>
 8009982:	f1bb 0f00 	cmp.w	fp, #0
 8009986:	d108      	bne.n	800999a <SD_FindSCR+0x96>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009988:	f002 fe86 	bl	800c698 <SDMMC_ReadFIFO>
 800998c:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800998e:	6830      	ldr	r0, [r6, #0]
      index++;
 8009990:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009994:	f002 fe80 	bl	800c698 <SDMMC_ReadFIFO>
 8009998:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800999a:	f7fb fc5f 	bl	800525c <HAL_GetTick>
 800999e:	eba0 000a 	sub.w	r0, r0, sl
 80099a2:	3001      	adds	r0, #1
 80099a4:	d1dd      	bne.n	8009962 <SD_FindSCR+0x5e>
      return HAL_SD_ERROR_TIMEOUT;
 80099a6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80099aa:	e7e4      	b.n	8009976 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80099ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80099ae:	079a      	lsls	r2, r3, #30
 80099b0:	d501      	bpl.n	80099b6 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80099b2:	2402      	movs	r4, #2
 80099b4:	e7de      	b.n	8009974 <SD_FindSCR+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80099b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80099b8:	069b      	lsls	r3, r3, #26
 80099ba:	d501      	bpl.n	80099c0 <SD_FindSCR+0xbc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80099bc:	2420      	movs	r4, #32
 80099be:	e7d9      	b.n	8009974 <SD_FindSCR+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80099c0:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <SD_FindSCR+0xd0>)
 80099c2:	ba2d      	rev	r5, r5
 80099c4:	ba3f      	rev	r7, r7
 80099c6:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80099c8:	f8c8 5000 	str.w	r5, [r8]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099cc:	f8c8 7004 	str.w	r7, [r8, #4]
  return HAL_SD_ERROR_NONE;
 80099d0:	e7d1      	b.n	8009976 <SD_FindSCR+0x72>
 80099d2:	bf00      	nop
 80099d4:	18000f3a 	.word	0x18000f3a

080099d8 <HAL_SD_ReadBlocks_DMA>:
{
 80099d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099da:	4604      	mov	r4, r0
 80099dc:	b087      	sub	sp, #28
 80099de:	4615      	mov	r5, r2
 80099e0:	461e      	mov	r6, r3
  if(NULL == pData)
 80099e2:	460f      	mov	r7, r1
 80099e4:	b931      	cbnz	r1, 80099f4 <HAL_SD_ReadBlocks_DMA+0x1c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80099e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099ec:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80099ee:	2001      	movs	r0, #1
}
 80099f0:	b007      	add	sp, #28
 80099f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80099f4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80099f8:	b2c0      	uxtb	r0, r0
 80099fa:	2801      	cmp	r0, #1
 80099fc:	d14c      	bne.n	8009a98 <HAL_SD_ReadBlocks_DMA+0xc0>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80099fe:	18d3      	adds	r3, r2, r3
 8009a00:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a02:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009a04:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a06:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009a08:	d904      	bls.n	8009a14 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009a0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009a10:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8009a12:	e7ed      	b.n	80099f0 <HAL_SD_ReadBlocks_DMA+0x18>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 8009a16:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8009a18:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a1a:	2a01      	cmp	r2, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8009a1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a20:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009a24:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->Instance->DCTRL = 0U;
 8009a28:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a2a:	4669      	mov	r1, sp
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
      add *= 512U;
 8009a2e:	bf18      	it	ne
 8009a30:	026d      	lslne	r5, r5, #9
    hsd->pRxBuffPtr = pData;
 8009a32:	62a7      	str	r7, [r4, #40]	; 0x28
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009a34:	e9cd 2300 	strd	r2, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a38:	2290      	movs	r2, #144	; 0x90
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a40:	2300      	movs	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009a42:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a46:	f002 fe50 	bl	800c6ea <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009a4a:	6820      	ldr	r0, [r4, #0]
 8009a4c:	68c3      	ldr	r3, [r0, #12]
 8009a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a52:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009a54:	2301      	movs	r3, #1
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009a56:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8009a58:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009a5a:	6503      	str	r3, [r0, #80]	; 0x50
    if(NumberOfBlocks > 1U)
 8009a5c:	d911      	bls.n	8009a82 <HAL_SD_ReadBlocks_DMA+0xaa>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009a5e:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009a60:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009a62:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009a64:	f002 fe86 	bl	800c774 <SDMMC_CmdReadMultiBlock>
 8009a68:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a6a:	b180      	cbz	r0, 8009a8e <HAL_SD_ReadBlocks_DMA+0xb6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a6c:	4a0b      	ldr	r2, [pc, #44]	; (8009a9c <HAL_SD_ReadBlocks_DMA+0xc4>)
 8009a6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009a70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009a72:	4318      	orrs	r0, r3
      hsd->Context = SD_CONTEXT_NONE;
 8009a74:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 8009a76:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a78:	2001      	movs	r0, #1
 8009a7a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a7e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8009a80:	e7b6      	b.n	80099f0 <HAL_SD_ReadBlocks_DMA+0x18>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009a82:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009a84:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009a86:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009a88:	f002 fe5b 	bl	800c742 <SDMMC_CmdReadSingleBlock>
 8009a8c:	e7ec      	b.n	8009a68 <HAL_SD_ReadBlocks_DMA+0x90>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a90:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009a94:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 8009a96:	e7ab      	b.n	80099f0 <HAL_SD_ReadBlocks_DMA+0x18>
    return HAL_BUSY;
 8009a98:	2002      	movs	r0, #2
 8009a9a:	e7a9      	b.n	80099f0 <HAL_SD_ReadBlocks_DMA+0x18>
 8009a9c:	1fe00fff 	.word	0x1fe00fff

08009aa0 <HAL_SD_WriteBlocks_DMA>:
{
 8009aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	4615      	mov	r5, r2
 8009aaa:	461e      	mov	r6, r3
  if(NULL == pData)
 8009aac:	460f      	mov	r7, r1
 8009aae:	b939      	cbnz	r1, 8009ac0 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009ab0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009ab2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ab6:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8009ab8:	2001      	movs	r0, #1
}
 8009aba:	b006      	add	sp, #24
 8009abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8009ac0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009ac4:	b2c0      	uxtb	r0, r0
 8009ac6:	2801      	cmp	r0, #1
 8009ac8:	d14c      	bne.n	8009b64 <HAL_SD_WriteBlocks_DMA+0xc4>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009aca:	18d3      	adds	r3, r2, r3
 8009acc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ace:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009ad0:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ad2:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009ad4:	d904      	bls.n	8009ae0 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ad6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ad8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009adc:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8009ade:	e7ec      	b.n	8009aba <HAL_SD_WriteBlocks_DMA+0x1a>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009ae0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 8009ae2:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8009ae4:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009ae6:	f04f 0890 	mov.w	r8, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009aea:	2a01      	cmp	r2, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8009aec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009af0:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009af4:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->Instance->DCTRL = 0U;
 8009af8:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009afa:	4669      	mov	r1, sp
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009afc:	6263      	str	r3, [r4, #36]	; 0x24
      add *= 512U;
 8009afe:	bf18      	it	ne
 8009b00:	026d      	lslne	r5, r5, #9
    hsd->pTxBuffPtr = pData;
 8009b02:	6227      	str	r7, [r4, #32]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009b04:	e9cd 2300 	strd	r2, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	e9cd 8302 	strd	r8, r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009b0e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b12:	f002 fdea 	bl	800c6ea <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009b16:	6820      	ldr	r0, [r4, #0]
 8009b18:	68c3      	ldr	r3, [r0, #12]
 8009b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b1e:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009b20:	2301      	movs	r3, #1
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009b22:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8009b24:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009b26:	6503      	str	r3, [r0, #80]	; 0x50
    if(NumberOfBlocks > 1U)
 8009b28:	d911      	bls.n	8009b4e <HAL_SD_WriteBlocks_DMA+0xae>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009b2a:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009b2c:	4629      	mov	r1, r5
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009b2e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009b30:	f002 fe52 	bl	800c7d8 <SDMMC_CmdWriteMultiBlock>
 8009b34:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b36:	b180      	cbz	r0, 8009b5a <HAL_SD_WriteBlocks_DMA+0xba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b38:	4a0b      	ldr	r2, [pc, #44]	; (8009b68 <HAL_SD_WriteBlocks_DMA+0xc8>)
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009b3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b3e:	4318      	orrs	r0, r3
      hsd->Context = SD_CONTEXT_NONE;
 8009b40:	2300      	movs	r3, #0
      hsd->ErrorCode |= errorstate;
 8009b42:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b44:	2001      	movs	r0, #1
 8009b46:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b4a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8009b4c:	e7b5      	b.n	8009aba <HAL_SD_WriteBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009b4e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009b52:	4629      	mov	r1, r5
 8009b54:	f002 fe27 	bl	800c7a6 <SDMMC_CmdWriteSingleBlock>
 8009b58:	e7ec      	b.n	8009b34 <HAL_SD_WriteBlocks_DMA+0x94>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b5c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009b60:	63da      	str	r2, [r3, #60]	; 0x3c
    return HAL_OK;
 8009b62:	e7aa      	b.n	8009aba <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 8009b64:	2002      	movs	r0, #2
 8009b66:	e7a8      	b.n	8009aba <HAL_SD_WriteBlocks_DMA+0x1a>
 8009b68:	1fe00fff 	.word	0x1fe00fff

08009b6c <HAL_SD_ErrorCallback>:
 8009b6c:	4770      	bx	lr

08009b6e <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8009b6e:	4770      	bx	lr

08009b70 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009b70:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8009b72:	0f9a      	lsrs	r2, r3, #30
 8009b74:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009b76:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8009b7a:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009b7c:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8009b80:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009b82:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009b86:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009b88:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009b8c:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009b8e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009b90:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009b92:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009b94:	0d1a      	lsrs	r2, r3, #20
 8009b96:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009b98:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8009b9c:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009b9e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8009ba2:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009ba4:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8009ba8:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009baa:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8009bae:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009bb0:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8009bb4:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8009bba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
{
 8009bbc:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8009bbe:	2a00      	cmp	r2, #0
 8009bc0:	d16b      	bne.n	8009c9a <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009bc2:	f640 74fc 	movw	r4, #4092	; 0xffc
 8009bc6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8009bc8:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8009bcc:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8009bd0:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009bd2:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8009bd6:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009bd8:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8009bdc:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009bde:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8009be2:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009be4:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009be8:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009bec:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009bee:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009bf0:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009bf2:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009bf4:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009bf6:	f002 0207 	and.w	r2, r2, #7
 8009bfa:	3202      	adds	r2, #2
 8009bfc:	4093      	lsls	r3, r2
 8009bfe:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009c00:	7a0a      	ldrb	r2, [r1, #8]
 8009c02:	f002 040f 	and.w	r4, r2, #15
 8009c06:	2201      	movs	r2, #1
 8009c08:	40a2      	lsls	r2, r4
 8009c0a:	6502      	str	r2, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009c0c:	0a52      	lsrs	r2, r2, #9
 8009c0e:	4353      	muls	r3, r2
 8009c10:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8009c12:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009c16:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009c18:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009c1a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8009c1e:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009c20:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009c28:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009c2a:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009c2c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->Reserved3 = 0;
 8009c2e:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009c30:	0fda      	lsrs	r2, r3, #31
 8009c32:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009c34:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8009c38:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009c3a:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8009c3e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009c40:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8009c44:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009c46:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8009c4a:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009c4e:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8009c52:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009c56:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009c5a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8009c5e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009c62:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8009c66:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009c6a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8009c6e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009c72:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8009c76:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009c7a:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8009c7e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009c82:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009c86:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009c8a:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009c8e:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8009c92:	2301      	movs	r3, #1
 8009c94:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8009c98:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009c9a:	2a01      	cmp	r2, #1
 8009c9c:	d10f      	bne.n	8009cbe <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009c9e:	041b      	lsls	r3, r3, #16
 8009ca0:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8009ca4:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009cac:	690b      	ldr	r3, [r1, #16]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	029b      	lsls	r3, r3, #10
 8009cb2:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009cb4:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8009cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cba:	6503      	str	r3, [r0, #80]	; 0x50
 8009cbc:	e7ab      	b.n	8009c16 <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cbe:	6803      	ldr	r3, [r0, #0]
 8009cc0:	4a05      	ldr	r2, [pc, #20]	; (8009cd8 <HAL_SD_GetCardCSD+0x168>)
 8009cc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cc4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cca:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	e7e0      	b.n	8009c98 <HAL_SD_GetCardCSD+0x128>
 8009cd6:	bf00      	nop
 8009cd8:	1fe00fff 	.word	0x1fe00fff

08009cdc <HAL_SD_InitCard>:
{
 8009cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009ce0:	2300      	movs	r3, #0
{
 8009ce2:	b098      	sub	sp, #96	; 0x60
 8009ce4:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009ce6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8009cea:	4da1      	ldr	r5, [pc, #644]	; (8009f70 <HAL_SD_InitCard+0x294>)
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009cec:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009cf0:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009cf4:	f7ff fd22 	bl	800973c <HAL_RCCEx_GetPeriphCLKFreq>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009cf8:	69a3      	ldr	r3, [r4, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	6827      	ldr	r7, [r4, #0]
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009cfe:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8009d00:	fbb0 f5f5 	udiv	r5, r0, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009d04:	d103      	bne.n	8009d0e <HAL_SD_InitCard+0x32>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	f043 0310 	orr.w	r3, r3, #16
 8009d0c:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 8009d0e:	ab0a      	add	r3, sp, #40	; 0x28
 8009d10:	950b      	str	r5, [sp, #44]	; 0x2c
 8009d12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d16:	ab07      	add	r3, sp, #28
 8009d18:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009d1c:	4638      	mov	r0, r7
 8009d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d20:	f002 fca0 	bl	800c664 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009d24:	6820      	ldr	r0, [r4, #0]
 8009d26:	f002 fcbf 	bl	800c6a8 <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8009d2a:	0068      	lsls	r0, r5, #1
 8009d2c:	fbb6 f0f0 	udiv	r0, r6, r0
  if(sdmmc_clk != 0U)
 8009d30:	b1f8      	cbz	r0, 8009d72 <HAL_SD_InitCard+0x96>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009d32:	4d90      	ldr	r5, [pc, #576]	; (8009f74 <HAL_SD_InitCard+0x298>)
 8009d34:	fbb5 f0f0 	udiv	r0, r5, r0
 8009d38:	3001      	adds	r0, #1
    HAL_Delay(2U);
 8009d3a:	f7fb fa95 	bl	8005268 <HAL_Delay>
  __IO uint32_t count = 0U;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 8009d42:	f7fb fa8b 	bl	800525c <HAL_GetTick>
 8009d46:	4607      	mov	r7, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d48:	6820      	ldr	r0, [r4, #0]
 8009d4a:	f002 fda3 	bl	800c894 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d4e:	4605      	mov	r5, r0
 8009d50:	b940      	cbnz	r0, 8009d64 <HAL_SD_InitCard+0x88>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009d52:	6820      	ldr	r0, [r4, #0]
 8009d54:	f002 fdc8 	bl	800c8e8 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d58:	b168      	cbz	r0, 8009d76 <HAL_SD_InitCard+0x9a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009d5a:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d5c:	6820      	ldr	r0, [r4, #0]
 8009d5e:	f002 fd99 	bl	800c894 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d62:	b150      	cbz	r0, 8009d7a <HAL_SD_InitCard+0x9e>
    hsd->State = HAL_SD_STATE_READY;
 8009d64:	2501      	movs	r5, #1
 8009d66:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009d6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d6c:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 8009d6e:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 8009d70:	e0b0      	b.n	8009ed4 <HAL_SD_InitCard+0x1f8>
    HAL_Delay(2U);
 8009d72:	2002      	movs	r0, #2
 8009d74:	e7e1      	b.n	8009d3a <HAL_SD_InitCard+0x5e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009d76:	2301      	movs	r3, #1
 8009d78:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d127      	bne.n	8009dd0 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d80:	2100      	movs	r1, #0
 8009d82:	6820      	ldr	r0, [r4, #0]
 8009d84:	f002 fdf0 	bl	800c968 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d88:	b310      	cbz	r0, 8009dd0 <HAL_SD_InitCard+0xf4>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d8a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009d8e:	e7e9      	b.n	8009d64 <HAL_SD_InitCard+0x88>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d90:	4631      	mov	r1, r6
 8009d92:	6820      	ldr	r0, [r4, #0]
 8009d94:	f002 fde8 	bl	800c968 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d1e3      	bne.n	8009d64 <HAL_SD_InitCard+0x88>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009d9c:	4651      	mov	r1, sl
 8009d9e:	6820      	ldr	r0, [r4, #0]
 8009da0:	f002 fdfb 	bl	800c99a <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d1f0      	bne.n	8009d8a <HAL_SD_InitCard+0xae>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009da8:	4631      	mov	r1, r6
 8009daa:	6820      	ldr	r0, [r4, #0]
 8009dac:	f002 fc9a 	bl	800c6e4 <SDMMC_GetResponse>
    count++;
 8009db0:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009db2:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009db4:	0fc6      	lsrs	r6, r0, #31
    count++;
 8009db6:	3301      	adds	r3, #1
 8009db8:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009dba:	9b06      	ldr	r3, [sp, #24]
 8009dbc:	4543      	cmp	r3, r8
 8009dbe:	d801      	bhi.n	8009dc4 <HAL_SD_InitCard+0xe8>
 8009dc0:	2e00      	cmp	r6, #0
 8009dc2:	d0e5      	beq.n	8009d90 <HAL_SD_InitCard+0xb4>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009dc4:	9b06      	ldr	r3, [sp, #24]
 8009dc6:	454b      	cmp	r3, r9
 8009dc8:	d909      	bls.n	8009dde <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009dca:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8009dce:	e7c9      	b.n	8009d64 <HAL_SD_InitCard+0x88>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009dd0:	f64f 78fe 	movw	r8, #65534	; 0xfffe
{
 8009dd4:	2600      	movs	r6, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009dd6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8009f7c <HAL_SD_InitCard+0x2a0>
 8009dda:	46c1      	mov	r9, r8
 8009ddc:	e7ed      	b.n	8009dba <HAL_SD_InitCard+0xde>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009dde:	006b      	lsls	r3, r5, #1
 8009de0:	d533      	bpl.n	8009e4a <HAL_SD_InitCard+0x16e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009de2:	2301      	movs	r3, #1
 8009de4:	6820      	ldr	r0, [r4, #0]
 8009de6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009de8:	69a3      	ldr	r3, [r4, #24]
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d12d      	bne.n	8009e4a <HAL_SD_InitCard+0x16e>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009dee:	01ee      	lsls	r6, r5, #7
 8009df0:	d52b      	bpl.n	8009e4a <HAL_SD_InitCard+0x16e>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009df6:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009df8:	6803      	ldr	r3, [r0, #0]
 8009dfa:	f043 0308 	orr.w	r3, r3, #8
 8009dfe:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009e00:	f002 fec6 	bl	800cb90 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d1ad      	bne.n	8009d64 <HAL_SD_InitCard+0x88>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e0c:	0155      	lsls	r5, r2, #5
 8009e0e:	d565      	bpl.n	8009edc <HAL_SD_InitCard+0x200>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009e10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009e14:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e18:	02d8      	lsls	r0, r3, #11
 8009e1a:	d5b6      	bpl.n	8009d8a <HAL_SD_InitCard+0xae>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	f7ff fea6 	bl	8009b6e <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009e22:	6822      	ldr	r2, [r4, #0]
 8009e24:	6813      	ldr	r3, [r2, #0]
 8009e26:	f043 0304 	orr.w	r3, r3, #4
 8009e2a:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e30:	0191      	lsls	r1, r2, #6
 8009e32:	d55b      	bpl.n	8009eec <HAL_SD_InitCard+0x210>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e38:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e3c:	02d2      	lsls	r2, r2, #11
 8009e3e:	d4c4      	bmi.n	8009dca <HAL_SD_InitCard+0xee>
          hsd->Instance->POWER = 0x13U;
 8009e40:	2213      	movs	r2, #19
 8009e42:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009e44:	f04f 32ff 	mov.w	r2, #4294967295
 8009e48:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1U;
 8009e4a:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009e4c:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8009e4e:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009e52:	f002 fc2f 	bl	800c6b4 <SDMMC_GetPowerState>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d07c      	beq.n	8009f54 <HAL_SD_InitCard+0x278>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d018      	beq.n	8009e92 <HAL_SD_InitCard+0x1b6>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009e60:	6820      	ldr	r0, [r4, #0]
 8009e62:	f002 fde2 	bl	800ca2a <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d14d      	bne.n	8009f06 <HAL_SD_InitCard+0x22a>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	6820      	ldr	r0, [r4, #0]
 8009e6e:	f002 fc39 	bl	800c6e4 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009e72:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e74:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009e76:	6820      	ldr	r0, [r4, #0]
 8009e78:	f002 fc34 	bl	800c6e4 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009e7c:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009e7e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009e80:	6820      	ldr	r0, [r4, #0]
 8009e82:	f002 fc2f 	bl	800c6e4 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009e86:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009e88:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009e8a:	6820      	ldr	r0, [r4, #0]
 8009e8c:	f002 fc2a 	bl	800c6e4 <SDMMC_GetResponse>
 8009e90:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e94:	2b03      	cmp	r3, #3
 8009e96:	d12f      	bne.n	8009ef8 <HAL_SD_InitCard+0x21c>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d139      	bne.n	8009f12 <HAL_SD_InitCard+0x236>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009e9e:	2104      	movs	r1, #4
 8009ea0:	6820      	ldr	r0, [r4, #0]
 8009ea2:	f002 fc1f 	bl	800c6e4 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009ea6:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009ea8:	0d00      	lsrs	r0, r0, #20
 8009eaa:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009eac:	4620      	mov	r0, r4
 8009eae:	f7ff fe5f 	bl	8009b70 <HAL_SD_GetCardCSD>
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d14a      	bne.n	8009f4e <HAL_SD_InitCard+0x272>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009eb8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009eba:	4603      	mov	r3, r0
 8009ebc:	6820      	ldr	r0, [r4, #0]
 8009ebe:	0412      	lsls	r2, r2, #16
 8009ec0:	f002 fcce 	bl	800c860 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ec4:	b9f8      	cbnz	r0, 8009f06 <HAL_SD_InitCard+0x22a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009eca:	6820      	ldr	r0, [r4, #0]
 8009ecc:	f002 fc20 	bl	800c710 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d142      	bne.n	8009f5a <HAL_SD_InitCard+0x27e>
}
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	b018      	add	sp, #96	; 0x60
 8009ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009edc:	f7fb f9be 	bl	800525c <HAL_GetTick>
 8009ee0:	1bc0      	subs	r0, r0, r7
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	d190      	bne.n	8009e08 <HAL_SD_InitCard+0x12c>
            return HAL_SD_ERROR_TIMEOUT;
 8009ee6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009eea:	e73b      	b.n	8009d64 <HAL_SD_InitCard+0x88>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009eec:	f7fb f9b6 	bl	800525c <HAL_GetTick>
 8009ef0:	1bc0      	subs	r0, r0, r7
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	d19a      	bne.n	8009e2c <HAL_SD_InitCard+0x150>
 8009ef6:	e7f6      	b.n	8009ee6 <HAL_SD_InitCard+0x20a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009ef8:	f10d 0116 	add.w	r1, sp, #22
 8009efc:	6820      	ldr	r0, [r4, #0]
 8009efe:	f002 fdc1 	bl	800ca84 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d0c8      	beq.n	8009e98 <HAL_SD_InitCard+0x1bc>
    hsd->State = HAL_SD_STATE_READY;
 8009f06:	2501      	movs	r5, #1
 8009f08:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009f0c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f0e:	4308      	orrs	r0, r1
 8009f10:	e72d      	b.n	8009d6e <HAL_SD_InitCard+0x92>
    hsd->SdCard.RelCardAdd = sd_rca;
 8009f12:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f16:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8009f18:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f1a:	0409      	lsls	r1, r1, #16
 8009f1c:	f002 fd9b 	bl	800ca56 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d1f0      	bne.n	8009f06 <HAL_SD_InitCard+0x22a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f24:	4601      	mov	r1, r0
 8009f26:	6820      	ldr	r0, [r4, #0]
 8009f28:	f002 fbdc 	bl	800c6e4 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009f2c:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f2e:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009f30:	6820      	ldr	r0, [r4, #0]
 8009f32:	f002 fbd7 	bl	800c6e4 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009f36:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009f38:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009f3a:	6820      	ldr	r0, [r4, #0]
 8009f3c:	f002 fbd2 	bl	800c6e4 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009f40:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009f42:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009f44:	6820      	ldr	r0, [r4, #0]
 8009f46:	f002 fbcd 	bl	800c6e4 <SDMMC_GetResponse>
 8009f4a:	66e0      	str	r0, [r4, #108]	; 0x6c
 8009f4c:	e7a7      	b.n	8009e9e <HAL_SD_InitCard+0x1c2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f4e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009f52:	e7d8      	b.n	8009f06 <HAL_SD_InitCard+0x22a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f54:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009f58:	e7d5      	b.n	8009f06 <HAL_SD_InitCard+0x22a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f5a:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8009f5c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f5e:	4a06      	ldr	r2, [pc, #24]	; (8009f78 <HAL_SD_InitCard+0x29c>)
 8009f60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009f62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f64:	4318      	orrs	r0, r3
 8009f66:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009f68:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009f6c:	e7b2      	b.n	8009ed4 <HAL_SD_InitCard+0x1f8>
 8009f6e:	bf00      	nop
 8009f70:	000c3500 	.word	0x000c3500
 8009f74:	00012110 	.word	0x00012110
 8009f78:	1fe00fff 	.word	0x1fe00fff
 8009f7c:	c1100000 	.word	0xc1100000

08009f80 <HAL_SD_GetCardStatus>:
{
 8009f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f84:	4604      	mov	r4, r0
 8009f86:	b096      	sub	sp, #88	; 0x58
 8009f88:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 8009f8a:	f7fb f967 	bl	800525c <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f8e:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8009f90:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f92:	6820      	ldr	r0, [r4, #0]
 8009f94:	f002 fba6 	bl	800c6e4 <SDMMC_GetResponse>
 8009f98:	0183      	lsls	r3, r0, #6
 8009f9a:	d50b      	bpl.n	8009fb4 <HAL_SD_GetCardStatus+0x34>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fa0:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8009fa2:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fa4:	4a53      	ldr	r2, [pc, #332]	; (800a0f4 <HAL_SD_GetCardStatus+0x174>)
 8009fa6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009fa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009faa:	4318      	orrs	r0, r3
 8009fac:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009fae:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8009fb2:	e08a      	b.n	800a0ca <HAL_SD_GetCardStatus+0x14a>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009fb4:	2140      	movs	r1, #64	; 0x40
 8009fb6:	6820      	ldr	r0, [r4, #0]
 8009fb8:	f002 fbaa 	bl	800c710 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fbc:	b110      	cbz	r0, 8009fc4 <HAL_SD_GetCardStatus+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009fbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009fc0:	63a3      	str	r3, [r4, #56]	; 0x38
 8009fc2:	e7ed      	b.n	8009fa0 <HAL_SD_GetCardStatus+0x20>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009fc6:	6820      	ldr	r0, [r4, #0]
 8009fc8:	0409      	lsls	r1, r1, #16
 8009fca:	f002 fccd 	bl	800c968 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d1f5      	bne.n	8009fbe <HAL_SD_GetCardStatus+0x3e>
  config.DataLength    = 64U;
 8009fd2:	2340      	movs	r3, #64	; 0x40
 8009fd4:	f04f 35ff 	mov.w	r5, #4294967295
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009fd8:	2760      	movs	r7, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009fda:	9004      	str	r0, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009fdc:	4669      	mov	r1, sp
 8009fde:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 8009fe0:	e9cd 5300 	strd	r5, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	e9cd 7302 	strd	r7, r3, [sp, #8]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009fea:	2301      	movs	r3, #1
 8009fec:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009fee:	f002 fb7c 	bl	800c6ea <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009ff2:	6820      	ldr	r0, [r4, #0]
 8009ff4:	f002 fdb3 	bl	800cb5e <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d1e0      	bne.n	8009fbe <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 8009ffc:	af06      	add	r7, sp, #24
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a002:	f412 7f95 	tst.w	r2, #298	; 0x12a
 800a006:	d00a      	beq.n	800a01e <HAL_SD_GetCardStatus+0x9e>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a00a:	0711      	lsls	r1, r2, #28
 800a00c:	d470      	bmi.n	800a0f0 <HAL_SD_GetCardStatus+0x170>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a00e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a010:	0792      	lsls	r2, r2, #30
 800a012:	d46b      	bmi.n	800a0ec <HAL_SD_GetCardStatus+0x16c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a016:	069b      	lsls	r3, r3, #26
 800a018:	d520      	bpl.n	800a05c <HAL_SD_GetCardStatus+0xdc>
    return HAL_SD_ERROR_RX_OVERRUN;
 800a01a:	2020      	movs	r0, #32
 800a01c:	e7c0      	b.n	8009fa0 <HAL_SD_GetCardStatus+0x20>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a020:	0418      	lsls	r0, r3, #16
 800a022:	d508      	bpl.n	800a036 <HAL_SD_GetCardStatus+0xb6>
 800a024:	f107 0520 	add.w	r5, r7, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a028:	6820      	ldr	r0, [r4, #0]
 800a02a:	f002 fb35 	bl	800c698 <SDMMC_ReadFIFO>
 800a02e:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 800a032:	42af      	cmp	r7, r5
 800a034:	d1f8      	bne.n	800a028 <HAL_SD_GetCardStatus+0xa8>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a036:	f7fb f911 	bl	800525c <HAL_GetTick>
 800a03a:	eba0 0008 	sub.w	r0, r0, r8
 800a03e:	3001      	adds	r0, #1
 800a040:	d1dd      	bne.n	8009ffe <HAL_SD_GetCardStatus+0x7e>
      return HAL_SD_ERROR_TIMEOUT;
 800a042:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800a046:	e7ab      	b.n	8009fa0 <HAL_SD_GetCardStatus+0x20>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a048:	f002 fb26 	bl	800c698 <SDMMC_ReadFIFO>
 800a04c:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a050:	f7fb f904 	bl	800525c <HAL_GetTick>
 800a054:	eba0 0008 	sub.w	r0, r0, r8
 800a058:	3001      	adds	r0, #1
 800a05a:	d0f2      	beq.n	800a042 <HAL_SD_GetCardStatus+0xc2>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a05c:	6820      	ldr	r0, [r4, #0]
 800a05e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a060:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 800a064:	d1f0      	bne.n	800a048 <HAL_SD_GetCardStatus+0xc8>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a066:	9a06      	ldr	r2, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a068:	4b23      	ldr	r3, [pc, #140]	; (800a0f8 <HAL_SD_GetCardStatus+0x178>)
 800a06a:	6383      	str	r3, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a06c:	f3c2 1381 	ubfx	r3, r2, #6, #2
 800a070:	7033      	strb	r3, [r6, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a072:	f3c2 1340 	ubfx	r3, r2, #5, #1
 800a076:	7073      	strb	r3, [r6, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a078:	0a13      	lsrs	r3, r2, #8
 800a07a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a07e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800a082:	b29b      	uxth	r3, r3
 800a084:	8073      	strh	r3, [r6, #2]
 800a086:	9b07      	ldr	r3, [sp, #28]
 800a088:	ba1b      	rev	r3, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a08a:	6073      	str	r3, [r6, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a08c:	9b08      	ldr	r3, [sp, #32]
 800a08e:	b2da      	uxtb	r2, r3
 800a090:	7232      	strb	r2, [r6, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a092:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a096:	7272      	strb	r2, [r6, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a098:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a09c:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a09e:	72b2      	strb	r2, [r6, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a0a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a0a6:	b2d1      	uxtb	r1, r2
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	81b3      	strh	r3, [r6, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a0ac:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800a0b0:	73b3      	strb	r3, [r6, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a0b2:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800a0b6:	73f3      	strb	r3, [r6, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a0b8:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a0bc:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a0c0:	7433      	strb	r3, [r6, #16]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a0c2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a0c6:	7472      	strb	r2, [r6, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a0c8:	74b3      	strb	r3, [r6, #18]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0ce:	6820      	ldr	r0, [r4, #0]
 800a0d0:	f002 fb1e 	bl	800c710 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0d4:	b130      	cbz	r0, 800a0e4 <HAL_SD_GetCardStatus+0x164>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0d6:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a0d8:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0da:	4a06      	ldr	r2, [pc, #24]	; (800a0f4 <HAL_SD_GetCardStatus+0x174>)
 800a0dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a0de:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a0e0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	b016      	add	sp, #88	; 0x58
 800a0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0ec:	2002      	movs	r0, #2
 800a0ee:	e757      	b.n	8009fa0 <HAL_SD_GetCardStatus+0x20>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a0f0:	2008      	movs	r0, #8
 800a0f2:	e755      	b.n	8009fa0 <HAL_SD_GetCardStatus+0x20>
 800a0f4:	1fe00fff 	.word	0x1fe00fff
 800a0f8:	18000f3a 	.word	0x18000f3a

0800a0fc <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a0fc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a0fe:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a100:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a102:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a104:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a106:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a108:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a10a:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a10c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a10e:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a110:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a112:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a114:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a116:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a118:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 800a11a:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a11c:	61cb      	str	r3, [r1, #28]
}
 800a11e:	4770      	bx	lr

0800a120 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 800a120:	2303      	movs	r3, #3
{
 800a122:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800a124:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 800a128:	b08a      	sub	sp, #40	; 0x28
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a12a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 800a12c:	4604      	mov	r4, r0
 800a12e:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a130:	2b03      	cmp	r3, #3
 800a132:	d002      	beq.n	800a13a <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a134:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a138:	d103      	bne.n	800a142 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a13a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a13c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a140:	e064      	b.n	800a20c <HAL_SD_ConfigWideBusOperation+0xec>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a142:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a146:	6800      	ldr	r0, [r0, #0]
 800a148:	d13b      	bne.n	800a1c2 <HAL_SD_ConfigWideBusOperation+0xa2>
  uint32_t scr[2U] = {0UL, 0UL};
 800a14a:	2100      	movs	r1, #0
 800a14c:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a150:	f002 fac8 	bl	800c6e4 <SDMMC_GetResponse>
 800a154:	0180      	lsls	r0, r0, #6
 800a156:	d42e      	bmi.n	800a1b6 <HAL_SD_ConfigWideBusOperation+0x96>
  errorstate = SD_FindSCR(hsd, scr);
 800a158:	a904      	add	r1, sp, #16
 800a15a:	4620      	mov	r0, r4
 800a15c:	f7ff fbd2 	bl	8009904 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a160:	b960      	cbnz	r0, 800a17c <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a162:	9b05      	ldr	r3, [sp, #20]
 800a164:	0359      	lsls	r1, r3, #13
 800a166:	d529      	bpl.n	800a1bc <HAL_SD_ConfigWideBusOperation+0x9c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a168:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a16a:	6820      	ldr	r0, [r4, #0]
 800a16c:	0409      	lsls	r1, r1, #16
 800a16e:	f002 fbfb 	bl	800c968 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a172:	b918      	cbnz	r0, 800a17c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a174:	2102      	movs	r1, #2
 800a176:	6820      	ldr	r0, [r4, #0]
 800a178:	f002 fc25 	bl	800c9c6 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a17c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a17e:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 800a180:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a184:	6826      	ldr	r6, [r4, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d042      	beq.n	800a210 <HAL_SD_ConfigWideBusOperation+0xf0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a18a:	4b32      	ldr	r3, [pc, #200]	; (800a254 <HAL_SD_ConfigWideBusOperation+0x134>)
    status = HAL_ERROR;
 800a18c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a18e:	63b3      	str	r3, [r6, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a190:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a194:	6820      	ldr	r0, [r4, #0]
 800a196:	f002 fabb 	bl	800c710 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a19a:	b130      	cbz	r0, 800a1aa <HAL_SD_ConfigWideBusOperation+0x8a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a19c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800a19e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1a0:	4a2c      	ldr	r2, [pc, #176]	; (800a254 <HAL_SD_ConfigWideBusOperation+0x134>)
 800a1a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a1a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a1a6:	4318      	orrs	r0, r3
 800a1a8:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800a1aa:	2301      	movs	r3, #1
}
 800a1ac:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800a1ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a1b2:	b00a      	add	sp, #40	; 0x28
 800a1b4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a1b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a1ba:	e7df      	b.n	800a17c <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a1bc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a1c0:	e7dc      	b.n	800a17c <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a1c2:	bb01      	cbnz	r1, 800a206 <HAL_SD_ConfigWideBusOperation+0xe6>
  uint32_t scr[2U] = {0UL, 0UL};
 800a1c4:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a1c8:	f002 fa8c 	bl	800c6e4 <SDMMC_GetResponse>
 800a1cc:	0182      	lsls	r2, r0, #6
 800a1ce:	d414      	bmi.n	800a1fa <HAL_SD_ConfigWideBusOperation+0xda>
  errorstate = SD_FindSCR(hsd, scr);
 800a1d0:	a904      	add	r1, sp, #16
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f7ff fb96 	bl	8009904 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1d8:	b960      	cbnz	r0, 800a1f4 <HAL_SD_ConfigWideBusOperation+0xd4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a1da:	9b05      	ldr	r3, [sp, #20]
 800a1dc:	03db      	lsls	r3, r3, #15
 800a1de:	d50f      	bpl.n	800a200 <HAL_SD_ConfigWideBusOperation+0xe0>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a1e2:	6820      	ldr	r0, [r4, #0]
 800a1e4:	0409      	lsls	r1, r1, #16
 800a1e6:	f002 fbbf 	bl	800c968 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1ea:	b918      	cbnz	r0, 800a1f4 <HAL_SD_ConfigWideBusOperation+0xd4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a1ec:	4601      	mov	r1, r0
 800a1ee:	6820      	ldr	r0, [r4, #0]
 800a1f0:	f002 fbe9 	bl	800c9c6 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a1f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a1f6:	4308      	orrs	r0, r1
 800a1f8:	e7c2      	b.n	800a180 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a1fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a1fe:	e7f9      	b.n	800a1f4 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a200:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a204:	e7f6      	b.n	800a1f4 <HAL_SD_ConfigWideBusOperation+0xd4>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a206:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a208:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a20c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a20e:	e7b8      	b.n	800a182 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a210:	6863      	ldr	r3, [r4, #4]
 800a212:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a214:	68a3      	ldr	r3, [r4, #8]
    Init.BusWide             = WideMode;
 800a216:	e9cd 3505 	strd	r3, r5, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a21a:	6923      	ldr	r3, [r4, #16]
 800a21c:	9307      	str	r3, [sp, #28]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800a21e:	6963      	ldr	r3, [r4, #20]
 800a220:	2b03      	cmp	r3, #3
 800a222:	d90c      	bls.n	800a23e <HAL_SD_ConfigWideBusOperation+0x11e>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a224:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a226:	ab0a      	add	r3, sp, #40	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 800a228:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 800a22a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800a22e:	ab04      	add	r3, sp, #16
 800a230:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a234:	4630      	mov	r0, r6
 800a236:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a238:	f002 fa14 	bl	800c664 <SDMMC_Init>
 800a23c:	e7a8      	b.n	800a190 <HAL_SD_ConfigWideBusOperation+0x70>
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a23e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a240:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a244:	d0ee      	beq.n	800a224 <HAL_SD_ConfigWideBusOperation+0x104>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a246:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800a24a:	bf0c      	ite	eq
 800a24c:	2302      	moveq	r3, #2
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a24e:	2304      	movne	r3, #4
 800a250:	e7e8      	b.n	800a224 <HAL_SD_ConfigWideBusOperation+0x104>
 800a252:	bf00      	nop
 800a254:	1fe00fff 	.word	0x1fe00fff

0800a258 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a258:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 800a25a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a25c:	0409      	lsls	r1, r1, #16
{
 800a25e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a260:	6800      	ldr	r0, [r0, #0]
 800a262:	f002 fc63 	bl	800cb2c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a266:	4601      	mov	r1, r0
 800a268:	b928      	cbnz	r0, 800a276 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a26a:	6820      	ldr	r0, [r4, #0]
 800a26c:	f002 fa3a 	bl	800c6e4 <SDMMC_GetResponse>
}
 800a270:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800a274:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800a276:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800a278:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 800a27a:	4319      	orrs	r1, r3
 800a27c:	63a1      	str	r1, [r4, #56]	; 0x38
 800a27e:	e7f7      	b.n	800a270 <HAL_SD_GetCardState+0x18>

0800a280 <HAL_SD_Init>:
{
 800a280:	b570      	push	{r4, r5, r6, lr}
  if(hsd == NULL)
 800a282:	4604      	mov	r4, r0
{
 800a284:	b086      	sub	sp, #24
  if(hsd == NULL)
 800a286:	b918      	cbnz	r0, 800a290 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 800a288:	2501      	movs	r5, #1
}
 800a28a:	4628      	mov	r0, r5
 800a28c:	b006      	add	sp, #24
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800a290:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800a294:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a298:	b93b      	cbnz	r3, 800a2aa <HAL_SD_Init+0x2a>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800a29a:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 800a29c:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800a29e:	b90b      	cbnz	r3, 800a2a4 <HAL_SD_Init+0x24>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f7f9 f9d5 	bl	8003654 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800a2aa:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a2ac:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800a2ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a2b2:	f7ff fd13 	bl	8009cdc <HAL_SD_InitCard>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d1e6      	bne.n	800a288 <HAL_SD_Init+0x8>
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a2ba:	a901      	add	r1, sp, #4
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f7ff fe5f 	bl	8009f80 <HAL_SD_GetCardStatus>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d1e0      	bne.n	800a288 <HAL_SD_Init+0x8>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a2c6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 800a2c8:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a2cc:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a2ce:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800a2d2:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a2d4:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a2d6:	d11d      	bne.n	800a314 <HAL_SD_Init+0x94>
 800a2d8:	b902      	cbnz	r2, 800a2dc <HAL_SD_Init+0x5c>
 800a2da:	b1c3      	cbz	r3, 800a30e <HAL_SD_Init+0x8e>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a2dc:	f44f 7300 	mov.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a2e0:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a2e2:	68e1      	ldr	r1, [r4, #12]
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f7ff ff1b 	bl	800a120 <HAL_SD_ConfigWideBusOperation>
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d1cb      	bne.n	800a288 <HAL_SD_Init+0x8>
  tickstart = HAL_GetTick();
 800a2f0:	f7fa ffb4 	bl	800525c <HAL_GetTick>
 800a2f4:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f7ff ffae 	bl	800a258 <HAL_SD_GetCardState>
 800a2fc:	2804      	cmp	r0, #4
 800a2fe:	d10b      	bne.n	800a318 <HAL_SD_Init+0x98>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a300:	2300      	movs	r3, #0
 800a302:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800a304:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800a306:	2301      	movs	r3, #1
 800a308:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800a30c:	e7bd      	b.n	800a28a <HAL_SD_Init+0xa>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a30e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a312:	e7e5      	b.n	800a2e0 <HAL_SD_Init+0x60>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a314:	65e0      	str	r0, [r4, #92]	; 0x5c
 800a316:	e7e4      	b.n	800a2e2 <HAL_SD_Init+0x62>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800a318:	f7fa ffa0 	bl	800525c <HAL_GetTick>
 800a31c:	1b80      	subs	r0, r0, r6
 800a31e:	3001      	adds	r0, #1
 800a320:	d1e9      	bne.n	800a2f6 <HAL_SD_Init+0x76>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a322:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
      return HAL_TIMEOUT;
 800a326:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a328:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800a32a:	2301      	movs	r3, #1
 800a32c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 800a330:	e7ab      	b.n	800a28a <HAL_SD_Init+0xa>

0800a332 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a332:	4770      	bx	lr

0800a334 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800a334:	4770      	bx	lr

0800a336 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800a336:	4770      	bx	lr

0800a338 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800a338:	4770      	bx	lr
	...

0800a33c <HAL_SD_IRQHandler>:
{
 800a33c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t context = hsd->Context;
 800a33e:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 800a340:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a342:	6800      	ldr	r0, [r0, #0]
 800a344:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a346:	041b      	lsls	r3, r3, #16
 800a348:	d520      	bpl.n	800a38c <HAL_SD_IRQHandler+0x50>
 800a34a:	072f      	lsls	r7, r5, #28
 800a34c:	d51e      	bpl.n	800a38c <HAL_SD_IRQHandler+0x50>
  if (hsd->RxXferSize >= 32U)
 800a34e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a350:	2b1f      	cmp	r3, #31
 800a352:	d919      	bls.n	800a388 <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pRxBuffPtr;
 800a354:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a356:	1d35      	adds	r5, r6, #4
 800a358:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a35c:	6820      	ldr	r0, [r4, #0]
 800a35e:	3504      	adds	r5, #4
 800a360:	f002 f99a 	bl	800c698 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800a364:	f805 0c08 	strb.w	r0, [r5, #-8]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a368:	0a03      	lsrs	r3, r0, #8
 800a36a:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a36e:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a370:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a372:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a376:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 800a37a:	42bd      	cmp	r5, r7
 800a37c:	d1ee      	bne.n	800a35c <HAL_SD_IRQHandler+0x20>
    hsd->RxXferSize -= 32U;
 800a37e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hsd->pRxBuffPtr = tmp;
 800a380:	3620      	adds	r6, #32
    hsd->RxXferSize -= 32U;
 800a382:	3b20      	subs	r3, #32
    hsd->pRxBuffPtr = tmp;
 800a384:	62a6      	str	r6, [r4, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800a386:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800a388:	b003      	add	sp, #12
 800a38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a38c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a38e:	05de      	lsls	r6, r3, #23
 800a390:	d553      	bpl.n	800a43a <HAL_SD_IRQHandler+0xfe>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a392:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a396:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800a398:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a39a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a39e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a3a2:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a3a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a3a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3aa:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a3ac:	68c3      	ldr	r3, [r0, #12]
 800a3ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3b2:	60c3      	str	r3, [r0, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800a3b4:	f015 0308 	ands.w	r3, r5, #8
 800a3b8:	d01f      	beq.n	800a3fa <HAL_SD_IRQHandler+0xbe>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a3ba:	f015 0f22 	tst.w	r5, #34	; 0x22
 800a3be:	d008      	beq.n	800a3d2 <HAL_SD_IRQHandler+0x96>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a3c0:	f002 fa24 	bl	800c80c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a3c4:	b128      	cbz	r0, 800a3d2 <HAL_SD_IRQHandler+0x96>
          hsd->ErrorCode |= errorstate;
 800a3c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3c8:	4318      	orrs	r0, r3
 800a3ca:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f7ff fbcd 	bl	8009b6c <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a3d2:	6823      	ldr	r3, [r4, #0]
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a3d4:	07a9      	lsls	r1, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a3d6:	4a69      	ldr	r2, [pc, #420]	; (800a57c <HAL_SD_IRQHandler+0x240>)
 800a3d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a3da:	f04f 0301 	mov.w	r3, #1
 800a3de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a3e2:	f04f 0300 	mov.w	r3, #0
 800a3e6:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a3e8:	d003      	beq.n	800a3f2 <HAL_SD_IRQHandler+0xb6>
        HAL_SD_RxCpltCallback(hsd);
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f003 f8ee 	bl	800d5cc <HAL_SD_RxCpltCallback>
 800a3f0:	e7ca      	b.n	800a388 <HAL_SD_IRQHandler+0x4c>
        HAL_SD_TxCpltCallback(hsd);
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f003 f8e6 	bl	800d5c4 <HAL_SD_TxCpltCallback>
 800a3f8:	e7c6      	b.n	800a388 <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a3fa:	062a      	lsls	r2, r5, #24
 800a3fc:	d5c4      	bpl.n	800a388 <HAL_SD_IRQHandler+0x4c>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a3fe:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800a402:	6283      	str	r3, [r0, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a404:	62c3      	str	r3, [r0, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a406:	6503      	str	r3, [r0, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a408:	d008      	beq.n	800a41c <HAL_SD_IRQHandler+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a40a:	f002 f9ff 	bl	800c80c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800a40e:	b128      	cbz	r0, 800a41c <HAL_SD_IRQHandler+0xe0>
          hsd->ErrorCode |= errorstate;
 800a410:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a412:	4318      	orrs	r0, r3
 800a414:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a416:	4620      	mov	r0, r4
 800a418:	f7ff fba8 	bl	8009b6c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a41c:	2301      	movs	r3, #1
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a41e:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800a422:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a426:	f04f 0300 	mov.w	r3, #0
 800a42a:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a42c:	d002      	beq.n	800a434 <HAL_SD_IRQHandler+0xf8>
        HAL_SD_TxCpltCallback(hsd);
 800a42e:	4620      	mov	r0, r4
 800a430:	f003 f8c8 	bl	800d5c4 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a434:	07af      	lsls	r7, r5, #30
 800a436:	d0a7      	beq.n	800a388 <HAL_SD_IRQHandler+0x4c>
 800a438:	e7d7      	b.n	800a3ea <HAL_SD_IRQHandler+0xae>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a43a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a43c:	045e      	lsls	r6, r3, #17
 800a43e:	d527      	bpl.n	800a490 <HAL_SD_IRQHandler+0x154>
 800a440:	0729      	lsls	r1, r5, #28
 800a442:	d525      	bpl.n	800a490 <HAL_SD_IRQHandler+0x154>
  if (hsd->TxXferSize >= 32U)
 800a444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a446:	2b1f      	cmp	r3, #31
 800a448:	d99e      	bls.n	800a388 <HAL_SD_IRQHandler+0x4c>
  tmp = hsd->pTxBuffPtr;
 800a44a:	6a26      	ldr	r6, [r4, #32]
 800a44c:	1d35      	adds	r5, r6, #4
 800a44e:	f106 0724 	add.w	r7, r6, #36	; 0x24
      data = (uint32_t)(*tmp);
 800a452:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800a456:	3504      	adds	r5, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a458:	a901      	add	r1, sp, #4
 800a45a:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800a45c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800a45e:	f815 2c07 	ldrb.w	r2, [r5, #-7]
 800a462:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a466:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800a468:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 800a46c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a470:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800a472:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 800a476:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a47a:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a47c:	f002 f90f 	bl	800c69e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a480:	42af      	cmp	r7, r5
 800a482:	d1e6      	bne.n	800a452 <HAL_SD_IRQHandler+0x116>
    hsd->TxXferSize -= 32U;
 800a484:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsd->pTxBuffPtr = tmp;
 800a486:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800a488:	3b20      	subs	r3, #32
    hsd->pTxBuffPtr = tmp;
 800a48a:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize -= 32U;
 800a48c:	6263      	str	r3, [r4, #36]	; 0x24
 800a48e:	e77b      	b.n	800a388 <HAL_SD_IRQHandler+0x4c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a490:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a492:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a496:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a498:	d056      	beq.n	800a548 <HAL_SD_IRQHandler+0x20c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a49a:	079a      	lsls	r2, r3, #30
 800a49c:	d503      	bpl.n	800a4a6 <HAL_SD_IRQHandler+0x16a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a49e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4a0:	f043 0302 	orr.w	r3, r3, #2
 800a4a4:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a4a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a4a8:	071b      	lsls	r3, r3, #28
 800a4aa:	d503      	bpl.n	800a4b4 <HAL_SD_IRQHandler+0x178>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4ae:	f043 0308 	orr.w	r3, r3, #8
 800a4b2:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a4b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a4b6:	069f      	lsls	r7, r3, #26
 800a4b8:	d503      	bpl.n	800a4c2 <HAL_SD_IRQHandler+0x186>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a4ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4bc:	f043 0320 	orr.w	r3, r3, #32
 800a4c0:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a4c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a4c4:	06de      	lsls	r6, r3, #27
 800a4c6:	d503      	bpl.n	800a4d0 <HAL_SD_IRQHandler+0x194>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a4c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4ca:	f043 0310 	orr.w	r3, r3, #16
 800a4ce:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a4d0:	4b2a      	ldr	r3, [pc, #168]	; (800a57c <HAL_SD_IRQHandler+0x240>)
 800a4d2:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a4d4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a4d6:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800a4da:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a4dc:	68c3      	ldr	r3, [r0, #12]
 800a4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4e2:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a4e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a4e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a4ea:	62c3      	str	r3, [r0, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a4ec:	68c3      	ldr	r3, [r0, #12]
 800a4ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4f2:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a4f4:	f002 f98a 	bl	800c80c <SDMMC_CmdStopTransfer>
 800a4f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a4fa:	f015 0108 	ands.w	r1, r5, #8
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a4fe:	ea40 0003 	orr.w	r0, r0, r3
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a502:	6823      	ldr	r3, [r4, #0]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a504:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a506:	68da      	ldr	r2, [r3, #12]
 800a508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a50c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a50e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a512:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a514:	d008      	beq.n	800a528 <HAL_SD_IRQHandler+0x1ec>
      hsd->State = HAL_SD_STATE_READY;
 800a516:	2301      	movs	r3, #1
 800a518:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a51c:	2300      	movs	r3, #0
 800a51e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a520:	4620      	mov	r0, r4
 800a522:	f7ff fb23 	bl	8009b6c <HAL_SD_ErrorCallback>
 800a526:	e72f      	b.n	800a388 <HAL_SD_IRQHandler+0x4c>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a528:	0628      	lsls	r0, r5, #24
 800a52a:	f57f af2d 	bpl.w	800a388 <HAL_SD_IRQHandler+0x4c>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a52e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a530:	2a00      	cmp	r2, #0
 800a532:	f43f af29 	beq.w	800a388 <HAL_SD_IRQHandler+0x4c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a538:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a53c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a53e:	6519      	str	r1, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a540:	2301      	movs	r3, #1
 800a542:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800a546:	e7eb      	b.n	800a520 <HAL_SD_IRQHandler+0x1e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a548:	00da      	lsls	r2, r3, #3
 800a54a:	f57f af1d 	bpl.w	800a388 <HAL_SD_IRQHandler+0x4c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a54e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a552:	f005 0520 	and.w	r5, r5, #32
 800a556:	6383      	str	r3, [r0, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a558:	6d03      	ldr	r3, [r0, #80]	; 0x50
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a55a:	4620      	mov	r0, r4
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a55c:	075b      	lsls	r3, r3, #29
 800a55e:	d406      	bmi.n	800a56e <HAL_SD_IRQHandler+0x232>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a560:	b115      	cbz	r5, 800a568 <HAL_SD_IRQHandler+0x22c>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a562:	f7ff fee9 	bl	800a338 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800a566:	e70f      	b.n	800a388 <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a568:	f7ff fee4 	bl	800a334 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800a56c:	e70c      	b.n	800a388 <HAL_SD_IRQHandler+0x4c>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a56e:	b115      	cbz	r5, 800a576 <HAL_SD_IRQHandler+0x23a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a570:	f7ff fee1 	bl	800a336 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800a574:	e708      	b.n	800a388 <HAL_SD_IRQHandler+0x4c>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a576:	f7ff fedc 	bl	800a332 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a57a:	e705      	b.n	800a388 <HAL_SD_IRQHandler+0x4c>
 800a57c:	18000f3a 	.word	0x18000f3a

0800a580 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800a580:	6803      	ldr	r3, [r0, #0]
 800a582:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a584:	699a      	ldr	r2, [r3, #24]
 800a586:	f042 0208 	orr.w	r2, r2, #8
 800a58a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a58c:	699a      	ldr	r2, [r3, #24]
 800a58e:	f042 0210 	orr.w	r2, r2, #16
 800a592:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	f022 0201 	bic.w	r2, r2, #1
 800a59a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a59c:	691a      	ldr	r2, [r3, #16]
 800a59e:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 800a5a2:	f022 0203 	bic.w	r2, r2, #3
 800a5a6:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a5a8:	689a      	ldr	r2, [r3, #8]
 800a5aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a5ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a5b0:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a5b4:	2a04      	cmp	r2, #4
 800a5b6:	d00b      	beq.n	800a5d0 <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a5b8:	068a      	lsls	r2, r1, #26
 800a5ba:	d509      	bpl.n	800a5d0 <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a5bc:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a5c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5c4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a5c8:	699a      	ldr	r2, [r3, #24]
 800a5ca:	f042 0220 	orr.w	r2, r2, #32
 800a5ce:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a5d0:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a5d4:	2a03      	cmp	r2, #3
 800a5d6:	d00b      	beq.n	800a5f0 <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a5d8:	064a      	lsls	r2, r1, #25
 800a5da:	d509      	bpl.n	800a5f0 <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a5dc:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a5e0:	f042 0204 	orr.w	r2, r2, #4
 800a5e4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5e8:	699a      	ldr	r2, [r3, #24]
 800a5ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5ee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a5f0:	058a      	lsls	r2, r1, #22
 800a5f2:	d509      	bpl.n	800a608 <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a5f4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a5f8:	f042 0201 	orr.w	r2, r2, #1
 800a5fc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a600:	699a      	ldr	r2, [r3, #24]
 800a602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a606:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a608:	05ca      	lsls	r2, r1, #23
 800a60a:	d509      	bpl.n	800a620 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a60c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a610:	f042 0208 	orr.w	r2, r2, #8
 800a614:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a61e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a620:	2300      	movs	r3, #0
 800a622:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a626:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a62a:	4770      	bx	lr

0800a62c <HAL_SPI_Init>:
{
 800a62c:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 800a62e:	4604      	mov	r4, r0
 800a630:	b908      	cbnz	r0, 800a636 <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 800a632:	2001      	movs	r0, #1
}
 800a634:	bd70      	pop	{r4, r5, r6, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a636:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a638:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a63a:	4940      	ldr	r1, [pc, #256]	; (800a73c <HAL_SPI_Init+0x110>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a63c:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a63e:	428a      	cmp	r2, r1
 800a640:	68c3      	ldr	r3, [r0, #12]
 800a642:	d009      	beq.n	800a658 <HAL_SPI_Init+0x2c>
 800a644:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 800a648:	428a      	cmp	r2, r1
 800a64a:	d005      	beq.n	800a658 <HAL_SPI_Init+0x2c>
 800a64c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a650:	428a      	cmp	r2, r1
 800a652:	d001      	beq.n	800a658 <HAL_SPI_Init+0x2c>
 800a654:	2b0f      	cmp	r3, #15
 800a656:	d8ec      	bhi.n	800a632 <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a658:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a65a:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a65c:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a65e:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800a660:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a664:	4935      	ldr	r1, [pc, #212]	; (800a73c <HAL_SPI_Init+0x110>)
 800a666:	428a      	cmp	r2, r1
 800a668:	d066      	beq.n	800a738 <HAL_SPI_Init+0x10c>
 800a66a:	f5a1 4178 	sub.w	r1, r1, #63488	; 0xf800
 800a66e:	428a      	cmp	r2, r1
 800a670:	d062      	beq.n	800a738 <HAL_SPI_Init+0x10c>
 800a672:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a676:	428a      	cmp	r2, r1
 800a678:	d05e      	beq.n	800a738 <HAL_SPI_Init+0x10c>
 800a67a:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a67c:	d8d9      	bhi.n	800a632 <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a67e:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800a682:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a686:	b923      	cbnz	r3, 800a692 <HAL_SPI_Init+0x66>
    hspi->Lock = HAL_UNLOCKED;
 800a688:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800a68c:	4620      	mov	r0, r4
 800a68e:	f7f9 f83f 	bl	8003710 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a692:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800a694:	6822      	ldr	r2, [r4, #0]
 800a696:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800a698:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a69c:	6813      	ldr	r3, [r2, #0]
 800a69e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a6a0:	f023 0301 	bic.w	r3, r3, #1
 800a6a4:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800a6a6:	69a3      	ldr	r3, [r4, #24]
 800a6a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a6ac:	d107      	bne.n	800a6be <HAL_SPI_Init+0x92>
 800a6ae:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a6b2:	d104      	bne.n	800a6be <HAL_SPI_Init+0x92>
 800a6b4:	b91d      	cbnz	r5, 800a6be <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a6b6:	6810      	ldr	r0, [r2, #0]
 800a6b8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800a6bc:	6010      	str	r0, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a6be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a6c0:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a6c2:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a6c4:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a6c6:	4330      	orrs	r0, r6
 800a6c8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800a6ca:	4330      	orrs	r0, r6
 800a6cc:	68e6      	ldr	r6, [r4, #12]
 800a6ce:	4330      	orrs	r0, r6
 800a6d0:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a6d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a6d4:	4303      	orrs	r3, r0
 800a6d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a6d8:	4303      	orrs	r3, r0
 800a6da:	6920      	ldr	r0, [r4, #16]
 800a6dc:	4303      	orrs	r3, r0
 800a6de:	6960      	ldr	r0, [r4, #20]
 800a6e0:	4303      	orrs	r3, r0
 800a6e2:	6a20      	ldr	r0, [r4, #32]
 800a6e4:	4303      	orrs	r3, r0
 800a6e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a6e8:	4303      	orrs	r3, r0
 800a6ea:	68a0      	ldr	r0, [r4, #8]
 800a6ec:	4303      	orrs	r3, r0
 800a6ee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a6f0:	4303      	orrs	r3, r0
 800a6f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6f4:	4303      	orrs	r3, r0
 800a6f6:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a6f8:	b959      	cbnz	r1, 800a712 <HAL_SPI_Init+0xe6>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a6fa:	6893      	ldr	r3, [r2, #8]
 800a6fc:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a700:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a704:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a706:	6893      	ldr	r3, [r2, #8]
 800a708:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a70c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a710:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a712:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a714:	f023 0301 	bic.w	r3, r3, #1
 800a718:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a71a:	024b      	lsls	r3, r1, #9
 800a71c:	d505      	bpl.n	800a72a <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a71e:	68d3      	ldr	r3, [r2, #12]
 800a720:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a722:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a726:	430b      	orrs	r3, r1
 800a728:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a72a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800a72c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a72e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a732:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  return HAL_OK;
 800a736:	e77d      	b.n	800a634 <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a738:	2b10      	cmp	r3, #16
 800a73a:	e79f      	b.n	800a67c <HAL_SPI_Init+0x50>
 800a73c:	40013000 	.word	0x40013000

0800a740 <HAL_SPI_Transmit>:
{
 800a740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a744:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800a746:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 800a74a:	4604      	mov	r4, r0
 800a74c:	4689      	mov	r9, r1
  __HAL_LOCK(hspi);
 800a74e:	2b01      	cmp	r3, #1
{
 800a750:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800a752:	d00d      	beq.n	800a770 <HAL_SPI_Transmit+0x30>
 800a754:	2301      	movs	r3, #1
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a756:	6807      	ldr	r7, [r0, #0]
  __HAL_LOCK(hspi);
 800a758:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800a75c:	f7fa fd7e 	bl	800525c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800a760:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 800a764:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800a766:	2b01      	cmp	r3, #1
 800a768:	d004      	beq.n	800a774 <HAL_SPI_Transmit+0x34>
    __HAL_UNLOCK(hspi);
 800a76a:	2300      	movs	r3, #0
 800a76c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800a770:	2002      	movs	r0, #2
 800a772:	e009      	b.n	800a788 <HAL_SPI_Transmit+0x48>
  if ((pData == NULL) || (Size == 0UL))
 800a774:	f1b9 0f00 	cmp.w	r9, #0
 800a778:	d002      	beq.n	800a780 <HAL_SPI_Transmit+0x40>
 800a77a:	f1b8 0f00 	cmp.w	r8, #0
 800a77e:	d105      	bne.n	800a78c <HAL_SPI_Transmit+0x4c>
    __HAL_UNLOCK(hspi);
 800a780:	2300      	movs	r3, #0
    return errorcode;
 800a782:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800a784:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800a788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a78c:	2303      	movs	r3, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a78e:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a790:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a794:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a798:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a79c:	f04f 0300 	mov.w	r3, #0
  hspi->TxXferSize  = Size;
 800a7a0:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7a4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
 800a7a8:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->TxXferCount = Size;
 800a7aa:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a7ae:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a7b2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800a7b6:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
 800a7ba:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7bc:	d103      	bne.n	800a7c6 <HAL_SPI_Transmit+0x86>
    SPI_1LINE_TX(hspi);
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7c4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a7c6:	6859      	ldr	r1, [r3, #4]
 800a7c8:	0c09      	lsrs	r1, r1, #16
 800a7ca:	0409      	lsls	r1, r1, #16
 800a7cc:	ea41 0108 	orr.w	r1, r1, r8
 800a7d0:	6059      	str	r1, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	f042 0201 	orr.w	r2, r2, #1
 800a7d8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7da:	6862      	ldr	r2, [r4, #4]
 800a7dc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800a7e0:	d103      	bne.n	800a7ea <HAL_SPI_Transmit+0xaa>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7e8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a7ea:	68e3      	ldr	r3, [r4, #12]
 800a7ec:	2b0f      	cmp	r3, #15
 800a7ee:	d82d      	bhi.n	800a84c <HAL_SPI_Transmit+0x10c>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7f0:	2b07      	cmp	r3, #7
 800a7f2:	d86f      	bhi.n	800a8d4 <HAL_SPI_Transmit+0x194>
    while (hspi->TxXferCount > 0UL)
 800a7f4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a7f8:	6822      	ldr	r2, [r4, #0]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	b363      	cbz	r3, 800a858 <HAL_SPI_Transmit+0x118>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a7fe:	6953      	ldr	r3, [r2, #20]
 800a800:	f013 0802 	ands.w	r8, r3, #2
 800a804:	f000 809a 	beq.w	800a93c <HAL_SPI_Transmit+0x1fc>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a808:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 800a80c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a80e:	2903      	cmp	r1, #3
 800a810:	d97c      	bls.n	800a90c <HAL_SPI_Transmit+0x1cc>
 800a812:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a814:	2940      	cmp	r1, #64	; 0x40
 800a816:	d979      	bls.n	800a90c <HAL_SPI_Transmit+0x1cc>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a818:	f853 1b04 	ldr.w	r1, [r3], #4
 800a81c:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a81e:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a820:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a824:	3b04      	subs	r3, #4
          hspi->TxXferCount -= (uint16_t)2UL;
 800a826:	b29b      	uxth	r3, r3
 800a828:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800a82c:	e7e2      	b.n	800a7f4 <HAL_SPI_Transmit+0xb4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a82e:	6957      	ldr	r7, [r2, #20]
 800a830:	f017 0702 	ands.w	r7, r7, #2
 800a834:	d023      	beq.n	800a87e <HAL_SPI_Transmit+0x13e>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a836:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a838:	f853 1b04 	ldr.w	r1, [r3], #4
 800a83c:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a83e:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800a840:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a844:	3b01      	subs	r3, #1
 800a846:	b29b      	uxth	r3, r3
 800a848:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 800a84c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a850:	6822      	ldr	r2, [r4, #0]
 800a852:	b29b      	uxth	r3, r3
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1ea      	bne.n	800a82e <HAL_SPI_Transmit+0xee>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	071b      	lsls	r3, r3, #28
 800a85e:	d577      	bpl.n	800a950 <HAL_SPI_Transmit+0x210>
  SPI_CloseTransfer(hspi);
 800a860:	4620      	mov	r0, r4
 800a862:	f7ff fe8d 	bl	800a580 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800a866:	2300      	movs	r3, #0
 800a868:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800a86c:	2301      	movs	r3, #1
 800a86e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a872:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 800a876:	3000      	adds	r0, #0
 800a878:	bf18      	it	ne
 800a87a:	2001      	movne	r0, #1
 800a87c:	e784      	b.n	800a788 <HAL_SPI_Transmit+0x48>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a87e:	f7fa fced 	bl	800525c <HAL_GetTick>
 800a882:	1b80      	subs	r0, r0, r6
 800a884:	42a8      	cmp	r0, r5
 800a886:	d3e1      	bcc.n	800a84c <HAL_SPI_Transmit+0x10c>
 800a888:	1c6b      	adds	r3, r5, #1
 800a88a:	d0df      	beq.n	800a84c <HAL_SPI_Transmit+0x10c>
          SPI_CloseTransfer(hspi);
 800a88c:	4620      	mov	r0, r4
 800a88e:	f7ff fe77 	bl	800a580 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800a892:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a896:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a89a:	2001      	movs	r0, #1
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a89c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a8a4:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          return HAL_ERROR;
 800a8a8:	e76e      	b.n	800a788 <HAL_SPI_Transmit+0x48>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a8aa:	6953      	ldr	r3, [r2, #20]
 800a8ac:	f013 0802 	ands.w	r8, r3, #2
 800a8b0:	d01f      	beq.n	800a8f2 <HAL_SPI_Transmit+0x1b2>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a8b2:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 800a8b6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a8b8:	2901      	cmp	r1, #1
 800a8ba:	d912      	bls.n	800a8e2 <HAL_SPI_Transmit+0x1a2>
 800a8bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a8be:	b181      	cbz	r1, 800a8e2 <HAL_SPI_Transmit+0x1a2>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a8c0:	f853 1b04 	ldr.w	r1, [r3], #4
 800a8c4:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a8c6:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a8c8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a8cc:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 800a8d4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a8d8:	6822      	ldr	r2, [r4, #0]
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1e4      	bne.n	800a8aa <HAL_SPI_Transmit+0x16a>
 800a8e0:	e7ba      	b.n	800a858 <HAL_SPI_Transmit+0x118>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a8e2:	f833 2b02 	ldrh.w	r2, [r3], #2
 800a8e6:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8e8:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800a8ea:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	e7ed      	b.n	800a8ce <HAL_SPI_Transmit+0x18e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8f2:	f7fa fcb3 	bl	800525c <HAL_GetTick>
 800a8f6:	1b80      	subs	r0, r0, r6
 800a8f8:	42a8      	cmp	r0, r5
 800a8fa:	d3eb      	bcc.n	800a8d4 <HAL_SPI_Transmit+0x194>
 800a8fc:	1c68      	adds	r0, r5, #1
 800a8fe:	d0e9      	beq.n	800a8d4 <HAL_SPI_Transmit+0x194>
          SPI_CloseTransfer(hspi);
 800a900:	4620      	mov	r0, r4
 800a902:	f7ff fe3d 	bl	800a580 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800a906:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
 800a90a:	e7c4      	b.n	800a896 <HAL_SPI_Transmit+0x156>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a90c:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 800a910:	2901      	cmp	r1, #1
 800a912:	d909      	bls.n	800a928 <HAL_SPI_Transmit+0x1e8>
 800a914:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a916:	b139      	cbz	r1, 800a928 <HAL_SPI_Transmit+0x1e8>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a918:	f833 2b02 	ldrh.w	r2, [r3], #2
 800a91c:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a91e:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a920:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a924:	3b02      	subs	r3, #2
 800a926:	e77e      	b.n	800a826 <HAL_SPI_Transmit+0xe6>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a92e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a930:	3301      	adds	r3, #1
 800a932:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800a934:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a938:	3b01      	subs	r3, #1
 800a93a:	e774      	b.n	800a826 <HAL_SPI_Transmit+0xe6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a93c:	f7fa fc8e 	bl	800525c <HAL_GetTick>
 800a940:	1b80      	subs	r0, r0, r6
 800a942:	42a8      	cmp	r0, r5
 800a944:	f4ff af56 	bcc.w	800a7f4 <HAL_SPI_Transmit+0xb4>
 800a948:	1c69      	adds	r1, r5, #1
 800a94a:	f43f af53 	beq.w	800a7f4 <HAL_SPI_Transmit+0xb4>
 800a94e:	e7d7      	b.n	800a900 <HAL_SPI_Transmit+0x1c0>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a950:	f7fa fc84 	bl	800525c <HAL_GetTick>
 800a954:	1b80      	subs	r0, r0, r6
 800a956:	4285      	cmp	r5, r0
 800a958:	f63f af7e 	bhi.w	800a858 <HAL_SPI_Transmit+0x118>
 800a95c:	1c6a      	adds	r2, r5, #1
 800a95e:	f43f af7b 	beq.w	800a858 <HAL_SPI_Transmit+0x118>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a962:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a966:	f043 0320 	orr.w	r3, r3, #32
 800a96a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800a96e:	e777      	b.n	800a860 <HAL_SPI_Transmit+0x120>

0800a970 <HAL_SPI_TransmitReceive>:
{
 800a970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a974:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800a976:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 800a97a:	4604      	mov	r4, r0
 800a97c:	460e      	mov	r6, r1
  __HAL_LOCK(hspi);
 800a97e:	2b01      	cmp	r3, #1
{
 800a980:	4692      	mov	sl, r2
 800a982:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 800a984:	d017      	beq.n	800a9b6 <HAL_SPI_TransmitReceive+0x46>
 800a986:	2301      	movs	r3, #1
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a988:	f8d0 9000 	ldr.w	r9, [r0]
  __HAL_LOCK(hspi);
 800a98c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800a990:	f7fa fc64 	bl	800525c <HAL_GetTick>
  tmp_state           = hspi->State;
 800a994:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 800a998:	4680      	mov	r8, r0
  tmp_mode            = hspi->Init.Mode;
 800a99a:	6860      	ldr	r0, [r4, #4]
  tmp_state           = hspi->State;
 800a99c:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d00b      	beq.n	800a9ba <HAL_SPI_TransmitReceive+0x4a>
 800a9a2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800a9a6:	d103      	bne.n	800a9b0 <HAL_SPI_TransmitReceive+0x40>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a9a8:	68a1      	ldr	r1, [r4, #8]
 800a9aa:	b909      	cbnz	r1, 800a9b0 <HAL_SPI_TransmitReceive+0x40>
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d004      	beq.n	800a9ba <HAL_SPI_TransmitReceive+0x4a>
    __HAL_UNLOCK(hspi);
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800a9b6:	2002      	movs	r0, #2
 800a9b8:	e008      	b.n	800a9cc <HAL_SPI_TransmitReceive+0x5c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a9ba:	b11e      	cbz	r6, 800a9c4 <HAL_SPI_TransmitReceive+0x54>
 800a9bc:	f1ba 0f00 	cmp.w	sl, #0
 800a9c0:	d000      	beq.n	800a9c4 <HAL_SPI_TransmitReceive+0x54>
 800a9c2:	b92d      	cbnz	r5, 800a9d0 <HAL_SPI_TransmitReceive+0x60>
    __HAL_UNLOCK(hspi);
 800a9c4:	2300      	movs	r3, #0
    return errorcode;
 800a9c6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800a9c8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800a9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a9d0:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800a9d4:	2b04      	cmp	r3, #4
 800a9d6:	d002      	beq.n	800a9de <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a9d8:	2305      	movs	r3, #5
 800a9da:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a9de:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9e0:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a9e2:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9e6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 800a9ee:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 800a9f2:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->RxXferSize  = Size;
 800a9f6:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a9fa:	65e6      	str	r6, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a9fc:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800aa00:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aa04:	6853      	ldr	r3, [r2, #4]
 800aa06:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800aa0a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800aa0e:	ea43 0305 	orr.w	r3, r3, r5
 800aa12:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 800aa14:	6813      	ldr	r3, [r2, #0]
 800aa16:	f043 0301 	orr.w	r3, r3, #1
 800aa1a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa1c:	d103      	bne.n	800aa26 <HAL_SPI_TransmitReceive+0xb6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aa1e:	6813      	ldr	r3, [r2, #0]
 800aa20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa24:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aa26:	68e3      	ldr	r3, [r4, #12]
 800aa28:	462e      	mov	r6, r5
 800aa2a:	2b0f      	cmp	r3, #15
 800aa2c:	d957      	bls.n	800aade <HAL_SPI_TransmitReceive+0x16e>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800aa2e:	f248 0908 	movw	r9, #32776	; 0x8008
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800aa32:	6822      	ldr	r2, [r4, #0]
 800aa34:	6953      	ldr	r3, [r2, #20]
 800aa36:	0799      	lsls	r1, r3, #30
 800aa38:	d50e      	bpl.n	800aa58 <HAL_SPI_TransmitReceive+0xe8>
 800aa3a:	b16d      	cbz	r5, 800aa58 <HAL_SPI_TransmitReceive+0xe8>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aa3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800aa3e:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa42:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa44:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 800aa46:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800aa52:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800aa56:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800aa58:	6953      	ldr	r3, [r2, #20]
 800aa5a:	ea13 0f09 	tst.w	r3, r9
 800aa5e:	d00e      	beq.n	800aa7e <HAL_SPI_TransmitReceive+0x10e>
 800aa60:	b16e      	cbz	r6, 800aa7e <HAL_SPI_TransmitReceive+0x10e>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aa62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aa64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa66:	f843 2b04 	str.w	r2, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800aa6a:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 800aa6c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800aa70:	3b01      	subs	r3, #1
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800aa78:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
 800aa7c:	b2b6      	uxth	r6, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa7e:	f7fa fbed 	bl	800525c <HAL_GetTick>
 800aa82:	eba0 0008 	sub.w	r0, r0, r8
 800aa86:	42b8      	cmp	r0, r7
 800aa88:	d311      	bcc.n	800aaae <HAL_SPI_TransmitReceive+0x13e>
 800aa8a:	1c7b      	adds	r3, r7, #1
 800aa8c:	d00f      	beq.n	800aaae <HAL_SPI_TransmitReceive+0x13e>
        SPI_CloseTransfer(hspi);
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f7ff fd76 	bl	800a580 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800aa94:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800aa96:	2001      	movs	r0, #1
        __HAL_UNLOCK(hspi);
 800aa98:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa9c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aaa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaa4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800aaa8:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
        return HAL_ERROR;
 800aaac:	e78e      	b.n	800a9cc <HAL_SPI_TransmitReceive+0x5c>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aaae:	2d00      	cmp	r5, #0
 800aab0:	d1bf      	bne.n	800aa32 <HAL_SPI_TransmitReceive+0xc2>
 800aab2:	2e00      	cmp	r6, #0
 800aab4:	d1bd      	bne.n	800aa32 <HAL_SPI_TransmitReceive+0xc2>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	071b      	lsls	r3, r3, #28
 800aabc:	f140 80cd 	bpl.w	800ac5a <HAL_SPI_TransmitReceive+0x2ea>
  SPI_CloseTransfer(hspi);
 800aac0:	4620      	mov	r0, r4
 800aac2:	f7ff fd5d 	bl	800a580 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800aac6:	2300      	movs	r3, #0
 800aac8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800aacc:	2301      	movs	r3, #1
 800aace:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aad2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_LOCK(hspi);
 800aad6:	3000      	adds	r0, #0
 800aad8:	bf18      	it	ne
 800aada:	2001      	movne	r0, #1
 800aadc:	e776      	b.n	800a9cc <HAL_SPI_TransmitReceive+0x5c>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aade:	2b07      	cmp	r3, #7
 800aae0:	d83d      	bhi.n	800ab5e <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800aae2:	6822      	ldr	r2, [r4, #0]
 800aae4:	6953      	ldr	r3, [r2, #20]
 800aae6:	079b      	lsls	r3, r3, #30
 800aae8:	d515      	bpl.n	800ab16 <HAL_SPI_TransmitReceive+0x1a6>
 800aaea:	b1a5      	cbz	r5, 800ab16 <HAL_SPI_TransmitReceive+0x1a6>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800aaec:	2d03      	cmp	r5, #3
 800aaee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800aaf0:	f240 8083 	bls.w	800abfa <HAL_SPI_TransmitReceive+0x28a>
 800aaf4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aaf6:	2940      	cmp	r1, #64	; 0x40
 800aaf8:	f240 8081 	bls.w	800abfe <HAL_SPI_TransmitReceive+0x28e>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aafc:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab00:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ab02:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ab04:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ab08:	3b04      	subs	r3, #4
          hspi->TxXferCount--;
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ab10:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800ab14:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ab16:	6822      	ldr	r2, [r4, #0]
 800ab18:	6953      	ldr	r3, [r2, #20]
 800ab1a:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 800ab1e:	d011      	beq.n	800ab44 <HAL_SPI_TransmitReceive+0x1d4>
 800ab20:	b186      	cbz	r6, 800ab44 <HAL_SPI_TransmitReceive+0x1d4>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ab22:	6951      	ldr	r1, [r2, #20]
 800ab24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab26:	0408      	lsls	r0, r1, #16
 800ab28:	d57e      	bpl.n	800ac28 <HAL_SPI_TransmitReceive+0x2b8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ab2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ab2c:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ab30:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ab32:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ab36:	3b04      	subs	r3, #4
          hspi->RxXferCount--;
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ab3e:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
 800ab42:	b2b6      	uxth	r6, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab44:	f7fa fb8a 	bl	800525c <HAL_GetTick>
 800ab48:	eba0 0008 	sub.w	r0, r0, r8
 800ab4c:	42b8      	cmp	r0, r7
 800ab4e:	d301      	bcc.n	800ab54 <HAL_SPI_TransmitReceive+0x1e4>
 800ab50:	1c79      	adds	r1, r7, #1
 800ab52:	d19c      	bne.n	800aa8e <HAL_SPI_TransmitReceive+0x11e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ab54:	2d00      	cmp	r5, #0
 800ab56:	d1c4      	bne.n	800aae2 <HAL_SPI_TransmitReceive+0x172>
 800ab58:	2e00      	cmp	r6, #0
 800ab5a:	d1c2      	bne.n	800aae2 <HAL_SPI_TransmitReceive+0x172>
 800ab5c:	e7ab      	b.n	800aab6 <HAL_SPI_TransmitReceive+0x146>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800ab5e:	6822      	ldr	r2, [r4, #0]
 800ab60:	6953      	ldr	r3, [r2, #20]
 800ab62:	0798      	lsls	r0, r3, #30
 800ab64:	d513      	bpl.n	800ab8e <HAL_SPI_TransmitReceive+0x21e>
 800ab66:	b195      	cbz	r5, 800ab8e <HAL_SPI_TransmitReceive+0x21e>
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ab68:	2d01      	cmp	r5, #1
 800ab6a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ab6c:	d933      	bls.n	800abd6 <HAL_SPI_TransmitReceive+0x266>
 800ab6e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ab70:	2900      	cmp	r1, #0
 800ab72:	d030      	beq.n	800abd6 <HAL_SPI_TransmitReceive+0x266>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ab74:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab78:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ab7a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ab7c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ab80:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ab88:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800ab8c:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ab8e:	6953      	ldr	r3, [r2, #20]
 800ab90:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 800ab94:	d011      	beq.n	800abba <HAL_SPI_TransmitReceive+0x24a>
 800ab96:	b186      	cbz	r6, 800abba <HAL_SPI_TransmitReceive+0x24a>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ab98:	6951      	ldr	r1, [r2, #20]
 800ab9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab9c:	0409      	lsls	r1, r1, #16
 800ab9e:	d523      	bpl.n	800abe8 <HAL_SPI_TransmitReceive+0x278>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aba0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aba2:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aba6:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800aba8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800abac:	3b02      	subs	r3, #2
          hspi->RxXferCount--;
 800abae:	b29b      	uxth	r3, r3
 800abb0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800abb4:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
 800abb8:	b2b6      	uxth	r6, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abba:	f7fa fb4f 	bl	800525c <HAL_GetTick>
 800abbe:	eba0 0008 	sub.w	r0, r0, r8
 800abc2:	42b8      	cmp	r0, r7
 800abc4:	d302      	bcc.n	800abcc <HAL_SPI_TransmitReceive+0x25c>
 800abc6:	1c7a      	adds	r2, r7, #1
 800abc8:	f47f af61 	bne.w	800aa8e <HAL_SPI_TransmitReceive+0x11e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800abcc:	2d00      	cmp	r5, #0
 800abce:	d1c6      	bne.n	800ab5e <HAL_SPI_TransmitReceive+0x1ee>
 800abd0:	2e00      	cmp	r6, #0
 800abd2:	d1c4      	bne.n	800ab5e <HAL_SPI_TransmitReceive+0x1ee>
 800abd4:	e76f      	b.n	800aab6 <HAL_SPI_TransmitReceive+0x146>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800abd6:	f833 1b02 	ldrh.w	r1, [r3], #2
 800abda:	f8a9 1020 	strh.w	r1, [r9, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800abde:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800abe0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800abe4:	3b01      	subs	r3, #1
 800abe6:	e7cc      	b.n	800ab82 <HAL_SPI_TransmitReceive+0x212>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800abe8:	f8b9 2030 	ldrh.w	r2, [r9, #48]	; 0x30
 800abec:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800abf0:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800abf2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800abf6:	3b01      	subs	r3, #1
 800abf8:	e7d9      	b.n	800abae <HAL_SPI_TransmitReceive+0x23e>
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800abfa:	2d01      	cmp	r5, #1
 800abfc:	d00a      	beq.n	800ac14 <HAL_SPI_TransmitReceive+0x2a4>
 800abfe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ac00:	b141      	cbz	r1, 800ac14 <HAL_SPI_TransmitReceive+0x2a4>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ac02:	f833 2b02 	ldrh.w	r2, [r3], #2
 800ac06:	f8a9 2020 	strh.w	r2, [r9, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac0a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ac0c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ac10:	3b02      	subs	r3, #2
 800ac12:	e77a      	b.n	800ab0a <HAL_SPI_TransmitReceive+0x19a>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ac1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 800ac20:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ac24:	3b01      	subs	r3, #1
 800ac26:	e770      	b.n	800ab0a <HAL_SPI_TransmitReceive+0x19a>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800ac28:	6951      	ldr	r1, [r2, #20]
 800ac2a:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 800ac2e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800ac32:	d908      	bls.n	800ac46 <HAL_SPI_TransmitReceive+0x2d6>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac34:	f8b9 2030 	ldrh.w	r2, [r9, #48]	; 0x30
 800ac38:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac3c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ac3e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ac42:	3b02      	subs	r3, #2
 800ac44:	e778      	b.n	800ab38 <HAL_SPI_TransmitReceive+0x1c8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac46:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800ac4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac4e:	3301      	adds	r3, #1
 800ac50:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800ac52:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ac56:	3b01      	subs	r3, #1
 800ac58:	e76e      	b.n	800ab38 <HAL_SPI_TransmitReceive+0x1c8>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac5a:	f7fa faff 	bl	800525c <HAL_GetTick>
 800ac5e:	eba0 0008 	sub.w	r0, r0, r8
 800ac62:	4287      	cmp	r7, r0
 800ac64:	f63f af27 	bhi.w	800aab6 <HAL_SPI_TransmitReceive+0x146>
 800ac68:	1c7a      	adds	r2, r7, #1
 800ac6a:	f43f af24 	beq.w	800aab6 <HAL_SPI_TransmitReceive+0x146>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac6e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ac72:	f043 0320 	orr.w	r3, r3, #32
 800ac76:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800ac7a:	e721      	b.n	800aac0 <HAL_SPI_TransmitReceive+0x150>

0800ac7c <HAL_SPI_Receive>:
{
 800ac7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac80:	461f      	mov	r7, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ac82:	6843      	ldr	r3, [r0, #4]
{
 800ac84:	4604      	mov	r4, r0
 800ac86:	4689      	mov	r9, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ac88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
{
 800ac8c:	4690      	mov	r8, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ac8e:	d10c      	bne.n	800acaa <HAL_SPI_Receive+0x2e>
 800ac90:	6883      	ldr	r3, [r0, #8]
 800ac92:	b953      	cbnz	r3, 800acaa <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ac94:	2304      	movs	r3, #4
 800ac96:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	9700      	str	r7, [sp, #0]
 800ac9e:	460a      	mov	r2, r1
 800aca0:	f7ff fe66 	bl	800a970 <HAL_SPI_TransmitReceive>
}
 800aca4:	b003      	add	sp, #12
 800aca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800acaa:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d00d      	beq.n	800acce <HAL_SPI_Receive+0x52>
 800acb2:	2301      	movs	r3, #1
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800acb4:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hspi);
 800acb6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800acba:	f7fa facf 	bl	800525c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800acbe:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tickstart = HAL_GetTick();
 800acc2:	4605      	mov	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d004      	beq.n	800acd2 <HAL_SPI_Receive+0x56>
    __HAL_UNLOCK(hspi);
 800acc8:	2300      	movs	r3, #0
 800acca:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800acce:	2002      	movs	r0, #2
 800acd0:	e7e8      	b.n	800aca4 <HAL_SPI_Receive+0x28>
  if ((pData == NULL) || (Size == 0UL))
 800acd2:	f1b9 0f00 	cmp.w	r9, #0
 800acd6:	d002      	beq.n	800acde <HAL_SPI_Receive+0x62>
 800acd8:	f1b8 0f00 	cmp.w	r8, #0
 800acdc:	d104      	bne.n	800ace8 <HAL_SPI_Receive+0x6c>
    __HAL_UNLOCK(hspi);
 800acde:	2300      	movs	r3, #0
    return errorcode;
 800ace0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800ace2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800ace6:	e7dd      	b.n	800aca4 <HAL_SPI_Receive+0x28>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ace8:	2304      	movs	r3, #4
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800acea:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800acee:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800acf2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acf6:	2300      	movs	r3, #0
 800acf8:	6821      	ldr	r1, [r4, #0]
 800acfa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pTxBuffPtr  = NULL;
 800acfe:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->RxXferCount = Size;
 800ad00:	f8a4 806a 	strh.w	r8, [r4, #106]	; 0x6a
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ad04:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ad08:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 800ad0c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad10:	68a3      	ldr	r3, [r4, #8]
 800ad12:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ad16:	d103      	bne.n	800ad20 <HAL_SPI_Receive+0xa4>
    SPI_1LINE_RX(hspi);
 800ad18:	680b      	ldr	r3, [r1, #0]
 800ad1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad1e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ad20:	684b      	ldr	r3, [r1, #4]
 800ad22:	0c1b      	lsrs	r3, r3, #16
 800ad24:	041b      	lsls	r3, r3, #16
 800ad26:	ea43 0308 	orr.w	r3, r3, r8
 800ad2a:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800ad2c:	680b      	ldr	r3, [r1, #0]
 800ad2e:	f043 0301 	orr.w	r3, r3, #1
 800ad32:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad34:	6863      	ldr	r3, [r4, #4]
 800ad36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad3a:	d103      	bne.n	800ad44 <HAL_SPI_Receive+0xc8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ad3c:	680b      	ldr	r3, [r1, #0]
 800ad3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad42:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ad44:	68e3      	ldr	r3, [r4, #12]
 800ad46:	2b0f      	cmp	r3, #15
 800ad48:	d93b      	bls.n	800adc2 <HAL_SPI_Receive+0x146>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ad4a:	f248 0808 	movw	r8, #32776	; 0x8008
    while (hspi->RxXferCount > 0UL)
 800ad4e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	b973      	cbnz	r3, 800ad74 <HAL_SPI_Receive+0xf8>
  SPI_CloseTransfer(hspi);
 800ad56:	4620      	mov	r0, r4
 800ad58:	f7ff fc12 	bl	800a580 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800ad62:	2301      	movs	r3, #1
 800ad64:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad68:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ad6c:	3000      	adds	r0, #0
 800ad6e:	bf18      	it	ne
 800ad70:	2001      	movne	r0, #1
 800ad72:	e797      	b.n	800aca4 <HAL_SPI_Receive+0x28>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ad74:	6822      	ldr	r2, [r4, #0]
 800ad76:	6956      	ldr	r6, [r2, #20]
 800ad78:	ea16 0608 	ands.w	r6, r6, r8
 800ad7c:	d00b      	beq.n	800ad96 <HAL_SPI_Receive+0x11a>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ad7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ad80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad82:	f843 2b04 	str.w	r2, [r3], #4
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ad86:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800ad88:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800ad94:	e7db      	b.n	800ad4e <HAL_SPI_Receive+0xd2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad96:	f7fa fa61 	bl	800525c <HAL_GetTick>
 800ad9a:	1b40      	subs	r0, r0, r5
 800ad9c:	42b8      	cmp	r0, r7
 800ad9e:	d3d6      	bcc.n	800ad4e <HAL_SPI_Receive+0xd2>
 800ada0:	1c7a      	adds	r2, r7, #1
 800ada2:	d0d4      	beq.n	800ad4e <HAL_SPI_Receive+0xd2>
          SPI_CloseTransfer(hspi);
 800ada4:	4620      	mov	r0, r4
 800ada6:	f7ff fbeb 	bl	800a580 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800adaa:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800adae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800adb2:	2001      	movs	r0, #1
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800adb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adb8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800adbc:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
          return HAL_ERROR;
 800adc0:	e770      	b.n	800aca4 <HAL_SPI_Receive+0x28>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800adc2:	2b07      	cmp	r3, #7
 800adc4:	d82b      	bhi.n	800ae1e <HAL_SPI_Receive+0x1a2>
    while (hspi->RxXferCount > 0UL)
 800adc6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800adca:	b29b      	uxth	r3, r3
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d0c2      	beq.n	800ad56 <HAL_SPI_Receive+0xda>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	695a      	ldr	r2, [r3, #20]
 800add4:	f412 4860 	ands.w	r8, r2, #57344	; 0xe000
 800add8:	d054      	beq.n	800ae84 <HAL_SPI_Receive+0x208>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800adda:	6959      	ldr	r1, [r3, #20]
 800addc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adde:	0409      	lsls	r1, r1, #16
 800ade0:	d538      	bpl.n	800ae54 <HAL_SPI_Receive+0x1d8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ade2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade4:	f842 3b04 	str.w	r3, [r2], #4
          hspi->RxXferCount -= (uint16_t)4UL;
 800ade8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800adec:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800adee:	3b04      	subs	r3, #4
          hspi->RxXferCount -= (uint16_t)2UL;
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800adf6:	e7e6      	b.n	800adc6 <HAL_SPI_Receive+0x14a>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800adf8:	6821      	ldr	r1, [r4, #0]
 800adfa:	694b      	ldr	r3, [r1, #20]
 800adfc:	f413 4860 	ands.w	r8, r3, #57344	; 0xe000
 800ae00:	d01b      	beq.n	800ae3a <HAL_SPI_Receive+0x1be>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ae02:	694b      	ldr	r3, [r1, #20]
 800ae04:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae06:	041b      	lsls	r3, r3, #16
 800ae08:	d50f      	bpl.n	800ae2a <HAL_SPI_Receive+0x1ae>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ae0a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800ae0c:	f842 3b04 	str.w	r3, [r2], #4
          hspi->RxXferCount -= (uint16_t)2UL;
 800ae10:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ae14:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ae16:	3b02      	subs	r3, #2
          hspi->RxXferCount--;
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 800ae1e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1e7      	bne.n	800adf8 <HAL_SPI_Receive+0x17c>
 800ae28:	e795      	b.n	800ad56 <HAL_SPI_Receive+0xda>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae2a:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800ae2c:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 800ae30:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae34:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800ae36:	3b01      	subs	r3, #1
 800ae38:	e7ee      	b.n	800ae18 <HAL_SPI_Receive+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae3a:	f7fa fa0f 	bl	800525c <HAL_GetTick>
 800ae3e:	1b40      	subs	r0, r0, r5
 800ae40:	42b8      	cmp	r0, r7
 800ae42:	d3ec      	bcc.n	800ae1e <HAL_SPI_Receive+0x1a2>
 800ae44:	1c78      	adds	r0, r7, #1
 800ae46:	d0ea      	beq.n	800ae1e <HAL_SPI_Receive+0x1a2>
          SPI_CloseTransfer(hspi);
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f7ff fb99 	bl	800a580 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800ae4e:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
 800ae52:	e7ac      	b.n	800adae <HAL_SPI_Receive+0x132>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800ae54:	6959      	ldr	r1, [r3, #20]
 800ae56:	f401 41c0 	and.w	r1, r1, #24576	; 0x6000
 800ae5a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800ae5e:	d907      	bls.n	800ae70 <HAL_SPI_Receive+0x1f4>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae60:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800ae62:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount -= (uint16_t)2UL;
 800ae66:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae6a:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ae6c:	3b02      	subs	r3, #2
 800ae6e:	e7bf      	b.n	800adf0 <HAL_SPI_Receive+0x174>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ae70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae74:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ae76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae78:	3301      	adds	r3, #1
 800ae7a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800ae7c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ae80:	3b01      	subs	r3, #1
 800ae82:	e7b5      	b.n	800adf0 <HAL_SPI_Receive+0x174>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae84:	f7fa f9ea 	bl	800525c <HAL_GetTick>
 800ae88:	1b40      	subs	r0, r0, r5
 800ae8a:	42b8      	cmp	r0, r7
 800ae8c:	d39b      	bcc.n	800adc6 <HAL_SPI_Receive+0x14a>
 800ae8e:	1c7b      	adds	r3, r7, #1
 800ae90:	d099      	beq.n	800adc6 <HAL_SPI_Receive+0x14a>
 800ae92:	e7d9      	b.n	800ae48 <HAL_SPI_Receive+0x1cc>

0800ae94 <HAL_SPI_TransmitReceive_DMA>:
{
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800ae98:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 800ae9c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d012      	beq.n	800aec8 <HAL_SPI_TransmitReceive_DMA+0x34>
 800aea2:	2301      	movs	r3, #1
 800aea4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tmp_state   = hspi->State;
 800aea8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800aeac:	6840      	ldr	r0, [r0, #4]
  tmp_state   = hspi->State;
 800aeae:	b2db      	uxtb	r3, r3
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 800aeb0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800aeb4:	d103      	bne.n	800aebe <HAL_SPI_TransmitReceive_DMA+0x2a>
 800aeb6:	68a0      	ldr	r0, [r4, #8]
 800aeb8:	b908      	cbnz	r0, 800aebe <HAL_SPI_TransmitReceive_DMA+0x2a>
 800aeba:	2b04      	cmp	r3, #4
 800aebc:	d006      	beq.n	800aecc <HAL_SPI_TransmitReceive_DMA+0x38>
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d004      	beq.n	800aecc <HAL_SPI_TransmitReceive_DMA+0x38>
    __HAL_UNLOCK(hspi);
 800aec2:	2300      	movs	r3, #0
 800aec4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800aec8:	2002      	movs	r0, #2
 800aeca:	e004      	b.n	800aed6 <HAL_SPI_TransmitReceive_DMA+0x42>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800aecc:	b921      	cbnz	r1, 800aed8 <HAL_SPI_TransmitReceive_DMA+0x44>
    __HAL_UNLOCK(hspi);
 800aece:	2300      	movs	r3, #0
    return errorcode;
 800aed0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800aed2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800aed6:	bd70      	pop	{r4, r5, r6, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	d0f8      	beq.n	800aece <HAL_SPI_TransmitReceive_DMA+0x3a>
 800aedc:	2d00      	cmp	r5, #0
 800aede:	d0f6      	beq.n	800aece <HAL_SPI_TransmitReceive_DMA+0x3a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aee0:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800aee4:	2b04      	cmp	r3, #4
 800aee6:	d002      	beq.n	800aeee <HAL_SPI_TransmitReceive_DMA+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aee8:	2305      	movs	r3, #5
 800aeea:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aeee:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aef0:	65e1      	str	r1, [r4, #92]	; 0x5c
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aef2:	6821      	ldr	r1, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aef4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800aef8:	68e6      	ldr	r6, [r4, #12]
  hspi->TxXferCount = Size;
 800aefa:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->RxXferCount = Size;
 800aefe:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800af02:	2e0f      	cmp	r6, #15
 800af04:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  hspi->TxXferSize  = Size;
 800af06:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800af0a:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800af0c:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->TxISR       = NULL;
 800af10:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800af14:	688b      	ldr	r3, [r1, #8]
 800af16:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800af1a:	608b      	str	r3, [r1, #8]
 800af1c:	6983      	ldr	r3, [r0, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800af1e:	d924      	bls.n	800af6a <HAL_SPI_TransmitReceive_DMA+0xd6>
 800af20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af24:	d1d3      	bne.n	800aece <HAL_SPI_TransmitReceive_DMA+0x3a>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800af26:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800af2a:	3130      	adds	r1, #48	; 0x30
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800af2c:	2b04      	cmp	r3, #4
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800af2e:	bf0b      	itete	eq
 800af30:	4b48      	ldreq	r3, [pc, #288]	; (800b054 <HAL_SPI_TransmitReceive_DMA+0x1c0>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800af32:	4b49      	ldrne	r3, [pc, #292]	; (800b058 <HAL_SPI_TransmitReceive_DMA+0x1c4>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800af34:	6403      	streq	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800af36:	6403      	strne	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800af38:	bf0c      	ite	eq
 800af3a:	4b48      	ldreq	r3, [pc, #288]	; (800b05c <HAL_SPI_TransmitReceive_DMA+0x1c8>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800af3c:	4b48      	ldrne	r3, [pc, #288]	; (800b060 <HAL_SPI_TransmitReceive_DMA+0x1cc>)
 800af3e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800af40:	4b48      	ldr	r3, [pc, #288]	; (800b064 <HAL_SPI_TransmitReceive_DMA+0x1d0>)
 800af42:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800af44:	2300      	movs	r3, #0
 800af46:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800af48:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800af4c:	f7fb fb96 	bl	800667c <HAL_DMA_Start_IT>
 800af50:	4603      	mov	r3, r0
 800af52:	2800      	cmp	r0, #0
 800af54:	d045      	beq.n	800afe2 <HAL_SPI_TransmitReceive_DMA+0x14e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af56:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800af5a:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af5c:	f043 0310 	orr.w	r3, r3, #16
 800af60:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800af64:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
 800af68:	e7b5      	b.n	800aed6 <HAL_SPI_TransmitReceive_DMA+0x42>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800af6a:	2e07      	cmp	r6, #7
 800af6c:	d914      	bls.n	800af98 <HAL_SPI_TransmitReceive_DMA+0x104>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800af6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af72:	d002      	beq.n	800af7a <HAL_SPI_TransmitReceive_DMA+0xe6>
 800af74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af78:	d1a9      	bne.n	800aece <HAL_SPI_TransmitReceive_DMA+0x3a>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800af7a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
 800af7c:	69b6      	ldr	r6, [r6, #24]
 800af7e:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800af82:	d105      	bne.n	800af90 <HAL_SPI_TransmitReceive_DMA+0xfc>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800af84:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800af88:	3601      	adds	r6, #1
 800af8a:	0876      	lsrs	r6, r6, #1
 800af8c:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800af90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af94:	d1c7      	bne.n	800af26 <HAL_SPI_TransmitReceive_DMA+0x92>
 800af96:	e00d      	b.n	800afb4 <HAL_SPI_TransmitReceive_DMA+0x120>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800af98:	6fa6      	ldr	r6, [r4, #120]	; 0x78
 800af9a:	69b6      	ldr	r6, [r6, #24]
 800af9c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800afa0:	d10d      	bne.n	800afbe <HAL_SPI_TransmitReceive_DMA+0x12a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800afa2:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800afa6:	3601      	adds	r6, #1
 800afa8:	0876      	lsrs	r6, r6, #1
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800afaa:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800afae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afb2:	d10c      	bne.n	800afce <HAL_SPI_TransmitReceive_DMA+0x13a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800afb4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800afb8:	3301      	adds	r3, #1
 800afba:	085b      	lsrs	r3, r3, #1
 800afbc:	e00e      	b.n	800afdc <HAL_SPI_TransmitReceive_DMA+0x148>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800afbe:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 800afc2:	d1f4      	bne.n	800afae <HAL_SPI_TransmitReceive_DMA+0x11a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800afc4:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800afc8:	3603      	adds	r6, #3
 800afca:	08b6      	lsrs	r6, r6, #2
 800afcc:	e7ed      	b.n	800afaa <HAL_SPI_TransmitReceive_DMA+0x116>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800afce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afd2:	d1a8      	bne.n	800af26 <HAL_SPI_TransmitReceive_DMA+0x92>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800afd4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800afd8:	3303      	adds	r3, #3
 800afda:	089b      	lsrs	r3, r3, #2
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800afdc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800afe0:	e7a1      	b.n	800af26 <HAL_SPI_TransmitReceive_DMA+0x92>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800afe2:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800afe4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800afe6:	6891      	ldr	r1, [r2, #8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800afe8:	3220      	adds	r2, #32
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800afea:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800afee:	f842 1c18 	str.w	r1, [r2, #-24]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800aff2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800aff4:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800aff8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 800affc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b000:	f7fb fb3c 	bl	800667c <HAL_DMA_Start_IT>
 800b004:	2800      	cmp	r0, #0
 800b006:	d1a6      	bne.n	800af56 <HAL_SPI_TransmitReceive_DMA+0xc2>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b008:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b00a:	6822      	ldr	r2, [r4, #0]
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	4916      	ldr	r1, [pc, #88]	; (800b068 <HAL_SPI_TransmitReceive_DMA+0x1d4>)
 800b010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b014:	d11a      	bne.n	800b04c <HAL_SPI_TransmitReceive_DMA+0x1b8>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b016:	6855      	ldr	r5, [r2, #4]
 800b018:	400d      	ands	r5, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b01a:	6055      	str	r5, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b01c:	6893      	ldr	r3, [r2, #8]
 800b01e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b022:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b024:	6913      	ldr	r3, [r2, #16]
 800b026:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800b02a:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800b02c:	6813      	ldr	r3, [r2, #0]
 800b02e:	f043 0301 	orr.w	r3, r3, #1
 800b032:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b034:	6863      	ldr	r3, [r4, #4]
 800b036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b03a:	d103      	bne.n	800b044 <HAL_SPI_TransmitReceive_DMA+0x1b0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b03c:	6813      	ldr	r3, [r2, #0]
 800b03e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b042:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800b044:	2300      	movs	r3, #0
 800b046:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 800b04a:	e744      	b.n	800aed6 <HAL_SPI_TransmitReceive_DMA+0x42>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b04c:	6853      	ldr	r3, [r2, #4]
 800b04e:	400b      	ands	r3, r1
 800b050:	431d      	orrs	r5, r3
 800b052:	e7e2      	b.n	800b01a <HAL_SPI_TransmitReceive_DMA+0x186>
 800b054:	0800b23d 	.word	0x0800b23d
 800b058:	0800b249 	.word	0x0800b249
 800b05c:	0800b1e9 	.word	0x0800b1e9
 800b060:	0800b213 	.word	0x0800b213
 800b064:	0800b255 	.word	0x0800b255
 800b068:	ffff0000 	.word	0xffff0000

0800b06c <HAL_SPI_Receive_DMA>:
{
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	4615      	mov	r5, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b070:	6882      	ldr	r2, [r0, #8]
{
 800b072:	4604      	mov	r4, r0
 800b074:	460e      	mov	r6, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b076:	b962      	cbnz	r2, 800b092 <HAL_SPI_Receive_DMA+0x26>
 800b078:	6843      	ldr	r3, [r0, #4]
 800b07a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b07e:	d108      	bne.n	800b092 <HAL_SPI_Receive_DMA+0x26>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b080:	2304      	movs	r3, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b082:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b084:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b088:	462b      	mov	r3, r5
}
 800b08a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b08e:	f7ff bf01 	b.w	800ae94 <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 800b092:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800b096:	2b01      	cmp	r3, #1
 800b098:	d009      	beq.n	800b0ae <HAL_SPI_Receive_DMA+0x42>
 800b09a:	2301      	movs	r3, #1
 800b09c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800b0a0:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d004      	beq.n	800b0b2 <HAL_SPI_Receive_DMA+0x46>
    __HAL_UNLOCK(hspi);
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 800b0ae:	2002      	movs	r0, #2
 800b0b0:	e004      	b.n	800b0bc <HAL_SPI_Receive_DMA+0x50>
  if ((pData == NULL) || (Size == 0UL))
 800b0b2:	b926      	cbnz	r6, 800b0be <HAL_SPI_Receive_DMA+0x52>
    __HAL_UNLOCK(hspi);
 800b0b4:	2300      	movs	r3, #0
    return errorcode;
 800b0b6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 800b0b8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800b0bc:	bd70      	pop	{r4, r5, r6, pc}
  if ((pData == NULL) || (Size == 0UL))
 800b0be:	2d00      	cmp	r5, #0
 800b0c0:	d0f8      	beq.n	800b0b4 <HAL_SPI_Receive_DMA+0x48>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b0c2:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0c4:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b0c8:	6666      	str	r6, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b0ca:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0ce:	f04f 0300 	mov.w	r3, #0
  hspi->RxXferSize  = Size;
 800b0d2:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b0da:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800b0de:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b0e2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 800b0e6:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0ea:	d104      	bne.n	800b0f6 <HAL_SPI_Receive_DMA+0x8a>
    SPI_1LINE_RX(hspi);
 800b0ec:	6822      	ldr	r2, [r4, #0]
 800b0ee:	6813      	ldr	r3, [r2, #0]
 800b0f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0f4:	6013      	str	r3, [r2, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b0f6:	68e3      	ldr	r3, [r4, #12]
 800b0f8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b0fa:	2b0f      	cmp	r3, #15
 800b0fc:	d90b      	bls.n	800b116 <HAL_SPI_Receive_DMA+0xaa>
 800b0fe:	6982      	ldr	r2, [r0, #24]
 800b100:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b104:	d1d6      	bne.n	800b0b4 <HAL_SPI_Receive_DMA+0x48>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b106:	6982      	ldr	r2, [r0, #24]
 800b108:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b10c:	d005      	beq.n	800b11a <HAL_SPI_Receive_DMA+0xae>
 800b10e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b112:	d1cf      	bne.n	800b0b4 <HAL_SPI_Receive_DMA+0x48>
 800b114:	e001      	b.n	800b11a <HAL_SPI_Receive_DMA+0xae>
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b116:	2b07      	cmp	r3, #7
 800b118:	d8f5      	bhi.n	800b106 <HAL_SPI_Receive_DMA+0x9a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b11a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b11c:	2b07      	cmp	r3, #7
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b11e:	688a      	ldr	r2, [r1, #8]
 800b120:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b124:	608a      	str	r2, [r1, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b126:	d812      	bhi.n	800b14e <HAL_SPI_Receive_DMA+0xe2>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b128:	6983      	ldr	r3, [r0, #24]
 800b12a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b12e:	d104      	bne.n	800b13a <HAL_SPI_Receive_DMA+0xce>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b130:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b134:	3301      	adds	r3, #1
 800b136:	085b      	lsrs	r3, r3, #1
 800b138:	e006      	b.n	800b148 <HAL_SPI_Receive_DMA+0xdc>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b13a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b13e:	d10c      	bne.n	800b15a <HAL_SPI_Receive_DMA+0xee>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b140:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b144:	3303      	adds	r3, #3
 800b146:	089b      	lsrs	r3, r3, #2
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b148:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800b14c:	e005      	b.n	800b15a <HAL_SPI_Receive_DMA+0xee>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b14e:	2b0f      	cmp	r3, #15
 800b150:	d803      	bhi.n	800b15a <HAL_SPI_Receive_DMA+0xee>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b152:	6983      	ldr	r3, [r0, #24]
 800b154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b158:	d0ea      	beq.n	800b130 <HAL_SPI_Receive_DMA+0xc4>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b15a:	4b1e      	ldr	r3, [pc, #120]	; (800b1d4 <HAL_SPI_Receive_DMA+0x168>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b15c:	4632      	mov	r2, r6
 800b15e:	3130      	adds	r1, #48	; 0x30
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b160:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800b162:	4b1d      	ldr	r3, [pc, #116]	; (800b1d8 <HAL_SPI_Receive_DMA+0x16c>)
 800b164:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b166:	4b1d      	ldr	r3, [pc, #116]	; (800b1dc <HAL_SPI_Receive_DMA+0x170>)
 800b168:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800b16e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b172:	f7fb fa83 	bl	800667c <HAL_DMA_Start_IT>
 800b176:	b148      	cbz	r0, 800b18c <HAL_SPI_Receive_DMA+0x120>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b178:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b17c:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b17e:	f043 0310 	orr.w	r3, r3, #16
 800b182:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b186:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
    return errorcode;
 800b18a:	e797      	b.n	800b0bc <HAL_SPI_Receive_DMA+0x50>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b18c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b18e:	6821      	ldr	r1, [r4, #0]
 800b190:	69db      	ldr	r3, [r3, #28]
 800b192:	4a13      	ldr	r2, [pc, #76]	; (800b1e0 <HAL_SPI_Receive_DMA+0x174>)
 800b194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b198:	684b      	ldr	r3, [r1, #4]
 800b19a:	ea03 0302 	and.w	r3, r3, r2
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b19e:	bf18      	it	ne
 800b1a0:	432b      	orrne	r3, r5
 800b1a2:	604b      	str	r3, [r1, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b1a4:	688b      	ldr	r3, [r1, #8]
 800b1a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1aa:	608b      	str	r3, [r1, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b1ac:	690b      	ldr	r3, [r1, #16]
 800b1ae:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800b1b2:	610b      	str	r3, [r1, #16]
  __HAL_SPI_ENABLE(hspi);
 800b1b4:	680b      	ldr	r3, [r1, #0]
 800b1b6:	f043 0301 	orr.w	r3, r3, #1
 800b1ba:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1bc:	6863      	ldr	r3, [r4, #4]
 800b1be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1c2:	d103      	bne.n	800b1cc <HAL_SPI_Receive_DMA+0x160>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b1c4:	680b      	ldr	r3, [r1, #0]
 800b1c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b1ca:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(hspi);
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800b1d2:	e773      	b.n	800b0bc <HAL_SPI_Receive_DMA+0x50>
 800b1d4:	0800b23d 	.word	0x0800b23d
 800b1d8:	0800b1e9 	.word	0x0800b1e9
 800b1dc:	0800b255 	.word	0x0800b255
 800b1e0:	ffff0000 	.word	0xffff0000

0800b1e4 <HAL_SPI_TxCpltCallback>:
 800b1e4:	4770      	bx	lr

0800b1e6 <HAL_SPI_RxCpltCallback>:
 800b1e6:	4770      	bx	lr

0800b1e8 <SPI_DMAReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1e8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800b1ea:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b1ec:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b1f0:	2b07      	cmp	r3, #7
 800b1f2:	d006      	beq.n	800b202 <SPI_DMAReceiveCplt+0x1a>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b1f4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1fc:	d102      	bne.n	800b204 <SPI_DMAReceiveCplt+0x1c>
      HAL_SPI_RxCpltCallback(hspi);
 800b1fe:	f7ff fff2 	bl	800b1e6 <HAL_SPI_RxCpltCallback>
}
 800b202:	bd08      	pop	{r3, pc}
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b204:	6802      	ldr	r2, [r0, #0]
 800b206:	6913      	ldr	r3, [r2, #16]
 800b208:	f043 0308 	orr.w	r3, r3, #8
 800b20c:	6113      	str	r3, [r2, #16]
}
 800b20e:	e7f8      	b.n	800b202 <SPI_DMAReceiveCplt+0x1a>

0800b210 <HAL_SPI_TxRxCpltCallback>:
 800b210:	4770      	bx	lr

0800b212 <SPI_DMATransmitReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b212:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800b214:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b216:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b21a:	2b07      	cmp	r3, #7
 800b21c:	d006      	beq.n	800b22c <SPI_DMATransmitReceiveCplt+0x1a>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b21e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b226:	d102      	bne.n	800b22e <SPI_DMATransmitReceiveCplt+0x1c>
      HAL_SPI_TxRxCpltCallback(hspi);
 800b228:	f7ff fff2 	bl	800b210 <HAL_SPI_TxRxCpltCallback>
}
 800b22c:	bd08      	pop	{r3, pc}
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b22e:	6802      	ldr	r2, [r0, #0]
 800b230:	6913      	ldr	r3, [r2, #16]
 800b232:	f043 0308 	orr.w	r3, r3, #8
 800b236:	6113      	str	r3, [r2, #16]
}
 800b238:	e7f8      	b.n	800b22c <SPI_DMATransmitReceiveCplt+0x1a>

0800b23a <HAL_SPI_RxHalfCpltCallback>:
 800b23a:	4770      	bx	lr

0800b23c <SPI_DMAHalfReceiveCplt>:
{
 800b23c:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b23e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b240:	f7ff fffb 	bl	800b23a <HAL_SPI_RxHalfCpltCallback>
}
 800b244:	bd08      	pop	{r3, pc}

0800b246 <HAL_SPI_TxRxHalfCpltCallback>:
 800b246:	4770      	bx	lr

0800b248 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800b248:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b24a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b24c:	f7ff fffb 	bl	800b246 <HAL_SPI_TxRxHalfCpltCallback>
}
 800b250:	bd08      	pop	{r3, pc}

0800b252 <HAL_SPI_ErrorCallback>:
 800b252:	4770      	bx	lr

0800b254 <SPI_DMAError>:
{
 800b254:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b256:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b258:	f7fc f83c 	bl	80072d4 <HAL_DMA_GetError>
 800b25c:	2802      	cmp	r0, #2
 800b25e:	d00d      	beq.n	800b27c <SPI_DMAError+0x28>
    SPI_CloseTransfer(hspi);
 800b260:	4620      	mov	r0, r4
 800b262:	f7ff f98d 	bl	800a580 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b266:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b26a:	f043 0310 	orr.w	r3, r3, #16
 800b26e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b272:	2301      	movs	r3, #1
 800b274:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800b278:	f7ff ffeb 	bl	800b252 <HAL_SPI_ErrorCallback>
}
 800b27c:	bd10      	pop	{r4, pc}
	...

0800b280 <HAL_SPI_IRQHandler>:
{
 800b280:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t itsource = hspi->Instance->IER;
 800b284:	6807      	ldr	r7, [r0, #0]
{
 800b286:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800b288:	f8d7 8010 	ldr.w	r8, [r7, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800b28c:	f8d7 9014 	ldr.w	r9, [r7, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b290:	68be      	ldr	r6, [r7, #8]
  uint32_t trigger  = itsource & itflag;
 800b292:	ea08 0a09 	and.w	sl, r8, r9
  HAL_SPI_StateTypeDef State = hspi->State;
 800b296:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b29a:	f00a 0364 	and.w	r3, sl, #100	; 0x64
  HAL_SPI_StateTypeDef State = hspi->State;
 800b29e:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b2a0:	2b04      	cmp	r3, #4
 800b2a2:	d118      	bne.n	800b2d6 <HAL_SPI_IRQHandler+0x56>
    hspi->TxISR(hspi);
 800b2a4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800b2a6:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b2a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	4798      	blx	r3
    handled = 1UL;
 800b2ae:	2301      	movs	r3, #1
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b2b0:	f00a 0b45 	and.w	fp, sl, #69	; 0x45
 800b2b4:	f1bb 0f01 	cmp.w	fp, #1
 800b2b8:	d103      	bne.n	800b2c2 <HAL_SPI_IRQHandler+0x42>
    hspi->RxISR(hspi);
 800b2ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b2bc:	4620      	mov	r0, r4
 800b2be:	4798      	blx	r3
    handled = 1UL;
 800b2c0:	465b      	mov	r3, fp
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b2c2:	f00a 0226 	and.w	r2, sl, #38	; 0x26
 800b2c6:	2a02      	cmp	r2, #2
 800b2c8:	d107      	bne.n	800b2da <HAL_SPI_IRQHandler+0x5a>
    hspi->TxISR(hspi);
 800b2ca:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b2cc:	4620      	mov	r0, r4
}
 800b2ce:	b001      	add	sp, #4
 800b2d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    hspi->TxISR(hspi);
 800b2d4:	4718      	bx	r3
  uint32_t handled  = 0UL;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	e7ea      	b.n	800b2b0 <HAL_SPI_IRQHandler+0x30>
  if (handled != 0UL)
 800b2da:	bb03      	cbnz	r3, 800b31e <HAL_SPI_IRQHandler+0x9e>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b2dc:	f01a 0f08 	tst.w	sl, #8
 800b2e0:	d065      	beq.n	800b3ae <HAL_SPI_IRQHandler+0x12e>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b2e2:	6823      	ldr	r3, [r4, #0]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800b2e4:	f416 4f40 	tst.w	r6, #49152	; 0xc000
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b2e8:	699a      	ldr	r2, [r3, #24]
 800b2ea:	f042 0208 	orr.w	r2, r2, #8
 800b2ee:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b2f0:	699a      	ldr	r2, [r3, #24]
 800b2f2:	f042 0210 	orr.w	r2, r2, #16
 800b2f6:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b2f8:	699a      	ldr	r2, [r3, #24]
 800b2fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2fe:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b300:	691a      	ldr	r2, [r3, #16]
 800b302:	f022 0208 	bic.w	r2, r2, #8
 800b306:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800b308:	d00f      	beq.n	800b32a <HAL_SPI_IRQHandler+0xaa>
 800b30a:	2d04      	cmp	r5, #4
 800b30c:	d00a      	beq.n	800b324 <HAL_SPI_IRQHandler+0xa4>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800b30e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b310:	69d2      	ldr	r2, [r2, #28]
 800b312:	b152      	cbz	r2, 800b32a <HAL_SPI_IRQHandler+0xaa>
 800b314:	2d03      	cmp	r5, #3
 800b316:	d105      	bne.n	800b324 <HAL_SPI_IRQHandler+0xa4>
      HAL_SPI_TxCpltCallback(hspi);
 800b318:	4620      	mov	r0, r4
 800b31a:	f7ff ff63 	bl	800b1e4 <HAL_SPI_TxCpltCallback>
}
 800b31e:	b001      	add	sp, #4
 800b320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800b324:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b326:	69d2      	ldr	r2, [r2, #28]
 800b328:	bb92      	cbnz	r2, 800b390 <HAL_SPI_IRQHandler+0x110>
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800b330:	d01b      	beq.n	800b36a <HAL_SPI_IRQHandler+0xea>
      SPI_CloseTransfer(hspi);
 800b332:	4620      	mov	r0, r4
 800b334:	f7ff f924 	bl	800a580 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 800b338:	2301      	movs	r3, #1
 800b33a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b33e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b342:	b32b      	cbz	r3, 800b390 <HAL_SPI_IRQHandler+0x110>
        HAL_SPI_ErrorCallback(hspi);
 800b344:	4620      	mov	r0, r4
 800b346:	f7ff ff84 	bl	800b252 <HAL_SPI_ErrorCallback>
 800b34a:	e7e8      	b.n	800b31e <HAL_SPI_IRQHandler+0x9e>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b34c:	68e2      	ldr	r2, [r4, #12]
 800b34e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b350:	2a0f      	cmp	r2, #15
 800b352:	d910      	bls.n	800b376 <HAL_SPI_IRQHandler+0xf6>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b354:	6822      	ldr	r2, [r4, #0]
 800b356:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b358:	f843 2b04 	str.w	r2, [r3], #4
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800b35c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 800b35e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b362:	3b01      	subs	r3, #1
 800b364:	b29b      	uxth	r3, r3
 800b366:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800b36a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b36e:	b29b      	uxth	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1eb      	bne.n	800b34c <HAL_SPI_IRQHandler+0xcc>
 800b374:	e7dd      	b.n	800b332 <HAL_SPI_IRQHandler+0xb2>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b376:	2a07      	cmp	r2, #7
 800b378:	d903      	bls.n	800b382 <HAL_SPI_IRQHandler+0x102>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b37a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800b37c:	f823 2b02 	strh.w	r2, [r3], #2
 800b380:	e7ec      	b.n	800b35c <HAL_SPI_IRQHandler+0xdc>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b382:	6822      	ldr	r2, [r4, #0]
 800b384:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800b388:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800b38a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b38c:	3301      	adds	r3, #1
 800b38e:	e7e5      	b.n	800b35c <HAL_SPI_IRQHandler+0xdc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b390:	2d05      	cmp	r5, #5
 800b392:	d103      	bne.n	800b39c <HAL_SPI_IRQHandler+0x11c>
      HAL_SPI_TxRxCpltCallback(hspi);
 800b394:	4620      	mov	r0, r4
 800b396:	f7ff ff3b 	bl	800b210 <HAL_SPI_TxRxCpltCallback>
 800b39a:	e7c0      	b.n	800b31e <HAL_SPI_IRQHandler+0x9e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b39c:	2d04      	cmp	r5, #4
 800b39e:	d103      	bne.n	800b3a8 <HAL_SPI_IRQHandler+0x128>
      HAL_SPI_RxCpltCallback(hspi);
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f7ff ff20 	bl	800b1e6 <HAL_SPI_RxCpltCallback>
 800b3a6:	e7ba      	b.n	800b31e <HAL_SPI_IRQHandler+0x9e>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b3a8:	2d03      	cmp	r5, #3
 800b3aa:	d1b8      	bne.n	800b31e <HAL_SPI_IRQHandler+0x9e>
 800b3ac:	e7b4      	b.n	800b318 <HAL_SPI_IRQHandler+0x98>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b3ae:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800b3b2:	d008      	beq.n	800b3c6 <HAL_SPI_IRQHandler+0x146>
 800b3b4:	f018 0f08 	tst.w	r8, #8
 800b3b8:	d005      	beq.n	800b3c6 <HAL_SPI_IRQHandler+0x146>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b3ba:	6822      	ldr	r2, [r4, #0]
 800b3bc:	6993      	ldr	r3, [r2, #24]
 800b3be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b3c2:	6193      	str	r3, [r2, #24]
    return;
 800b3c4:	e7ab      	b.n	800b31e <HAL_SPI_IRQHandler+0x9e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b3c6:	f41a 7f58 	tst.w	sl, #864	; 0x360
 800b3ca:	d0a8      	beq.n	800b31e <HAL_SPI_IRQHandler+0x9e>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b3cc:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b3d0:	d00a      	beq.n	800b3e8 <HAL_SPI_IRQHandler+0x168>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b3d2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3d6:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b3d8:	f043 0304 	orr.w	r3, r3, #4
 800b3dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3e0:	6993      	ldr	r3, [r2, #24]
 800b3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e6:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b3e8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b3ec:	d00a      	beq.n	800b404 <HAL_SPI_IRQHandler+0x184>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b3ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b3f2:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b3f4:	f043 0301 	orr.w	r3, r3, #1
 800b3f8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b3fc:	6993      	ldr	r3, [r2, #24]
 800b3fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b402:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b404:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b408:	d00a      	beq.n	800b420 <HAL_SPI_IRQHandler+0x1a0>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b40a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b40e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b410:	f043 0308 	orr.w	r3, r3, #8
 800b414:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b418:	6993      	ldr	r3, [r2, #24]
 800b41a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b41e:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b420:	f01a 0f20 	tst.w	sl, #32
 800b424:	d00a      	beq.n	800b43c <HAL_SPI_IRQHandler+0x1bc>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b426:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b42a:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b42c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b430:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b434:	6993      	ldr	r3, [r2, #24]
 800b436:	f043 0320 	orr.w	r3, r3, #32
 800b43a:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b43c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b440:	2b00      	cmp	r3, #0
 800b442:	f43f af6c 	beq.w	800b31e <HAL_SPI_IRQHandler+0x9e>
      __HAL_SPI_DISABLE(hspi);
 800b446:	6823      	ldr	r3, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b448:	f406 4640 	and.w	r6, r6, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b44c:	681a      	ldr	r2, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b44e:	f5b6 4f40 	cmp.w	r6, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b452:	f022 0201 	bic.w	r2, r2, #1
 800b456:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800b458:	691a      	ldr	r2, [r3, #16]
 800b45a:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 800b45e:	f022 0203 	bic.w	r2, r2, #3
 800b462:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b464:	d122      	bne.n	800b4ac <HAL_SPI_IRQHandler+0x22c>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b466:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800b468:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b46a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b46e:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800b470:	b150      	cbz	r0, 800b488 <HAL_SPI_IRQHandler+0x208>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b472:	4b10      	ldr	r3, [pc, #64]	; (800b4b4 <HAL_SPI_IRQHandler+0x234>)
 800b474:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b476:	f7fb fbd1 	bl	8006c1c <HAL_DMA_Abort_IT>
 800b47a:	b128      	cbz	r0, 800b488 <HAL_SPI_IRQHandler+0x208>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b47c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b484:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800b488:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b48a:	2800      	cmp	r0, #0
 800b48c:	f43f af47 	beq.w	800b31e <HAL_SPI_IRQHandler+0x9e>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b490:	4b08      	ldr	r3, [pc, #32]	; (800b4b4 <HAL_SPI_IRQHandler+0x234>)
 800b492:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b494:	f7fb fbc2 	bl	8006c1c <HAL_DMA_Abort_IT>
 800b498:	2800      	cmp	r0, #0
 800b49a:	f43f af40 	beq.w	800b31e <HAL_SPI_IRQHandler+0x9e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b49e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4a6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b4aa:	e738      	b.n	800b31e <HAL_SPI_IRQHandler+0x9e>
        hspi->State = HAL_SPI_STATE_READY;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800b4b2:	e747      	b.n	800b344 <HAL_SPI_IRQHandler+0xc4>
 800b4b4:	0800b4b9 	.word	0x0800b4b9

0800b4b8 <SPI_DMAAbortOnError>:
{
 800b4b8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b4c2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800b4cc:	f7ff fec1 	bl	800b252 <HAL_SPI_ErrorCallback>
}
 800b4d0:	bd08      	pop	{r3, pc}

0800b4d2 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b4d2:	4770      	bx	lr

0800b4d4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d115      	bne.n	800b508 <HAL_TIM_Base_Start_IT+0x34>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4dc:	2302      	movs	r3, #2
 800b4de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4e2:	6803      	ldr	r3, [r0, #0]
 800b4e4:	68da      	ldr	r2, [r3, #12]
 800b4e6:	f042 0201 	orr.w	r2, r2, #1
 800b4ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4ec:	4a07      	ldr	r2, [pc, #28]	; (800b50c <HAL_TIM_Base_Start_IT+0x38>)
 800b4ee:	6899      	ldr	r1, [r3, #8]
 800b4f0:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4f2:	2a06      	cmp	r2, #6
 800b4f4:	d006      	beq.n	800b504 <HAL_TIM_Base_Start_IT+0x30>
 800b4f6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b4fa:	d003      	beq.n	800b504 <HAL_TIM_Base_Start_IT+0x30>
  {
    __HAL_TIM_ENABLE(htim);
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	f042 0201 	orr.w	r2, r2, #1
 800b502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b504:	2000      	movs	r0, #0
}
 800b506:	4770      	bx	lr
    return HAL_ERROR;
 800b508:	2001      	movs	r0, #1
 800b50a:	4770      	bx	lr
 800b50c:	00010007 	.word	0x00010007

0800b510 <HAL_TIM_OC_DelayElapsedCallback>:
 800b510:	4770      	bx	lr

0800b512 <HAL_TIM_IC_CaptureCallback>:
 800b512:	4770      	bx	lr

0800b514 <HAL_TIM_PWM_PulseFinishedCallback>:
 800b514:	4770      	bx	lr

0800b516 <HAL_TIM_TriggerCallback>:
 800b516:	4770      	bx	lr

0800b518 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b518:	6803      	ldr	r3, [r0, #0]
 800b51a:	691a      	ldr	r2, [r3, #16]
 800b51c:	0791      	lsls	r1, r2, #30
{
 800b51e:	b510      	push	{r4, lr}
 800b520:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b522:	d50f      	bpl.n	800b544 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	0792      	lsls	r2, r2, #30
 800b528:	d50c      	bpl.n	800b544 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b52a:	f06f 0202 	mvn.w	r2, #2
 800b52e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b530:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b532:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b534:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b536:	0799      	lsls	r1, r3, #30
 800b538:	f000 8085 	beq.w	800b646 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b53c:	f7ff ffe9 	bl	800b512 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b540:	2300      	movs	r3, #0
 800b542:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b544:	6823      	ldr	r3, [r4, #0]
 800b546:	691a      	ldr	r2, [r3, #16]
 800b548:	0752      	lsls	r2, r2, #29
 800b54a:	d510      	bpl.n	800b56e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b54c:	68da      	ldr	r2, [r3, #12]
 800b54e:	0750      	lsls	r0, r2, #29
 800b550:	d50d      	bpl.n	800b56e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b552:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b556:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b55a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b55c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b55e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b560:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b564:	d075      	beq.n	800b652 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b566:	f7ff ffd4 	bl	800b512 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b56a:	2300      	movs	r3, #0
 800b56c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	691a      	ldr	r2, [r3, #16]
 800b572:	0711      	lsls	r1, r2, #28
 800b574:	d50f      	bpl.n	800b596 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b576:	68da      	ldr	r2, [r3, #12]
 800b578:	0712      	lsls	r2, r2, #28
 800b57a:	d50c      	bpl.n	800b596 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b57c:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b580:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b584:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b586:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b588:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b58a:	079b      	lsls	r3, r3, #30
 800b58c:	d067      	beq.n	800b65e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800b58e:	f7ff ffc0 	bl	800b512 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b592:	2300      	movs	r3, #0
 800b594:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	691a      	ldr	r2, [r3, #16]
 800b59a:	06d0      	lsls	r0, r2, #27
 800b59c:	d510      	bpl.n	800b5c0 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b59e:	68da      	ldr	r2, [r3, #12]
 800b5a0:	06d1      	lsls	r1, r2, #27
 800b5a2:	d50d      	bpl.n	800b5c0 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5a4:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5ac:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5ae:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5b0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5b2:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b5b6:	d058      	beq.n	800b66a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800b5b8:	f7ff ffab 	bl	800b512 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	691a      	ldr	r2, [r3, #16]
 800b5c4:	07d2      	lsls	r2, r2, #31
 800b5c6:	d508      	bpl.n	800b5da <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b5c8:	68da      	ldr	r2, [r3, #12]
 800b5ca:	07d0      	lsls	r0, r2, #31
 800b5cc:	d505      	bpl.n	800b5da <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5ce:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5d6:	f7f7 ffb1 	bl	800353c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	691a      	ldr	r2, [r3, #16]
 800b5de:	0611      	lsls	r1, r2, #24
 800b5e0:	d508      	bpl.n	800b5f4 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5e2:	68da      	ldr	r2, [r3, #12]
 800b5e4:	0612      	lsls	r2, r2, #24
 800b5e6:	d505      	bpl.n	800b5f4 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5ec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b5f0:	f000 f8d9 	bl	800b7a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b5f4:	6823      	ldr	r3, [r4, #0]
 800b5f6:	691a      	ldr	r2, [r3, #16]
 800b5f8:	05d0      	lsls	r0, r2, #23
 800b5fa:	d508      	bpl.n	800b60e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5fc:	68da      	ldr	r2, [r3, #12]
 800b5fe:	0611      	lsls	r1, r2, #24
 800b600:	d505      	bpl.n	800b60e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b602:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b606:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b608:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b60a:	f000 f8cd 	bl	800b7a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	691a      	ldr	r2, [r3, #16]
 800b612:	0652      	lsls	r2, r2, #25
 800b614:	d508      	bpl.n	800b628 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b616:	68da      	ldr	r2, [r3, #12]
 800b618:	0650      	lsls	r0, r2, #25
 800b61a:	d505      	bpl.n	800b628 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b61c:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b620:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b622:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b624:	f7ff ff77 	bl	800b516 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	691a      	ldr	r2, [r3, #16]
 800b62c:	0691      	lsls	r1, r2, #26
 800b62e:	d522      	bpl.n	800b676 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b630:	68da      	ldr	r2, [r3, #12]
 800b632:	0692      	lsls	r2, r2, #26
 800b634:	d51f      	bpl.n	800b676 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b636:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b63a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b63c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800b642:	f000 b8af 	b.w	800b7a4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b646:	f7ff ff63 	bl	800b510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b64a:	4620      	mov	r0, r4
 800b64c:	f7ff ff62 	bl	800b514 <HAL_TIM_PWM_PulseFinishedCallback>
 800b650:	e776      	b.n	800b540 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b652:	f7ff ff5d 	bl	800b510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b656:	4620      	mov	r0, r4
 800b658:	f7ff ff5c 	bl	800b514 <HAL_TIM_PWM_PulseFinishedCallback>
 800b65c:	e785      	b.n	800b56a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b65e:	f7ff ff57 	bl	800b510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b662:	4620      	mov	r0, r4
 800b664:	f7ff ff56 	bl	800b514 <HAL_TIM_PWM_PulseFinishedCallback>
 800b668:	e793      	b.n	800b592 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b66a:	f7ff ff51 	bl	800b510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b66e:	4620      	mov	r0, r4
 800b670:	f7ff ff50 	bl	800b514 <HAL_TIM_PWM_PulseFinishedCallback>
 800b674:	e7a2      	b.n	800b5bc <HAL_TIM_IRQHandler+0xa4>
}
 800b676:	bd10      	pop	{r4, pc}

0800b678 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b678:	4a30      	ldr	r2, [pc, #192]	; (800b73c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800b67a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b67c:	4290      	cmp	r0, r2
 800b67e:	d012      	beq.n	800b6a6 <TIM_Base_SetConfig+0x2e>
 800b680:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b684:	d00f      	beq.n	800b6a6 <TIM_Base_SetConfig+0x2e>
 800b686:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b68a:	4290      	cmp	r0, r2
 800b68c:	d00b      	beq.n	800b6a6 <TIM_Base_SetConfig+0x2e>
 800b68e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b692:	4290      	cmp	r0, r2
 800b694:	d007      	beq.n	800b6a6 <TIM_Base_SetConfig+0x2e>
 800b696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b69a:	4290      	cmp	r0, r2
 800b69c:	d003      	beq.n	800b6a6 <TIM_Base_SetConfig+0x2e>
 800b69e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b6a2:	4290      	cmp	r0, r2
 800b6a4:	d119      	bne.n	800b6da <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800b6a6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b6ac:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6ae:	4a23      	ldr	r2, [pc, #140]	; (800b73c <TIM_Base_SetConfig+0xc4>)
 800b6b0:	4290      	cmp	r0, r2
 800b6b2:	d01d      	beq.n	800b6f0 <TIM_Base_SetConfig+0x78>
 800b6b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b6b8:	d01a      	beq.n	800b6f0 <TIM_Base_SetConfig+0x78>
 800b6ba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b6be:	4290      	cmp	r0, r2
 800b6c0:	d016      	beq.n	800b6f0 <TIM_Base_SetConfig+0x78>
 800b6c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6c6:	4290      	cmp	r0, r2
 800b6c8:	d012      	beq.n	800b6f0 <TIM_Base_SetConfig+0x78>
 800b6ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6ce:	4290      	cmp	r0, r2
 800b6d0:	d00e      	beq.n	800b6f0 <TIM_Base_SetConfig+0x78>
 800b6d2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b6d6:	4290      	cmp	r0, r2
 800b6d8:	d00a      	beq.n	800b6f0 <TIM_Base_SetConfig+0x78>
 800b6da:	4a19      	ldr	r2, [pc, #100]	; (800b740 <TIM_Base_SetConfig+0xc8>)
 800b6dc:	4290      	cmp	r0, r2
 800b6de:	d007      	beq.n	800b6f0 <TIM_Base_SetConfig+0x78>
 800b6e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6e4:	4290      	cmp	r0, r2
 800b6e6:	d003      	beq.n	800b6f0 <TIM_Base_SetConfig+0x78>
 800b6e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6ec:	4290      	cmp	r0, r2
 800b6ee:	d103      	bne.n	800b6f8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6f4:	68ca      	ldr	r2, [r1, #12]
 800b6f6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6f8:	694a      	ldr	r2, [r1, #20]
 800b6fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6fe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800b700:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b702:	688b      	ldr	r3, [r1, #8]
 800b704:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b706:	680b      	ldr	r3, [r1, #0]
 800b708:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b70a:	4b0c      	ldr	r3, [pc, #48]	; (800b73c <TIM_Base_SetConfig+0xc4>)
 800b70c:	4298      	cmp	r0, r3
 800b70e:	d00f      	beq.n	800b730 <TIM_Base_SetConfig+0xb8>
 800b710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b714:	4298      	cmp	r0, r3
 800b716:	d00b      	beq.n	800b730 <TIM_Base_SetConfig+0xb8>
 800b718:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800b71c:	4298      	cmp	r0, r3
 800b71e:	d007      	beq.n	800b730 <TIM_Base_SetConfig+0xb8>
 800b720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b724:	4298      	cmp	r0, r3
 800b726:	d003      	beq.n	800b730 <TIM_Base_SetConfig+0xb8>
 800b728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b72c:	4298      	cmp	r0, r3
 800b72e:	d101      	bne.n	800b734 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b730:	690b      	ldr	r3, [r1, #16]
 800b732:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b734:	2301      	movs	r3, #1
 800b736:	6143      	str	r3, [r0, #20]
}
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	40010000 	.word	0x40010000
 800b740:	40014000 	.word	0x40014000

0800b744 <HAL_TIM_Base_Init>:
{
 800b744:	b510      	push	{r4, lr}
  if (htim == NULL)
 800b746:	4604      	mov	r4, r0
 800b748:	b350      	cbz	r0, 800b7a0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800b74a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b74e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b752:	b91b      	cbnz	r3, 800b75c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800b754:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b758:	f7ff febb 	bl	800b4d2 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800b75c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b75e:	6820      	ldr	r0, [r4, #0]
 800b760:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800b762:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b766:	f7ff ff87 	bl	800b678 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b76a:	2301      	movs	r3, #1
  return HAL_OK;
 800b76c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b76e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b772:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b776:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b77a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b77e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b782:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b78a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b78e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b792:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800b796:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b79a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800b79e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b7a0:	2001      	movs	r0, #1
 800b7a2:	e7fc      	b.n	800b79e <HAL_TIM_Base_Init+0x5a>

0800b7a4 <HAL_TIMEx_CommutCallback>:
 800b7a4:	4770      	bx	lr

0800b7a6 <HAL_TIMEx_BreakCallback>:
 800b7a6:	4770      	bx	lr

0800b7a8 <HAL_TIMEx_Break2Callback>:
 800b7a8:	4770      	bx	lr

0800b7aa <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7aa:	6802      	ldr	r2, [r0, #0]
 800b7ac:	6813      	ldr	r3, [r2, #0]
 800b7ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7b2:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7b4:	6893      	ldr	r3, [r2, #8]
 800b7b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7ba:	f023 0301 	bic.w	r3, r3, #1
 800b7be:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7c0:	2320      	movs	r3, #32
 800b7c2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7cc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800b7d0:	2b20      	cmp	r3, #32
{
 800b7d2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7d4:	d167      	bne.n	800b8a6 <HAL_UART_Receive_IT+0xda>
    if ((pData == NULL) || (Size == 0U))
 800b7d6:	2900      	cmp	r1, #0
 800b7d8:	d063      	beq.n	800b8a2 <HAL_UART_Receive_IT+0xd6>
 800b7da:	2a00      	cmp	r2, #0
 800b7dc:	d061      	beq.n	800b8a2 <HAL_UART_Receive_IT+0xd6>
    __HAL_LOCK(huart);
 800b7de:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d05f      	beq.n	800b8a6 <HAL_UART_Receive_IT+0xda>
 800b7e6:	2301      	movs	r3, #1
    huart->pRxBuffPtr  = pData;
 800b7e8:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxISR       = NULL;
 800b7ea:	2100      	movs	r1, #0
    huart->RxXferSize  = Size;
 800b7ec:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    __HAL_LOCK(huart);
 800b7f0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    UART_MASK_COMPUTATION(huart);
 800b7f4:	6883      	ldr	r3, [r0, #8]
    huart->RxXferCount = Size;
 800b7f6:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 800b7fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxISR       = NULL;
 800b7fe:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 800b800:	d12e      	bne.n	800b860 <HAL_UART_Receive_IT+0x94>
 800b802:	6901      	ldr	r1, [r0, #16]
 800b804:	bb51      	cbnz	r1, 800b85c <HAL_UART_Receive_IT+0x90>
 800b806:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b80a:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b80e:	2100      	movs	r1, #0
 800b810:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b814:	2122      	movs	r1, #34	; 0x22
 800b816:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b81a:	6801      	ldr	r1, [r0, #0]
 800b81c:	688c      	ldr	r4, [r1, #8]
 800b81e:	f044 0401 	orr.w	r4, r4, #1
 800b822:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b824:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800b826:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 800b82a:	d129      	bne.n	800b880 <HAL_UART_Receive_IT+0xb4>
 800b82c:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 800b830:	4294      	cmp	r4, r2
 800b832:	d825      	bhi.n	800b880 <HAL_UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b838:	d120      	bne.n	800b87c <HAL_UART_Receive_IT+0xb0>
 800b83a:	6903      	ldr	r3, [r0, #16]
 800b83c:	b9f3      	cbnz	r3, 800b87c <HAL_UART_Receive_IT+0xb0>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b83e:	4b1b      	ldr	r3, [pc, #108]	; (800b8ac <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b840:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b842:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800b844:	2300      	movs	r3, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 800b84a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b84e:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b850:	688a      	ldr	r2, [r1, #8]
 800b852:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b856:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 800b858:	4618      	mov	r0, r3
}
 800b85a:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 800b85c:	21ff      	movs	r1, #255	; 0xff
 800b85e:	e7d4      	b.n	800b80a <HAL_UART_Receive_IT+0x3e>
 800b860:	b923      	cbnz	r3, 800b86c <HAL_UART_Receive_IT+0xa0>
 800b862:	6901      	ldr	r1, [r0, #16]
 800b864:	2900      	cmp	r1, #0
 800b866:	d0f9      	beq.n	800b85c <HAL_UART_Receive_IT+0x90>
 800b868:	217f      	movs	r1, #127	; 0x7f
 800b86a:	e7ce      	b.n	800b80a <HAL_UART_Receive_IT+0x3e>
 800b86c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b870:	d1cb      	bne.n	800b80a <HAL_UART_Receive_IT+0x3e>
 800b872:	6901      	ldr	r1, [r0, #16]
 800b874:	2900      	cmp	r1, #0
 800b876:	d0f7      	beq.n	800b868 <HAL_UART_Receive_IT+0x9c>
 800b878:	213f      	movs	r1, #63	; 0x3f
 800b87a:	e7c6      	b.n	800b80a <HAL_UART_Receive_IT+0x3e>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b87c:	4b0c      	ldr	r3, [pc, #48]	; (800b8b0 <HAL_UART_Receive_IT+0xe4>)
 800b87e:	e7df      	b.n	800b840 <HAL_UART_Receive_IT+0x74>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b884:	d10b      	bne.n	800b89e <HAL_UART_Receive_IT+0xd2>
 800b886:	6903      	ldr	r3, [r0, #16]
 800b888:	b94b      	cbnz	r3, 800b89e <HAL_UART_Receive_IT+0xd2>
        huart->RxISR = UART_RxISR_16BIT;
 800b88a:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b88c:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 800b88e:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800b890:	2300      	movs	r3, #0
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b892:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 800b896:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b89a:	600a      	str	r2, [r1, #0]
 800b89c:	e7dc      	b.n	800b858 <HAL_UART_Receive_IT+0x8c>
        huart->RxISR = UART_RxISR_8BIT;
 800b89e:	4b06      	ldr	r3, [pc, #24]	; (800b8b8 <HAL_UART_Receive_IT+0xec>)
 800b8a0:	e7f4      	b.n	800b88c <HAL_UART_Receive_IT+0xc0>
      return HAL_ERROR;
 800b8a2:	2001      	movs	r0, #1
 800b8a4:	e7d9      	b.n	800b85a <HAL_UART_Receive_IT+0x8e>
    return HAL_BUSY;
 800b8a6:	2002      	movs	r0, #2
 800b8a8:	e7d7      	b.n	800b85a <HAL_UART_Receive_IT+0x8e>
 800b8aa:	bf00      	nop
 800b8ac:	0800bcb9 	.word	0x0800bcb9
 800b8b0:	0800bc15 	.word	0x0800bc15
 800b8b4:	0800bbbb 	.word	0x0800bbbb
 800b8b8:	0800bb5f 	.word	0x0800bb5f

0800b8bc <HAL_UART_Transmit_DMA>:
{
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	4604      	mov	r4, r0
 800b8c0:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800b8c2:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800b8c6:	2f20      	cmp	r7, #32
 800b8c8:	d13a      	bne.n	800b940 <HAL_UART_Transmit_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 800b8ca:	b361      	cbz	r1, 800b926 <HAL_UART_Transmit_DMA+0x6a>
 800b8cc:	b35a      	cbz	r2, 800b926 <HAL_UART_Transmit_DMA+0x6a>
    __HAL_LOCK(huart);
 800b8ce:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 800b8d2:	2a01      	cmp	r2, #1
 800b8d4:	d034      	beq.n	800b940 <HAL_UART_Transmit_DMA+0x84>
 800b8d6:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8d8:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8da:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 800b8dc:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 800b8de:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    __HAL_LOCK(huart);
 800b8e2:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8e6:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    huart->pTxBuffPtr  = pData;
 800b8ea:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b8ec:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8f0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 800b8f4:	b1c8      	cbz	r0, 800b92a <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b8f6:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800b944 <HAL_UART_Transmit_DMA+0x88>
 800b8fa:	6822      	ldr	r2, [r4, #0]
 800b8fc:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b900:	f8df c044 	ldr.w	ip, [pc, #68]	; 800b948 <HAL_UART_Transmit_DMA+0x8c>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b904:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b906:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b90a:	f8df c040 	ldr.w	ip, [pc, #64]	; 800b94c <HAL_UART_Transmit_DMA+0x90>
      huart->hdmatx->XferAbortCallback = NULL;
 800b90e:	e9c0 c613 	strd	ip, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b912:	f7fa feb3 	bl	800667c <HAL_DMA_Start_IT>
 800b916:	b140      	cbz	r0, 800b92a <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b918:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800b91a:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b91e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 800b922:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800b926:	2001      	movs	r0, #1
 800b928:	e009      	b.n	800b93e <HAL_UART_Transmit_DMA+0x82>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b92a:	6823      	ldr	r3, [r4, #0]
 800b92c:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800b92e:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b930:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b932:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 800b934:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b938:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b93c:	609a      	str	r2, [r3, #8]
}
 800b93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b940:	2002      	movs	r0, #2
 800b942:	e7fc      	b.n	800b93e <HAL_UART_Transmit_DMA+0x82>
 800b944:	0800bb25 	.word	0x0800bb25
 800b948:	0800bb55 	.word	0x0800bb55
 800b94c:	0800bda1 	.word	0x0800bda1

0800b950 <HAL_UART_Receive_DMA>:
{
 800b950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800b952:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
{
 800b956:	4604      	mov	r4, r0
 800b958:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800b95a:	2f20      	cmp	r7, #32
 800b95c:	d13c      	bne.n	800b9d8 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800b95e:	b341      	cbz	r1, 800b9b2 <HAL_UART_Receive_DMA+0x62>
 800b960:	b33a      	cbz	r2, 800b9b2 <HAL_UART_Receive_DMA+0x62>
    __HAL_LOCK(huart);
 800b962:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 800b966:	2a01      	cmp	r2, #1
 800b968:	d036      	beq.n	800b9d8 <HAL_UART_Receive_DMA+0x88>
 800b96a:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b96c:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b96e:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 800b970:	6581      	str	r1, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b972:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 800b976:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize = Size;
 800b97a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b97e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmarx != NULL)
 800b982:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800b984:	b1b8      	cbz	r0, 800b9b6 <HAL_UART_Receive_DMA+0x66>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b986:	4a15      	ldr	r2, [pc, #84]	; (800b9dc <HAL_UART_Receive_DMA+0x8c>)
 800b988:	f8d4 c000 	ldr.w	ip, [r4]
 800b98c:	63c2      	str	r2, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b98e:	4a14      	ldr	r2, [pc, #80]	; (800b9e0 <HAL_UART_Receive_DMA+0x90>)
 800b990:	6402      	str	r2, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b992:	4a14      	ldr	r2, [pc, #80]	; (800b9e4 <HAL_UART_Receive_DMA+0x94>)
      huart->hdmarx->XferAbortCallback = NULL;
 800b994:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b998:	460a      	mov	r2, r1
 800b99a:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 800b99e:	f7fa fe6d 	bl	800667c <HAL_DMA_Start_IT>
 800b9a2:	b140      	cbz	r0, 800b9b6 <HAL_UART_Receive_DMA+0x66>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b9a4:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800b9a6:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b9aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 800b9ae:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	e00f      	b.n	800b9d6 <HAL_UART_Receive_DMA+0x86>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9b6:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800b9b8:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9ba:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800b9bc:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9c4:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9c6:	689a      	ldr	r2, [r3, #8]
 800b9c8:	f042 0201 	orr.w	r2, r2, #1
 800b9cc:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9ce:	689a      	ldr	r2, [r3, #8]
 800b9d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9d4:	609a      	str	r2, [r3, #8]
}
 800b9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b9d8:	2002      	movs	r0, #2
 800b9da:	e7fc      	b.n	800b9d6 <HAL_UART_Receive_DMA+0x86>
 800b9dc:	0800bd59 	.word	0x0800bd59
 800b9e0:	0800bd95 	.word	0x0800bd95
 800b9e4:	0800bda1 	.word	0x0800bda1

0800b9e8 <HAL_UART_DMAPause>:
  __HAL_LOCK(huart);
 800b9e8:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b9ec:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  __HAL_LOCK(huart);
 800b9f0:	2b01      	cmp	r3, #1
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b9f2:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 800b9f6:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800b9f8:	d022      	beq.n	800ba40 <HAL_UART_DMAPause+0x58>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba00:	6803      	ldr	r3, [r0, #0]
 800ba02:	689c      	ldr	r4, [r3, #8]
 800ba04:	0624      	lsls	r4, r4, #24
 800ba06:	d505      	bpl.n	800ba14 <HAL_UART_DMAPause+0x2c>
 800ba08:	2a21      	cmp	r2, #33	; 0x21
 800ba0a:	d103      	bne.n	800ba14 <HAL_UART_DMAPause+0x2c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba0c:	689a      	ldr	r2, [r3, #8]
 800ba0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba12:	609a      	str	r2, [r3, #8]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ba14:	689a      	ldr	r2, [r3, #8]
 800ba16:	0652      	lsls	r2, r2, #25
 800ba18:	d50d      	bpl.n	800ba36 <HAL_UART_DMAPause+0x4e>
 800ba1a:	2922      	cmp	r1, #34	; 0x22
 800ba1c:	d10b      	bne.n	800ba36 <HAL_UART_DMAPause+0x4e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba24:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba26:	689a      	ldr	r2, [r3, #8]
 800ba28:	f022 0201 	bic.w	r2, r2, #1
 800ba2c:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba2e:	689a      	ldr	r2, [r3, #8]
 800ba30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba34:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(huart);
 800ba36:	2300      	movs	r3, #0
 800ba38:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800ba3c:	4618      	mov	r0, r3
}
 800ba3e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800ba40:	2002      	movs	r0, #2
 800ba42:	e7fc      	b.n	800ba3e <HAL_UART_DMAPause+0x56>

0800ba44 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 800ba44:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d023      	beq.n	800ba94 <HAL_UART_DMAResume+0x50>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba52:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800ba56:	2b21      	cmp	r3, #33	; 0x21
 800ba58:	d104      	bne.n	800ba64 <HAL_UART_DMAResume+0x20>
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba5a:	6802      	ldr	r2, [r0, #0]
 800ba5c:	6893      	ldr	r3, [r2, #8]
 800ba5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba62:	6093      	str	r3, [r2, #8]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba64:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800ba68:	2b22      	cmp	r3, #34	; 0x22
 800ba6a:	d10e      	bne.n	800ba8a <HAL_UART_DMAResume+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba6c:	6803      	ldr	r3, [r0, #0]
 800ba6e:	2208      	movs	r2, #8
 800ba70:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba78:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba7a:	689a      	ldr	r2, [r3, #8]
 800ba7c:	f042 0201 	orr.w	r2, r2, #1
 800ba80:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba82:	689a      	ldr	r2, [r3, #8]
 800ba84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba88:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(huart);
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800ba90:	4618      	mov	r0, r3
 800ba92:	4770      	bx	lr
  __HAL_LOCK(huart);
 800ba94:	2002      	movs	r0, #2
}
 800ba96:	4770      	bx	lr

0800ba98 <HAL_UART_DMAStop>:
{
 800ba98:	b538      	push	{r3, r4, r5, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba9a:	6803      	ldr	r3, [r0, #0]
{
 800ba9c:	4604      	mov	r4, r0
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ba9e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800baa2:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800baa6:	6899      	ldr	r1, [r3, #8]
 800baa8:	0609      	lsls	r1, r1, #24
 800baaa:	d520      	bpl.n	800baee <HAL_UART_DMAStop+0x56>
 800baac:	2a21      	cmp	r2, #33	; 0x21
 800baae:	d11e      	bne.n	800baee <HAL_UART_DMAStop+0x56>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bab0:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800bab2:	6f40      	ldr	r0, [r0, #116]	; 0x74
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bab8:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800baba:	b160      	cbz	r0, 800bad6 <HAL_UART_DMAStop+0x3e>
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800babc:	f7fa fefc 	bl	80068b8 <HAL_DMA_Abort>
 800bac0:	b148      	cbz	r0, 800bad6 <HAL_UART_DMAStop+0x3e>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800bac2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800bac4:	f7fb fc06 	bl	80072d4 <HAL_DMA_GetError>
 800bac8:	2820      	cmp	r0, #32
 800baca:	d104      	bne.n	800bad6 <HAL_UART_DMAStop+0x3e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bacc:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 800bace:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bad0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800bad4:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bade:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bae0:	689a      	ldr	r2, [r3, #8]
 800bae2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bae6:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800bae8:	2320      	movs	r3, #32
 800baea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800baee:	6823      	ldr	r3, [r4, #0]
 800baf0:	6898      	ldr	r0, [r3, #8]
 800baf2:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800baf6:	d0ed      	beq.n	800bad4 <HAL_UART_DMAStop+0x3c>
 800baf8:	2d22      	cmp	r5, #34	; 0x22
 800bafa:	d110      	bne.n	800bb1e <HAL_UART_DMAStop+0x86>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bafc:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800bafe:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb04:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800bb06:	b138      	cbz	r0, 800bb18 <HAL_UART_DMAStop+0x80>
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800bb08:	f7fa fed6 	bl	80068b8 <HAL_DMA_Abort>
 800bb0c:	b120      	cbz	r0, 800bb18 <HAL_UART_DMAStop+0x80>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800bb0e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800bb10:	f7fb fbe0 	bl	80072d4 <HAL_DMA_GetError>
 800bb14:	2820      	cmp	r0, #32
 800bb16:	d0d9      	beq.n	800bacc <HAL_UART_DMAStop+0x34>
    UART_EndRxTransfer(huart);
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f7ff fe46 	bl	800b7aa <UART_EndRxTransfer>
  return HAL_OK;
 800bb1e:	2000      	movs	r0, #0
 800bb20:	e7d8      	b.n	800bad4 <HAL_UART_DMAStop+0x3c>

0800bb22 <HAL_UART_TxCpltCallback>:
 800bb22:	4770      	bx	lr

0800bb24 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bb24:	69c2      	ldr	r2, [r0, #28]
 800bb26:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 800bb2a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bb2e:	d00c      	beq.n	800bb4a <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 800bb30:	2200      	movs	r2, #0
 800bb32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	689a      	ldr	r2, [r3, #8]
 800bb3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb3e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb46:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb48:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7ff ffe9 	bl	800bb22 <HAL_UART_TxCpltCallback>
}
 800bb50:	e7fa      	b.n	800bb48 <UART_DMATransmitCplt+0x24>

0800bb52 <HAL_UART_TxHalfCpltCallback>:
 800bb52:	4770      	bx	lr

0800bb54 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb54:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bb56:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bb58:	f7ff fffb 	bl	800bb52 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb5c:	bd08      	pop	{r3, pc}

0800bb5e <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb5e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800bb62:	6802      	ldr	r2, [r0, #0]
 800bb64:	2922      	cmp	r1, #34	; 0x22
{
 800bb66:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb68:	d122      	bne.n	800bbb0 <UART_RxISR_8BIT+0x52>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bb6c:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800bb70:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800bb72:	4022      	ands	r2, r4
 800bb74:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 800bb76:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800bb78:	3201      	adds	r2, #1
 800bb7a:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800bb7c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800bb80:	3a01      	subs	r2, #1
 800bb82:	b292      	uxth	r2, r2
 800bb84:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bb88:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800bb8c:	b292      	uxth	r2, r2
 800bb8e:	b972      	cbnz	r2, 800bbae <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb90:	6801      	ldr	r1, [r0, #0]
 800bb92:	680c      	ldr	r4, [r1, #0]
 800bb94:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800bb98:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb9a:	688c      	ldr	r4, [r1, #8]
 800bb9c:	f024 0401 	bic.w	r4, r4, #1
 800bba0:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bba2:	2120      	movs	r1, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bba4:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 800bba6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bbaa:	f7f9 fab9 	bl	8005120 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bbae:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bbb0:	6993      	ldr	r3, [r2, #24]
 800bbb2:	f043 0308 	orr.w	r3, r3, #8
 800bbb6:	6193      	str	r3, [r2, #24]
}
 800bbb8:	e7f9      	b.n	800bbae <UART_RxISR_8BIT+0x50>

0800bbba <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbba:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800bbbe:	6802      	ldr	r2, [r0, #0]
 800bbc0:	2922      	cmp	r1, #34	; 0x22
{
 800bbc2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbc4:	d120      	bne.n	800bc08 <UART_RxISR_16BIT+0x4e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bbc6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800bbc8:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 800bbcc:	400c      	ands	r4, r1
 800bbce:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800bbd0:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 800bbd4:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800bbd6:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800bbda:	3901      	subs	r1, #1
 800bbdc:	b289      	uxth	r1, r1
 800bbde:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bbe2:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800bbe6:	b289      	uxth	r1, r1
 800bbe8:	b969      	cbnz	r1, 800bc06 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbea:	6814      	ldr	r4, [r2, #0]
 800bbec:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800bbf0:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbf2:	6894      	ldr	r4, [r2, #8]
 800bbf4:	f024 0401 	bic.w	r4, r4, #1
 800bbf8:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bbfa:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bbfc:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 800bbfe:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bc02:	f7f9 fa8d 	bl	8005120 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc06:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc08:	6993      	ldr	r3, [r2, #24]
 800bc0a:	f043 0308 	orr.w	r3, r3, #8
 800bc0e:	6193      	str	r3, [r2, #24]
}
 800bc10:	e7f9      	b.n	800bc06 <UART_RxISR_16BIT+0x4c>
	...

0800bc14 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc14:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800bc18:	2b22      	cmp	r3, #34	; 0x22
{
 800bc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1e:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc20:	d13f      	bne.n	800bca2 <UART_RxISR_8BIT_FIFOEN+0x8e>
  uint16_t  uhMask = huart->Mask;
 800bc22:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc26:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bc2a:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc2e:	4f20      	ldr	r7, [pc, #128]	; (800bcb0 <UART_RxISR_8BIT_FIFOEN+0x9c>)
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bc30:	b9a5      	cbnz	r5, 800bc5c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bc32:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bc36:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bc38:	b173      	cbz	r3, 800bc58 <UART_RxISR_8BIT_FIFOEN+0x44>
 800bc3a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d90a      	bls.n	800bc58 <UART_RxISR_8BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	689a      	ldr	r2, [r3, #8]
 800bc46:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bc4a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bc4c:	4a19      	ldr	r2, [pc, #100]	; (800bcb4 <UART_RxISR_8BIT_FIFOEN+0xa0>)
 800bc4e:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	f042 0220 	orr.w	r2, r2, #32
 800bc56:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc5c:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc5e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc62:	4033      	ands	r3, r6
 800bc64:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800bc66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc68:	3301      	adds	r3, #1
 800bc6a:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800bc6c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bc70:	3b01      	subs	r3, #1
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800bc78:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	b96b      	cbnz	r3, 800bc9c <UART_RxISR_8BIT_FIFOEN+0x88>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc80:	6822      	ldr	r2, [r4, #0]
        HAL_UART_RxCpltCallback(huart);
 800bc82:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc84:	6811      	ldr	r1, [r2, #0]
 800bc86:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800bc8a:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc8c:	6891      	ldr	r1, [r2, #8]
 800bc8e:	4039      	ands	r1, r7
 800bc90:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800bc92:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800bc96:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800bc98:	f7f9 fa42 	bl	8005120 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bc9c:	3d01      	subs	r5, #1
 800bc9e:	b2ad      	uxth	r5, r5
 800bca0:	e7c6      	b.n	800bc30 <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bca2:	6802      	ldr	r2, [r0, #0]
 800bca4:	6993      	ldr	r3, [r2, #24]
 800bca6:	f043 0308 	orr.w	r3, r3, #8
 800bcaa:	6193      	str	r3, [r2, #24]
}
 800bcac:	e7d4      	b.n	800bc58 <UART_RxISR_8BIT_FIFOEN+0x44>
 800bcae:	bf00      	nop
 800bcb0:	effffffe 	.word	0xeffffffe
 800bcb4:	0800bb5f 	.word	0x0800bb5f

0800bcb8 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bcb8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800bcbc:	2b22      	cmp	r3, #34	; 0x22
{
 800bcbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc2:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bcc4:	d13d      	bne.n	800bd42 <UART_RxISR_16BIT_FIFOEN+0x8a>
  uint16_t  uhMask = huart->Mask;
 800bcc6:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bcca:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bcce:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bcd2:	4f1f      	ldr	r7, [pc, #124]	; (800bd50 <UART_RxISR_16BIT_FIFOEN+0x98>)
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bcd4:	b9a5      	cbnz	r5, 800bd00 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bcd6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bcda:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bcdc:	b173      	cbz	r3, 800bcfc <UART_RxISR_16BIT_FIFOEN+0x44>
 800bcde:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d90a      	bls.n	800bcfc <UART_RxISR_16BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	689a      	ldr	r2, [r3, #8]
 800bcea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bcee:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bcf0:	4a18      	ldr	r2, [pc, #96]	; (800bd54 <UART_RxISR_16BIT_FIFOEN+0x9c>)
 800bcf2:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	f042 0220 	orr.w	r2, r2, #32
 800bcfa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd00:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800bd02:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd04:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800bd06:	4031      	ands	r1, r6
 800bd08:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 800bd0c:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800bd0e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800bd12:	3a01      	subs	r2, #1
 800bd14:	b292      	uxth	r2, r2
 800bd16:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800bd1a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800bd1e:	b292      	uxth	r2, r2
 800bd20:	b962      	cbnz	r2, 800bd3c <UART_RxISR_16BIT_FIFOEN+0x84>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd22:	6819      	ldr	r1, [r3, #0]
        HAL_UART_RxCpltCallback(huart);
 800bd24:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd26:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800bd2a:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd2c:	6899      	ldr	r1, [r3, #8]
 800bd2e:	4039      	ands	r1, r7
 800bd30:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800bd32:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800bd36:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800bd38:	f7f9 f9f2 	bl	8005120 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bd3c:	3d01      	subs	r5, #1
 800bd3e:	b2ad      	uxth	r5, r5
 800bd40:	e7c8      	b.n	800bcd4 <UART_RxISR_16BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd42:	6802      	ldr	r2, [r0, #0]
 800bd44:	6993      	ldr	r3, [r2, #24]
 800bd46:	f043 0308 	orr.w	r3, r3, #8
 800bd4a:	6193      	str	r3, [r2, #24]
}
 800bd4c:	e7d6      	b.n	800bcfc <UART_RxISR_16BIT_FIFOEN+0x44>
 800bd4e:	bf00      	nop
 800bd50:	effffffe 	.word	0xeffffffe
 800bd54:	0800bbbb 	.word	0x0800bbbb

0800bd58 <UART_DMAReceiveCplt>:
{
 800bd58:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bd5a:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd5c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bd5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd62:	d012      	beq.n	800bd8a <UART_DMAReceiveCplt+0x32>
    huart->RxXferCount = 0U;
 800bd64:	2300      	movs	r3, #0
 800bd66:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd6a:	6813      	ldr	r3, [r2, #0]
 800bd6c:	6819      	ldr	r1, [r3, #0]
 800bd6e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800bd72:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd74:	6899      	ldr	r1, [r3, #8]
 800bd76:	f021 0101 	bic.w	r1, r1, #1
 800bd7a:	6099      	str	r1, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd7c:	6899      	ldr	r1, [r3, #8]
 800bd7e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800bd82:	6099      	str	r1, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800bd84:	2320      	movs	r3, #32
 800bd86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  HAL_UART_RxCpltCallback(huart);
 800bd8a:	4610      	mov	r0, r2
 800bd8c:	f7f9 f9c8 	bl	8005120 <HAL_UART_RxCpltCallback>
}
 800bd90:	bd08      	pop	{r3, pc}

0800bd92 <HAL_UART_RxHalfCpltCallback>:
 800bd92:	4770      	bx	lr

0800bd94 <UART_DMARxHalfCplt>:
{
 800bd94:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800bd96:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bd98:	f7ff fffb 	bl	800bd92 <HAL_UART_RxHalfCpltCallback>
}
 800bd9c:	bd08      	pop	{r3, pc}

0800bd9e <HAL_UART_ErrorCallback>:
 800bd9e:	4770      	bx	lr

0800bda0 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bda0:	6b81      	ldr	r1, [r0, #56]	; 0x38
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bda2:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bda4:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bda8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
{
 800bdac:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bdae:	689c      	ldr	r4, [r3, #8]
 800bdb0:	0624      	lsls	r4, r4, #24
 800bdb2:	d50f      	bpl.n	800bdd4 <UART_DMAError+0x34>
 800bdb4:	2a21      	cmp	r2, #33	; 0x21
 800bdb6:	d10d      	bne.n	800bdd4 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bdc4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bdc6:	689a      	ldr	r2, [r3, #8]
 800bdc8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bdcc:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800bdce:	2220      	movs	r2, #32
 800bdd0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	065b      	lsls	r3, r3, #25
 800bdd8:	d507      	bpl.n	800bdea <UART_DMAError+0x4a>
 800bdda:	2822      	cmp	r0, #34	; 0x22
 800bddc:	d105      	bne.n	800bdea <UART_DMAError+0x4a>
    huart->RxXferCount = 0U;
 800bdde:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 800bde0:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 800bde2:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bde6:	f7ff fce0 	bl	800b7aa <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bdea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 800bdee:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bdf0:	f043 0310 	orr.w	r3, r3, #16
 800bdf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 800bdf8:	f7ff ffd1 	bl	800bd9e <HAL_UART_ErrorCallback>
}
 800bdfc:	bd10      	pop	{r4, pc}
	...

0800be00 <UART_SetConfig>:
{
 800be00:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800be04:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800be06:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be08:	69c0      	ldr	r0, [r0, #28]
{
 800be0a:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be0c:	6921      	ldr	r1, [r4, #16]
 800be0e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be10:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be12:	430a      	orrs	r2, r1
 800be14:	6961      	ldr	r1, [r4, #20]
 800be16:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 800be18:	6e61      	ldr	r1, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be1a:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 800be1c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be1e:	49a8      	ldr	r1, [pc, #672]	; (800c0c0 <UART_SetConfig+0x2c0>)
 800be20:	4029      	ands	r1, r5
 800be22:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be24:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be26:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800be2e:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be30:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be32:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be34:	4aa3      	ldr	r2, [pc, #652]	; (800c0c4 <UART_SetConfig+0x2c4>)
 800be36:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800be38:	bf1c      	itt	ne
 800be3a:	6a22      	ldrne	r2, [r4, #32]
 800be3c:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be3e:	689a      	ldr	r2, [r3, #8]
 800be40:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800be44:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800be48:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be4c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be50:	f022 020f 	bic.w	r2, r2, #15
 800be54:	430a      	orrs	r2, r1
 800be56:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be58:	4a9b      	ldr	r2, [pc, #620]	; (800c0c8 <UART_SetConfig+0x2c8>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d11c      	bne.n	800be98 <UART_SetConfig+0x98>
 800be5e:	4b9b      	ldr	r3, [pc, #620]	; (800c0cc <UART_SetConfig+0x2cc>)
 800be60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be66:	2b28      	cmp	r3, #40	; 0x28
 800be68:	d86c      	bhi.n	800bf44 <UART_SetConfig+0x144>
 800be6a:	4a99      	ldr	r2, [pc, #612]	; (800c0d0 <UART_SetConfig+0x2d0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be6c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800be70:	5cd3      	ldrb	r3, [r2, r3]
 800be72:	f040 8104 	bne.w	800c07e <UART_SetConfig+0x27e>
    switch (clocksource)
 800be76:	2b08      	cmp	r3, #8
 800be78:	f000 80fa 	beq.w	800c070 <UART_SetConfig+0x270>
 800be7c:	f200 80c3 	bhi.w	800c006 <UART_SetConfig+0x206>
 800be80:	2b01      	cmp	r3, #1
 800be82:	f000 80f2 	beq.w	800c06a <UART_SetConfig+0x26a>
 800be86:	f0c0 80eb 	bcc.w	800c060 <UART_SetConfig+0x260>
 800be8a:	2b04      	cmp	r3, #4
 800be8c:	d15a      	bne.n	800bf44 <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be8e:	4668      	mov	r0, sp
 800be90:	f7fd fa62 	bl	8009358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be94:	9801      	ldr	r0, [sp, #4]
        break;
 800be96:	e0e5      	b.n	800c064 <UART_SetConfig+0x264>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be98:	4a8e      	ldr	r2, [pc, #568]	; (800c0d4 <UART_SetConfig+0x2d4>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d107      	bne.n	800beae <UART_SetConfig+0xae>
 800be9e:	4b8b      	ldr	r3, [pc, #556]	; (800c0cc <UART_SetConfig+0x2cc>)
 800bea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bea2:	f003 0307 	and.w	r3, r3, #7
 800bea6:	2b05      	cmp	r3, #5
 800bea8:	d84c      	bhi.n	800bf44 <UART_SetConfig+0x144>
 800beaa:	4a8b      	ldr	r2, [pc, #556]	; (800c0d8 <UART_SetConfig+0x2d8>)
 800beac:	e7de      	b.n	800be6c <UART_SetConfig+0x6c>
 800beae:	4a8b      	ldr	r2, [pc, #556]	; (800c0dc <UART_SetConfig+0x2dc>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d107      	bne.n	800bec4 <UART_SetConfig+0xc4>
 800beb4:	4b85      	ldr	r3, [pc, #532]	; (800c0cc <UART_SetConfig+0x2cc>)
 800beb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb8:	f003 0307 	and.w	r3, r3, #7
 800bebc:	2b05      	cmp	r3, #5
 800bebe:	d841      	bhi.n	800bf44 <UART_SetConfig+0x144>
 800bec0:	4a87      	ldr	r2, [pc, #540]	; (800c0e0 <UART_SetConfig+0x2e0>)
 800bec2:	e7d3      	b.n	800be6c <UART_SetConfig+0x6c>
 800bec4:	4a87      	ldr	r2, [pc, #540]	; (800c0e4 <UART_SetConfig+0x2e4>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d107      	bne.n	800beda <UART_SetConfig+0xda>
 800beca:	4b80      	ldr	r3, [pc, #512]	; (800c0cc <UART_SetConfig+0x2cc>)
 800becc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bece:	f003 0307 	and.w	r3, r3, #7
 800bed2:	2b05      	cmp	r3, #5
 800bed4:	d836      	bhi.n	800bf44 <UART_SetConfig+0x144>
 800bed6:	4a84      	ldr	r2, [pc, #528]	; (800c0e8 <UART_SetConfig+0x2e8>)
 800bed8:	e7c8      	b.n	800be6c <UART_SetConfig+0x6c>
 800beda:	4a84      	ldr	r2, [pc, #528]	; (800c0ec <UART_SetConfig+0x2ec>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d107      	bne.n	800bef0 <UART_SetConfig+0xf0>
 800bee0:	4b7a      	ldr	r3, [pc, #488]	; (800c0cc <UART_SetConfig+0x2cc>)
 800bee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bee4:	f003 0307 	and.w	r3, r3, #7
 800bee8:	2b05      	cmp	r3, #5
 800beea:	d82b      	bhi.n	800bf44 <UART_SetConfig+0x144>
 800beec:	4a80      	ldr	r2, [pc, #512]	; (800c0f0 <UART_SetConfig+0x2f0>)
 800beee:	e7bd      	b.n	800be6c <UART_SetConfig+0x6c>
 800bef0:	4a80      	ldr	r2, [pc, #512]	; (800c0f4 <UART_SetConfig+0x2f4>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d107      	bne.n	800bf06 <UART_SetConfig+0x106>
 800bef6:	4b75      	ldr	r3, [pc, #468]	; (800c0cc <UART_SetConfig+0x2cc>)
 800bef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800befe:	2b28      	cmp	r3, #40	; 0x28
 800bf00:	d820      	bhi.n	800bf44 <UART_SetConfig+0x144>
 800bf02:	4a7d      	ldr	r2, [pc, #500]	; (800c0f8 <UART_SetConfig+0x2f8>)
 800bf04:	e7b2      	b.n	800be6c <UART_SetConfig+0x6c>
 800bf06:	4a7d      	ldr	r2, [pc, #500]	; (800c0fc <UART_SetConfig+0x2fc>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d107      	bne.n	800bf1c <UART_SetConfig+0x11c>
 800bf0c:	4b6f      	ldr	r3, [pc, #444]	; (800c0cc <UART_SetConfig+0x2cc>)
 800bf0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf10:	f003 0307 	and.w	r3, r3, #7
 800bf14:	2b05      	cmp	r3, #5
 800bf16:	d815      	bhi.n	800bf44 <UART_SetConfig+0x144>
 800bf18:	4a79      	ldr	r2, [pc, #484]	; (800c100 <UART_SetConfig+0x300>)
 800bf1a:	e7a7      	b.n	800be6c <UART_SetConfig+0x6c>
 800bf1c:	4a79      	ldr	r2, [pc, #484]	; (800c104 <UART_SetConfig+0x304>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d107      	bne.n	800bf32 <UART_SetConfig+0x132>
 800bf22:	4b6a      	ldr	r3, [pc, #424]	; (800c0cc <UART_SetConfig+0x2cc>)
 800bf24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf26:	f003 0307 	and.w	r3, r3, #7
 800bf2a:	2b05      	cmp	r3, #5
 800bf2c:	d80a      	bhi.n	800bf44 <UART_SetConfig+0x144>
 800bf2e:	4a76      	ldr	r2, [pc, #472]	; (800c108 <UART_SetConfig+0x308>)
 800bf30:	e79c      	b.n	800be6c <UART_SetConfig+0x6c>
 800bf32:	4a64      	ldr	r2, [pc, #400]	; (800c0c4 <UART_SetConfig+0x2c4>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d105      	bne.n	800bf44 <UART_SetConfig+0x144>
 800bf38:	4b64      	ldr	r3, [pc, #400]	; (800c0cc <UART_SetConfig+0x2cc>)
 800bf3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf3c:	f003 0307 	and.w	r3, r3, #7
 800bf40:	2b05      	cmp	r3, #5
 800bf42:	d901      	bls.n	800bf48 <UART_SetConfig+0x148>
        ret = HAL_ERROR;
 800bf44:	2001      	movs	r0, #1
 800bf46:	e04b      	b.n	800bfe0 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800bf48:	4a70      	ldr	r2, [pc, #448]	; (800c10c <UART_SetConfig+0x30c>)
 800bf4a:	5cd3      	ldrb	r3, [r2, r3]
 800bf4c:	2b08      	cmp	r3, #8
 800bf4e:	d050      	beq.n	800bff2 <UART_SetConfig+0x1f2>
 800bf50:	d808      	bhi.n	800bf64 <UART_SetConfig+0x164>
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d03f      	beq.n	800bfd6 <UART_SetConfig+0x1d6>
 800bf56:	2b04      	cmp	r3, #4
 800bf58:	d1f4      	bne.n	800bf44 <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf5a:	4668      	mov	r0, sp
 800bf5c:	f7fd f9fc 	bl	8009358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf60:	9801      	ldr	r0, [sp, #4]
        break;
 800bf62:	e03a      	b.n	800bfda <UART_SetConfig+0x1da>
    switch (clocksource)
 800bf64:	2b20      	cmp	r3, #32
 800bf66:	d04c      	beq.n	800c002 <UART_SetConfig+0x202>
 800bf68:	2b40      	cmp	r3, #64	; 0x40
 800bf6a:	d047      	beq.n	800bffc <UART_SetConfig+0x1fc>
 800bf6c:	2b10      	cmp	r3, #16
 800bf6e:	d1e9      	bne.n	800bf44 <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf70:	4b56      	ldr	r3, [pc, #344]	; (800c0cc <UART_SetConfig+0x2cc>)
 800bf72:	4867      	ldr	r0, [pc, #412]	; (800c110 <UART_SetConfig+0x310>)
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	f012 0f20 	tst.w	r2, #32
 800bf7a:	d003      	beq.n	800bf84 <UART_SetConfig+0x184>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bf82:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf84:	4b63      	ldr	r3, [pc, #396]	; (800c114 <UART_SetConfig+0x314>)
 800bf86:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf88:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf8a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf8e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf92:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf96:	4299      	cmp	r1, r3
 800bf98:	d8d4      	bhi.n	800bf44 <UART_SetConfig+0x144>
 800bf9a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800bf9e:	d8d1      	bhi.n	800bf44 <UART_SetConfig+0x144>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	f7f4 f9f4 	bl	8000390 <__aeabi_uldivmod>
 800bfa8:	462a      	mov	r2, r5
 800bfaa:	020f      	lsls	r7, r1, #8
 800bfac:	2300      	movs	r3, #0
 800bfae:	0206      	lsls	r6, r0, #8
 800bfb0:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800bfb4:	0868      	lsrs	r0, r5, #1
 800bfb6:	eb16 0b00 	adds.w	fp, r6, r0
 800bfba:	f147 0c00 	adc.w	ip, r7, #0
 800bfbe:	4658      	mov	r0, fp
 800bfc0:	4661      	mov	r1, ip
 800bfc2:	f7f4 f9e5 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bfc6:	4b54      	ldr	r3, [pc, #336]	; (800c118 <UART_SetConfig+0x318>)
 800bfc8:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d8b9      	bhi.n	800bf44 <UART_SetConfig+0x144>
          huart->Instance->BRR = usartdiv;
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	60d8      	str	r0, [r3, #12]
 800bfd4:	e003      	b.n	800bfde <UART_SetConfig+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bfd6:	f7fd f9ad 	bl	8009334 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	d1d2      	bne.n	800bf84 <UART_SetConfig+0x184>
 800bfde:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800bfe6:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800bfea:	6723      	str	r3, [r4, #112]	; 0x70
}
 800bfec:	b006      	add	sp, #24
 800bfee:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bff2:	a803      	add	r0, sp, #12
 800bff4:	f7fd fa56 	bl	80094a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bff8:	9804      	ldr	r0, [sp, #16]
        break;
 800bffa:	e7ee      	b.n	800bfda <UART_SetConfig+0x1da>
        pclk = (uint32_t) LSE_VALUE;
 800bffc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c000:	e7c0      	b.n	800bf84 <UART_SetConfig+0x184>
        pclk = (uint32_t) CSI_VALUE;
 800c002:	4846      	ldr	r0, [pc, #280]	; (800c11c <UART_SetConfig+0x31c>)
 800c004:	e7be      	b.n	800bf84 <UART_SetConfig+0x184>
    switch (clocksource)
 800c006:	2b20      	cmp	r3, #32
 800c008:	d037      	beq.n	800c07a <UART_SetConfig+0x27a>
 800c00a:	2b40      	cmp	r3, #64	; 0x40
 800c00c:	d00b      	beq.n	800c026 <UART_SetConfig+0x226>
 800c00e:	2b10      	cmp	r3, #16
 800c010:	d198      	bne.n	800bf44 <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c012:	4b2e      	ldr	r3, [pc, #184]	; (800c0cc <UART_SetConfig+0x2cc>)
 800c014:	483e      	ldr	r0, [pc, #248]	; (800c110 <UART_SetConfig+0x310>)
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	f012 0f20 	tst.w	r2, #32
 800c01c:	d003      	beq.n	800c026 <UART_SetConfig+0x226>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c024:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c026:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c028:	4b3a      	ldr	r3, [pc, #232]	; (800c114 <UART_SetConfig+0x314>)
 800c02a:	6862      	ldr	r2, [r4, #4]
 800c02c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800c030:	fbb0 f0f3 	udiv	r0, r0, r3
 800c034:	0853      	lsrs	r3, r2, #1
 800c036:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800c03a:	fbb0 f0f2 	udiv	r0, r0, r2
 800c03e:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c040:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800c044:	f1a3 0110 	sub.w	r1, r3, #16
 800c048:	4291      	cmp	r1, r2
 800c04a:	f63f af7b 	bhi.w	800bf44 <UART_SetConfig+0x144>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c04e:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c052:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800c056:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c058:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800c05a:	4318      	orrs	r0, r3
 800c05c:	60d0      	str	r0, [r2, #12]
 800c05e:	e7be      	b.n	800bfde <UART_SetConfig+0x1de>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c060:	f7fc fbcc 	bl	80087fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c064:	2800      	cmp	r0, #0
 800c066:	d0ba      	beq.n	800bfde <UART_SetConfig+0x1de>
 800c068:	e7dd      	b.n	800c026 <UART_SetConfig+0x226>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c06a:	f7fc fbd9 	bl	8008820 <HAL_RCC_GetPCLK2Freq>
        break;
 800c06e:	e7f9      	b.n	800c064 <UART_SetConfig+0x264>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c070:	a803      	add	r0, sp, #12
 800c072:	f7fd fa17 	bl	80094a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c076:	9804      	ldr	r0, [sp, #16]
        break;
 800c078:	e7f4      	b.n	800c064 <UART_SetConfig+0x264>
        pclk = (uint32_t) CSI_VALUE;
 800c07a:	4828      	ldr	r0, [pc, #160]	; (800c11c <UART_SetConfig+0x31c>)
 800c07c:	e7d3      	b.n	800c026 <UART_SetConfig+0x226>
    switch (clocksource)
 800c07e:	2b08      	cmp	r3, #8
 800c080:	d06a      	beq.n	800c158 <UART_SetConfig+0x358>
 800c082:	d80a      	bhi.n	800c09a <UART_SetConfig+0x29a>
 800c084:	2b01      	cmp	r3, #1
 800c086:	d064      	beq.n	800c152 <UART_SetConfig+0x352>
 800c088:	d35d      	bcc.n	800c146 <UART_SetConfig+0x346>
 800c08a:	2b04      	cmp	r3, #4
 800c08c:	f47f af5a 	bne.w	800bf44 <UART_SetConfig+0x144>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c090:	4668      	mov	r0, sp
 800c092:	f7fd f961 	bl	8009358 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c096:	9801      	ldr	r0, [sp, #4]
        break;
 800c098:	e057      	b.n	800c14a <UART_SetConfig+0x34a>
    switch (clocksource)
 800c09a:	2b20      	cmp	r3, #32
 800c09c:	d061      	beq.n	800c162 <UART_SetConfig+0x362>
 800c09e:	2b40      	cmp	r3, #64	; 0x40
 800c0a0:	d03e      	beq.n	800c120 <UART_SetConfig+0x320>
 800c0a2:	2b10      	cmp	r3, #16
 800c0a4:	f47f af4e 	bne.w	800bf44 <UART_SetConfig+0x144>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0a8:	4b08      	ldr	r3, [pc, #32]	; (800c0cc <UART_SetConfig+0x2cc>)
 800c0aa:	4819      	ldr	r0, [pc, #100]	; (800c110 <UART_SetConfig+0x310>)
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	f012 0f20 	tst.w	r2, #32
 800c0b2:	d037      	beq.n	800c124 <UART_SetConfig+0x324>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c0ba:	40d8      	lsrs	r0, r3
 800c0bc:	e032      	b.n	800c124 <UART_SetConfig+0x324>
 800c0be:	bf00      	nop
 800c0c0:	cfff69f3 	.word	0xcfff69f3
 800c0c4:	58000c00 	.word	0x58000c00
 800c0c8:	40011000 	.word	0x40011000
 800c0cc:	58024400 	.word	0x58024400
 800c0d0:	08014b1d 	.word	0x08014b1d
 800c0d4:	40004400 	.word	0x40004400
 800c0d8:	08014b46 	.word	0x08014b46
 800c0dc:	40004800 	.word	0x40004800
 800c0e0:	08014b46 	.word	0x08014b46
 800c0e4:	40004c00 	.word	0x40004c00
 800c0e8:	08014b46 	.word	0x08014b46
 800c0ec:	40005000 	.word	0x40005000
 800c0f0:	08014b46 	.word	0x08014b46
 800c0f4:	40011400 	.word	0x40011400
 800c0f8:	08014b1d 	.word	0x08014b1d
 800c0fc:	40007800 	.word	0x40007800
 800c100:	08014b46 	.word	0x08014b46
 800c104:	40007c00 	.word	0x40007c00
 800c108:	08014b46 	.word	0x08014b46
 800c10c:	08014b4c 	.word	0x08014b4c
 800c110:	03d09000 	.word	0x03d09000
 800c114:	08014b52 	.word	0x08014b52
 800c118:	000ffcff 	.word	0x000ffcff
 800c11c:	003d0900 	.word	0x003d0900
        pclk = (uint32_t) LSE_VALUE;
 800c120:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c124:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c126:	4a10      	ldr	r2, [pc, #64]	; (800c168 <UART_SetConfig+0x368>)
 800c128:	6863      	ldr	r3, [r4, #4]
 800c12a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800c12e:	fbb0 f0f2 	udiv	r0, r0, r2
 800c132:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c136:	fbb0 f0f3 	udiv	r0, r0, r3
 800c13a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c13c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800c140:	f1a0 0210 	sub.w	r2, r0, #16
 800c144:	e742      	b.n	800bfcc <UART_SetConfig+0x1cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c146:	f7fc fb59 	bl	80087fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c14a:	2800      	cmp	r0, #0
 800c14c:	f43f af47 	beq.w	800bfde <UART_SetConfig+0x1de>
 800c150:	e7e8      	b.n	800c124 <UART_SetConfig+0x324>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c152:	f7fc fb65 	bl	8008820 <HAL_RCC_GetPCLK2Freq>
        break;
 800c156:	e7f8      	b.n	800c14a <UART_SetConfig+0x34a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c158:	a803      	add	r0, sp, #12
 800c15a:	f7fd f9a3 	bl	80094a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c15e:	9804      	ldr	r0, [sp, #16]
        break;
 800c160:	e7f3      	b.n	800c14a <UART_SetConfig+0x34a>
        pclk = (uint32_t) CSI_VALUE;
 800c162:	4802      	ldr	r0, [pc, #8]	; (800c16c <UART_SetConfig+0x36c>)
 800c164:	e7de      	b.n	800c124 <UART_SetConfig+0x324>
 800c166:	bf00      	nop
 800c168:	08014b52 	.word	0x08014b52
 800c16c:	003d0900 	.word	0x003d0900

0800c170 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c170:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c172:	07da      	lsls	r2, r3, #31
{
 800c174:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c176:	d506      	bpl.n	800c186 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c178:	6801      	ldr	r1, [r0, #0]
 800c17a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c17c:	684a      	ldr	r2, [r1, #4]
 800c17e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c182:	4322      	orrs	r2, r4
 800c184:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c186:	079c      	lsls	r4, r3, #30
 800c188:	d506      	bpl.n	800c198 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c18a:	6801      	ldr	r1, [r0, #0]
 800c18c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c18e:	684a      	ldr	r2, [r1, #4]
 800c190:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c194:	4322      	orrs	r2, r4
 800c196:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c198:	0759      	lsls	r1, r3, #29
 800c19a:	d506      	bpl.n	800c1aa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c19c:	6801      	ldr	r1, [r0, #0]
 800c19e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c1a0:	684a      	ldr	r2, [r1, #4]
 800c1a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c1a6:	4322      	orrs	r2, r4
 800c1a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1aa:	071a      	lsls	r2, r3, #28
 800c1ac:	d506      	bpl.n	800c1bc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c1ae:	6801      	ldr	r1, [r0, #0]
 800c1b0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c1b2:	684a      	ldr	r2, [r1, #4]
 800c1b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c1b8:	4322      	orrs	r2, r4
 800c1ba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1bc:	06dc      	lsls	r4, r3, #27
 800c1be:	d506      	bpl.n	800c1ce <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c1c0:	6801      	ldr	r1, [r0, #0]
 800c1c2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c1c4:	688a      	ldr	r2, [r1, #8]
 800c1c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c1ca:	4322      	orrs	r2, r4
 800c1cc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c1ce:	0699      	lsls	r1, r3, #26
 800c1d0:	d506      	bpl.n	800c1e0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c1d2:	6801      	ldr	r1, [r0, #0]
 800c1d4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c1d6:	688a      	ldr	r2, [r1, #8]
 800c1d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1dc:	4322      	orrs	r2, r4
 800c1de:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c1e0:	065a      	lsls	r2, r3, #25
 800c1e2:	d510      	bpl.n	800c206 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c1e4:	6801      	ldr	r1, [r0, #0]
 800c1e6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800c1e8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c1ea:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c1ee:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c1f2:	ea42 0204 	orr.w	r2, r2, r4
 800c1f6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c1f8:	d105      	bne.n	800c206 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c1fa:	684a      	ldr	r2, [r1, #4]
 800c1fc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800c1fe:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800c202:	4322      	orrs	r2, r4
 800c204:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c206:	061b      	lsls	r3, r3, #24
 800c208:	d506      	bpl.n	800c218 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c20a:	6802      	ldr	r2, [r0, #0]
 800c20c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800c20e:	6853      	ldr	r3, [r2, #4]
 800c210:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c214:	430b      	orrs	r3, r1
 800c216:	6053      	str	r3, [r2, #4]
}
 800c218:	bd10      	pop	{r4, pc}

0800c21a <UART_WaitOnFlagUntilTimeout>:
{
 800c21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c21e:	9d06      	ldr	r5, [sp, #24]
 800c220:	4604      	mov	r4, r0
 800c222:	460f      	mov	r7, r1
 800c224:	4616      	mov	r6, r2
 800c226:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c228:	6821      	ldr	r1, [r4, #0]
 800c22a:	69ca      	ldr	r2, [r1, #28]
 800c22c:	ea37 0302 	bics.w	r3, r7, r2
 800c230:	bf0c      	ite	eq
 800c232:	2201      	moveq	r2, #1
 800c234:	2200      	movne	r2, #0
 800c236:	42b2      	cmp	r2, r6
 800c238:	d001      	beq.n	800c23e <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800c23a:	2000      	movs	r0, #0
 800c23c:	e01a      	b.n	800c274 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800c23e:	1c68      	adds	r0, r5, #1
 800c240:	d0f3      	beq.n	800c22a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c242:	f7f9 f80b 	bl	800525c <HAL_GetTick>
 800c246:	eba0 0008 	sub.w	r0, r0, r8
 800c24a:	42a8      	cmp	r0, r5
 800c24c:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c24e:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c250:	d800      	bhi.n	800c254 <UART_WaitOnFlagUntilTimeout+0x3a>
 800c252:	b98d      	cbnz	r5, 800c278 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c258:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c25a:	6883      	ldr	r3, [r0, #8]
 800c25c:	f023 0301 	bic.w	r3, r3, #1
 800c260:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800c262:	2320      	movs	r3, #32
 800c264:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c268:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800c26c:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800c26e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800c270:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 800c274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c278:	075a      	lsls	r2, r3, #29
 800c27a:	d5d5      	bpl.n	800c228 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c27c:	69c3      	ldr	r3, [r0, #28]
 800c27e:	051b      	lsls	r3, r3, #20
 800c280:	d5d2      	bpl.n	800c228 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c282:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c286:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c288:	6803      	ldr	r3, [r0, #0]
 800c28a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c28e:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c290:	6883      	ldr	r3, [r0, #8]
 800c292:	f023 0301 	bic.w	r3, r3, #1
 800c296:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800c298:	2320      	movs	r3, #32
 800c29a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c29e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2a2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800c2a6:	e7e1      	b.n	800c26c <UART_WaitOnFlagUntilTimeout+0x52>

0800c2a8 <UART_CheckIdleState>:
{
 800c2a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2aa:	2600      	movs	r6, #0
{
 800c2ac:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2ae:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800c2b2:	f7f8 ffd3 	bl	800525c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2b6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c2b8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	071a      	lsls	r2, r3, #28
 800c2be:	d417      	bmi.n	800c2f0 <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c2c0:	6823      	ldr	r3, [r4, #0]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	075b      	lsls	r3, r3, #29
 800c2c6:	d50a      	bpl.n	800c2de <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	462b      	mov	r3, r5
 800c2d8:	f7ff ff9f 	bl	800c21a <UART_WaitOnFlagUntilTimeout>
 800c2dc:	b9a0      	cbnz	r0, 800c308 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800c2de:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800c2e0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c2e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800c2e6:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c2ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 800c2ee:	e00c      	b.n	800c30a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2f4:	4632      	mov	r2, r6
 800c2f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	4620      	mov	r0, r4
 800c300:	f7ff ff8b 	bl	800c21a <UART_WaitOnFlagUntilTimeout>
 800c304:	2800      	cmp	r0, #0
 800c306:	d0db      	beq.n	800c2c0 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800c308:	2003      	movs	r0, #3
}
 800c30a:	b002      	add	sp, #8
 800c30c:	bd70      	pop	{r4, r5, r6, pc}

0800c30e <HAL_UART_Init>:
{
 800c30e:	b510      	push	{r4, lr}
  if (huart == NULL)
 800c310:	4604      	mov	r4, r0
 800c312:	b350      	cbz	r0, 800c36a <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c314:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800c318:	b91b      	cbnz	r3, 800c322 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800c31a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 800c31e:	f7f7 fb5b 	bl	80039d8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800c322:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c324:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c326:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800c328:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 800c32c:	6813      	ldr	r3, [r2, #0]
 800c32e:	f023 0301 	bic.w	r3, r3, #1
 800c332:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c334:	f7ff fd64 	bl	800be00 <UART_SetConfig>
 800c338:	2801      	cmp	r0, #1
 800c33a:	d016      	beq.n	800c36a <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c33c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c33e:	b113      	cbz	r3, 800c346 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800c340:	4620      	mov	r0, r4
 800c342:	f7ff ff15 	bl	800c170 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c346:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800c348:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c34a:	685a      	ldr	r2, [r3, #4]
 800c34c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c350:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c352:	689a      	ldr	r2, [r3, #8]
 800c354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c358:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	f042 0201 	orr.w	r2, r2, #1
}
 800c360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800c364:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800c366:	f7ff bf9f 	b.w	800c2a8 <UART_CheckIdleState>
}
 800c36a:	2001      	movs	r0, #1
 800c36c:	bd10      	pop	{r4, pc}
	...

0800c370 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c370:	b084      	sub	sp, #16
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c372:	f240 1307 	movw	r3, #263	; 0x107
 800c376:	4a17      	ldr	r2, [pc, #92]	; (800c3d4 <UARTEx_SetNbDataToProcess+0x64>)
 800c378:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c37c:	4b16      	ldr	r3, [pc, #88]	; (800c3d8 <UARTEx_SetNbDataToProcess+0x68>)
 800c37e:	9302      	str	r3, [sp, #8]
 800c380:	f1a3 2303 	sub.w	r3, r3, #50332416	; 0x3000300
 800c384:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800c388:	9303      	str	r3, [sp, #12]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c38a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800c38c:	b923      	cbnz	r3, 800c398 <UARTEx_SetNbDataToProcess+0x28>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800c38e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800c392:	6683      	str	r3, [r0, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c394:	b004      	add	sp, #16
 800c396:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c398:	6802      	ldr	r2, [r0, #0]
 800c39a:	6893      	ldr	r3, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c39c:	6891      	ldr	r1, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c39e:	aa04      	add	r2, sp, #16
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c3a0:	f3c3 6342 	ubfx	r3, r3, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c3a4:	eb02 7151 	add.w	r1, r2, r1, lsr #29
 800c3a8:	f811 2c10 	ldrb.w	r2, [r1, #-16]
 800c3ac:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 800c3b0:	0112      	lsls	r2, r2, #4
 800c3b2:	fb92 f2f1 	sdiv	r2, r2, r1
 800c3b6:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c3ba:	aa04      	add	r2, sp, #16
 800c3bc:	4413      	add	r3, r2
 800c3be:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800c3c2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800c3c6:	0112      	lsls	r2, r2, #4
 800c3c8:	fb92 f3f3 	sdiv	r3, r2, r3
 800c3cc:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800c3d0:	e7e0      	b.n	800c394 <UARTEx_SetNbDataToProcess+0x24>
 800c3d2:	bf00      	nop
 800c3d4:	03010101 	.word	0x03010101
 800c3d8:	04020408 	.word	0x04020408

0800c3dc <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800c3dc:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d014      	beq.n	800c40e <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3e4:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c3e6:	2324      	movs	r3, #36	; 0x24
 800c3e8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3ec:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c3ee:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c3f0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800c3f4:	f023 0301 	bic.w	r3, r3, #1
 800c3f8:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3fe:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c400:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800c402:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 800c406:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return HAL_OK;
 800c40a:	4618      	mov	r0, r3
 800c40c:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c40e:	2002      	movs	r0, #2
}
 800c410:	4770      	bx	lr

0800c412 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800c412:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800c414:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 800c418:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d01b      	beq.n	800c456 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800c41e:	2301      	movs	r3, #1
 800c420:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800c424:	2324      	movs	r3, #36	; 0x24
 800c426:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c42a:	6803      	ldr	r3, [r0, #0]
 800c42c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	f022 0201 	bic.w	r2, r2, #1
 800c434:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c436:	689a      	ldr	r2, [r3, #8]
 800c438:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800c43c:	4311      	orrs	r1, r2
 800c43e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c440:	f7ff ff96 	bl	800c370 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c444:	6803      	ldr	r3, [r0, #0]
 800c446:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c448:	2320      	movs	r3, #32
 800c44a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800c44e:	2000      	movs	r0, #0
 800c450:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800c454:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800c456:	2002      	movs	r0, #2
 800c458:	e7fc      	b.n	800c454 <HAL_UARTEx_SetTxFifoThreshold+0x42>

0800c45a <HAL_UARTEx_SetRxFifoThreshold>:
{
 800c45a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800c45c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 800c460:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c462:	2b01      	cmp	r3, #1
 800c464:	d01b      	beq.n	800c49e <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800c466:	2301      	movs	r3, #1
 800c468:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 800c46c:	2324      	movs	r3, #36	; 0x24
 800c46e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c472:	6803      	ldr	r3, [r0, #0]
 800c474:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	f022 0201 	bic.w	r2, r2, #1
 800c47c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c47e:	689a      	ldr	r2, [r3, #8]
 800c480:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800c484:	4311      	orrs	r1, r2
 800c486:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c488:	f7ff ff72 	bl	800c370 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c48c:	6803      	ldr	r3, [r0, #0]
 800c48e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c490:	2320      	movs	r3, #32
 800c492:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800c496:	2000      	movs	r0, #0
 800c498:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800c49c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800c49e:	2002      	movs	r0, #2
 800c4a0:	e7fc      	b.n	800c49c <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

0800c4a4 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4a4:	4b12      	ldr	r3, [pc, #72]	; (800c4f0 <SDMMC_GetCmdResp2+0x4c>)
 800c4a6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800c4b0:	f241 3388 	movw	r3, #5000	; 0x1388
 800c4b4:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800c4b6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c4ba:	d315      	bcc.n	800c4e8 <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800c4bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4be:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c4c2:	d0f8      	beq.n	800c4b6 <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4c4:	0492      	lsls	r2, r2, #18
 800c4c6:	d4f6      	bmi.n	800c4b6 <SDMMC_GetCmdResp2+0x12>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c4ca:	075b      	lsls	r3, r3, #29
 800c4cc:	d503      	bpl.n	800c4d6 <SDMMC_GetCmdResp2+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4ce:	2304      	movs	r3, #4

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4d0:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c4d8:	f013 0301 	ands.w	r3, r3, #1
 800c4dc:	d001      	beq.n	800c4e2 <SDMMC_GetCmdResp2+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e7f6      	b.n	800c4d0 <SDMMC_GetCmdResp2+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4e2:	4a04      	ldr	r2, [pc, #16]	; (800c4f4 <SDMMC_GetCmdResp2+0x50>)
 800c4e4:	6382      	str	r2, [r0, #56]	; 0x38
 800c4e6:	e7f4      	b.n	800c4d2 <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c4e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4ec:	e7f1      	b.n	800c4d2 <SDMMC_GetCmdResp2+0x2e>
 800c4ee:	bf00      	nop
 800c4f0:	24000000 	.word	0x24000000
 800c4f4:	002000c5 	.word	0x002000c5

0800c4f8 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4f8:	4b0f      	ldr	r3, [pc, #60]	; (800c538 <SDMMC_GetCmdResp3+0x40>)
 800c4fa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	fbb3 f2f2 	udiv	r2, r3, r2
 800c504:	f241 3388 	movw	r3, #5000	; 0x1388
 800c508:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800c50a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c50e:	d310      	bcc.n	800c532 <SDMMC_GetCmdResp3+0x3a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800c510:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c512:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c516:	d0f8      	beq.n	800c50a <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c518:	0492      	lsls	r2, r2, #18
 800c51a:	d4f6      	bmi.n	800c50a <SDMMC_GetCmdResp3+0x12>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c51c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c51e:	f013 0304 	ands.w	r3, r3, #4
 800c522:	d003      	beq.n	800c52c <SDMMC_GetCmdResp3+0x34>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c524:	2304      	movs	r3, #4
 800c526:	6383      	str	r3, [r0, #56]	; 0x38
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
 800c528:	4618      	mov	r0, r3
 800c52a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c52c:	4a03      	ldr	r2, [pc, #12]	; (800c53c <SDMMC_GetCmdResp3+0x44>)
 800c52e:	6382      	str	r2, [r0, #56]	; 0x38
 800c530:	e7fa      	b.n	800c528 <SDMMC_GetCmdResp3+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c532:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c536:	4770      	bx	lr
 800c538:	24000000 	.word	0x24000000
 800c53c:	002000c5 	.word	0x002000c5

0800c540 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c540:	4b44      	ldr	r3, [pc, #272]	; (800c654 <SDMMC_GetCmdResp1+0x114>)
{
 800c542:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800c54a:	fbb3 f3f4 	udiv	r3, r3, r4
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c54e:	4c42      	ldr	r4, [pc, #264]	; (800c658 <SDMMC_GetCmdResp1+0x118>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c550:	435a      	muls	r2, r3
    if (count-- == 0U)
 800c552:	2a00      	cmp	r2, #0
 800c554:	d049      	beq.n	800c5ea <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 800c556:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c558:	4223      	tst	r3, r4
 800c55a:	d008      	beq.n	800c56e <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c55c:	049b      	lsls	r3, r3, #18
 800c55e:	d406      	bmi.n	800c56e <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c560:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c562:	075b      	lsls	r3, r3, #29
 800c564:	d505      	bpl.n	800c572 <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c566:	2304      	movs	r3, #4
 800c568:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c56a:	4618      	mov	r0, r3
}
 800c56c:	bd10      	pop	{r4, pc}
 800c56e:	3a01      	subs	r2, #1
 800c570:	e7ef      	b.n	800c552 <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c572:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c574:	07dc      	lsls	r4, r3, #31
 800c576:	d503      	bpl.n	800c580 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c578:	2301      	movs	r3, #1
 800c57a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c57c:	2001      	movs	r0, #1
 800c57e:	e7f5      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c580:	4b36      	ldr	r3, [pc, #216]	; (800c65c <SDMMC_GetCmdResp1+0x11c>)
 800c582:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c584:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c586:	b2db      	uxtb	r3, r3
 800c588:	4299      	cmp	r1, r3
 800c58a:	d1f7      	bne.n	800c57c <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 800c58c:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c58e:	4834      	ldr	r0, [pc, #208]	; (800c660 <SDMMC_GetCmdResp1+0x120>)
 800c590:	4018      	ands	r0, r3
 800c592:	2800      	cmp	r0, #0
 800c594:	d0ea      	beq.n	800c56c <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c596:	2b00      	cmp	r3, #0
 800c598:	db2a      	blt.n	800c5f0 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c59a:	005a      	lsls	r2, r3, #1
 800c59c:	d42b      	bmi.n	800c5f6 <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c59e:	009c      	lsls	r4, r3, #2
 800c5a0:	d42b      	bmi.n	800c5fa <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c5a2:	00d9      	lsls	r1, r3, #3
 800c5a4:	d42b      	bmi.n	800c5fe <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c5a6:	011a      	lsls	r2, r3, #4
 800c5a8:	d42c      	bmi.n	800c604 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c5aa:	015c      	lsls	r4, r3, #5
 800c5ac:	d42d      	bmi.n	800c60a <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c5ae:	01d9      	lsls	r1, r3, #7
 800c5b0:	d42e      	bmi.n	800c610 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c5b2:	021a      	lsls	r2, r3, #8
 800c5b4:	d42f      	bmi.n	800c616 <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c5b6:	025c      	lsls	r4, r3, #9
 800c5b8:	d430      	bmi.n	800c61c <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c5ba:	0299      	lsls	r1, r3, #10
 800c5bc:	d431      	bmi.n	800c622 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c5be:	02da      	lsls	r2, r3, #11
 800c5c0:	d432      	bmi.n	800c628 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c5c2:	035c      	lsls	r4, r3, #13
 800c5c4:	d433      	bmi.n	800c62e <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c5c6:	0399      	lsls	r1, r3, #14
 800c5c8:	d434      	bmi.n	800c634 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c5ca:	03da      	lsls	r2, r3, #15
 800c5cc:	d435      	bmi.n	800c63a <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c5ce:	041c      	lsls	r4, r3, #16
 800c5d0:	d436      	bmi.n	800c640 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c5d2:	0459      	lsls	r1, r3, #17
 800c5d4:	d437      	bmi.n	800c646 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c5d6:	049a      	lsls	r2, r3, #18
 800c5d8:	d438      	bmi.n	800c64c <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c5da:	f013 0f08 	tst.w	r3, #8
 800c5de:	bf0c      	ite	eq
 800c5e0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c5e4:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c5e8:	e7c0      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800c5ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c5ee:	e7bd      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c5f0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c5f4:	e7ba      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c5f6:	2040      	movs	r0, #64	; 0x40
 800c5f8:	e7b8      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c5fa:	2080      	movs	r0, #128	; 0x80
 800c5fc:	e7b6      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c5fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c602:	e7b3      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c604:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c608:	e7b0      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c60a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c60e:	e7ad      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c610:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c614:	e7aa      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c616:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c61a:	e7a7      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c61c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c620:	e7a4      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c622:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c626:	e7a1      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 800c628:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c62c:	e79e      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c62e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c632:	e79b      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c634:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c638:	e798      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c63a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c63e:	e795      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c640:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c644:	e792      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c646:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c64a:	e78f      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 800c64c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c650:	e78c      	b.n	800c56c <SDMMC_GetCmdResp1+0x2c>
 800c652:	bf00      	nop
 800c654:	24000000 	.word	0x24000000
 800c658:	00200045 	.word	0x00200045
 800c65c:	002000c5 	.word	0x002000c5
 800c660:	fdffe008 	.word	0xfdffe008

0800c664 <SDMMC_Init>:
{
 800c664:	b084      	sub	sp, #16
 800c666:	b510      	push	{r4, lr}
 800c668:	ac03      	add	r4, sp, #12
 800c66a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800c66e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c672:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 800c674:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 800c676:	9a05      	ldr	r2, [sp, #20]
 800c678:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800c67a:	9a06      	ldr	r2, [sp, #24]
 800c67c:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800c67e:	9a07      	ldr	r2, [sp, #28]
 800c680:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c682:	4a04      	ldr	r2, [pc, #16]	; (800c694 <SDMMC_Init+0x30>)
 800c684:	400a      	ands	r2, r1
}
 800c686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c68a:	4313      	orrs	r3, r2
}
 800c68c:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c68e:	6043      	str	r3, [r0, #4]
}
 800c690:	2000      	movs	r0, #0
 800c692:	4770      	bx	lr
 800c694:	ffc02c00 	.word	0xffc02c00

0800c698 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800c698:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800c69c:	4770      	bx	lr

0800c69e <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800c69e:	680b      	ldr	r3, [r1, #0]
 800c6a0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	4770      	bx	lr

0800c6a8 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c6a8:	6803      	ldr	r3, [r0, #0]
 800c6aa:	f043 0303 	orr.w	r3, r3, #3
 800c6ae:	6003      	str	r3, [r0, #0]
}
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	4770      	bx	lr

0800c6b4 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c6b4:	6800      	ldr	r0, [r0, #0]
}
 800c6b6:	f000 0003 	and.w	r0, r0, #3
 800c6ba:	4770      	bx	lr

0800c6bc <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800c6bc:	680b      	ldr	r3, [r1, #0]
{
 800c6be:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 800c6c0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6c2:	68c4      	ldr	r4, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6c4:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 800c6c8:	4313      	orrs	r3, r2
                       Command->Response         |\
 800c6ca:	68ca      	ldr	r2, [r1, #12]
 800c6cc:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800c6ce:	690a      	ldr	r2, [r1, #16]
 800c6d0:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c6d2:	4a03      	ldr	r2, [pc, #12]	; (800c6e0 <SDMMC_SendCommand+0x24>)
 800c6d4:	4022      	ands	r2, r4
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	60c3      	str	r3, [r0, #12]
}
 800c6da:	2000      	movs	r0, #0
 800c6dc:	bd10      	pop	{r4, pc}
 800c6de:	bf00      	nop
 800c6e0:	fffee0c0 	.word	0xfffee0c0

0800c6e4 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c6e4:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800c6e6:	5840      	ldr	r0, [r0, r1]
}
 800c6e8:	4770      	bx	lr

0800c6ea <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c6ea:	680b      	ldr	r3, [r1, #0]
{
 800c6ec:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c6ee:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800c6f0:	684b      	ldr	r3, [r1, #4]
 800c6f2:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c6f4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c6f6:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c6fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c6fe:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800c700:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 800c702:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 800c704:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800c706:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c708:	4313      	orrs	r3, r2
 800c70a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800c70c:	2000      	movs	r0, #0
 800c70e:	bd10      	pop	{r4, pc}

0800c710 <SDMMC_CmdBlockLength>:
{
 800c710:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c712:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c716:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c718:	2410      	movs	r4, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c71a:	2200      	movs	r2, #0
{
 800c71c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c71e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c720:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c722:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c72a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c72e:	f7ff ffc5 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c732:	f241 3288 	movw	r2, #5000	; 0x1388
 800c736:	4621      	mov	r1, r4
 800c738:	4628      	mov	r0, r5
 800c73a:	f7ff ff01 	bl	800c540 <SDMMC_GetCmdResp1>
}
 800c73e:	b007      	add	sp, #28
 800c740:	bd30      	pop	{r4, r5, pc}

0800c742 <SDMMC_CmdReadSingleBlock>:
{
 800c742:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c744:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c748:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c74a:	2411      	movs	r4, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c74c:	2200      	movs	r2, #0
{
 800c74e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c750:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c752:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c754:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c75c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c760:	f7ff ffac 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c764:	f241 3288 	movw	r2, #5000	; 0x1388
 800c768:	4621      	mov	r1, r4
 800c76a:	4628      	mov	r0, r5
 800c76c:	f7ff fee8 	bl	800c540 <SDMMC_GetCmdResp1>
}
 800c770:	b007      	add	sp, #28
 800c772:	bd30      	pop	{r4, r5, pc}

0800c774 <SDMMC_CmdReadMultiBlock>:
{
 800c774:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c776:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c77a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c77c:	2412      	movs	r4, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c77e:	2200      	movs	r2, #0
{
 800c780:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c782:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c784:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c786:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c78a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c78e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c792:	f7ff ff93 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c796:	f241 3288 	movw	r2, #5000	; 0x1388
 800c79a:	4621      	mov	r1, r4
 800c79c:	4628      	mov	r0, r5
 800c79e:	f7ff fecf 	bl	800c540 <SDMMC_GetCmdResp1>
}
 800c7a2:	b007      	add	sp, #28
 800c7a4:	bd30      	pop	{r4, r5, pc}

0800c7a6 <SDMMC_CmdWriteSingleBlock>:
{
 800c7a6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7a8:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c7ac:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7ae:	2418      	movs	r4, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7b0:	2200      	movs	r2, #0
{
 800c7b2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c7b4:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7b6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7b8:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7c4:	f7ff ff7a 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c7c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7cc:	4621      	mov	r1, r4
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	f7ff feb6 	bl	800c540 <SDMMC_GetCmdResp1>
}
 800c7d4:	b007      	add	sp, #28
 800c7d6:	bd30      	pop	{r4, r5, pc}

0800c7d8 <SDMMC_CmdWriteMultiBlock>:
{
 800c7d8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7da:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c7de:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7e0:	2419      	movs	r4, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7e2:	2200      	movs	r2, #0
{
 800c7e4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c7e6:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7e8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7ea:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7f6:	f7ff ff61 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c7fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7fe:	4621      	mov	r1, r4
 800c800:	4628      	mov	r0, r5
 800c802:	f7ff fe9d 	bl	800c540 <SDMMC_GetCmdResp1>
}
 800c806:	b007      	add	sp, #28
 800c808:	bd30      	pop	{r4, r5, pc}
	...

0800c80c <SDMMC_CmdStopTransfer>:
{
 800c80c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c80e:	2300      	movs	r3, #0
{
 800c810:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c812:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c814:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800c818:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c81a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c81c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c820:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c828:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c82a:	68c3      	ldr	r3, [r0, #12]
 800c82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c830:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c832:	68c3      	ldr	r3, [r0, #12]
 800c834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c838:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c83a:	f7ff ff3f 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c83e:	4a07      	ldr	r2, [pc, #28]	; (800c85c <SDMMC_CmdStopTransfer+0x50>)
 800c840:	4629      	mov	r1, r5
 800c842:	4620      	mov	r0, r4
 800c844:	f7ff fe7c 	bl	800c540 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c848:	68e3      	ldr	r3, [r4, #12]
}
 800c84a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800c84e:	bf08      	it	eq
 800c850:	2000      	moveq	r0, #0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c856:	60e3      	str	r3, [r4, #12]
}
 800c858:	b007      	add	sp, #28
 800c85a:	bd30      	pop	{r4, r5, pc}
 800c85c:	05f5e100 	.word	0x05f5e100

0800c860 <SDMMC_CmdSelDesel>:
{
 800c860:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c862:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c866:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c868:	2407      	movs	r4, #7
{
 800c86a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c86c:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c86e:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c870:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c872:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c87a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c87e:	f7ff ff1d 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c882:	f241 3288 	movw	r2, #5000	; 0x1388
 800c886:	4621      	mov	r1, r4
 800c888:	4628      	mov	r0, r5
 800c88a:	f7ff fe59 	bl	800c540 <SDMMC_GetCmdResp1>
}
 800c88e:	b007      	add	sp, #28
 800c890:	bd30      	pop	{r4, r5, pc}
	...

0800c894 <SDMMC_CmdGoIdleState>:
{
 800c894:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 800c896:	2300      	movs	r3, #0
{
 800c898:	b086      	sub	sp, #24
 800c89a:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c89c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c89e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8a2:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8aa:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8ac:	f7ff ff06 	bl	800c6bc <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8b0:	4b0b      	ldr	r3, [pc, #44]	; (800c8e0 <SDMMC_CmdGoIdleState+0x4c>)
 800c8b2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8bc:	f241 3388 	movw	r3, #5000	; 0x1388
 800c8c0:	4353      	muls	r3, r2
    if (count-- == 0U)
 800c8c2:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c8c6:	d307      	bcc.n	800c8d8 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c8c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c8ca:	0612      	lsls	r2, r2, #24
 800c8cc:	d5f9      	bpl.n	800c8c2 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8ce:	4b05      	ldr	r3, [pc, #20]	; (800c8e4 <SDMMC_CmdGoIdleState+0x50>)
  return SDMMC_ERROR_NONE;
 800c8d0:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8d2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c8d4:	b006      	add	sp, #24
 800c8d6:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800c8d8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800c8dc:	e7fa      	b.n	800c8d4 <SDMMC_CmdGoIdleState+0x40>
 800c8de:	bf00      	nop
 800c8e0:	24000000 	.word	0x24000000
 800c8e4:	002000c5 	.word	0x002000c5

0800c8e8 <SDMMC_CmdOperCond>:
{
 800c8e8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c8ea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
{
 800c8ee:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c8f0:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8f2:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 800c8f6:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c8f8:	e9cd 1301 	strd	r1, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8fc:	2300      	movs	r3, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8fe:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c900:	e9cd c303 	strd	ip, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c908:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c90a:	f7ff fed7 	bl	800c6bc <SDMMC_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c90e:	4b15      	ldr	r3, [pc, #84]	; (800c964 <SDMMC_CmdOperCond+0x7c>)
 800c910:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	fbb3 f2f2 	udiv	r2, r3, r2
 800c91a:	f241 3388 	movw	r3, #5000	; 0x1388
 800c91e:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 800c920:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c924:	d31a      	bcc.n	800c95c <SDMMC_CmdOperCond+0x74>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800c926:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c928:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c92c:	d0f8      	beq.n	800c920 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c92e:	0492      	lsls	r2, r2, #18
 800c930:	d4f6      	bmi.n	800c920 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c934:	075b      	lsls	r3, r3, #29
 800c936:	d503      	bpl.n	800c940 <SDMMC_CmdOperCond+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c938:	2004      	movs	r0, #4
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c93a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800c93c:	b006      	add	sp, #24
 800c93e:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c940:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c942:	f012 0201 	ands.w	r2, r2, #1
 800c946:	d001      	beq.n	800c94c <SDMMC_CmdOperCond+0x64>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c948:	2001      	movs	r0, #1
 800c94a:	e7f6      	b.n	800c93a <SDMMC_CmdOperCond+0x52>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c94c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c94e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800c952:	d0f3      	beq.n	800c93c <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c954:	2340      	movs	r3, #64	; 0x40
  }

  return SDMMC_ERROR_NONE;
 800c956:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c958:	63a3      	str	r3, [r4, #56]	; 0x38
 800c95a:	e7ef      	b.n	800c93c <SDMMC_CmdOperCond+0x54>
      return SDMMC_ERROR_TIMEOUT;
 800c95c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c960:	e7ec      	b.n	800c93c <SDMMC_CmdOperCond+0x54>
 800c962:	bf00      	nop
 800c964:	24000000 	.word	0x24000000

0800c968 <SDMMC_CmdAppCommand>:
{
 800c968:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c96a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c96e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c970:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c972:	2200      	movs	r2, #0
{
 800c974:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c976:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c978:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c97a:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c97e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c982:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c986:	f7ff fe99 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c98a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c98e:	4621      	mov	r1, r4
 800c990:	4628      	mov	r0, r5
 800c992:	f7ff fdd5 	bl	800c540 <SDMMC_GetCmdResp1>
}
 800c996:	b007      	add	sp, #28
 800c998:	bd30      	pop	{r4, r5, pc}

0800c99a <SDMMC_CmdAppOperCommand>:
{
 800c99a:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c99c:	2229      	movs	r2, #41	; 0x29
{
 800c99e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9a0:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c9a4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c9a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9a8:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9b2:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9b6:	a901      	add	r1, sp, #4
 800c9b8:	f7ff fe80 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f7ff fd9b 	bl	800c4f8 <SDMMC_GetCmdResp3>
}
 800c9c2:	b006      	add	sp, #24
 800c9c4:	bd10      	pop	{r4, pc}

0800c9c6 <SDMMC_CmdBusWidth>:
{
 800c9c6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9c8:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800c9cc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9ce:	2406      	movs	r4, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9d0:	2200      	movs	r2, #0
{
 800c9d2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c9d4:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9d6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9d8:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9e4:	f7ff fe6a 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c9e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ec:	4621      	mov	r1, r4
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	f7ff fda6 	bl	800c540 <SDMMC_GetCmdResp1>
}
 800c9f4:	b007      	add	sp, #28
 800c9f6:	bd30      	pop	{r4, r5, pc}

0800c9f8 <SDMMC_CmdSendSCR>:
{
 800c9f8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c9fa:	2300      	movs	r3, #0
{
 800c9fc:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c9fe:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca00:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800ca04:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca06:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca08:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ca0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca14:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca16:	f7ff fe51 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ca1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca1e:	4621      	mov	r1, r4
 800ca20:	4628      	mov	r0, r5
 800ca22:	f7ff fd8d 	bl	800c540 <SDMMC_GetCmdResp1>
}
 800ca26:	b007      	add	sp, #28
 800ca28:	bd30      	pop	{r4, r5, pc}

0800ca2a <SDMMC_CmdSendCID>:
{
 800ca2a:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ca2c:	2300      	movs	r3, #0
{
 800ca2e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ca30:	2202      	movs	r2, #2
{
 800ca32:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca34:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ca36:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ca3a:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca3e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca46:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca48:	f7ff fe38 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f7ff fd29 	bl	800c4a4 <SDMMC_GetCmdResp2>
}
 800ca52:	b006      	add	sp, #24
 800ca54:	bd10      	pop	{r4, pc}

0800ca56 <SDMMC_CmdSendCSD>:
{
 800ca56:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ca58:	2209      	movs	r2, #9
{
 800ca5a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ca5c:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800ca60:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800ca62:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca64:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ca66:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca6e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca72:	a901      	add	r1, sp, #4
 800ca74:	f7ff fe22 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f7ff fd13 	bl	800c4a4 <SDMMC_GetCmdResp2>
}
 800ca7e:	b006      	add	sp, #24
 800ca80:	bd10      	pop	{r4, pc}
	...

0800ca84 <SDMMC_CmdSetRelAdd>:
{
 800ca84:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ca86:	2300      	movs	r3, #0
{
 800ca88:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ca8a:	2203      	movs	r2, #3
{
 800ca8c:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca8e:	a901      	add	r1, sp, #4
{
 800ca90:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ca92:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca96:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca9a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800caa2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caa4:	f7ff fe0a 	bl	800c6bc <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800caa8:	4b1e      	ldr	r3, [pc, #120]	; (800cb24 <SDMMC_CmdSetRelAdd+0xa0>)
 800caaa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	fbb3 f2f2 	udiv	r2, r3, r2
 800cab4:	f241 3388 	movw	r3, #5000	; 0x1388
 800cab8:	4353      	muls	r3, r2
    if (count-- == 0U)
 800caba:	f113 33ff 	adds.w	r3, r3, #4294967295
 800cabe:	d328      	bcc.n	800cb12 <SDMMC_CmdSetRelAdd+0x8e>
    sta_reg = SDMMCx->STA;
 800cac0:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cac2:	f012 0f45 	tst.w	r2, #69	; 0x45
 800cac6:	d0f8      	beq.n	800caba <SDMMC_CmdSetRelAdd+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cac8:	0492      	lsls	r2, r2, #18
 800caca:	d4f6      	bmi.n	800caba <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cacc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cace:	0758      	lsls	r0, r3, #29
 800cad0:	d503      	bpl.n	800cada <SDMMC_CmdSetRelAdd+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cad2:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cad4:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800cad6:	b007      	add	sp, #28
 800cad8:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cada:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cadc:	07d9      	lsls	r1, r3, #31
 800cade:	d501      	bpl.n	800cae4 <SDMMC_CmdSetRelAdd+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cae0:	2001      	movs	r0, #1
 800cae2:	e7f7      	b.n	800cad4 <SDMMC_CmdSetRelAdd+0x50>
  return (uint8_t)(SDMMCx->RESPCMD);
 800cae4:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	2b03      	cmp	r3, #3
 800caea:	d115      	bne.n	800cb18 <SDMMC_CmdSetRelAdd+0x94>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800caec:	4b0e      	ldr	r3, [pc, #56]	; (800cb28 <SDMMC_CmdSetRelAdd+0xa4>)
 800caee:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800caf0:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800caf2:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800caf6:	d102      	bne.n	800cafe <SDMMC_CmdSetRelAdd+0x7a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800caf8:	0c1b      	lsrs	r3, r3, #16
 800cafa:	802b      	strh	r3, [r5, #0]
 800cafc:	e7eb      	b.n	800cad6 <SDMMC_CmdSetRelAdd+0x52>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cafe:	045a      	lsls	r2, r3, #17
 800cb00:	d40c      	bmi.n	800cb1c <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb02:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800cb06:	bf0c      	ite	eq
 800cb08:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800cb0c:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800cb10:	e7e1      	b.n	800cad6 <SDMMC_CmdSetRelAdd+0x52>
      return SDMMC_ERROR_TIMEOUT;
 800cb12:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800cb16:	e7de      	b.n	800cad6 <SDMMC_CmdSetRelAdd+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb18:	2001      	movs	r0, #1
 800cb1a:	e7dc      	b.n	800cad6 <SDMMC_CmdSetRelAdd+0x52>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800cb20:	e7d9      	b.n	800cad6 <SDMMC_CmdSetRelAdd+0x52>
 800cb22:	bf00      	nop
 800cb24:	24000000 	.word	0x24000000
 800cb28:	002000c5 	.word	0x002000c5

0800cb2c <SDMMC_CmdSendStatus>:
{
 800cb2c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb2e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800cb32:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb34:	240d      	movs	r4, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb36:	2200      	movs	r2, #0
{
 800cb38:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 800cb3a:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb3c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb3e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb46:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb4a:	f7ff fdb7 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cb4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb52:	4621      	mov	r1, r4
 800cb54:	4628      	mov	r0, r5
 800cb56:	f7ff fcf3 	bl	800c540 <SDMMC_GetCmdResp1>
}
 800cb5a:	b007      	add	sp, #28
 800cb5c:	bd30      	pop	{r4, r5, pc}

0800cb5e <SDMMC_CmdStatusRegister>:
{
 800cb5e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cb60:	2300      	movs	r3, #0
{
 800cb62:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cb64:	240d      	movs	r4, #13
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb66:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800cb6a:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb6c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb6e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cb72:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb7a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb7c:	f7ff fd9e 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800cb80:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb84:	4621      	mov	r1, r4
 800cb86:	4628      	mov	r0, r5
 800cb88:	f7ff fcda 	bl	800c540 <SDMMC_GetCmdResp1>
}
 800cb8c:	b007      	add	sp, #28
 800cb8e:	bd30      	pop	{r4, r5, pc}

0800cb90 <SDMMC_CmdVoltageSwitch>:
{
 800cb90:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800cb92:	2300      	movs	r3, #0
{
 800cb94:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800cb96:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb98:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 800cb9c:	4605      	mov	r5, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb9e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cba0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800cba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbac:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbae:	f7ff fd85 	bl	800c6bc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800cbb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbb6:	4621      	mov	r1, r4
 800cbb8:	4628      	mov	r0, r5
 800cbba:	f7ff fcc1 	bl	800c540 <SDMMC_GetCmdResp1>
}
 800cbbe:	b007      	add	sp, #28
 800cbc0:	bd30      	pop	{r4, r5, pc}
	...

0800cbc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cbc4:	4b0a      	ldr	r3, [pc, #40]	; (800cbf0 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	d00f      	beq.n	800cbea <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cbca:	6902      	ldr	r2, [r0, #16]
 800cbcc:	2a00      	cmp	r2, #0
 800cbce:	dafa      	bge.n	800cbc6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cbd0:	6903      	ldr	r3, [r0, #16]
 800cbd2:	4a07      	ldr	r2, [pc, #28]	; (800cbf0 <USB_CoreReset+0x2c>)
 800cbd4:	f043 0301 	orr.w	r3, r3, #1
 800cbd8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800cbda:	3a01      	subs	r2, #1
 800cbdc:	d005      	beq.n	800cbea <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cbde:	6903      	ldr	r3, [r0, #16]
 800cbe0:	f013 0301 	ands.w	r3, r3, #1
 800cbe4:	d1f9      	bne.n	800cbda <USB_CoreReset+0x16>

  return HAL_OK;
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	4770      	bx	lr
      return HAL_TIMEOUT;
 800cbea:	2003      	movs	r0, #3
}
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	00030d41 	.word	0x00030d41

0800cbf4 <USB_CoreInit>:
{
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	b538      	push	{r3, r4, r5, lr}
 800cbf8:	ad05      	add	r5, sp, #20
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d126      	bne.n	800cc54 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc06:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cc08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc0c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cc0e:	68c3      	ldr	r3, [r0, #12]
 800cc10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cc14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc18:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cc1a:	68c3      	ldr	r3, [r0, #12]
 800cc1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cc20:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800cc22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d103      	bne.n	800cc30 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cc28:	68c3      	ldr	r3, [r0, #12]
 800cc2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc2e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800cc30:	4620      	mov	r0, r4
 800cc32:	f7ff ffc7 	bl	800cbc4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800cc36:	9b08      	ldr	r3, [sp, #32]
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d107      	bne.n	800cc4c <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cc3c:	68a3      	ldr	r3, [r4, #8]
 800cc3e:	f043 0306 	orr.w	r3, r3, #6
 800cc42:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cc44:	68a3      	ldr	r3, [r4, #8]
 800cc46:	f043 0320 	orr.w	r3, r3, #32
 800cc4a:	60a3      	str	r3, [r4, #8]
}
 800cc4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc50:	b004      	add	sp, #16
 800cc52:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cc54:	68c3      	ldr	r3, [r0, #12]
 800cc56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc5a:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800cc5c:	f7ff ffb2 	bl	800cbc4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800cc60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc62:	b923      	cbnz	r3, 800cc6e <USB_CoreInit+0x7a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cc64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cc66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc6a:	63a3      	str	r3, [r4, #56]	; 0x38
 800cc6c:	e7e3      	b.n	800cc36 <USB_CoreInit+0x42>
 800cc6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cc70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc74:	e7f9      	b.n	800cc6a <USB_CoreInit+0x76>
	...

0800cc78 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800cc78:	2a02      	cmp	r2, #2
 800cc7a:	d158      	bne.n	800cd2e <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cc7c:	4b2e      	ldr	r3, [pc, #184]	; (800cd38 <USB_SetTurnaroundTime+0xc0>)
 800cc7e:	4a2f      	ldr	r2, [pc, #188]	; (800cd3c <USB_SetTurnaroundTime+0xc4>)
 800cc80:	440b      	add	r3, r1
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d947      	bls.n	800cd16 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cc86:	4b2e      	ldr	r3, [pc, #184]	; (800cd40 <USB_SetTurnaroundTime+0xc8>)
 800cc88:	4a2e      	ldr	r2, [pc, #184]	; (800cd44 <USB_SetTurnaroundTime+0xcc>)
 800cc8a:	440b      	add	r3, r1
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d944      	bls.n	800cd1a <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cc90:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800cc94:	4a2c      	ldr	r2, [pc, #176]	; (800cd48 <USB_SetTurnaroundTime+0xd0>)
 800cc96:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d93f      	bls.n	800cd1e <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cc9e:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800cca2:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 800cca6:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800ccaa:	32a0      	adds	r2, #160	; 0xa0
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d938      	bls.n	800cd22 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ccb0:	4b26      	ldr	r3, [pc, #152]	; (800cd4c <USB_SetTurnaroundTime+0xd4>)
 800ccb2:	4a27      	ldr	r2, [pc, #156]	; (800cd50 <USB_SetTurnaroundTime+0xd8>)
 800ccb4:	440b      	add	r3, r1
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d935      	bls.n	800cd26 <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ccba:	4b26      	ldr	r3, [pc, #152]	; (800cd54 <USB_SetTurnaroundTime+0xdc>)
 800ccbc:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 800ccc0:	440b      	add	r3, r1
 800ccc2:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d92f      	bls.n	800cd2a <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ccca:	4b23      	ldr	r3, [pc, #140]	; (800cd58 <USB_SetTurnaroundTime+0xe0>)
 800cccc:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 800ccd0:	440b      	add	r3, r1
 800ccd2:	f502 7220 	add.w	r2, r2, #640	; 0x280
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d929      	bls.n	800cd2e <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ccda:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800ccde:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 800cce2:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800cce6:	f502 7258 	add.w	r2, r2, #864	; 0x360
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d921      	bls.n	800cd32 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ccee:	4b1b      	ldr	r3, [pc, #108]	; (800cd5c <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 800ccf0:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ccf4:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 800ccf6:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	bf94      	ite	ls
 800ccfe:	2307      	movls	r3, #7
 800cd00:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cd02:	68c2      	ldr	r2, [r0, #12]
 800cd04:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800cd08:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cd0a:	68c2      	ldr	r2, [r0, #12]
 800cd0c:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 800cd10:	60c3      	str	r3, [r0, #12]
}
 800cd12:	2000      	movs	r0, #0
 800cd14:	4770      	bx	lr
      UsbTrd = 0xFU;
 800cd16:	230f      	movs	r3, #15
 800cd18:	e7f3      	b.n	800cd02 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 800cd1a:	230e      	movs	r3, #14
 800cd1c:	e7f1      	b.n	800cd02 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 800cd1e:	230d      	movs	r3, #13
 800cd20:	e7ef      	b.n	800cd02 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 800cd22:	230c      	movs	r3, #12
 800cd24:	e7ed      	b.n	800cd02 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 800cd26:	230b      	movs	r3, #11
 800cd28:	e7eb      	b.n	800cd02 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 800cd2a:	230a      	movs	r3, #10
 800cd2c:	e7e9      	b.n	800cd02 <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cd2e:	2309      	movs	r3, #9
 800cd30:	e7e7      	b.n	800cd02 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 800cd32:	2308      	movs	r3, #8
 800cd34:	e7e5      	b.n	800cd02 <USB_SetTurnaroundTime+0x8a>
 800cd36:	bf00      	nop
 800cd38:	ff275340 	.word	0xff275340
 800cd3c:	000c34ff 	.word	0x000c34ff
 800cd40:	ff1b1e40 	.word	0xff1b1e40
 800cd44:	000f423f 	.word	0x000f423f
 800cd48:	00124f7f 	.word	0x00124f7f
 800cd4c:	fee5b660 	.word	0xfee5b660
 800cd50:	0016e35f 	.word	0x0016e35f
 800cd54:	feced300 	.word	0xfeced300
 800cd58:	feb35bc0 	.word	0xfeb35bc0
 800cd5c:	fe5954e0 	.word	0xfe5954e0

0800cd60 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cd60:	6883      	ldr	r3, [r0, #8]
 800cd62:	f043 0301 	orr.w	r3, r3, #1
 800cd66:	6083      	str	r3, [r0, #8]
}
 800cd68:	2000      	movs	r0, #0
 800cd6a:	4770      	bx	lr

0800cd6c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cd6c:	6883      	ldr	r3, [r0, #8]
 800cd6e:	f023 0301 	bic.w	r3, r3, #1
 800cd72:	6083      	str	r3, [r0, #8]
}
 800cd74:	2000      	movs	r0, #0
 800cd76:	4770      	bx	lr

0800cd78 <USB_SetCurrentMode>:
{
 800cd78:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cd7a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800cd7c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cd7e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cd82:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800cd84:	d108      	bne.n	800cd98 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cd86:	68c3      	ldr	r3, [r0, #12]
 800cd88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cd8c:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800cd8e:	2032      	movs	r0, #50	; 0x32
 800cd90:	f7f8 fa6a 	bl	8005268 <HAL_Delay>
  return HAL_OK;
 800cd94:	2000      	movs	r0, #0
}
 800cd96:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800cd98:	b919      	cbnz	r1, 800cda2 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cd9a:	68c3      	ldr	r3, [r0, #12]
 800cd9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cda0:	e7f4      	b.n	800cd8c <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800cda2:	2001      	movs	r0, #1
 800cda4:	e7f7      	b.n	800cd96 <USB_SetCurrentMode+0x1e>
	...

0800cda8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cda8:	0189      	lsls	r1, r1, #6
 800cdaa:	4a07      	ldr	r2, [pc, #28]	; (800cdc8 <USB_FlushTxFifo+0x20>)
 800cdac:	f041 0120 	orr.w	r1, r1, #32
 800cdb0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800cdb2:	3a01      	subs	r2, #1
 800cdb4:	d005      	beq.n	800cdc2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cdb6:	6903      	ldr	r3, [r0, #16]
 800cdb8:	f013 0320 	ands.w	r3, r3, #32
 800cdbc:	d1f9      	bne.n	800cdb2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	4770      	bx	lr
      return HAL_TIMEOUT;
 800cdc2:	2003      	movs	r0, #3
}
 800cdc4:	4770      	bx	lr
 800cdc6:	bf00      	nop
 800cdc8:	00030d41 	.word	0x00030d41

0800cdcc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cdcc:	2310      	movs	r3, #16
 800cdce:	4a06      	ldr	r2, [pc, #24]	; (800cde8 <USB_FlushRxFifo+0x1c>)
 800cdd0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800cdd2:	3a01      	subs	r2, #1
 800cdd4:	d005      	beq.n	800cde2 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cdd6:	6903      	ldr	r3, [r0, #16]
 800cdd8:	f013 0310 	ands.w	r3, r3, #16
 800cddc:	d1f9      	bne.n	800cdd2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800cdde:	4618      	mov	r0, r3
 800cde0:	4770      	bx	lr
      return HAL_TIMEOUT;
 800cde2:	2003      	movs	r0, #3
}
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	00030d41 	.word	0x00030d41

0800cdec <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800cdec:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800cdf0:	4319      	orrs	r1, r3
 800cdf2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	4770      	bx	lr
	...

0800cdfc <USB_DevInit>:
{
 800cdfc:	b084      	sub	sp, #16
 800cdfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce02:	4604      	mov	r4, r0
 800ce04:	a809      	add	r0, sp, #36	; 0x24
 800ce06:	460f      	mov	r7, r1
 800ce08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 800ce10:	4619      	mov	r1, r3
 800ce12:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800ce16:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 800ce18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800ce1c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800ce1e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800ce20:	d1f7      	bne.n	800ce12 <USB_DevInit+0x16>
 800ce22:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 800ce26:	2d00      	cmp	r5, #0
 800ce28:	d16c      	bne.n	800cf04 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce2a:	6873      	ldr	r3, [r6, #4]
 800ce2c:	f043 0302 	orr.w	r3, r3, #2
 800ce30:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ce32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce38:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ce3a:	6823      	ldr	r3, [r4, #0]
 800ce3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce40:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce48:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ce50:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800ce54:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ce58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d159      	bne.n	800cf12 <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 800ce5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce60:	2900      	cmp	r1, #0
 800ce62:	d154      	bne.n	800cf0e <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ce64:	4620      	mov	r0, r4
 800ce66:	f7ff ffc1 	bl	800cdec <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ce6a:	2110      	movs	r1, #16
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f7ff ff9b 	bl	800cda8 <USB_FlushTxFifo>
 800ce72:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ce74:	4620      	mov	r0, r4
 800ce76:	f7ff ffa9 	bl	800cdcc <USB_FlushRxFifo>
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	d14b      	bne.n	800cf16 <USB_DevInit+0x11a>
  HAL_StatusTypeDef ret = HAL_OK;
 800ce7e:	1c08      	adds	r0, r1, #0
 800ce80:	bf18      	it	ne
 800ce82:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800ce84:	2300      	movs	r3, #0
 800ce86:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ce8a:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ce8e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800ce92:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ce94:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 800ce98:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ce9a:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ce9c:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce9e:	42bb      	cmp	r3, r7
 800cea0:	d13b      	bne.n	800cf1a <USB_DevInit+0x11e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cea2:	2100      	movs	r1, #0
 800cea4:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cea8:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ceac:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ceb0:	460f      	mov	r7, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ceb2:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ceb6:	428b      	cmp	r3, r1
 800ceb8:	d142      	bne.n	800cf40 <USB_DevInit+0x144>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ceba:	6933      	ldr	r3, [r6, #16]
 800cebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cec0:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800cec2:	2300      	movs	r3, #0
 800cec4:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cec6:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800ceca:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800cecc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cece:	b91b      	cbnz	r3, 800ced8 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ced0:	69a3      	ldr	r3, [r4, #24]
 800ced2:	f043 0310 	orr.w	r3, r3, #16
 800ced6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ced8:	69a2      	ldr	r2, [r4, #24]
 800ceda:	4b23      	ldr	r3, [pc, #140]	; (800cf68 <USB_DevInit+0x16c>)
 800cedc:	4313      	orrs	r3, r2
 800cede:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800cee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cee2:	b11b      	cbz	r3, 800ceec <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cee4:	69a3      	ldr	r3, [r4, #24]
 800cee6:	f043 0308 	orr.w	r3, r3, #8
 800ceea:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800ceec:	2d01      	cmp	r5, #1
 800ceee:	d105      	bne.n	800cefc <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cef0:	69a3      	ldr	r3, [r4, #24]
 800cef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cef6:	f043 0304 	orr.w	r3, r3, #4
 800cefa:	61a3      	str	r3, [r4, #24]
}
 800cefc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf00:	b004      	add	sp, #16
 800cf02:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cf04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cf06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf0a:	63a3      	str	r3, [r4, #56]	; 0x38
 800cf0c:	e79d      	b.n	800ce4a <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cf0e:	4619      	mov	r1, r3
 800cf10:	e7a8      	b.n	800ce64 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cf12:	2103      	movs	r1, #3
 800cf14:	e7a6      	b.n	800ce64 <USB_DevInit+0x68>
    ret = HAL_ERROR;
 800cf16:	2001      	movs	r0, #1
 800cf18:	e7b4      	b.n	800ce84 <USB_DevInit+0x88>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cf1a:	f8d2 9000 	ldr.w	r9, [r2]
 800cf1e:	f1b9 0f00 	cmp.w	r9, #0
 800cf22:	da0b      	bge.n	800cf3c <USB_DevInit+0x140>
      if (i == 0U)
 800cf24:	b93b      	cbnz	r3, 800cf36 <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cf26:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cf2a:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf2c:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cf2e:	f8c2 8008 	str.w	r8, [r2, #8]
 800cf32:	3220      	adds	r2, #32
 800cf34:	e7b3      	b.n	800ce9e <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cf36:	f8c2 c000 	str.w	ip, [r2]
 800cf3a:	e7f6      	b.n	800cf2a <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800cf3c:	6011      	str	r1, [r2, #0]
 800cf3e:	e7f4      	b.n	800cf2a <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cf40:	f8d2 9000 	ldr.w	r9, [r2]
 800cf44:	f1b9 0f00 	cmp.w	r9, #0
 800cf48:	da0b      	bge.n	800cf62 <USB_DevInit+0x166>
      if (i == 0U)
 800cf4a:	b939      	cbnz	r1, 800cf5c <USB_DevInit+0x160>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cf4c:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cf50:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf52:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cf54:	f8c2 8008 	str.w	r8, [r2, #8]
 800cf58:	3220      	adds	r2, #32
 800cf5a:	e7ac      	b.n	800ceb6 <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cf5c:	f8c2 c000 	str.w	ip, [r2]
 800cf60:	e7f6      	b.n	800cf50 <USB_DevInit+0x154>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cf62:	6017      	str	r7, [r2, #0]
 800cf64:	e7f4      	b.n	800cf50 <USB_DevInit+0x154>
 800cf66:	bf00      	nop
 800cf68:	803c3800 	.word	0x803c3800

0800cf6c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cf6c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cf70:	f013 0006 	ands.w	r0, r3, #6
 800cf74:	d004      	beq.n	800cf80 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cf76:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800cf7a:	bf14      	ite	ne
 800cf7c:	2002      	movne	r0, #2
 800cf7e:	200f      	moveq	r0, #15
}
 800cf80:	4770      	bx	lr

0800cf82 <USB_ActivateEndpoint>:
{
 800cf82:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800cf84:	780d      	ldrb	r5, [r1, #0]
 800cf86:	2401      	movs	r4, #1
 800cf88:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800cf8c:	f005 030f 	and.w	r3, r5, #15
 800cf90:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 800cf94:	409c      	lsls	r4, r3
  if (ep->is_in == 1U)
 800cf96:	784b      	ldrb	r3, [r1, #1]
 800cf98:	2b01      	cmp	r3, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cf9a:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 800cf9c:	d118      	bne.n	800cfd0 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cf9e:	431c      	orrs	r4, r3
 800cfa0:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cfa2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800cfa6:	041a      	lsls	r2, r3, #16
 800cfa8:	d410      	bmi.n	800cfcc <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cfaa:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cfac:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cfae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cfb2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800cfb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfbe:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800cfc2:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800cfcc:	2000      	movs	r0, #0
 800cfce:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cfd0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800cfd4:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cfd6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800cfda:	041b      	lsls	r3, r3, #16
 800cfdc:	d4f6      	bmi.n	800cfcc <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cfde:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 800cfe0:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cfe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cfe6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800cfea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cff2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800cff6:	4313      	orrs	r3, r2
 800cff8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800cffc:	e7e6      	b.n	800cfcc <USB_ActivateEndpoint+0x4a>
	...

0800d000 <USB_DeactivateEndpoint>:
{
 800d000:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800d002:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800d004:	7849      	ldrb	r1, [r1, #1]
 800d006:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 800d00a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800d00e:	2901      	cmp	r1, #1
 800d010:	f002 010f 	and.w	r1, r2, #15
 800d014:	d120      	bne.n	800d058 <USB_DeactivateEndpoint+0x58>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d016:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800d01a:	2a00      	cmp	r2, #0
 800d01c:	da0b      	bge.n	800d036 <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d01e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800d022:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d026:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d02a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800d02e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d032:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d036:	2201      	movs	r2, #1
 800d038:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d03a:	408a      	lsls	r2, r1
 800d03c:	43d2      	mvns	r2, r2
 800d03e:	4014      	ands	r4, r2
 800d040:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d042:	69c1      	ldr	r1, [r0, #28]
 800d044:	400a      	ands	r2, r1
 800d046:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d048:	4a14      	ldr	r2, [pc, #80]	; (800d09c <USB_DeactivateEndpoint+0x9c>)
 800d04a:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800d04e:	400a      	ands	r2, r1
 800d050:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 800d054:	2000      	movs	r0, #0
 800d056:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d058:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d05c:	2a00      	cmp	r2, #0
 800d05e:	da0b      	bge.n	800d078 <USB_DeactivateEndpoint+0x78>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d060:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d064:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d068:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d06c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800d070:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d074:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d07c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d07e:	408a      	lsls	r2, r1
 800d080:	43d2      	mvns	r2, r2
 800d082:	4014      	ands	r4, r2
 800d084:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d086:	69c1      	ldr	r1, [r0, #28]
 800d088:	400a      	ands	r2, r1
 800d08a:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d08c:	4a04      	ldr	r2, [pc, #16]	; (800d0a0 <USB_DeactivateEndpoint+0xa0>)
 800d08e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800d092:	400a      	ands	r2, r1
 800d094:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800d098:	e7dc      	b.n	800d054 <USB_DeactivateEndpoint+0x54>
 800d09a:	bf00      	nop
 800d09c:	ec337800 	.word	0xec337800
 800d0a0:	eff37800 	.word	0xeff37800

0800d0a4 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800d0a4:	784b      	ldrb	r3, [r1, #1]
{
 800d0a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	780c      	ldrb	r4, [r1, #0]
 800d0ac:	694d      	ldr	r5, [r1, #20]
 800d0ae:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800d0b2:	4e34      	ldr	r6, [pc, #208]	; (800d184 <USB_EP0StartXfer+0xe0>)
 800d0b4:	4f34      	ldr	r7, [pc, #208]	; (800d188 <USB_EP0StartXfer+0xe4>)
 800d0b6:	d144      	bne.n	800d142 <USB_EP0StartXfer+0x9e>
 800d0b8:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800d0bc:	b9b5      	cbnz	r5, 800d0ec <USB_EP0StartXfer+0x48>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d0be:	691d      	ldr	r5, [r3, #16]
 800d0c0:	402e      	ands	r6, r5
 800d0c2:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d0c4:	691d      	ldr	r5, [r3, #16]
 800d0c6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800d0ca:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d0cc:	691d      	ldr	r5, [r3, #16]
 800d0ce:	402f      	ands	r7, r5
 800d0d0:	611f      	str	r7, [r3, #16]
    if (dma == 1U)
 800d0d2:	2a01      	cmp	r2, #1
 800d0d4:	d121      	bne.n	800d11a <USB_EP0StartXfer+0x76>
      if ((uint32_t)ep->dma_addr != 0U)
 800d0d6:	690a      	ldr	r2, [r1, #16]
 800d0d8:	b102      	cbz	r2, 800d0dc <USB_EP0StartXfer+0x38>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d0da:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d0dc:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d0e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d0e4:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d0ec:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800d0f0:	ea0c 0707 	and.w	r7, ip, r7
 800d0f4:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d0f6:	691f      	ldr	r7, [r3, #16]
 800d0f8:	403e      	ands	r6, r7
 800d0fa:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800d0fc:	688e      	ldr	r6, [r1, #8]
 800d0fe:	42ae      	cmp	r6, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d100:	691d      	ldr	r5, [r3, #16]
 800d102:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 800d106:	bf38      	it	cc
 800d108:	614e      	strcc	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d10a:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d10c:	694d      	ldr	r5, [r1, #20]
 800d10e:	691e      	ldr	r6, [r3, #16]
 800d110:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800d114:	4335      	orrs	r5, r6
 800d116:	611d      	str	r5, [r3, #16]
 800d118:	e7db      	b.n	800d0d2 <USB_EP0StartXfer+0x2e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d11a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d11e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d122:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800d126:	694b      	ldr	r3, [r1, #20]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d0dd      	beq.n	800d0e8 <USB_EP0StartXfer+0x44>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d12c:	780b      	ldrb	r3, [r1, #0]
 800d12e:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800d132:	f003 020f 	and.w	r2, r3, #15
 800d136:	2301      	movs	r3, #1
 800d138:	4093      	lsls	r3, r2
 800d13a:	4323      	orrs	r3, r4
 800d13c:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800d140:	e7d2      	b.n	800d0e8 <USB_EP0StartXfer+0x44>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d142:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800d146:	6918      	ldr	r0, [r3, #16]
 800d148:	4038      	ands	r0, r7
 800d14a:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d14c:	6918      	ldr	r0, [r3, #16]
 800d14e:	4030      	ands	r0, r6
 800d150:	6118      	str	r0, [r3, #16]
 800d152:	6888      	ldr	r0, [r1, #8]
    if (ep->xfer_len > 0U)
 800d154:	b105      	cbz	r5, 800d158 <USB_EP0StartXfer+0xb4>
      ep->xfer_len = ep->maxpacket;
 800d156:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d158:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d15a:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 800d15e:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d160:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800d164:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d166:	691d      	ldr	r5, [r3, #16]
 800d168:	ea40 0005 	orr.w	r0, r0, r5
 800d16c:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800d16e:	d102      	bne.n	800d176 <USB_EP0StartXfer+0xd2>
      if ((uint32_t)ep->xfer_buff != 0U)
 800d170:	68ca      	ldr	r2, [r1, #12]
 800d172:	b102      	cbz	r2, 800d176 <USB_EP0StartXfer+0xd2>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d174:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d176:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800d17a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d17e:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800d182:	e7b1      	b.n	800d0e8 <USB_EP0StartXfer+0x44>
 800d184:	e007ffff 	.word	0xe007ffff
 800d188:	fff80000 	.word	0xfff80000

0800d18c <USB_WritePacket>:
{
 800d18c:	b510      	push	{r4, lr}
 800d18e:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800d192:	b94c      	cbnz	r4, 800d1a8 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800d194:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d196:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    count32b = ((uint32_t)len + 3U) / 4U;
 800d19a:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d19c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800d1a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 800d1a4:	4299      	cmp	r1, r3
 800d1a6:	d101      	bne.n	800d1ac <USB_WritePacket+0x20>
}
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d1ac:	f851 2b04 	ldr.w	r2, [r1], #4
 800d1b0:	6002      	str	r2, [r0, #0]
 800d1b2:	e7f7      	b.n	800d1a4 <USB_WritePacket+0x18>

0800d1b4 <USB_EPStartXfer>:
{
 800d1b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800d1b6:	784d      	ldrb	r5, [r1, #1]
 800d1b8:	780c      	ldrb	r4, [r1, #0]
 800d1ba:	2d01      	cmp	r5, #1
 800d1bc:	694b      	ldr	r3, [r1, #20]
 800d1be:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800d1c2:	78ce      	ldrb	r6, [r1, #3]
 800d1c4:	f8df c194 	ldr.w	ip, [pc, #404]	; 800d35c <USB_EPStartXfer+0x1a8>
 800d1c8:	f8df e194 	ldr.w	lr, [pc, #404]	; 800d360 <USB_EPStartXfer+0x1ac>
 800d1cc:	d17d      	bne.n	800d2ca <USB_EPStartXfer+0x116>
 800d1ce:	f504 6510 	add.w	r5, r4, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1d2:	692f      	ldr	r7, [r5, #16]
    if (ep->xfer_len == 0U)
 800d1d4:	bb3b      	cbnz	r3, 800d226 <USB_EPStartXfer+0x72>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1d6:	ea07 070c 	and.w	r7, r7, ip
 800d1da:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d1dc:	692f      	ldr	r7, [r5, #16]
 800d1de:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800d1e2:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1e4:	692f      	ldr	r7, [r5, #16]
 800d1e6:	ea07 070e 	and.w	r7, r7, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d1ea:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 800d1ec:	2a01      	cmp	r2, #1
 800d1ee:	d142      	bne.n	800d276 <USB_EPStartXfer+0xc2>
      if ((uint32_t)ep->dma_addr != 0U)
 800d1f0:	690b      	ldr	r3, [r1, #16]
 800d1f2:	b103      	cbz	r3, 800d1f6 <USB_EPStartXfer+0x42>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d1f4:	616b      	str	r3, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 800d1f6:	2e01      	cmp	r6, #1
 800d1f8:	d10c      	bne.n	800d214 <USB_EPStartXfer+0x60>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1fa:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d1fe:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d202:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d206:	bf0c      	ite	eq
 800d208:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d20c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d210:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d214:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d218:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d21c:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800d220:	2000      	movs	r0, #0
 800d222:	b003      	add	sp, #12
 800d224:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d226:	ea07 070e 	and.w	r7, r7, lr
      if (ep->type == EP_TYPE_ISOC)
 800d22a:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d22c:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d22e:	692f      	ldr	r7, [r5, #16]
 800d230:	ea07 070c 	and.w	r7, r7, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d234:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d238:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d23a:	eb0c 0703 	add.w	r7, ip, r3
 800d23e:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800d242:	f107 37ff 	add.w	r7, r7, #4294967295
 800d246:	fbb7 fcfc 	udiv	ip, r7, ip
 800d24a:	4f43      	ldr	r7, [pc, #268]	; (800d358 <USB_EPStartXfer+0x1a4>)
 800d24c:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 800d250:	ea47 070e 	orr.w	r7, r7, lr
 800d254:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d256:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800d25a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800d25e:	ea47 070c 	orr.w	r7, r7, ip
 800d262:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800d264:	d1c2      	bne.n	800d1ec <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d266:	692f      	ldr	r7, [r5, #16]
 800d268:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 800d26c:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d26e:	692f      	ldr	r7, [r5, #16]
 800d270:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800d274:	e7b9      	b.n	800d1ea <USB_EPStartXfer+0x36>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d276:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800d27a:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d27c:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800d280:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800d284:	d00c      	beq.n	800d2a0 <USB_EPStartXfer+0xec>
        if (ep->xfer_len > 0U)
 800d286:	2b00      	cmp	r3, #0
 800d288:	d0ca      	beq.n	800d220 <USB_EPStartXfer+0x6c>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d28a:	780b      	ldrb	r3, [r1, #0]
 800d28c:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800d290:	f003 020f 	and.w	r2, r3, #15
 800d294:	2301      	movs	r3, #1
 800d296:	4093      	lsls	r3, r2
 800d298:	4323      	orrs	r3, r4
 800d29a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800d29e:	e7bf      	b.n	800d220 <USB_EPStartXfer+0x6c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d2a0:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d2a4:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d2a6:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d2aa:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 800d2ae:	bf0c      	ite	eq
 800d2b0:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d2b4:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800d2b8:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d2bc:	780c      	ldrb	r4, [r1, #0]
 800d2be:	9200      	str	r2, [sp, #0]
 800d2c0:	4622      	mov	r2, r4
 800d2c2:	68c9      	ldr	r1, [r1, #12]
 800d2c4:	f7ff ff62 	bl	800d18c <USB_WritePacket>
 800d2c8:	e7aa      	b.n	800d220 <USB_EPStartXfer+0x6c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d2ca:	f504 6730 	add.w	r7, r4, #2816	; 0xb00
 800d2ce:	693d      	ldr	r5, [r7, #16]
 800d2d0:	ea05 050e 	and.w	r5, r5, lr
 800d2d4:	613d      	str	r5, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d2d6:	693d      	ldr	r5, [r7, #16]
 800d2d8:	ea05 050c 	and.w	r5, r5, ip
 800d2dc:	613d      	str	r5, [r7, #16]
 800d2de:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 800d2e0:	bb1b      	cbnz	r3, 800d32a <USB_EPStartXfer+0x176>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800d2e8:	431d      	orrs	r5, r3
 800d2ea:	613d      	str	r5, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 800d2f2:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d2f4:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 800d2f6:	d102      	bne.n	800d2fe <USB_EPStartXfer+0x14a>
      if ((uint32_t)ep->xfer_buff != 0U)
 800d2f8:	68cb      	ldr	r3, [r1, #12]
 800d2fa:	b103      	cbz	r3, 800d2fe <USB_EPStartXfer+0x14a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d2fc:	617b      	str	r3, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 800d2fe:	2e01      	cmp	r6, #1
 800d300:	d10c      	bne.n	800d31c <USB_EPStartXfer+0x168>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d302:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d306:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d30a:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800d30e:	bf0c      	ite	eq
 800d310:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d314:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d318:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d31c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800d320:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d324:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800d328:	e77a      	b.n	800d220 <USB_EPStartXfer+0x6c>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d32a:	442b      	add	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d32c:	f8df c028 	ldr.w	ip, [pc, #40]	; 800d358 <USB_EPStartXfer+0x1a4>
 800d330:	f8d7 e010 	ldr.w	lr, [r7, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d334:	3b01      	subs	r3, #1
 800d336:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d33a:	ea0c 4cc3 	and.w	ip, ip, r3, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d33e:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d340:	ea4c 0c0e 	orr.w	ip, ip, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d344:	436b      	muls	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d346:	f8c7 c010 	str.w	ip, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d34a:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800d34e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d352:	ea43 030c 	orr.w	r3, r3, ip
 800d356:	e7cc      	b.n	800d2f2 <USB_EPStartXfer+0x13e>
 800d358:	1ff80000 	.word	0x1ff80000
 800d35c:	e007ffff 	.word	0xe007ffff
 800d360:	fff80000 	.word	0xfff80000

0800d364 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d364:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d366:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d36a:	0892      	lsrs	r2, r2, #2
 800d36c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 800d370:	4291      	cmp	r1, r2
 800d372:	d101      	bne.n	800d378 <USB_ReadPacket+0x14>
}
 800d374:	4608      	mov	r0, r1
 800d376:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d378:	6803      	ldr	r3, [r0, #0]
 800d37a:	f841 3b04 	str.w	r3, [r1], #4
 800d37e:	e7f7      	b.n	800d370 <USB_ReadPacket+0xc>

0800d380 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800d380:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d382:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d384:	2a01      	cmp	r2, #1
 800d386:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800d38a:	d112      	bne.n	800d3b2 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d38c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800d390:	2a00      	cmp	r2, #0
 800d392:	db06      	blt.n	800d3a2 <USB_EPSetStall+0x22>
 800d394:	b12b      	cbz	r3, 800d3a2 <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d396:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d39a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d39e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d3a2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d3a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d3aa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d3ae:	2000      	movs	r0, #0
 800d3b0:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d3b2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800d3b6:	2a00      	cmp	r2, #0
 800d3b8:	db06      	blt.n	800d3c8 <USB_EPSetStall+0x48>
 800d3ba:	b12b      	cbz	r3, 800d3c8 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d3bc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d3c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d3c4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d3c8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d3cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d3d0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800d3d4:	e7eb      	b.n	800d3ae <USB_EPSetStall+0x2e>

0800d3d6 <USB_EPClearStall>:
{
 800d3d6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d3d8:	784a      	ldrb	r2, [r1, #1]
 800d3da:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800d3de:	78cb      	ldrb	r3, [r1, #3]
 800d3e0:	2a01      	cmp	r2, #1
 800d3e2:	f1a3 0302 	sub.w	r3, r3, #2
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	d10f      	bne.n	800d40a <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d3ea:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d3ee:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d3f0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800d3f4:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d3f8:	d805      	bhi.n	800d406 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d3fa:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d3fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d402:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d406:	2000      	movs	r0, #0
 800d408:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d40a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d40e:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d410:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800d414:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d418:	d8f5      	bhi.n	800d406 <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d41a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d41e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d422:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800d426:	e7ee      	b.n	800d406 <USB_EPClearStall+0x30>

0800d428 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d428:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d42c:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d42e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d432:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d436:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d43a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800d43e:	4319      	orrs	r1, r3
 800d440:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800d444:	2000      	movs	r0, #0
 800d446:	4770      	bx	lr

0800d448 <USB_DevConnect>:
{
 800d448:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d44a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800d44e:	f023 0302 	bic.w	r3, r3, #2
 800d452:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800d456:	2003      	movs	r0, #3
 800d458:	f7f7 ff06 	bl	8005268 <HAL_Delay>
}
 800d45c:	2000      	movs	r0, #0
 800d45e:	bd08      	pop	{r3, pc}

0800d460 <USB_DevDisconnect>:
{
 800d460:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d462:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800d466:	f043 0302 	orr.w	r3, r3, #2
 800d46a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800d46e:	2003      	movs	r0, #3
 800d470:	f7f7 fefa 	bl	8005268 <HAL_Delay>
}
 800d474:	2000      	movs	r0, #0
 800d476:	bd08      	pop	{r3, pc}

0800d478 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800d478:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800d47a:	6980      	ldr	r0, [r0, #24]
}
 800d47c:	4010      	ands	r0, r2
 800d47e:	4770      	bx	lr

0800d480 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800d480:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800d484:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d488:	69c0      	ldr	r0, [r0, #28]
 800d48a:	4018      	ands	r0, r3
}
 800d48c:	0c00      	lsrs	r0, r0, #16
 800d48e:	4770      	bx	lr

0800d490 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800d490:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800d494:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d498:	69c0      	ldr	r0, [r0, #28]
 800d49a:	4018      	ands	r0, r3
}
 800d49c:	b280      	uxth	r0, r0
 800d49e:	4770      	bx	lr

0800d4a0 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d4a0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d4a4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d4a8:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d4ac:	6940      	ldr	r0, [r0, #20]
}
 800d4ae:	4010      	ands	r0, r2
 800d4b0:	4770      	bx	lr

0800d4b2 <USB_ReadDevInEPInterrupt>:
{
 800d4b2:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 800d4b4:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d4b8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d4bc:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d4c0:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d4c4:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d4c8:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d4ca:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d4cc:	01db      	lsls	r3, r3, #7
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	4323      	orrs	r3, r4
}
 800d4d2:	4018      	ands	r0, r3
 800d4d4:	bd10      	pop	{r4, pc}

0800d4d6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800d4d6:	6940      	ldr	r0, [r0, #20]
}
 800d4d8:	f000 0001 	and.w	r0, r0, #1
 800d4dc:	4770      	bx	lr

0800d4de <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d4de:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d4e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d4e6:	f023 0307 	bic.w	r3, r3, #7
 800d4ea:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d4ee:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800d4f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4f6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	4770      	bx	lr
	...

0800d500 <USB_EP0_OutStart>:
{
 800d500:	b530      	push	{r4, r5, lr}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d502:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800d504:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d508:	4c0f      	ldr	r4, [pc, #60]	; (800d548 <USB_EP0_OutStart+0x48>)
 800d50a:	42a5      	cmp	r5, r4
 800d50c:	d903      	bls.n	800d516 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d50e:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800d512:	2c00      	cmp	r4, #0
 800d514:	db16      	blt.n	800d544 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d516:	2400      	movs	r4, #0
  if (dma == 1U)
 800d518:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d51a:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d51c:	691c      	ldr	r4, [r3, #16]
 800d51e:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800d522:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d524:	691c      	ldr	r4, [r3, #16]
 800d526:	f044 0418 	orr.w	r4, r4, #24
 800d52a:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d52c:	691c      	ldr	r4, [r3, #16]
 800d52e:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800d532:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800d534:	d106      	bne.n	800d544 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d536:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d538:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d53c:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d540:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d544:	2000      	movs	r0, #0
 800d546:	bd30      	pop	{r4, r5, pc}
 800d548:	4f54300a 	.word	0x4f54300a

0800d54c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d54c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d54e:	4903      	ldr	r1, [pc, #12]	; (800d55c <MX_FATFS_Init+0x10>)
 800d550:	4803      	ldr	r0, [pc, #12]	; (800d560 <MX_FATFS_Init+0x14>)
 800d552:	f002 fab3 	bl	800fabc <FATFS_LinkDriver>
 800d556:	4b03      	ldr	r3, [pc, #12]	; (800d564 <MX_FATFS_Init+0x18>)
 800d558:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d55a:	bd08      	pop	{r3, pc}
 800d55c:	240209e1 	.word	0x240209e1
 800d560:	08014b6c 	.word	0x08014b6c
 800d564:	240209e0 	.word	0x240209e0

0800d568 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800d568:	2000      	movs	r0, #0
 800d56a:	4770      	bx	lr

0800d56c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d56c:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d56e:	4613      	mov	r3, r2
 800d570:	460a      	mov	r2, r1
 800d572:	4601      	mov	r1, r0
 800d574:	4803      	ldr	r0, [pc, #12]	; (800d584 <BSP_SD_ReadBlocks_DMA+0x18>)
 800d576:	f7fc fa2f 	bl	80099d8 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800d57a:	3000      	adds	r0, #0
 800d57c:	bf18      	it	ne
 800d57e:	2001      	movne	r0, #1
 800d580:	bd08      	pop	{r3, pc}
 800d582:	bf00      	nop
 800d584:	2400bb1c 	.word	0x2400bb1c

0800d588 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d588:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d58a:	4613      	mov	r3, r2
 800d58c:	460a      	mov	r2, r1
 800d58e:	4601      	mov	r1, r0
 800d590:	4803      	ldr	r0, [pc, #12]	; (800d5a0 <BSP_SD_WriteBlocks_DMA+0x18>)
 800d592:	f7fc fa85 	bl	8009aa0 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800d596:	3000      	adds	r0, #0
 800d598:	bf18      	it	ne
 800d59a:	2001      	movne	r0, #1
 800d59c:	bd08      	pop	{r3, pc}
 800d59e:	bf00      	nop
 800d5a0:	2400bb1c 	.word	0x2400bb1c

0800d5a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d5a4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d5a6:	4803      	ldr	r0, [pc, #12]	; (800d5b4 <BSP_SD_GetCardState+0x10>)
 800d5a8:	f7fc fe56 	bl	800a258 <HAL_SD_GetCardState>
}
 800d5ac:	3804      	subs	r0, #4
 800d5ae:	bf18      	it	ne
 800d5b0:	2001      	movne	r0, #1
 800d5b2:	bd08      	pop	{r3, pc}
 800d5b4:	2400bb1c 	.word	0x2400bb1c

0800d5b8 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d5b8:	4601      	mov	r1, r0
 800d5ba:	4801      	ldr	r0, [pc, #4]	; (800d5c0 <BSP_SD_GetCardInfo+0x8>)
 800d5bc:	f7fc bd9e 	b.w	800a0fc <HAL_SD_GetCardInfo>
 800d5c0:	2400bb1c 	.word	0x2400bb1c

0800d5c4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d5c4:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800d5c6:	f000 f907 	bl	800d7d8 <BSP_SD_WriteCpltCallback>
}
 800d5ca:	bd08      	pop	{r3, pc}

0800d5cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d5cc:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800d5ce:	f000 f913 	bl	800d7f8 <BSP_SD_ReadCpltCallback>
}
 800d5d2:	bd08      	pop	{r3, pc}

0800d5d4 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 800d5d4:	2301      	movs	r3, #1
{
 800d5d6:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 800d5d8:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d5dc:	f000 f81e 	bl	800d61c <BSP_PlatformIsDetected>
 800d5e0:	b908      	cbnz	r0, 800d5e6 <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 800d5e2:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800d5e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800d5ea:	b003      	add	sp, #12
 800d5ec:	f85d fb04 	ldr.w	pc, [sp], #4

0800d5f0 <BSP_SD_Init>:
{
 800d5f0:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d5f2:	f7ff ffef 	bl	800d5d4 <BSP_SD_IsDetected>
 800d5f6:	2801      	cmp	r0, #1
 800d5f8:	d10c      	bne.n	800d614 <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 800d5fa:	4807      	ldr	r0, [pc, #28]	; (800d618 <BSP_SD_Init+0x28>)
 800d5fc:	f7fc fe40 	bl	800a280 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800d600:	b938      	cbnz	r0, 800d612 <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d602:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d606:	4804      	ldr	r0, [pc, #16]	; (800d618 <BSP_SD_Init+0x28>)
 800d608:	f7fc fd8a 	bl	800a120 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800d60c:	3000      	adds	r0, #0
 800d60e:	bf18      	it	ne
 800d610:	2001      	movne	r0, #1
}
 800d612:	bd08      	pop	{r3, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 800d614:	2002      	movs	r0, #2
 800d616:	e7fc      	b.n	800d612 <BSP_SD_Init+0x22>
 800d618:	2400bb1c 	.word	0x2400bb1c

0800d61c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d61c:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d61e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d622:	4803      	ldr	r0, [pc, #12]	; (800d630 <BSP_PlatformIsDetected+0x14>)
 800d624:	f7f9 ff42 	bl	80074ac <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800d628:	fab0 f080 	clz	r0, r0
 800d62c:	0940      	lsrs	r0, r0, #5
 800d62e:	bd08      	pop	{r3, pc}
 800d630:	58020800 	.word	0x58020800

0800d634 <SD_CheckStatus.isra.0>:
  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
  Stat = STA_NOINIT;
 800d634:	2301      	movs	r3, #1
static DSTATUS SD_CheckStatus(BYTE lun)
 800d636:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800d638:	4c05      	ldr	r4, [pc, #20]	; (800d650 <SD_CheckStatus.isra.0+0x1c>)
 800d63a:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d63c:	f7ff ffb2 	bl	800d5a4 <BSP_SD_GetCardState>
 800d640:	4623      	mov	r3, r4
 800d642:	b918      	cbnz	r0, 800d64c <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 800d644:	7822      	ldrb	r2, [r4, #0]
 800d646:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d64a:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 800d64c:	7818      	ldrb	r0, [r3, #0]
}
 800d64e:	bd10      	pop	{r4, pc}
 800d650:	24000010 	.word	0x24000010

0800d654 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d654:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800d656:	2301      	movs	r3, #1
 800d658:	4c0f      	ldr	r4, [pc, #60]	; (800d698 <SD_initialize+0x44>)
 800d65a:	7023      	strb	r3, [r4, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800d65c:	f002 fa68 	bl	800fb30 <osKernelGetState>
 800d660:	2802      	cmp	r0, #2
 800d662:	d116      	bne.n	800d692 <SD_initialize+0x3e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d664:	f7ff ffc4 	bl	800d5f0 <BSP_SD_Init>
 800d668:	b910      	cbnz	r0, 800d670 <SD_initialize+0x1c>
    {
      Stat = SD_CheckStatus(lun);
 800d66a:	f7ff ffe3 	bl	800d634 <SD_CheckStatus.isra.0>
 800d66e:	7020      	strb	r0, [r4, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d670:	7823      	ldrb	r3, [r4, #0]
 800d672:	2b01      	cmp	r3, #1
 800d674:	d00d      	beq.n	800d692 <SD_initialize+0x3e>
    {
      if (SDQueueID == NULL)
 800d676:	4d09      	ldr	r5, [pc, #36]	; (800d69c <SD_initialize+0x48>)
 800d678:	682a      	ldr	r2, [r5, #0]
 800d67a:	b922      	cbnz	r2, 800d686 <SD_initialize+0x32>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800d67c:	2102      	movs	r1, #2
 800d67e:	200a      	movs	r0, #10
 800d680:	f002 fcb8 	bl	800fff4 <osMessageQueueNew>
 800d684:	6028      	str	r0, [r5, #0]
#endif
      }

      if (SDQueueID == NULL)
 800d686:	682b      	ldr	r3, [r5, #0]
 800d688:	b91b      	cbnz	r3, 800d692 <SD_initialize+0x3e>
      {
        Stat |= STA_NOINIT;
 800d68a:	7823      	ldrb	r3, [r4, #0]
 800d68c:	f043 0301 	orr.w	r3, r3, #1
 800d690:	7023      	strb	r3, [r4, #0]
      }
    }
  }

  return Stat;
 800d692:	7820      	ldrb	r0, [r4, #0]
}
 800d694:	bd38      	pop	{r3, r4, r5, pc}
 800d696:	bf00      	nop
 800d698:	24000010 	.word	0x24000010
 800d69c:	24000330 	.word	0x24000330

0800d6a0 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 800d6a0:	f7ff bfc8 	b.w	800d634 <SD_CheckStatus.isra.0>

0800d6a4 <SD_read.part.1>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 800d6a4:	b538      	push	{r3, r4, r5, lr}
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
          if ((status == osOK) && (event == READ_CPLT_MSG))
          {
            timer = osKernelGetTickCount();
 800d6a6:	f002 fa73 	bl	800fb90 <osKernelGetTickCount>
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800d6aa:	f247 542f 	movw	r4, #29999	; 0x752f
            timer = osKernelGetTickCount();
 800d6ae:	4605      	mov	r5, r0
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800d6b0:	f002 fa6e 	bl	800fb90 <osKernelGetTickCount>
 800d6b4:	1b40      	subs	r0, r0, r5
 800d6b6:	42a0      	cmp	r0, r4
 800d6b8:	d901      	bls.n	800d6be <SD_read.part.1+0x1a>
  DRESULT res = RES_ERROR;
 800d6ba:	2001      	movs	r0, #1
 800d6bc:	e003      	b.n	800d6c6 <SD_read.part.1+0x22>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d6be:	f7ff ff71 	bl	800d5a4 <BSP_SD_GetCardState>
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	d1f4      	bne.n	800d6b0 <SD_read.part.1+0xc>
      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
}
 800d6c6:	bd38      	pop	{r3, r4, r5, pc}

0800d6c8 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d6c8:	4b12      	ldr	r3, [pc, #72]	; (800d714 <SD_ioctl+0x4c>)
{
 800d6ca:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d6cc:	781b      	ldrb	r3, [r3, #0]
{
 800d6ce:	b08a      	sub	sp, #40	; 0x28
 800d6d0:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d6d2:	07db      	lsls	r3, r3, #31
 800d6d4:	d41b      	bmi.n	800d70e <SD_ioctl+0x46>

  switch (cmd)
 800d6d6:	2903      	cmp	r1, #3
 800d6d8:	d803      	bhi.n	800d6e2 <SD_ioctl+0x1a>
 800d6da:	e8df f001 	tbb	[pc, r1]
 800d6de:	0510      	.short	0x0510
 800d6e0:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 800d6e2:	2004      	movs	r0, #4
  }

  return res;
}
 800d6e4:	b00a      	add	sp, #40	; 0x28
 800d6e6:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800d6e8:	a801      	add	r0, sp, #4
 800d6ea:	f7ff ff65 	bl	800d5b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d6ee:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d6f0:	6023      	str	r3, [r4, #0]
 800d6f2:	e004      	b.n	800d6fe <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 800d6f4:	a801      	add	r0, sp, #4
 800d6f6:	f7ff ff5f 	bl	800d5b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d6fa:	9b08      	ldr	r3, [sp, #32]
 800d6fc:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800d6fe:	2000      	movs	r0, #0
 800d700:	e7f0      	b.n	800d6e4 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800d702:	a801      	add	r0, sp, #4
 800d704:	f7ff ff58 	bl	800d5b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d708:	9b08      	ldr	r3, [sp, #32]
 800d70a:	0a5b      	lsrs	r3, r3, #9
 800d70c:	e7f0      	b.n	800d6f0 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d70e:	2003      	movs	r0, #3
 800d710:	e7e8      	b.n	800d6e4 <SD_ioctl+0x1c>
 800d712:	bf00      	nop
 800d714:	24000010 	.word	0x24000010

0800d718 <SD_CheckStatusWithTimeout.constprop.4>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 800d718:	b538      	push	{r3, r4, r5, lr}
  timer = osKernelGetTickCount();
 800d71a:	f002 fa39 	bl	800fb90 <osKernelGetTickCount>
  while( osKernelGetTickCount() - timer < timeout)
 800d71e:	f247 542f 	movw	r4, #29999	; 0x752f
  timer = osKernelGetTickCount();
 800d722:	4605      	mov	r5, r0
  while( osKernelGetTickCount() - timer < timeout)
 800d724:	f002 fa34 	bl	800fb90 <osKernelGetTickCount>
 800d728:	1b40      	subs	r0, r0, r5
 800d72a:	42a0      	cmp	r0, r4
 800d72c:	d902      	bls.n	800d734 <SD_CheckStatusWithTimeout.constprop.4+0x1c>
  return -1;
 800d72e:	f04f 30ff 	mov.w	r0, #4294967295
 800d732:	e003      	b.n	800d73c <SD_CheckStatusWithTimeout.constprop.4+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d734:	f7ff ff36 	bl	800d5a4 <BSP_SD_GetCardState>
 800d738:	2800      	cmp	r0, #0
 800d73a:	d1f3      	bne.n	800d724 <SD_CheckStatusWithTimeout.constprop.4+0xc>
}
 800d73c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d740 <SD_write>:
{
 800d740:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d742:	460c      	mov	r4, r1
 800d744:	4615      	mov	r5, r2
 800d746:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d748:	f7ff ffe6 	bl	800d718 <SD_CheckStatusWithTimeout.constprop.4>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	da02      	bge.n	800d756 <SD_write+0x16>
    return res;
 800d750:	2001      	movs	r0, #1
}
 800d752:	b002      	add	sp, #8
 800d754:	bd70      	pop	{r4, r5, r6, pc}
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d756:	4632      	mov	r2, r6
 800d758:	4629      	mov	r1, r5
 800d75a:	4620      	mov	r0, r4
 800d75c:	f7ff ff14 	bl	800d588 <BSP_SD_WriteBlocks_DMA>
 800d760:	4602      	mov	r2, r0
 800d762:	2800      	cmp	r0, #0
 800d764:	d1f4      	bne.n	800d750 <SD_write+0x10>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800d766:	4808      	ldr	r0, [pc, #32]	; (800d788 <SD_write+0x48>)
 800d768:	f247 5330 	movw	r3, #30000	; 0x7530
 800d76c:	f10d 0106 	add.w	r1, sp, #6
 800d770:	6800      	ldr	r0, [r0, #0]
 800d772:	f002 fcc7 	bl	8010104 <osMessageQueueGet>
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800d776:	2800      	cmp	r0, #0
 800d778:	d1ea      	bne.n	800d750 <SD_write+0x10>
 800d77a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d77e:	2b02      	cmp	r3, #2
 800d780:	d1e6      	bne.n	800d750 <SD_write+0x10>
 800d782:	f7ff ff8f 	bl	800d6a4 <SD_read.part.1>
 800d786:	e7e4      	b.n	800d752 <SD_write+0x12>
 800d788:	24000330 	.word	0x24000330

0800d78c <SD_read>:
{
 800d78c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d78e:	460c      	mov	r4, r1
 800d790:	4615      	mov	r5, r2
 800d792:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d794:	f7ff ffc0 	bl	800d718 <SD_CheckStatusWithTimeout.constprop.4>
 800d798:	2800      	cmp	r0, #0
 800d79a:	da02      	bge.n	800d7a2 <SD_read+0x16>
    return res;
 800d79c:	2001      	movs	r0, #1
}
 800d79e:	b002      	add	sp, #8
 800d7a0:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d7a2:	4632      	mov	r2, r6
 800d7a4:	4629      	mov	r1, r5
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	f7ff fee0 	bl	800d56c <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	d1f4      	bne.n	800d79c <SD_read+0x10>
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800d7b2:	4808      	ldr	r0, [pc, #32]	; (800d7d4 <SD_read+0x48>)
 800d7b4:	f247 5330 	movw	r3, #30000	; 0x7530
 800d7b8:	f10d 0106 	add.w	r1, sp, #6
 800d7bc:	6800      	ldr	r0, [r0, #0]
 800d7be:	f002 fca1 	bl	8010104 <osMessageQueueGet>
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	d1ea      	bne.n	800d79c <SD_read+0x10>
 800d7c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d1e6      	bne.n	800d79c <SD_read+0x10>
 800d7ce:	f7ff ff69 	bl	800d6a4 <SD_read.part.1>
 800d7d2:	e7e4      	b.n	800d79e <SD_read+0x12>
 800d7d4:	24000330 	.word	0x24000330

0800d7d8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d7d8:	b507      	push	{r0, r1, r2, lr}
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800d7da:	2302      	movs	r3, #2
 800d7dc:	a902      	add	r1, sp, #8
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d7de:	4805      	ldr	r0, [pc, #20]	; (800d7f4 <BSP_SD_WriteCpltCallback+0x1c>)
   const uint16_t msg = WRITE_CPLT_MSG;
 800d7e0:	f821 3d02 	strh.w	r3, [r1, #-2]!
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	6800      	ldr	r0, [r0, #0]
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	f002 fc49 	bl	8010080 <osMessageQueuePut>
#endif
}
 800d7ee:	b003      	add	sp, #12
 800d7f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7f4:	24000330 	.word	0x24000330

0800d7f8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d7f8:	b507      	push	{r0, r1, r2, lr}
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	a902      	add	r1, sp, #8
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d7fe:	4805      	ldr	r0, [pc, #20]	; (800d814 <BSP_SD_ReadCpltCallback+0x1c>)
   const uint16_t msg = READ_CPLT_MSG;
 800d800:	f821 3d02 	strh.w	r3, [r1, #-2]!
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800d804:	2300      	movs	r3, #0
 800d806:	6800      	ldr	r0, [r0, #0]
 800d808:	461a      	mov	r2, r3
 800d80a:	f002 fc39 	bl	8010080 <osMessageQueuePut>
#endif
}
 800d80e:	b003      	add	sp, #12
 800d810:	f85d fb04 	ldr.w	pc, [sp], #4
 800d814:	24000330 	.word	0x24000330

0800d818 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d818:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
{
 800d81c:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d81e:	b16b      	cbz	r3, 800d83c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d820:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d824:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800d828:	28ff      	cmp	r0, #255	; 0xff
 800d82a:	d007      	beq.n	800d83c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	4621      	mov	r1, r4
 800d830:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800d834:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800d836:	23ff      	movs	r3, #255	; 0xff
 800d838:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 800d83c:	2000      	movs	r0, #0
 800d83e:	bd10      	pop	{r4, pc}

0800d840 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d840:	2343      	movs	r3, #67	; 0x43
 800d842:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800d844:	4800      	ldr	r0, [pc, #0]	; (800d848 <USBD_CDC_GetFSCfgDesc+0x8>)
 800d846:	4770      	bx	lr
 800d848:	2400004c 	.word	0x2400004c

0800d84c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d84c:	2343      	movs	r3, #67	; 0x43
 800d84e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800d850:	4800      	ldr	r0, [pc, #0]	; (800d854 <USBD_CDC_GetHSCfgDesc+0x8>)
 800d852:	4770      	bx	lr
 800d854:	24000090 	.word	0x24000090

0800d858 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d858:	2343      	movs	r3, #67	; 0x43
 800d85a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800d85c:	4800      	ldr	r0, [pc, #0]	; (800d860 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800d85e:	4770      	bx	lr
 800d860:	240000e0 	.word	0x240000e0

0800d864 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d864:	230a      	movs	r3, #10
 800d866:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800d868:	4800      	ldr	r0, [pc, #0]	; (800d86c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800d86a:	4770      	bx	lr
 800d86c:	240000d4 	.word	0x240000d4

0800d870 <USBD_CDC_DataOut>:
{
 800d870:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d872:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 800d876:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 800d878:	b16c      	cbz	r4, 800d896 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d87a:	f004 fe93 	bl	80125a4 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d87e:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d882:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d886:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800d890:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800d892:	2000      	movs	r0, #0
}
 800d894:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800d896:	2003      	movs	r0, #3
 800d898:	e7fc      	b.n	800d894 <USBD_CDC_DataOut+0x24>

0800d89a <USBD_CDC_DataIn>:
{
 800d89a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800d89c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 800d8a4:	b323      	cbz	r3, 800d8f0 <USBD_CDC_DataIn+0x56>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d8a6:	2614      	movs	r6, #20
 800d8a8:	fb06 0601 	mla	r6, r6, r1, r0
 800d8ac:	69b7      	ldr	r7, [r6, #24]
 800d8ae:	b19f      	cbz	r7, 800d8d8 <USBD_CDC_DataIn+0x3e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d8b0:	f04f 0c1c 	mov.w	ip, #28
 800d8b4:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800d8b8:	fb0c 4401 	mla	r4, ip, r1, r4
 800d8bc:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800d8c0:	fbb7 f4fc 	udiv	r4, r7, ip
 800d8c4:	fb0c 7414 	mls	r4, ip, r4, r7
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d8c8:	b934      	cbnz	r4, 800d8d8 <USBD_CDC_DataIn+0x3e>
    pdev->ep_in[epnum].total_length = 0U;
 800d8ca:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d8cc:	4623      	mov	r3, r4
 800d8ce:	4622      	mov	r2, r4
 800d8d0:	f004 fe4c 	bl	801256c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800d8d4:	4620      	mov	r0, r4
}
 800d8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hcdc->TxState = 0U;
 800d8d8:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d8da:	f8d5 12c0 	ldr.w	r1, [r5, #704]	; 0x2c0
 800d8de:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800d8e2:	690d      	ldr	r5, [r1, #16]
 800d8e4:	f503 7104 	add.w	r1, r3, #528	; 0x210
    hcdc->TxState = 0U;
 800d8e8:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d8ec:	47a8      	blx	r5
 800d8ee:	e7f1      	b.n	800d8d4 <USBD_CDC_DataIn+0x3a>
    return (uint8_t)USBD_FAIL;
 800d8f0:	2003      	movs	r0, #3
 800d8f2:	e7f0      	b.n	800d8d6 <USBD_CDC_DataIn+0x3c>

0800d8f4 <USBD_CDC_Setup>:
{
 800d8f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8f8:	780a      	ldrb	r2, [r1, #0]
  uint8_t ifalt = 0U;
 800d8fa:	f04f 0800 	mov.w	r8, #0
{
 800d8fe:	4605      	mov	r5, r0
 800d900:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d902:	f012 0360 	ands.w	r3, r2, #96	; 0x60
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d906:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800d90a:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800d90e:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d912:	d025      	beq.n	800d960 <USBD_CDC_Setup+0x6c>
 800d914:	2b20      	cmp	r3, #32
 800d916:	d155      	bne.n	800d9c4 <USBD_CDC_Setup+0xd0>
    if (req->wLength != 0U)
 800d918:	88cc      	ldrh	r4, [r1, #6]
 800d91a:	784b      	ldrb	r3, [r1, #1]
 800d91c:	b1cc      	cbz	r4, 800d952 <USBD_CDC_Setup+0x5e>
      if ((req->bmRequest & 0x80U) != 0U)
 800d91e:	0612      	lsls	r2, r2, #24
 800d920:	d50d      	bpl.n	800d93e <USBD_CDC_Setup+0x4a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d922:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800d926:	4639      	mov	r1, r7
 800d928:	4618      	mov	r0, r3
 800d92a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800d92e:	4622      	mov	r2, r4
 800d930:	47c8      	blx	r9
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d932:	88f2      	ldrh	r2, [r6, #6]
 800d934:	4639      	mov	r1, r7
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d936:	4628      	mov	r0, r5
 800d938:	f000 fc90 	bl	800e25c <USBD_CtlSendData>
 800d93c:	e007      	b.n	800d94e <USBD_CDC_Setup+0x5a>
        hcdc->CmdOpCode = req->bRequest;
 800d93e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d942:	4622      	mov	r2, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d944:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d948:	4639      	mov	r1, r7
 800d94a:	f000 fc9c 	bl	800e286 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800d94e:	2000      	movs	r0, #0
 800d950:	e03d      	b.n	800d9ce <USBD_CDC_Setup+0xda>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d952:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800d956:	4618      	mov	r0, r3
 800d958:	6895      	ldr	r5, [r2, #8]
 800d95a:	4622      	mov	r2, r4
 800d95c:	47a8      	blx	r5
 800d95e:	e7f6      	b.n	800d94e <USBD_CDC_Setup+0x5a>
    switch (req->bRequest)
 800d960:	784b      	ldrb	r3, [r1, #1]
 800d962:	2b0b      	cmp	r3, #11
 800d964:	d82e      	bhi.n	800d9c4 <USBD_CDC_Setup+0xd0>
 800d966:	a201      	add	r2, pc, #4	; (adr r2, 800d96c <USBD_CDC_Setup+0x78>)
 800d968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d96c:	0800d99d 	.word	0x0800d99d
 800d970:	0800d94f 	.word	0x0800d94f
 800d974:	0800d9c5 	.word	0x0800d9c5
 800d978:	0800d9c5 	.word	0x0800d9c5
 800d97c:	0800d9c5 	.word	0x0800d9c5
 800d980:	0800d9c5 	.word	0x0800d9c5
 800d984:	0800d9c5 	.word	0x0800d9c5
 800d988:	0800d9c5 	.word	0x0800d9c5
 800d98c:	0800d9c5 	.word	0x0800d9c5
 800d990:	0800d9c5 	.word	0x0800d9c5
 800d994:	0800d9ad 	.word	0x0800d9ad
 800d998:	0800d9bd 	.word	0x0800d9bd
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d99c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d9a0:	2b03      	cmp	r3, #3
 800d9a2:	d10f      	bne.n	800d9c4 <USBD_CDC_Setup+0xd0>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d9a4:	2202      	movs	r2, #2
 800d9a6:	f10d 0106 	add.w	r1, sp, #6
 800d9aa:	e7c4      	b.n	800d936 <USBD_CDC_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9ac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d9b0:	2b03      	cmp	r3, #3
 800d9b2:	d107      	bne.n	800d9c4 <USBD_CDC_Setup+0xd0>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	f10d 0105 	add.w	r1, sp, #5
 800d9ba:	e7bc      	b.n	800d936 <USBD_CDC_Setup+0x42>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d9bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d9c0:	2b03      	cmp	r3, #3
 800d9c2:	d0c4      	beq.n	800d94e <USBD_CDC_Setup+0x5a>
      USBD_CtlError(pdev, req);
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	4631      	mov	r1, r6
 800d9c8:	f000 fc21 	bl	800e20e <USBD_CtlError>
      ret = USBD_FAIL;
 800d9cc:	2003      	movs	r0, #3
}
 800d9ce:	b003      	add	sp, #12
 800d9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d9d4 <USBD_CDC_DeInit>:
{
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d9d8:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d9da:	2181      	movs	r1, #129	; 0x81
 800d9dc:	f004 fd7a 	bl	80124d4 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d9e0:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d9e2:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f004 fd75 	bl	80124d4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d9ea:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d9ee:	2182      	movs	r1, #130	; 0x82
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f004 fd6f 	bl	80124d4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800d9f6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d9fa:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800d9fc:	b14b      	cbz	r3, 800da12 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d9fe:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800da06:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800da0a:	f004 fe01 	bl	8012610 <free>
    pdev->pClassData = NULL;
 800da0e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800da12:	2000      	movs	r0, #0
 800da14:	bd38      	pop	{r3, r4, r5, pc}

0800da16 <USBD_CDC_Init>:
{
 800da16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da1a:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800da1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800da20:	f004 fdee 	bl	8012600 <malloc>
  if (hcdc == NULL)
 800da24:	4606      	mov	r6, r0
    pdev->pClassData = NULL;
 800da26:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 800da2a:	b910      	cbnz	r0, 800da32 <USBD_CDC_Init+0x1c>
    return (uint8_t)USBD_EMEM;
 800da2c:	2002      	movs	r0, #2
}
 800da2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da32:	7c23      	ldrb	r3, [r4, #16]
 800da34:	bbab      	cbnz	r3, 800daa2 <USBD_CDC_Init+0x8c>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800da36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da3a:	2202      	movs	r2, #2
 800da3c:	2181      	movs	r1, #129	; 0x81
 800da3e:	4620      	mov	r0, r4
 800da40:	f004 fd38 	bl	80124b4 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800da44:	2501      	movs	r5, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da46:	f44f 7300 	mov.w	r3, #512	; 0x200
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800da4a:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da4c:	4629      	mov	r1, r5
 800da4e:	2202      	movs	r2, #2
 800da50:	4620      	mov	r0, r4
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800da52:	2701      	movs	r7, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da54:	f004 fd2e 	bl	80124b4 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800da58:	2310      	movs	r3, #16
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800da5a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800da5e:	2203      	movs	r2, #3
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800da60:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800da64:	2182      	movs	r1, #130	; 0x82
 800da66:	2308      	movs	r3, #8
 800da68:	4620      	mov	r0, r4
 800da6a:	f004 fd23 	bl	80124b4 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800da6e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800da72:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 800da76:	2500      	movs	r5, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da7c:	f894 8010 	ldrb.w	r8, [r4, #16]
  hcdc->TxState = 0U;
 800da80:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800da84:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da88:	f1b8 0f00 	cmp.w	r8, #0
 800da8c:	d113      	bne.n	800dab6 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da92:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800da96:	4639      	mov	r1, r7
 800da98:	4620      	mov	r0, r4
 800da9a:	f004 fd75 	bl	8012588 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800da9e:	4640      	mov	r0, r8
 800daa0:	e7c5      	b.n	800da2e <USBD_CDC_Init+0x18>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800daa2:	2501      	movs	r5, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800daa4:	2340      	movs	r3, #64	; 0x40
 800daa6:	2202      	movs	r2, #2
 800daa8:	2181      	movs	r1, #129	; 0x81
 800daaa:	4620      	mov	r0, r4
 800daac:	f004 fd02 	bl	80124b4 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dab0:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dab2:	2340      	movs	r3, #64	; 0x40
 800dab4:	e7ca      	b.n	800da4c <USBD_CDC_Init+0x36>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dab6:	2340      	movs	r3, #64	; 0x40
 800dab8:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800dabc:	4639      	mov	r1, r7
 800dabe:	4620      	mov	r0, r4
 800dac0:	f004 fd62 	bl	8012588 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800dac4:	4628      	mov	r0, r5
 800dac6:	e7b2      	b.n	800da2e <USBD_CDC_Init+0x18>

0800dac8 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800dac8:	b119      	cbz	r1, 800dad2 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800daca:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dace:	2000      	movs	r0, #0
 800dad0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800dad2:	2003      	movs	r0, #3
}
 800dad4:	4770      	bx	lr

0800dad6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dad6:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 800dada:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800dadc:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dae0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800dae4:	4770      	bx	lr

0800dae6 <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800dae6:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 800daea:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800daec:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800daf0:	4770      	bx	lr

0800daf2 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800daf2:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800daf6:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800daf8:	b17a      	cbz	r2, 800db1a <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800dafa:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800dafe:	2301      	movs	r3, #1
 800db00:	b96c      	cbnz	r4, 800db1e <USBD_CDC_TransmitPacket+0x2c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800db02:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800db06:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800db08:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800db0c:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800db10:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800db12:	f004 fd2b 	bl	801256c <USBD_LL_Transmit>

    ret = USBD_OK;
 800db16:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 800db18:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800db1a:	2003      	movs	r0, #3
 800db1c:	e7fc      	b.n	800db18 <USBD_CDC_TransmitPacket+0x26>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800db1e:	4618      	mov	r0, r3
 800db20:	e7fa      	b.n	800db18 <USBD_CDC_TransmitPacket+0x26>

0800db22 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db22:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800db26:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800db28:	b162      	cbz	r2, 800db44 <USBD_CDC_ReceivePacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db2a:	7c04      	ldrb	r4, [r0, #16]
 800db2c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800db30:	b934      	cbnz	r4, 800db40 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db32:	f44f 7300 	mov.w	r3, #512	; 0x200
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db36:	2101      	movs	r1, #1
 800db38:	f004 fd26 	bl	8012588 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800db3c:	2000      	movs	r0, #0
}
 800db3e:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800db40:	2340      	movs	r3, #64	; 0x40
 800db42:	e7f8      	b.n	800db36 <USBD_CDC_ReceivePacket+0x14>
    return (uint8_t)USBD_FAIL;
 800db44:	2003      	movs	r0, #3
 800db46:	e7fa      	b.n	800db3e <USBD_CDC_ReceivePacket+0x1c>

0800db48 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800db48:	b1a0      	cbz	r0, 800db74 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800db4a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800db4e:	b113      	cbz	r3, 800db56 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 800db50:	2300      	movs	r3, #0
 800db52:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800db56:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 800db5a:	b113      	cbz	r3, 800db62 <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 800db5c:	2300      	movs	r3, #0
 800db5e:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800db62:	b109      	cbz	r1, 800db68 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 800db64:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db68:	2301      	movs	r3, #1
  pdev->id = id;
 800db6a:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db6c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800db70:	f004 bc62 	b.w	8012438 <USBD_LL_Init>

  return ret;
}
 800db74:	2003      	movs	r0, #3
 800db76:	4770      	bx	lr

0800db78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800db78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 800db7a:	2400      	movs	r4, #0
{
 800db7c:	4605      	mov	r5, r0
  uint16_t len = 0U;
 800db7e:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800db82:	b151      	cbz	r1, 800db9a <USBD_RegisterClass+0x22>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800db84:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800db88:	f10d 0006 	add.w	r0, sp, #6
 800db8c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800db8e:	4798      	blx	r3
 800db90:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800db94:	4620      	mov	r0, r4
}
 800db96:	b003      	add	sp, #12
 800db98:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800db9a:	2003      	movs	r0, #3
 800db9c:	e7fb      	b.n	800db96 <USBD_RegisterClass+0x1e>

0800db9e <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800db9e:	f004 bc7b 	b.w	8012498 <USBD_LL_Start>

0800dba2 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800dba2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dba6:	b10b      	cbz	r3, 800dbac <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4718      	bx	r3
  }

  return ret;
}
 800dbac:	2003      	movs	r0, #3
 800dbae:	4770      	bx	lr

0800dbb0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dbb0:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800dbb2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dbb6:	b10b      	cbz	r3, 800dbbc <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	4798      	blx	r3
  }

  return USBD_OK;
}
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	bd08      	pop	{r3, pc}

0800dbc0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dbc0:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dbc2:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800dbc6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dbc8:	4628      	mov	r0, r5
 800dbca:	f000 fb0c 	bl	800e1e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dbce:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800dbd0:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800dbd4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800dbd8:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800dbdc:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800dbe0:	f001 031f 	and.w	r3, r1, #31
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d00f      	beq.n	800dc08 <USBD_LL_SetupStage+0x48>
 800dbe8:	d308      	bcc.n	800dbfc <USBD_LL_SetupStage+0x3c>
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d012      	beq.n	800dc14 <USBD_LL_SetupStage+0x54>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dbee:	4620      	mov	r0, r4
 800dbf0:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800dbf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dbf8:	f004 bc7a 	b.w	80124f0 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	4620      	mov	r0, r4
}
 800dc00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dc04:	f000 b8f4 	b.w	800ddf0 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dc08:	4629      	mov	r1, r5
 800dc0a:	4620      	mov	r0, r4
}
 800dc0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dc10:	f000 ba2e 	b.w	800e070 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc14:	4629      	mov	r1, r5
 800dc16:	4620      	mov	r0, r4
}
 800dc18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc1c:	f000 ba4f 	b.w	800e0be <USBD_StdEPReq>

0800dc20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc20:	b570      	push	{r4, r5, r6, lr}
 800dc22:	4604      	mov	r4, r0
 800dc24:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dc26:	bb09      	cbnz	r1, 800dc6c <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc28:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800dc2c:	2b03      	cmp	r3, #3
 800dc2e:	d10e      	bne.n	800dc4e <USBD_LL_DataOutStage+0x2e>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc30:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 800dc34:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d90a      	bls.n	800dc52 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 800dc3c:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc3e:	4631      	mov	r1, r6
 800dc40:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800dc42:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc46:	bf28      	it	cs
 800dc48:	461a      	movcs	r2, r3
 800dc4a:	f000 fb2b 	bl	800e2a4 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800dc4e:	2000      	movs	r0, #0
}
 800dc50:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800dc52:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dc56:	691b      	ldr	r3, [r3, #16]
 800dc58:	b123      	cbz	r3, 800dc64 <USBD_LL_DataOutStage+0x44>
 800dc5a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800dc5e:	2a03      	cmp	r2, #3
 800dc60:	d100      	bne.n	800dc64 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 800dc62:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800dc64:	4620      	mov	r0, r4
 800dc66:	f000 fb25 	bl	800e2b4 <USBD_CtlSendStatus>
 800dc6a:	e7f0      	b.n	800dc4e <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800dc6c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dc70:	699b      	ldr	r3, [r3, #24]
 800dc72:	b133      	cbz	r3, 800dc82 <USBD_LL_DataOutStage+0x62>
 800dc74:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800dc78:	2a03      	cmp	r2, #3
 800dc7a:	d102      	bne.n	800dc82 <USBD_LL_DataOutStage+0x62>
}
 800dc7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dc80:	4718      	bx	r3
    return USBD_FAIL;
 800dc82:	2003      	movs	r0, #3
 800dc84:	e7e4      	b.n	800dc50 <USBD_LL_DataOutStage+0x30>

0800dc86 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dc86:	b570      	push	{r4, r5, r6, lr}
 800dc88:	4604      	mov	r4, r0
 800dc8a:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dc8c:	460d      	mov	r5, r1
 800dc8e:	bbd1      	cbnz	r1, 800dd06 <USBD_LL_DataInStage+0x80>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dc90:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d10e      	bne.n	800dcb6 <USBD_LL_DataInStage+0x30>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc98:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d912      	bls.n	800dcc6 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 800dca0:	1ad2      	subs	r2, r2, r3

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dca2:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 800dca4:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dca6:	f000 fae6 	bl	800e276 <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcaa:	462b      	mov	r3, r5
 800dcac:	462a      	mov	r2, r5
 800dcae:	4629      	mov	r1, r5
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f004 fc69 	bl	8012588 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800dcb6:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800dcba:	2000      	movs	r0, #0
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d101      	bne.n	800dcc4 <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800dcc0:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800dcc4:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 800dcc6:	d10c      	bne.n	800dce2 <USBD_LL_DataInStage+0x5c>
            (pep->total_length >= pep->maxpacket) &&
 800dcc8:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d809      	bhi.n	800dce2 <USBD_LL_DataInStage+0x5c>
            (pep->total_length >= pep->maxpacket) &&
 800dcce:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d205      	bcs.n	800dce2 <USBD_LL_DataInStage+0x5c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dcd6:	460a      	mov	r2, r1
 800dcd8:	f000 facd 	bl	800e276 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dcdc:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800dce0:	e7e3      	b.n	800dcaa <USBD_LL_DataInStage+0x24>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dce2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	b12b      	cbz	r3, 800dcf6 <USBD_LL_DataInStage+0x70>
 800dcea:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800dcee:	2a03      	cmp	r2, #3
 800dcf0:	d101      	bne.n	800dcf6 <USBD_LL_DataInStage+0x70>
            pdev->pClass->EP0_TxSent(pdev);
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dcf6:	2180      	movs	r1, #128	; 0x80
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	f004 fbf9 	bl	80124f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dcfe:	4620      	mov	r0, r4
 800dd00:	f000 fae3 	bl	800e2ca <USBD_CtlReceiveStatus>
 800dd04:	e7d7      	b.n	800dcb6 <USBD_LL_DataInStage+0x30>
  else if ((pdev->pClass->DataIn != NULL) &&
 800dd06:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	b133      	cbz	r3, 800dd1c <USBD_LL_DataInStage+0x96>
 800dd0e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800dd12:	2a03      	cmp	r2, #3
 800dd14:	d102      	bne.n	800dd1c <USBD_LL_DataInStage+0x96>
}
 800dd16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800dd1a:	4718      	bx	r3
    return USBD_FAIL;
 800dd1c:	2003      	movs	r0, #3
 800dd1e:	e7d1      	b.n	800dcc4 <USBD_LL_DataInStage+0x3e>

0800dd20 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd20:	2301      	movs	r3, #1
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd22:	2100      	movs	r1, #0
{
 800dd24:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd26:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
{
 800dd2a:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 800dd2c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd30:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800dd34:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800dd36:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 800dd3a:	b11b      	cbz	r3, 800dd44 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dd3c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd44:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd46:	2540      	movs	r5, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dd48:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd4a:	2340      	movs	r3, #64	; 0x40
 800dd4c:	4611      	mov	r1, r2
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f004 fbb0 	bl	80124b4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dd54:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd58:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd5c:	462b      	mov	r3, r5
 800dd5e:	2200      	movs	r2, #0
 800dd60:	2180      	movs	r1, #128	; 0x80
 800dd62:	4620      	mov	r0, r4
 800dd64:	f004 fba6 	bl	80124b4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dd68:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd6a:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	bd70      	pop	{r4, r5, r6, pc}

0800dd70 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800dd70:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800dd72:	2000      	movs	r0, #0
 800dd74:	4770      	bx	lr

0800dd76 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800dd76:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dd7a:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dd7e:	2304      	movs	r3, #4
 800dd80:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800dd84:	2000      	movs	r0, #0
 800dd86:	4770      	bx	lr

0800dd88 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dd88:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dd8c:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800dd8e:	bf04      	itt	eq
 800dd90:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800dd94:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800dd98:	2000      	movs	r0, #0
 800dd9a:	4770      	bx	lr

0800dd9c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dd9c:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd9e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800dda2:	2a03      	cmp	r2, #3
 800dda4:	d104      	bne.n	800ddb0 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800dda6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ddaa:	69db      	ldr	r3, [r3, #28]
 800ddac:	b103      	cbz	r3, 800ddb0 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800ddae:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	bd08      	pop	{r3, pc}

0800ddb4 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	4770      	bx	lr

0800ddb8 <USBD_LL_IsoOUTIncomplete>:
 800ddb8:	2000      	movs	r0, #0
 800ddba:	4770      	bx	lr

0800ddbc <USBD_LL_DevConnected>:
 800ddbc:	2000      	movs	r0, #0
 800ddbe:	4770      	bx	lr

0800ddc0 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ddc0:	2201      	movs	r2, #1
{
 800ddc2:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ddc4:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ddc8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800ddcc:	b112      	cbz	r2, 800ddd4 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ddce:	6852      	ldr	r2, [r2, #4]
 800ddd0:	7901      	ldrb	r1, [r0, #4]
 800ddd2:	4790      	blx	r2
  }

  return USBD_OK;
}
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	bd08      	pop	{r3, pc}

0800ddd8 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 800ddd8:	b510      	push	{r4, lr}
 800ddda:	4604      	mov	r4, r0
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dddc:	2180      	movs	r1, #128	; 0x80
 800ddde:	f004 fb87 	bl	80124f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dde2:	2100      	movs	r1, #0
 800dde4:	4620      	mov	r0, r4
}
 800dde6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800ddea:	f004 bb81 	b.w	80124f0 <USBD_LL_StallEP>
	...

0800ddf0 <USBD_StdDevReq>:
{
 800ddf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddf2:	780b      	ldrb	r3, [r1, #0]
{
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ddfc:	2b20      	cmp	r3, #32
 800ddfe:	d012      	beq.n	800de26 <USBD_StdDevReq+0x36>
 800de00:	2b40      	cmp	r3, #64	; 0x40
 800de02:	d010      	beq.n	800de26 <USBD_StdDevReq+0x36>
 800de04:	2b00      	cmp	r3, #0
 800de06:	d158      	bne.n	800deba <USBD_StdDevReq+0xca>
    switch (req->bRequest)
 800de08:	784b      	ldrb	r3, [r1, #1]
 800de0a:	2b09      	cmp	r3, #9
 800de0c:	d855      	bhi.n	800deba <USBD_StdDevReq+0xca>
 800de0e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800de12:	0100      	.short	0x0100
 800de14:	0054011e 	.word	0x0054011e
 800de18:	00540115 	.word	0x00540115
 800de1c:	00140081 	.word	0x00140081
 800de20:	00e90054 	.word	0x00e90054
 800de24:	00a0      	.short	0x00a0
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de26:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800de2a:	4631      	mov	r1, r6
 800de2c:	4620      	mov	r0, r4
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	4798      	blx	r3
 800de32:	4605      	mov	r5, r0
}
 800de34:	4628      	mov	r0, r5
 800de36:	b003      	add	sp, #12
 800de38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t len = 0U;
 800de3a:	2300      	movs	r3, #0
 800de3c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800de40:	884b      	ldrh	r3, [r1, #2]
 800de42:	0a1a      	lsrs	r2, r3, #8
 800de44:	3a01      	subs	r2, #1
 800de46:	2a06      	cmp	r2, #6
 800de48:	d837      	bhi.n	800deba <USBD_StdDevReq+0xca>
 800de4a:	e8df f002 	tbb	[pc, r2]
 800de4e:	1c04      	.short	0x1c04
 800de50:	4e363629 	.word	0x4e363629
 800de54:	58          	.byte	0x58
 800de55:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800de56:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800de5a:	681b      	ldr	r3, [r3, #0]
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800de5c:	f10d 0106 	add.w	r1, sp, #6
 800de60:	7c20      	ldrb	r0, [r4, #16]
 800de62:	4798      	blx	r3
    if (req->wLength != 0U)
 800de64:	88f2      	ldrh	r2, [r6, #6]
 800de66:	2a00      	cmp	r2, #0
 800de68:	f000 80ed 	beq.w	800e046 <USBD_StdDevReq+0x256>
      if (len != 0U)
 800de6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800de70:	b31b      	cbz	r3, 800deba <USBD_StdDevReq+0xca>
        len = MIN(len, req->wLength);
 800de72:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800de74:	4601      	mov	r1, r0
        len = MIN(len, req->wLength);
 800de76:	bf28      	it	cs
 800de78:	461a      	movcs	r2, r3
 800de7a:	f8ad 2006 	strh.w	r2, [sp, #6]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800de7e:	4620      	mov	r0, r4
 800de80:	f000 f9ec 	bl	800e25c <USBD_CtlSendData>
 800de84:	e05f      	b.n	800df46 <USBD_StdDevReq+0x156>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de86:	7c02      	ldrb	r2, [r0, #16]
 800de88:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800de8c:	b932      	cbnz	r2, 800de9c <USBD_StdDevReq+0xac>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800de8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800de90:	f10d 0006 	add.w	r0, sp, #6
 800de94:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800de96:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800de98:	7043      	strb	r3, [r0, #1]
 800de9a:	e7e3      	b.n	800de64 <USBD_StdDevReq+0x74>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800de9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9e:	e7f7      	b.n	800de90 <USBD_StdDevReq+0xa0>
    switch ((uint8_t)(req->wValue))
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	2b05      	cmp	r3, #5
 800dea4:	d809      	bhi.n	800deba <USBD_StdDevReq+0xca>
 800dea6:	e8df f003 	tbb	[pc, r3]
 800deaa:	0c03      	.short	0x0c03
 800deac:	1c181410 	.word	0x1c181410
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800deb0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800deb4:	685b      	ldr	r3, [r3, #4]
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1d0      	bne.n	800de5c <USBD_StdDevReq+0x6c>
      USBD_CtlError(pdev, req);
 800deba:	4620      	mov	r0, r4
 800debc:	f7ff ff8c 	bl	800ddd8 <USBD_CtlError.constprop.1>
 800dec0:	e041      	b.n	800df46 <USBD_StdDevReq+0x156>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dec2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	e7f5      	b.n	800deb6 <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800deca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	e7f1      	b.n	800deb6 <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ded2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ded6:	691b      	ldr	r3, [r3, #16]
 800ded8:	e7ed      	b.n	800deb6 <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800deda:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dede:	695b      	ldr	r3, [r3, #20]
 800dee0:	e7e9      	b.n	800deb6 <USBD_StdDevReq+0xc6>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dee2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dee6:	699b      	ldr	r3, [r3, #24]
 800dee8:	e7e5      	b.n	800deb6 <USBD_StdDevReq+0xc6>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800deea:	7c03      	ldrb	r3, [r0, #16]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d1e4      	bne.n	800deba <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800def0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800def4:	f10d 0006 	add.w	r0, sp, #6
 800def8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800defa:	4798      	blx	r3
 800defc:	e7b2      	b.n	800de64 <USBD_StdDevReq+0x74>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800defe:	7c03      	ldrb	r3, [r0, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1da      	bne.n	800deba <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800df04:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800df08:	f10d 0006 	add.w	r0, sp, #6
 800df0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df0e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df10:	2307      	movs	r3, #7
 800df12:	e7c1      	b.n	800de98 <USBD_StdDevReq+0xa8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800df14:	888b      	ldrh	r3, [r1, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d1cf      	bne.n	800deba <USBD_StdDevReq+0xca>
 800df1a:	88cf      	ldrh	r7, [r1, #6]
 800df1c:	2f00      	cmp	r7, #0
 800df1e:	d1cc      	bne.n	800deba <USBD_StdDevReq+0xca>
 800df20:	884d      	ldrh	r5, [r1, #2]
 800df22:	2d7f      	cmp	r5, #127	; 0x7f
 800df24:	d8c9      	bhi.n	800deba <USBD_StdDevReq+0xca>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df26:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800df2a:	2b03      	cmp	r3, #3
 800df2c:	d0c5      	beq.n	800deba <USBD_StdDevReq+0xca>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800df2e:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800df30:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800df34:	f004 fb0c 	bl	8012550 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800df38:	4620      	mov	r0, r4
 800df3a:	f000 f9bb 	bl	800e2b4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800df3e:	b125      	cbz	r5, 800df4a <USBD_StdDevReq+0x15a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df40:	2302      	movs	r3, #2
 800df42:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
  USBD_StatusTypeDef ret = USBD_OK;
 800df46:	2500      	movs	r5, #0
 800df48:	e774      	b.n	800de34 <USBD_StdDevReq+0x44>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800df4a:	2301      	movs	r3, #1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df4c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800df50:	e770      	b.n	800de34 <USBD_StdDevReq+0x44>
  cfgidx = (uint8_t)(req->wValue);
 800df52:	788d      	ldrb	r5, [r1, #2]
 800df54:	4e45      	ldr	r6, [pc, #276]	; (800e06c <USBD_StdDevReq+0x27c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800df56:	2d01      	cmp	r5, #1
  cfgidx = (uint8_t)(req->wValue);
 800df58:	7035      	strb	r5, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800df5a:	d903      	bls.n	800df64 <USBD_StdDevReq+0x174>
    USBD_CtlError(pdev, req);
 800df5c:	f7ff ff3c 	bl	800ddd8 <USBD_CtlError.constprop.1>
    ret = USBD_FAIL;
 800df60:	2503      	movs	r5, #3
 800df62:	e767      	b.n	800de34 <USBD_StdDevReq+0x44>
  switch (pdev->dev_state)
 800df64:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800df68:	2b02      	cmp	r3, #2
 800df6a:	d008      	beq.n	800df7e <USBD_StdDevReq+0x18e>
 800df6c:	2b03      	cmp	r3, #3
 800df6e:	d016      	beq.n	800df9e <USBD_StdDevReq+0x1ae>
    USBD_CtlError(pdev, req);
 800df70:	f7ff ff32 	bl	800ddd8 <USBD_CtlError.constprop.1>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df74:	7831      	ldrb	r1, [r6, #0]
 800df76:	4620      	mov	r0, r4
 800df78:	f7ff fe1a 	bl	800dbb0 <USBD_ClrClassConfig>
 800df7c:	e7f0      	b.n	800df60 <USBD_StdDevReq+0x170>
    if (cfgidx != 0U)
 800df7e:	2d00      	cmp	r5, #0
 800df80:	d061      	beq.n	800e046 <USBD_StdDevReq+0x256>
      pdev->dev_config = cfgidx;
 800df82:	2101      	movs	r1, #1
 800df84:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800df86:	f7ff fe0c 	bl	800dba2 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800df8a:	4605      	mov	r5, r0
        USBD_CtlError(pdev, req);
 800df8c:	4620      	mov	r0, r4
      if (ret != USBD_OK)
 800df8e:	b115      	cbz	r5, 800df96 <USBD_StdDevReq+0x1a6>
        USBD_CtlError(pdev, req);
 800df90:	f7ff ff22 	bl	800ddd8 <USBD_CtlError.constprop.1>
 800df94:	e74e      	b.n	800de34 <USBD_StdDevReq+0x44>
        (void)USBD_CtlSendStatus(pdev);
 800df96:	f000 f98d 	bl	800e2b4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800df9a:	2303      	movs	r3, #3
 800df9c:	e7d6      	b.n	800df4c <USBD_StdDevReq+0x15c>
    if (cfgidx == 0U)
 800df9e:	b955      	cbnz	r5, 800dfb6 <USBD_StdDevReq+0x1c6>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfa0:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 800dfa2:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dfa4:	4629      	mov	r1, r5
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfa6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dfaa:	f7ff fe01 	bl	800dbb0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f000 f980 	bl	800e2b4 <USBD_CtlSendStatus>
 800dfb4:	e73e      	b.n	800de34 <USBD_StdDevReq+0x44>
    else if (cfgidx != pdev->dev_config)
 800dfb6:	6841      	ldr	r1, [r0, #4]
 800dfb8:	2901      	cmp	r1, #1
 800dfba:	d044      	beq.n	800e046 <USBD_StdDevReq+0x256>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dfbc:	b2c9      	uxtb	r1, r1
 800dfbe:	f7ff fdf7 	bl	800dbb0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800dfc2:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800dfc4:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 800dfc6:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800dfc8:	f7ff fdeb 	bl	800dba2 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800dfcc:	4605      	mov	r5, r0
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d039      	beq.n	800e046 <USBD_StdDevReq+0x256>
        USBD_CtlError(pdev, req);
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	f7ff ff00 	bl	800ddd8 <USBD_CtlError.constprop.1>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dfd8:	7921      	ldrb	r1, [r4, #4]
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f7ff fde8 	bl	800dbb0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfe0:	2302      	movs	r3, #2
 800dfe2:	e7b3      	b.n	800df4c <USBD_StdDevReq+0x15c>
  if (req->wLength != 1U)
 800dfe4:	88ca      	ldrh	r2, [r1, #6]
 800dfe6:	2a01      	cmp	r2, #1
 800dfe8:	f47f af67 	bne.w	800deba <USBD_StdDevReq+0xca>
    switch (pdev->dev_state)
 800dfec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f43f af62 	beq.w	800deba <USBD_StdDevReq+0xca>
 800dff6:	2b02      	cmp	r3, #2
 800dff8:	d904      	bls.n	800e004 <USBD_StdDevReq+0x214>
 800dffa:	2b03      	cmp	r3, #3
 800dffc:	f47f af5d 	bne.w	800deba <USBD_StdDevReq+0xca>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e000:	1d01      	adds	r1, r0, #4
 800e002:	e73c      	b.n	800de7e <USBD_StdDevReq+0x8e>
      pdev->dev_default_config = 0U;
 800e004:	2500      	movs	r5, #0
 800e006:	4601      	mov	r1, r0
 800e008:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e00c:	f000 f926 	bl	800e25c <USBD_CtlSendData>
 800e010:	e710      	b.n	800de34 <USBD_StdDevReq+0x44>
  switch (pdev->dev_state)
 800e012:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e016:	3b01      	subs	r3, #1
 800e018:	2b02      	cmp	r3, #2
 800e01a:	f63f af4e 	bhi.w	800deba <USBD_StdDevReq+0xca>
    if (req->wLength != 0x2U)
 800e01e:	88cb      	ldrh	r3, [r1, #6]
 800e020:	2b02      	cmp	r3, #2
 800e022:	f47f af4a 	bne.w	800deba <USBD_StdDevReq+0xca>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e026:	2301      	movs	r3, #1
 800e028:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800e02a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800e02e:	b10b      	cbz	r3, 800e034 <USBD_StdDevReq+0x244>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e030:	2303      	movs	r3, #3
 800e032:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e034:	2202      	movs	r2, #2
 800e036:	f104 010c 	add.w	r1, r4, #12
 800e03a:	e720      	b.n	800de7e <USBD_StdDevReq+0x8e>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e03c:	884b      	ldrh	r3, [r1, #2]
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d181      	bne.n	800df46 <USBD_StdDevReq+0x156>
    pdev->dev_remote_wakeup = 1U;
 800e042:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e046:	4620      	mov	r0, r4
 800e048:	f000 f934 	bl	800e2b4 <USBD_CtlSendStatus>
 800e04c:	e77b      	b.n	800df46 <USBD_StdDevReq+0x156>
  switch (pdev->dev_state)
 800e04e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e052:	3b01      	subs	r3, #1
 800e054:	2b02      	cmp	r3, #2
 800e056:	f63f af30 	bhi.w	800deba <USBD_StdDevReq+0xca>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e05a:	884b      	ldrh	r3, [r1, #2]
 800e05c:	2500      	movs	r5, #0
 800e05e:	2b01      	cmp	r3, #1
 800e060:	f47f aee8 	bne.w	800de34 <USBD_StdDevReq+0x44>
        pdev->dev_remote_wakeup = 0U;
 800e064:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
 800e068:	e7a1      	b.n	800dfae <USBD_StdDevReq+0x1be>
 800e06a:	bf00      	nop
 800e06c:	24000334 	.word	0x24000334

0800e070 <USBD_StdItfReq>:
{
 800e070:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e072:	780b      	ldrb	r3, [r1, #0]
{
 800e074:	4604      	mov	r4, r0
 800e076:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e078:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e07c:	2b20      	cmp	r3, #32
 800e07e:	d002      	beq.n	800e086 <USBD_StdItfReq+0x16>
 800e080:	2b40      	cmp	r3, #64	; 0x40
 800e082:	d000      	beq.n	800e086 <USBD_StdItfReq+0x16>
 800e084:	b9b3      	cbnz	r3, 800e0b4 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 800e086:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800e08a:	3b01      	subs	r3, #1
 800e08c:	2b02      	cmp	r3, #2
 800e08e:	d811      	bhi.n	800e0b4 <USBD_StdItfReq+0x44>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e090:	7933      	ldrb	r3, [r6, #4]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d80e      	bhi.n	800e0b4 <USBD_StdItfReq+0x44>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e096:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e09a:	4631      	mov	r1, r6
 800e09c:	4620      	mov	r0, r4
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e0a2:	88f3      	ldrh	r3, [r6, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e0a4:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e0a6:	b91b      	cbnz	r3, 800e0b0 <USBD_StdItfReq+0x40>
 800e0a8:	b910      	cbnz	r0, 800e0b0 <USBD_StdItfReq+0x40>
          (void)USBD_CtlSendStatus(pdev);
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f000 f902 	bl	800e2b4 <USBD_CtlSendStatus>
}
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlError(pdev, req);
 800e0b4:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800e0b6:	2500      	movs	r5, #0
      USBD_CtlError(pdev, req);
 800e0b8:	f7ff fe8e 	bl	800ddd8 <USBD_CtlError.constprop.1>
      break;
 800e0bc:	e7f8      	b.n	800e0b0 <USBD_StdItfReq+0x40>

0800e0be <USBD_StdEPReq>:
{
 800e0be:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0c0:	780b      	ldrb	r3, [r1, #0]
{
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0ca:	2b20      	cmp	r3, #32
 800e0cc:	d014      	beq.n	800e0f8 <USBD_StdEPReq+0x3a>
 800e0ce:	2b40      	cmp	r3, #64	; 0x40
 800e0d0:	d012      	beq.n	800e0f8 <USBD_StdEPReq+0x3a>
 800e0d2:	b96b      	cbnz	r3, 800e0f0 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 800e0d4:	786a      	ldrb	r2, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800e0d6:	888b      	ldrh	r3, [r1, #4]
    switch (req->bRequest)
 800e0d8:	2a01      	cmp	r2, #1
  ep_addr = LOBYTE(req->wIndex);
 800e0da:	b2d9      	uxtb	r1, r3
    switch (req->bRequest)
 800e0dc:	d021      	beq.n	800e122 <USBD_StdEPReq+0x64>
 800e0de:	d340      	bcc.n	800e162 <USBD_StdEPReq+0xa4>
 800e0e0:	2a03      	cmp	r2, #3
 800e0e2:	d105      	bne.n	800e0f0 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 800e0e4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e0e8:	2b02      	cmp	r3, #2
 800e0ea:	d031      	beq.n	800e150 <USBD_StdEPReq+0x92>
 800e0ec:	2b03      	cmp	r3, #3
 800e0ee:	d00b      	beq.n	800e108 <USBD_StdEPReq+0x4a>
        USBD_CtlError(pdev, req);
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f7ff fe71 	bl	800ddd8 <USBD_CtlError.constprop.1>
        break;
 800e0f6:	e012      	b.n	800e11e <USBD_StdEPReq+0x60>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e0f8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	4620      	mov	r0, r4
 800e100:	689b      	ldr	r3, [r3, #8]
}
 800e102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e106:	4718      	bx	r3
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e108:	886b      	ldrh	r3, [r5, #2]
 800e10a:	b92b      	cbnz	r3, 800e118 <USBD_StdEPReq+0x5a>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e10c:	064a      	lsls	r2, r1, #25
 800e10e:	d003      	beq.n	800e118 <USBD_StdEPReq+0x5a>
 800e110:	88eb      	ldrh	r3, [r5, #6]
 800e112:	b90b      	cbnz	r3, 800e118 <USBD_StdEPReq+0x5a>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800e114:	f004 f9ec 	bl	80124f0 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 800e118:	4620      	mov	r0, r4
 800e11a:	f000 f8cb 	bl	800e2b4 <USBD_CtlSendStatus>
}
 800e11e:	2000      	movs	r0, #0
 800e120:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800e122:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e126:	2b02      	cmp	r3, #2
 800e128:	d012      	beq.n	800e150 <USBD_StdEPReq+0x92>
 800e12a:	2b03      	cmp	r3, #3
 800e12c:	d1e0      	bne.n	800e0f0 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e12e:	886b      	ldrh	r3, [r5, #2]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1f4      	bne.n	800e11e <USBD_StdEPReq+0x60>
          if ((ep_addr & 0x7FU) != 0x00U)
 800e134:	064e      	lsls	r6, r1, #25
 800e136:	d001      	beq.n	800e13c <USBD_StdEPReq+0x7e>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e138:	f004 f9e8 	bl	801250c <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 800e13c:	4620      	mov	r0, r4
 800e13e:	f000 f8b9 	bl	800e2b4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e142:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e146:	4629      	mov	r1, r5
 800e148:	4620      	mov	r0, r4
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	4798      	blx	r3
 800e14e:	e7e6      	b.n	800e11e <USBD_StdEPReq+0x60>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e150:	064b      	lsls	r3, r1, #25
 800e152:	d0cd      	beq.n	800e0f0 <USBD_StdEPReq+0x32>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e154:	f004 f9cc 	bl	80124f0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e158:	2180      	movs	r1, #128	; 0x80
 800e15a:	4620      	mov	r0, r4
 800e15c:	f004 f9c8 	bl	80124f0 <USBD_LL_StallEP>
 800e160:	e7dd      	b.n	800e11e <USBD_StdEPReq+0x60>
      switch (pdev->dev_state)
 800e162:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e166:	2a02      	cmp	r2, #2
 800e168:	d019      	beq.n	800e19e <USBD_StdEPReq+0xe0>
 800e16a:	2a03      	cmp	r2, #3
 800e16c:	d1c0      	bne.n	800e0f0 <USBD_StdEPReq+0x32>
 800e16e:	f001 020f 	and.w	r2, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 800e172:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e176:	f04f 0314 	mov.w	r3, #20
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e17a:	fb03 0202 	mla	r2, r3, r2, r0
        if ((ep_addr & 0x80U) == 0x80U)
 800e17e:	d01f      	beq.n	800e1c0 <USBD_StdEPReq+0x102>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e180:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800e182:	2a00      	cmp	r2, #0
 800e184:	d0b4      	beq.n	800e0f0 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e186:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800e18a:	fb05 3503 	mla	r5, r5, r3, r3
 800e18e:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e190:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800e194:	d11f      	bne.n	800e1d6 <USBD_StdEPReq+0x118>
            pep->status = 0x0001U;
 800e196:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e198:	2202      	movs	r2, #2
 800e19a:	4629      	mov	r1, r5
 800e19c:	e00c      	b.n	800e1b8 <USBD_StdEPReq+0xfa>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e19e:	064a      	lsls	r2, r1, #25
 800e1a0:	d1a6      	bne.n	800e0f0 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1a2:	061b      	lsls	r3, r3, #24
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e1a4:	f04f 0202 	mov.w	r2, #2
        pep->status = 0x0000U;
 800e1a8:	f04f 0300 	mov.w	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1ac:	bf4c      	ite	mi
 800e1ae:	f100 0114 	addmi.w	r1, r0, #20
 800e1b2:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
        pep->status = 0x0000U;
 800e1b6:	600b      	str	r3, [r1, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f000 f84f 	bl	800e25c <USBD_CtlSendData>
          break;
 800e1be:	e7ae      	b.n	800e11e <USBD_StdEPReq+0x60>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e1c0:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800e1c4:	2a00      	cmp	r2, #0
 800e1c6:	d093      	beq.n	800e0f0 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1c8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800e1cc:	fb03 0505 	mla	r5, r3, r5, r0
 800e1d0:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800e1d4:	e7dc      	b.n	800e190 <USBD_StdEPReq+0xd2>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f004 f9a6 	bl	8012528 <USBD_LL_IsStallEP>
 800e1dc:	b108      	cbz	r0, 800e1e2 <USBD_StdEPReq+0x124>
            pep->status = 0x0001U;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	e7d9      	b.n	800e196 <USBD_StdEPReq+0xd8>
            pep->status = 0x0000U;
 800e1e2:	6028      	str	r0, [r5, #0]
 800e1e4:	e7d8      	b.n	800e198 <USBD_StdEPReq+0xda>

0800e1e6 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800e1e6:	780b      	ldrb	r3, [r1, #0]
 800e1e8:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800e1ea:	784b      	ldrb	r3, [r1, #1]
 800e1ec:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e1ee:	78ca      	ldrb	r2, [r1, #3]
 800e1f0:	788b      	ldrb	r3, [r1, #2]
 800e1f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800e1f6:	8043      	strh	r3, [r0, #2]
 800e1f8:	794a      	ldrb	r2, [r1, #5]
 800e1fa:	790b      	ldrb	r3, [r1, #4]
 800e1fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800e200:	8083      	strh	r3, [r0, #4]
 800e202:	79ca      	ldrb	r2, [r1, #7]
 800e204:	798b      	ldrb	r3, [r1, #6]
 800e206:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800e20a:	80c3      	strh	r3, [r0, #6]
}
 800e20c:	4770      	bx	lr

0800e20e <USBD_CtlError>:
{
 800e20e:	b510      	push	{r4, lr}
 800e210:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e212:	2180      	movs	r1, #128	; 0x80
 800e214:	f004 f96c 	bl	80124f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e218:	2100      	movs	r1, #0
 800e21a:	4620      	mov	r0, r4
}
 800e21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800e220:	f004 b966 	b.w	80124f0 <USBD_LL_StallEP>

0800e224 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e224:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800e226:	b188      	cbz	r0, 800e24c <USBD_GetString+0x28>
 800e228:	4605      	mov	r5, r0
 800e22a:	1a2b      	subs	r3, r5, r0
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800e22c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e230:	b2db      	uxtb	r3, r3
 800e232:	2c00      	cmp	r4, #0
 800e234:	d1f9      	bne.n	800e22a <USBD_GetString+0x6>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e236:	3301      	adds	r3, #1
 800e238:	3801      	subs	r0, #1
 800e23a:	005b      	lsls	r3, r3, #1
 800e23c:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800e23e:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e240:	2303      	movs	r3, #3
 800e242:	704b      	strb	r3, [r1, #1]
  idx++;
 800e244:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800e246:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800e24a:	b902      	cbnz	r2, 800e24e <USBD_GetString+0x2a>
}
 800e24c:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 800e24e:	54ca      	strb	r2, [r1, r3]
    idx++;
 800e250:	1c5a      	adds	r2, r3, #1
    idx++;
 800e252:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800e254:	b2d2      	uxtb	r2, r2
    idx++;
 800e256:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800e258:	548c      	strb	r4, [r1, r2]
 800e25a:	e7f4      	b.n	800e246 <USBD_GetString+0x22>

0800e25c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e25c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e25e:	2202      	movs	r2, #2
{
 800e260:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e262:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e266:	460a      	mov	r2, r1
 800e268:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length = len;
 800e26a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e26e:	f004 f97d 	bl	801256c <USBD_LL_Transmit>

  return USBD_OK;
}
 800e272:	2000      	movs	r0, #0
 800e274:	bd10      	pop	{r4, pc}

0800e276 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e276:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e278:	4613      	mov	r3, r2
 800e27a:	460a      	mov	r2, r1
 800e27c:	2100      	movs	r1, #0
 800e27e:	f004 f975 	bl	801256c <USBD_LL_Transmit>

  return USBD_OK;
}
 800e282:	2000      	movs	r0, #0
 800e284:	bd08      	pop	{r3, pc}

0800e286 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e286:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e288:	2203      	movs	r2, #3
{
 800e28a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e28c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e290:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 800e292:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e296:	2100      	movs	r1, #0
  pdev->ep_out[0].rem_length = len;
 800e298:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e29c:	f004 f974 	bl	8012588 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	bd10      	pop	{r4, pc}

0800e2a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e2a4:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	460a      	mov	r2, r1
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	f004 f96c 	bl	8012588 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	bd08      	pop	{r3, pc}

0800e2b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e2b4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e2b6:	2304      	movs	r3, #4
 800e2b8:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e2bc:	2300      	movs	r3, #0
 800e2be:	461a      	mov	r2, r3
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	f004 f953 	bl	801256c <USBD_LL_Transmit>

  return USBD_OK;
}
 800e2c6:	2000      	movs	r0, #0
 800e2c8:	bd08      	pop	{r3, pc}

0800e2ca <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e2ca:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e2cc:	2305      	movs	r3, #5
 800e2ce:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	f004 f956 	bl	8012588 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e2dc:	2000      	movs	r0, #0
 800e2de:	bd08      	pop	{r3, pc}

0800e2e0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e2e0:	4b03      	ldr	r3, [pc, #12]	; (800e2f0 <disk_status+0x10>)
 800e2e2:	181a      	adds	r2, r3, r0
 800e2e4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	7a10      	ldrb	r0, [r2, #8]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	4718      	bx	r3
 800e2f0:	24000360 	.word	0x24000360

0800e2f4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800e2f4:	4b06      	ldr	r3, [pc, #24]	; (800e310 <disk_initialize+0x1c>)
 800e2f6:	5c1a      	ldrb	r2, [r3, r0]
 800e2f8:	b942      	cbnz	r2, 800e30c <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e2fe:	181a      	adds	r2, r3, r0
 800e300:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e304:	7a10      	ldrb	r0, [r2, #8]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4718      	bx	r3
  }
  return stat;
}
 800e30c:	2000      	movs	r0, #0
 800e30e:	4770      	bx	lr
 800e310:	24000360 	.word	0x24000360

0800e314 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e314:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e316:	4c05      	ldr	r4, [pc, #20]	; (800e32c <disk_read+0x18>)
 800e318:	1825      	adds	r5, r4, r0
 800e31a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800e31e:	6860      	ldr	r0, [r4, #4]
 800e320:	6884      	ldr	r4, [r0, #8]
 800e322:	7a28      	ldrb	r0, [r5, #8]
 800e324:	46a4      	mov	ip, r4
  return res;
}
 800e326:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e328:	4760      	bx	ip
 800e32a:	bf00      	nop
 800e32c:	24000360 	.word	0x24000360

0800e330 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e330:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e332:	4c05      	ldr	r4, [pc, #20]	; (800e348 <disk_write+0x18>)
 800e334:	1825      	adds	r5, r4, r0
 800e336:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800e33a:	6860      	ldr	r0, [r4, #4]
 800e33c:	68c4      	ldr	r4, [r0, #12]
 800e33e:	7a28      	ldrb	r0, [r5, #8]
 800e340:	46a4      	mov	ip, r4
  return res;
}
 800e342:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e344:	4760      	bx	ip
 800e346:	bf00      	nop
 800e348:	24000360 	.word	0x24000360

0800e34c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e34c:	4b05      	ldr	r3, [pc, #20]	; (800e364 <disk_ioctl+0x18>)
{
 800e34e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e350:	181c      	adds	r4, r3, r0
 800e352:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	7a20      	ldrb	r0, [r4, #8]
 800e35a:	691b      	ldr	r3, [r3, #16]
  return res;
}
 800e35c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e360:	4718      	bx	r3
 800e362:	bf00      	nop
 800e364:	24000360 	.word	0x24000360

0800e368 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 800e368:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 800e36a:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 800e36c:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 800e36e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 800e372:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800e376:	4770      	bx	lr

0800e378 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800e378:	0a0b      	lsrs	r3, r1, #8
 800e37a:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e37c:	7043      	strb	r3, [r0, #1]
 800e37e:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e380:	0e09      	lsrs	r1, r1, #24
 800e382:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800e384:	70c1      	strb	r1, [r0, #3]
}
 800e386:	4770      	bx	lr

0800e388 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e388:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800e38a:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800e38e:	4290      	cmp	r0, r2
 800e390:	d1fb      	bne.n	800e38a <mem_set+0x2>
}
 800e392:	4770      	bx	lr

0800e394 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800e394:	4a1b      	ldr	r2, [pc, #108]	; (800e404 <chk_lock+0x70>)
 800e396:	6813      	ldr	r3, [r2, #0]
{
 800e398:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 800e39a:	b163      	cbz	r3, 800e3b6 <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e39c:	6804      	ldr	r4, [r0, #0]
 800e39e:	429c      	cmp	r4, r3
 800e3a0:	d107      	bne.n	800e3b2 <chk_lock+0x1e>
 800e3a2:	6854      	ldr	r4, [r2, #4]
 800e3a4:	6883      	ldr	r3, [r0, #8]
 800e3a6:	429c      	cmp	r4, r3
 800e3a8:	d103      	bne.n	800e3b2 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 800e3aa:	6894      	ldr	r4, [r2, #8]
 800e3ac:	6943      	ldr	r3, [r0, #20]
 800e3ae:	429c      	cmp	r4, r3
 800e3b0:	d020      	beq.n	800e3f4 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e3b2:	2400      	movs	r4, #0
 800e3b4:	e000      	b.n	800e3b8 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800e3b6:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 800e3b8:	6913      	ldr	r3, [r2, #16]
 800e3ba:	b1cb      	cbz	r3, 800e3f0 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e3bc:	6805      	ldr	r5, [r0, #0]
 800e3be:	42ab      	cmp	r3, r5
 800e3c0:	d107      	bne.n	800e3d2 <chk_lock+0x3e>
 800e3c2:	6955      	ldr	r5, [r2, #20]
 800e3c4:	6883      	ldr	r3, [r0, #8]
 800e3c6:	429d      	cmp	r5, r3
 800e3c8:	d103      	bne.n	800e3d2 <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 800e3ca:	6995      	ldr	r5, [r2, #24]
 800e3cc:	6943      	ldr	r3, [r0, #20]
 800e3ce:	429d      	cmp	r5, r3
 800e3d0:	d015      	beq.n	800e3fe <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e3d2:	b96c      	cbnz	r4, 800e3f0 <chk_lock+0x5c>
 800e3d4:	2902      	cmp	r1, #2
 800e3d6:	bf0c      	ite	eq
 800e3d8:	2000      	moveq	r0, #0
 800e3da:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 800e3dc:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e3de:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800e3e2:	8993      	ldrh	r3, [r2, #12]
 800e3e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3e8:	bf14      	ite	ne
 800e3ea:	2000      	movne	r0, #0
 800e3ec:	2010      	moveq	r0, #16
 800e3ee:	e7f5      	b.n	800e3dc <chk_lock+0x48>
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	e7f3      	b.n	800e3dc <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e3f4:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e3f6:	2900      	cmp	r1, #0
 800e3f8:	d0f1      	beq.n	800e3de <chk_lock+0x4a>
 800e3fa:	2010      	movs	r0, #16
 800e3fc:	e7ee      	b.n	800e3dc <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e3fe:	2301      	movs	r3, #1
 800e400:	e7f9      	b.n	800e3f6 <chk_lock+0x62>
 800e402:	bf00      	nop
 800e404:	2400033c 	.word	0x2400033c

0800e408 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800e408:	4a1e      	ldr	r2, [pc, #120]	; (800e484 <inc_lock+0x7c>)
{
 800e40a:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 800e40c:	6813      	ldr	r3, [r2, #0]
 800e40e:	6805      	ldr	r5, [r0, #0]
 800e410:	429d      	cmp	r5, r3
 800e412:	d107      	bne.n	800e424 <inc_lock+0x1c>
 800e414:	6856      	ldr	r6, [r2, #4]
 800e416:	6884      	ldr	r4, [r0, #8]
 800e418:	42a6      	cmp	r6, r4
 800e41a:	d103      	bne.n	800e424 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 800e41c:	6946      	ldr	r6, [r0, #20]
 800e41e:	6894      	ldr	r4, [r2, #8]
 800e420:	42a6      	cmp	r6, r4
 800e422:	d021      	beq.n	800e468 <inc_lock+0x60>
		if (Files[i].fs == dp->obj.fs &&
 800e424:	6914      	ldr	r4, [r2, #16]
 800e426:	42ac      	cmp	r4, r5
 800e428:	d107      	bne.n	800e43a <inc_lock+0x32>
 800e42a:	6957      	ldr	r7, [r2, #20]
 800e42c:	6886      	ldr	r6, [r0, #8]
 800e42e:	42b7      	cmp	r7, r6
 800e430:	d103      	bne.n	800e43a <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 800e432:	6997      	ldr	r7, [r2, #24]
 800e434:	6946      	ldr	r6, [r0, #20]
 800e436:	42b7      	cmp	r7, r6
 800e438:	d020      	beq.n	800e47c <inc_lock+0x74>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e43a:	b10b      	cbz	r3, 800e440 <inc_lock+0x38>
 800e43c:	bb04      	cbnz	r4, 800e480 <inc_lock+0x78>
 800e43e:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 800e440:	011e      	lsls	r6, r3, #4
 800e442:	1994      	adds	r4, r2, r6
 800e444:	5195      	str	r5, [r2, r6]
		Files[i].clu = dp->obj.sclust;
 800e446:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 800e448:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 800e44a:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 800e44c:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 800e44e:	2000      	movs	r0, #0
 800e450:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e452:	b981      	cbnz	r1, 800e476 <inc_lock+0x6e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e454:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800e458:	8989      	ldrh	r1, [r1, #12]
 800e45a:	3101      	adds	r1, #1
 800e45c:	b289      	uxth	r1, r1
 800e45e:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 800e462:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e464:	8191      	strh	r1, [r2, #12]
}
 800e466:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e468:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e46a:	2900      	cmp	r1, #0
 800e46c:	d0f2      	beq.n	800e454 <inc_lock+0x4c>
 800e46e:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800e472:	8989      	ldrh	r1, [r1, #12]
 800e474:	b921      	cbnz	r1, 800e480 <inc_lock+0x78>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e47a:	e7f0      	b.n	800e45e <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e47c:	2301      	movs	r3, #1
 800e47e:	e7f4      	b.n	800e46a <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e480:	2000      	movs	r0, #0
 800e482:	e7f0      	b.n	800e466 <inc_lock+0x5e>
 800e484:	2400033c 	.word	0x2400033c

0800e488 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e488:	3801      	subs	r0, #1
 800e48a:	2801      	cmp	r0, #1
 800e48c:	d814      	bhi.n	800e4b8 <dec_lock+0x30>
		n = Files[i].ctr;
 800e48e:	490b      	ldr	r1, [pc, #44]	; (800e4bc <dec_lock+0x34>)
 800e490:	0102      	lsls	r2, r0, #4
 800e492:	1888      	adds	r0, r1, r2
 800e494:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e49a:	d104      	bne.n	800e4a6 <dec_lock+0x1e>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 800e49c:	2300      	movs	r3, #0
 800e49e:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	5088      	str	r0, [r1, r2]
 800e4a4:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d0fa      	beq.n	800e4a0 <dec_lock+0x18>
 800e4aa:	3b01      	subs	r3, #1
 800e4ac:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 800e4ae:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d0f5      	beq.n	800e4a0 <dec_lock+0x18>
		res = FR_OK;
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e4b8:	2002      	movs	r0, #2
	}
	return res;
}
 800e4ba:	4770      	bx	lr
 800e4bc:	2400033c 	.word	0x2400033c

0800e4c0 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e4c0:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 800e4c2:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e4c4:	3b02      	subs	r3, #2
 800e4c6:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 800e4c8:	bf83      	ittte	hi
 800e4ca:	8943      	ldrhhi	r3, [r0, #10]
 800e4cc:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 800e4ce:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e4d2:	2000      	movls	r0, #0
}
 800e4d4:	4770      	bx	lr

0800e4d6 <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e4d6:	6802      	ldr	r2, [r0, #0]
 800e4d8:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e4da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e4dc:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e4de:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e4e0:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e4e4:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e4e6:	b130      	cbz	r0, 800e4f6 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 800e4e8:	4281      	cmp	r1, r0
 800e4ea:	d302      	bcc.n	800e4f2 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 800e4ec:	1a09      	subs	r1, r1, r0
 800e4ee:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e4f0:	e7f8      	b.n	800e4e4 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800e4f2:	6858      	ldr	r0, [r3, #4]
 800e4f4:	4408      	add	r0, r1
}
 800e4f6:	4770      	bx	lr

0800e4f8 <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800e4f8:	6803      	ldr	r3, [r0, #0]
 800e4fa:	1c5a      	adds	r2, r3, #1
 800e4fc:	6002      	str	r2, [r0, #0]
 800e4fe:	781a      	ldrb	r2, [r3, #0]
 800e500:	b290      	uxth	r0, r2
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800e502:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e506:	2b19      	cmp	r3, #25
 800e508:	d802      	bhi.n	800e510 <get_achar+0x18>
 800e50a:	3820      	subs	r0, #32
 800e50c:	b280      	uxth	r0, r0
 800e50e:	4770      	bx	lr
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800e510:	287f      	cmp	r0, #127	; 0x7f
 800e512:	bf82      	ittt	hi
 800e514:	4b02      	ldrhi	r3, [pc, #8]	; (800e520 <get_achar+0x28>)
 800e516:	189b      	addhi	r3, r3, r2
 800e518:	f813 0c80 	ldrbhi.w	r0, [r3, #-128]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	08014b80 	.word	0x08014b80

0800e524 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800e524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e526:	b085      	sub	sp, #20
 800e528:	4605      	mov	r5, r0
 800e52a:	461e      	mov	r6, r3
 800e52c:	ac04      	add	r4, sp, #16
 800e52e:	f844 1d0c 	str.w	r1, [r4, #-12]!
 800e532:	4611      	mov	r1, r2
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800e534:	b929      	cbnz	r1, 800e542 <pattern_matching+0x1e>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800e536:	782b      	ldrb	r3, [r5, #0]
 800e538:	b95b      	cbnz	r3, 800e552 <pattern_matching+0x2e>
 800e53a:	b156      	cbz	r6, 800e552 <pattern_matching+0x2e>
 800e53c:	2001      	movs	r0, #1
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800e53e:	b005      	add	sp, #20
 800e540:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800e542:	4620      	mov	r0, r4
 800e544:	f7ff ffd8 	bl	800e4f8 <get_achar>
 800e548:	3901      	subs	r1, #1
 800e54a:	2800      	cmp	r0, #0
 800e54c:	d1f2      	bne.n	800e534 <pattern_matching+0x10>
 800e54e:	2000      	movs	r0, #0
 800e550:	e7f5      	b.n	800e53e <pattern_matching+0x1a>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800e552:	ac04      	add	r4, sp, #16
 800e554:	9b01      	ldr	r3, [sp, #4]
 800e556:	9502      	str	r5, [sp, #8]
 800e558:	f844 3d04 	str.w	r3, [r4, #-4]!
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800e55c:	9b02      	ldr	r3, [sp, #8]
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	2b3f      	cmp	r3, #63	; 0x3f
 800e562:	d001      	beq.n	800e568 <pattern_matching+0x44>
 800e564:	2b2a      	cmp	r3, #42	; 0x2a
 800e566:	d11d      	bne.n	800e5a4 <pattern_matching+0x80>
 800e568:	2300      	movs	r3, #0
 800e56a:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800e56c:	9902      	ldr	r1, [sp, #8]
 800e56e:	1c48      	adds	r0, r1, #1
 800e570:	9002      	str	r0, [sp, #8]
 800e572:	780c      	ldrb	r4, [r1, #0]
				} while (*pp == '?' || *pp == '*');
 800e574:	7849      	ldrb	r1, [r1, #1]
					if (*pp++ == '?') nm++; else nx = 1;
 800e576:	2c3f      	cmp	r4, #63	; 0x3f
 800e578:	bf0c      	ite	eq
 800e57a:	3201      	addeq	r2, #1
 800e57c:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800e57e:	293f      	cmp	r1, #63	; 0x3f
 800e580:	d0f4      	beq.n	800e56c <pattern_matching+0x48>
 800e582:	292a      	cmp	r1, #42	; 0x2a
 800e584:	d0f2      	beq.n	800e56c <pattern_matching+0x48>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800e586:	9903      	ldr	r1, [sp, #12]
 800e588:	f7ff ffcc 	bl	800e524 <pattern_matching>
 800e58c:	2800      	cmp	r0, #0
 800e58e:	d1d5      	bne.n	800e53c <pattern_matching+0x18>
				nc = *np; break;	/* Branch mismatched */
 800e590:	9b03      	ldr	r3, [sp, #12]
 800e592:	7819      	ldrb	r1, [r3, #0]
		get_achar(&nam);			/* nam++ */
 800e594:	a801      	add	r0, sp, #4
 800e596:	f7ff ffaf 	bl	800e4f8 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800e59a:	2e00      	cmp	r6, #0
 800e59c:	d0d7      	beq.n	800e54e <pattern_matching+0x2a>
 800e59e:	2900      	cmp	r1, #0
 800e5a0:	d1d7      	bne.n	800e552 <pattern_matching+0x2e>
 800e5a2:	e7d4      	b.n	800e54e <pattern_matching+0x2a>
			pc = get_achar(&pp);	/* Get a pattern char */
 800e5a4:	a802      	add	r0, sp, #8
 800e5a6:	f7ff ffa7 	bl	800e4f8 <get_achar>
 800e5aa:	4607      	mov	r7, r0
			nc = get_achar(&np);	/* Get a name char */
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	f7ff ffa3 	bl	800e4f8 <get_achar>
			if (pc != nc) break;	/* Branch mismatched? */
 800e5b2:	4287      	cmp	r7, r0
			nc = get_achar(&np);	/* Get a name char */
 800e5b4:	4601      	mov	r1, r0
			if (pc != nc) break;	/* Branch mismatched? */
 800e5b6:	d1ed      	bne.n	800e594 <pattern_matching+0x70>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800e5b8:	2f00      	cmp	r7, #0
 800e5ba:	d1cf      	bne.n	800e55c <pattern_matching+0x38>
 800e5bc:	e7be      	b.n	800e53c <pattern_matching+0x18>

0800e5be <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e5be:	6802      	ldr	r2, [r0, #0]
{
 800e5c0:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 800e5c2:	b152      	cbz	r2, 800e5da <get_ldnumber+0x1c>
 800e5c4:	4611      	mov	r1, r2
 800e5c6:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e5c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5cc:	2c20      	cmp	r4, #32
 800e5ce:	d90c      	bls.n	800e5ea <get_ldnumber+0x2c>
 800e5d0:	2c3a      	cmp	r4, #58	; 0x3a
 800e5d2:	d1f8      	bne.n	800e5c6 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 800e5d4:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e5d6:	428b      	cmp	r3, r1
 800e5d8:	d002      	beq.n	800e5e0 <get_ldnumber+0x22>
	int vol = -1;
 800e5da:	f04f 30ff 	mov.w	r0, #4294967295
 800e5de:	e005      	b.n	800e5ec <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e5e0:	7812      	ldrb	r2, [r2, #0]
 800e5e2:	2a30      	cmp	r2, #48	; 0x30
 800e5e4:	d1f9      	bne.n	800e5da <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e5ea:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800e5ec:	bd10      	pop	{r4, pc}

0800e5ee <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e5ee:	3801      	subs	r0, #1
 800e5f0:	440a      	add	r2, r1
			*d++ = *s++;
 800e5f2:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800e5f6:	4291      	cmp	r1, r2
			*d++ = *s++;
 800e5f8:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800e5fc:	d1f9      	bne.n	800e5f2 <mem_cpy.part.0+0x4>
}
 800e5fe:	4770      	bx	lr

0800e600 <ld_clust.isra.1>:
	if (fs->fs_type == FS_FAT32) {
 800e600:	2803      	cmp	r0, #3
	rv = rv << 8 | ptr[0];
 800e602:	7eca      	ldrb	r2, [r1, #27]
 800e604:	7e8b      	ldrb	r3, [r1, #26]
 800e606:	bf08      	it	eq
 800e608:	7d48      	ldrbeq	r0, [r1, #21]
	cl = ld_word(dir + DIR_FstClusLO);
 800e60a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800e60e:	bf02      	ittt	eq
 800e610:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e612:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 800e616:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	4770      	bx	lr

0800e61e <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 800e61e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e622:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800e624:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800e626:	7803      	ldrb	r3, [r0, #0]
 800e628:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e62a:	bf01      	itttt	eq
 800e62c:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e62e:	750a      	strbeq	r2, [r1, #20]
 800e630:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800e632:	754a      	strbeq	r2, [r1, #21]
}
 800e634:	4770      	bx	lr

0800e636 <get_fileinfo.part.3>:
void get_fileinfo (		/* No return code */
 800e636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		c = (TCHAR)dp->dir[i++];
 800e638:	6a04      	ldr	r4, [r0, #32]
	i = j = 0;
 800e63a:	2300      	movs	r3, #0
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e63c:	262e      	movs	r6, #46	; 0x2e
 800e63e:	1e65      	subs	r5, r4, #1
	i = j = 0;
 800e640:	4618      	mov	r0, r3
		c = (TCHAR)dp->dir[i++];
 800e642:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800e646:	3001      	adds	r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800e648:	2a20      	cmp	r2, #32
 800e64a:	d00a      	beq.n	800e662 <get_fileinfo.part.3+0x2c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e64c:	2a05      	cmp	r2, #5
 800e64e:	bf08      	it	eq
 800e650:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e652:	2809      	cmp	r0, #9
 800e654:	bf02      	ittt	eq
 800e656:	18cf      	addeq	r7, r1, r3
 800e658:	3301      	addeq	r3, #1
 800e65a:	727e      	strbeq	r6, [r7, #9]
		fno->fname[j++] = c;
 800e65c:	18cf      	adds	r7, r1, r3
 800e65e:	3301      	adds	r3, #1
 800e660:	727a      	strb	r2, [r7, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e662:	280b      	cmp	r0, #11
 800e664:	d1ed      	bne.n	800e642 <get_fileinfo.part.3+0xc>
	fno->fname[j] = 0;
 800e666:	440b      	add	r3, r1
 800e668:	2200      	movs	r2, #0
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e66a:	f104 001c 	add.w	r0, r4, #28
	fno->fname[j] = 0;
 800e66e:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e670:	7ae3      	ldrb	r3, [r4, #11]
 800e672:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e674:	f7ff fe78 	bl	800e368 <ld_dword>
 800e678:	6008      	str	r0, [r1, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e67a:	f104 0016 	add.w	r0, r4, #22
 800e67e:	f7ff fe73 	bl	800e368 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e682:	80c8      	strh	r0, [r1, #6]
 800e684:	0c00      	lsrs	r0, r0, #16
 800e686:	8088      	strh	r0, [r1, #4]
}
 800e688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e68a <sync_window.part.5>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800e68a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 800e68c:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e68e:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800e692:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e694:	2301      	movs	r3, #1
 800e696:	462a      	mov	r2, r5
 800e698:	4639      	mov	r1, r7
 800e69a:	7840      	ldrb	r0, [r0, #1]
 800e69c:	f7ff fe48 	bl	800e330 <disk_write>
 800e6a0:	b9a0      	cbnz	r0, 800e6cc <sync_window.part.5+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6a4:	69e2      	ldr	r2, [r4, #28]
 800e6a6:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 800e6a8:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d301      	bcc.n	800e6b2 <sync_window.part.5+0x28>
	FRESULT res = FR_OK;
 800e6ae:	2000      	movs	r0, #0
}
 800e6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e6b2:	78a6      	ldrb	r6, [r4, #2]
 800e6b4:	2e01      	cmp	r6, #1
 800e6b6:	d9fa      	bls.n	800e6ae <sync_window.part.5+0x24>
					wsect += fs->fsize;
 800e6b8:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e6ba:	4639      	mov	r1, r7
 800e6bc:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e6be:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 800e6c0:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	462a      	mov	r2, r5
 800e6c6:	f7ff fe33 	bl	800e330 <disk_write>
 800e6ca:	e7f3      	b.n	800e6b4 <sync_window.part.5+0x2a>
			res = FR_DISK_ERR;
 800e6cc:	2001      	movs	r0, #1
 800e6ce:	e7ef      	b.n	800e6b0 <sync_window.part.5+0x26>

0800e6d0 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e6d0:	78c3      	ldrb	r3, [r0, #3]
 800e6d2:	b10b      	cbz	r3, 800e6d8 <sync_window+0x8>
 800e6d4:	f7ff bfd9 	b.w	800e68a <sync_window.part.5>
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	4770      	bx	lr

0800e6dc <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800e6dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e6de:	428b      	cmp	r3, r1
{
 800e6e0:	b570      	push	{r4, r5, r6, lr}
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800e6e6:	d012      	beq.n	800e70e <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 800e6e8:	f7ff fff2 	bl	800e6d0 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	b960      	cbnz	r0, 800e70a <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e6f0:	462a      	mov	r2, r5
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800e6f8:	7870      	ldrb	r0, [r6, #1]
 800e6fa:	f7ff fe0b 	bl	800e314 <disk_read>
 800e6fe:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800e700:	bf1c      	itt	ne
 800e702:	f04f 35ff 	movne.w	r5, #4294967295
 800e706:	2401      	movne	r4, #1
			fs->winsect = sector;
 800e708:	6335      	str	r5, [r6, #48]	; 0x30
}
 800e70a:	4620      	mov	r0, r4
 800e70c:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 800e70e:	2400      	movs	r4, #0
 800e710:	e7fb      	b.n	800e70a <move_window+0x2e>
	...

0800e714 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e714:	2300      	movs	r3, #0
{
 800e716:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e718:	70c3      	strb	r3, [r0, #3]
 800e71a:	f04f 33ff 	mov.w	r3, #4294967295
{
 800e71e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e720:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e722:	f7ff ffdb 	bl	800e6dc <move_window>
 800e726:	bb30      	cbnz	r0, 800e776 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 800e728:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800e72c:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 800e730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e734:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800e738:	4293      	cmp	r3, r2
 800e73a:	d11e      	bne.n	800e77a <check_fs+0x66>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e73c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e740:	2be9      	cmp	r3, #233	; 0xe9
 800e742:	d005      	beq.n	800e750 <check_fs+0x3c>
 800e744:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e746:	4a10      	ldr	r2, [pc, #64]	; (800e788 <check_fs+0x74>)
 800e748:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d116      	bne.n	800e77e <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e750:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800e754:	f7ff fe08 	bl	800e368 <ld_dword>
 800e758:	4b0c      	ldr	r3, [pc, #48]	; (800e78c <check_fs+0x78>)
 800e75a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800e75e:	4298      	cmp	r0, r3
 800e760:	d00f      	beq.n	800e782 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e762:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800e766:	f7ff fdff 	bl	800e368 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e76a:	4b09      	ldr	r3, [pc, #36]	; (800e790 <check_fs+0x7c>)
 800e76c:	4298      	cmp	r0, r3
 800e76e:	bf14      	ite	ne
 800e770:	2002      	movne	r0, #2
 800e772:	2000      	moveq	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800e774:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e776:	2004      	movs	r0, #4
 800e778:	e7fc      	b.n	800e774 <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e77a:	2003      	movs	r0, #3
 800e77c:	e7fa      	b.n	800e774 <check_fs+0x60>
	return 2;
 800e77e:	2002      	movs	r0, #2
 800e780:	e7f8      	b.n	800e774 <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e782:	2000      	movs	r0, #0
 800e784:	e7f6      	b.n	800e774 <check_fs+0x60>
 800e786:	bf00      	nop
 800e788:	009000eb 	.word	0x009000eb
 800e78c:	00544146 	.word	0x00544146
 800e790:	33544146 	.word	0x33544146

0800e794 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e794:	2300      	movs	r3, #0
{
 800e796:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 800e79a:	600b      	str	r3, [r1, #0]
{
 800e79c:	b085      	sub	sp, #20
 800e79e:	460f      	mov	r7, r1
 800e7a0:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800e7a2:	f7ff ff0c 	bl	800e5be <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800e7a6:	1e06      	subs	r6, r0, #0
 800e7a8:	f2c0 813f 	blt.w	800ea2a <find_volume+0x296>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e7ac:	4ba4      	ldr	r3, [pc, #656]	; (800ea40 <find_volume+0x2ac>)
 800e7ae:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e7b2:	2c00      	cmp	r4, #0
 800e7b4:	f000 813b 	beq.w	800ea2e <find_volume+0x29a>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e7b8:	68e0      	ldr	r0, [r4, #12]
 800e7ba:	f001 f993 	bl	800fae4 <ff_req_grant>
 800e7be:	2800      	cmp	r0, #0
 800e7c0:	f000 8137 	beq.w	800ea32 <find_volume+0x29e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e7c4:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e7c6:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e7ca:	7823      	ldrb	r3, [r4, #0]
 800e7cc:	b173      	cbz	r3, 800e7ec <find_volume+0x58>
		stat = disk_status(fs->drv);
 800e7ce:	7860      	ldrb	r0, [r4, #1]
 800e7d0:	f7ff fd86 	bl	800e2e0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e7d4:	07c1      	lsls	r1, r0, #31
 800e7d6:	d409      	bmi.n	800e7ec <find_volume+0x58>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e7d8:	2d00      	cmp	r5, #0
 800e7da:	f000 812c 	beq.w	800ea36 <find_volume+0x2a2>
 800e7de:	f010 0004 	ands.w	r0, r0, #4
 800e7e2:	d000      	beq.n	800e7e6 <find_volume+0x52>
				return FR_WRITE_PROTECTED;
 800e7e4:	200a      	movs	r0, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800e7e6:	b005      	add	sp, #20
 800e7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800e7ec:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e7ee:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800e7f0:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e7f2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e7f4:	f7ff fd7e 	bl	800e2f4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e7f8:	07c2      	lsls	r2, r0, #31
 800e7fa:	f100 811e 	bmi.w	800ea3a <find_volume+0x2a6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e7fe:	b10d      	cbz	r5, 800e804 <find_volume+0x70>
 800e800:	0743      	lsls	r3, r0, #29
 800e802:	d4ef      	bmi.n	800e7e4 <find_volume+0x50>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e804:	2100      	movs	r1, #0
 800e806:	4620      	mov	r0, r4
 800e808:	f7ff ff84 	bl	800e714 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e80c:	2802      	cmp	r0, #2
 800e80e:	f040 80f3 	bne.w	800e9f8 <find_volume+0x264>
 800e812:	f504 75fd 	add.w	r5, r4, #506	; 0x1fa
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e816:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e818:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 800e81c:	b110      	cbz	r0, 800e824 <find_volume+0x90>
 800e81e:	4628      	mov	r0, r5
 800e820:	f7ff fda2 	bl	800e368 <ld_dword>
 800e824:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e828:	3101      	adds	r1, #1
 800e82a:	3510      	adds	r5, #16
 800e82c:	2904      	cmp	r1, #4
 800e82e:	d1f3      	bne.n	800e818 <find_volume+0x84>
 800e830:	2600      	movs	r6, #0
			bsect = br[i];
 800e832:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e836:	2d00      	cmp	r5, #0
 800e838:	f000 80d5 	beq.w	800e9e6 <find_volume+0x252>
 800e83c:	4629      	mov	r1, r5
 800e83e:	4620      	mov	r0, r4
 800e840:	f7ff ff68 	bl	800e714 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e844:	2801      	cmp	r0, #1
 800e846:	f200 80cf 	bhi.w	800e9e8 <find_volume+0x254>
	rv = rv << 8 | ptr[0];
 800e84a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800e84e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800e852:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e85a:	f040 80d1 	bne.w	800ea00 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800e85e:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800e862:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e866:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
 800e86a:	d104      	bne.n	800e876 <find_volume+0xe2>
 800e86c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e870:	f7ff fd7a 	bl	800e368 <ld_dword>
 800e874:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e876:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
		fs->fsize = fasize;
 800e87a:	61e6      	str	r6, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e87c:	f109 33ff 	add.w	r3, r9, #4294967295
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e880:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e884:	2b01      	cmp	r3, #1
 800e886:	f200 80bb 	bhi.w	800ea00 <find_volume+0x26c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e88a:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 800e88e:	b2bb      	uxth	r3, r7
 800e890:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e892:	2b00      	cmp	r3, #0
 800e894:	f000 80b4 	beq.w	800ea00 <find_volume+0x26c>
 800e898:	1e7b      	subs	r3, r7, #1
 800e89a:	423b      	tst	r3, r7
 800e89c:	f040 80b0 	bne.w	800ea00 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800e8a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e8a4:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 800e8a8:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e8ac:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e8b0:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e8b4:	f040 80a4 	bne.w	800ea00 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
 800e8b8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800e8bc:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e8c0:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 800e8c4:	d103      	bne.n	800e8ce <find_volume+0x13a>
 800e8c6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800e8ca:	f7ff fd4d 	bl	800e368 <ld_dword>
	rv = rv << 8 | ptr[0];
 800e8ce:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8d2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e8d6:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800e8da:	f000 8091 	beq.w	800ea00 <find_volume+0x26c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e8de:	fb06 fc09 	mul.w	ip, r6, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e8e2:	eb03 1218 	add.w	r2, r3, r8, lsr #4
 800e8e6:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e8e8:	4290      	cmp	r0, r2
 800e8ea:	f0c0 8089 	bcc.w	800ea00 <find_volume+0x26c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e8ee:	1a81      	subs	r1, r0, r2
 800e8f0:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e8f4:	2900      	cmp	r1, #0
 800e8f6:	f000 8083 	beq.w	800ea00 <find_volume+0x26c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e8fa:	f64f 77f5 	movw	r7, #65525	; 0xfff5
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e8fe:	f640 70f5 	movw	r0, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e902:	442b      	add	r3, r5
		fs->database = bsect + sysect;					/* Data start sector */
 800e904:	442a      	add	r2, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e906:	42b9      	cmp	r1, r7
 800e908:	bf8c      	ite	hi
 800e90a:	2703      	movhi	r7, #3
 800e90c:	2702      	movls	r7, #2
		fs->volbase = bsect;							/* Volume start sector */
 800e90e:	6225      	str	r5, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e910:	6263      	str	r3, [r4, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e912:	4281      	cmp	r1, r0
 800e914:	bf98      	it	ls
 800e916:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e918:	3102      	adds	r1, #2
		fs->database = bsect + sysect;					/* Data start sector */
 800e91a:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e91c:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e91e:	61a1      	str	r1, [r4, #24]
		if (fmt == FS_FAT32) {
 800e920:	d172      	bne.n	800ea08 <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 800e922:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 800e926:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e92a:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800e92e:	d167      	bne.n	800ea00 <find_volume+0x26c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e930:	f1b8 0f00 	cmp.w	r8, #0
 800e934:	d164      	bne.n	800ea00 <find_volume+0x26c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e936:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800e93a:	f7ff fd15 	bl	800e368 <ld_dword>
 800e93e:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e940:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e942:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800e946:	ebb6 2f51 	cmp.w	r6, r1, lsr #9
 800e94a:	d359      	bcc.n	800ea00 <find_volume+0x26c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e94c:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e950:	2f03      	cmp	r7, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e952:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800e956:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e95a:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e95c:	d12f      	bne.n	800e9be <find_volume+0x22a>
	rv = rv << 8 | ptr[0];
 800e95e:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 800e962:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800e966:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d127      	bne.n	800e9be <find_volume+0x22a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e96e:	1c69      	adds	r1, r5, #1
 800e970:	4620      	mov	r0, r4
 800e972:	f7ff feb3 	bl	800e6dc <move_window>
 800e976:	bb10      	cbnz	r0, 800e9be <find_volume+0x22a>
	rv = rv << 8 | ptr[0];
 800e978:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 800e97c:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 800e980:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 800e982:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e986:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d117      	bne.n	800e9be <find_volume+0x22a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e98e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800e992:	f7ff fce9 	bl	800e368 <ld_dword>
 800e996:	4b2b      	ldr	r3, [pc, #172]	; (800ea44 <find_volume+0x2b0>)
 800e998:	4298      	cmp	r0, r3
 800e99a:	d110      	bne.n	800e9be <find_volume+0x22a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e99c:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800e9a0:	f7ff fce2 	bl	800e368 <ld_dword>
 800e9a4:	4b28      	ldr	r3, [pc, #160]	; (800ea48 <find_volume+0x2b4>)
 800e9a6:	4298      	cmp	r0, r3
 800e9a8:	d109      	bne.n	800e9be <find_volume+0x22a>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e9aa:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800e9ae:	f7ff fcdb 	bl	800e368 <ld_dword>
 800e9b2:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e9b4:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800e9b8:	f7ff fcd6 	bl	800e368 <ld_dword>
 800e9bc:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 800e9be:	4a23      	ldr	r2, [pc, #140]	; (800ea4c <find_volume+0x2b8>)
 800e9c0:	2000      	movs	r0, #0
	fs->fs_type = fmt;		/* FAT sub-type */
 800e9c2:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e9c4:	8813      	ldrh	r3, [r2, #0]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	8013      	strh	r3, [r2, #0]
 800e9cc:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e9ce:	4b20      	ldr	r3, [pc, #128]	; (800ea50 <find_volume+0x2bc>)
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	4294      	cmp	r4, r2
 800e9d4:	bf04      	itt	eq
 800e9d6:	2200      	moveq	r2, #0
 800e9d8:	601a      	streq	r2, [r3, #0]
 800e9da:	691a      	ldr	r2, [r3, #16]
 800e9dc:	4294      	cmp	r4, r2
 800e9de:	f47f af02 	bne.w	800e7e6 <find_volume+0x52>
 800e9e2:	6118      	str	r0, [r3, #16]
 800e9e4:	e6ff      	b.n	800e7e6 <find_volume+0x52>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e9e6:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e9e8:	3601      	adds	r6, #1
 800e9ea:	2e04      	cmp	r6, #4
 800e9ec:	f47f af21 	bne.w	800e832 <find_volume+0x9e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e9f0:	2804      	cmp	r0, #4
 800e9f2:	d105      	bne.n	800ea00 <find_volume+0x26c>
 800e9f4:	2001      	movs	r0, #1
 800e9f6:	e6f6      	b.n	800e7e6 <find_volume+0x52>
 800e9f8:	2804      	cmp	r0, #4
 800e9fa:	d0fb      	beq.n	800e9f4 <find_volume+0x260>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e9fc:	2801      	cmp	r0, #1
 800e9fe:	d901      	bls.n	800ea04 <find_volume+0x270>
 800ea00:	200d      	movs	r0, #13
 800ea02:	e6f0      	b.n	800e7e6 <find_volume+0x52>
	bsect = 0;
 800ea04:	2500      	movs	r5, #0
 800ea06:	e720      	b.n	800e84a <find_volume+0xb6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ea08:	f1b8 0f00 	cmp.w	r8, #0
 800ea0c:	d0f8      	beq.n	800ea00 <find_volume+0x26c>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ea0e:	2f02      	cmp	r7, #2
 800ea10:	ea4f 0041 	mov.w	r0, r1, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ea14:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ea16:	bf1c      	itt	ne
 800ea18:	1840      	addne	r0, r0, r1
 800ea1a:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ea1e:	62a3      	str	r3, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ea20:	bf0c      	ite	eq
 800ea22:	4601      	moveq	r1, r0
 800ea24:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 800ea28:	e78b      	b.n	800e942 <find_volume+0x1ae>
	if (vol < 0) return FR_INVALID_DRIVE;
 800ea2a:	200b      	movs	r0, #11
 800ea2c:	e6db      	b.n	800e7e6 <find_volume+0x52>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ea2e:	200c      	movs	r0, #12
 800ea30:	e6d9      	b.n	800e7e6 <find_volume+0x52>
	ENTER_FF(fs);						/* Lock the volume */
 800ea32:	200f      	movs	r0, #15
 800ea34:	e6d7      	b.n	800e7e6 <find_volume+0x52>
			return FR_OK;				/* The file system object is valid */
 800ea36:	4628      	mov	r0, r5
 800ea38:	e6d5      	b.n	800e7e6 <find_volume+0x52>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ea3a:	2003      	movs	r0, #3
 800ea3c:	e6d3      	b.n	800e7e6 <find_volume+0x52>
 800ea3e:	bf00      	nop
 800ea40:	24000338 	.word	0x24000338
 800ea44:	41615252 	.word	0x41615252
 800ea48:	61417272 	.word	0x61417272
 800ea4c:	2400035c 	.word	0x2400035c
 800ea50:	2400033c 	.word	0x2400033c

0800ea54 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ea54:	2901      	cmp	r1, #1
{
 800ea56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea5a:	4605      	mov	r5, r0
 800ea5c:	460c      	mov	r4, r1
 800ea5e:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ea60:	d973      	bls.n	800eb4a <put_fat+0xf6>
 800ea62:	6983      	ldr	r3, [r0, #24]
 800ea64:	428b      	cmp	r3, r1
 800ea66:	d970      	bls.n	800eb4a <put_fat+0xf6>
		switch (fs->fs_type) {
 800ea68:	7803      	ldrb	r3, [r0, #0]
 800ea6a:	2b02      	cmp	r3, #2
 800ea6c:	d040      	beq.n	800eaf0 <put_fat+0x9c>
 800ea6e:	2b03      	cmp	r3, #3
 800ea70:	d051      	beq.n	800eb16 <put_fat+0xc2>
 800ea72:	2b01      	cmp	r3, #1
 800ea74:	d169      	bne.n	800eb4a <put_fat+0xf6>
			bc = (UINT)clst; bc += bc / 2;
 800ea76:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ea7a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800ea7c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800ea80:	f7ff fe2c 	bl	800e6dc <move_window>
 800ea84:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 800ea86:	bb40      	cbnz	r0, 800eada <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ea88:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 800ea8c:	f105 0934 	add.w	r9, r5, #52	; 0x34
 800ea90:	f108 0a01 	add.w	sl, r8, #1
 800ea94:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ea98:	bf08      	it	eq
 800ea9a:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ea9c:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ea9e:	bf1f      	itttt	ne
 800eaa0:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800eaa4:	f003 020f 	andne.w	r2, r3, #15
 800eaa8:	013b      	lslne	r3, r7, #4
 800eaaa:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800eaae:	bf18      	it	ne
 800eab0:	4313      	orrne	r3, r2
 800eab2:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 800eab6:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eab8:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800eaba:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eabc:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800eac0:	f7ff fe0c 	bl	800e6dc <move_window>
			if (res != FR_OK) break;
 800eac4:	4606      	mov	r6, r0
 800eac6:	b940      	cbnz	r0, 800eada <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 800eac8:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eacc:	b144      	cbz	r4, 800eae0 <put_fat+0x8c>
 800eace:	f3c7 1707 	ubfx	r7, r7, #4, #8
 800ead2:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 800ead6:	2301      	movs	r3, #1
 800ead8:	70eb      	strb	r3, [r5, #3]
}
 800eada:	4630      	mov	r0, r6
 800eadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eae0:	f819 300a 	ldrb.w	r3, [r9, sl]
 800eae4:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800eae8:	f023 030f 	bic.w	r3, r3, #15
 800eaec:	431f      	orrs	r7, r3
 800eaee:	e7f0      	b.n	800ead2 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eaf0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800eaf2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800eaf6:	f7ff fdf1 	bl	800e6dc <move_window>
			if (res != FR_OK) break;
 800eafa:	4606      	mov	r6, r0
 800eafc:	2800      	cmp	r0, #0
 800eafe:	d1ec      	bne.n	800eada <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eb00:	0064      	lsls	r4, r4, #1
 800eb02:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800eb06:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800eb0a:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eb0c:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800eb0e:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800eb12:	7057      	strb	r7, [r2, #1]
 800eb14:	e7df      	b.n	800ead6 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eb16:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800eb18:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800eb1c:	f7ff fdde 	bl	800e6dc <move_window>
			if (res != FR_OK) break;
 800eb20:	4606      	mov	r6, r0
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d1d9      	bne.n	800eada <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eb26:	00a4      	lsls	r4, r4, #2
 800eb28:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800eb2c:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800eb30:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800eb34:	441c      	add	r4, r3
 800eb36:	4620      	mov	r0, r4
 800eb38:	f7ff fc16 	bl	800e368 <ld_dword>
 800eb3c:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800eb40:	4620      	mov	r0, r4
 800eb42:	4339      	orrs	r1, r7
 800eb44:	f7ff fc18 	bl	800e378 <st_dword>
 800eb48:	e7c5      	b.n	800ead6 <put_fat+0x82>
	FRESULT res = FR_INT_ERR;
 800eb4a:	2602      	movs	r6, #2
 800eb4c:	e7c5      	b.n	800eada <put_fat+0x86>

0800eb4e <get_fat.isra.9>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eb4e:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800eb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb52:	4605      	mov	r5, r0
 800eb54:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eb56:	d952      	bls.n	800ebfe <get_fat.isra.9+0xb0>
 800eb58:	6983      	ldr	r3, [r0, #24]
 800eb5a:	4299      	cmp	r1, r3
 800eb5c:	d24f      	bcs.n	800ebfe <get_fat.isra.9+0xb0>
		switch (fs->fs_type) {
 800eb5e:	7803      	ldrb	r3, [r0, #0]
 800eb60:	2b02      	cmp	r3, #2
 800eb62:	d029      	beq.n	800ebb8 <get_fat.isra.9+0x6a>
 800eb64:	2b03      	cmp	r3, #3
 800eb66:	d038      	beq.n	800ebda <get_fat.isra.9+0x8c>
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d148      	bne.n	800ebfe <get_fat.isra.9+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 800eb6c:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb70:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800eb72:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800eb76:	f7ff fdb1 	bl	800e6dc <move_window>
 800eb7a:	b110      	cbz	r0, 800eb82 <get_fat.isra.9+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eb7c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800eb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800eb82:	1c77      	adds	r7, r6, #1
 800eb84:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb88:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800eb8a:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800eb8c:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb8e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800eb92:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb96:	f7ff fda1 	bl	800e6dc <move_window>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	d1ee      	bne.n	800eb7c <get_fat.isra.9+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800eb9e:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800eba2:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800eba4:	443d      	add	r5, r7
 800eba6:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800ebaa:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ebae:	bf4c      	ite	mi
 800ebb0:	0900      	lsrmi	r0, r0, #4
 800ebb2:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800ebb6:	e7e3      	b.n	800eb80 <get_fat.isra.9+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ebb8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800ebba:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800ebbe:	f7ff fd8d 	bl	800e6dc <move_window>
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	d1da      	bne.n	800eb7c <get_fat.isra.9+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ebc6:	0064      	lsls	r4, r4, #1
 800ebc8:	3534      	adds	r5, #52	; 0x34
 800ebca:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800ebce:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 800ebd0:	5d28      	ldrb	r0, [r5, r4]
 800ebd2:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ebd4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800ebd8:	e7d2      	b.n	800eb80 <get_fat.isra.9+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ebda:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800ebdc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800ebe0:	f7ff fd7c 	bl	800e6dc <move_window>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	d1c9      	bne.n	800eb7c <get_fat.isra.9+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ebe8:	00a4      	lsls	r4, r4, #2
 800ebea:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800ebee:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800ebf2:	4420      	add	r0, r4
 800ebf4:	f7ff fbb8 	bl	800e368 <ld_dword>
 800ebf8:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800ebfc:	e7c0      	b.n	800eb80 <get_fat.isra.9+0x32>
			val = 1;	/* Internal error */
 800ebfe:	2001      	movs	r0, #1
 800ec00:	e7be      	b.n	800eb80 <get_fat.isra.9+0x32>

0800ec02 <create_chain>:
{
 800ec02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec06:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800ec08:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800ec0a:	460f      	mov	r7, r1
 800ec0c:	b971      	cbnz	r1, 800ec2c <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ec0e:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ec10:	b1f6      	cbz	r6, 800ec50 <create_chain+0x4e>
 800ec12:	69ab      	ldr	r3, [r5, #24]
 800ec14:	42b3      	cmp	r3, r6
 800ec16:	bf98      	it	ls
 800ec18:	2601      	movls	r6, #1
 800ec1a:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800ec1c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ec1e:	69ab      	ldr	r3, [r5, #24]
 800ec20:	42a3      	cmp	r3, r4
 800ec22:	d818      	bhi.n	800ec56 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 800ec24:	2e01      	cmp	r6, #1
 800ec26:	d815      	bhi.n	800ec54 <create_chain+0x52>
 800ec28:	2400      	movs	r4, #0
 800ec2a:	e009      	b.n	800ec40 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	f7ff ff8e 	bl	800eb4e <get_fat.isra.9>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ec32:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ec34:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ec36:	d937      	bls.n	800eca8 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ec38:	1c43      	adds	r3, r0, #1
 800ec3a:	d104      	bne.n	800ec46 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ec3c:	f04f 34ff 	mov.w	r4, #4294967295
}
 800ec40:	4620      	mov	r0, r4
 800ec42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ec46:	69ab      	ldr	r3, [r5, #24]
 800ec48:	4283      	cmp	r3, r0
 800ec4a:	d8f9      	bhi.n	800ec40 <create_chain+0x3e>
 800ec4c:	463e      	mov	r6, r7
 800ec4e:	e7e4      	b.n	800ec1a <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ec50:	2601      	movs	r6, #1
 800ec52:	e7e2      	b.n	800ec1a <create_chain+0x18>
				ncl = 2;
 800ec54:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ec56:	4621      	mov	r1, r4
 800ec58:	f8d8 0000 	ldr.w	r0, [r8]
 800ec5c:	f7ff ff77 	bl	800eb4e <get_fat.isra.9>
			if (cs == 0) break;				/* Found a free cluster */
 800ec60:	b130      	cbz	r0, 800ec70 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ec62:	2801      	cmp	r0, #1
 800ec64:	d020      	beq.n	800eca8 <create_chain+0xa6>
 800ec66:	3001      	adds	r0, #1
 800ec68:	d0e8      	beq.n	800ec3c <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 800ec6a:	42b4      	cmp	r4, r6
 800ec6c:	d1d6      	bne.n	800ec1c <create_chain+0x1a>
 800ec6e:	e7db      	b.n	800ec28 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ec70:	f04f 32ff 	mov.w	r2, #4294967295
 800ec74:	4621      	mov	r1, r4
 800ec76:	4628      	mov	r0, r5
 800ec78:	f7ff feec 	bl	800ea54 <put_fat>
		if (res == FR_OK && clst != 0) {
 800ec7c:	b990      	cbnz	r0, 800eca4 <create_chain+0xa2>
 800ec7e:	b957      	cbnz	r7, 800ec96 <create_chain+0x94>
		fs->last_clst = ncl;
 800ec80:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ec82:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800ec86:	3a02      	subs	r2, #2
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d90f      	bls.n	800ecac <create_chain+0xaa>
		fs->fsi_flag |= 1;
 800ec8c:	792b      	ldrb	r3, [r5, #4]
 800ec8e:	f043 0301 	orr.w	r3, r3, #1
 800ec92:	712b      	strb	r3, [r5, #4]
 800ec94:	e7d4      	b.n	800ec40 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ec96:	4622      	mov	r2, r4
 800ec98:	4639      	mov	r1, r7
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	f7ff feda 	bl	800ea54 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eca0:	2800      	cmp	r0, #0
 800eca2:	d0ed      	beq.n	800ec80 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800eca4:	2801      	cmp	r0, #1
 800eca6:	d0c9      	beq.n	800ec3c <create_chain+0x3a>
 800eca8:	2401      	movs	r4, #1
 800ecaa:	e7c9      	b.n	800ec40 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ecac:	3b01      	subs	r3, #1
 800ecae:	616b      	str	r3, [r5, #20]
 800ecb0:	e7ec      	b.n	800ec8c <create_chain+0x8a>

0800ecb2 <remove_chain>:
{
 800ecb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecb4:	460d      	mov	r5, r1
 800ecb6:	4607      	mov	r7, r0
 800ecb8:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ecba:	2d01      	cmp	r5, #1
 800ecbc:	d92c      	bls.n	800ed18 <remove_chain+0x66>
	FATFS *fs = obj->fs;
 800ecbe:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ecc0:	69a3      	ldr	r3, [r4, #24]
 800ecc2:	42ab      	cmp	r3, r5
 800ecc4:	d928      	bls.n	800ed18 <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ecc6:	b12a      	cbz	r2, 800ecd4 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ecc8:	f04f 32ff 	mov.w	r2, #4294967295
 800eccc:	4620      	mov	r0, r4
 800ecce:	f7ff fec1 	bl	800ea54 <put_fat>
		if (res != FR_OK) return res;
 800ecd2:	b930      	cbnz	r0, 800ece2 <remove_chain+0x30>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	6838      	ldr	r0, [r7, #0]
 800ecd8:	f7ff ff39 	bl	800eb4e <get_fat.isra.9>
		if (nxt == 0) break;				/* Empty cluster? */
 800ecdc:	4606      	mov	r6, r0
 800ecde:	b908      	cbnz	r0, 800ece4 <remove_chain+0x32>
	return FR_OK;
 800ece0:	2000      	movs	r0, #0
}
 800ece2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ece4:	2801      	cmp	r0, #1
 800ece6:	d017      	beq.n	800ed18 <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ece8:	1c43      	adds	r3, r0, #1
 800ecea:	d017      	beq.n	800ed1c <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ecec:	2200      	movs	r2, #0
 800ecee:	4629      	mov	r1, r5
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f7ff feaf 	bl	800ea54 <put_fat>
			if (res != FR_OK) return res;
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	d1f3      	bne.n	800ece2 <remove_chain+0x30>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ecfa:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800ecfe:	1e91      	subs	r1, r2, #2
 800ed00:	428b      	cmp	r3, r1
 800ed02:	d205      	bcs.n	800ed10 <remove_chain+0x5e>
			fs->free_clst++;
 800ed04:	3301      	adds	r3, #1
 800ed06:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 800ed08:	7923      	ldrb	r3, [r4, #4]
 800ed0a:	f043 0301 	orr.w	r3, r3, #1
 800ed0e:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ed10:	42b2      	cmp	r2, r6
 800ed12:	4635      	mov	r5, r6
 800ed14:	d8de      	bhi.n	800ecd4 <remove_chain+0x22>
 800ed16:	e7e3      	b.n	800ece0 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ed18:	2002      	movs	r0, #2
 800ed1a:	e7e2      	b.n	800ece2 <remove_chain+0x30>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ed1c:	2001      	movs	r0, #1
 800ed1e:	e7e0      	b.n	800ece2 <remove_chain+0x30>

0800ed20 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ed20:	b140      	cbz	r0, 800ed34 <unlock_fs+0x14>
 800ed22:	f1a1 030b 	sub.w	r3, r1, #11
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d904      	bls.n	800ed34 <unlock_fs+0x14>
 800ed2a:	290f      	cmp	r1, #15
 800ed2c:	d002      	beq.n	800ed34 <unlock_fs+0x14>
		ff_rel_grant(fs->sobj);
 800ed2e:	68c0      	ldr	r0, [r0, #12]
 800ed30:	f000 bee1 	b.w	800faf6 <ff_rel_grant>
}
 800ed34:	4770      	bx	lr

0800ed36 <sync_fs>:
{
 800ed36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed38:	4604      	mov	r4, r0
	res = sync_window(fs);
 800ed3a:	f7ff fcc9 	bl	800e6d0 <sync_window>
 800ed3e:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800ed40:	2800      	cmp	r0, #0
 800ed42:	d142      	bne.n	800edca <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ed44:	7823      	ldrb	r3, [r4, #0]
 800ed46:	2b03      	cmp	r3, #3
 800ed48:	d137      	bne.n	800edba <sync_fs+0x84>
 800ed4a:	7927      	ldrb	r7, [r4, #4]
 800ed4c:	2f01      	cmp	r7, #1
 800ed4e:	d134      	bne.n	800edba <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 800ed50:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800ed54:	4601      	mov	r1, r0
 800ed56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	f7ff fb14 	bl	800e388 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800ed60:	2355      	movs	r3, #85	; 0x55
	*ptr++ = (BYTE)val;
 800ed62:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800ed64:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 800ed66:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 800ed6a:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
 800ed6c:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ed70:	f504 7007 	add.w	r0, r4, #540	; 0x21c
	*ptr++ = (BYTE)val;
 800ed74:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 800ed78:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val; val >>= 8;
 800ed7a:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val; val >>= 8;
 800ed7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800ed82:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 800ed86:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 800ed88:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 800ed8c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 800ed90:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 800ed94:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ed98:	6961      	ldr	r1, [r4, #20]
 800ed9a:	f7ff faed 	bl	800e378 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ed9e:	6921      	ldr	r1, [r4, #16]
 800eda0:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800eda4:	f7ff fae8 	bl	800e378 <st_dword>
			fs->winsect = fs->volbase + 1;
 800eda8:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800edaa:	463b      	mov	r3, r7
 800edac:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800edae:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800edb0:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800edb2:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800edb4:	f7ff fabc 	bl	800e330 <disk_write>
			fs->fsi_flag = 0;
 800edb8:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800edba:	2200      	movs	r2, #0
 800edbc:	7860      	ldrb	r0, [r4, #1]
 800edbe:	4611      	mov	r1, r2
 800edc0:	f7ff fac4 	bl	800e34c <disk_ioctl>
 800edc4:	3000      	adds	r0, #0
 800edc6:	bf18      	it	ne
 800edc8:	2001      	movne	r0, #1
}
 800edca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800edcc <dir_sdi.constprop.14>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800edcc:	b538      	push	{r3, r4, r5, lr}
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800edce:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 800edd0:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800edd2:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800edd4:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800edd6:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800edd8:	b992      	cbnz	r2, 800ee00 <dir_sdi.constprop.14+0x34>
 800edda:	7823      	ldrb	r3, [r4, #0]
 800eddc:	2b02      	cmp	r3, #2
 800edde:	d901      	bls.n	800ede4 <dir_sdi.constprop.14+0x18>
		clst = fs->dirbase;
 800ede0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ede2:	b973      	cbnz	r3, 800ee02 <dir_sdi.constprop.14+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ede4:	8923      	ldrh	r3, [r4, #8]
 800ede6:	b90b      	cbnz	r3, 800edec <dir_sdi.constprop.14+0x20>
 800ede8:	2002      	movs	r0, #2
}
 800edea:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 800edec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800edee:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 800edf0:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 800edf2:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d0f7      	beq.n	800ede8 <dir_sdi.constprop.14+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800edf8:	3434      	adds	r4, #52	; 0x34
	return FR_OK;
 800edfa:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800edfc:	622c      	str	r4, [r5, #32]
 800edfe:	e7f4      	b.n	800edea <dir_sdi.constprop.14+0x1e>
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ee00:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ee02:	8961      	ldrh	r1, [r4, #10]
 800ee04:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800ee06:	b961      	cbnz	r1, 800ee22 <dir_sdi.constprop.14+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ee08:	4611      	mov	r1, r2
 800ee0a:	6828      	ldr	r0, [r5, #0]
 800ee0c:	f7ff fe9f 	bl	800eb4e <get_fat.isra.9>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee10:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ee12:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee14:	d00b      	beq.n	800ee2e <dir_sdi.constprop.14+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ee16:	2801      	cmp	r0, #1
 800ee18:	d9e6      	bls.n	800ede8 <dir_sdi.constprop.14+0x1c>
 800ee1a:	69a3      	ldr	r3, [r4, #24]
 800ee1c:	4298      	cmp	r0, r3
 800ee1e:	d3f3      	bcc.n	800ee08 <dir_sdi.constprop.14+0x3c>
 800ee20:	e7e2      	b.n	800ede8 <dir_sdi.constprop.14+0x1c>
		dp->sect = clust2sect(fs, clst);
 800ee22:	4619      	mov	r1, r3
 800ee24:	4620      	mov	r0, r4
 800ee26:	f7ff fb4b 	bl	800e4c0 <clust2sect>
 800ee2a:	61e8      	str	r0, [r5, #28]
 800ee2c:	e7e0      	b.n	800edf0 <dir_sdi.constprop.14+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee2e:	2001      	movs	r0, #1
 800ee30:	e7db      	b.n	800edea <dir_sdi.constprop.14+0x1e>

0800ee32 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ee32:	69c3      	ldr	r3, [r0, #28]
{
 800ee34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee38:	4605      	mov	r5, r0
 800ee3a:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ee3c:	b1ab      	cbz	r3, 800ee6a <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ee3e:	6942      	ldr	r2, [r0, #20]
 800ee40:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ee44:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 800ee48:	d20f      	bcs.n	800ee6a <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ee4a:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 800ee4e:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ee50:	f1b9 0f00 	cmp.w	r9, #0
 800ee54:	d14d      	bne.n	800eef2 <dir_next+0xc0>
		dp->sect++;				/* Next sector */
 800ee56:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800ee58:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800ee5a:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800ee5c:	b939      	cbnz	r1, 800ee6e <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ee5e:	8923      	ldrh	r3, [r4, #8]
 800ee60:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 800ee64:	d845      	bhi.n	800eef2 <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 800ee66:	2300      	movs	r3, #0
 800ee68:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ee6a:	2004      	movs	r0, #4
 800ee6c:	e00b      	b.n	800ee86 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ee6e:	8963      	ldrh	r3, [r4, #10]
 800ee70:	3b01      	subs	r3, #1
 800ee72:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 800ee76:	d13c      	bne.n	800eef2 <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f7ff fe68 	bl	800eb4e <get_fat.isra.9>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ee7e:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ee80:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ee82:	d802      	bhi.n	800ee8a <dir_next+0x58>
 800ee84:	2002      	movs	r0, #2
}
 800ee86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ee8a:	1c42      	adds	r2, r0, #1
 800ee8c:	d101      	bne.n	800ee92 <dir_next+0x60>
 800ee8e:	2001      	movs	r0, #1
 800ee90:	e7f9      	b.n	800ee86 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ee92:	69a3      	ldr	r3, [r4, #24]
 800ee94:	4283      	cmp	r3, r0
 800ee96:	d826      	bhi.n	800eee6 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 800ee98:	2f00      	cmp	r7, #0
 800ee9a:	d0e4      	beq.n	800ee66 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ee9c:	69a9      	ldr	r1, [r5, #24]
 800ee9e:	4628      	mov	r0, r5
 800eea0:	f7ff feaf 	bl	800ec02 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800eea4:	4606      	mov	r6, r0
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d036      	beq.n	800ef18 <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800eeaa:	2801      	cmp	r0, #1
 800eeac:	d0ea      	beq.n	800ee84 <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eeae:	1c43      	adds	r3, r0, #1
 800eeb0:	d0ed      	beq.n	800ee8e <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f7ff fc0c 	bl	800e6d0 <sync_window>
 800eeb8:	4607      	mov	r7, r0
 800eeba:	2800      	cmp	r0, #0
 800eebc:	d1e7      	bne.n	800ee8e <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eebe:	4601      	mov	r1, r0
 800eec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eec4:	f104 0034 	add.w	r0, r4, #52	; 0x34
						fs->wflag = 1;
 800eec8:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eecc:	f7ff fa5c 	bl	800e388 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eed0:	4631      	mov	r1, r6
 800eed2:	4620      	mov	r0, r4
 800eed4:	f7ff faf4 	bl	800e4c0 <clust2sect>
 800eed8:	6320      	str	r0, [r4, #48]	; 0x30
 800eeda:	8963      	ldrh	r3, [r4, #10]
 800eedc:	429f      	cmp	r7, r3
 800eede:	d30f      	bcc.n	800ef00 <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 800eee0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eee2:	1bdf      	subs	r7, r3, r7
 800eee4:	6327      	str	r7, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800eee6:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 800eee8:	4631      	mov	r1, r6
 800eeea:	4620      	mov	r0, r4
 800eeec:	f7ff fae8 	bl	800e4c0 <clust2sect>
 800eef0:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eef2:	3434      	adds	r4, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800eef4:	f8c5 8014 	str.w	r8, [r5, #20]
	return FR_OK;
 800eef8:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eefa:	444c      	add	r4, r9
 800eefc:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800eefe:	e7c2      	b.n	800ee86 <dir_next+0x54>
						fs->wflag = 1;
 800ef00:	f884 a003 	strb.w	sl, [r4, #3]
 800ef04:	4620      	mov	r0, r4
 800ef06:	f7ff fbc0 	bl	800e68a <sync_window.part.5>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	d1bf      	bne.n	800ee8e <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ef0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ef10:	3701      	adds	r7, #1
 800ef12:	3301      	adds	r3, #1
 800ef14:	6323      	str	r3, [r4, #48]	; 0x30
 800ef16:	e7e0      	b.n	800eeda <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ef18:	2007      	movs	r0, #7
 800ef1a:	e7b4      	b.n	800ee86 <dir_next+0x54>

0800ef1c <follow_path>:
{
 800ef1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef20:	4604      	mov	r4, r0
	FATFS *fs = obj->fs;
 800ef22:	6807      	ldr	r7, [r0, #0]
 800ef24:	460d      	mov	r5, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ef26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef2a:	2b2f      	cmp	r3, #47	; 0x2f
 800ef2c:	d0fa      	beq.n	800ef24 <follow_path+0x8>
 800ef2e:	2b5c      	cmp	r3, #92	; 0x5c
 800ef30:	d0f8      	beq.n	800ef24 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 800ef32:	2300      	movs	r3, #0
 800ef34:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ef36:	782b      	ldrb	r3, [r5, #0]
 800ef38:	2b1f      	cmp	r3, #31
 800ef3a:	d95a      	bls.n	800eff2 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ef3c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800f08c <follow_path+0x170>
	p = *path; sfn = dp->fn;
 800ef40:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800ef44:	220b      	movs	r2, #11
 800ef46:	2120      	movs	r1, #32
 800ef48:	4630      	mov	r0, r6
 800ef4a:	f7ff fa1d 	bl	800e388 <mem_set>
	si = i = 0; ni = 8;
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f105 3cff 	add.w	ip, r5, #4294967295
 800ef54:	2008      	movs	r0, #8
 800ef56:	4611      	mov	r1, r2
		c = (BYTE)p[si++];
 800ef58:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800ef5c:	3101      	adds	r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ef5e:	2b20      	cmp	r3, #32
 800ef60:	d90d      	bls.n	800ef7e <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ef62:	2b2f      	cmp	r3, #47	; 0x2f
 800ef64:	d001      	beq.n	800ef6a <follow_path+0x4e>
 800ef66:	2b5c      	cmp	r3, #92	; 0x5c
 800ef68:	d14b      	bne.n	800f002 <follow_path+0xe6>
 800ef6a:	1868      	adds	r0, r5, r1
 800ef6c:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ef6e:	f810 cb01 	ldrb.w	ip, [r0], #1
 800ef72:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800ef76:	d0f9      	beq.n	800ef6c <follow_path+0x50>
 800ef78:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 800ef7c:	d0f6      	beq.n	800ef6c <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 800ef7e:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ef80:	2a00      	cmp	r2, #0
 800ef82:	d051      	beq.n	800f028 <follow_path+0x10c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ef84:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ef88:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800ef8a:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ef8e:	2ae5      	cmp	r2, #229	; 0xe5
 800ef90:	bf04      	itt	eq
 800ef92:	2205      	moveq	r2, #5
 800ef94:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ef98:	2b21      	cmp	r3, #33	; 0x21
 800ef9a:	bf34      	ite	cc
 800ef9c:	2304      	movcc	r3, #4
 800ef9e:	2300      	movcs	r3, #0
 800efa0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800efa4:	f7ff ff12 	bl	800edcc <dir_sdi.constprop.14>
	if (res != FR_OK) return res;
 800efa8:	2800      	cmp	r0, #0
 800efaa:	d141      	bne.n	800f030 <follow_path+0x114>
		res = move_window(fs, dp->sect);
 800efac:	69e1      	ldr	r1, [r4, #28]
 800efae:	4648      	mov	r0, r9
 800efb0:	f7ff fb94 	bl	800e6dc <move_window>
		if (res != FR_OK) break;
 800efb4:	2800      	cmp	r0, #0
 800efb6:	d13b      	bne.n	800f030 <follow_path+0x114>
		c = dp->dir[DIR_Name];
 800efb8:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800efba:	781a      	ldrb	r2, [r3, #0]
 800efbc:	2a00      	cmp	r2, #0
 800efbe:	d042      	beq.n	800f046 <follow_path+0x12a>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800efc0:	7ada      	ldrb	r2, [r3, #11]
 800efc2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800efc6:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800efc8:	7ada      	ldrb	r2, [r3, #11]
 800efca:	0711      	lsls	r1, r2, #28
 800efcc:	d40c      	bmi.n	800efe8 <follow_path+0xcc>
 800efce:	f103 0c0b 	add.w	ip, r3, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800efd2:	4631      	mov	r1, r6
		r = *d++ - *s++;
 800efd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efd8:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 800efdc:	459c      	cmp	ip, r3
		r = *d++ - *s++;
 800efde:	eba2 020e 	sub.w	r2, r2, lr
	} while (--cnt && r == 0);
 800efe2:	d023      	beq.n	800f02c <follow_path+0x110>
 800efe4:	2a00      	cmp	r2, #0
 800efe6:	d0f5      	beq.n	800efd4 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 800efe8:	2100      	movs	r1, #0
 800efea:	4620      	mov	r0, r4
 800efec:	f7ff ff21 	bl	800ee32 <dir_next>
 800eff0:	e7da      	b.n	800efa8 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 800eff2:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800eff4:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800eff6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
}
 800effa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 800effe:	f7ff bee5 	b.w	800edcc <dir_sdi.constprop.14>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f002:	2b2e      	cmp	r3, #46	; 0x2e
 800f004:	d033      	beq.n	800f06e <follow_path+0x152>
 800f006:	4290      	cmp	r0, r2
 800f008:	d90e      	bls.n	800f028 <follow_path+0x10c>
		if (c >= 0x80) {				/* Extended character? */
 800f00a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f00e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800f090 <follow_path+0x174>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f012:	bf1c      	itt	ne
 800f014:	3b80      	subne	r3, #128	; 0x80
 800f016:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 800f01a:	f819 ef01 	ldrb.w	lr, [r9, #1]!
 800f01e:	f1be 0f00 	cmp.w	lr, #0
 800f022:	d029      	beq.n	800f078 <follow_path+0x15c>
 800f024:	4573      	cmp	r3, lr
 800f026:	d1f8      	bne.n	800f01a <follow_path+0xfe>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f028:	2006      	movs	r0, #6
	return res;
 800f02a:	e00a      	b.n	800f042 <follow_path+0x126>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f02c:	2a00      	cmp	r2, #0
 800f02e:	d1db      	bne.n	800efe8 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 800f030:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800f034:	b148      	cbz	r0, 800f04a <follow_path+0x12e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f036:	2804      	cmp	r0, #4
 800f038:	d103      	bne.n	800f042 <follow_path+0x126>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f03a:	f013 0f04 	tst.w	r3, #4
 800f03e:	bf08      	it	eq
 800f040:	2005      	moveq	r0, #5
}
 800f042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f046:	2004      	movs	r0, #4
 800f048:	e7f2      	b.n	800f030 <follow_path+0x114>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f04a:	075a      	lsls	r2, r3, #29
 800f04c:	d4f9      	bmi.n	800f042 <follow_path+0x126>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f04e:	79a3      	ldrb	r3, [r4, #6]
 800f050:	06db      	lsls	r3, r3, #27
 800f052:	d50a      	bpl.n	800f06a <follow_path+0x14e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f054:	6963      	ldr	r3, [r4, #20]
 800f056:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800f05a:	7838      	ldrb	r0, [r7, #0]
 800f05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f060:	4419      	add	r1, r3
 800f062:	f7ff facd 	bl	800e600 <ld_clust.isra.1>
 800f066:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f068:	e76a      	b.n	800ef40 <follow_path+0x24>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f06a:	2005      	movs	r0, #5
 800f06c:	e7e9      	b.n	800f042 <follow_path+0x126>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f06e:	280b      	cmp	r0, #11
 800f070:	d0da      	beq.n	800f028 <follow_path+0x10c>
			i = 8; ni = 11;				/* Goto extension */
 800f072:	2208      	movs	r2, #8
 800f074:	200b      	movs	r0, #11
 800f076:	e76f      	b.n	800ef58 <follow_path+0x3c>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f078:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 800f07c:	f1be 0f19 	cmp.w	lr, #25
 800f080:	d801      	bhi.n	800f086 <follow_path+0x16a>
 800f082:	3b20      	subs	r3, #32
 800f084:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800f086:	54b3      	strb	r3, [r6, r2]
 800f088:	3201      	adds	r2, #1
 800f08a:	e765      	b.n	800ef58 <follow_path+0x3c>
 800f08c:	08014b80 	.word	0x08014b80
 800f090:	08014bff 	.word	0x08014bff

0800f094 <dir_read.constprop.12>:
FRESULT dir_read (
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800f098:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
 800f09a:	2004      	movs	r0, #4
	while (dp->sect) {
 800f09c:	69e1      	ldr	r1, [r4, #28]
 800f09e:	b909      	cbnz	r1, 800f0a4 <dir_read.constprop.12+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f0a0:	b1a8      	cbz	r0, 800f0ce <dir_read.constprop.12+0x3a>
 800f0a2:	e01c      	b.n	800f0de <dir_read.constprop.12+0x4a>
		res = move_window(fs, dp->sect);
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	f7ff fb19 	bl	800e6dc <move_window>
		if (res != FR_OK) break;
 800f0aa:	b9c0      	cbnz	r0, 800f0de <dir_read.constprop.12+0x4a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f0ac:	6a23      	ldr	r3, [r4, #32]
 800f0ae:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 800f0b0:	b1c2      	cbz	r2, 800f0e4 <dir_read.constprop.12+0x50>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f0b2:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f0b4:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f0b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0ba:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f0bc:	d009      	beq.n	800f0d2 <dir_read.constprop.12+0x3e>
 800f0be:	2a2e      	cmp	r2, #46	; 0x2e
 800f0c0:	d007      	beq.n	800f0d2 <dir_read.constprop.12+0x3e>
 800f0c2:	2b0f      	cmp	r3, #15
 800f0c4:	d005      	beq.n	800f0d2 <dir_read.constprop.12+0x3e>
 800f0c6:	f023 0320 	bic.w	r3, r3, #32
 800f0ca:	2b08      	cmp	r3, #8
 800f0cc:	d001      	beq.n	800f0d2 <dir_read.constprop.12+0x3e>
		res = move_window(fs, dp->sect);
 800f0ce:	2000      	movs	r0, #0
}
 800f0d0:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	f7ff feac 	bl	800ee32 <dir_next>
		if (res != FR_OK) break;
 800f0da:	2800      	cmp	r0, #0
 800f0dc:	d0de      	beq.n	800f09c <dir_read.constprop.12+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f0de:	2300      	movs	r3, #0
 800f0e0:	61e3      	str	r3, [r4, #28]
 800f0e2:	e7f5      	b.n	800f0d0 <dir_read.constprop.12+0x3c>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f0e4:	2004      	movs	r0, #4
 800f0e6:	e7fa      	b.n	800f0de <dir_read.constprop.12+0x4a>

0800f0e8 <dir_register>:
{
 800f0e8:	b570      	push	{r4, r5, r6, lr}
 800f0ea:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800f0ec:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800f0ee:	f7ff fe6d 	bl	800edcc <dir_sdi.constprop.14>
	if (res == FR_OK) {
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	bb28      	cbnz	r0, 800f142 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 800f0f6:	69e9      	ldr	r1, [r5, #28]
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	f7ff faef 	bl	800e6dc <move_window>
			if (res != FR_OK) break;
 800f0fe:	4604      	mov	r4, r0
 800f100:	b9f8      	cbnz	r0, 800f142 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f102:	6a2b      	ldr	r3, [r5, #32]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	2be5      	cmp	r3, #229	; 0xe5
 800f108:	d114      	bne.n	800f134 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 800f10a:	69e9      	ldr	r1, [r5, #28]
 800f10c:	4630      	mov	r0, r6
 800f10e:	f7ff fae5 	bl	800e6dc <move_window>
		if (res == FR_OK) {
 800f112:	4604      	mov	r4, r0
 800f114:	b960      	cbnz	r0, 800f130 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f116:	4601      	mov	r1, r0
 800f118:	2220      	movs	r2, #32
 800f11a:	6a28      	ldr	r0, [r5, #32]
 800f11c:	f7ff f934 	bl	800e388 <mem_set>
 800f120:	220b      	movs	r2, #11
 800f122:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800f126:	6a28      	ldr	r0, [r5, #32]
 800f128:	f7ff fa61 	bl	800e5ee <mem_cpy.part.0>
			fs->wflag = 1;
 800f12c:	2301      	movs	r3, #1
 800f12e:	70f3      	strb	r3, [r6, #3]
}
 800f130:	4620      	mov	r0, r4
 800f132:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f134:	2b00      	cmp	r3, #0
 800f136:	d0e8      	beq.n	800f10a <dir_register+0x22>
			res = dir_next(dp, 1);
 800f138:	2101      	movs	r1, #1
 800f13a:	4628      	mov	r0, r5
 800f13c:	f7ff fe79 	bl	800ee32 <dir_next>
 800f140:	e7d7      	b.n	800f0f2 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f142:	2c04      	cmp	r4, #4
 800f144:	bf08      	it	eq
 800f146:	2407      	moveq	r4, #7
 800f148:	e7f2      	b.n	800f130 <dir_register+0x48>

0800f14a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f14a:	b538      	push	{r3, r4, r5, lr}
 800f14c:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f14e:	4604      	mov	r4, r0
 800f150:	b1d0      	cbz	r0, 800f188 <validate+0x3e>
 800f152:	6803      	ldr	r3, [r0, #0]
 800f154:	b1db      	cbz	r3, 800f18e <validate+0x44>
 800f156:	781a      	ldrb	r2, [r3, #0]
 800f158:	b1b2      	cbz	r2, 800f188 <validate+0x3e>
 800f15a:	8881      	ldrh	r1, [r0, #4]
 800f15c:	88da      	ldrh	r2, [r3, #6]
 800f15e:	4291      	cmp	r1, r2
 800f160:	d112      	bne.n	800f188 <validate+0x3e>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f162:	68d8      	ldr	r0, [r3, #12]
 800f164:	f000 fcbe 	bl	800fae4 <ff_req_grant>
 800f168:	4603      	mov	r3, r0
 800f16a:	b190      	cbz	r0, 800f192 <validate+0x48>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f16c:	6823      	ldr	r3, [r4, #0]
 800f16e:	7858      	ldrb	r0, [r3, #1]
 800f170:	f7ff f8b6 	bl	800e2e0 <disk_status>
 800f174:	f010 0001 	ands.w	r0, r0, #1
 800f178:	d102      	bne.n	800f180 <validate+0x36>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f17a:	6823      	ldr	r3, [r4, #0]
 800f17c:	602b      	str	r3, [r5, #0]
	return res;
}
 800f17e:	bd38      	pop	{r3, r4, r5, pc}
				unlock_fs(obj->fs, FR_OK);
 800f180:	2100      	movs	r1, #0
 800f182:	6820      	ldr	r0, [r4, #0]
 800f184:	f7ff fdcc 	bl	800ed20 <unlock_fs>
	FRESULT res = FR_INVALID_OBJECT;
 800f188:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f18a:	2300      	movs	r3, #0
 800f18c:	e7f6      	b.n	800f17c <validate+0x32>
	FRESULT res = FR_INVALID_OBJECT;
 800f18e:	2009      	movs	r0, #9
 800f190:	e7f4      	b.n	800f17c <validate+0x32>
			res = FR_TIMEOUT;
 800f192:	200f      	movs	r0, #15
 800f194:	e7f2      	b.n	800f17c <validate+0x32>
	...

0800f198 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f19a:	b085      	sub	sp, #20
 800f19c:	4616      	mov	r6, r2
 800f19e:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f1a2:	a804      	add	r0, sp, #16
 800f1a4:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f1a8:	f7ff fa09 	bl	800e5be <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f1ac:	1e07      	subs	r7, r0, #0
 800f1ae:	db35      	blt.n	800f21c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f1b0:	4d1c      	ldr	r5, [pc, #112]	; (800f224 <f_mount+0x8c>)
 800f1b2:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]

	if (cfs) {
 800f1b6:	b1a4      	cbz	r4, 800f1e2 <f_mount+0x4a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f1b8:	4b1b      	ldr	r3, [pc, #108]	; (800f228 <f_mount+0x90>)
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f1ba:	68e0      	ldr	r0, [r4, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	4294      	cmp	r4, r2
 800f1c0:	bf04      	itt	eq
 800f1c2:	2200      	moveq	r2, #0
 800f1c4:	601a      	streq	r2, [r3, #0]
 800f1c6:	691a      	ldr	r2, [r3, #16]
 800f1c8:	4294      	cmp	r4, r2
 800f1ca:	bf04      	itt	eq
 800f1cc:	2200      	moveq	r2, #0
 800f1ce:	611a      	streq	r2, [r3, #16]
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f1d0:	f000 fc83 	bl	800fada <ff_del_syncobj>
 800f1d4:	b918      	cbnz	r0, 800f1de <f_mount+0x46>
 800f1d6:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800f1d8:	4620      	mov	r0, r4
 800f1da:	b005      	add	sp, #20
 800f1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 800f1de:	2300      	movs	r3, #0
 800f1e0:	7023      	strb	r3, [r4, #0]
	if (fs) {
 800f1e2:	9901      	ldr	r1, [sp, #4]
 800f1e4:	b989      	cbnz	r1, 800f20a <f_mount+0x72>
	FatFs[vol] = fs;					/* Register new fs object */
 800f1e6:	9c01      	ldr	r4, [sp, #4]
 800f1e8:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f1ec:	2c00      	cmp	r4, #0
 800f1ee:	d0f3      	beq.n	800f1d8 <f_mount+0x40>
 800f1f0:	2e01      	cmp	r6, #1
 800f1f2:	d115      	bne.n	800f220 <f_mount+0x88>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f1f4:	a901      	add	r1, sp, #4
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	4668      	mov	r0, sp
 800f1fa:	f7ff facb 	bl	800e794 <find_volume>
 800f1fe:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 800f200:	4601      	mov	r1, r0
 800f202:	9801      	ldr	r0, [sp, #4]
 800f204:	f7ff fd8c 	bl	800ed20 <unlock_fs>
 800f208:	e7e6      	b.n	800f1d8 <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 800f20a:	2300      	movs	r3, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f20c:	b2f8      	uxtb	r0, r7
		fs->fs_type = 0;				/* Clear new fs object */
 800f20e:	f801 3b0c 	strb.w	r3, [r1], #12
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f212:	f000 fc56 	bl	800fac2 <ff_cre_syncobj>
 800f216:	2800      	cmp	r0, #0
 800f218:	d1e5      	bne.n	800f1e6 <f_mount+0x4e>
 800f21a:	e7dc      	b.n	800f1d6 <f_mount+0x3e>
	if (vol < 0) return FR_INVALID_DRIVE;
 800f21c:	240b      	movs	r4, #11
 800f21e:	e7db      	b.n	800f1d8 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f220:	2400      	movs	r4, #0
 800f222:	e7d9      	b.n	800f1d8 <f_mount+0x40>
 800f224:	24000338 	.word	0x24000338
 800f228:	2400033c 	.word	0x2400033c

0800f22c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f230:	b090      	sub	sp, #64	; 0x40
 800f232:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f234:	4604      	mov	r4, r0
{
 800f236:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800f238:	2800      	cmp	r0, #0
 800f23a:	f000 80bb 	beq.w	800f3b4 <f_open+0x188>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f23e:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800f242:	a902      	add	r1, sp, #8
 800f244:	a801      	add	r0, sp, #4
 800f246:	462a      	mov	r2, r5
 800f248:	f7ff faa4 	bl	800e794 <find_volume>
	if (res == FR_OK) {
 800f24c:	4607      	mov	r7, r0
 800f24e:	2800      	cmp	r0, #0
 800f250:	d165      	bne.n	800f31e <f_open+0xf2>
		dj.obj.fs = fs;
 800f252:	ae10      	add	r6, sp, #64	; 0x40
 800f254:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f256:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800f258:	f846 3d34 	str.w	r3, [r6, #-52]!
		res = follow_path(&dj, path);	/* Follow the file path */
 800f25c:	4630      	mov	r0, r6
 800f25e:	f7ff fe5d 	bl	800ef1c <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f262:	b958      	cbnz	r0, 800f27c <f_open+0x50>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f264:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 800f268:	2b00      	cmp	r3, #0
 800f26a:	db63      	blt.n	800f334 <f_open+0x108>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f26c:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 800f270:	4630      	mov	r0, r6
 800f272:	bf14      	ite	ne
 800f274:	2101      	movne	r1, #1
 800f276:	2100      	moveq	r1, #0
 800f278:	f7ff f88c 	bl	800e394 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f27c:	f018 0f1c 	tst.w	r8, #28
 800f280:	d064      	beq.n	800f34c <f_open+0x120>
			if (res != FR_OK) {					/* No file, create new */
 800f282:	2800      	cmp	r0, #0
 800f284:	d058      	beq.n	800f338 <f_open+0x10c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f286:	2804      	cmp	r0, #4
 800f288:	d149      	bne.n	800f31e <f_open+0xf2>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f28a:	4b6f      	ldr	r3, [pc, #444]	; (800f448 <f_open+0x21c>)
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	b11a      	cbz	r2, 800f298 <f_open+0x6c>
 800f290:	691b      	ldr	r3, [r3, #16]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f040 8088 	bne.w	800f3a8 <f_open+0x17c>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f298:	4630      	mov	r0, r6
 800f29a:	f7ff ff25 	bl	800f0e8 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d13d      	bne.n	800f31e <f_open+0xf2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f2a2:	f045 0508 	orr.w	r5, r5, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f2a6:	0728      	lsls	r0, r5, #28
 800f2a8:	d55b      	bpl.n	800f362 <f_open+0x136>
				dw = GET_FATTIME();
 800f2aa:	f7fe f95d 	bl	800d568 <get_fattime>
 800f2ae:	4602      	mov	r2, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f2b0:	4601      	mov	r1, r0
 800f2b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f2b4:	300e      	adds	r0, #14
 800f2b6:	f7ff f85f 	bl	800e378 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f2ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f2bc:	4611      	mov	r1, r2
 800f2be:	3016      	adds	r0, #22
 800f2c0:	f7ff f85a 	bl	800e378 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f2c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2c6:	2220      	movs	r2, #32
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f2c8:	f8dd 9008 	ldr.w	r9, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f2cc:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f2ce:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800f2d2:	f899 0000 	ldrb.w	r0, [r9]
 800f2d6:	4651      	mov	r1, sl
 800f2d8:	f7ff f992 	bl	800e600 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f2dc:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f2de:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f2e0:	4648      	mov	r0, r9
 800f2e2:	f7ff f99c 	bl	800e61e <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 800f2e8:	2200      	movs	r2, #0
					fs->wflag = 1;
 800f2ea:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800f2ec:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2ee:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2f0:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800f2f2:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800f2f4:	9b02      	ldr	r3, [sp, #8]
 800f2f6:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f2f8:	f1b8 0f00 	cmp.w	r8, #0
 800f2fc:	d031      	beq.n	800f362 <f_open+0x136>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 800f2fe:	4641      	mov	r1, r8
 800f300:	4630      	mov	r0, r6
						dw = fs->winsect;
 800f302:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800f306:	f7ff fcd4 	bl	800ecb2 <remove_chain>
						if (res == FR_OK) {
 800f30a:	b940      	cbnz	r0, 800f31e <f_open+0xf2>
							res = move_window(fs, dw);
 800f30c:	4649      	mov	r1, r9
 800f30e:	9802      	ldr	r0, [sp, #8]
 800f310:	f7ff f9e4 	bl	800e6dc <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f314:	f108 33ff 	add.w	r3, r8, #4294967295
 800f318:	9a02      	ldr	r2, [sp, #8]
 800f31a:	6113      	str	r3, [r2, #16]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 800f31c:	b308      	cbz	r0, 800f362 <f_open+0x136>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f31e:	2300      	movs	r3, #0
 800f320:	4607      	mov	r7, r0
 800f322:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
 800f324:	4639      	mov	r1, r7
 800f326:	9802      	ldr	r0, [sp, #8]
 800f328:	f7ff fcfa 	bl	800ed20 <unlock_fs>
}
 800f32c:	4638      	mov	r0, r7
 800f32e:	b010      	add	sp, #64	; 0x40
 800f330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800f334:	2006      	movs	r0, #6
 800f336:	e7a1      	b.n	800f27c <f_open+0x50>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f338:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800f33c:	f013 0f11 	tst.w	r3, #17
 800f340:	d136      	bne.n	800f3b0 <f_open+0x184>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f342:	f018 0f04 	tst.w	r8, #4
 800f346:	d0ae      	beq.n	800f2a6 <f_open+0x7a>
 800f348:	2008      	movs	r0, #8
 800f34a:	e7e8      	b.n	800f31e <f_open+0xf2>
			if (res == FR_OK) {					/* Following succeeded */
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d1e6      	bne.n	800f31e <f_open+0xf2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f350:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800f354:	06da      	lsls	r2, r3, #27
 800f356:	d429      	bmi.n	800f3ac <f_open+0x180>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f358:	f018 0f02 	tst.w	r8, #2
 800f35c:	d001      	beq.n	800f362 <f_open+0x136>
 800f35e:	07db      	lsls	r3, r3, #31
 800f360:	d426      	bmi.n	800f3b0 <f_open+0x184>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f362:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f364:	9b02      	ldr	r3, [sp, #8]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f366:	4630      	mov	r0, r6
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				mode |= FA_MODIFIED;
 800f36a:	bf48      	it	mi
 800f36c:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f370:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f372:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 800f376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f378:	bf14      	ite	ne
 800f37a:	2101      	movne	r1, #1
 800f37c:	2100      	moveq	r1, #0
			fp->dir_ptr = dj.dir;
 800f37e:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f380:	f7ff f842 	bl	800e408 <inc_lock>
 800f384:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f386:	b9b8      	cbnz	r0, 800f3b8 <f_open+0x18c>
 800f388:	2002      	movs	r0, #2
 800f38a:	e7c8      	b.n	800f31e <f_open+0xf2>
					clst = get_fat(&fp->obj, clst);
 800f38c:	6820      	ldr	r0, [r4, #0]
 800f38e:	eba5 0508 	sub.w	r5, r5, r8
 800f392:	f7ff fbdc 	bl	800eb4e <get_fat.isra.9>
					if (clst <= 1) res = FR_INT_ERR;
 800f396:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800f398:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800f39a:	d903      	bls.n	800f3a4 <f_open+0x178>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f39c:	1c42      	adds	r2, r0, #1
 800f39e:	d134      	bne.n	800f40a <f_open+0x1de>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f3a0:	2001      	movs	r0, #1
 800f3a2:	e035      	b.n	800f410 <f_open+0x1e4>
					if (clst <= 1) res = FR_INT_ERR;
 800f3a4:	2002      	movs	r0, #2
 800f3a6:	e033      	b.n	800f410 <f_open+0x1e4>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f3a8:	2012      	movs	r0, #18
 800f3aa:	e7b8      	b.n	800f31e <f_open+0xf2>
					res = FR_NO_FILE;
 800f3ac:	2004      	movs	r0, #4
 800f3ae:	e7b6      	b.n	800f31e <f_open+0xf2>
					res = FR_DENIED;
 800f3b0:	2007      	movs	r0, #7
 800f3b2:	e7b4      	b.n	800f31e <f_open+0xf2>
	if (!fp) return FR_INVALID_OBJECT;
 800f3b4:	2709      	movs	r7, #9
 800f3b6:	e7b9      	b.n	800f32c <f_open+0x100>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f3b8:	9e02      	ldr	r6, [sp, #8]
 800f3ba:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800f3be:	7830      	ldrb	r0, [r6, #0]
 800f3c0:	4641      	mov	r1, r8
 800f3c2:	f7ff f91d 	bl	800e600 <ld_clust.isra.1>
 800f3c6:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f3c8:	f108 001c 	add.w	r0, r8, #28
 800f3cc:	f7fe ffcc 	bl	800e368 <ld_dword>
			fp->obj.id = fs->id;
 800f3d0:	88f3      	ldrh	r3, [r6, #6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f3d2:	2100      	movs	r1, #0
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f3d4:	6026      	str	r6, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f3d6:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f3da:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 800f3dc:	80a3      	strh	r3, [r4, #4]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f3de:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f3e2:	62e1      	str	r1, [r4, #44]	; 0x2c
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f3e4:	4630      	mov	r0, r6
			fp->flag = mode;		/* Set file access mode */
 800f3e6:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800f3e8:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f3ea:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f3ec:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f3ee:	f7fe ffcb 	bl	800e388 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f3f2:	06ab      	lsls	r3, r5, #26
 800f3f4:	d596      	bpl.n	800f324 <f_open+0xf8>
 800f3f6:	68e5      	ldr	r5, [r4, #12]
 800f3f8:	2d00      	cmp	r5, #0
 800f3fa:	d093      	beq.n	800f324 <f_open+0xf8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f3fc:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f3fe:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f400:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f404:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f406:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f40a:	45a8      	cmp	r8, r5
 800f40c:	d3be      	bcc.n	800f38c <f_open+0x160>
 800f40e:	2000      	movs	r0, #0
				fp->clust = clst;
 800f410:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f412:	2800      	cmp	r0, #0
 800f414:	d183      	bne.n	800f31e <f_open+0xf2>
 800f416:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d082      	beq.n	800f324 <f_open+0xf8>
 800f41e:	f8dd 8008 	ldr.w	r8, [sp, #8]
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f422:	4640      	mov	r0, r8
 800f424:	f7ff f84c 	bl	800e4c0 <clust2sect>
 800f428:	2800      	cmp	r0, #0
 800f42a:	d0ad      	beq.n	800f388 <f_open+0x15c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f42c:	eb00 2255 	add.w	r2, r0, r5, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f430:	2301      	movs	r3, #1
 800f432:	4631      	mov	r1, r6
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f434:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f436:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f43a:	f7fe ff6b 	bl	800e314 <disk_read>
 800f43e:	2800      	cmp	r0, #0
 800f440:	f43f af70 	beq.w	800f324 <f_open+0xf8>
 800f444:	2001      	movs	r0, #1
 800f446:	e76a      	b.n	800f31e <f_open+0xf2>
 800f448:	2400033c 	.word	0x2400033c

0800f44c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f450:	469b      	mov	fp, r3
 800f452:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800f454:	2300      	movs	r3, #0
{
 800f456:	4689      	mov	r9, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f458:	a903      	add	r1, sp, #12
{
 800f45a:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
 800f45c:	f8cb 3000 	str.w	r3, [fp]
{
 800f460:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f462:	f7ff fe72 	bl	800f14a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f466:	4605      	mov	r5, r0
 800f468:	b908      	cbnz	r0, 800f46e <f_write+0x22>
 800f46a:	7d65      	ldrb	r5, [r4, #21]
 800f46c:	b10d      	cbz	r5, 800f472 <f_write+0x26>
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
 800f46e:	4629      	mov	r1, r5
 800f470:	e01e      	b.n	800f4b0 <f_write+0x64>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f472:	7d23      	ldrb	r3, [r4, #20]
 800f474:	079a      	lsls	r2, r3, #30
 800f476:	d408      	bmi.n	800f48a <f_write+0x3e>
 800f478:	2507      	movs	r5, #7
 800f47a:	2107      	movs	r1, #7
 800f47c:	9803      	ldr	r0, [sp, #12]
 800f47e:	f7ff fc4f 	bl	800ed20 <unlock_fs>
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800f482:	4628      	mov	r0, r5
 800f484:	b005      	add	sp, #20
 800f486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f48a:	69a3      	ldr	r3, [r4, #24]
 800f48c:	42fb      	cmn	r3, r7
 800f48e:	d300      	bcc.n	800f492 <f_write+0x46>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f490:	43df      	mvns	r7, r3
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f492:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	e070      	b.n	800f57c <f_write+0x130>
					if (fp->cltbl) {
 800f49a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f49c:	b163      	cbz	r3, 800f4b8 <f_write+0x6c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f7ff f819 	bl	800e4d6 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f4a4:	b950      	cbnz	r0, 800f4bc <f_write+0x70>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f4a6:	7d23      	ldrb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800f4a8:	2100      	movs	r1, #0
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4ae:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800f4b0:	9803      	ldr	r0, [sp, #12]
 800f4b2:	f7ff fc35 	bl	800ed20 <unlock_fs>
 800f4b6:	e7e4      	b.n	800f482 <f_write+0x36>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f4b8:	69e1      	ldr	r1, [r4, #28]
 800f4ba:	e073      	b.n	800f5a4 <f_write+0x158>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f4bc:	2801      	cmp	r0, #1
 800f4be:	d102      	bne.n	800f4c6 <f_write+0x7a>
 800f4c0:	2502      	movs	r5, #2
					ABORT(fs, FR_DISK_ERR);
 800f4c2:	7565      	strb	r5, [r4, #21]
 800f4c4:	e7d3      	b.n	800f46e <f_write+0x22>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f4c6:	1c43      	adds	r3, r0, #1
 800f4c8:	d101      	bne.n	800f4ce <f_write+0x82>
					ABORT(fs, FR_DISK_ERR);
 800f4ca:	2501      	movs	r5, #1
 800f4cc:	e7f9      	b.n	800f4c2 <f_write+0x76>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f4ce:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800f4d0:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f4d2:	b903      	cbnz	r3, 800f4d6 <f_write+0x8a>
 800f4d4:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f4d6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	da0c      	bge.n	800f4f8 <f_write+0xac>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f4de:	9803      	ldr	r0, [sp, #12]
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	6a22      	ldr	r2, [r4, #32]
 800f4e4:	9900      	ldr	r1, [sp, #0]
 800f4e6:	7840      	ldrb	r0, [r0, #1]
 800f4e8:	f7fe ff22 	bl	800e330 <disk_write>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d1ec      	bne.n	800f4ca <f_write+0x7e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f4f0:	7d23      	ldrb	r3, [r4, #20]
 800f4f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4f6:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f4f8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800f4fc:	69e1      	ldr	r1, [r4, #28]
 800f4fe:	4650      	mov	r0, sl
 800f500:	f7fe ffde 	bl	800e4c0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f504:	b920      	cbnz	r0, 800f510 <f_write+0xc4>
 800f506:	2502      	movs	r5, #2
 800f508:	4650      	mov	r0, sl
 800f50a:	7565      	strb	r5, [r4, #21]
 800f50c:	4629      	mov	r1, r5
 800f50e:	e7d0      	b.n	800f4b2 <f_write+0x66>
			sect += csect;
 800f510:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f512:	0a7e      	lsrs	r6, r7, #9
			sect += csect;
 800f514:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f518:	d048      	beq.n	800f5ac <f_write+0x160>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f51a:	9a01      	ldr	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f51c:	4649      	mov	r1, r9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f51e:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 800f522:	4432      	add	r2, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f524:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f528:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800f52a:	bf84      	itt	hi
 800f52c:	9a01      	ldrhi	r2, [sp, #4]
 800f52e:	1a9e      	subhi	r6, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f530:	4642      	mov	r2, r8
 800f532:	4633      	mov	r3, r6
 800f534:	f7fe fefc 	bl	800e330 <disk_write>
 800f538:	2800      	cmp	r0, #0
 800f53a:	d1c6      	bne.n	800f4ca <f_write+0x7e>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f53c:	6a21      	ldr	r1, [r4, #32]
 800f53e:	eba1 0108 	sub.w	r1, r1, r8
 800f542:	42b1      	cmp	r1, r6
 800f544:	d20a      	bcs.n	800f55c <f_write+0x110>
 800f546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f54a:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 800f54e:	9800      	ldr	r0, [sp, #0]
 800f550:	f7ff f84d 	bl	800e5ee <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f554:	7d23      	ldrb	r3, [r4, #20]
 800f556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f55a:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f55c:	0276      	lsls	r6, r6, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f55e:	69a3      	ldr	r3, [r4, #24]
 800f560:	44b1      	add	r9, r6
 800f562:	68e2      	ldr	r2, [r4, #12]
 800f564:	1bbf      	subs	r7, r7, r6
 800f566:	4433      	add	r3, r6
 800f568:	61a3      	str	r3, [r4, #24]
 800f56a:	429a      	cmp	r2, r3
 800f56c:	bf2c      	ite	cs
 800f56e:	60e2      	strcs	r2, [r4, #12]
 800f570:	60e3      	strcc	r3, [r4, #12]
 800f572:	f8db 3000 	ldr.w	r3, [fp]
 800f576:	4433      	add	r3, r6
 800f578:	f8cb 3000 	str.w	r3, [fp]
	for ( ;  btw;							/* Repeat until all data written */
 800f57c:	2f00      	cmp	r7, #0
 800f57e:	d092      	beq.n	800f4a6 <f_write+0x5a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f580:	69a1      	ldr	r1, [r4, #24]
 800f582:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800f586:	bb23      	cbnz	r3, 800f5d2 <f_write+0x186>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f588:	9b03      	ldr	r3, [sp, #12]
 800f58a:	895b      	ldrh	r3, [r3, #10]
 800f58c:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800f58e:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 800f592:	9301      	str	r3, [sp, #4]
 800f594:	d19f      	bne.n	800f4d6 <f_write+0x8a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f596:	2900      	cmp	r1, #0
 800f598:	f47f af7f 	bne.w	800f49a <f_write+0x4e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f59c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	d18c      	bne.n	800f4bc <f_write+0x70>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f5a2:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	f7ff fb2c 	bl	800ec02 <create_chain>
 800f5aa:	e77b      	b.n	800f4a4 <f_write+0x58>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f5ac:	6a23      	ldr	r3, [r4, #32]
 800f5ae:	4543      	cmp	r3, r8
 800f5b0:	d00d      	beq.n	800f5ce <f_write+0x182>
 800f5b2:	68e2      	ldr	r2, [r4, #12]
 800f5b4:	69a3      	ldr	r3, [r4, #24]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d909      	bls.n	800f5ce <f_write+0x182>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	4642      	mov	r2, r8
 800f5be:	9900      	ldr	r1, [sp, #0]
 800f5c0:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800f5c4:	f7fe fea6 	bl	800e314 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	f47f af7e 	bne.w	800f4ca <f_write+0x7e>
			fp->sect = sect;
 800f5ce:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f5d2:	69a0      	ldr	r0, [r4, #24]
 800f5d4:	4649      	mov	r1, r9
 800f5d6:	9b00      	ldr	r3, [sp, #0]
 800f5d8:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800f5dc:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
 800f5e0:	4418      	add	r0, r3
 800f5e2:	42be      	cmp	r6, r7
 800f5e4:	bf28      	it	cs
 800f5e6:	463e      	movcs	r6, r7
 800f5e8:	4632      	mov	r2, r6
 800f5ea:	f7ff f800 	bl	800e5ee <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 800f5ee:	7d23      	ldrb	r3, [r4, #20]
 800f5f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f5f4:	7523      	strb	r3, [r4, #20]
 800f5f6:	e7b2      	b.n	800f55e <f_write+0x112>

0800f5f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f5fa:	a901      	add	r1, sp, #4
{
 800f5fc:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f5fe:	f7ff fda4 	bl	800f14a <validate>
	if (res == FR_OK) {
 800f602:	4605      	mov	r5, r0
 800f604:	2800      	cmp	r0, #0
 800f606:	d142      	bne.n	800f68e <f_sync+0x96>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f608:	7d23      	ldrb	r3, [r4, #20]
 800f60a:	065a      	lsls	r2, r3, #25
 800f60c:	d53f      	bpl.n	800f68e <f_sync+0x96>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f60e:	061b      	lsls	r3, r3, #24
 800f610:	d514      	bpl.n	800f63c <f_sync+0x44>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f612:	9801      	ldr	r0, [sp, #4]
 800f614:	2301      	movs	r3, #1
 800f616:	6a22      	ldr	r2, [r4, #32]
 800f618:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800f61c:	7840      	ldrb	r0, [r0, #1]
 800f61e:	f7fe fe87 	bl	800e330 <disk_write>
 800f622:	b138      	cbz	r0, 800f634 <f_sync+0x3c>
 800f624:	2501      	movs	r5, #1
 800f626:	2101      	movs	r1, #1
 800f628:	9801      	ldr	r0, [sp, #4]
 800f62a:	f7ff fb79 	bl	800ed20 <unlock_fs>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800f62e:	4628      	mov	r0, r5
 800f630:	b003      	add	sp, #12
 800f632:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->flag &= (BYTE)~FA_DIRTY;
 800f634:	7d23      	ldrb	r3, [r4, #20]
 800f636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f63a:	7523      	strb	r3, [r4, #20]
			tm = GET_FATTIME();				/* Modified time */
 800f63c:	f7fd ff94 	bl	800d568 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800f640:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800f642:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 800f644:	9801      	ldr	r0, [sp, #4]
 800f646:	f7ff f849 	bl	800e6dc <move_window>
				if (res == FR_OK) {
 800f64a:	4605      	mov	r5, r0
 800f64c:	b9f8      	cbnz	r0, 800f68e <f_sync+0x96>
					dir = fp->dir_ptr;
 800f64e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f650:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f652:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f654:	f043 0320 	orr.w	r3, r3, #32
 800f658:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f65a:	68a2      	ldr	r2, [r4, #8]
 800f65c:	6820      	ldr	r0, [r4, #0]
 800f65e:	f7fe ffde 	bl	800e61e <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f662:	68e1      	ldr	r1, [r4, #12]
 800f664:	f106 001c 	add.w	r0, r6, #28
 800f668:	f7fe fe86 	bl	800e378 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f66c:	4639      	mov	r1, r7
 800f66e:	f106 0016 	add.w	r0, r6, #22
 800f672:	f7fe fe81 	bl	800e378 <st_dword>
					fs->wflag = 1;
 800f676:	2301      	movs	r3, #1
 800f678:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800f67a:	74b5      	strb	r5, [r6, #18]
	*ptr++ = (BYTE)val;
 800f67c:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 800f67e:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f680:	f7ff fb59 	bl	800ed36 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f684:	7d23      	ldrb	r3, [r4, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f686:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f68c:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, res);
 800f68e:	4629      	mov	r1, r5
 800f690:	9801      	ldr	r0, [sp, #4]
 800f692:	f7ff fb45 	bl	800ed20 <unlock_fs>
 800f696:	e7ca      	b.n	800f62e <f_sync+0x36>

0800f698 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f69a:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f69c:	f7ff ffac 	bl	800f5f8 <f_sync>
	if (res == FR_OK)
 800f6a0:	4604      	mov	r4, r0
 800f6a2:	b978      	cbnz	r0, 800f6c4 <f_close+0x2c>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f6a4:	a901      	add	r1, sp, #4
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	f7ff fd4f 	bl	800f14a <validate>
		if (res == FR_OK) {
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	b948      	cbnz	r0, 800f6c4 <f_close+0x2c>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f6b0:	6928      	ldr	r0, [r5, #16]
 800f6b2:	f7fe fee9 	bl	800e488 <dec_lock>
			if (res == FR_OK)
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	b900      	cbnz	r0, 800f6bc <f_close+0x24>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f6ba:	6028      	str	r0, [r5, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f6bc:	2100      	movs	r1, #0
 800f6be:	9801      	ldr	r0, [sp, #4]
 800f6c0:	f7ff fb2e 	bl	800ed20 <unlock_fs>
#endif
		}
	}
	return res;
}
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	b003      	add	sp, #12
 800f6c8:	bd30      	pop	{r4, r5, pc}

0800f6ca <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f6ca:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6ce:	460e      	mov	r6, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f6d0:	a901      	add	r1, sp, #4
{
 800f6d2:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f6d4:	f7ff fd39 	bl	800f14a <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f6d8:	4604      	mov	r4, r0
 800f6da:	b908      	cbnz	r0, 800f6e0 <f_lseek+0x16>
 800f6dc:	7d6c      	ldrb	r4, [r5, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f6de:	b114      	cbz	r4, 800f6e6 <f_lseek+0x1c>
#endif
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
 800f6e0:	4621      	mov	r1, r4
 800f6e2:	9801      	ldr	r0, [sp, #4]
 800f6e4:	e051      	b.n	800f78a <f_lseek+0xc0>
	if (fp->cltbl) {	/* Fast seek */
 800f6e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d07c      	beq.n	800f7e6 <f_lseek+0x11c>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f6ec:	1c72      	adds	r2, r6, #1
 800f6ee:	d134      	bne.n	800f75a <f_lseek+0x90>
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f6f0:	68af      	ldr	r7, [r5, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f6f2:	f103 0904 	add.w	r9, r3, #4
 800f6f6:	f8d3 a000 	ldr.w	sl, [r3]
 800f6fa:	2602      	movs	r6, #2
			if (cl) {
 800f6fc:	b327      	cbz	r7, 800f748 <f_lseek+0x7e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f6fe:	f04f 0800 	mov.w	r8, #0
 800f702:	eb07 0108 	add.w	r1, r7, r8
						cl = get_fat(&fp->obj, cl);
 800f706:	6828      	ldr	r0, [r5, #0]
 800f708:	f7ff fa21 	bl	800eb4e <get_fat.isra.9>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f70c:	2801      	cmp	r0, #1
						cl = get_fat(&fp->obj, cl);
 800f70e:	f108 0801 	add.w	r8, r8, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f712:	d804      	bhi.n	800f71e <f_lseek+0x54>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f714:	2402      	movs	r4, #2
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f716:	756c      	strb	r4, [r5, #21]
 800f718:	e7e2      	b.n	800f6e0 <f_lseek+0x16>
 800f71a:	4607      	mov	r7, r0
 800f71c:	e7ef      	b.n	800f6fe <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f71e:	1c43      	adds	r3, r0, #1
 800f720:	d101      	bne.n	800f726 <f_lseek+0x5c>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f722:	2401      	movs	r4, #1
 800f724:	e7f7      	b.n	800f716 <f_lseek+0x4c>
					} while (cl == pcl + 1);
 800f726:	eb07 0308 	add.w	r3, r7, r8
 800f72a:	4283      	cmp	r3, r0
 800f72c:	d0e9      	beq.n	800f702 <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f72e:	3602      	adds	r6, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f730:	45b2      	cmp	sl, r6
						*tbl++ = ncl; *tbl++ = tcl;
 800f732:	bf21      	itttt	cs
 800f734:	464b      	movcs	r3, r9
 800f736:	f843 8b08 	strcs.w	r8, [r3], #8
 800f73a:	f8c9 7004 	strcs.w	r7, [r9, #4]
 800f73e:	4699      	movcs	r9, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f740:	9b01      	ldr	r3, [sp, #4]
 800f742:	699b      	ldr	r3, [r3, #24]
 800f744:	4283      	cmp	r3, r0
 800f746:	d8e8      	bhi.n	800f71a <f_lseek+0x50>
			*fp->cltbl = ulen;	/* Number of items used */
 800f748:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			if (ulen <= tlen) {
 800f74a:	4556      	cmp	r6, sl
			*fp->cltbl = ulen;	/* Number of items used */
 800f74c:	601e      	str	r6, [r3, #0]
			if (ulen <= tlen) {
 800f74e:	f200 80e4 	bhi.w	800f91a <f_lseek+0x250>
				*tbl = 0;		/* Terminate table */
 800f752:	2300      	movs	r3, #0
 800f754:	f8c9 3000 	str.w	r3, [r9]
 800f758:	e7c2      	b.n	800f6e0 <f_lseek+0x16>
 800f75a:	68e8      	ldr	r0, [r5, #12]
 800f75c:	4286      	cmp	r6, r0
 800f75e:	bf28      	it	cs
 800f760:	4606      	movcs	r6, r0
			fp->fptr = ofs;				/* Set file pointer */
 800f762:	61ae      	str	r6, [r5, #24]
			if (ofs) {
 800f764:	2e00      	cmp	r6, #0
 800f766:	d0bb      	beq.n	800f6e0 <f_lseek+0x16>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f768:	f106 38ff 	add.w	r8, r6, #4294967295
 800f76c:	9f01      	ldr	r7, [sp, #4]
 800f76e:	4628      	mov	r0, r5
 800f770:	4641      	mov	r1, r8
 800f772:	f7fe feb0 	bl	800e4d6 <clmt_clust>
 800f776:	4601      	mov	r1, r0
 800f778:	61e8      	str	r0, [r5, #28]
				dsc = clust2sect(fs, fp->clust);
 800f77a:	4638      	mov	r0, r7
 800f77c:	f7fe fea0 	bl	800e4c0 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f780:	b948      	cbnz	r0, 800f796 <f_lseek+0xcc>
 800f782:	2402      	movs	r4, #2
 800f784:	4638      	mov	r0, r7
 800f786:	4621      	mov	r1, r4
 800f788:	756c      	strb	r4, [r5, #21]
	LEAVE_FF(fs, res);
 800f78a:	f7ff fac9 	bl	800ed20 <unlock_fs>
}
 800f78e:	4620      	mov	r0, r4
 800f790:	b002      	add	sp, #8
 800f792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f796:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800f79a:	2e00      	cmp	r6, #0
 800f79c:	d0a0      	beq.n	800f6e0 <f_lseek+0x16>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f79e:	897e      	ldrh	r6, [r7, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f7a0:	6a2a      	ldr	r2, [r5, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f7a2:	3e01      	subs	r6, #1
 800f7a4:	ea06 2658 	and.w	r6, r6, r8, lsr #9
 800f7a8:	4406      	add	r6, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f7aa:	42b2      	cmp	r2, r6
 800f7ac:	d098      	beq.n	800f6e0 <f_lseek+0x16>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f7ae:	f995 3014 	ldrsb.w	r3, [r5, #20]
 800f7b2:	f105 0830 	add.w	r8, r5, #48	; 0x30
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	da0a      	bge.n	800f7d0 <f_lseek+0x106>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	4641      	mov	r1, r8
 800f7be:	7878      	ldrb	r0, [r7, #1]
 800f7c0:	f7fe fdb6 	bl	800e330 <disk_write>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	d1ac      	bne.n	800f722 <f_lseek+0x58>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f7c8:	7d2b      	ldrb	r3, [r5, #20]
 800f7ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7ce:	752b      	strb	r3, [r5, #20]
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f7d0:	9801      	ldr	r0, [sp, #4]
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	4632      	mov	r2, r6
 800f7d6:	4641      	mov	r1, r8
 800f7d8:	7840      	ldrb	r0, [r0, #1]
 800f7da:	f7fe fd9b 	bl	800e314 <disk_read>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d19f      	bne.n	800f722 <f_lseek+0x58>
					fp->sect = dsc;
 800f7e2:	622e      	str	r6, [r5, #32]
 800f7e4:	e77c      	b.n	800f6e0 <f_lseek+0x16>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f7e6:	68eb      	ldr	r3, [r5, #12]
 800f7e8:	42b3      	cmp	r3, r6
 800f7ea:	d204      	bcs.n	800f7f6 <f_lseek+0x12c>
 800f7ec:	7d2a      	ldrb	r2, [r5, #20]
 800f7ee:	f012 0f02 	tst.w	r2, #2
 800f7f2:	bf08      	it	eq
 800f7f4:	461e      	moveq	r6, r3
		fp->fptr = nsect = 0;
 800f7f6:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800f7f8:	69ab      	ldr	r3, [r5, #24]
		fp->fptr = nsect = 0;
 800f7fa:	61aa      	str	r2, [r5, #24]
		if (ofs) {
 800f7fc:	b90e      	cbnz	r6, 800f802 <f_lseek+0x138>
		fp->fptr = nsect = 0;
 800f7fe:	4637      	mov	r7, r6
 800f800:	e01d      	b.n	800f83e <f_lseek+0x174>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f802:	9a01      	ldr	r2, [sp, #4]
 800f804:	8957      	ldrh	r7, [r2, #10]
 800f806:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d040      	beq.n	800f88e <f_lseek+0x1c4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f80c:	3b01      	subs	r3, #1
 800f80e:	1e72      	subs	r2, r6, #1
 800f810:	fbb3 f1f7 	udiv	r1, r3, r7
 800f814:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800f818:	428a      	cmp	r2, r1
 800f81a:	d338      	bcc.n	800f88e <f_lseek+0x1c4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f81c:	427a      	negs	r2, r7
				clst = fp->clust;
 800f81e:	69e9      	ldr	r1, [r5, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f820:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 800f822:	1af6      	subs	r6, r6, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f824:	61ab      	str	r3, [r5, #24]
			if (clst != 0) {
 800f826:	2900      	cmp	r1, #0
 800f828:	d160      	bne.n	800f8ec <f_lseek+0x222>
		fp->fptr = nsect = 0;
 800f82a:	2700      	movs	r7, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f82c:	68eb      	ldr	r3, [r5, #12]
 800f82e:	69ae      	ldr	r6, [r5, #24]
 800f830:	429e      	cmp	r6, r3
			fp->flag |= FA_MODIFIED;
 800f832:	bf81      	itttt	hi
 800f834:	7d2b      	ldrbhi	r3, [r5, #20]
			fp->obj.objsize = fp->fptr;
 800f836:	60ee      	strhi	r6, [r5, #12]
			fp->flag |= FA_MODIFIED;
 800f838:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 800f83c:	752b      	strbhi	r3, [r5, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f83e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800f842:	2e00      	cmp	r6, #0
 800f844:	f43f af4c 	beq.w	800f6e0 <f_lseek+0x16>
 800f848:	6a2a      	ldr	r2, [r5, #32]
 800f84a:	4297      	cmp	r7, r2
 800f84c:	f43f af48 	beq.w	800f6e0 <f_lseek+0x16>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f850:	f995 3014 	ldrsb.w	r3, [r5, #20]
 800f854:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800f858:	2b00      	cmp	r3, #0
 800f85a:	da0c      	bge.n	800f876 <f_lseek+0x1ac>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f85c:	9801      	ldr	r0, [sp, #4]
 800f85e:	2301      	movs	r3, #1
 800f860:	4631      	mov	r1, r6
 800f862:	7840      	ldrb	r0, [r0, #1]
 800f864:	f7fe fd64 	bl	800e330 <disk_write>
 800f868:	2800      	cmp	r0, #0
 800f86a:	f47f af5a 	bne.w	800f722 <f_lseek+0x58>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f86e:	7d2b      	ldrb	r3, [r5, #20]
 800f870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f874:	752b      	strb	r3, [r5, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f876:	9801      	ldr	r0, [sp, #4]
 800f878:	2301      	movs	r3, #1
 800f87a:	463a      	mov	r2, r7
 800f87c:	4631      	mov	r1, r6
 800f87e:	7840      	ldrb	r0, [r0, #1]
 800f880:	f7fe fd48 	bl	800e314 <disk_read>
 800f884:	2800      	cmp	r0, #0
 800f886:	f47f af4c 	bne.w	800f722 <f_lseek+0x58>
			fp->sect = nsect;
 800f88a:	622f      	str	r7, [r5, #32]
 800f88c:	e728      	b.n	800f6e0 <f_lseek+0x16>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f88e:	68a9      	ldr	r1, [r5, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f890:	b951      	cbnz	r1, 800f8a8 <f_lseek+0x1de>
					clst = create_chain(&fp->obj, 0);
 800f892:	4628      	mov	r0, r5
 800f894:	f7ff f9b5 	bl	800ec02 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f898:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800f89a:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f89c:	f43f af3a 	beq.w	800f714 <f_lseek+0x4a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8a0:	3001      	adds	r0, #1
 800f8a2:	f43f af3e 	beq.w	800f722 <f_lseek+0x58>
					fp->obj.sclust = clst;
 800f8a6:	60a9      	str	r1, [r5, #8]
				fp->clust = clst;
 800f8a8:	61e9      	str	r1, [r5, #28]
 800f8aa:	e7bc      	b.n	800f826 <f_lseek+0x15c>
					ofs -= bcs; fp->fptr += bcs;
 800f8ac:	443b      	add	r3, r7
 800f8ae:	1bf6      	subs	r6, r6, r7
 800f8b0:	61ab      	str	r3, [r5, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f8b2:	7d2b      	ldrb	r3, [r5, #20]
 800f8b4:	079a      	lsls	r2, r3, #30
 800f8b6:	d506      	bpl.n	800f8c6 <f_lseek+0x1fc>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	f7ff f9a2 	bl	800ec02 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f8be:	4601      	mov	r1, r0
 800f8c0:	b928      	cbnz	r0, 800f8ce <f_lseek+0x204>
							ofs = 0; break;
 800f8c2:	4606      	mov	r6, r0
 800f8c4:	e015      	b.n	800f8f2 <f_lseek+0x228>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f8c6:	6828      	ldr	r0, [r5, #0]
 800f8c8:	f7ff f941 	bl	800eb4e <get_fat.isra.9>
 800f8cc:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8ce:	1c4b      	adds	r3, r1, #1
 800f8d0:	9801      	ldr	r0, [sp, #4]
 800f8d2:	d103      	bne.n	800f8dc <f_lseek+0x212>
 800f8d4:	2401      	movs	r4, #1
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f8d6:	756c      	strb	r4, [r5, #21]
 800f8d8:	4621      	mov	r1, r4
 800f8da:	e756      	b.n	800f78a <f_lseek+0xc0>
 800f8dc:	2901      	cmp	r1, #1
 800f8de:	d902      	bls.n	800f8e6 <f_lseek+0x21c>
 800f8e0:	6983      	ldr	r3, [r0, #24]
 800f8e2:	428b      	cmp	r3, r1
 800f8e4:	d801      	bhi.n	800f8ea <f_lseek+0x220>
 800f8e6:	2402      	movs	r4, #2
 800f8e8:	e7f5      	b.n	800f8d6 <f_lseek+0x20c>
					fp->clust = clst;
 800f8ea:	61e9      	str	r1, [r5, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f8ec:	42be      	cmp	r6, r7
 800f8ee:	69ab      	ldr	r3, [r5, #24]
 800f8f0:	d8dc      	bhi.n	800f8ac <f_lseek+0x1e2>
				fp->fptr += ofs;
 800f8f2:	69ab      	ldr	r3, [r5, #24]
 800f8f4:	4433      	add	r3, r6
 800f8f6:	61ab      	str	r3, [r5, #24]
				if (ofs % SS(fs)) {
 800f8f8:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d094      	beq.n	800f82a <f_lseek+0x160>
 800f900:	9a01      	ldr	r2, [sp, #4]
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f902:	4610      	mov	r0, r2
 800f904:	f7fe fddc 	bl	800e4c0 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f908:	b920      	cbnz	r0, 800f914 <f_lseek+0x24a>
 800f90a:	2402      	movs	r4, #2
 800f90c:	4610      	mov	r0, r2
 800f90e:	756c      	strb	r4, [r5, #21]
 800f910:	4621      	mov	r1, r4
 800f912:	e73a      	b.n	800f78a <f_lseek+0xc0>
					nsect += (DWORD)(ofs / SS(fs));
 800f914:	eb00 2756 	add.w	r7, r0, r6, lsr #9
 800f918:	e788      	b.n	800f82c <f_lseek+0x162>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f91a:	2411      	movs	r4, #17
 800f91c:	e6e0      	b.n	800f6e0 <f_lseek+0x16>

0800f91e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f91e:	b530      	push	{r4, r5, lr}
 800f920:	b085      	sub	sp, #20
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f922:	4604      	mov	r4, r0
{
 800f924:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 800f926:	2800      	cmp	r0, #0
 800f928:	d03c      	beq.n	800f9a4 <f_opendir+0x86>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800f92a:	2200      	movs	r2, #0
 800f92c:	a903      	add	r1, sp, #12
 800f92e:	a801      	add	r0, sp, #4
 800f930:	f7fe ff30 	bl	800e794 <find_volume>
	if (res == FR_OK) {
 800f934:	4605      	mov	r5, r0
 800f936:	b980      	cbnz	r0, 800f95a <f_opendir+0x3c>
		obj->fs = fs;
 800f938:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f93a:	4620      	mov	r0, r4
 800f93c:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 800f93e:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f940:	f7ff faec 	bl	800ef1c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800f944:	4605      	mov	r5, r0
 800f946:	bb40      	cbnz	r0, 800f99a <f_opendir+0x7c>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f948:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800f94c:	9d03      	ldr	r5, [sp, #12]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	db0b      	blt.n	800f96a <f_opendir+0x4c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f952:	79a3      	ldrb	r3, [r4, #6]
 800f954:	06db      	lsls	r3, r3, #27
 800f956:	d403      	bmi.n	800f960 <f_opendir+0x42>
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f958:	2505      	movs	r5, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f95a:	2300      	movs	r3, #0
 800f95c:	6023      	str	r3, [r4, #0]
 800f95e:	e013      	b.n	800f988 <f_opendir+0x6a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f960:	7828      	ldrb	r0, [r5, #0]
 800f962:	6a21      	ldr	r1, [r4, #32]
 800f964:	f7fe fe4c 	bl	800e600 <ld_clust.isra.1>
 800f968:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
 800f96a:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f96c:	4620      	mov	r0, r4
				obj->id = fs->id;
 800f96e:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f970:	f7ff fa2c 	bl	800edcc <dir_sdi.constprop.14>
				if (res == FR_OK) {
 800f974:	4605      	mov	r5, r0
 800f976:	b980      	cbnz	r0, 800f99a <f_opendir+0x7c>
					if (obj->sclust) {
 800f978:	68a3      	ldr	r3, [r4, #8]
 800f97a:	b163      	cbz	r3, 800f996 <f_opendir+0x78>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f97c:	4601      	mov	r1, r0
 800f97e:	4620      	mov	r0, r4
 800f980:	f7fe fd42 	bl	800e408 <inc_lock>
 800f984:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f986:	b158      	cbz	r0, 800f9a0 <f_opendir+0x82>

	LEAVE_FF(fs, res);
 800f988:	4629      	mov	r1, r5
 800f98a:	9803      	ldr	r0, [sp, #12]
 800f98c:	f7ff f9c8 	bl	800ed20 <unlock_fs>
}
 800f990:	4628      	mov	r0, r5
 800f992:	b005      	add	sp, #20
 800f994:	bd30      	pop	{r4, r5, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f996:	6120      	str	r0, [r4, #16]
 800f998:	e7f6      	b.n	800f988 <f_opendir+0x6a>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f99a:	2d04      	cmp	r5, #4
 800f99c:	d0dc      	beq.n	800f958 <f_opendir+0x3a>
 800f99e:	e7dc      	b.n	800f95a <f_opendir+0x3c>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f9a0:	2512      	movs	r5, #18
 800f9a2:	e7da      	b.n	800f95a <f_opendir+0x3c>
	if (!dp) return FR_INVALID_OBJECT;
 800f9a4:	2509      	movs	r5, #9
 800f9a6:	e7f3      	b.n	800f990 <f_opendir+0x72>

0800f9a8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f9a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f9aa:	a901      	add	r1, sp, #4
{
 800f9ac:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f9ae:	f7ff fbcc 	bl	800f14a <validate>
	if (res == FR_OK) {
 800f9b2:	b940      	cbnz	r0, 800f9c6 <f_closedir+0x1e>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f9b4:	6928      	ldr	r0, [r5, #16]
 800f9b6:	b940      	cbnz	r0, 800f9ca <f_closedir+0x22>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f9b8:	2400      	movs	r4, #0
 800f9ba:	602c      	str	r4, [r5, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f9bc:	9801      	ldr	r0, [sp, #4]
 800f9be:	2100      	movs	r1, #0
 800f9c0:	f7ff f9ae 	bl	800ed20 <unlock_fs>
 800f9c4:	4620      	mov	r0, r4
#endif
	}
	return res;
}
 800f9c6:	b003      	add	sp, #12
 800f9c8:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
 800f9ca:	f7fe fd5d 	bl	800e488 <dec_lock>
		if (res == FR_OK)
 800f9ce:	4604      	mov	r4, r0
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	d1f3      	bne.n	800f9bc <f_closedir+0x14>
 800f9d4:	e7f0      	b.n	800f9b8 <f_closedir+0x10>

0800f9d6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f9d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9d8:	460e      	mov	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f9da:	a901      	add	r1, sp, #4
{
 800f9dc:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f9de:	f7ff fbb4 	bl	800f14a <validate>
	if (res == FR_OK) {
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	b920      	cbnz	r0, 800f9f0 <f_readdir+0x1a>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f9e6:	4628      	mov	r0, r5
		if (!fno) {
 800f9e8:	b94e      	cbnz	r6, 800f9fe <f_readdir+0x28>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f9ea:	f7ff f9ef 	bl	800edcc <dir_sdi.constprop.14>
 800f9ee:	4604      	mov	r4, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f9f0:	9801      	ldr	r0, [sp, #4]
 800f9f2:	4621      	mov	r1, r4
 800f9f4:	f7ff f994 	bl	800ed20 <unlock_fs>
}
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	b002      	add	sp, #8
 800f9fc:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 800f9fe:	f7ff fb49 	bl	800f094 <dir_read.constprop.12>
			if (res == FR_OK) {				/* A valid entry is found */
 800fa02:	f010 03fb 	ands.w	r3, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 800fa06:	4604      	mov	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800fa08:	d1f2      	bne.n	800f9f0 <f_readdir+0x1a>
	fno->fname[0] = 0;		/* Invaidate file info */
 800fa0a:	7273      	strb	r3, [r6, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fa0c:	69eb      	ldr	r3, [r5, #28]
 800fa0e:	b11b      	cbz	r3, 800fa18 <f_readdir+0x42>
 800fa10:	4631      	mov	r1, r6
 800fa12:	4628      	mov	r0, r5
 800fa14:	f7fe fe0f 	bl	800e636 <get_fileinfo.part.3>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fa18:	2100      	movs	r1, #0
 800fa1a:	4628      	mov	r0, r5
 800fa1c:	f7ff fa09 	bl	800ee32 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fa20:	2804      	cmp	r0, #4
 800fa22:	bf14      	ite	ne
 800fa24:	4604      	movne	r4, r0
 800fa26:	2400      	moveq	r4, #0
 800fa28:	e7e2      	b.n	800f9f0 <f_readdir+0x1a>

0800fa2a <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800fa2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2c:	4606      	mov	r6, r0
 800fa2e:	460d      	mov	r5, r1


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fa30:	f101 0709 	add.w	r7, r1, #9
		res = f_readdir(dp, fno);		/* Get a directory item */
 800fa34:	4629      	mov	r1, r5
 800fa36:	4630      	mov	r0, r6
 800fa38:	f7ff ffcd 	bl	800f9d6 <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	b950      	cbnz	r0, 800fa56 <f_findnext+0x2c>
 800fa40:	b14d      	cbz	r5, 800fa56 <f_findnext+0x2c>
 800fa42:	7a6b      	ldrb	r3, [r5, #9]
 800fa44:	b13b      	cbz	r3, 800fa56 <f_findnext+0x2c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fa46:	4603      	mov	r3, r0
 800fa48:	4602      	mov	r2, r0
 800fa4a:	4639      	mov	r1, r7
 800fa4c:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800fa4e:	f7fe fd69 	bl	800e524 <pattern_matching>
 800fa52:	2800      	cmp	r0, #0
 800fa54:	d0ee      	beq.n	800fa34 <f_findnext+0xa>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800fa56:	4620      	mov	r0, r4
 800fa58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa5a <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800fa5a:	b538      	push	{r3, r4, r5, lr}
 800fa5c:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800fa5e:	6303      	str	r3, [r0, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 800fa60:	4611      	mov	r1, r2
{
 800fa62:	4604      	mov	r4, r0
	res = f_opendir(dp, path);		/* Open the target directory */
 800fa64:	f7ff ff5b 	bl	800f91e <f_opendir>
	if (res == FR_OK) {
 800fa68:	b928      	cbnz	r0, 800fa76 <f_findfirst+0x1c>
		res = f_findnext(dp, fno);	/* Find the first item */
 800fa6a:	4629      	mov	r1, r5
 800fa6c:	4620      	mov	r0, r4
	}
	return res;
}
 800fa6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 800fa72:	f7ff bfda 	b.w	800fa2a <f_findnext>
}
 800fa76:	bd38      	pop	{r3, r4, r5, pc}

0800fa78 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800fa78:	4b0f      	ldr	r3, [pc, #60]	; (800fab8 <FATFS_LinkDriverEx+0x40>)
{
 800fa7a:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 800fa7c:	7a5d      	ldrb	r5, [r3, #9]
 800fa7e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800fa82:	b9b5      	cbnz	r5, 800fab2 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fa84:	7a5d      	ldrb	r5, [r3, #9]
 800fa86:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800fa88:	7a5d      	ldrb	r5, [r3, #9]
 800fa8a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800fa8e:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800fa90:	7a58      	ldrb	r0, [r3, #9]
 800fa92:	4418      	add	r0, r3
 800fa94:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800fa96:	7a5a      	ldrb	r2, [r3, #9]
 800fa98:	b2d2      	uxtb	r2, r2
 800fa9a:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800fa9c:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800fa9e:	b2c0      	uxtb	r0, r0
 800faa0:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800faa2:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
 800faa4:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 800faa6:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800faa8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800faaa:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 800faac:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800faae:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 800fab0:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800fab2:	2001      	movs	r0, #1
 800fab4:	e7fc      	b.n	800fab0 <FATFS_LinkDriverEx+0x38>
 800fab6:	bf00      	nop
 800fab8:	24000360 	.word	0x24000360

0800fabc <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800fabc:	2200      	movs	r2, #0
 800fabe:	f7ff bfdb 	b.w	800fa78 <FATFS_LinkDriverEx>

0800fac2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800fac2:	b510      	push	{r4, lr}
 800fac4:	460c      	mov	r4, r1

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800fac6:	2101      	movs	r1, #1
 800fac8:	2200      	movs	r2, #0
 800faca:	4608      	mov	r0, r1
 800facc:	f000 f9a8 	bl	800fe20 <osSemaphoreNew>
 800fad0:	6020      	str	r0, [r4, #0]

#endif
    ret = (*sobj != NULL);

    return ret;
}
 800fad2:	3000      	adds	r0, #0
 800fad4:	bf18      	it	ne
 800fad6:	2001      	movne	r0, #1
 800fad8:	bd10      	pop	{r4, pc}

0800fada <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800fada:	b508      	push	{r3, lr}
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800fadc:	f000 fa6a 	bl	800ffb4 <osSemaphoreDelete>
#endif
    return 1;
}
 800fae0:	2001      	movs	r0, #1
 800fae2:	bd08      	pop	{r3, pc}

0800fae4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800fae4:	b508      	push	{r3, lr}
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800fae6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800faea:	f000 f9ef 	bl	800fecc <osSemaphoreAcquire>
  {
    ret = 1;
  }

  return ret;
}
 800faee:	fab0 f080 	clz	r0, r0
 800faf2:	0940      	lsrs	r0, r0, #5
 800faf4:	bd08      	pop	{r3, pc}

0800faf6 <ff_rel_grant>:
)
{
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800faf6:	f000 ba25 	b.w	800ff44 <osSemaphoreRelease>
	...

0800fafc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fafc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb00:	b113      	cbz	r3, 800fb08 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800fb02:	f06f 0005 	mvn.w	r0, #5
 800fb06:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb08:	f3ef 8210 	mrs	r2, PRIMASK
 800fb0c:	4b07      	ldr	r3, [pc, #28]	; (800fb2c <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800fb0e:	b912      	cbnz	r2, 800fb16 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fb10:	f3ef 8211 	mrs	r2, BASEPRI
 800fb14:	b112      	cbz	r2, 800fb1c <osKernelInitialize+0x20>
 800fb16:	681a      	ldr	r2, [r3, #0]
 800fb18:	2a02      	cmp	r2, #2
 800fb1a:	d0f2      	beq.n	800fb02 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fb1c:	6818      	ldr	r0, [r3, #0]
 800fb1e:	b910      	cbnz	r0, 800fb26 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fb20:	2201      	movs	r2, #1
 800fb22:	601a      	str	r2, [r3, #0]
 800fb24:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 800fb26:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800fb2a:	4770      	bx	lr
 800fb2c:	240005c4 	.word	0x240005c4

0800fb30 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800fb30:	b508      	push	{r3, lr}
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800fb32:	f001 fd77 	bl	8011624 <xTaskGetSchedulerState>
 800fb36:	b138      	cbz	r0, 800fb48 <osKernelGetState+0x18>
 800fb38:	2802      	cmp	r0, #2
 800fb3a:	d006      	beq.n	800fb4a <osKernelGetState+0x1a>
      state = osKernelLocked;
      break;

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800fb3c:	4b03      	ldr	r3, [pc, #12]	; (800fb4c <osKernelGetState+0x1c>)
 800fb3e:	6818      	ldr	r0, [r3, #0]
 800fb40:	1e43      	subs	r3, r0, #1
 800fb42:	4258      	negs	r0, r3
 800fb44:	4158      	adcs	r0, r3
 800fb46:	e000      	b.n	800fb4a <osKernelGetState+0x1a>
      state = osKernelLocked;
 800fb48:	2003      	movs	r0, #3
      }
      break;
  }

  return (state);
}
 800fb4a:	bd08      	pop	{r3, pc}
 800fb4c:	240005c4 	.word	0x240005c4

0800fb50 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800fb50:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb52:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb56:	b113      	cbz	r3, 800fb5e <osKernelStart+0xe>
    stat = osErrorISR;
 800fb58:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800fb5c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb5e:	f3ef 8210 	mrs	r2, PRIMASK
 800fb62:	4b0a      	ldr	r3, [pc, #40]	; (800fb8c <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800fb64:	b912      	cbnz	r2, 800fb6c <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fb66:	f3ef 8211 	mrs	r2, BASEPRI
 800fb6a:	b112      	cbz	r2, 800fb72 <osKernelStart+0x22>
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	2a02      	cmp	r2, #2
 800fb70:	d0f2      	beq.n	800fb58 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	2a01      	cmp	r2, #1
 800fb76:	d105      	bne.n	800fb84 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800fb78:	2202      	movs	r2, #2
 800fb7a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800fb7c:	f001 fa7e 	bl	801107c <vTaskStartScheduler>
      stat = osOK;
 800fb80:	2000      	movs	r0, #0
 800fb82:	e7eb      	b.n	800fb5c <osKernelStart+0xc>
      stat = osError;
 800fb84:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800fb88:	e7e8      	b.n	800fb5c <osKernelStart+0xc>
 800fb8a:	bf00      	nop
 800fb8c:	240005c4 	.word	0x240005c4

0800fb90 <osKernelGetTickCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb90:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 800fb94:	b10b      	cbz	r3, 800fb9a <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 800fb96:	f001 bac3 	b.w	8011120 <xTaskGetTickCountFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb9a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800fb9e:	b913      	cbnz	r3, 800fba6 <osKernelGetTickCount+0x16>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fba0:	f3ef 8311 	mrs	r3, BASEPRI
 800fba4:	b11b      	cbz	r3, 800fbae <osKernelGetTickCount+0x1e>
 800fba6:	4b03      	ldr	r3, [pc, #12]	; (800fbb4 <osKernelGetTickCount+0x24>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b02      	cmp	r3, #2
 800fbac:	d0f3      	beq.n	800fb96 <osKernelGetTickCount+0x6>
  } else {
    ticks = xTaskGetTickCount();
 800fbae:	f001 bab1 	b.w	8011114 <xTaskGetTickCount>
 800fbb2:	bf00      	nop
 800fbb4:	240005c4 	.word	0x240005c4

0800fbb8 <osKernelGetTickFreq>:
  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}
 800fbb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fbbc:	4770      	bx	lr
	...

0800fbc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbc2:	4614      	mov	r4, r2
 800fbc4:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fbc6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fbc8:	460b      	mov	r3, r1
  hTask = NULL;
 800fbca:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbcc:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800fbd0:	bb32      	cbnz	r2, 800fc20 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbd2:	f3ef 8210 	mrs	r2, PRIMASK
 800fbd6:	b912      	cbnz	r2, 800fbde <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fbd8:	f3ef 8211 	mrs	r2, BASEPRI
 800fbdc:	b11a      	cbz	r2, 800fbe6 <osThreadNew+0x26>
 800fbde:	4a22      	ldr	r2, [pc, #136]	; (800fc68 <osThreadNew+0xa8>)
 800fbe0:	6812      	ldr	r2, [r2, #0]
 800fbe2:	2a02      	cmp	r2, #2
 800fbe4:	d01c      	beq.n	800fc20 <osThreadNew+0x60>
 800fbe6:	b1d8      	cbz	r0, 800fc20 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800fbe8:	2c00      	cmp	r4, #0
 800fbea:	d036      	beq.n	800fc5a <osThreadNew+0x9a>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800fbec:	69a5      	ldr	r5, [r4, #24]
      if (attr->name != NULL) {
 800fbee:	6821      	ldr	r1, [r4, #0]
 800fbf0:	2d00      	cmp	r5, #0
 800fbf2:	bf08      	it	eq
 800fbf4:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fbf6:	1e6a      	subs	r2, r5, #1
 800fbf8:	462f      	mov	r7, r5
 800fbfa:	2a37      	cmp	r2, #55	; 0x37
 800fbfc:	d831      	bhi.n	800fc62 <osThreadNew+0xa2>
 800fbfe:	6862      	ldr	r2, [r4, #4]
 800fc00:	07d2      	lsls	r2, r2, #31
 800fc02:	d42e      	bmi.n	800fc62 <osThreadNew+0xa2>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800fc04:	6966      	ldr	r6, [r4, #20]
 800fc06:	b176      	cbz	r6, 800fc26 <osThreadNew+0x66>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fc08:	08b2      	lsrs	r2, r6, #2
 800fc0a:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fc0e:	f1bc 0f00 	cmp.w	ip, #0
 800fc12:	d00a      	beq.n	800fc2a <osThreadNew+0x6a>
 800fc14:	f1be 0f57 	cmp.w	lr, #87	; 0x57
 800fc18:	d902      	bls.n	800fc20 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fc1a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fc1c:	b104      	cbz	r4, 800fc20 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fc1e:	b9ae      	cbnz	r6, 800fc4c <osThreadNew+0x8c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fc20:	9805      	ldr	r0, [sp, #20]
}
 800fc22:	b007      	add	sp, #28
 800fc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800fc26:	2280      	movs	r2, #128	; 0x80
 800fc28:	e7ef      	b.n	800fc0a <osThreadNew+0x4a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fc2a:	f1be 0f00 	cmp.w	lr, #0
 800fc2e:	d1f7      	bne.n	800fc20 <osThreadNew+0x60>
      if (mem == 0) {
 800fc30:	6924      	ldr	r4, [r4, #16]
 800fc32:	2c00      	cmp	r4, #0
 800fc34:	d1f4      	bne.n	800fc20 <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fc36:	ac05      	add	r4, sp, #20
 800fc38:	b292      	uxth	r2, r2
 800fc3a:	e9cd 7400 	strd	r7, r4, [sp]
 800fc3e:	f001 f9ef 	bl	8011020 <xTaskCreate>
 800fc42:	2801      	cmp	r0, #1
          hTask = NULL;
 800fc44:	bf1c      	itt	ne
 800fc46:	2300      	movne	r3, #0
 800fc48:	9305      	strne	r3, [sp, #20]
 800fc4a:	e7e9      	b.n	800fc20 <osThreadNew+0x60>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fc4c:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 800fc50:	9500      	str	r5, [sp, #0]
 800fc52:	f001 f9ad 	bl	8010fb0 <xTaskCreateStatic>
 800fc56:	9005      	str	r0, [sp, #20]
 800fc58:	e7e2      	b.n	800fc20 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;
 800fc5a:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 800fc5c:	2280      	movs	r2, #128	; 0x80
    name = NULL;
 800fc5e:	4621      	mov	r1, r4
 800fc60:	e7e9      	b.n	800fc36 <osThreadNew+0x76>
        return (NULL);
 800fc62:	2000      	movs	r0, #0
 800fc64:	e7dd      	b.n	800fc22 <osThreadNew+0x62>
 800fc66:	bf00      	nop
 800fc68:	240005c4 	.word	0x240005c4

0800fc6c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800fc6c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc6e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800fc72:	b113      	cbz	r3, 800fc7a <osDelay+0xe>
    stat = osErrorISR;
 800fc74:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800fc78:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc7a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800fc7e:	b913      	cbnz	r3, 800fc86 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fc80:	f3ef 8311 	mrs	r3, BASEPRI
 800fc84:	b11b      	cbz	r3, 800fc8e <osDelay+0x22>
 800fc86:	4b05      	ldr	r3, [pc, #20]	; (800fc9c <osDelay+0x30>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b02      	cmp	r3, #2
 800fc8c:	d0f2      	beq.n	800fc74 <osDelay+0x8>
    if (ticks != 0U) {
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	d0f2      	beq.n	800fc78 <osDelay+0xc>
      vTaskDelay(ticks);
 800fc92:	f001 fb99 	bl	80113c8 <vTaskDelay>
    stat = osOK;
 800fc96:	2000      	movs	r0, #0
 800fc98:	e7ee      	b.n	800fc78 <osDelay+0xc>
 800fc9a:	bf00      	nop
 800fc9c:	240005c4 	.word	0x240005c4

0800fca0 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800fca0:	b513      	push	{r0, r1, r4, lr}
 800fca2:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fca4:	f3ef 8305 	mrs	r3, IPSR
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800fca8:	b11b      	cbz	r3, 800fcb2 <osDelayUntil+0x12>
    stat = osErrorISR;
 800fcaa:	f06f 0005 	mvn.w	r0, #5
      stat = osErrorParameter;
    }
  }

  return (stat);
}
 800fcae:	b002      	add	sp, #8
 800fcb0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcb2:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800fcb6:	b913      	cbnz	r3, 800fcbe <osDelayUntil+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fcb8:	f3ef 8311 	mrs	r3, BASEPRI
 800fcbc:	b11b      	cbz	r3, 800fcc6 <osDelayUntil+0x26>
 800fcbe:	4b09      	ldr	r3, [pc, #36]	; (800fce4 <osDelayUntil+0x44>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	2b02      	cmp	r3, #2
 800fcc4:	d0f1      	beq.n	800fcaa <osDelayUntil+0xa>
    tcnt = xTaskGetTickCount();
 800fcc6:	f001 fa25 	bl	8011114 <xTaskGetTickCount>
    delay = (TickType_t)ticks - tcnt;
 800fcca:	1a21      	subs	r1, r4, r0
    tcnt = xTaskGetTickCount();
 800fccc:	9001      	str	r0, [sp, #4]
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800fcce:	2900      	cmp	r1, #0
 800fcd0:	dd04      	ble.n	800fcdc <osDelayUntil+0x3c>
      vTaskDelayUntil (&tcnt, delay);
 800fcd2:	a801      	add	r0, sp, #4
 800fcd4:	f001 fb30 	bl	8011338 <vTaskDelayUntil>
    stat = osOK;
 800fcd8:	2000      	movs	r0, #0
 800fcda:	e7e8      	b.n	800fcae <osDelayUntil+0xe>
      stat = osErrorParameter;
 800fcdc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800fce0:	e7e5      	b.n	800fcae <osDelayUntil+0xe>
 800fce2:	bf00      	nop
 800fce4:	240005c4 	.word	0x240005c4

0800fce8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800fce8:	b570      	push	{r4, r5, r6, lr}
 800fcea:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcec:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800fcf0:	b113      	cbz	r3, 800fcf8 <osMutexNew+0x10>
  hMutex = NULL;
 800fcf2:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcf8:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800fcfc:	b912      	cbnz	r2, 800fd04 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fcfe:	f3ef 8211 	mrs	r2, BASEPRI
 800fd02:	b11a      	cbz	r2, 800fd0c <osMutexNew+0x24>
 800fd04:	4a18      	ldr	r2, [pc, #96]	; (800fd68 <osMutexNew+0x80>)
 800fd06:	6812      	ldr	r2, [r2, #0]
 800fd08:	2a02      	cmp	r2, #2
 800fd0a:	d0f2      	beq.n	800fcf2 <osMutexNew+0xa>
    if (attr != NULL) {
 800fd0c:	b104      	cbz	r4, 800fd10 <osMutexNew+0x28>
      type = attr->attr_bits;
 800fd0e:	6863      	ldr	r3, [r4, #4]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800fd10:	f003 0601 	and.w	r6, r3, #1
    if ((type & osMutexRobust) != osMutexRobust) {
 800fd14:	071b      	lsls	r3, r3, #28
 800fd16:	d4ec      	bmi.n	800fcf2 <osMutexNew+0xa>
      if (attr != NULL) {
 800fd18:	b1b4      	cbz	r4, 800fd48 <osMutexNew+0x60>
 800fd1a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fd1e:	b189      	cbz	r1, 800fd44 <osMutexNew+0x5c>
 800fd20:	2b47      	cmp	r3, #71	; 0x47
 800fd22:	d9e6      	bls.n	800fcf2 <osMutexNew+0xa>
        if (rmtx != 0U) {
 800fd24:	b1de      	cbz	r6, 800fd5e <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800fd26:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800fd28:	f000 fcb2 	bl	8010690 <xQueueCreateMutexStatic>
 800fd2c:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d0df      	beq.n	800fcf2 <osMutexNew+0xa>
          name = attr->name;
 800fd32:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hMutex, name);
 800fd34:	4628      	mov	r0, r5
 800fd36:	f000 ff77 	bl	8010c28 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800fd3a:	2e00      	cmp	r6, #0
 800fd3c:	d0da      	beq.n	800fcf4 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800fd3e:	f045 0501 	orr.w	r5, r5, #1
  return ((osMutexId_t)hMutex);
 800fd42:	e7d7      	b.n	800fcf4 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d1d4      	bne.n	800fcf2 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800fd48:	b15e      	cbz	r6, 800fd62 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800fd4a:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800fd4c:	f000 fcd3 	bl	80106f6 <xQueueCreateMutex>
 800fd50:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 800fd52:	2800      	cmp	r0, #0
 800fd54:	d0cd      	beq.n	800fcf2 <osMutexNew+0xa>
        if (attr != NULL) {
 800fd56:	2c00      	cmp	r4, #0
 800fd58:	d1eb      	bne.n	800fd32 <osMutexNew+0x4a>
          name = NULL;
 800fd5a:	4621      	mov	r1, r4
 800fd5c:	e7ea      	b.n	800fd34 <osMutexNew+0x4c>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800fd5e:	2001      	movs	r0, #1
 800fd60:	e7e2      	b.n	800fd28 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800fd62:	2001      	movs	r0, #1
 800fd64:	e7f2      	b.n	800fd4c <osMutexNew+0x64>
 800fd66:	bf00      	nop
 800fd68:	240005c4 	.word	0x240005c4

0800fd6c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800fd6c:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800fd6e:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800fd72:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800fd74:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800fd78:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd7a:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800fd7e:	b112      	cbz	r2, 800fd86 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800fd80:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800fd84:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd86:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800fd8a:	b912      	cbnz	r2, 800fd92 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fd8c:	f3ef 8211 	mrs	r2, BASEPRI
 800fd90:	b11a      	cbz	r2, 800fd9a <osMutexAcquire+0x2e>
 800fd92:	4a0d      	ldr	r2, [pc, #52]	; (800fdc8 <osMutexAcquire+0x5c>)
 800fd94:	6812      	ldr	r2, [r2, #0]
 800fd96:	2a02      	cmp	r2, #2
 800fd98:	d0f2      	beq.n	800fd80 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800fd9a:	b188      	cbz	r0, 800fdc0 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800fd9c:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800fd9e:	b163      	cbz	r3, 800fdba <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800fda0:	f000 fed2 	bl	8010b48 <xQueueTakeMutexRecursive>
 800fda4:	2801      	cmp	r0, #1
 800fda6:	d101      	bne.n	800fdac <osMutexAcquire+0x40>
  stat = osOK;
 800fda8:	2000      	movs	r0, #0
 800fdaa:	e7eb      	b.n	800fd84 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800fdac:	2c00      	cmp	r4, #0
 800fdae:	bf14      	ite	ne
 800fdb0:	f06f 0001 	mvnne.w	r0, #1
 800fdb4:	f06f 0002 	mvneq.w	r0, #2
 800fdb8:	e7e4      	b.n	800fd84 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800fdba:	f000 fe03 	bl	80109c4 <xQueueSemaphoreTake>
 800fdbe:	e7f1      	b.n	800fda4 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 800fdc0:	f06f 0003 	mvn.w	r0, #3
 800fdc4:	e7de      	b.n	800fd84 <osMutexAcquire+0x18>
 800fdc6:	bf00      	nop
 800fdc8:	240005c4 	.word	0x240005c4

0800fdcc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800fdcc:	b508      	push	{r3, lr}
 800fdce:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800fdd0:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800fdd4:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdd8:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800fddc:	b112      	cbz	r2, 800fde4 <osMutexRelease+0x18>
    stat = osErrorISR;
 800fdde:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800fde2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fde4:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800fde8:	b912      	cbnz	r2, 800fdf0 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fdea:	f3ef 8211 	mrs	r2, BASEPRI
 800fdee:	b11a      	cbz	r2, 800fdf8 <osMutexRelease+0x2c>
 800fdf0:	4a0a      	ldr	r2, [pc, #40]	; (800fe1c <osMutexRelease+0x50>)
 800fdf2:	6812      	ldr	r2, [r2, #0]
 800fdf4:	2a02      	cmp	r2, #2
 800fdf6:	d0f2      	beq.n	800fdde <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800fdf8:	b168      	cbz	r0, 800fe16 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800fdfa:	b13b      	cbz	r3, 800fe0c <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800fdfc:	f000 fc5d 	bl	80106ba <xQueueGiveMutexRecursive>
 800fe00:	2801      	cmp	r0, #1
  stat = osOK;
 800fe02:	bf0c      	ite	eq
 800fe04:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800fe06:	f06f 0002 	mvnne.w	r0, #2
 800fe0a:	e7ea      	b.n	800fde2 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	4619      	mov	r1, r3
 800fe10:	f000 fb8c 	bl	801052c <xQueueGenericSend>
 800fe14:	e7f4      	b.n	800fe00 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800fe16:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800fe1a:	e7e2      	b.n	800fde2 <osMutexRelease+0x16>
 800fe1c:	240005c4 	.word	0x240005c4

0800fe20 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800fe20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe22:	460e      	mov	r6, r1
 800fe24:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe26:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fe2a:	b11b      	cbz	r3, 800fe34 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800fe2c:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800fe2e:	4620      	mov	r0, r4
 800fe30:	b002      	add	sp, #8
 800fe32:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe34:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fe38:	b913      	cbnz	r3, 800fe40 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe3a:	f3ef 8311 	mrs	r3, BASEPRI
 800fe3e:	b11b      	cbz	r3, 800fe48 <osSemaphoreNew+0x28>
 800fe40:	4b21      	ldr	r3, [pc, #132]	; (800fec8 <osSemaphoreNew+0xa8>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b02      	cmp	r3, #2
 800fe46:	d0f1      	beq.n	800fe2c <osSemaphoreNew+0xc>
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	d0ef      	beq.n	800fe2c <osSemaphoreNew+0xc>
 800fe4c:	42b0      	cmp	r0, r6
 800fe4e:	d3ed      	bcc.n	800fe2c <osSemaphoreNew+0xc>
    if (attr != NULL) {
 800fe50:	b1ed      	cbz	r5, 800fe8e <osSemaphoreNew+0x6e>
 800fe52:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fe56:	b1c3      	cbz	r3, 800fe8a <osSemaphoreNew+0x6a>
 800fe58:	2a47      	cmp	r2, #71	; 0x47
 800fe5a:	d9e7      	bls.n	800fe2c <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800fe5c:	2801      	cmp	r0, #1
 800fe5e:	d126      	bne.n	800feae <osSemaphoreNew+0x8e>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fe60:	2203      	movs	r2, #3
 800fe62:	9200      	str	r2, [sp, #0]
 800fe64:	2200      	movs	r2, #0
 800fe66:	4611      	mov	r1, r2
 800fe68:	f000 fab2 	bl	80103d0 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800fe6c:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	d0dc      	beq.n	800fe2c <osSemaphoreNew+0xc>
 800fe72:	b1ce      	cbz	r6, 800fea8 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fe74:	2300      	movs	r3, #0
 800fe76:	461a      	mov	r2, r3
 800fe78:	4619      	mov	r1, r3
 800fe7a:	f000 fb57 	bl	801052c <xQueueGenericSend>
 800fe7e:	2801      	cmp	r0, #1
 800fe80:	d012      	beq.n	800fea8 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800fe82:	4620      	mov	r0, r4
 800fe84:	f000 fef6 	bl	8010c74 <vQueueDelete>
 800fe88:	e7d0      	b.n	800fe2c <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fe8a:	2a00      	cmp	r2, #0
 800fe8c:	d1ce      	bne.n	800fe2c <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800fe8e:	2801      	cmp	r0, #1
 800fe90:	d104      	bne.n	800fe9c <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800fe92:	2203      	movs	r2, #3
 800fe94:	2100      	movs	r1, #0
 800fe96:	f000 fae5 	bl	8010464 <xQueueGenericCreate>
 800fe9a:	e7e7      	b.n	800fe6c <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fe9c:	4631      	mov	r1, r6
 800fe9e:	f000 fb27 	bl	80104f0 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800fea2:	4604      	mov	r4, r0
 800fea4:	2800      	cmp	r0, #0
 800fea6:	d0c1      	beq.n	800fe2c <osSemaphoreNew+0xc>
        if (attr != NULL) {
 800fea8:	b945      	cbnz	r5, 800febc <osSemaphoreNew+0x9c>
          name = NULL;
 800feaa:	4629      	mov	r1, r5
 800feac:	e007      	b.n	800febe <osSemaphoreNew+0x9e>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800feae:	461a      	mov	r2, r3
 800feb0:	4631      	mov	r1, r6
 800feb2:	f000 fafb 	bl	80104ac <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800feb6:	4604      	mov	r4, r0
 800feb8:	2800      	cmp	r0, #0
 800feba:	d0b7      	beq.n	800fe2c <osSemaphoreNew+0xc>
          name = attr->name;
 800febc:	6829      	ldr	r1, [r5, #0]
        vQueueAddToRegistry (hSemaphore, name);
 800febe:	4620      	mov	r0, r4
 800fec0:	f000 feb2 	bl	8010c28 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800fec4:	e7b3      	b.n	800fe2e <osSemaphoreNew+0xe>
 800fec6:	bf00      	nop
 800fec8:	240005c4 	.word	0x240005c4

0800fecc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800fecc:	b513      	push	{r0, r1, r4, lr}
 800fece:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800fed0:	b918      	cbnz	r0, 800feda <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800fed2:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800fed6:	b002      	add	sp, #8
 800fed8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800feda:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800fede:	b16b      	cbz	r3, 800fefc <osSemaphoreAcquire+0x30>
    if (timeout != 0U) {
 800fee0:	2c00      	cmp	r4, #0
 800fee2:	d1f6      	bne.n	800fed2 <osSemaphoreAcquire+0x6>
      yield = pdFALSE;
 800fee4:	aa02      	add	r2, sp, #8
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800fee6:	4621      	mov	r1, r4
      yield = pdFALSE;
 800fee8:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800feec:	f000 fe4d 	bl	8010b8a <xQueueReceiveFromISR>
 800fef0:	2801      	cmp	r0, #1
 800fef2:	d113      	bne.n	800ff1c <osSemaphoreAcquire+0x50>
        portYIELD_FROM_ISR (yield);
 800fef4:	9b01      	ldr	r3, [sp, #4]
 800fef6:	b9a3      	cbnz	r3, 800ff22 <osSemaphoreAcquire+0x56>
  stat = osOK;
 800fef8:	2000      	movs	r0, #0
 800fefa:	e7ec      	b.n	800fed6 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fefc:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800ff00:	b913      	cbnz	r3, 800ff08 <osSemaphoreAcquire+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff02:	f3ef 8311 	mrs	r3, BASEPRI
 800ff06:	b11b      	cbz	r3, 800ff10 <osSemaphoreAcquire+0x44>
 800ff08:	4b0c      	ldr	r3, [pc, #48]	; (800ff3c <osSemaphoreAcquire+0x70>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	2b02      	cmp	r3, #2
 800ff0e:	d0e7      	beq.n	800fee0 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ff10:	4621      	mov	r1, r4
 800ff12:	f000 fd57 	bl	80109c4 <xQueueSemaphoreTake>
 800ff16:	2801      	cmp	r0, #1
 800ff18:	d0ee      	beq.n	800fef8 <osSemaphoreAcquire+0x2c>
      if (timeout != 0U) {
 800ff1a:	b95c      	cbnz	r4, 800ff34 <osSemaphoreAcquire+0x68>
        stat = osErrorResource;
 800ff1c:	f06f 0002 	mvn.w	r0, #2
 800ff20:	e7d9      	b.n	800fed6 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800ff22:	4b07      	ldr	r3, [pc, #28]	; (800ff40 <osSemaphoreAcquire+0x74>)
 800ff24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff28:	601a      	str	r2, [r3, #0]
 800ff2a:	f3bf 8f4f 	dsb	sy
 800ff2e:	f3bf 8f6f 	isb	sy
 800ff32:	e7e1      	b.n	800fef8 <osSemaphoreAcquire+0x2c>
        stat = osErrorTimeout;
 800ff34:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800ff38:	e7cd      	b.n	800fed6 <osSemaphoreAcquire+0xa>
 800ff3a:	bf00      	nop
 800ff3c:	240005c4 	.word	0x240005c4
 800ff40:	e000ed04 	.word	0xe000ed04

0800ff44 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ff44:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ff46:	b368      	cbz	r0, 800ffa4 <osSemaphoreRelease+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff48:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ff4c:	b153      	cbz	r3, 800ff64 <osSemaphoreRelease+0x20>
    yield = pdFALSE;
 800ff4e:	a902      	add	r1, sp, #8
 800ff50:	2400      	movs	r4, #0
 800ff52:	f841 4d04 	str.w	r4, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ff56:	f000 fc41 	bl	80107dc <xQueueGiveFromISR>
 800ff5a:	2801      	cmp	r0, #1
 800ff5c:	d014      	beq.n	800ff88 <osSemaphoreRelease+0x44>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800ff5e:	f06f 0002 	mvn.w	r0, #2
 800ff62:	e014      	b.n	800ff8e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff64:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800ff68:	b913      	cbnz	r3, 800ff70 <osSemaphoreRelease+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff6a:	f3ef 8311 	mrs	r3, BASEPRI
 800ff6e:	b11b      	cbz	r3, 800ff78 <osSemaphoreRelease+0x34>
 800ff70:	4b0e      	ldr	r3, [pc, #56]	; (800ffac <osSemaphoreRelease+0x68>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2b02      	cmp	r3, #2
 800ff76:	d0ea      	beq.n	800ff4e <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ff78:	2300      	movs	r3, #0
 800ff7a:	461a      	mov	r2, r3
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	f000 fad5 	bl	801052c <xQueueGenericSend>
 800ff82:	2801      	cmp	r0, #1
 800ff84:	d002      	beq.n	800ff8c <osSemaphoreRelease+0x48>
 800ff86:	e7ea      	b.n	800ff5e <osSemaphoreRelease+0x1a>
      portYIELD_FROM_ISR (yield);
 800ff88:	9b01      	ldr	r3, [sp, #4]
 800ff8a:	b913      	cbnz	r3, 800ff92 <osSemaphoreRelease+0x4e>
  stat = osOK;
 800ff8c:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800ff8e:	b002      	add	sp, #8
 800ff90:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800ff92:	4b07      	ldr	r3, [pc, #28]	; (800ffb0 <osSemaphoreRelease+0x6c>)
 800ff94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff98:	601a      	str	r2, [r3, #0]
 800ff9a:	f3bf 8f4f 	dsb	sy
 800ff9e:	f3bf 8f6f 	isb	sy
 800ffa2:	e7f3      	b.n	800ff8c <osSemaphoreRelease+0x48>
    stat = osErrorParameter;
 800ffa4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ffa8:	e7f1      	b.n	800ff8e <osSemaphoreRelease+0x4a>
 800ffaa:	bf00      	nop
 800ffac:	240005c4 	.word	0x240005c4
 800ffb0:	e000ed04 	.word	0xe000ed04

0800ffb4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800ffb4:	b510      	push	{r4, lr}
 800ffb6:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffb8:	f3ef 8305 	mrs	r3, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800ffbc:	b113      	cbz	r3, 800ffc4 <osSemaphoreDelete+0x10>
    stat = osErrorISR;
 800ffbe:	f06f 0005 	mvn.w	r0, #5
#else
  stat = osError;
#endif

  return (stat);
}
 800ffc2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffc4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800ffc8:	b913      	cbnz	r3, 800ffd0 <osSemaphoreDelete+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ffca:	f3ef 8311 	mrs	r3, BASEPRI
 800ffce:	b11b      	cbz	r3, 800ffd8 <osSemaphoreDelete+0x24>
 800ffd0:	4b07      	ldr	r3, [pc, #28]	; (800fff0 <osSemaphoreDelete+0x3c>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b02      	cmp	r3, #2
 800ffd6:	d0f2      	beq.n	800ffbe <osSemaphoreDelete+0xa>
  else if (hSemaphore == NULL) {
 800ffd8:	b13c      	cbz	r4, 800ffea <osSemaphoreDelete+0x36>
    vQueueUnregisterQueue (hSemaphore);
 800ffda:	4620      	mov	r0, r4
 800ffdc:	f000 fe36 	bl	8010c4c <vQueueUnregisterQueue>
    vSemaphoreDelete (hSemaphore);
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f000 fe47 	bl	8010c74 <vQueueDelete>
    stat = osOK;
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	e7eb      	b.n	800ffc2 <osSemaphoreDelete+0xe>
    stat = osErrorParameter;
 800ffea:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ffee:	e7e8      	b.n	800ffc2 <osSemaphoreDelete+0xe>
 800fff0:	240005c4 	.word	0x240005c4

0800fff4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fff6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fff8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fffc:	b11b      	cbz	r3, 8010006 <osMessageQueueNew+0x12>
  hQueue = NULL;
 800fffe:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8010000:	4628      	mov	r0, r5
 8010002:	b002      	add	sp, #8
 8010004:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010006:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801000a:	b913      	cbnz	r3, 8010012 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801000c:	f3ef 8311 	mrs	r3, BASEPRI
 8010010:	b11b      	cbz	r3, 801001a <osMessageQueueNew+0x26>
 8010012:	4b1a      	ldr	r3, [pc, #104]	; (801007c <osMessageQueueNew+0x88>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	2b02      	cmp	r3, #2
 8010018:	d0f1      	beq.n	800fffe <osMessageQueueNew+0xa>
 801001a:	2800      	cmp	r0, #0
 801001c:	d0ef      	beq.n	800fffe <osMessageQueueNew+0xa>
 801001e:	2900      	cmp	r1, #0
 8010020:	d0ed      	beq.n	800fffe <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8010022:	b304      	cbz	r4, 8010066 <osMessageQueueNew+0x72>
 8010024:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010028:	b1ab      	cbz	r3, 8010056 <osMessageQueueNew+0x62>
 801002a:	2a47      	cmp	r2, #71	; 0x47
 801002c:	d9e7      	bls.n	800fffe <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801002e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010030:	2a00      	cmp	r2, #0
 8010032:	d0e4      	beq.n	800fffe <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010034:	fb01 f500 	mul.w	r5, r1, r0
 8010038:	6966      	ldr	r6, [r4, #20]
 801003a:	42ae      	cmp	r6, r5
 801003c:	d3df      	bcc.n	800fffe <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801003e:	2500      	movs	r5, #0
 8010040:	9500      	str	r5, [sp, #0]
 8010042:	f000 f9c5 	bl	80103d0 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8010046:	4605      	mov	r5, r0
 8010048:	2800      	cmp	r0, #0
 801004a:	d0d8      	beq.n	800fffe <osMessageQueueNew+0xa>
        name = attr->name;
 801004c:	6821      	ldr	r1, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 801004e:	4628      	mov	r0, r5
 8010050:	f000 fdea 	bl	8010c28 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8010054:	e7d4      	b.n	8010000 <osMessageQueueNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010056:	2a00      	cmp	r2, #0
 8010058:	d1d1      	bne.n	800fffe <osMessageQueueNew+0xa>
 801005a:	6923      	ldr	r3, [r4, #16]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d1ce      	bne.n	800fffe <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010060:	6963      	ldr	r3, [r4, #20]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d1cb      	bne.n	800fffe <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010066:	2200      	movs	r2, #0
 8010068:	f000 f9fc 	bl	8010464 <xQueueGenericCreate>
    if (hQueue != NULL) {
 801006c:	4605      	mov	r5, r0
 801006e:	2800      	cmp	r0, #0
 8010070:	d0c5      	beq.n	800fffe <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8010072:	2c00      	cmp	r4, #0
 8010074:	d1ea      	bne.n	801004c <osMessageQueueNew+0x58>
        name = NULL;
 8010076:	4621      	mov	r1, r4
 8010078:	e7e9      	b.n	801004e <osMessageQueueNew+0x5a>
 801007a:	bf00      	nop
 801007c:	240005c4 	.word	0x240005c4

08010080 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010080:	b513      	push	{r0, r1, r4, lr}
 8010082:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010084:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8010088:	b123      	cbz	r3, 8010094 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801008a:	b9d8      	cbnz	r0, 80100c4 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 801008c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8010090:	b002      	add	sp, #8
 8010092:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010094:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8010098:	b913      	cbnz	r3, 80100a0 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801009a:	f3ef 8311 	mrs	r3, BASEPRI
 801009e:	b11b      	cbz	r3, 80100a8 <osMessageQueuePut+0x28>
 80100a0:	4b16      	ldr	r3, [pc, #88]	; (80100fc <osMessageQueuePut+0x7c>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	2b02      	cmp	r3, #2
 80100a6:	d0f0      	beq.n	801008a <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80100a8:	2800      	cmp	r0, #0
 80100aa:	d0ef      	beq.n	801008c <osMessageQueuePut+0xc>
 80100ac:	2900      	cmp	r1, #0
 80100ae:	d0ed      	beq.n	801008c <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80100b0:	2300      	movs	r3, #0
 80100b2:	4622      	mov	r2, r4
 80100b4:	f000 fa3a 	bl	801052c <xQueueGenericSend>
 80100b8:	2801      	cmp	r0, #1
 80100ba:	d011      	beq.n	80100e0 <osMessageQueuePut+0x60>
        if (timeout != 0U) {
 80100bc:	b9dc      	cbnz	r4, 80100f6 <osMessageQueuePut+0x76>
          stat = osErrorResource;
 80100be:	f06f 0002 	mvn.w	r0, #2
 80100c2:	e7e5      	b.n	8010090 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80100c4:	2900      	cmp	r1, #0
 80100c6:	d0e1      	beq.n	801008c <osMessageQueuePut+0xc>
 80100c8:	2c00      	cmp	r4, #0
 80100ca:	d1df      	bne.n	801008c <osMessageQueuePut+0xc>
      yield = pdFALSE;
 80100cc:	aa02      	add	r2, sp, #8
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80100ce:	4623      	mov	r3, r4
      yield = pdFALSE;
 80100d0:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80100d4:	f000 fb21 	bl	801071a <xQueueGenericSendFromISR>
 80100d8:	2801      	cmp	r0, #1
 80100da:	d1f0      	bne.n	80100be <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 80100dc:	9b01      	ldr	r3, [sp, #4]
 80100de:	b90b      	cbnz	r3, 80100e4 <osMessageQueuePut+0x64>
  stat = osOK;
 80100e0:	2000      	movs	r0, #0
 80100e2:	e7d5      	b.n	8010090 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80100e4:	4b06      	ldr	r3, [pc, #24]	; (8010100 <osMessageQueuePut+0x80>)
 80100e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100ea:	601a      	str	r2, [r3, #0]
 80100ec:	f3bf 8f4f 	dsb	sy
 80100f0:	f3bf 8f6f 	isb	sy
 80100f4:	e7f4      	b.n	80100e0 <osMessageQueuePut+0x60>
          stat = osErrorTimeout;
 80100f6:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80100fa:	e7c9      	b.n	8010090 <osMessageQueuePut+0x10>
 80100fc:	240005c4 	.word	0x240005c4
 8010100:	e000ed04 	.word	0xe000ed04

08010104 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010104:	b513      	push	{r0, r1, r4, lr}
 8010106:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010108:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 801010c:	b123      	cbz	r3, 8010118 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801010e:	b9d0      	cbnz	r0, 8010146 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8010110:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8010114:	b002      	add	sp, #8
 8010116:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010118:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 801011c:	b913      	cbnz	r3, 8010124 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801011e:	f3ef 8311 	mrs	r3, BASEPRI
 8010122:	b11b      	cbz	r3, 801012c <osMessageQueueGet+0x28>
 8010124:	4b15      	ldr	r3, [pc, #84]	; (801017c <osMessageQueueGet+0x78>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	2b02      	cmp	r3, #2
 801012a:	d0f0      	beq.n	801010e <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801012c:	2800      	cmp	r0, #0
 801012e:	d0ef      	beq.n	8010110 <osMessageQueueGet+0xc>
 8010130:	2900      	cmp	r1, #0
 8010132:	d0ed      	beq.n	8010110 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010134:	4622      	mov	r2, r4
 8010136:	f000 fba5 	bl	8010884 <xQueueReceive>
 801013a:	2801      	cmp	r0, #1
 801013c:	d010      	beq.n	8010160 <osMessageQueueGet+0x5c>
        if (timeout != 0U) {
 801013e:	b9d4      	cbnz	r4, 8010176 <osMessageQueueGet+0x72>
          stat = osErrorResource;
 8010140:	f06f 0002 	mvn.w	r0, #2
 8010144:	e7e6      	b.n	8010114 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010146:	2900      	cmp	r1, #0
 8010148:	d0e2      	beq.n	8010110 <osMessageQueueGet+0xc>
 801014a:	2c00      	cmp	r4, #0
 801014c:	d1e0      	bne.n	8010110 <osMessageQueueGet+0xc>
      yield = pdFALSE;
 801014e:	aa02      	add	r2, sp, #8
 8010150:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010154:	f000 fd19 	bl	8010b8a <xQueueReceiveFromISR>
 8010158:	2801      	cmp	r0, #1
 801015a:	d1f1      	bne.n	8010140 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 801015c:	9b01      	ldr	r3, [sp, #4]
 801015e:	b90b      	cbnz	r3, 8010164 <osMessageQueueGet+0x60>
  stat = osOK;
 8010160:	2000      	movs	r0, #0
 8010162:	e7d7      	b.n	8010114 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8010164:	4b06      	ldr	r3, [pc, #24]	; (8010180 <osMessageQueueGet+0x7c>)
 8010166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801016a:	601a      	str	r2, [r3, #0]
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	f3bf 8f6f 	isb	sy
 8010174:	e7f4      	b.n	8010160 <osMessageQueueGet+0x5c>
          stat = osErrorTimeout;
 8010176:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 801017a:	e7cb      	b.n	8010114 <osMessageQueueGet+0x10>
 801017c:	240005c4 	.word	0x240005c4
 8010180:	e000ed04 	.word	0xe000ed04

08010184 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010184:	4b03      	ldr	r3, [pc, #12]	; (8010194 <vApplicationGetIdleTaskMemory+0x10>)
 8010186:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010188:	4b03      	ldr	r3, [pc, #12]	; (8010198 <vApplicationGetIdleTaskMemory+0x14>)
 801018a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801018c:	2380      	movs	r3, #128	; 0x80
 801018e:	6013      	str	r3, [r2, #0]
}
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop
 8010194:	2400056c 	.word	0x2400056c
 8010198:	2400036c 	.word	0x2400036c

0801019c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801019c:	4b03      	ldr	r3, [pc, #12]	; (80101ac <vApplicationGetTimerTaskMemory+0x10>)
 801019e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80101a0:	4b03      	ldr	r3, [pc, #12]	; (80101b0 <vApplicationGetTimerTaskMemory+0x14>)
 80101a2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80101a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80101a8:	6013      	str	r3, [r2, #0]
}
 80101aa:	4770      	bx	lr
 80101ac:	240009c8 	.word	0x240009c8
 80101b0:	240005c8 	.word	0x240005c8

080101b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101b4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80101b8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101bc:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101be:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101c0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80101c4:	2300      	movs	r3, #0
 80101c6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80101c8:	4770      	bx	lr

080101ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80101ca:	2300      	movs	r3, #0
 80101cc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80101ce:	4770      	bx	lr

080101d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80101d0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80101d2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80101d4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80101d6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80101d8:	689a      	ldr	r2, [r3, #8]
 80101da:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80101dc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80101de:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80101e0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80101e2:	3301      	adds	r3, #1
 80101e4:	6003      	str	r3, [r0, #0]
}
 80101e6:	4770      	bx	lr

080101e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80101e8:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80101ea:	1c53      	adds	r3, r2, #1
{
 80101ec:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80101ee:	d10a      	bne.n	8010206 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80101f0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80101f2:	685a      	ldr	r2, [r3, #4]
 80101f4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80101f6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80101f8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80101fa:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80101fc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80101fe:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8010200:	3301      	adds	r3, #1
 8010202:	6003      	str	r3, [r0, #0]
}
 8010204:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010206:	f100 0308 	add.w	r3, r0, #8
 801020a:	685c      	ldr	r4, [r3, #4]
 801020c:	6825      	ldr	r5, [r4, #0]
 801020e:	4295      	cmp	r5, r2
 8010210:	d8ef      	bhi.n	80101f2 <vListInsert+0xa>
 8010212:	4623      	mov	r3, r4
 8010214:	e7f9      	b.n	801020a <vListInsert+0x22>

08010216 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010216:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 801021a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801021c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801021e:	6882      	ldr	r2, [r0, #8]
 8010220:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010222:	6859      	ldr	r1, [r3, #4]
 8010224:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010226:	bf08      	it	eq
 8010228:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801022a:	2200      	movs	r2, #0
 801022c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	3a01      	subs	r2, #1
 8010232:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010234:	6818      	ldr	r0, [r3, #0]
}
 8010236:	4770      	bx	lr

08010238 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010238:	b510      	push	{r4, lr}
 801023a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801023c:	f001 fd42 	bl	8011cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010240:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010242:	f001 fd61 	bl	8011d08 <vPortExitCritical>

	return xReturn;
}
 8010246:	fab4 f084 	clz	r0, r4
 801024a:	0940      	lsrs	r0, r0, #5
 801024c:	bd10      	pop	{r4, pc}

0801024e <prvCopyDataToQueue>:
{
 801024e:	b570      	push	{r4, r5, r6, lr}
 8010250:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010252:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8010254:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010256:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010258:	b942      	cbnz	r2, 801026c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801025a:	6805      	ldr	r5, [r0, #0]
 801025c:	b99d      	cbnz	r5, 8010286 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801025e:	6880      	ldr	r0, [r0, #8]
 8010260:	f001 fa30 	bl	80116c4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010264:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010266:	3601      	adds	r6, #1
 8010268:	63a6      	str	r6, [r4, #56]	; 0x38
}
 801026a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 801026c:	b96d      	cbnz	r5, 801028a <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801026e:	6840      	ldr	r0, [r0, #4]
 8010270:	f002 f9d6 	bl	8012620 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010274:	6863      	ldr	r3, [r4, #4]
 8010276:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010278:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801027a:	68a2      	ldr	r2, [r4, #8]
 801027c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801027e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010280:	d301      	bcc.n	8010286 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010282:	6823      	ldr	r3, [r4, #0]
 8010284:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8010286:	2000      	movs	r0, #0
 8010288:	e7ed      	b.n	8010266 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801028a:	68c0      	ldr	r0, [r0, #12]
 801028c:	f002 f9c8 	bl	8012620 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010290:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010292:	68e2      	ldr	r2, [r4, #12]
 8010294:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010296:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010298:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801029a:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801029c:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801029e:	bf3e      	ittt	cc
 80102a0:	68a2      	ldrcc	r2, [r4, #8]
 80102a2:	189b      	addcc	r3, r3, r2
 80102a4:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80102a6:	2d02      	cmp	r5, #2
 80102a8:	d1ed      	bne.n	8010286 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102aa:	b10e      	cbz	r6, 80102b0 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80102ac:	3e01      	subs	r6, #1
 80102ae:	e7ea      	b.n	8010286 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80102b0:	4630      	mov	r0, r6
 80102b2:	e7d8      	b.n	8010266 <prvCopyDataToQueue+0x18>

080102b4 <prvCopyDataFromQueue>:
{
 80102b4:	4603      	mov	r3, r0
 80102b6:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80102b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80102ba:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80102bc:	b162      	cbz	r2, 80102d8 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102be:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80102c0:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102c2:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80102c4:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102c6:	60d9      	str	r1, [r3, #12]
}
 80102c8:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80102cc:	bf24      	itt	cs
 80102ce:	6819      	ldrcs	r1, [r3, #0]
 80102d0:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80102d2:	68d9      	ldr	r1, [r3, #12]
 80102d4:	f002 b9a4 	b.w	8012620 <memcpy>
}
 80102d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102dc:	4770      	bx	lr

080102de <prvUnlockQueue>:
{
 80102de:	b570      	push	{r4, r5, r6, lr}
 80102e0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80102e2:	f001 fcef 	bl	8011cc4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80102e6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102ea:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80102ee:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80102f0:	2d00      	cmp	r5, #0
 80102f2:	dc14      	bgt.n	801031e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80102f4:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102f6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80102fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80102fe:	f001 fd03 	bl	8011d08 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010302:	f001 fcdf 	bl	8011cc4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010306:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 801030a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801030c:	2d00      	cmp	r5, #0
 801030e:	dc12      	bgt.n	8010336 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8010310:	23ff      	movs	r3, #255	; 0xff
 8010312:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8010316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 801031a:	f001 bcf5 	b.w	8011d08 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801031e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010320:	2b00      	cmp	r3, #0
 8010322:	d0e7      	beq.n	80102f4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010324:	4630      	mov	r0, r6
 8010326:	f001 f8e7 	bl	80114f8 <xTaskRemoveFromEventList>
 801032a:	b108      	cbz	r0, 8010330 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 801032c:	f001 f96e 	bl	801160c <vTaskMissedYield>
 8010330:	3d01      	subs	r5, #1
 8010332:	b26d      	sxtb	r5, r5
 8010334:	e7dc      	b.n	80102f0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010336:	6923      	ldr	r3, [r4, #16]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d0e9      	beq.n	8010310 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801033c:	4630      	mov	r0, r6
 801033e:	f001 f8db 	bl	80114f8 <xTaskRemoveFromEventList>
 8010342:	b108      	cbz	r0, 8010348 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8010344:	f001 f962 	bl	801160c <vTaskMissedYield>
 8010348:	3d01      	subs	r5, #1
 801034a:	b26d      	sxtb	r5, r5
 801034c:	e7de      	b.n	801030c <prvUnlockQueue+0x2e>
	...

08010350 <xQueueGenericReset>:
{
 8010350:	b538      	push	{r3, r4, r5, lr}
 8010352:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8010354:	4604      	mov	r4, r0
 8010356:	b940      	cbnz	r0, 801036a <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035c:	f383 8811 	msr	BASEPRI, r3
 8010360:	f3bf 8f6f 	isb	sy
 8010364:	f3bf 8f4f 	dsb	sy
 8010368:	e7fe      	b.n	8010368 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 801036a:	f001 fcab 	bl	8011cc4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801036e:	6822      	ldr	r2, [r4, #0]
 8010370:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010374:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010376:	4343      	muls	r3, r0
 8010378:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801037a:	1a1b      	subs	r3, r3, r0
 801037c:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801037e:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010380:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010382:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010384:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010386:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8010388:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801038c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8010390:	b995      	cbnz	r5, 80103b8 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010392:	6923      	ldr	r3, [r4, #16]
 8010394:	b163      	cbz	r3, 80103b0 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010396:	f104 0010 	add.w	r0, r4, #16
 801039a:	f001 f8ad 	bl	80114f8 <xTaskRemoveFromEventList>
 801039e:	b138      	cbz	r0, 80103b0 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80103a0:	4b0a      	ldr	r3, [pc, #40]	; (80103cc <xQueueGenericReset+0x7c>)
 80103a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103a6:	601a      	str	r2, [r3, #0]
 80103a8:	f3bf 8f4f 	dsb	sy
 80103ac:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80103b0:	f001 fcaa 	bl	8011d08 <vPortExitCritical>
}
 80103b4:	2001      	movs	r0, #1
 80103b6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80103b8:	f104 0010 	add.w	r0, r4, #16
 80103bc:	f7ff fefa 	bl	80101b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80103c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80103c4:	f7ff fef6 	bl	80101b4 <vListInitialise>
 80103c8:	e7f2      	b.n	80103b0 <xQueueGenericReset+0x60>
 80103ca:	bf00      	nop
 80103cc:	e000ed04 	.word	0xe000ed04

080103d0 <xQueueGenericCreateStatic>:
	{
 80103d0:	b513      	push	{r0, r1, r4, lr}
 80103d2:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80103d4:	b940      	cbnz	r0, 80103e8 <xQueueGenericCreateStatic+0x18>
 80103d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103da:	f383 8811 	msr	BASEPRI, r3
 80103de:	f3bf 8f6f 	isb	sy
 80103e2:	f3bf 8f4f 	dsb	sy
 80103e6:	e7fe      	b.n	80103e6 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 80103e8:	b943      	cbnz	r3, 80103fc <xQueueGenericCreateStatic+0x2c>
 80103ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ee:	f383 8811 	msr	BASEPRI, r3
 80103f2:	f3bf 8f6f 	isb	sy
 80103f6:	f3bf 8f4f 	dsb	sy
 80103fa:	e7fe      	b.n	80103fa <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80103fc:	b14a      	cbz	r2, 8010412 <xQueueGenericCreateStatic+0x42>
 80103fe:	b991      	cbnz	r1, 8010426 <xQueueGenericCreateStatic+0x56>
 8010400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010404:	f383 8811 	msr	BASEPRI, r3
 8010408:	f3bf 8f6f 	isb	sy
 801040c:	f3bf 8f4f 	dsb	sy
 8010410:	e7fe      	b.n	8010410 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010412:	b141      	cbz	r1, 8010426 <xQueueGenericCreateStatic+0x56>
 8010414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010418:	f383 8811 	msr	BASEPRI, r3
 801041c:	f3bf 8f6f 	isb	sy
 8010420:	f3bf 8f4f 	dsb	sy
 8010424:	e7fe      	b.n	8010424 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010426:	2348      	movs	r3, #72	; 0x48
 8010428:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 801042a:	9b01      	ldr	r3, [sp, #4]
 801042c:	2b48      	cmp	r3, #72	; 0x48
 801042e:	d008      	beq.n	8010442 <xQueueGenericCreateStatic+0x72>
 8010430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010434:	f383 8811 	msr	BASEPRI, r3
 8010438:	f3bf 8f6f 	isb	sy
 801043c:	f3bf 8f4f 	dsb	sy
 8010440:	e7fe      	b.n	8010440 <xQueueGenericCreateStatic+0x70>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010442:	2900      	cmp	r1, #0
 8010444:	bf08      	it	eq
 8010446:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010448:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801044a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801044c:	6022      	str	r2, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801044e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8010452:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010456:	4619      	mov	r1, r3
 8010458:	4620      	mov	r0, r4
 801045a:	f7ff ff79 	bl	8010350 <xQueueGenericReset>
	}
 801045e:	4620      	mov	r0, r4
 8010460:	b002      	add	sp, #8
 8010462:	bd10      	pop	{r4, pc}

08010464 <xQueueGenericCreate>:
	{
 8010464:	b570      	push	{r4, r5, r6, lr}
 8010466:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010468:	4606      	mov	r6, r0
 801046a:	b940      	cbnz	r0, 801047e <xQueueGenericCreate+0x1a>
 801046c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010470:	f383 8811 	msr	BASEPRI, r3
 8010474:	f3bf 8f6f 	isb	sy
 8010478:	f3bf 8f4f 	dsb	sy
 801047c:	e7fe      	b.n	801047c <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801047e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010480:	3048      	adds	r0, #72	; 0x48
 8010482:	f001 fd8d 	bl	8011fa0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010486:	4604      	mov	r4, r0
 8010488:	b150      	cbz	r0, 80104a0 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801048a:	2300      	movs	r3, #0
 801048c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8010490:	b945      	cbnz	r5, 80104a4 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010492:	6020      	str	r0, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010494:	2101      	movs	r1, #1
 8010496:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8010498:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801049c:	f7ff ff58 	bl	8010350 <xQueueGenericReset>
	}
 80104a0:	4620      	mov	r0, r4
 80104a2:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80104a4:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80104a8:	6003      	str	r3, [r0, #0]
 80104aa:	e7f3      	b.n	8010494 <xQueueGenericCreate+0x30>

080104ac <xQueueCreateCountingSemaphoreStatic>:
	{
 80104ac:	b513      	push	{r0, r1, r4, lr}
 80104ae:	4613      	mov	r3, r2
 80104b0:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80104b2:	b940      	cbnz	r0, 80104c6 <xQueueCreateCountingSemaphoreStatic+0x1a>
 80104b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b8:	f383 8811 	msr	BASEPRI, r3
 80104bc:	f3bf 8f6f 	isb	sy
 80104c0:	f3bf 8f4f 	dsb	sy
 80104c4:	e7fe      	b.n	80104c4 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 80104c6:	4288      	cmp	r0, r1
 80104c8:	d208      	bcs.n	80104dc <xQueueCreateCountingSemaphoreStatic+0x30>
 80104ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ce:	f383 8811 	msr	BASEPRI, r3
 80104d2:	f3bf 8f6f 	isb	sy
 80104d6:	f3bf 8f4f 	dsb	sy
 80104da:	e7fe      	b.n	80104da <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80104dc:	2202      	movs	r2, #2
 80104de:	9200      	str	r2, [sp, #0]
 80104e0:	2200      	movs	r2, #0
 80104e2:	4611      	mov	r1, r2
 80104e4:	f7ff ff74 	bl	80103d0 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80104e8:	b100      	cbz	r0, 80104ec <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80104ea:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80104ec:	b002      	add	sp, #8
 80104ee:	bd10      	pop	{r4, pc}

080104f0 <xQueueCreateCountingSemaphore>:
	{
 80104f0:	b510      	push	{r4, lr}
 80104f2:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80104f4:	b940      	cbnz	r0, 8010508 <xQueueCreateCountingSemaphore+0x18>
 80104f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104fa:	f383 8811 	msr	BASEPRI, r3
 80104fe:	f3bf 8f6f 	isb	sy
 8010502:	f3bf 8f4f 	dsb	sy
 8010506:	e7fe      	b.n	8010506 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010508:	4288      	cmp	r0, r1
 801050a:	d208      	bcs.n	801051e <xQueueCreateCountingSemaphore+0x2e>
 801050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010510:	f383 8811 	msr	BASEPRI, r3
 8010514:	f3bf 8f6f 	isb	sy
 8010518:	f3bf 8f4f 	dsb	sy
 801051c:	e7fe      	b.n	801051c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801051e:	2202      	movs	r2, #2
 8010520:	2100      	movs	r1, #0
 8010522:	f7ff ff9f 	bl	8010464 <xQueueGenericCreate>
		if( xHandle != NULL )
 8010526:	b100      	cbz	r0, 801052a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010528:	6384      	str	r4, [r0, #56]	; 0x38
	}
 801052a:	bd10      	pop	{r4, pc}

0801052c <xQueueGenericSend>:
{
 801052c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010530:	4688      	mov	r8, r1
 8010532:	9201      	str	r2, [sp, #4]
 8010534:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8010536:	4604      	mov	r4, r0
 8010538:	b940      	cbnz	r0, 801054c <xQueueGenericSend+0x20>
 801053a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053e:	f383 8811 	msr	BASEPRI, r3
 8010542:	f3bf 8f6f 	isb	sy
 8010546:	f3bf 8f4f 	dsb	sy
 801054a:	e7fe      	b.n	801054a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801054c:	b951      	cbnz	r1, 8010564 <xQueueGenericSend+0x38>
 801054e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010550:	b143      	cbz	r3, 8010564 <xQueueGenericSend+0x38>
 8010552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010556:	f383 8811 	msr	BASEPRI, r3
 801055a:	f3bf 8f6f 	isb	sy
 801055e:	f3bf 8f4f 	dsb	sy
 8010562:	e7fe      	b.n	8010562 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010564:	2f02      	cmp	r7, #2
 8010566:	d10b      	bne.n	8010580 <xQueueGenericSend+0x54>
 8010568:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801056a:	2b01      	cmp	r3, #1
 801056c:	d008      	beq.n	8010580 <xQueueGenericSend+0x54>
 801056e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010572:	f383 8811 	msr	BASEPRI, r3
 8010576:	f3bf 8f6f 	isb	sy
 801057a:	f3bf 8f4f 	dsb	sy
 801057e:	e7fe      	b.n	801057e <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010580:	f001 f850 	bl	8011624 <xTaskGetSchedulerState>
 8010584:	b950      	cbnz	r0, 801059c <xQueueGenericSend+0x70>
 8010586:	9e01      	ldr	r6, [sp, #4]
 8010588:	b14e      	cbz	r6, 801059e <xQueueGenericSend+0x72>
 801058a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058e:	f383 8811 	msr	BASEPRI, r3
 8010592:	f3bf 8f6f 	isb	sy
 8010596:	f3bf 8f4f 	dsb	sy
 801059a:	e7fe      	b.n	801059a <xQueueGenericSend+0x6e>
 801059c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 801059e:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 80105a2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 801068c <xQueueGenericSend+0x160>
 80105a6:	e037      	b.n	8010618 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 80105a8:	9d01      	ldr	r5, [sp, #4]
 80105aa:	b91d      	cbnz	r5, 80105b4 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 80105ac:	f001 fbac 	bl	8011d08 <vPortExitCritical>
			return errQUEUE_FULL;
 80105b0:	2000      	movs	r0, #0
 80105b2:	e050      	b.n	8010656 <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 80105b4:	b916      	cbnz	r6, 80105bc <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80105b6:	a802      	add	r0, sp, #8
 80105b8:	f000 ffe0 	bl	801157c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80105bc:	f001 fba4 	bl	8011d08 <vPortExitCritical>
		vTaskSuspendAll();
 80105c0:	f000 fda0 	bl	8011104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80105c4:	f001 fb7e 	bl	8011cc4 <vPortEnterCritical>
 80105c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80105cc:	2bff      	cmp	r3, #255	; 0xff
 80105ce:	d101      	bne.n	80105d4 <xQueueGenericSend+0xa8>
 80105d0:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80105d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80105d8:	2bff      	cmp	r3, #255	; 0xff
 80105da:	d101      	bne.n	80105e0 <xQueueGenericSend+0xb4>
 80105dc:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80105e0:	f001 fb92 	bl	8011d08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80105e4:	a901      	add	r1, sp, #4
 80105e6:	a802      	add	r0, sp, #8
 80105e8:	f000 ffd4 	bl	8011594 <xTaskCheckForTimeOut>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d146      	bne.n	801067e <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80105f0:	f001 fb68 	bl	8011cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80105f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80105f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d12f      	bne.n	801065c <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80105fc:	f001 fb84 	bl	8011d08 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010600:	9901      	ldr	r1, [sp, #4]
 8010602:	f104 0010 	add.w	r0, r4, #16
 8010606:	f000 ff3f 	bl	8011488 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801060a:	4620      	mov	r0, r4
 801060c:	f7ff fe67 	bl	80102de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010610:	f000 fe1e 	bl	8011250 <xTaskResumeAll>
 8010614:	b350      	cbz	r0, 801066c <xQueueGenericSend+0x140>
 8010616:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8010618:	f001 fb54 	bl	8011cc4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801061c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801061e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010620:	429a      	cmp	r2, r3
 8010622:	d301      	bcc.n	8010628 <xQueueGenericSend+0xfc>
 8010624:	2f02      	cmp	r7, #2
 8010626:	d1bf      	bne.n	80105a8 <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010628:	463a      	mov	r2, r7
 801062a:	4641      	mov	r1, r8
 801062c:	4620      	mov	r0, r4
 801062e:	f7ff fe0e 	bl	801024e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010634:	b11b      	cbz	r3, 801063e <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010636:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801063a:	f000 ff5d 	bl	80114f8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 801063e:	b138      	cbz	r0, 8010650 <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 8010640:	4b12      	ldr	r3, [pc, #72]	; (801068c <xQueueGenericSend+0x160>)
 8010642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010646:	601a      	str	r2, [r3, #0]
 8010648:	f3bf 8f4f 	dsb	sy
 801064c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010650:	f001 fb5a 	bl	8011d08 <vPortExitCritical>
				return pdPASS;
 8010654:	2001      	movs	r0, #1
}
 8010656:	b004      	add	sp, #16
 8010658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 801065c:	f001 fb54 	bl	8011d08 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8010660:	4620      	mov	r0, r4
 8010662:	f7ff fe3c 	bl	80102de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010666:	f000 fdf3 	bl	8011250 <xTaskResumeAll>
 801066a:	e7d4      	b.n	8010616 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 801066c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010670:	f8ca 3000 	str.w	r3, [sl]
 8010674:	f3bf 8f4f 	dsb	sy
 8010678:	f3bf 8f6f 	isb	sy
 801067c:	e7cb      	b.n	8010616 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 801067e:	4620      	mov	r0, r4
 8010680:	f7ff fe2d 	bl	80102de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010684:	f000 fde4 	bl	8011250 <xTaskResumeAll>
 8010688:	e792      	b.n	80105b0 <xQueueGenericSend+0x84>
 801068a:	bf00      	nop
 801068c:	e000ed04 	.word	0xe000ed04

08010690 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010690:	2200      	movs	r2, #0
 8010692:	460b      	mov	r3, r1
	{
 8010694:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010696:	4611      	mov	r1, r2
 8010698:	9000      	str	r0, [sp, #0]
 801069a:	2001      	movs	r0, #1
 801069c:	f7ff fe98 	bl	80103d0 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 80106a0:	4604      	mov	r4, r0
 80106a2:	b138      	cbz	r0, 80106b4 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80106a4:	2300      	movs	r3, #0
 80106a6:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80106a8:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80106aa:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80106ac:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80106ae:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80106b0:	f7ff ff3c 	bl	801052c <xQueueGenericSend>
	}
 80106b4:	4620      	mov	r0, r4
 80106b6:	b002      	add	sp, #8
 80106b8:	bd10      	pop	{r4, pc}

080106ba <xQueueGiveMutexRecursive>:
	{
 80106ba:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80106bc:	4604      	mov	r4, r0
 80106be:	b940      	cbnz	r0, 80106d2 <xQueueGiveMutexRecursive+0x18>
 80106c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c4:	f383 8811 	msr	BASEPRI, r3
 80106c8:	f3bf 8f6f 	isb	sy
 80106cc:	f3bf 8f4f 	dsb	sy
 80106d0:	e7fe      	b.n	80106d0 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80106d2:	6885      	ldr	r5, [r0, #8]
 80106d4:	f000 ffa0 	bl	8011618 <xTaskGetCurrentTaskHandle>
 80106d8:	4285      	cmp	r5, r0
 80106da:	d10a      	bne.n	80106f2 <xQueueGiveMutexRecursive+0x38>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80106dc:	68e3      	ldr	r3, [r4, #12]
 80106de:	3b01      	subs	r3, #1
 80106e0:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80106e2:	b923      	cbnz	r3, 80106ee <xQueueGiveMutexRecursive+0x34>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80106e4:	461a      	mov	r2, r3
 80106e6:	4619      	mov	r1, r3
 80106e8:	4620      	mov	r0, r4
 80106ea:	f7ff ff1f 	bl	801052c <xQueueGenericSend>
			xReturn = pdPASS;
 80106ee:	2001      	movs	r0, #1
		return xReturn;
 80106f0:	e000      	b.n	80106f4 <xQueueGiveMutexRecursive+0x3a>
			xReturn = pdFAIL;
 80106f2:	2000      	movs	r0, #0
	}
 80106f4:	bd38      	pop	{r3, r4, r5, pc}

080106f6 <xQueueCreateMutex>:
	{
 80106f6:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80106f8:	4602      	mov	r2, r0
 80106fa:	2100      	movs	r1, #0
 80106fc:	2001      	movs	r0, #1
 80106fe:	f7ff feb1 	bl	8010464 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8010702:	4604      	mov	r4, r0
 8010704:	b138      	cbz	r0, 8010716 <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010706:	2300      	movs	r3, #0
 8010708:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801070a:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801070c:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801070e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010710:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010712:	f7ff ff0b 	bl	801052c <xQueueGenericSend>
	}
 8010716:	4620      	mov	r0, r4
 8010718:	bd10      	pop	{r4, pc}

0801071a <xQueueGenericSendFromISR>:
{
 801071a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801071e:	4689      	mov	r9, r1
 8010720:	4690      	mov	r8, r2
 8010722:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8010724:	4604      	mov	r4, r0
 8010726:	b940      	cbnz	r0, 801073a <xQueueGenericSendFromISR+0x20>
 8010728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072c:	f383 8811 	msr	BASEPRI, r3
 8010730:	f3bf 8f6f 	isb	sy
 8010734:	f3bf 8f4f 	dsb	sy
 8010738:	e7fe      	b.n	8010738 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801073a:	b951      	cbnz	r1, 8010752 <xQueueGenericSendFromISR+0x38>
 801073c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801073e:	b143      	cbz	r3, 8010752 <xQueueGenericSendFromISR+0x38>
 8010740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010744:	f383 8811 	msr	BASEPRI, r3
 8010748:	f3bf 8f6f 	isb	sy
 801074c:	f3bf 8f4f 	dsb	sy
 8010750:	e7fe      	b.n	8010750 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010752:	2f02      	cmp	r7, #2
 8010754:	d10b      	bne.n	801076e <xQueueGenericSendFromISR+0x54>
 8010756:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010758:	2b01      	cmp	r3, #1
 801075a:	d008      	beq.n	801076e <xQueueGenericSendFromISR+0x54>
 801075c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010760:	f383 8811 	msr	BASEPRI, r3
 8010764:	f3bf 8f6f 	isb	sy
 8010768:	f3bf 8f4f 	dsb	sy
 801076c:	e7fe      	b.n	801076c <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801076e:	f001 fbc5 	bl	8011efc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010772:	f3ef 8611 	mrs	r6, BASEPRI
 8010776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801077a:	f383 8811 	msr	BASEPRI, r3
 801077e:	f3bf 8f6f 	isb	sy
 8010782:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010786:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010788:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801078a:	429a      	cmp	r2, r3
 801078c:	d301      	bcc.n	8010792 <xQueueGenericSendFromISR+0x78>
 801078e:	2f02      	cmp	r7, #2
 8010790:	d122      	bne.n	80107d8 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 8010792:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010796:	463a      	mov	r2, r7
 8010798:	4649      	mov	r1, r9
 801079a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 801079c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801079e:	f7ff fd56 	bl	801024e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80107a2:	1c6b      	adds	r3, r5, #1
 80107a4:	d113      	bne.n	80107ce <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80107a8:	b90b      	cbnz	r3, 80107ae <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 80107aa:	2001      	movs	r0, #1
 80107ac:	e00b      	b.n	80107c6 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80107b2:	f000 fea1 	bl	80114f8 <xTaskRemoveFromEventList>
 80107b6:	2800      	cmp	r0, #0
 80107b8:	d0f7      	beq.n	80107aa <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 80107ba:	f1b8 0f00 	cmp.w	r8, #0
 80107be:	d0f4      	beq.n	80107aa <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80107c0:	2001      	movs	r0, #1
 80107c2:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80107c6:	f386 8811 	msr	BASEPRI, r6
}
 80107ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80107ce:	3501      	adds	r5, #1
 80107d0:	b26d      	sxtb	r5, r5
 80107d2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80107d6:	e7e8      	b.n	80107aa <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 80107d8:	2000      	movs	r0, #0
 80107da:	e7f4      	b.n	80107c6 <xQueueGenericSendFromISR+0xac>

080107dc <xQueueGiveFromISR>:
{
 80107dc:	b570      	push	{r4, r5, r6, lr}
 80107de:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80107e0:	4604      	mov	r4, r0
 80107e2:	b940      	cbnz	r0, 80107f6 <xQueueGiveFromISR+0x1a>
	__asm volatile
 80107e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e8:	f383 8811 	msr	BASEPRI, r3
 80107ec:	f3bf 8f6f 	isb	sy
 80107f0:	f3bf 8f4f 	dsb	sy
 80107f4:	e7fe      	b.n	80107f4 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80107f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80107f8:	b143      	cbz	r3, 801080c <xQueueGiveFromISR+0x30>
 80107fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fe:	f383 8811 	msr	BASEPRI, r3
 8010802:	f3bf 8f6f 	isb	sy
 8010806:	f3bf 8f4f 	dsb	sy
 801080a:	e7fe      	b.n	801080a <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801080c:	6803      	ldr	r3, [r0, #0]
 801080e:	b953      	cbnz	r3, 8010826 <xQueueGiveFromISR+0x4a>
 8010810:	6883      	ldr	r3, [r0, #8]
 8010812:	b143      	cbz	r3, 8010826 <xQueueGiveFromISR+0x4a>
 8010814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010818:	f383 8811 	msr	BASEPRI, r3
 801081c:	f3bf 8f6f 	isb	sy
 8010820:	f3bf 8f4f 	dsb	sy
 8010824:	e7fe      	b.n	8010824 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010826:	f001 fb69 	bl	8011efc <vPortValidateInterruptPriority>
	__asm volatile
 801082a:	f3ef 8611 	mrs	r6, BASEPRI
 801082e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010832:	f383 8811 	msr	BASEPRI, r3
 8010836:	f3bf 8f6f 	isb	sy
 801083a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801083e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010840:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010842:	4293      	cmp	r3, r2
 8010844:	d91c      	bls.n	8010880 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8010846:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801084a:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 801084c:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801084e:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8010850:	1c5a      	adds	r2, r3, #1
 8010852:	d110      	bne.n	8010876 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010856:	b90b      	cbnz	r3, 801085c <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8010858:	2001      	movs	r0, #1
 801085a:	e009      	b.n	8010870 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801085c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010860:	f000 fe4a 	bl	80114f8 <xTaskRemoveFromEventList>
 8010864:	2800      	cmp	r0, #0
 8010866:	d0f7      	beq.n	8010858 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8010868:	2d00      	cmp	r5, #0
 801086a:	d0f5      	beq.n	8010858 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801086c:	2001      	movs	r0, #1
 801086e:	6028      	str	r0, [r5, #0]
	__asm volatile
 8010870:	f386 8811 	msr	BASEPRI, r6
}
 8010874:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010876:	3301      	adds	r3, #1
 8010878:	b25b      	sxtb	r3, r3
 801087a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801087e:	e7eb      	b.n	8010858 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8010880:	2000      	movs	r0, #0
 8010882:	e7f5      	b.n	8010870 <xQueueGiveFromISR+0x94>

08010884 <xQueueReceive>:
{
 8010884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010888:	b085      	sub	sp, #20
 801088a:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 801088c:	4604      	mov	r4, r0
{
 801088e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010890:	b940      	cbnz	r0, 80108a4 <xQueueReceive+0x20>
	__asm volatile
 8010892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010896:	f383 8811 	msr	BASEPRI, r3
 801089a:	f3bf 8f6f 	isb	sy
 801089e:	f3bf 8f4f 	dsb	sy
 80108a2:	e7fe      	b.n	80108a2 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108a4:	b951      	cbnz	r1, 80108bc <xQueueReceive+0x38>
 80108a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80108a8:	b143      	cbz	r3, 80108bc <xQueueReceive+0x38>
 80108aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ae:	f383 8811 	msr	BASEPRI, r3
 80108b2:	f3bf 8f6f 	isb	sy
 80108b6:	f3bf 8f4f 	dsb	sy
 80108ba:	e7fe      	b.n	80108ba <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80108bc:	f000 feb2 	bl	8011624 <xTaskGetSchedulerState>
 80108c0:	b950      	cbnz	r0, 80108d8 <xQueueReceive+0x54>
 80108c2:	9e01      	ldr	r6, [sp, #4]
 80108c4:	b14e      	cbz	r6, 80108da <xQueueReceive+0x56>
 80108c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ca:	f383 8811 	msr	BASEPRI, r3
 80108ce:	f3bf 8f6f 	isb	sy
 80108d2:	f3bf 8f4f 	dsb	sy
 80108d6:	e7fe      	b.n	80108d6 <xQueueReceive+0x52>
 80108d8:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80108da:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80108de:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80109c0 <xQueueReceive+0x13c>
 80108e2:	e03b      	b.n	801095c <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80108e4:	9d01      	ldr	r5, [sp, #4]
 80108e6:	b91d      	cbnz	r5, 80108f0 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80108e8:	f001 fa0e 	bl	8011d08 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80108ec:	2000      	movs	r0, #0
 80108ee:	e052      	b.n	8010996 <xQueueReceive+0x112>
				else if( xEntryTimeSet == pdFALSE )
 80108f0:	b916      	cbnz	r6, 80108f8 <xQueueReceive+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80108f2:	a802      	add	r0, sp, #8
 80108f4:	f000 fe42 	bl	801157c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80108f8:	f001 fa06 	bl	8011d08 <vPortExitCritical>
		vTaskSuspendAll();
 80108fc:	f000 fc02 	bl	8011104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010900:	f001 f9e0 	bl	8011cc4 <vPortEnterCritical>
 8010904:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010908:	2bff      	cmp	r3, #255	; 0xff
 801090a:	d101      	bne.n	8010910 <xQueueReceive+0x8c>
 801090c:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8010910:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010914:	2bff      	cmp	r3, #255	; 0xff
 8010916:	d101      	bne.n	801091c <xQueueReceive+0x98>
 8010918:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 801091c:	f001 f9f4 	bl	8011d08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010920:	a901      	add	r1, sp, #4
 8010922:	a802      	add	r0, sp, #8
 8010924:	f000 fe36 	bl	8011594 <xTaskCheckForTimeOut>
 8010928:	2800      	cmp	r0, #0
 801092a:	d13d      	bne.n	80109a8 <xQueueReceive+0x124>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801092c:	4620      	mov	r0, r4
 801092e:	f7ff fc83 	bl	8010238 <prvIsQueueEmpty>
 8010932:	b398      	cbz	r0, 801099c <xQueueReceive+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010934:	9901      	ldr	r1, [sp, #4]
 8010936:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801093a:	f000 fda5 	bl	8011488 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801093e:	4620      	mov	r0, r4
 8010940:	f7ff fccd 	bl	80102de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010944:	f000 fc84 	bl	8011250 <xTaskResumeAll>
 8010948:	b938      	cbnz	r0, 801095a <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 801094a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801094e:	f8c9 3000 	str.w	r3, [r9]
 8010952:	f3bf 8f4f 	dsb	sy
 8010956:	f3bf 8f6f 	isb	sy
 801095a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 801095c:	f001 f9b2 	bl	8011cc4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010960:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010962:	2d00      	cmp	r5, #0
 8010964:	d0be      	beq.n	80108e4 <xQueueReceive+0x60>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010966:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010968:	4639      	mov	r1, r7
 801096a:	4620      	mov	r0, r4
 801096c:	f7ff fca2 	bl	80102b4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010970:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010972:	6923      	ldr	r3, [r4, #16]
 8010974:	b163      	cbz	r3, 8010990 <xQueueReceive+0x10c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010976:	f104 0010 	add.w	r0, r4, #16
 801097a:	f000 fdbd 	bl	80114f8 <xTaskRemoveFromEventList>
 801097e:	b138      	cbz	r0, 8010990 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 8010980:	4b0f      	ldr	r3, [pc, #60]	; (80109c0 <xQueueReceive+0x13c>)
 8010982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010986:	601a      	str	r2, [r3, #0]
 8010988:	f3bf 8f4f 	dsb	sy
 801098c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010990:	f001 f9ba 	bl	8011d08 <vPortExitCritical>
				return pdPASS;
 8010994:	2001      	movs	r0, #1
}
 8010996:	b005      	add	sp, #20
 8010998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 801099c:	4620      	mov	r0, r4
 801099e:	f7ff fc9e 	bl	80102de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80109a2:	f000 fc55 	bl	8011250 <xTaskResumeAll>
 80109a6:	e7d8      	b.n	801095a <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 80109a8:	4620      	mov	r0, r4
 80109aa:	f7ff fc98 	bl	80102de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80109ae:	f000 fc4f 	bl	8011250 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80109b2:	4620      	mov	r0, r4
 80109b4:	f7ff fc40 	bl	8010238 <prvIsQueueEmpty>
 80109b8:	2800      	cmp	r0, #0
 80109ba:	d0ce      	beq.n	801095a <xQueueReceive+0xd6>
 80109bc:	e796      	b.n	80108ec <xQueueReceive+0x68>
 80109be:	bf00      	nop
 80109c0:	e000ed04 	.word	0xe000ed04

080109c4 <xQueueSemaphoreTake>:
{
 80109c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 80109c8:	4604      	mov	r4, r0
{
 80109ca:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80109cc:	b940      	cbnz	r0, 80109e0 <xQueueSemaphoreTake+0x1c>
 80109ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d2:	f383 8811 	msr	BASEPRI, r3
 80109d6:	f3bf 8f6f 	isb	sy
 80109da:	f3bf 8f4f 	dsb	sy
 80109de:	e7fe      	b.n	80109de <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 80109e0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80109e2:	b145      	cbz	r5, 80109f6 <xQueueSemaphoreTake+0x32>
 80109e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e8:	f383 8811 	msr	BASEPRI, r3
 80109ec:	f3bf 8f6f 	isb	sy
 80109f0:	f3bf 8f4f 	dsb	sy
 80109f4:	e7fe      	b.n	80109f4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80109f6:	f000 fe15 	bl	8011624 <xTaskGetSchedulerState>
 80109fa:	b950      	cbnz	r0, 8010a12 <xQueueSemaphoreTake+0x4e>
 80109fc:	9d01      	ldr	r5, [sp, #4]
 80109fe:	b145      	cbz	r5, 8010a12 <xQueueSemaphoreTake+0x4e>
 8010a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a04:	f383 8811 	msr	BASEPRI, r3
 8010a08:	f3bf 8f6f 	isb	sy
 8010a0c:	f3bf 8f4f 	dsb	sy
 8010a10:	e7fe      	b.n	8010a10 <xQueueSemaphoreTake+0x4c>
 8010a12:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8010a14:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8010a16:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8010b44 <xQueueSemaphoreTake+0x180>
 8010a1a:	e04f      	b.n	8010abc <xQueueSemaphoreTake+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a1c:	9b01      	ldr	r3, [sp, #4]
 8010a1e:	b963      	cbnz	r3, 8010a3a <xQueueSemaphoreTake+0x76>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010a20:	b145      	cbz	r5, 8010a34 <xQueueSemaphoreTake+0x70>
 8010a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a26:	f383 8811 	msr	BASEPRI, r3
 8010a2a:	f3bf 8f6f 	isb	sy
 8010a2e:	f3bf 8f4f 	dsb	sy
 8010a32:	e7fe      	b.n	8010a32 <xQueueSemaphoreTake+0x6e>
					taskEXIT_CRITICAL();
 8010a34:	f001 f968 	bl	8011d08 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8010a38:	e05e      	b.n	8010af8 <xQueueSemaphoreTake+0x134>
				else if( xEntryTimeSet == pdFALSE )
 8010a3a:	b916      	cbnz	r6, 8010a42 <xQueueSemaphoreTake+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a3c:	a802      	add	r0, sp, #8
 8010a3e:	f000 fd9d 	bl	801157c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010a42:	f001 f961 	bl	8011d08 <vPortExitCritical>
		vTaskSuspendAll();
 8010a46:	f000 fb5d 	bl	8011104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a4a:	f001 f93b 	bl	8011cc4 <vPortEnterCritical>
 8010a4e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010a52:	2bff      	cmp	r3, #255	; 0xff
 8010a54:	d101      	bne.n	8010a5a <xQueueSemaphoreTake+0x96>
 8010a56:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8010a5a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010a5e:	2bff      	cmp	r3, #255	; 0xff
 8010a60:	d101      	bne.n	8010a66 <xQueueSemaphoreTake+0xa2>
 8010a62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010a66:	f001 f94f 	bl	8011d08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a6a:	a901      	add	r1, sp, #4
 8010a6c:	a802      	add	r0, sp, #8
 8010a6e:	f000 fd91 	bl	8011594 <xTaskCheckForTimeOut>
 8010a72:	2800      	cmp	r0, #0
 8010a74:	d14a      	bne.n	8010b0c <xQueueSemaphoreTake+0x148>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a76:	4620      	mov	r0, r4
 8010a78:	f7ff fbde 	bl	8010238 <prvIsQueueEmpty>
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	d03f      	beq.n	8010b00 <xQueueSemaphoreTake+0x13c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a80:	6823      	ldr	r3, [r4, #0]
 8010a82:	b93b      	cbnz	r3, 8010a94 <xQueueSemaphoreTake+0xd0>
						taskENTER_CRITICAL();
 8010a84:	f001 f91e 	bl	8011cc4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010a88:	68a0      	ldr	r0, [r4, #8]
 8010a8a:	f000 fddb 	bl	8011644 <xTaskPriorityInherit>
 8010a8e:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8010a90:	f001 f93a 	bl	8011d08 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010a94:	9901      	ldr	r1, [sp, #4]
 8010a96:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010a9a:	f000 fcf5 	bl	8011488 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	f7ff fc1d 	bl	80102de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010aa4:	f000 fbd4 	bl	8011250 <xTaskResumeAll>
 8010aa8:	b938      	cbnz	r0, 8010aba <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 8010aaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010aae:	f8c8 3000 	str.w	r3, [r8]
 8010ab2:	f3bf 8f4f 	dsb	sy
 8010ab6:	f3bf 8f6f 	isb	sy
 8010aba:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8010abc:	f001 f902 	bl	8011cc4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010ac0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d0aa      	beq.n	8010a1c <xQueueSemaphoreTake+0x58>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010ac6:	3b01      	subs	r3, #1
 8010ac8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010aca:	6823      	ldr	r3, [r4, #0]
 8010acc:	b913      	cbnz	r3, 8010ad4 <xQueueSemaphoreTake+0x110>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010ace:	f000 fe89 	bl	80117e4 <pvTaskIncrementMutexHeldCount>
 8010ad2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ad4:	6923      	ldr	r3, [r4, #16]
 8010ad6:	b163      	cbz	r3, 8010af2 <xQueueSemaphoreTake+0x12e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ad8:	f104 0010 	add.w	r0, r4, #16
 8010adc:	f000 fd0c 	bl	80114f8 <xTaskRemoveFromEventList>
 8010ae0:	b138      	cbz	r0, 8010af2 <xQueueSemaphoreTake+0x12e>
						queueYIELD_IF_USING_PREEMPTION();
 8010ae2:	4b18      	ldr	r3, [pc, #96]	; (8010b44 <xQueueSemaphoreTake+0x180>)
 8010ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ae8:	601a      	str	r2, [r3, #0]
 8010aea:	f3bf 8f4f 	dsb	sy
 8010aee:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8010af2:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8010af4:	f001 f908 	bl	8011d08 <vPortExitCritical>
}
 8010af8:	4628      	mov	r0, r5
 8010afa:	b004      	add	sp, #16
 8010afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8010b00:	4620      	mov	r0, r4
 8010b02:	f7ff fbec 	bl	80102de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b06:	f000 fba3 	bl	8011250 <xTaskResumeAll>
 8010b0a:	e7d6      	b.n	8010aba <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f7ff fbe6 	bl	80102de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b12:	f000 fb9d 	bl	8011250 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010b16:	4620      	mov	r0, r4
 8010b18:	f7ff fb8e 	bl	8010238 <prvIsQueueEmpty>
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	d0cc      	beq.n	8010aba <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 8010b20:	2d00      	cmp	r5, #0
 8010b22:	d0e9      	beq.n	8010af8 <xQueueSemaphoreTake+0x134>
						taskENTER_CRITICAL();
 8010b24:	f001 f8ce 	bl	8011cc4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010b28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010b2a:	b119      	cbz	r1, 8010b34 <xQueueSemaphoreTake+0x170>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010b2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010b2e:	6819      	ldr	r1, [r3, #0]
 8010b30:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010b34:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8010b36:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010b38:	f000 fe06 	bl	8011748 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8010b3c:	f001 f8e4 	bl	8011d08 <vPortExitCritical>
 8010b40:	e7da      	b.n	8010af8 <xQueueSemaphoreTake+0x134>
 8010b42:	bf00      	nop
 8010b44:	e000ed04 	.word	0xe000ed04

08010b48 <xQueueTakeMutexRecursive>:
	{
 8010b48:	b570      	push	{r4, r5, r6, lr}
 8010b4a:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 8010b4c:	4604      	mov	r4, r0
 8010b4e:	b940      	cbnz	r0, 8010b62 <xQueueTakeMutexRecursive+0x1a>
 8010b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b54:	f383 8811 	msr	BASEPRI, r3
 8010b58:	f3bf 8f6f 	isb	sy
 8010b5c:	f3bf 8f4f 	dsb	sy
 8010b60:	e7fe      	b.n	8010b60 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010b62:	6886      	ldr	r6, [r0, #8]
 8010b64:	f000 fd58 	bl	8011618 <xTaskGetCurrentTaskHandle>
 8010b68:	4286      	cmp	r6, r0
 8010b6a:	d104      	bne.n	8010b76 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010b6c:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8010b6e:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010b70:	3301      	adds	r3, #1
 8010b72:	60e3      	str	r3, [r4, #12]
	}
 8010b74:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010b76:	4629      	mov	r1, r5
 8010b78:	4620      	mov	r0, r4
 8010b7a:	f7ff ff23 	bl	80109c4 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8010b7e:	2800      	cmp	r0, #0
 8010b80:	d0f8      	beq.n	8010b74 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010b82:	68e3      	ldr	r3, [r4, #12]
 8010b84:	3301      	adds	r3, #1
 8010b86:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8010b88:	e7f4      	b.n	8010b74 <xQueueTakeMutexRecursive+0x2c>

08010b8a <xQueueReceiveFromISR>:
{
 8010b8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b8e:	4689      	mov	r9, r1
 8010b90:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8010b92:	4605      	mov	r5, r0
 8010b94:	b940      	cbnz	r0, 8010ba8 <xQueueReceiveFromISR+0x1e>
 8010b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b9a:	f383 8811 	msr	BASEPRI, r3
 8010b9e:	f3bf 8f6f 	isb	sy
 8010ba2:	f3bf 8f4f 	dsb	sy
 8010ba6:	e7fe      	b.n	8010ba6 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ba8:	b951      	cbnz	r1, 8010bc0 <xQueueReceiveFromISR+0x36>
 8010baa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010bac:	b143      	cbz	r3, 8010bc0 <xQueueReceiveFromISR+0x36>
 8010bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb2:	f383 8811 	msr	BASEPRI, r3
 8010bb6:	f3bf 8f6f 	isb	sy
 8010bba:	f3bf 8f4f 	dsb	sy
 8010bbe:	e7fe      	b.n	8010bbe <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010bc0:	f001 f99c 	bl	8011efc <vPortValidateInterruptPriority>
	__asm volatile
 8010bc4:	f3ef 8711 	mrs	r7, BASEPRI
 8010bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bcc:	f383 8811 	msr	BASEPRI, r3
 8010bd0:	f3bf 8f6f 	isb	sy
 8010bd4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010bd8:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010bda:	b31c      	cbz	r4, 8010c24 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8010bdc:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010be0:	4649      	mov	r1, r9
 8010be2:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010be4:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8010be6:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010be8:	f7ff fb64 	bl	80102b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010bec:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8010bee:	1c73      	adds	r3, r6, #1
 8010bf0:	d113      	bne.n	8010c1a <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bf2:	692b      	ldr	r3, [r5, #16]
 8010bf4:	b90b      	cbnz	r3, 8010bfa <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8010bf6:	2001      	movs	r0, #1
 8010bf8:	e00b      	b.n	8010c12 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bfa:	f105 0010 	add.w	r0, r5, #16
 8010bfe:	f000 fc7b 	bl	80114f8 <xTaskRemoveFromEventList>
 8010c02:	2800      	cmp	r0, #0
 8010c04:	d0f7      	beq.n	8010bf6 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8010c06:	f1b8 0f00 	cmp.w	r8, #0
 8010c0a:	d0f4      	beq.n	8010bf6 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010c0c:	2001      	movs	r0, #1
 8010c0e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8010c12:	f387 8811 	msr	BASEPRI, r7
}
 8010c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010c1a:	3601      	adds	r6, #1
 8010c1c:	b276      	sxtb	r6, r6
 8010c1e:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8010c22:	e7e8      	b.n	8010bf6 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8010c24:	4620      	mov	r0, r4
 8010c26:	e7f4      	b.n	8010c12 <xQueueReceiveFromISR+0x88>

08010c28 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c28:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010c2a:	4a07      	ldr	r2, [pc, #28]	; (8010c48 <vQueueAddToRegistry+0x20>)
	{
 8010c2c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010c2e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8010c32:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8010c36:	b91d      	cbnz	r5, 8010c40 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010c38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010c3c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010c3e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c40:	3301      	adds	r3, #1
 8010c42:	2b08      	cmp	r3, #8
 8010c44:	d1f3      	bne.n	8010c2e <vQueueAddToRegistry+0x6>
 8010c46:	e7fa      	b.n	8010c3e <vQueueAddToRegistry+0x16>
 8010c48:	24020e4c 	.word	0x24020e4c

08010c4c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c4c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010c4e:	4a08      	ldr	r2, [pc, #32]	; (8010c70 <vQueueUnregisterQueue+0x24>)
	{
 8010c50:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010c52:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010c56:	684c      	ldr	r4, [r1, #4]
 8010c58:	4284      	cmp	r4, r0
 8010c5a:	d104      	bne.n	8010c66 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010c62:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010c64:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c66:	3301      	adds	r3, #1
 8010c68:	2b08      	cmp	r3, #8
 8010c6a:	d1f2      	bne.n	8010c52 <vQueueUnregisterQueue+0x6>
 8010c6c:	e7fa      	b.n	8010c64 <vQueueUnregisterQueue+0x18>
 8010c6e:	bf00      	nop
 8010c70:	24020e4c 	.word	0x24020e4c

08010c74 <vQueueDelete>:
{
 8010c74:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8010c76:	4604      	mov	r4, r0
 8010c78:	b940      	cbnz	r0, 8010c8c <vQueueDelete+0x18>
	__asm volatile
 8010c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7e:	f383 8811 	msr	BASEPRI, r3
 8010c82:	f3bf 8f6f 	isb	sy
 8010c86:	f3bf 8f4f 	dsb	sy
 8010c8a:	e7fe      	b.n	8010c8a <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8010c8c:	f7ff ffde 	bl	8010c4c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010c90:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010c94:	b923      	cbnz	r3, 8010ca0 <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 8010c96:	4620      	mov	r0, r4
}
 8010c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8010c9c:	f001 ba0c 	b.w	80120b8 <vPortFree>
}
 8010ca0:	bd10      	pop	{r4, pc}

08010ca2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010ca2:	b570      	push	{r4, r5, r6, lr}
 8010ca4:	4604      	mov	r4, r0
 8010ca6:	460d      	mov	r5, r1
 8010ca8:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010caa:	f001 f80b 	bl	8011cc4 <vPortEnterCritical>
 8010cae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010cb2:	2bff      	cmp	r3, #255	; 0xff
 8010cb4:	d102      	bne.n	8010cbc <vQueueWaitForMessageRestricted+0x1a>
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010cbc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010cc0:	2bff      	cmp	r3, #255	; 0xff
 8010cc2:	d102      	bne.n	8010cca <vQueueWaitForMessageRestricted+0x28>
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010cca:	f001 f81d 	bl	8011d08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010cce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010cd0:	b92b      	cbnz	r3, 8010cde <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010cd2:	4632      	mov	r2, r6
 8010cd4:	4629      	mov	r1, r5
 8010cd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010cda:	f000 fbef 	bl	80114bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010cde:	4620      	mov	r0, r4
	}
 8010ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8010ce4:	f7ff bafb 	b.w	80102de <prvUnlockQueue>

08010ce8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cec:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010cee:	f000 ffe9 	bl	8011cc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010cf2:	4b2e      	ldr	r3, [pc, #184]	; (8010dac <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8010cf4:	4c2e      	ldr	r4, [pc, #184]	; (8010db0 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8010cf6:	681a      	ldr	r2, [r3, #0]
 8010cf8:	4f2e      	ldr	r7, [pc, #184]	; (8010db4 <prvAddNewTaskToReadyList+0xcc>)
 8010cfa:	3201      	adds	r2, #1
 8010cfc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8010cfe:	6825      	ldr	r5, [r4, #0]
 8010d00:	2d00      	cmp	r5, #0
 8010d02:	d147      	bne.n	8010d94 <prvAddNewTaskToReadyList+0xac>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010d04:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d11f      	bne.n	8010d4c <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010d0c:	f04f 0814 	mov.w	r8, #20
 8010d10:	fb08 7005 	mla	r0, r8, r5, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010d14:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010d16:	f7ff fa4d 	bl	80101b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010d1a:	2d38      	cmp	r5, #56	; 0x38
 8010d1c:	d1f8      	bne.n	8010d10 <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010d1e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8010de0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8010d22:	4d25      	ldr	r5, [pc, #148]	; (8010db8 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8010d24:	4640      	mov	r0, r8
 8010d26:	f7ff fa45 	bl	80101b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	f7ff fa42 	bl	80101b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010d30:	4822      	ldr	r0, [pc, #136]	; (8010dbc <prvAddNewTaskToReadyList+0xd4>)
 8010d32:	f7ff fa3f 	bl	80101b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010d36:	4822      	ldr	r0, [pc, #136]	; (8010dc0 <prvAddNewTaskToReadyList+0xd8>)
 8010d38:	f7ff fa3c 	bl	80101b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010d3c:	4821      	ldr	r0, [pc, #132]	; (8010dc4 <prvAddNewTaskToReadyList+0xdc>)
 8010d3e:	f7ff fa39 	bl	80101b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010d42:	4b21      	ldr	r3, [pc, #132]	; (8010dc8 <prvAddNewTaskToReadyList+0xe0>)
 8010d44:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010d48:	4b20      	ldr	r3, [pc, #128]	; (8010dcc <prvAddNewTaskToReadyList+0xe4>)
 8010d4a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8010d4c:	4a20      	ldr	r2, [pc, #128]	; (8010dd0 <prvAddNewTaskToReadyList+0xe8>)
 8010d4e:	6813      	ldr	r3, [r2, #0]
 8010d50:	3301      	adds	r3, #1
 8010d52:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8010d54:	4a1f      	ldr	r2, [pc, #124]	; (8010dd4 <prvAddNewTaskToReadyList+0xec>)
 8010d56:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8010d58:	6811      	ldr	r1, [r2, #0]
 8010d5a:	428b      	cmp	r3, r1
 8010d5c:	d900      	bls.n	8010d60 <prvAddNewTaskToReadyList+0x78>
 8010d5e:	6013      	str	r3, [r2, #0]
 8010d60:	2014      	movs	r0, #20
 8010d62:	1d31      	adds	r1, r6, #4
 8010d64:	fb00 7003 	mla	r0, r0, r3, r7
 8010d68:	f7ff fa32 	bl	80101d0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8010d6c:	f000 ffcc 	bl	8011d08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8010d70:	4b19      	ldr	r3, [pc, #100]	; (8010dd8 <prvAddNewTaskToReadyList+0xf0>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	b163      	cbz	r3, 8010d90 <prvAddNewTaskToReadyList+0xa8>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d76:	6823      	ldr	r3, [r4, #0]
 8010d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d7a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d207      	bcs.n	8010d90 <prvAddNewTaskToReadyList+0xa8>
			taskYIELD_IF_USING_PREEMPTION();
 8010d80:	4b16      	ldr	r3, [pc, #88]	; (8010ddc <prvAddNewTaskToReadyList+0xf4>)
 8010d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d86:	601a      	str	r2, [r3, #0]
 8010d88:	f3bf 8f4f 	dsb	sy
 8010d8c:	f3bf 8f6f 	isb	sy
}
 8010d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8010d94:	4b10      	ldr	r3, [pc, #64]	; (8010dd8 <prvAddNewTaskToReadyList+0xf0>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d1d7      	bne.n	8010d4c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010d9c:	6823      	ldr	r3, [r4, #0]
 8010d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010da0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d8d2      	bhi.n	8010d4c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8010da6:	6026      	str	r6, [r4, #0]
 8010da8:	e7d0      	b.n	8010d4c <prvAddNewTaskToReadyList+0x64>
 8010daa:	bf00      	nop
 8010dac:	24000e8c 	.word	0x24000e8c
 8010db0:	24000a20 	.word	0x24000a20
 8010db4:	24000a2c 	.word	0x24000a2c
 8010db8:	24000eb8 	.word	0x24000eb8
 8010dbc:	24000ed4 	.word	0x24000ed4
 8010dc0:	24000f00 	.word	0x24000f00
 8010dc4:	24000eec 	.word	0x24000eec
 8010dc8:	24000a24 	.word	0x24000a24
 8010dcc:	24000a28 	.word	0x24000a28
 8010dd0:	24000e9c 	.word	0x24000e9c
 8010dd4:	24000ea0 	.word	0x24000ea0
 8010dd8:	24000ee8 	.word	0x24000ee8
 8010ddc:	e000ed04 	.word	0xe000ed04
 8010de0:	24000ea4 	.word	0x24000ea4

08010de4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010de4:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010de6:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
	{
 8010dea:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010dec:	b93b      	cbnz	r3, 8010dfe <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010dee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8010df0:	f001 f962 	bl	80120b8 <vPortFree>
				vPortFree( pxTCB );
 8010df4:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8010dfa:	f001 b95d 	b.w	80120b8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010dfe:	2b01      	cmp	r3, #1
 8010e00:	d0f9      	beq.n	8010df6 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010e02:	2b02      	cmp	r3, #2
 8010e04:	d008      	beq.n	8010e18 <prvDeleteTCB+0x34>
 8010e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0a:	f383 8811 	msr	BASEPRI, r3
 8010e0e:	f3bf 8f6f 	isb	sy
 8010e12:	f3bf 8f4f 	dsb	sy
 8010e16:	e7fe      	b.n	8010e16 <prvDeleteTCB+0x32>
	}
 8010e18:	bd10      	pop	{r4, pc}
	...

08010e1c <prvIdleTask>:
{
 8010e1c:	b580      	push	{r7, lr}
				taskYIELD();
 8010e1e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8010e7c <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e22:	4f12      	ldr	r7, [pc, #72]	; (8010e6c <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e24:	4c12      	ldr	r4, [pc, #72]	; (8010e70 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8010e26:	4d13      	ldr	r5, [pc, #76]	; (8010e74 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e28:	6823      	ldr	r3, [r4, #0]
 8010e2a:	b963      	cbnz	r3, 8010e46 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010e2c:	4b12      	ldr	r3, [pc, #72]	; (8010e78 <prvIdleTask+0x5c>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	2b01      	cmp	r3, #1
 8010e32:	d9f8      	bls.n	8010e26 <prvIdleTask+0xa>
				taskYIELD();
 8010e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010e38:	f8c8 3000 	str.w	r3, [r8]
 8010e3c:	f3bf 8f4f 	dsb	sy
 8010e40:	f3bf 8f6f 	isb	sy
 8010e44:	e7ee      	b.n	8010e24 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8010e46:	f000 ff3d 	bl	8011cc4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e4e:	1d30      	adds	r0, r6, #4
 8010e50:	f7ff f9e1 	bl	8010216 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010e54:	682b      	ldr	r3, [r5, #0]
 8010e56:	3b01      	subs	r3, #1
 8010e58:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010e5a:	6823      	ldr	r3, [r4, #0]
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8010e60:	f000 ff52 	bl	8011d08 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8010e64:	4630      	mov	r0, r6
 8010e66:	f7ff ffbd 	bl	8010de4 <prvDeleteTCB>
 8010e6a:	e7dd      	b.n	8010e28 <prvIdleTask+0xc>
 8010e6c:	24000f00 	.word	0x24000f00
 8010e70:	24000e90 	.word	0x24000e90
 8010e74:	24000e8c 	.word	0x24000e8c
 8010e78:	24000a2c 	.word	0x24000a2c
 8010e7c:	e000ed04 	.word	0xe000ed04

08010e80 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e80:	4a06      	ldr	r2, [pc, #24]	; (8010e9c <prvResetNextTaskUnblockTime+0x1c>)
 8010e82:	6813      	ldr	r3, [r2, #0]
 8010e84:	6819      	ldr	r1, [r3, #0]
 8010e86:	4b06      	ldr	r3, [pc, #24]	; (8010ea0 <prvResetNextTaskUnblockTime+0x20>)
 8010e88:	b919      	cbnz	r1, 8010e92 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010e8a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010e8e:	601a      	str	r2, [r3, #0]
	}
}
 8010e90:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e92:	6812      	ldr	r2, [r2, #0]
 8010e94:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010e96:	68d2      	ldr	r2, [r2, #12]
 8010e98:	6852      	ldr	r2, [r2, #4]
 8010e9a:	e7f8      	b.n	8010e8e <prvResetNextTaskUnblockTime+0xe>
 8010e9c:	24000a24 	.word	0x24000a24
 8010ea0:	24000ecc 	.word	0x24000ecc

08010ea4 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010ea8:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010eac:	4607      	mov	r7, r0
 8010eae:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010eb0:	21a5      	movs	r1, #165	; 0xa5
 8010eb2:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010eb4:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010eb6:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010eba:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010ebe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010ec0:	f001 fbb9 	bl	8012636 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010ec4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010ec6:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010ec8:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8010ecc:	b395      	cbz	r5, 8010f34 <prvInitialiseNewTask.isra.2+0x90>
 8010ece:	1e6b      	subs	r3, r5, #1
 8010ed0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8010ed4:	3513      	adds	r5, #19
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010ed6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010eda:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8010ede:	7819      	ldrb	r1, [r3, #0]
 8010ee0:	b109      	cbz	r1, 8010ee6 <prvInitialiseNewTask.isra.2+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ee2:	42ab      	cmp	r3, r5
 8010ee4:	d1f7      	bne.n	8010ed6 <prvInitialiseNewTask.isra.2+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 8010eec:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8010eee:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010ef2:	1d20      	adds	r0, r4, #4
 8010ef4:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8010ef6:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
 8010efa:	bf28      	it	cs
 8010efc:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8010efe:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8010f00:	64a5      	str	r5, [r4, #72]	; 0x48
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f02:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010f06:	f7ff f960 	bl	80101ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010f0a:	f104 0018 	add.w	r0, r4, #24
 8010f0e:	f7ff f95c 	bl	80101ca <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8010f12:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010f16:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010f18:	4642      	mov	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f1a:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010f1c:	4639      	mov	r1, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010f1e:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010f20:	4648      	mov	r0, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010f22:	f884 a054 	strb.w	sl, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010f26:	f000 fea7 	bl	8011c78 <pxPortInitialiseStack>
 8010f2a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8010f2c:	b106      	cbz	r6, 8010f30 <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010f2e:	6034      	str	r4, [r6, #0]
}
 8010f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010f34:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8010f38:	e7d8      	b.n	8010eec <prvInitialiseNewTask.isra.2+0x48>
	...

08010f3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010f3e:	4b16      	ldr	r3, [pc, #88]	; (8010f98 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8010f40:	4605      	mov	r5, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f42:	4e16      	ldr	r6, [pc, #88]	; (8010f9c <prvAddCurrentTaskToDelayedList+0x60>)
{
 8010f44:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8010f46:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f48:	6830      	ldr	r0, [r6, #0]
 8010f4a:	3004      	adds	r0, #4
 8010f4c:	f7ff f963 	bl	8010216 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010f50:	1c6b      	adds	r3, r5, #1
 8010f52:	4633      	mov	r3, r6
 8010f54:	d107      	bne.n	8010f66 <prvAddCurrentTaskToDelayedList+0x2a>
 8010f56:	b137      	cbz	r7, 8010f66 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f58:	6831      	ldr	r1, [r6, #0]
 8010f5a:	4811      	ldr	r0, [pc, #68]	; (8010fa0 <prvAddCurrentTaskToDelayedList+0x64>)
 8010f5c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f62:	f7ff b935 	b.w	80101d0 <vListInsertEnd>
 8010f66:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8010f6c:	d307      	bcc.n	8010f7e <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f6e:	4a0d      	ldr	r2, [pc, #52]	; (8010fa4 <prvAddCurrentTaskToDelayedList+0x68>)
 8010f70:	6810      	ldr	r0, [r2, #0]
 8010f72:	6819      	ldr	r1, [r3, #0]
}
 8010f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f78:	3104      	adds	r1, #4
 8010f7a:	f7ff b935 	b.w	80101e8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010f7e:	4a0a      	ldr	r2, [pc, #40]	; (8010fa8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8010f80:	6810      	ldr	r0, [r2, #0]
 8010f82:	6819      	ldr	r1, [r3, #0]
 8010f84:	3104      	adds	r1, #4
 8010f86:	f7ff f92f 	bl	80101e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010f8a:	4b08      	ldr	r3, [pc, #32]	; (8010fac <prvAddCurrentTaskToDelayedList+0x70>)
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	42a2      	cmp	r2, r4
 8010f90:	d900      	bls.n	8010f94 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 8010f92:	601c      	str	r4, [r3, #0]
}
 8010f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f96:	bf00      	nop
 8010f98:	24000f14 	.word	0x24000f14
 8010f9c:	24000a20 	.word	0x24000a20
 8010fa0:	24000eec 	.word	0x24000eec
 8010fa4:	24000a28 	.word	0x24000a28
 8010fa8:	24000a24 	.word	0x24000a24
 8010fac:	24000ecc 	.word	0x24000ecc

08010fb0 <xTaskCreateStatic>:
	{
 8010fb0:	b570      	push	{r4, r5, r6, lr}
 8010fb2:	b086      	sub	sp, #24
 8010fb4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8010fb8:	b945      	cbnz	r5, 8010fcc <xTaskCreateStatic+0x1c>
 8010fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fbe:	f383 8811 	msr	BASEPRI, r3
 8010fc2:	f3bf 8f6f 	isb	sy
 8010fc6:	f3bf 8f4f 	dsb	sy
 8010fca:	e7fe      	b.n	8010fca <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8010fcc:	b944      	cbnz	r4, 8010fe0 <xTaskCreateStatic+0x30>
 8010fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd2:	f383 8811 	msr	BASEPRI, r3
 8010fd6:	f3bf 8f6f 	isb	sy
 8010fda:	f3bf 8f4f 	dsb	sy
 8010fde:	e7fe      	b.n	8010fde <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8010fe0:	2658      	movs	r6, #88	; 0x58
 8010fe2:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010fe4:	9e05      	ldr	r6, [sp, #20]
 8010fe6:	2e58      	cmp	r6, #88	; 0x58
 8010fe8:	d008      	beq.n	8010ffc <xTaskCreateStatic+0x4c>
 8010fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fee:	f383 8811 	msr	BASEPRI, r3
 8010ff2:	f3bf 8f6f 	isb	sy
 8010ff6:	f3bf 8f4f 	dsb	sy
 8010ffa:	e7fe      	b.n	8010ffa <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010ffc:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010ffe:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011000:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011002:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011006:	ad04      	add	r5, sp, #16
 8011008:	9402      	str	r4, [sp, #8]
 801100a:	9501      	str	r5, [sp, #4]
 801100c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801100e:	9500      	str	r5, [sp, #0]
 8011010:	f7ff ff48 	bl	8010ea4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011014:	4620      	mov	r0, r4
 8011016:	f7ff fe67 	bl	8010ce8 <prvAddNewTaskToReadyList>
	}
 801101a:	9804      	ldr	r0, [sp, #16]
 801101c:	b006      	add	sp, #24
 801101e:	bd70      	pop	{r4, r5, r6, pc}

08011020 <xTaskCreate>:
	{
 8011020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011024:	4607      	mov	r7, r0
 8011026:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011028:	0090      	lsls	r0, r2, #2
	{
 801102a:	4688      	mov	r8, r1
 801102c:	4616      	mov	r6, r2
 801102e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011030:	f000 ffb6 	bl	8011fa0 <pvPortMalloc>
			if( pxStack != NULL )
 8011034:	4605      	mov	r5, r0
 8011036:	b1e8      	cbz	r0, 8011074 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011038:	2058      	movs	r0, #88	; 0x58
 801103a:	f000 ffb1 	bl	8011fa0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801103e:	4604      	mov	r4, r0
 8011040:	b1a8      	cbz	r0, 801106e <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011042:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8011044:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011046:	4632      	mov	r2, r6
 8011048:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801104a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801104e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011050:	9002      	str	r0, [sp, #8]
 8011052:	4638      	mov	r0, r7
 8011054:	9301      	str	r3, [sp, #4]
 8011056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011058:	9300      	str	r3, [sp, #0]
 801105a:	464b      	mov	r3, r9
 801105c:	f7ff ff22 	bl	8010ea4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011060:	4620      	mov	r0, r4
 8011062:	f7ff fe41 	bl	8010ce8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011066:	2001      	movs	r0, #1
	}
 8011068:	b005      	add	sp, #20
 801106a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 801106e:	4628      	mov	r0, r5
 8011070:	f001 f822 	bl	80120b8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011074:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8011078:	e7f6      	b.n	8011068 <xTaskCreate+0x48>
	...

0801107c <vTaskStartScheduler>:
{
 801107c:	b510      	push	{r4, lr}
 801107e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011080:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011082:	aa07      	add	r2, sp, #28
 8011084:	a906      	add	r1, sp, #24
 8011086:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011088:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801108c:	f7ff f87a 	bl	8010184 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011090:	9b05      	ldr	r3, [sp, #20]
 8011092:	9a07      	ldr	r2, [sp, #28]
 8011094:	9302      	str	r3, [sp, #8]
 8011096:	9b06      	ldr	r3, [sp, #24]
 8011098:	4915      	ldr	r1, [pc, #84]	; (80110f0 <vTaskStartScheduler+0x74>)
 801109a:	4816      	ldr	r0, [pc, #88]	; (80110f4 <vTaskStartScheduler+0x78>)
 801109c:	e9cd 4300 	strd	r4, r3, [sp]
 80110a0:	4623      	mov	r3, r4
 80110a2:	f7ff ff85 	bl	8010fb0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80110a6:	b1a8      	cbz	r0, 80110d4 <vTaskStartScheduler+0x58>
			xReturn = xTimerCreateTimerTask();
 80110a8:	f000 fbfa 	bl	80118a0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80110ac:	2801      	cmp	r0, #1
 80110ae:	d113      	bne.n	80110d8 <vTaskStartScheduler+0x5c>
 80110b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b4:	f383 8811 	msr	BASEPRI, r3
 80110b8:	f3bf 8f6f 	isb	sy
 80110bc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80110c0:	4b0d      	ldr	r3, [pc, #52]	; (80110f8 <vTaskStartScheduler+0x7c>)
 80110c2:	f04f 32ff 	mov.w	r2, #4294967295
 80110c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80110c8:	4b0c      	ldr	r3, [pc, #48]	; (80110fc <vTaskStartScheduler+0x80>)
 80110ca:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80110cc:	4b0c      	ldr	r3, [pc, #48]	; (8011100 <vTaskStartScheduler+0x84>)
 80110ce:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80110d0:	f000 fe90 	bl	8011df4 <xPortStartScheduler>
}
 80110d4:	b008      	add	sp, #32
 80110d6:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80110d8:	3001      	adds	r0, #1
 80110da:	d1fb      	bne.n	80110d4 <vTaskStartScheduler+0x58>
 80110dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e0:	f383 8811 	msr	BASEPRI, r3
 80110e4:	f3bf 8f6f 	isb	sy
 80110e8:	f3bf 8f4f 	dsb	sy
 80110ec:	e7fe      	b.n	80110ec <vTaskStartScheduler+0x70>
 80110ee:	bf00      	nop
 80110f0:	08014c0f 	.word	0x08014c0f
 80110f4:	08010e1d 	.word	0x08010e1d
 80110f8:	24000ecc 	.word	0x24000ecc
 80110fc:	24000ee8 	.word	0x24000ee8
 8011100:	24000f14 	.word	0x24000f14

08011104 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8011104:	4a02      	ldr	r2, [pc, #8]	; (8011110 <vTaskSuspendAll+0xc>)
 8011106:	6813      	ldr	r3, [r2, #0]
 8011108:	3301      	adds	r3, #1
 801110a:	6013      	str	r3, [r2, #0]
}
 801110c:	4770      	bx	lr
 801110e:	bf00      	nop
 8011110:	24000e98 	.word	0x24000e98

08011114 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8011114:	4b01      	ldr	r3, [pc, #4]	; (801111c <xTaskGetTickCount+0x8>)
 8011116:	6818      	ldr	r0, [r3, #0]
}
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop
 801111c:	24000f14 	.word	0x24000f14

08011120 <xTaskGetTickCountFromISR>:
{
 8011120:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011122:	f000 feeb 	bl	8011efc <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8011126:	4b01      	ldr	r3, [pc, #4]	; (801112c <xTaskGetTickCountFromISR+0xc>)
 8011128:	6818      	ldr	r0, [r3, #0]
}
 801112a:	bd08      	pop	{r3, pc}
 801112c:	24000f14 	.word	0x24000f14

08011130 <xTaskIncrementTick>:
{
 8011130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011134:	4b3b      	ldr	r3, [pc, #236]	; (8011224 <xTaskIncrementTick+0xf4>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d16b      	bne.n	8011214 <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801113c:	4b3a      	ldr	r3, [pc, #232]	; (8011228 <xTaskIncrementTick+0xf8>)
 801113e:	681c      	ldr	r4, [r3, #0]
 8011140:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8011142:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011144:	b9bc      	cbnz	r4, 8011176 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8011146:	4b39      	ldr	r3, [pc, #228]	; (801122c <xTaskIncrementTick+0xfc>)
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	6812      	ldr	r2, [r2, #0]
 801114c:	b142      	cbz	r2, 8011160 <xTaskIncrementTick+0x30>
 801114e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011152:	f383 8811 	msr	BASEPRI, r3
 8011156:	f3bf 8f6f 	isb	sy
 801115a:	f3bf 8f4f 	dsb	sy
 801115e:	e7fe      	b.n	801115e <xTaskIncrementTick+0x2e>
 8011160:	4a33      	ldr	r2, [pc, #204]	; (8011230 <xTaskIncrementTick+0x100>)
 8011162:	6819      	ldr	r1, [r3, #0]
 8011164:	6810      	ldr	r0, [r2, #0]
 8011166:	6018      	str	r0, [r3, #0]
 8011168:	6011      	str	r1, [r2, #0]
 801116a:	4a32      	ldr	r2, [pc, #200]	; (8011234 <xTaskIncrementTick+0x104>)
 801116c:	6813      	ldr	r3, [r2, #0]
 801116e:	3301      	adds	r3, #1
 8011170:	6013      	str	r3, [r2, #0]
 8011172:	f7ff fe85 	bl	8010e80 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011176:	4d30      	ldr	r5, [pc, #192]	; (8011238 <xTaskIncrementTick+0x108>)
BaseType_t xSwitchRequired = pdFALSE;
 8011178:	f04f 0b00 	mov.w	fp, #0
 801117c:	4f2f      	ldr	r7, [pc, #188]	; (801123c <xTaskIncrementTick+0x10c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 801117e:	682b      	ldr	r3, [r5, #0]
 8011180:	42a3      	cmp	r3, r4
 8011182:	d911      	bls.n	80111a8 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011184:	683a      	ldr	r2, [r7, #0]
 8011186:	4b2e      	ldr	r3, [pc, #184]	; (8011240 <xTaskIncrementTick+0x110>)
 8011188:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801118a:	2214      	movs	r2, #20
 801118c:	434a      	muls	r2, r1
 801118e:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8011190:	2a02      	cmp	r2, #2
 8011192:	bf28      	it	cs
 8011194:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8011198:	4a2a      	ldr	r2, [pc, #168]	; (8011244 <xTaskIncrementTick+0x114>)
 801119a:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 801119c:	2a00      	cmp	r2, #0
}
 801119e:	bf0c      	ite	eq
 80111a0:	4658      	moveq	r0, fp
 80111a2:	2001      	movne	r0, #1
 80111a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111a8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 801122c <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 80111ac:	f8df a09c 	ldr.w	sl, [pc, #156]	; 801124c <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111b0:	f8d9 2000 	ldr.w	r2, [r9]
 80111b4:	6812      	ldr	r2, [r2, #0]
 80111b6:	b91a      	cbnz	r2, 80111c0 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111b8:	f04f 32ff 	mov.w	r2, #4294967295
 80111bc:	602a      	str	r2, [r5, #0]
					break;
 80111be:	e7e1      	b.n	8011184 <xTaskIncrementTick+0x54>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111c0:	f8d9 2000 	ldr.w	r2, [r9]
 80111c4:	68d2      	ldr	r2, [r2, #12]
 80111c6:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80111c8:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80111ca:	428c      	cmp	r4, r1
 80111cc:	d201      	bcs.n	80111d2 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 80111ce:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80111d0:	e7d8      	b.n	8011184 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111d2:	f106 0804 	add.w	r8, r6, #4
 80111d6:	4640      	mov	r0, r8
 80111d8:	f7ff f81d 	bl	8010216 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80111dc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80111de:	b119      	cbz	r1, 80111e8 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111e0:	f106 0018 	add.w	r0, r6, #24
 80111e4:	f7ff f817 	bl	8010216 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80111e8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80111ea:	f8da 1000 	ldr.w	r1, [sl]
 80111ee:	4288      	cmp	r0, r1
 80111f0:	d901      	bls.n	80111f6 <xTaskIncrementTick+0xc6>
 80111f2:	f8ca 0000 	str.w	r0, [sl]
 80111f6:	2214      	movs	r2, #20
 80111f8:	4b11      	ldr	r3, [pc, #68]	; (8011240 <xTaskIncrementTick+0x110>)
 80111fa:	4641      	mov	r1, r8
 80111fc:	fb02 3000 	mla	r0, r2, r0, r3
 8011200:	f7fe ffe6 	bl	80101d0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011204:	6838      	ldr	r0, [r7, #0]
 8011206:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8011208:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 801120a:	4291      	cmp	r1, r2
 801120c:	bf28      	it	cs
 801120e:	f04f 0b01 	movcs.w	fp, #1
 8011212:	e7cd      	b.n	80111b0 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8011214:	4a0c      	ldr	r2, [pc, #48]	; (8011248 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8011216:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 801121a:	6813      	ldr	r3, [r2, #0]
 801121c:	3301      	adds	r3, #1
 801121e:	6013      	str	r3, [r2, #0]
 8011220:	e7ba      	b.n	8011198 <xTaskIncrementTick+0x68>
 8011222:	bf00      	nop
 8011224:	24000e98 	.word	0x24000e98
 8011228:	24000f14 	.word	0x24000f14
 801122c:	24000a24 	.word	0x24000a24
 8011230:	24000a28 	.word	0x24000a28
 8011234:	24000ed0 	.word	0x24000ed0
 8011238:	24000ecc 	.word	0x24000ecc
 801123c:	24000a20 	.word	0x24000a20
 8011240:	24000a2c 	.word	0x24000a2c
 8011244:	24000f18 	.word	0x24000f18
 8011248:	24000e94 	.word	0x24000e94
 801124c:	24000ea0 	.word	0x24000ea0

08011250 <xTaskResumeAll>:
{
 8011250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8011254:	4c2f      	ldr	r4, [pc, #188]	; (8011314 <xTaskResumeAll+0xc4>)
 8011256:	6823      	ldr	r3, [r4, #0]
 8011258:	b943      	cbnz	r3, 801126c <xTaskResumeAll+0x1c>
 801125a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801125e:	f383 8811 	msr	BASEPRI, r3
 8011262:	f3bf 8f6f 	isb	sy
 8011266:	f3bf 8f4f 	dsb	sy
 801126a:	e7fe      	b.n	801126a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 801126c:	f000 fd2a 	bl	8011cc4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8011270:	6823      	ldr	r3, [r4, #0]
 8011272:	3b01      	subs	r3, #1
 8011274:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011276:	6824      	ldr	r4, [r4, #0]
 8011278:	b12c      	cbz	r4, 8011286 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 801127a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801127c:	f000 fd44 	bl	8011d08 <vPortExitCritical>
}
 8011280:	4620      	mov	r0, r4
 8011282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011286:	4b24      	ldr	r3, [pc, #144]	; (8011318 <xTaskResumeAll+0xc8>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d0f5      	beq.n	801127a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801128e:	4d23      	ldr	r5, [pc, #140]	; (801131c <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 8011290:	4e23      	ldr	r6, [pc, #140]	; (8011320 <xTaskResumeAll+0xd0>)
 8011292:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8011334 <xTaskResumeAll+0xe4>
 8011296:	e01d      	b.n	80112d4 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011298:	68eb      	ldr	r3, [r5, #12]
 801129a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801129c:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801129e:	f104 0018 	add.w	r0, r4, #24
 80112a2:	f7fe ffb8 	bl	8010216 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112a6:	4638      	mov	r0, r7
 80112a8:	f7fe ffb5 	bl	8010216 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80112ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80112ae:	6832      	ldr	r2, [r6, #0]
 80112b0:	4293      	cmp	r3, r2
 80112b2:	d900      	bls.n	80112b6 <xTaskResumeAll+0x66>
 80112b4:	6033      	str	r3, [r6, #0]
 80112b6:	2014      	movs	r0, #20
 80112b8:	4639      	mov	r1, r7
 80112ba:	fb00 8003 	mla	r0, r0, r3, r8
 80112be:	f7fe ff87 	bl	80101d0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80112c2:	4b18      	ldr	r3, [pc, #96]	; (8011324 <xTaskResumeAll+0xd4>)
 80112c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d302      	bcc.n	80112d4 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 80112ce:	4b16      	ldr	r3, [pc, #88]	; (8011328 <xTaskResumeAll+0xd8>)
 80112d0:	2201      	movs	r2, #1
 80112d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80112d4:	682b      	ldr	r3, [r5, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d1de      	bne.n	8011298 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80112da:	b10c      	cbz	r4, 80112e0 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 80112dc:	f7ff fdd0 	bl	8010e80 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80112e0:	4d12      	ldr	r5, [pc, #72]	; (801132c <xTaskResumeAll+0xdc>)
 80112e2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80112e4:	b144      	cbz	r4, 80112f8 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 80112e6:	4e10      	ldr	r6, [pc, #64]	; (8011328 <xTaskResumeAll+0xd8>)
 80112e8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80112ea:	f7ff ff21 	bl	8011130 <xTaskIncrementTick>
 80112ee:	b100      	cbz	r0, 80112f2 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 80112f0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80112f2:	3c01      	subs	r4, #1
 80112f4:	d1f9      	bne.n	80112ea <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 80112f6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80112f8:	4b0b      	ldr	r3, [pc, #44]	; (8011328 <xTaskResumeAll+0xd8>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d0bc      	beq.n	801127a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8011300:	4b0b      	ldr	r3, [pc, #44]	; (8011330 <xTaskResumeAll+0xe0>)
 8011302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011306:	601a      	str	r2, [r3, #0]
 8011308:	f3bf 8f4f 	dsb	sy
 801130c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8011310:	2401      	movs	r4, #1
 8011312:	e7b3      	b.n	801127c <xTaskResumeAll+0x2c>
 8011314:	24000e98 	.word	0x24000e98
 8011318:	24000e8c 	.word	0x24000e8c
 801131c:	24000ed4 	.word	0x24000ed4
 8011320:	24000ea0 	.word	0x24000ea0
 8011324:	24000a20 	.word	0x24000a20
 8011328:	24000f18 	.word	0x24000f18
 801132c:	24000e94 	.word	0x24000e94
 8011330:	e000ed04 	.word	0xe000ed04
 8011334:	24000a2c 	.word	0x24000a2c

08011338 <vTaskDelayUntil>:
	{
 8011338:	b510      	push	{r4, lr}
		configASSERT( pxPreviousWakeTime );
 801133a:	b940      	cbnz	r0, 801134e <vTaskDelayUntil+0x16>
 801133c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011340:	f383 8811 	msr	BASEPRI, r3
 8011344:	f3bf 8f6f 	isb	sy
 8011348:	f3bf 8f4f 	dsb	sy
 801134c:	e7fe      	b.n	801134c <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 801134e:	b941      	cbnz	r1, 8011362 <vTaskDelayUntil+0x2a>
 8011350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011354:	f383 8811 	msr	BASEPRI, r3
 8011358:	f3bf 8f6f 	isb	sy
 801135c:	f3bf 8f4f 	dsb	sy
 8011360:	e7fe      	b.n	8011360 <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 8011362:	4b16      	ldr	r3, [pc, #88]	; (80113bc <vTaskDelayUntil+0x84>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	b143      	cbz	r3, 801137a <vTaskDelayUntil+0x42>
 8011368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801136c:	f383 8811 	msr	BASEPRI, r3
 8011370:	f3bf 8f6f 	isb	sy
 8011374:	f3bf 8f4f 	dsb	sy
 8011378:	e7fe      	b.n	8011378 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 801137a:	f7ff fec3 	bl	8011104 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 801137e:	4b10      	ldr	r3, [pc, #64]	; (80113c0 <vTaskDelayUntil+0x88>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8011380:	6804      	ldr	r4, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8011382:	681a      	ldr	r2, [r3, #0]
 8011384:	1863      	adds	r3, r4, r1
 8011386:	bf2c      	ite	cs
 8011388:	2101      	movcs	r1, #1
 801138a:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 801138c:	4294      	cmp	r4, r2
			*pxPreviousWakeTime = xTimeToWake;
 801138e:	6003      	str	r3, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8011390:	d90c      	bls.n	80113ac <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011392:	b961      	cbnz	r1, 80113ae <vTaskDelayUntil+0x76>
		xAlreadyYielded = xTaskResumeAll();
 8011394:	f7ff ff5c 	bl	8011250 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8011398:	b938      	cbnz	r0, 80113aa <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 801139a:	4b0a      	ldr	r3, [pc, #40]	; (80113c4 <vTaskDelayUntil+0x8c>)
 801139c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113a0:	601a      	str	r2, [r3, #0]
 80113a2:	f3bf 8f4f 	dsb	sy
 80113a6:	f3bf 8f6f 	isb	sy
	}
 80113aa:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80113ac:	b909      	cbnz	r1, 80113b2 <vTaskDelayUntil+0x7a>
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d2f0      	bcs.n	8011394 <vTaskDelayUntil+0x5c>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80113b2:	2100      	movs	r1, #0
 80113b4:	1a98      	subs	r0, r3, r2
 80113b6:	f7ff fdc1 	bl	8010f3c <prvAddCurrentTaskToDelayedList>
 80113ba:	e7eb      	b.n	8011394 <vTaskDelayUntil+0x5c>
 80113bc:	24000e98 	.word	0x24000e98
 80113c0:	24000f14 	.word	0x24000f14
 80113c4:	e000ed04 	.word	0xe000ed04

080113c8 <vTaskDelay>:
	{
 80113c8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80113ca:	b940      	cbnz	r0, 80113de <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80113cc:	4b0e      	ldr	r3, [pc, #56]	; (8011408 <vTaskDelay+0x40>)
 80113ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113d2:	601a      	str	r2, [r3, #0]
 80113d4:	f3bf 8f4f 	dsb	sy
 80113d8:	f3bf 8f6f 	isb	sy
	}
 80113dc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80113de:	4b0b      	ldr	r3, [pc, #44]	; (801140c <vTaskDelay+0x44>)
 80113e0:	6819      	ldr	r1, [r3, #0]
 80113e2:	b141      	cbz	r1, 80113f6 <vTaskDelay+0x2e>
 80113e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e8:	f383 8811 	msr	BASEPRI, r3
 80113ec:	f3bf 8f6f 	isb	sy
 80113f0:	f3bf 8f4f 	dsb	sy
 80113f4:	e7fe      	b.n	80113f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80113f6:	f7ff fe85 	bl	8011104 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80113fa:	f7ff fd9f 	bl	8010f3c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80113fe:	f7ff ff27 	bl	8011250 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8011402:	2800      	cmp	r0, #0
 8011404:	d0e2      	beq.n	80113cc <vTaskDelay+0x4>
 8011406:	e7e9      	b.n	80113dc <vTaskDelay+0x14>
 8011408:	e000ed04 	.word	0xe000ed04
 801140c:	24000e98 	.word	0x24000e98

08011410 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011410:	4b18      	ldr	r3, [pc, #96]	; (8011474 <vTaskSwitchContext+0x64>)
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	4b18      	ldr	r3, [pc, #96]	; (8011478 <vTaskSwitchContext+0x68>)
{
 8011416:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011418:	b112      	cbz	r2, 8011420 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 801141a:	2201      	movs	r2, #1
 801141c:	601a      	str	r2, [r3, #0]
}
 801141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8011420:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011422:	2714      	movs	r7, #20
 8011424:	4d15      	ldr	r5, [pc, #84]	; (801147c <vTaskSwitchContext+0x6c>)
 8011426:	4a16      	ldr	r2, [pc, #88]	; (8011480 <vTaskSwitchContext+0x70>)
 8011428:	682b      	ldr	r3, [r5, #0]
 801142a:	4616      	mov	r6, r2
 801142c:	fb07 f103 	mul.w	r1, r7, r3
 8011430:	5854      	ldr	r4, [r2, r1]
 8011432:	1850      	adds	r0, r2, r1
 8011434:	b18c      	cbz	r4, 801145a <vTaskSwitchContext+0x4a>
 8011436:	6844      	ldr	r4, [r0, #4]
 8011438:	3108      	adds	r1, #8
 801143a:	6864      	ldr	r4, [r4, #4]
 801143c:	440a      	add	r2, r1
 801143e:	4294      	cmp	r4, r2
 8011440:	6044      	str	r4, [r0, #4]
 8011442:	bf04      	itt	eq
 8011444:	6862      	ldreq	r2, [r4, #4]
 8011446:	6042      	streq	r2, [r0, #4]
 8011448:	2214      	movs	r2, #20
 801144a:	fb02 6203 	mla	r2, r2, r3, r6
 801144e:	6852      	ldr	r2, [r2, #4]
 8011450:	68d1      	ldr	r1, [r2, #12]
 8011452:	4a0c      	ldr	r2, [pc, #48]	; (8011484 <vTaskSwitchContext+0x74>)
 8011454:	6011      	str	r1, [r2, #0]
 8011456:	602b      	str	r3, [r5, #0]
}
 8011458:	e7e1      	b.n	801141e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801145a:	b943      	cbnz	r3, 801146e <vTaskSwitchContext+0x5e>
 801145c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011460:	f383 8811 	msr	BASEPRI, r3
 8011464:	f3bf 8f6f 	isb	sy
 8011468:	f3bf 8f4f 	dsb	sy
 801146c:	e7fe      	b.n	801146c <vTaskSwitchContext+0x5c>
 801146e:	3b01      	subs	r3, #1
 8011470:	e7dc      	b.n	801142c <vTaskSwitchContext+0x1c>
 8011472:	bf00      	nop
 8011474:	24000e98 	.word	0x24000e98
 8011478:	24000f18 	.word	0x24000f18
 801147c:	24000ea0 	.word	0x24000ea0
 8011480:	24000a2c 	.word	0x24000a2c
 8011484:	24000a20 	.word	0x24000a20

08011488 <vTaskPlaceOnEventList>:
{
 8011488:	b510      	push	{r4, lr}
 801148a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 801148c:	b940      	cbnz	r0, 80114a0 <vTaskPlaceOnEventList+0x18>
 801148e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011492:	f383 8811 	msr	BASEPRI, r3
 8011496:	f3bf 8f6f 	isb	sy
 801149a:	f3bf 8f4f 	dsb	sy
 801149e:	e7fe      	b.n	801149e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114a0:	4b05      	ldr	r3, [pc, #20]	; (80114b8 <vTaskPlaceOnEventList+0x30>)
 80114a2:	6819      	ldr	r1, [r3, #0]
 80114a4:	3118      	adds	r1, #24
 80114a6:	f7fe fe9f 	bl	80101e8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114aa:	4620      	mov	r0, r4
 80114ac:	2101      	movs	r1, #1
}
 80114ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114b2:	f7ff bd43 	b.w	8010f3c <prvAddCurrentTaskToDelayedList>
 80114b6:	bf00      	nop
 80114b8:	24000a20 	.word	0x24000a20

080114bc <vTaskPlaceOnEventListRestricted>:
	{
 80114bc:	b538      	push	{r3, r4, r5, lr}
 80114be:	460d      	mov	r5, r1
 80114c0:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80114c2:	b940      	cbnz	r0, 80114d6 <vTaskPlaceOnEventListRestricted+0x1a>
 80114c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c8:	f383 8811 	msr	BASEPRI, r3
 80114cc:	f3bf 8f6f 	isb	sy
 80114d0:	f3bf 8f4f 	dsb	sy
 80114d4:	e7fe      	b.n	80114d4 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114d6:	4b07      	ldr	r3, [pc, #28]	; (80114f4 <vTaskPlaceOnEventListRestricted+0x38>)
 80114d8:	6819      	ldr	r1, [r3, #0]
 80114da:	3118      	adds	r1, #24
 80114dc:	f7fe fe78 	bl	80101d0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80114e0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80114e2:	4621      	mov	r1, r4
 80114e4:	bf0c      	ite	eq
 80114e6:	4628      	moveq	r0, r5
 80114e8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80114ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80114f0:	f7ff bd24 	b.w	8010f3c <prvAddCurrentTaskToDelayedList>
 80114f4:	24000a20 	.word	0x24000a20

080114f8 <xTaskRemoveFromEventList>:
{
 80114f8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114fa:	68c3      	ldr	r3, [r0, #12]
 80114fc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80114fe:	b944      	cbnz	r4, 8011512 <xTaskRemoveFromEventList+0x1a>
 8011500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011504:	f383 8811 	msr	BASEPRI, r3
 8011508:	f3bf 8f6f 	isb	sy
 801150c:	f3bf 8f4f 	dsb	sy
 8011510:	e7fe      	b.n	8011510 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011512:	f104 0518 	add.w	r5, r4, #24
 8011516:	4628      	mov	r0, r5
 8011518:	f7fe fe7d 	bl	8010216 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801151c:	4b11      	ldr	r3, [pc, #68]	; (8011564 <xTaskRemoveFromEventList+0x6c>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	b9d3      	cbnz	r3, 8011558 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011522:	1d25      	adds	r5, r4, #4
 8011524:	4628      	mov	r0, r5
 8011526:	f7fe fe76 	bl	8010216 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801152a:	4a0f      	ldr	r2, [pc, #60]	; (8011568 <xTaskRemoveFromEventList+0x70>)
 801152c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801152e:	6811      	ldr	r1, [r2, #0]
 8011530:	428b      	cmp	r3, r1
 8011532:	d900      	bls.n	8011536 <xTaskRemoveFromEventList+0x3e>
 8011534:	6013      	str	r3, [r2, #0]
 8011536:	4a0d      	ldr	r2, [pc, #52]	; (801156c <xTaskRemoveFromEventList+0x74>)
 8011538:	2014      	movs	r0, #20
 801153a:	4629      	mov	r1, r5
 801153c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011540:	f7fe fe46 	bl	80101d0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011544:	4b0a      	ldr	r3, [pc, #40]	; (8011570 <xTaskRemoveFromEventList+0x78>)
 8011546:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801154c:	429a      	cmp	r2, r3
 801154e:	d906      	bls.n	801155e <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 8011550:	2001      	movs	r0, #1
 8011552:	4b08      	ldr	r3, [pc, #32]	; (8011574 <xTaskRemoveFromEventList+0x7c>)
 8011554:	6018      	str	r0, [r3, #0]
}
 8011556:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011558:	4629      	mov	r1, r5
 801155a:	4807      	ldr	r0, [pc, #28]	; (8011578 <xTaskRemoveFromEventList+0x80>)
 801155c:	e7f0      	b.n	8011540 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 801155e:	2000      	movs	r0, #0
	return xReturn;
 8011560:	e7f9      	b.n	8011556 <xTaskRemoveFromEventList+0x5e>
 8011562:	bf00      	nop
 8011564:	24000e98 	.word	0x24000e98
 8011568:	24000ea0 	.word	0x24000ea0
 801156c:	24000a2c 	.word	0x24000a2c
 8011570:	24000a20 	.word	0x24000a20
 8011574:	24000f18 	.word	0x24000f18
 8011578:	24000ed4 	.word	0x24000ed4

0801157c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801157c:	4b03      	ldr	r3, [pc, #12]	; (801158c <vTaskInternalSetTimeOutState+0x10>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011582:	4b03      	ldr	r3, [pc, #12]	; (8011590 <vTaskInternalSetTimeOutState+0x14>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	6043      	str	r3, [r0, #4]
}
 8011588:	4770      	bx	lr
 801158a:	bf00      	nop
 801158c:	24000ed0 	.word	0x24000ed0
 8011590:	24000f14 	.word	0x24000f14

08011594 <xTaskCheckForTimeOut>:
{
 8011594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011596:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8011598:	4605      	mov	r5, r0
 801159a:	b940      	cbnz	r0, 80115ae <xTaskCheckForTimeOut+0x1a>
 801159c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a0:	f383 8811 	msr	BASEPRI, r3
 80115a4:	f3bf 8f6f 	isb	sy
 80115a8:	f3bf 8f4f 	dsb	sy
 80115ac:	e7fe      	b.n	80115ac <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80115ae:	b941      	cbnz	r1, 80115c2 <xTaskCheckForTimeOut+0x2e>
 80115b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b4:	f383 8811 	msr	BASEPRI, r3
 80115b8:	f3bf 8f6f 	isb	sy
 80115bc:	f3bf 8f4f 	dsb	sy
 80115c0:	e7fe      	b.n	80115c0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80115c2:	f000 fb7f 	bl	8011cc4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80115c6:	4b0f      	ldr	r3, [pc, #60]	; (8011604 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80115c8:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 80115ca:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80115cc:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80115ce:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 80115d0:	1c5e      	adds	r6, r3, #1
 80115d2:	d00d      	beq.n	80115f0 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80115d4:	4e0c      	ldr	r6, [pc, #48]	; (8011608 <xTaskCheckForTimeOut+0x74>)
 80115d6:	682f      	ldr	r7, [r5, #0]
 80115d8:	6836      	ldr	r6, [r6, #0]
 80115da:	42b7      	cmp	r7, r6
 80115dc:	d001      	beq.n	80115e2 <xTaskCheckForTimeOut+0x4e>
 80115de:	4288      	cmp	r0, r1
 80115e0:	d90d      	bls.n	80115fe <xTaskCheckForTimeOut+0x6a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80115e2:	4293      	cmp	r3, r2
 80115e4:	d909      	bls.n	80115fa <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80115e6:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 80115e8:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80115ea:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80115ec:	f7ff ffc6 	bl	801157c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80115f0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80115f2:	f000 fb89 	bl	8011d08 <vPortExitCritical>
}
 80115f6:	4620      	mov	r0, r4
 80115f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 80115fa:	2300      	movs	r3, #0
 80115fc:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80115fe:	2401      	movs	r4, #1
 8011600:	e7f7      	b.n	80115f2 <xTaskCheckForTimeOut+0x5e>
 8011602:	bf00      	nop
 8011604:	24000f14 	.word	0x24000f14
 8011608:	24000ed0 	.word	0x24000ed0

0801160c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801160c:	4b01      	ldr	r3, [pc, #4]	; (8011614 <vTaskMissedYield+0x8>)
 801160e:	2201      	movs	r2, #1
 8011610:	601a      	str	r2, [r3, #0]
}
 8011612:	4770      	bx	lr
 8011614:	24000f18 	.word	0x24000f18

08011618 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8011618:	4b01      	ldr	r3, [pc, #4]	; (8011620 <xTaskGetCurrentTaskHandle+0x8>)
 801161a:	6818      	ldr	r0, [r3, #0]
	}
 801161c:	4770      	bx	lr
 801161e:	bf00      	nop
 8011620:	24000a20 	.word	0x24000a20

08011624 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8011624:	4b05      	ldr	r3, [pc, #20]	; (801163c <xTaskGetSchedulerState+0x18>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	b133      	cbz	r3, 8011638 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801162a:	4b05      	ldr	r3, [pc, #20]	; (8011640 <xTaskGetSchedulerState+0x1c>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8011630:	bf0c      	ite	eq
 8011632:	2002      	moveq	r0, #2
 8011634:	2000      	movne	r0, #0
 8011636:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011638:	2001      	movs	r0, #1
	}
 801163a:	4770      	bx	lr
 801163c:	24000ee8 	.word	0x24000ee8
 8011640:	24000e98 	.word	0x24000e98

08011644 <xTaskPriorityInherit>:
	{
 8011644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8011646:	4604      	mov	r4, r0
 8011648:	b340      	cbz	r0, 801169c <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801164a:	4a1b      	ldr	r2, [pc, #108]	; (80116b8 <xTaskPriorityInherit+0x74>)
 801164c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801164e:	6811      	ldr	r1, [r2, #0]
 8011650:	4616      	mov	r6, r2
 8011652:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8011654:	428b      	cmp	r3, r1
 8011656:	d226      	bcs.n	80116a6 <xTaskPriorityInherit+0x62>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011658:	6982      	ldr	r2, [r0, #24]
 801165a:	2a00      	cmp	r2, #0
 801165c:	db04      	blt.n	8011668 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801165e:	6832      	ldr	r2, [r6, #0]
 8011660:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011662:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011666:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011668:	2214      	movs	r2, #20
 801166a:	4d14      	ldr	r5, [pc, #80]	; (80116bc <xTaskPriorityInherit+0x78>)
 801166c:	fb02 5303 	mla	r3, r2, r3, r5
 8011670:	6962      	ldr	r2, [r4, #20]
 8011672:	429a      	cmp	r2, r3
 8011674:	d113      	bne.n	801169e <xTaskPriorityInherit+0x5a>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011676:	1d27      	adds	r7, r4, #4
 8011678:	4638      	mov	r0, r7
 801167a:	f7fe fdcc 	bl	8010216 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801167e:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011680:	4a0f      	ldr	r2, [pc, #60]	; (80116c0 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011684:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011686:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011688:	428b      	cmp	r3, r1
 801168a:	d900      	bls.n	801168e <xTaskPriorityInherit+0x4a>
 801168c:	6013      	str	r3, [r2, #0]
 801168e:	2014      	movs	r0, #20
 8011690:	4639      	mov	r1, r7
 8011692:	fb00 5003 	mla	r0, r0, r3, r5
 8011696:	f7fe fd9b 	bl	80101d0 <vListInsertEnd>
				xReturn = pdTRUE;
 801169a:	2001      	movs	r0, #1
	}
 801169c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801169e:	6833      	ldr	r3, [r6, #0]
 80116a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80116a4:	e7f9      	b.n	801169a <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80116a6:	6813      	ldr	r3, [r2, #0]
 80116a8:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80116aa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80116ac:	42a0      	cmp	r0, r4
 80116ae:	bf2c      	ite	cs
 80116b0:	2000      	movcs	r0, #0
 80116b2:	2001      	movcc	r0, #1
 80116b4:	e7f2      	b.n	801169c <xTaskPriorityInherit+0x58>
 80116b6:	bf00      	nop
 80116b8:	24000a20 	.word	0x24000a20
 80116bc:	24000a2c 	.word	0x24000a2c
 80116c0:	24000ea0 	.word	0x24000ea0

080116c4 <xTaskPriorityDisinherit>:
	{
 80116c4:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80116c6:	b908      	cbnz	r0, 80116cc <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 80116c8:	2000      	movs	r0, #0
	}
 80116ca:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80116cc:	4b1b      	ldr	r3, [pc, #108]	; (801173c <xTaskPriorityDisinherit+0x78>)
 80116ce:	681c      	ldr	r4, [r3, #0]
 80116d0:	4284      	cmp	r4, r0
 80116d2:	d008      	beq.n	80116e6 <xTaskPriorityDisinherit+0x22>
 80116d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d8:	f383 8811 	msr	BASEPRI, r3
 80116dc:	f3bf 8f6f 	isb	sy
 80116e0:	f3bf 8f4f 	dsb	sy
 80116e4:	e7fe      	b.n	80116e4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80116e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80116e8:	b943      	cbnz	r3, 80116fc <xTaskPriorityDisinherit+0x38>
 80116ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ee:	f383 8811 	msr	BASEPRI, r3
 80116f2:	f3bf 8f6f 	isb	sy
 80116f6:	f3bf 8f4f 	dsb	sy
 80116fa:	e7fe      	b.n	80116fa <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80116fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80116fe:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011700:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			( pxTCB->uxMutexesHeld )--;
 8011702:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011704:	4291      	cmp	r1, r2
 8011706:	d0df      	beq.n	80116c8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011708:	2b00      	cmp	r3, #0
 801170a:	d1dd      	bne.n	80116c8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801170c:	1d25      	adds	r5, r4, #4
 801170e:	4628      	mov	r0, r5
 8011710:	f7fe fd81 	bl	8010216 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011714:	6ca3      	ldr	r3, [r4, #72]	; 0x48
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011716:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801171a:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801171c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801171e:	4a08      	ldr	r2, [pc, #32]	; (8011740 <xTaskPriorityDisinherit+0x7c>)
 8011720:	6811      	ldr	r1, [r2, #0]
 8011722:	428b      	cmp	r3, r1
 8011724:	d900      	bls.n	8011728 <xTaskPriorityDisinherit+0x64>
 8011726:	6013      	str	r3, [r2, #0]
 8011728:	4a06      	ldr	r2, [pc, #24]	; (8011744 <xTaskPriorityDisinherit+0x80>)
 801172a:	2014      	movs	r0, #20
 801172c:	4629      	mov	r1, r5
 801172e:	fb00 2003 	mla	r0, r0, r3, r2
 8011732:	f7fe fd4d 	bl	80101d0 <vListInsertEnd>
					xReturn = pdTRUE;
 8011736:	2001      	movs	r0, #1
		return xReturn;
 8011738:	e7c7      	b.n	80116ca <xTaskPriorityDisinherit+0x6>
 801173a:	bf00      	nop
 801173c:	24000a20 	.word	0x24000a20
 8011740:	24000ea0 	.word	0x24000ea0
 8011744:	24000a2c 	.word	0x24000a2c

08011748 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8011748:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 801174a:	4604      	mov	r4, r0
 801174c:	2800      	cmp	r0, #0
 801174e:	d042      	beq.n	80117d6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8011750:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8011752:	b942      	cbnz	r2, 8011766 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8011754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011758:	f383 8811 	msr	BASEPRI, r3
 801175c:	f3bf 8f6f 	isb	sy
 8011760:	f3bf 8f4f 	dsb	sy
 8011764:	e7fe      	b.n	8011764 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8011766:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8011768:	4299      	cmp	r1, r3
 801176a:	bf38      	it	cc
 801176c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 801176e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011770:	428b      	cmp	r3, r1
 8011772:	d030      	beq.n	80117d6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011774:	2a01      	cmp	r2, #1
 8011776:	d12e      	bne.n	80117d6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 8011778:	4a17      	ldr	r2, [pc, #92]	; (80117d8 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 801177a:	6812      	ldr	r2, [r2, #0]
 801177c:	4282      	cmp	r2, r0
 801177e:	d108      	bne.n	8011792 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8011780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011784:	f383 8811 	msr	BASEPRI, r3
 8011788:	f3bf 8f6f 	isb	sy
 801178c:	f3bf 8f4f 	dsb	sy
 8011790:	e7fe      	b.n	8011790 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011792:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011794:	4d11      	ldr	r5, [pc, #68]	; (80117dc <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011796:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011798:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 801179c:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801179e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117a2:	bfa8      	it	ge
 80117a4:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80117a8:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117aa:	bfa8      	it	ge
 80117ac:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d111      	bne.n	80117d6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117b2:	1d06      	adds	r6, r0, #4
 80117b4:	4630      	mov	r0, r6
 80117b6:	f7fe fd2e 	bl	8010216 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80117ba:	4a09      	ldr	r2, [pc, #36]	; (80117e0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80117bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80117be:	6811      	ldr	r1, [r2, #0]
 80117c0:	428b      	cmp	r3, r1
 80117c2:	d900      	bls.n	80117c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80117c4:	6013      	str	r3, [r2, #0]
 80117c6:	2014      	movs	r0, #20
 80117c8:	4631      	mov	r1, r6
 80117ca:	fb00 5003 	mla	r0, r0, r3, r5
	}
 80117ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80117d2:	f7fe bcfd 	b.w	80101d0 <vListInsertEnd>
	}
 80117d6:	bd70      	pop	{r4, r5, r6, pc}
 80117d8:	24000a20 	.word	0x24000a20
 80117dc:	24000a2c 	.word	0x24000a2c
 80117e0:	24000ea0 	.word	0x24000ea0

080117e4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80117e4:	4b04      	ldr	r3, [pc, #16]	; (80117f8 <pvTaskIncrementMutexHeldCount+0x14>)
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	b11a      	cbz	r2, 80117f2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80117ea:	6819      	ldr	r1, [r3, #0]
 80117ec:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80117ee:	3201      	adds	r2, #1
 80117f0:	64ca      	str	r2, [r1, #76]	; 0x4c
		return pxCurrentTCB;
 80117f2:	6818      	ldr	r0, [r3, #0]
	}
 80117f4:	4770      	bx	lr
 80117f6:	bf00      	nop
 80117f8:	24000a20 	.word	0x24000a20

080117fc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80117fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80117fe:	4c11      	ldr	r4, [pc, #68]	; (8011844 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8011800:	f000 fa60 	bl	8011cc4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8011804:	6825      	ldr	r5, [r4, #0]
 8011806:	b9bd      	cbnz	r5, 8011838 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8011808:	4f0f      	ldr	r7, [pc, #60]	; (8011848 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 801180a:	4e10      	ldr	r6, [pc, #64]	; (801184c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 801180c:	4638      	mov	r0, r7
 801180e:	f7fe fcd1 	bl	80101b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011812:	4630      	mov	r0, r6
 8011814:	f7fe fcce 	bl	80101b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011818:	4b0d      	ldr	r3, [pc, #52]	; (8011850 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801181a:	4a0e      	ldr	r2, [pc, #56]	; (8011854 <prvCheckForValidListAndQueue+0x58>)
 801181c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 801181e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011820:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8011822:	4b0d      	ldr	r3, [pc, #52]	; (8011858 <prvCheckForValidListAndQueue+0x5c>)
 8011824:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011826:	9500      	str	r5, [sp, #0]
 8011828:	4b0c      	ldr	r3, [pc, #48]	; (801185c <prvCheckForValidListAndQueue+0x60>)
 801182a:	f7fe fdd1 	bl	80103d0 <xQueueGenericCreateStatic>
 801182e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011830:	b110      	cbz	r0, 8011838 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011832:	490b      	ldr	r1, [pc, #44]	; (8011860 <prvCheckForValidListAndQueue+0x64>)
 8011834:	f7ff f9f8 	bl	8010c28 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8011838:	b003      	add	sp, #12
 801183a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 801183e:	f000 ba63 	b.w	8011d08 <vPortExitCritical>
 8011842:	bf00      	nop
 8011844:	24001038 	.word	0x24001038
 8011848:	24000fc4 	.word	0x24000fc4
 801184c:	24000fd8 	.word	0x24000fd8
 8011850:	24000f1c 	.word	0x24000f1c
 8011854:	24000f24 	.word	0x24000f24
 8011858:	24000f20 	.word	0x24000f20
 801185c:	24000ff0 	.word	0x24000ff0
 8011860:	08014c14 	.word	0x08014c14

08011864 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8011864:	4291      	cmp	r1, r2
{
 8011866:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011868:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801186a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 801186c:	d80a      	bhi.n	8011884 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801186e:	1ad2      	subs	r2, r2, r3
 8011870:	6983      	ldr	r3, [r0, #24]
 8011872:	429a      	cmp	r2, r3
 8011874:	d20d      	bcs.n	8011892 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011876:	1d01      	adds	r1, r0, #4
 8011878:	4b07      	ldr	r3, [pc, #28]	; (8011898 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801187a:	6818      	ldr	r0, [r3, #0]
 801187c:	f7fe fcb4 	bl	80101e8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8011880:	2000      	movs	r0, #0
}
 8011882:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011884:	429a      	cmp	r2, r3
 8011886:	d201      	bcs.n	801188c <prvInsertTimerInActiveList+0x28>
 8011888:	4299      	cmp	r1, r3
 801188a:	d202      	bcs.n	8011892 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801188c:	1d01      	adds	r1, r0, #4
 801188e:	4b03      	ldr	r3, [pc, #12]	; (801189c <prvInsertTimerInActiveList+0x38>)
 8011890:	e7f3      	b.n	801187a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8011892:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8011894:	e7f5      	b.n	8011882 <prvInsertTimerInActiveList+0x1e>
 8011896:	bf00      	nop
 8011898:	24000f20 	.word	0x24000f20
 801189c:	24000f1c 	.word	0x24000f1c

080118a0 <xTimerCreateTimerTask>:
{
 80118a0:	b510      	push	{r4, lr}
 80118a2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80118a4:	f7ff ffaa 	bl	80117fc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80118a8:	4b12      	ldr	r3, [pc, #72]	; (80118f4 <xTimerCreateTimerTask+0x54>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	b1b3      	cbz	r3, 80118dc <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80118ae:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80118b0:	aa07      	add	r2, sp, #28
 80118b2:	a906      	add	r1, sp, #24
 80118b4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80118b6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80118ba:	f7fe fc6f 	bl	801019c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80118be:	9b05      	ldr	r3, [sp, #20]
 80118c0:	9a07      	ldr	r2, [sp, #28]
 80118c2:	9302      	str	r3, [sp, #8]
 80118c4:	9b06      	ldr	r3, [sp, #24]
 80118c6:	490c      	ldr	r1, [pc, #48]	; (80118f8 <xTimerCreateTimerTask+0x58>)
 80118c8:	9301      	str	r3, [sp, #4]
 80118ca:	2302      	movs	r3, #2
 80118cc:	480b      	ldr	r0, [pc, #44]	; (80118fc <xTimerCreateTimerTask+0x5c>)
 80118ce:	9300      	str	r3, [sp, #0]
 80118d0:	4623      	mov	r3, r4
 80118d2:	f7ff fb6d 	bl	8010fb0 <xTaskCreateStatic>
 80118d6:	4b0a      	ldr	r3, [pc, #40]	; (8011900 <xTimerCreateTimerTask+0x60>)
 80118d8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80118da:	b940      	cbnz	r0, 80118ee <xTimerCreateTimerTask+0x4e>
 80118dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e0:	f383 8811 	msr	BASEPRI, r3
 80118e4:	f3bf 8f6f 	isb	sy
 80118e8:	f3bf 8f4f 	dsb	sy
 80118ec:	e7fe      	b.n	80118ec <xTimerCreateTimerTask+0x4c>
}
 80118ee:	2001      	movs	r0, #1
 80118f0:	b008      	add	sp, #32
 80118f2:	bd10      	pop	{r4, pc}
 80118f4:	24001038 	.word	0x24001038
 80118f8:	08014c19 	.word	0x08014c19
 80118fc:	080119dd 	.word	0x080119dd
 8011900:	2400103c 	.word	0x2400103c

08011904 <xTimerGenericCommand>:
{
 8011904:	b530      	push	{r4, r5, lr}
 8011906:	4615      	mov	r5, r2
 8011908:	b085      	sub	sp, #20
 801190a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 801190c:	4603      	mov	r3, r0
 801190e:	b940      	cbnz	r0, 8011922 <xTimerGenericCommand+0x1e>
 8011910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011914:	f383 8811 	msr	BASEPRI, r3
 8011918:	f3bf 8f6f 	isb	sy
 801191c:	f3bf 8f4f 	dsb	sy
 8011920:	e7fe      	b.n	8011920 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8011922:	4c0d      	ldr	r4, [pc, #52]	; (8011958 <xTimerGenericCommand+0x54>)
 8011924:	6820      	ldr	r0, [r4, #0]
 8011926:	b178      	cbz	r0, 8011948 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011928:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801192a:	9302      	str	r3, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801192c:	e9cd 1500 	strd	r1, r5, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011930:	dc0c      	bgt.n	801194c <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011932:	f7ff fe77 	bl	8011624 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011936:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011938:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801193a:	4669      	mov	r1, sp
 801193c:	6820      	ldr	r0, [r4, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801193e:	bf0c      	ite	eq
 8011940:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011942:	461a      	movne	r2, r3
 8011944:	f7fe fdf2 	bl	801052c <xQueueGenericSend>
}
 8011948:	b005      	add	sp, #20
 801194a:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801194c:	2300      	movs	r3, #0
 801194e:	4669      	mov	r1, sp
 8011950:	f7fe fee3 	bl	801071a <xQueueGenericSendFromISR>
 8011954:	e7f8      	b.n	8011948 <xTimerGenericCommand+0x44>
 8011956:	bf00      	nop
 8011958:	24001038 	.word	0x24001038

0801195c <prvSwitchTimerLists>:
{
 801195c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011960:	4d1c      	ldr	r5, [pc, #112]	; (80119d4 <prvSwitchTimerLists+0x78>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011962:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011966:	682b      	ldr	r3, [r5, #0]
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	b932      	cbnz	r2, 801197a <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 801196c:	4a1a      	ldr	r2, [pc, #104]	; (80119d8 <prvSwitchTimerLists+0x7c>)
 801196e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011970:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8011972:	6029      	str	r1, [r5, #0]
}
 8011974:	b002      	add	sp, #8
 8011976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801197a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801197c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801197e:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011980:	1d27      	adds	r7, r4, #4
 8011982:	4638      	mov	r0, r7
 8011984:	f7fe fc47 	bl	8010216 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011988:	6a23      	ldr	r3, [r4, #32]
 801198a:	4620      	mov	r0, r4
 801198c:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801198e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8011992:	075b      	lsls	r3, r3, #29
 8011994:	d5e7      	bpl.n	8011966 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011996:	69a3      	ldr	r3, [r4, #24]
 8011998:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 801199a:	429e      	cmp	r6, r3
 801199c:	d206      	bcs.n	80119ac <prvSwitchTimerLists+0x50>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801199e:	6063      	str	r3, [r4, #4]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80119a0:	4639      	mov	r1, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80119a2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80119a4:	6828      	ldr	r0, [r5, #0]
 80119a6:	f7fe fc1f 	bl	80101e8 <vListInsert>
 80119aa:	e7dc      	b.n	8011966 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80119ac:	2300      	movs	r3, #0
 80119ae:	f8cd 8000 	str.w	r8, [sp]
 80119b2:	4632      	mov	r2, r6
 80119b4:	4620      	mov	r0, r4
 80119b6:	4619      	mov	r1, r3
 80119b8:	f7ff ffa4 	bl	8011904 <xTimerGenericCommand>
				configASSERT( xResult );
 80119bc:	2800      	cmp	r0, #0
 80119be:	d1d2      	bne.n	8011966 <prvSwitchTimerLists+0xa>
 80119c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c4:	f383 8811 	msr	BASEPRI, r3
 80119c8:	f3bf 8f6f 	isb	sy
 80119cc:	f3bf 8f4f 	dsb	sy
 80119d0:	e7fe      	b.n	80119d0 <prvSwitchTimerLists+0x74>
 80119d2:	bf00      	nop
 80119d4:	24000f1c 	.word	0x24000f1c
 80119d8:	24000f20 	.word	0x24000f20

080119dc <prvTimerTask>:
{
 80119dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80119e0:	4d81      	ldr	r5, [pc, #516]	; (8011be8 <prvTimerTask+0x20c>)
{
 80119e2:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 80119e4:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8011bf4 <prvTimerTask+0x218>
 80119e8:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80119ea:	682a      	ldr	r2, [r5, #0]
 80119ec:	6813      	ldr	r3, [r2, #0]
 80119ee:	b353      	cbz	r3, 8011a46 <prvTimerTask+0x6a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80119f0:	68d3      	ldr	r3, [r2, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80119f2:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80119f4:	f8d3 9000 	ldr.w	r9, [r3]
	if( xTimeNow < xLastTime )
 80119f8:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011bf8 <prvTimerTask+0x21c>
	vTaskSuspendAll();
 80119fc:	f7ff fb82 	bl	8011104 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8011a00:	f7ff fb88 	bl	8011114 <xTaskGetTickCount>
 8011a04:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8011a06:	f8db 3000 	ldr.w	r3, [fp]
 8011a0a:	465e      	mov	r6, fp
 8011a0c:	4298      	cmp	r0, r3
 8011a0e:	d31d      	bcc.n	8011a4c <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 8011a10:	f8cb 0000 	str.w	r0, [fp]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011a14:	b32c      	cbz	r4, 8011a62 <prvTimerTask+0x86>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011a16:	4b75      	ldr	r3, [pc, #468]	; (8011bec <prvTimerTask+0x210>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	681a      	ldr	r2, [r3, #0]
 8011a1c:	fab2 f282 	clz	r2, r2
 8011a20:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011a22:	4b73      	ldr	r3, [pc, #460]	; (8011bf0 <prvTimerTask+0x214>)
 8011a24:	eba9 010a 	sub.w	r1, r9, sl
 8011a28:	6818      	ldr	r0, [r3, #0]
 8011a2a:	f7ff f93a 	bl	8010ca2 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011a2e:	f7ff fc0f 	bl	8011250 <xTaskResumeAll>
 8011a32:	b988      	cbnz	r0, 8011a58 <prvTimerTask+0x7c>
					portYIELD_WITHIN_API();
 8011a34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011a38:	f8c8 3000 	str.w	r3, [r8]
 8011a3c:	f3bf 8f4f 	dsb	sy
 8011a40:	f3bf 8f6f 	isb	sy
 8011a44:	e008      	b.n	8011a58 <prvTimerTask+0x7c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011a46:	2401      	movs	r4, #1
		xNextExpireTime = ( TickType_t ) 0U;
 8011a48:	4699      	mov	r9, r3
 8011a4a:	e7d5      	b.n	80119f8 <prvTimerTask+0x1c>
		prvSwitchTimerLists();
 8011a4c:	f7ff ff86 	bl	801195c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8011a50:	f8cb a000 	str.w	sl, [fp]
			( void ) xTaskResumeAll();
 8011a54:	f7ff fbfc 	bl	8011250 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011a58:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8011bf0 <prvTimerTask+0x214>
 8011a5c:	f04f 0a00 	mov.w	sl, #0
 8011a60:	e07d      	b.n	8011b5e <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011a62:	4581      	cmp	r9, r0
 8011a64:	d830      	bhi.n	8011ac8 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 8011a66:	f7ff fbf3 	bl	8011250 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	68db      	ldr	r3, [r3, #12]
 8011a6e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011a72:	f10b 0004 	add.w	r0, fp, #4
 8011a76:	f7fe fbce 	bl	8010216 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011a7a:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
 8011a7e:	0758      	lsls	r0, r3, #29
 8011a80:	d519      	bpl.n	8011ab6 <prvTimerTask+0xda>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011a82:	f8db 1018 	ldr.w	r1, [fp, #24]
 8011a86:	464b      	mov	r3, r9
 8011a88:	4652      	mov	r2, sl
 8011a8a:	4658      	mov	r0, fp
 8011a8c:	4449      	add	r1, r9
 8011a8e:	f7ff fee9 	bl	8011864 <prvInsertTimerInActiveList>
 8011a92:	b1a0      	cbz	r0, 8011abe <prvTimerTask+0xe2>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011a94:	9400      	str	r4, [sp, #0]
 8011a96:	4623      	mov	r3, r4
 8011a98:	464a      	mov	r2, r9
 8011a9a:	4621      	mov	r1, r4
 8011a9c:	4658      	mov	r0, fp
 8011a9e:	f7ff ff31 	bl	8011904 <xTimerGenericCommand>
			configASSERT( xResult );
 8011aa2:	b960      	cbnz	r0, 8011abe <prvTimerTask+0xe2>
 8011aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa8:	f383 8811 	msr	BASEPRI, r3
 8011aac:	f3bf 8f6f 	isb	sy
 8011ab0:	f3bf 8f4f 	dsb	sy
 8011ab4:	e7fe      	b.n	8011ab4 <prvTimerTask+0xd8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ab6:	f023 0301 	bic.w	r3, r3, #1
 8011aba:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011abe:	f8db 3020 	ldr.w	r3, [fp, #32]
 8011ac2:	4658      	mov	r0, fp
 8011ac4:	4798      	blx	r3
 8011ac6:	e7c7      	b.n	8011a58 <prvTimerTask+0x7c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011ac8:	4622      	mov	r2, r4
 8011aca:	e7aa      	b.n	8011a22 <prvTimerTask+0x46>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011acc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011ad0:	465a      	mov	r2, fp
 8011ad2:	69a1      	ldr	r1, [r4, #24]
 8011ad4:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011ad6:	f043 0301 	orr.w	r3, r3, #1
 8011ada:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011ade:	9b03      	ldr	r3, [sp, #12]
 8011ae0:	4419      	add	r1, r3
 8011ae2:	f7ff febf 	bl	8011864 <prvInsertTimerInActiveList>
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	d039      	beq.n	8011b5e <prvTimerTask+0x182>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011aea:	6a23      	ldr	r3, [r4, #32]
 8011aec:	4620      	mov	r0, r4
 8011aee:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011af0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8011af4:	0759      	lsls	r1, r3, #29
 8011af6:	d532      	bpl.n	8011b5e <prvTimerTask+0x182>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011af8:	69a2      	ldr	r2, [r4, #24]
 8011afa:	2300      	movs	r3, #0
 8011afc:	9903      	ldr	r1, [sp, #12]
 8011afe:	4620      	mov	r0, r4
 8011b00:	f8cd a000 	str.w	sl, [sp]
 8011b04:	440a      	add	r2, r1
 8011b06:	4619      	mov	r1, r3
 8011b08:	f7ff fefc 	bl	8011904 <xTimerGenericCommand>
							configASSERT( xResult );
 8011b0c:	bb38      	cbnz	r0, 8011b5e <prvTimerTask+0x182>
 8011b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b12:	f383 8811 	msr	BASEPRI, r3
 8011b16:	f3bf 8f6f 	isb	sy
 8011b1a:	f3bf 8f4f 	dsb	sy
 8011b1e:	e7fe      	b.n	8011b1e <prvTimerTask+0x142>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b20:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b24:	f023 0301 	bic.w	r3, r3, #1
 8011b28:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8011b2c:	e017      	b.n	8011b5e <prvTimerTask+0x182>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011b2e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011b32:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011b34:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011b38:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011b3a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011b3e:	b941      	cbnz	r1, 8011b52 <prvTimerTask+0x176>
 8011b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b44:	f383 8811 	msr	BASEPRI, r3
 8011b48:	f3bf 8f6f 	isb	sy
 8011b4c:	f3bf 8f4f 	dsb	sy
 8011b50:	e7fe      	b.n	8011b50 <prvTimerTask+0x174>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011b52:	465b      	mov	r3, fp
 8011b54:	465a      	mov	r2, fp
 8011b56:	4459      	add	r1, fp
 8011b58:	4620      	mov	r0, r4
 8011b5a:	f7ff fe83 	bl	8011864 <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011b5e:	2200      	movs	r2, #0
 8011b60:	a902      	add	r1, sp, #8
 8011b62:	f8d9 0000 	ldr.w	r0, [r9]
 8011b66:	f7fe fe8d 	bl	8010884 <xQueueReceive>
 8011b6a:	2800      	cmp	r0, #0
 8011b6c:	f43f af3d 	beq.w	80119ea <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011b70:	9b02      	ldr	r3, [sp, #8]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	da03      	bge.n	8011b7e <prvTimerTask+0x1a2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011b76:	9b03      	ldr	r3, [sp, #12]
 8011b78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b7c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011b7e:	9b02      	ldr	r3, [sp, #8]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	dbec      	blt.n	8011b5e <prvTimerTask+0x182>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011b84:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011b86:	6963      	ldr	r3, [r4, #20]
 8011b88:	b113      	cbz	r3, 8011b90 <prvTimerTask+0x1b4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011b8a:	1d20      	adds	r0, r4, #4
 8011b8c:	f7fe fb43 	bl	8010216 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8011b90:	f7ff fac0 	bl	8011114 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8011b94:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8011b96:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8011b98:	4298      	cmp	r0, r3
 8011b9a:	d201      	bcs.n	8011ba0 <prvTimerTask+0x1c4>
		prvSwitchTimerLists();
 8011b9c:	f7ff fede 	bl	801195c <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 8011ba0:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8011ba2:	f8c6 b000 	str.w	fp, [r6]
			switch( xMessage.xMessageID )
 8011ba6:	2b09      	cmp	r3, #9
 8011ba8:	d8d9      	bhi.n	8011b5e <prvTimerTask+0x182>
 8011baa:	a201      	add	r2, pc, #4	; (adr r2, 8011bb0 <prvTimerTask+0x1d4>)
 8011bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bb0:	08011acd 	.word	0x08011acd
 8011bb4:	08011acd 	.word	0x08011acd
 8011bb8:	08011acd 	.word	0x08011acd
 8011bbc:	08011b21 	.word	0x08011b21
 8011bc0:	08011b2f 	.word	0x08011b2f
 8011bc4:	08011bd9 	.word	0x08011bd9
 8011bc8:	08011acd 	.word	0x08011acd
 8011bcc:	08011acd 	.word	0x08011acd
 8011bd0:	08011b21 	.word	0x08011b21
 8011bd4:	08011b2f 	.word	0x08011b2f
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011bd8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8011bdc:	079a      	lsls	r2, r3, #30
 8011bde:	d4a1      	bmi.n	8011b24 <prvTimerTask+0x148>
							vPortFree( pxTimer );
 8011be0:	4620      	mov	r0, r4
 8011be2:	f000 fa69 	bl	80120b8 <vPortFree>
 8011be6:	e7ba      	b.n	8011b5e <prvTimerTask+0x182>
 8011be8:	24000f1c 	.word	0x24000f1c
 8011bec:	24000f20 	.word	0x24000f20
 8011bf0:	24001038 	.word	0x24001038
 8011bf4:	e000ed04 	.word	0xe000ed04
 8011bf8:	24000fec 	.word	0x24000fec

08011bfc <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 8011bfc:	2300      	movs	r3, #0
{
 8011bfe:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8011c00:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011c02:	4b0d      	ldr	r3, [pc, #52]	; (8011c38 <prvTaskExitError+0x3c>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	3301      	adds	r3, #1
 8011c08:	d008      	beq.n	8011c1c <prvTaskExitError+0x20>
 8011c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c0e:	f383 8811 	msr	BASEPRI, r3
 8011c12:	f3bf 8f6f 	isb	sy
 8011c16:	f3bf 8f4f 	dsb	sy
 8011c1a:	e7fe      	b.n	8011c1a <prvTaskExitError+0x1e>
 8011c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c20:	f383 8811 	msr	BASEPRI, r3
 8011c24:	f3bf 8f6f 	isb	sy
 8011c28:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011c2c:	9b01      	ldr	r3, [sp, #4]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d0fc      	beq.n	8011c2c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011c32:	b002      	add	sp, #8
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop
 8011c38:	24000124 	.word	0x24000124

08011c3c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011c3c:	4808      	ldr	r0, [pc, #32]	; (8011c60 <prvPortStartFirstTask+0x24>)
 8011c3e:	6800      	ldr	r0, [r0, #0]
 8011c40:	6800      	ldr	r0, [r0, #0]
 8011c42:	f380 8808 	msr	MSP, r0
 8011c46:	f04f 0000 	mov.w	r0, #0
 8011c4a:	f380 8814 	msr	CONTROL, r0
 8011c4e:	b662      	cpsie	i
 8011c50:	b661      	cpsie	f
 8011c52:	f3bf 8f4f 	dsb	sy
 8011c56:	f3bf 8f6f 	isb	sy
 8011c5a:	df00      	svc	0
 8011c5c:	bf00      	nop
 8011c5e:	0000      	.short	0x0000
 8011c60:	e000ed08 	.word	0xe000ed08

08011c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011c64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011c74 <vPortEnableVFP+0x10>
 8011c68:	6801      	ldr	r1, [r0, #0]
 8011c6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011c6e:	6001      	str	r1, [r0, #0]
 8011c70:	4770      	bx	lr
 8011c72:	0000      	.short	0x0000
 8011c74:	e000ed88 	.word	0xe000ed88

08011c78 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011c78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011c7c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011c80:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8011c84:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011c86:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011c88:	4b03      	ldr	r3, [pc, #12]	; (8011c98 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011c8a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011c8c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011c8e:	f06f 0302 	mvn.w	r3, #2
 8011c92:	6203      	str	r3, [r0, #32]
}
 8011c94:	4770      	bx	lr
 8011c96:	bf00      	nop
 8011c98:	08011bfd 	.word	0x08011bfd
 8011c9c:	00000000 	.word	0x00000000

08011ca0 <SVC_Handler>:
	__asm volatile (
 8011ca0:	4b07      	ldr	r3, [pc, #28]	; (8011cc0 <pxCurrentTCBConst2>)
 8011ca2:	6819      	ldr	r1, [r3, #0]
 8011ca4:	6808      	ldr	r0, [r1, #0]
 8011ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011caa:	f380 8809 	msr	PSP, r0
 8011cae:	f3bf 8f6f 	isb	sy
 8011cb2:	f04f 0000 	mov.w	r0, #0
 8011cb6:	f380 8811 	msr	BASEPRI, r0
 8011cba:	4770      	bx	lr
 8011cbc:	f3af 8000 	nop.w

08011cc0 <pxCurrentTCBConst2>:
 8011cc0:	24000a20 	.word	0x24000a20

08011cc4 <vPortEnterCritical>:
 8011cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc8:	f383 8811 	msr	BASEPRI, r3
 8011ccc:	f3bf 8f6f 	isb	sy
 8011cd0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8011cd4:	4a0a      	ldr	r2, [pc, #40]	; (8011d00 <vPortEnterCritical+0x3c>)
 8011cd6:	6813      	ldr	r3, [r2, #0]
 8011cd8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8011cda:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8011cdc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8011cde:	d10d      	bne.n	8011cfc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011ce0:	4b08      	ldr	r3, [pc, #32]	; (8011d04 <vPortEnterCritical+0x40>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011ce8:	d008      	beq.n	8011cfc <vPortEnterCritical+0x38>
 8011cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cee:	f383 8811 	msr	BASEPRI, r3
 8011cf2:	f3bf 8f6f 	isb	sy
 8011cf6:	f3bf 8f4f 	dsb	sy
 8011cfa:	e7fe      	b.n	8011cfa <vPortEnterCritical+0x36>
}
 8011cfc:	4770      	bx	lr
 8011cfe:	bf00      	nop
 8011d00:	24000124 	.word	0x24000124
 8011d04:	e000ed04 	.word	0xe000ed04

08011d08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8011d08:	4a08      	ldr	r2, [pc, #32]	; (8011d2c <vPortExitCritical+0x24>)
 8011d0a:	6813      	ldr	r3, [r2, #0]
 8011d0c:	b943      	cbnz	r3, 8011d20 <vPortExitCritical+0x18>
 8011d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d12:	f383 8811 	msr	BASEPRI, r3
 8011d16:	f3bf 8f6f 	isb	sy
 8011d1a:	f3bf 8f4f 	dsb	sy
 8011d1e:	e7fe      	b.n	8011d1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8011d20:	3b01      	subs	r3, #1
 8011d22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011d24:	b90b      	cbnz	r3, 8011d2a <vPortExitCritical+0x22>
	__asm volatile
 8011d26:	f383 8811 	msr	BASEPRI, r3
}
 8011d2a:	4770      	bx	lr
 8011d2c:	24000124 	.word	0x24000124

08011d30 <PendSV_Handler>:
	__asm volatile
 8011d30:	f3ef 8009 	mrs	r0, PSP
 8011d34:	f3bf 8f6f 	isb	sy
 8011d38:	4b15      	ldr	r3, [pc, #84]	; (8011d90 <pxCurrentTCBConst>)
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	f01e 0f10 	tst.w	lr, #16
 8011d40:	bf08      	it	eq
 8011d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d4a:	6010      	str	r0, [r2, #0]
 8011d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011d54:	f380 8811 	msr	BASEPRI, r0
 8011d58:	f3bf 8f4f 	dsb	sy
 8011d5c:	f3bf 8f6f 	isb	sy
 8011d60:	f7ff fb56 	bl	8011410 <vTaskSwitchContext>
 8011d64:	f04f 0000 	mov.w	r0, #0
 8011d68:	f380 8811 	msr	BASEPRI, r0
 8011d6c:	bc09      	pop	{r0, r3}
 8011d6e:	6819      	ldr	r1, [r3, #0]
 8011d70:	6808      	ldr	r0, [r1, #0]
 8011d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d76:	f01e 0f10 	tst.w	lr, #16
 8011d7a:	bf08      	it	eq
 8011d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011d80:	f380 8809 	msr	PSP, r0
 8011d84:	f3bf 8f6f 	isb	sy
 8011d88:	4770      	bx	lr
 8011d8a:	bf00      	nop
 8011d8c:	f3af 8000 	nop.w

08011d90 <pxCurrentTCBConst>:
 8011d90:	24000a20 	.word	0x24000a20

08011d94 <SysTick_Handler>:
{
 8011d94:	b508      	push	{r3, lr}
	__asm volatile
 8011d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d9a:	f383 8811 	msr	BASEPRI, r3
 8011d9e:	f3bf 8f6f 	isb	sy
 8011da2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8011da6:	f7ff f9c3 	bl	8011130 <xTaskIncrementTick>
 8011daa:	b118      	cbz	r0, 8011db4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011dac:	4b03      	ldr	r3, [pc, #12]	; (8011dbc <SysTick_Handler+0x28>)
 8011dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011db2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8011db4:	2300      	movs	r3, #0
 8011db6:	f383 8811 	msr	BASEPRI, r3
}
 8011dba:	bd08      	pop	{r3, pc}
 8011dbc:	e000ed04 	.word	0xe000ed04

08011dc0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	4a08      	ldr	r2, [pc, #32]	; (8011de4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011dc4:	4908      	ldr	r1, [pc, #32]	; (8011de8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011dc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011dc8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011dca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011dce:	4b07      	ldr	r3, [pc, #28]	; (8011dec <vPortSetupTimerInterrupt+0x2c>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011dd6:	4906      	ldr	r1, [pc, #24]	; (8011df0 <vPortSetupTimerInterrupt+0x30>)
 8011dd8:	3b01      	subs	r3, #1
 8011dda:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011ddc:	2307      	movs	r3, #7
 8011dde:	6013      	str	r3, [r2, #0]
}
 8011de0:	4770      	bx	lr
 8011de2:	bf00      	nop
 8011de4:	e000e010 	.word	0xe000e010
 8011de8:	e000e018 	.word	0xe000e018
 8011dec:	24000000 	.word	0x24000000
 8011df0:	e000e014 	.word	0xe000e014

08011df4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011df4:	4b38      	ldr	r3, [pc, #224]	; (8011ed8 <xPortStartScheduler+0xe4>)
 8011df6:	4a39      	ldr	r2, [pc, #228]	; (8011edc <xPortStartScheduler+0xe8>)
{
 8011df8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011dfa:	6819      	ldr	r1, [r3, #0]
 8011dfc:	4291      	cmp	r1, r2
 8011dfe:	d108      	bne.n	8011e12 <xPortStartScheduler+0x1e>
	__asm volatile
 8011e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e04:	f383 8811 	msr	BASEPRI, r3
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	e7fe      	b.n	8011e10 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011e12:	681a      	ldr	r2, [r3, #0]
 8011e14:	4b32      	ldr	r3, [pc, #200]	; (8011ee0 <xPortStartScheduler+0xec>)
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d108      	bne.n	8011e2c <xPortStartScheduler+0x38>
 8011e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e1e:	f383 8811 	msr	BASEPRI, r3
 8011e22:	f3bf 8f6f 	isb	sy
 8011e26:	f3bf 8f4f 	dsb	sy
 8011e2a:	e7fe      	b.n	8011e2a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011e2c:	4b2d      	ldr	r3, [pc, #180]	; (8011ee4 <xPortStartScheduler+0xf0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e2e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011e30:	781a      	ldrb	r2, [r3, #0]
 8011e32:	b2d2      	uxtb	r2, r2
 8011e34:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011e36:	22ff      	movs	r2, #255	; 0xff
 8011e38:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011e3a:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011e3c:	4a2a      	ldr	r2, [pc, #168]	; (8011ee8 <xPortStartScheduler+0xf4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011e3e:	b2db      	uxtb	r3, r3
 8011e40:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011e44:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011e48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011e4c:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011e4e:	2207      	movs	r2, #7
 8011e50:	4b26      	ldr	r3, [pc, #152]	; (8011eec <xPortStartScheduler+0xf8>)
 8011e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011e54:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8011e58:	1e54      	subs	r4, r2, #1
 8011e5a:	0600      	lsls	r0, r0, #24
 8011e5c:	d40d      	bmi.n	8011e7a <xPortStartScheduler+0x86>
 8011e5e:	b101      	cbz	r1, 8011e62 <xPortStartScheduler+0x6e>
 8011e60:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	2a03      	cmp	r2, #3
 8011e66:	d011      	beq.n	8011e8c <xPortStartScheduler+0x98>
 8011e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6c:	f383 8811 	msr	BASEPRI, r3
 8011e70:	f3bf 8f6f 	isb	sy
 8011e74:	f3bf 8f4f 	dsb	sy
 8011e78:	e7fe      	b.n	8011e78 <xPortStartScheduler+0x84>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011e7a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011e7e:	2101      	movs	r1, #1
 8011e80:	0052      	lsls	r2, r2, #1
 8011e82:	b2d2      	uxtb	r2, r2
 8011e84:	f88d 2003 	strb.w	r2, [sp, #3]
 8011e88:	4622      	mov	r2, r4
 8011e8a:	e7e3      	b.n	8011e54 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011e8c:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 8011e8e:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011e90:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8011e94:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011e96:	9b01      	ldr	r3, [sp, #4]
 8011e98:	4a12      	ldr	r2, [pc, #72]	; (8011ee4 <xPortStartScheduler+0xf0>)
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011e9e:	4b14      	ldr	r3, [pc, #80]	; (8011ef0 <xPortStartScheduler+0xfc>)
 8011ea0:	681a      	ldr	r2, [r3, #0]
 8011ea2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8011ea6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011ea8:	681a      	ldr	r2, [r3, #0]
 8011eaa:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8011eae:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8011eb0:	f7ff ff86 	bl	8011dc0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8011eb4:	4b0f      	ldr	r3, [pc, #60]	; (8011ef4 <xPortStartScheduler+0x100>)
 8011eb6:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8011eb8:	f7ff fed4 	bl	8011c64 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011ebc:	4a0e      	ldr	r2, [pc, #56]	; (8011ef8 <xPortStartScheduler+0x104>)
 8011ebe:	6813      	ldr	r3, [r2, #0]
 8011ec0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011ec4:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8011ec6:	f7ff feb9 	bl	8011c3c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8011eca:	f7ff faa1 	bl	8011410 <vTaskSwitchContext>
	prvTaskExitError();
 8011ece:	f7ff fe95 	bl	8011bfc <prvTaskExitError>
}
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	b002      	add	sp, #8
 8011ed6:	bd10      	pop	{r4, pc}
 8011ed8:	e000ed00 	.word	0xe000ed00
 8011edc:	410fc271 	.word	0x410fc271
 8011ee0:	410fc270 	.word	0x410fc270
 8011ee4:	e000e400 	.word	0xe000e400
 8011ee8:	24001040 	.word	0x24001040
 8011eec:	24001044 	.word	0x24001044
 8011ef0:	e000ed20 	.word	0xe000ed20
 8011ef4:	24000124 	.word	0x24000124
 8011ef8:	e000ef34 	.word	0xe000ef34

08011efc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011efc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011f00:	2b0f      	cmp	r3, #15
 8011f02:	d90e      	bls.n	8011f22 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011f04:	4a10      	ldr	r2, [pc, #64]	; (8011f48 <vPortValidateInterruptPriority+0x4c>)
 8011f06:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011f08:	4a10      	ldr	r2, [pc, #64]	; (8011f4c <vPortValidateInterruptPriority+0x50>)
 8011f0a:	7812      	ldrb	r2, [r2, #0]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d908      	bls.n	8011f22 <vPortValidateInterruptPriority+0x26>
 8011f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f14:	f383 8811 	msr	BASEPRI, r3
 8011f18:	f3bf 8f6f 	isb	sy
 8011f1c:	f3bf 8f4f 	dsb	sy
 8011f20:	e7fe      	b.n	8011f20 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011f22:	4b0b      	ldr	r3, [pc, #44]	; (8011f50 <vPortValidateInterruptPriority+0x54>)
 8011f24:	4a0b      	ldr	r2, [pc, #44]	; (8011f54 <vPortValidateInterruptPriority+0x58>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	6812      	ldr	r2, [r2, #0]
 8011f2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011f2e:	4293      	cmp	r3, r2
 8011f30:	d908      	bls.n	8011f44 <vPortValidateInterruptPriority+0x48>
 8011f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f36:	f383 8811 	msr	BASEPRI, r3
 8011f3a:	f3bf 8f6f 	isb	sy
 8011f3e:	f3bf 8f4f 	dsb	sy
 8011f42:	e7fe      	b.n	8011f42 <vPortValidateInterruptPriority+0x46>
	}
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop
 8011f48:	e000e3f0 	.word	0xe000e3f0
 8011f4c:	24001040 	.word	0x24001040
 8011f50:	e000ed0c 	.word	0xe000ed0c
 8011f54:	24001044 	.word	0x24001044

08011f58 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011f58:	4b0f      	ldr	r3, [pc, #60]	; (8011f98 <prvInsertBlockIntoFreeList+0x40>)
{
 8011f5a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011f5c:	681a      	ldr	r2, [r3, #0]
 8011f5e:	4282      	cmp	r2, r0
 8011f60:	d318      	bcc.n	8011f94 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011f62:	685c      	ldr	r4, [r3, #4]
 8011f64:	1919      	adds	r1, r3, r4
 8011f66:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011f68:	bf01      	itttt	eq
 8011f6a:	6841      	ldreq	r1, [r0, #4]
 8011f6c:	4618      	moveq	r0, r3
 8011f6e:	1909      	addeq	r1, r1, r4
 8011f70:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011f72:	6844      	ldr	r4, [r0, #4]
 8011f74:	1901      	adds	r1, r0, r4
 8011f76:	428a      	cmp	r2, r1
 8011f78:	d107      	bne.n	8011f8a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011f7a:	4908      	ldr	r1, [pc, #32]	; (8011f9c <prvInsertBlockIntoFreeList+0x44>)
 8011f7c:	6809      	ldr	r1, [r1, #0]
 8011f7e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011f80:	bf1f      	itttt	ne
 8011f82:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011f84:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011f86:	1909      	addne	r1, r1, r4
 8011f88:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011f8a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011f8c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011f8e:	bf18      	it	ne
 8011f90:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f92:	bd10      	pop	{r4, pc}
 8011f94:	4613      	mov	r3, r2
 8011f96:	e7e1      	b.n	8011f5c <prvInsertBlockIntoFreeList+0x4>
 8011f98:	24008858 	.word	0x24008858
 8011f9c:	24001048 	.word	0x24001048

08011fa0 <pvPortMalloc>:
{
 8011fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fa4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8011fa6:	f7ff f8ad 	bl	8011104 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8011faa:	493d      	ldr	r1, [pc, #244]	; (80120a0 <pvPortMalloc+0x100>)
 8011fac:	4d3d      	ldr	r5, [pc, #244]	; (80120a4 <pvPortMalloc+0x104>)
 8011fae:	680b      	ldr	r3, [r1, #0]
 8011fb0:	bb03      	cbnz	r3, 8011ff4 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 8011fb2:	4a3d      	ldr	r2, [pc, #244]	; (80120a8 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8011fb4:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011fb6:	0756      	lsls	r6, r2, #29
 8011fb8:	f502 43f0 	add.w	r3, r2, #30720	; 0x7800
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011fbc:	4e3b      	ldr	r6, [pc, #236]	; (80120ac <pvPortMalloc+0x10c>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011fbe:	bf14      	ite	ne
 8011fc0:	3207      	addne	r2, #7
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011fc2:	f44f 43f0 	moveq.w	r3, #30720	; 0x7800
	xStart.xBlockSize = ( size_t ) 0;
 8011fc6:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011fc8:	bf1c      	itt	ne
 8011fca:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011fce:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011fd0:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011fd2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8011fd4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011fd6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8011fda:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011fde:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8011fe0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011fe2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011fe6:	4b32      	ldr	r3, [pc, #200]	; (80120b0 <pvPortMalloc+0x110>)
 8011fe8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011fea:	4b32      	ldr	r3, [pc, #200]	; (80120b4 <pvPortMalloc+0x114>)
 8011fec:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011fee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ff2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011ff4:	682f      	ldr	r7, [r5, #0]
 8011ff6:	4227      	tst	r7, r4
 8011ff8:	d14d      	bne.n	8012096 <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 8011ffa:	2c00      	cmp	r4, #0
 8011ffc:	d03e      	beq.n	801207c <pvPortMalloc+0xdc>
				xWantedSize += xHeapStructSize;
 8011ffe:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012002:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012004:	bf1c      	itt	ne
 8012006:	f023 0307 	bicne.w	r3, r3, #7
 801200a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801200c:	2b00      	cmp	r3, #0
 801200e:	d042      	beq.n	8012096 <pvPortMalloc+0xf6>
 8012010:	4a28      	ldr	r2, [pc, #160]	; (80120b4 <pvPortMalloc+0x114>)
 8012012:	6816      	ldr	r6, [r2, #0]
 8012014:	4690      	mov	r8, r2
 8012016:	429e      	cmp	r6, r3
 8012018:	d33d      	bcc.n	8012096 <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 801201a:	4a24      	ldr	r2, [pc, #144]	; (80120ac <pvPortMalloc+0x10c>)
 801201c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801201e:	6868      	ldr	r0, [r5, #4]
 8012020:	4298      	cmp	r0, r3
 8012022:	d201      	bcs.n	8012028 <pvPortMalloc+0x88>
 8012024:	682c      	ldr	r4, [r5, #0]
 8012026:	b9a4      	cbnz	r4, 8012052 <pvPortMalloc+0xb2>
				if( pxBlock != pxEnd )
 8012028:	6809      	ldr	r1, [r1, #0]
 801202a:	42a9      	cmp	r1, r5
 801202c:	d033      	beq.n	8012096 <pvPortMalloc+0xf6>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801202e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012030:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012032:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012034:	1ac2      	subs	r2, r0, r3
 8012036:	2a10      	cmp	r2, #16
 8012038:	d912      	bls.n	8012060 <pvPortMalloc+0xc0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801203a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801203c:	0741      	lsls	r1, r0, #29
 801203e:	d00b      	beq.n	8012058 <pvPortMalloc+0xb8>
 8012040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012044:	f383 8811 	msr	BASEPRI, r3
 8012048:	f3bf 8f6f 	isb	sy
 801204c:	f3bf 8f4f 	dsb	sy
 8012050:	e7fe      	b.n	8012050 <pvPortMalloc+0xb0>
 8012052:	462a      	mov	r2, r5
 8012054:	4625      	mov	r5, r4
 8012056:	e7e2      	b.n	801201e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012058:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801205a:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801205c:	f7ff ff7c 	bl	8011f58 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012060:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012062:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012064:	4912      	ldr	r1, [pc, #72]	; (80120b0 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012066:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012068:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801206a:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 801206c:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801206e:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012072:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012074:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012076:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012078:	bf38      	it	cc
 801207a:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 801207c:	f7ff f8e8 	bl	8011250 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012080:	0763      	lsls	r3, r4, #29
 8012082:	d00a      	beq.n	801209a <pvPortMalloc+0xfa>
 8012084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012088:	f383 8811 	msr	BASEPRI, r3
 801208c:	f3bf 8f6f 	isb	sy
 8012090:	f3bf 8f4f 	dsb	sy
 8012094:	e7fe      	b.n	8012094 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 8012096:	2400      	movs	r4, #0
 8012098:	e7f0      	b.n	801207c <pvPortMalloc+0xdc>
}
 801209a:	4620      	mov	r0, r4
 801209c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120a0:	24001048 	.word	0x24001048
 80120a4:	2400884c 	.word	0x2400884c
 80120a8:	2400104c 	.word	0x2400104c
 80120ac:	24008858 	.word	0x24008858
 80120b0:	24008854 	.word	0x24008854
 80120b4:	24008850 	.word	0x24008850

080120b8 <vPortFree>:
{
 80120b8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80120ba:	4604      	mov	r4, r0
 80120bc:	b370      	cbz	r0, 801211c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80120be:	4a18      	ldr	r2, [pc, #96]	; (8012120 <vPortFree+0x68>)
 80120c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80120c4:	6812      	ldr	r2, [r2, #0]
 80120c6:	4213      	tst	r3, r2
 80120c8:	d108      	bne.n	80120dc <vPortFree+0x24>
 80120ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ce:	f383 8811 	msr	BASEPRI, r3
 80120d2:	f3bf 8f6f 	isb	sy
 80120d6:	f3bf 8f4f 	dsb	sy
 80120da:	e7fe      	b.n	80120da <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80120dc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80120e0:	b141      	cbz	r1, 80120f4 <vPortFree+0x3c>
 80120e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e6:	f383 8811 	msr	BASEPRI, r3
 80120ea:	f3bf 8f6f 	isb	sy
 80120ee:	f3bf 8f4f 	dsb	sy
 80120f2:	e7fe      	b.n	80120f2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80120f4:	ea23 0302 	bic.w	r3, r3, r2
 80120f8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80120fc:	f7ff f802 	bl	8011104 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012100:	4a08      	ldr	r2, [pc, #32]	; (8012124 <vPortFree+0x6c>)
 8012102:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012106:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 801210a:	6811      	ldr	r1, [r2, #0]
 801210c:	440b      	add	r3, r1
 801210e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012110:	f7ff ff22 	bl	8011f58 <prvInsertBlockIntoFreeList>
}
 8012114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8012118:	f7ff b89a 	b.w	8011250 <xTaskResumeAll>
}
 801211c:	bd10      	pop	{r4, pc}
 801211e:	bf00      	nop
 8012120:	2400884c 	.word	0x2400884c
 8012124:	24008850 	.word	0x24008850

08012128 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012128:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801212a:	2200      	movs	r2, #0
 801212c:	490f      	ldr	r1, [pc, #60]	; (801216c <MX_USB_DEVICE_Init+0x44>)
 801212e:	4810      	ldr	r0, [pc, #64]	; (8012170 <MX_USB_DEVICE_Init+0x48>)
 8012130:	f7fb fd0a 	bl	800db48 <USBD_Init>
 8012134:	b108      	cbz	r0, 801213a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8012136:	f7f1 fa0b 	bl	8003550 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801213a:	490e      	ldr	r1, [pc, #56]	; (8012174 <MX_USB_DEVICE_Init+0x4c>)
 801213c:	480c      	ldr	r0, [pc, #48]	; (8012170 <MX_USB_DEVICE_Init+0x48>)
 801213e:	f7fb fd1b 	bl	800db78 <USBD_RegisterClass>
 8012142:	b108      	cbz	r0, 8012148 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8012144:	f7f1 fa04 	bl	8003550 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012148:	490b      	ldr	r1, [pc, #44]	; (8012178 <MX_USB_DEVICE_Init+0x50>)
 801214a:	4809      	ldr	r0, [pc, #36]	; (8012170 <MX_USB_DEVICE_Init+0x48>)
 801214c:	f7fb fcbc 	bl	800dac8 <USBD_CDC_RegisterInterface>
 8012150:	b108      	cbz	r0, 8012156 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8012152:	f7f1 f9fd 	bl	8003550 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012156:	4806      	ldr	r0, [pc, #24]	; (8012170 <MX_USB_DEVICE_Init+0x48>)
 8012158:	f7fb fd21 	bl	800db9e <USBD_Start>
 801215c:	b108      	cbz	r0, 8012162 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 801215e:	f7f1 f9f7 	bl	8003550 <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 8012166:	f7f5 bec9 	b.w	8007efc <HAL_PWREx_EnableUSBVoltageDetector>
 801216a:	bf00      	nop
 801216c:	2400013c 	.word	0x2400013c
 8012170:	24020e8c 	.word	0x24020e8c
 8012174:	24000014 	.word	0x24000014
 8012178:	24000128 	.word	0x24000128

0801217c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
  /* USER CODE END 4 */
}
 801217c:	2000      	movs	r0, #0
 801217e:	4770      	bx	lr

08012180 <CDC_Control_FS>:
		break;
	}

	return (USBD_OK);
  /* USER CODE END 5 */
}
 8012180:	2000      	movs	r0, #0
 8012182:	4770      	bx	lr

08012184 <CDC_TransmitCplt_FS>:
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8012184:	2000      	movs	r0, #0
 8012186:	4770      	bx	lr

08012188 <CDC_Receive_FS>:
{
 8012188:	b570      	push	{r4, r5, r6, lr}
	for (uint32_t i = 0; i < *Len; i++) {
 801218a:	4602      	mov	r2, r0
		commandBuffer.data[commandBuffer.idx] = Buf[i];
 801218c:	4c0a      	ldr	r4, [pc, #40]	; (80121b8 <CDC_Receive_FS+0x30>)
	for (uint32_t i = 0; i < *Len; i++) {
 801218e:	1a13      	subs	r3, r2, r0
 8012190:	680d      	ldr	r5, [r1, #0]
 8012192:	429d      	cmp	r5, r3
 8012194:	d808      	bhi.n	80121a8 <CDC_Receive_FS+0x20>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012196:	4601      	mov	r1, r0
 8012198:	4808      	ldr	r0, [pc, #32]	; (80121bc <CDC_Receive_FS+0x34>)
 801219a:	f7fb fca4 	bl	800dae6 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801219e:	4807      	ldr	r0, [pc, #28]	; (80121bc <CDC_Receive_FS+0x34>)
 80121a0:	f7fb fcbf 	bl	800db22 <USBD_CDC_ReceivePacket>
}
 80121a4:	2000      	movs	r0, #0
 80121a6:	bd70      	pop	{r4, r5, r6, pc}
		commandBuffer.data[commandBuffer.idx] = Buf[i];
 80121a8:	6823      	ldr	r3, [r4, #0]
 80121aa:	f812 6b01 	ldrb.w	r6, [r2], #1
 80121ae:	18e5      	adds	r5, r4, r3
		commandBuffer.idx++;
 80121b0:	3301      	adds	r3, #1
		commandBuffer.data[commandBuffer.idx] = Buf[i];
 80121b2:	712e      	strb	r6, [r5, #4]
		commandBuffer.idx++;
 80121b4:	6023      	str	r3, [r4, #0]
 80121b6:	e7ea      	b.n	801218e <CDC_Receive_FS+0x6>
 80121b8:	24009624 	.word	0x24009624
 80121bc:	24020e8c 	.word	0x24020e8c

080121c0 <CDC_Init_FS>:
{
 80121c0:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80121c2:	4c06      	ldr	r4, [pc, #24]	; (80121dc <CDC_Init_FS+0x1c>)
 80121c4:	2200      	movs	r2, #0
 80121c6:	4906      	ldr	r1, [pc, #24]	; (80121e0 <CDC_Init_FS+0x20>)
 80121c8:	4620      	mov	r0, r4
 80121ca:	f7fb fc84 	bl	800dad6 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80121ce:	4905      	ldr	r1, [pc, #20]	; (80121e4 <CDC_Init_FS+0x24>)
 80121d0:	4620      	mov	r0, r4
 80121d2:	f7fb fc88 	bl	800dae6 <USBD_CDC_SetRxBuffer>
}
 80121d6:	2000      	movs	r0, #0
 80121d8:	bd10      	pop	{r4, pc}
 80121da:	bf00      	nop
 80121dc:	24020e8c 	.word	0x24020e8c
 80121e0:	2402195c 	.word	0x2402195c
 80121e4:	2402115c 	.word	0x2402115c

080121e8 <CDC_Transmit_FS>:
{
 80121e8:	b510      	push	{r4, lr}
	USBD_CDC_HandleTypeDef *hcdc =
 80121ea:	4c09      	ldr	r4, [pc, #36]	; (8012210 <CDC_Transmit_FS+0x28>)
{
 80121ec:	460a      	mov	r2, r1
	USBD_CDC_HandleTypeDef *hcdc =
 80121ee:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
	if (hcdc->TxState != 0) {
 80121f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80121f6:	b943      	cbnz	r3, 801220a <CDC_Transmit_FS+0x22>
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80121f8:	4601      	mov	r1, r0
 80121fa:	4620      	mov	r0, r4
 80121fc:	f7fb fc6b 	bl	800dad6 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012200:	4620      	mov	r0, r4
}
 8012202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012206:	f7fb bc74 	b.w	800daf2 <USBD_CDC_TransmitPacket>
}
 801220a:	2001      	movs	r0, #1
 801220c:	bd10      	pop	{r4, pc}
 801220e:	bf00      	nop
 8012210:	24020e8c 	.word	0x24020e8c

08012214 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012214:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8012216:	4801      	ldr	r0, [pc, #4]	; (801221c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8012218:	800b      	strh	r3, [r1, #0]
}
 801221a:	4770      	bx	lr
 801221c:	24000158 	.word	0x24000158

08012220 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012220:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8012222:	4801      	ldr	r0, [pc, #4]	; (8012228 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8012224:	800b      	strh	r3, [r1, #0]
}
 8012226:	4770      	bx	lr
 8012228:	2400016c 	.word	0x2400016c

0801222c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801222c:	2300      	movs	r3, #0
 801222e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8012230:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8012232:	0f05      	lsrs	r5, r0, #28
    value = value << 4;
 8012234:	0100      	lsls	r0, r0, #4
 8012236:	b2ec      	uxtb	r4, r5
    if (((value >> 28)) < 0xA)
 8012238:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 801223a:	bf94      	ite	ls
 801223c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801223e:	3437      	addhi	r4, #55	; 0x37
 8012240:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8012244:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8012248:	3301      	adds	r3, #1
 801224a:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 801224c:	b2dc      	uxtb	r4, r3
 801224e:	42a2      	cmp	r2, r4
 8012250:	d8ef      	bhi.n	8012232 <IntToUnicode+0x6>
  }
}
 8012252:	bd70      	pop	{r4, r5, r6, pc}

08012254 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8012254:	231a      	movs	r3, #26
{
 8012256:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8012258:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801225a:	4b09      	ldr	r3, [pc, #36]	; (8012280 <USBD_FS_SerialStrDescriptor+0x2c>)
 801225c:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801225e:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8012260:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8012262:	18c0      	adds	r0, r0, r3
 8012264:	d00a      	beq.n	801227c <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012266:	4b07      	ldr	r3, [pc, #28]	; (8012284 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012268:	2208      	movs	r2, #8
 801226a:	4907      	ldr	r1, [pc, #28]	; (8012288 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801226c:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801226e:	f7ff ffdd 	bl	801222c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012272:	2204      	movs	r2, #4
 8012274:	4905      	ldr	r1, [pc, #20]	; (801228c <USBD_FS_SerialStrDescriptor+0x38>)
 8012276:	4620      	mov	r0, r4
 8012278:	f7ff ffd8 	bl	801222c <IntToUnicode>
}
 801227c:	4804      	ldr	r0, [pc, #16]	; (8012290 <USBD_FS_SerialStrDescriptor+0x3c>)
 801227e:	bd10      	pop	{r4, pc}
 8012280:	1ff1e800 	.word	0x1ff1e800
 8012284:	1ff1e804 	.word	0x1ff1e804
 8012288:	24000172 	.word	0x24000172
 801228c:	24000182 	.word	0x24000182
 8012290:	24000170 	.word	0x24000170

08012294 <USBD_FS_ManufacturerStrDescriptor>:
{
 8012294:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012296:	4c04      	ldr	r4, [pc, #16]	; (80122a8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8012298:	460a      	mov	r2, r1
 801229a:	4804      	ldr	r0, [pc, #16]	; (80122ac <USBD_FS_ManufacturerStrDescriptor+0x18>)
 801229c:	4621      	mov	r1, r4
 801229e:	f7fb ffc1 	bl	800e224 <USBD_GetString>
}
 80122a2:	4620      	mov	r0, r4
 80122a4:	bd10      	pop	{r4, pc}
 80122a6:	bf00      	nop
 80122a8:	2402215c 	.word	0x2402215c
 80122ac:	08014c3a 	.word	0x08014c3a

080122b0 <USBD_FS_ProductStrDescriptor>:
{
 80122b0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80122b2:	4c04      	ldr	r4, [pc, #16]	; (80122c4 <USBD_FS_ProductStrDescriptor+0x14>)
 80122b4:	460a      	mov	r2, r1
 80122b6:	4804      	ldr	r0, [pc, #16]	; (80122c8 <USBD_FS_ProductStrDescriptor+0x18>)
 80122b8:	4621      	mov	r1, r4
 80122ba:	f7fb ffb3 	bl	800e224 <USBD_GetString>
}
 80122be:	4620      	mov	r0, r4
 80122c0:	bd10      	pop	{r4, pc}
 80122c2:	bf00      	nop
 80122c4:	2402215c 	.word	0x2402215c
 80122c8:	08014c3f 	.word	0x08014c3f

080122cc <USBD_FS_ConfigStrDescriptor>:
{
 80122cc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80122ce:	4c04      	ldr	r4, [pc, #16]	; (80122e0 <USBD_FS_ConfigStrDescriptor+0x14>)
 80122d0:	460a      	mov	r2, r1
 80122d2:	4804      	ldr	r0, [pc, #16]	; (80122e4 <USBD_FS_ConfigStrDescriptor+0x18>)
 80122d4:	4621      	mov	r1, r4
 80122d6:	f7fb ffa5 	bl	800e224 <USBD_GetString>
}
 80122da:	4620      	mov	r0, r4
 80122dc:	bd10      	pop	{r4, pc}
 80122de:	bf00      	nop
 80122e0:	2402215c 	.word	0x2402215c
 80122e4:	08014c21 	.word	0x08014c21

080122e8 <USBD_FS_InterfaceStrDescriptor>:
{
 80122e8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80122ea:	4c04      	ldr	r4, [pc, #16]	; (80122fc <USBD_FS_InterfaceStrDescriptor+0x14>)
 80122ec:	460a      	mov	r2, r1
 80122ee:	4804      	ldr	r0, [pc, #16]	; (8012300 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80122f0:	4621      	mov	r1, r4
 80122f2:	f7fb ff97 	bl	800e224 <USBD_GetString>
}
 80122f6:	4620      	mov	r0, r4
 80122f8:	bd10      	pop	{r4, pc}
 80122fa:	bf00      	nop
 80122fc:	2402215c 	.word	0x2402215c
 8012300:	08014c2c 	.word	0x08014c2c

08012304 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012304:	b510      	push	{r4, lr}
 8012306:	b088      	sub	sp, #32
 8012308:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801230a:	2214      	movs	r2, #20
 801230c:	2100      	movs	r1, #0
 801230e:	a803      	add	r0, sp, #12
 8012310:	f000 f991 	bl	8012636 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012314:	6822      	ldr	r2, [r4, #0]
 8012316:	4b18      	ldr	r3, [pc, #96]	; (8012378 <HAL_PCD_MspInit+0x74>)
 8012318:	429a      	cmp	r2, r3
 801231a:	d12b      	bne.n	8012374 <HAL_PCD_MspInit+0x70>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801231c:	4c17      	ldr	r4, [pc, #92]	; (801237c <HAL_PCD_MspInit+0x78>)
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801231e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012322:	a903      	add	r1, sp, #12
 8012324:	4816      	ldr	r0, [pc, #88]	; (8012380 <HAL_PCD_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012326:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 801232a:	f043 0301 	orr.w	r3, r3, #1
 801232e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8012332:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8012336:	f003 0301 	and.w	r3, r3, #1
 801233a:	9301      	str	r3, [sp, #4]
 801233c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801233e:	2302      	movs	r3, #2
 8012340:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012344:	230a      	movs	r3, #10
 8012346:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012348:	f7f4 ffc6 	bl	80072d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801234c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012350:	2065      	movs	r0, #101	; 0x65
 8012352:	2200      	movs	r2, #0
 8012354:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012356:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801235a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 801235e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8012362:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012366:	9302      	str	r3, [sp, #8]
 8012368:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801236a:	f7f3 fdf3 	bl	8005f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801236e:	2065      	movs	r0, #101	; 0x65
 8012370:	f7f3 fe22 	bl	8005fb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012374:	b008      	add	sp, #32
 8012376:	bd10      	pop	{r4, pc}
 8012378:	40080000 	.word	0x40080000
 801237c:	58024400 	.word	0x58024400
 8012380:	58020000 	.word	0x58020000

08012384 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012384:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8012388:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801238c:	f7fb bc18 	b.w	800dbc0 <USBD_LL_SetupStage>

08012390 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012390:	231c      	movs	r3, #28
 8012392:	fb03 0301 	mla	r3, r3, r1, r0
 8012396:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801239a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801239e:	f7fb bc3f 	b.w	800dc20 <USBD_LL_DataOutStage>

080123a2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80123a2:	231c      	movs	r3, #28
 80123a4:	fb03 0301 	mla	r3, r3, r1, r0
 80123a8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80123ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80123ae:	f7fb bc6a 	b.w	800dc86 <USBD_LL_DataInStage>

080123b2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80123b2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80123b6:	f7fb bcf1 	b.w	800dd9c <USBD_LL_SOF>

080123ba <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80123ba:	68c1      	ldr	r1, [r0, #12]
{
 80123bc:	b510      	push	{r4, lr}
 80123be:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80123c0:	b121      	cbz	r1, 80123cc <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80123c2:	2902      	cmp	r1, #2
 80123c4:	d001      	beq.n	80123ca <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 80123c6:	f7f1 f8c3 	bl	8003550 <Error_Handler>
    speed = USBD_SPEED_FULL;
 80123ca:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80123cc:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80123d0:	f7fb fcce 	bl	800dd70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80123d4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80123d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80123dc:	f7fb bca0 	b.w	800dd20 <USBD_LL_Reset>

080123e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123e0:	b510      	push	{r4, lr}
 80123e2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80123e4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80123e8:	f7fb fcc5 	bl	800dd76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80123ec:	6822      	ldr	r2, [r4, #0]
 80123ee:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80123f2:	f043 0301 	orr.w	r3, r3, #1
 80123f6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80123fa:	6a23      	ldr	r3, [r4, #32]
 80123fc:	b123      	cbz	r3, 8012408 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80123fe:	4a03      	ldr	r2, [pc, #12]	; (801240c <HAL_PCD_SuspendCallback+0x2c>)
 8012400:	6913      	ldr	r3, [r2, #16]
 8012402:	f043 0306 	orr.w	r3, r3, #6
 8012406:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012408:	bd10      	pop	{r4, pc}
 801240a:	bf00      	nop
 801240c:	e000ed00 	.word	0xe000ed00

08012410 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012410:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012414:	f7fb bcb8 	b.w	800dd88 <USBD_LL_Resume>

08012418 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012418:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801241c:	f7fb bccc 	b.w	800ddb8 <USBD_LL_IsoOUTIncomplete>

08012420 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012420:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012424:	f7fb bcc6 	b.w	800ddb4 <USBD_LL_IsoINIncomplete>

08012428 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012428:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801242c:	f7fb bcc6 	b.w	800ddbc <USBD_LL_DevConnected>

08012430 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012430:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012434:	f7fb bcc4 	b.w	800ddc0 <USBD_LL_DevDisconnected>

08012438 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012438:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801243a:	7802      	ldrb	r2, [r0, #0]
 801243c:	bb32      	cbnz	r2, 801248c <USBD_LL_Init+0x54>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801243e:	4b14      	ldr	r3, [pc, #80]	; (8012490 <USBD_LL_Init+0x58>)
  pdev->pData = &hpcd_USB_OTG_FS;

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012440:	2109      	movs	r1, #9
  hpcd_USB_OTG_FS.pData = pdev;
 8012442:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012446:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801244a:	4812      	ldr	r0, [pc, #72]	; (8012494 <USBD_LL_Init+0x5c>)
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801244c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801244e:	e9c3 0100 	strd	r0, r1, [r3]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012452:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012454:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012456:	e9c3 1203 	strd	r1, r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801245a:	e9c3 1206 	strd	r1, r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801245e:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012462:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012466:	f7f5 f833 	bl	80074d0 <HAL_PCD_Init>
 801246a:	b108      	cbz	r0, 8012470 <USBD_LL_Init+0x38>
  {
    Error_Handler( );
 801246c:	f7f1 f870 	bl	8003550 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012470:	2180      	movs	r1, #128	; 0x80
 8012472:	4807      	ldr	r0, [pc, #28]	; (8012490 <USBD_LL_Init+0x58>)
 8012474:	f7f5 fd05 	bl	8007e82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012478:	2240      	movs	r2, #64	; 0x40
 801247a:	2100      	movs	r1, #0
 801247c:	4804      	ldr	r0, [pc, #16]	; (8012490 <USBD_LL_Init+0x58>)
 801247e:	f7f5 fce0 	bl	8007e42 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012482:	2280      	movs	r2, #128	; 0x80
 8012484:	2101      	movs	r1, #1
 8012486:	4802      	ldr	r0, [pc, #8]	; (8012490 <USBD_LL_Init+0x58>)
 8012488:	f7f5 fcdb 	bl	8007e42 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 801248c:	2000      	movs	r0, #0
 801248e:	bd08      	pop	{r3, pc}
 8012490:	2402235c 	.word	0x2402235c
 8012494:	40080000 	.word	0x40080000

08012498 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012498:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 801249a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801249e:	f7f5 f8a2 	bl	80075e6 <HAL_PCD_Start>
 80124a2:	2803      	cmp	r0, #3
 80124a4:	bf96      	itet	ls
 80124a6:	4b02      	ldrls	r3, [pc, #8]	; (80124b0 <USBD_LL_Start+0x18>)
 80124a8:	2003      	movhi	r0, #3
 80124aa:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80124ac:	bd08      	pop	{r3, pc}
 80124ae:	bf00      	nop
 80124b0:	08014c53 	.word	0x08014c53

080124b4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80124b4:	b510      	push	{r4, lr}
 80124b6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80124b8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80124bc:	4613      	mov	r3, r2
 80124be:	4622      	mov	r2, r4
 80124c0:	f7f5 fb9c 	bl	8007bfc <HAL_PCD_EP_Open>
 80124c4:	2803      	cmp	r0, #3
 80124c6:	bf96      	itet	ls
 80124c8:	4b01      	ldrls	r3, [pc, #4]	; (80124d0 <USBD_LL_OpenEP+0x1c>)
 80124ca:	2003      	movhi	r0, #3
 80124cc:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80124ce:	bd10      	pop	{r4, pc}
 80124d0:	08014c53 	.word	0x08014c53

080124d4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80124d6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80124da:	f7f5 fbc7 	bl	8007c6c <HAL_PCD_EP_Close>
 80124de:	2803      	cmp	r0, #3
 80124e0:	bf96      	itet	ls
 80124e2:	4b02      	ldrls	r3, [pc, #8]	; (80124ec <USBD_LL_CloseEP+0x18>)
 80124e4:	2003      	movhi	r0, #3
 80124e6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80124e8:	bd08      	pop	{r3, pc}
 80124ea:	bf00      	nop
 80124ec:	08014c53 	.word	0x08014c53

080124f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124f0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80124f2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80124f6:	f7f5 fc34 	bl	8007d62 <HAL_PCD_EP_SetStall>
 80124fa:	2803      	cmp	r0, #3
 80124fc:	bf96      	itet	ls
 80124fe:	4b02      	ldrls	r3, [pc, #8]	; (8012508 <USBD_LL_StallEP+0x18>)
 8012500:	2003      	movhi	r0, #3
 8012502:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8012504:	bd08      	pop	{r3, pc}
 8012506:	bf00      	nop
 8012508:	08014c53 	.word	0x08014c53

0801250c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801250c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801250e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012512:	f7f5 fc60 	bl	8007dd6 <HAL_PCD_EP_ClrStall>
 8012516:	2803      	cmp	r0, #3
 8012518:	bf96      	itet	ls
 801251a:	4b02      	ldrls	r3, [pc, #8]	; (8012524 <USBD_LL_ClearStallEP+0x18>)
 801251c:	2003      	movhi	r0, #3
 801251e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8012520:	bd08      	pop	{r3, pc}
 8012522:	bf00      	nop
 8012524:	08014c53 	.word	0x08014c53

08012528 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8012528:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801252c:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8012530:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012534:	bf17      	itett	ne
 8012536:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801253a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801253e:	fb02 3101 	mlane	r1, r2, r1, r3
 8012542:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012546:	bf08      	it	eq
 8012548:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 801254c:	4770      	bx	lr
	...

08012550 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012550:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012552:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012556:	f7f5 fb3d 	bl	8007bd4 <HAL_PCD_SetAddress>
 801255a:	2803      	cmp	r0, #3
 801255c:	bf96      	itet	ls
 801255e:	4b02      	ldrls	r3, [pc, #8]	; (8012568 <USBD_LL_SetUSBAddress+0x18>)
 8012560:	2003      	movhi	r0, #3
 8012562:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8012564:	bd08      	pop	{r3, pc}
 8012566:	bf00      	nop
 8012568:	08014c53 	.word	0x08014c53

0801256c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801256c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801256e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012572:	f7f5 fbd6 	bl	8007d22 <HAL_PCD_EP_Transmit>
 8012576:	2803      	cmp	r0, #3
 8012578:	bf96      	itet	ls
 801257a:	4b02      	ldrls	r3, [pc, #8]	; (8012584 <USBD_LL_Transmit+0x18>)
 801257c:	2003      	movhi	r0, #3
 801257e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8012580:	bd08      	pop	{r3, pc}
 8012582:	bf00      	nop
 8012584:	08014c53 	.word	0x08014c53

08012588 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012588:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801258a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 801258e:	f7f5 fb9c 	bl	8007cca <HAL_PCD_EP_Receive>
 8012592:	2803      	cmp	r0, #3
 8012594:	bf96      	itet	ls
 8012596:	4b02      	ldrls	r3, [pc, #8]	; (80125a0 <USBD_LL_PrepareReceive+0x18>)
 8012598:	2003      	movhi	r0, #3
 801259a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 801259c:	bd08      	pop	{r3, pc}
 801259e:	bf00      	nop
 80125a0:	08014c53 	.word	0x08014c53

080125a4 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80125a4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80125a8:	f7f5 bbb3 	b.w	8007d12 <HAL_PCD_EP_GetRxCount>

080125ac <__errno>:
 80125ac:	4b01      	ldr	r3, [pc, #4]	; (80125b4 <__errno+0x8>)
 80125ae:	6818      	ldr	r0, [r3, #0]
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop
 80125b4:	2400018c 	.word	0x2400018c

080125b8 <__libc_init_array>:
 80125b8:	b570      	push	{r4, r5, r6, lr}
 80125ba:	4e0d      	ldr	r6, [pc, #52]	; (80125f0 <__libc_init_array+0x38>)
 80125bc:	4c0d      	ldr	r4, [pc, #52]	; (80125f4 <__libc_init_array+0x3c>)
 80125be:	1ba4      	subs	r4, r4, r6
 80125c0:	10a4      	asrs	r4, r4, #2
 80125c2:	2500      	movs	r5, #0
 80125c4:	42a5      	cmp	r5, r4
 80125c6:	d109      	bne.n	80125dc <__libc_init_array+0x24>
 80125c8:	4e0b      	ldr	r6, [pc, #44]	; (80125f8 <__libc_init_array+0x40>)
 80125ca:	4c0c      	ldr	r4, [pc, #48]	; (80125fc <__libc_init_array+0x44>)
 80125cc:	f001 fcbe 	bl	8013f4c <_init>
 80125d0:	1ba4      	subs	r4, r4, r6
 80125d2:	10a4      	asrs	r4, r4, #2
 80125d4:	2500      	movs	r5, #0
 80125d6:	42a5      	cmp	r5, r4
 80125d8:	d105      	bne.n	80125e6 <__libc_init_array+0x2e>
 80125da:	bd70      	pop	{r4, r5, r6, pc}
 80125dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80125e0:	4798      	blx	r3
 80125e2:	3501      	adds	r5, #1
 80125e4:	e7ee      	b.n	80125c4 <__libc_init_array+0xc>
 80125e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80125ea:	4798      	blx	r3
 80125ec:	3501      	adds	r5, #1
 80125ee:	e7f2      	b.n	80125d6 <__libc_init_array+0x1e>
 80125f0:	08014fb8 	.word	0x08014fb8
 80125f4:	08014fb8 	.word	0x08014fb8
 80125f8:	08014fb8 	.word	0x08014fb8
 80125fc:	08014fbc 	.word	0x08014fbc

08012600 <malloc>:
 8012600:	4b02      	ldr	r3, [pc, #8]	; (801260c <malloc+0xc>)
 8012602:	4601      	mov	r1, r0
 8012604:	6818      	ldr	r0, [r3, #0]
 8012606:	f000 b86d 	b.w	80126e4 <_malloc_r>
 801260a:	bf00      	nop
 801260c:	2400018c 	.word	0x2400018c

08012610 <free>:
 8012610:	4b02      	ldr	r3, [pc, #8]	; (801261c <free+0xc>)
 8012612:	4601      	mov	r1, r0
 8012614:	6818      	ldr	r0, [r3, #0]
 8012616:	f000 b817 	b.w	8012648 <_free_r>
 801261a:	bf00      	nop
 801261c:	2400018c 	.word	0x2400018c

08012620 <memcpy>:
 8012620:	b510      	push	{r4, lr}
 8012622:	1e43      	subs	r3, r0, #1
 8012624:	440a      	add	r2, r1
 8012626:	4291      	cmp	r1, r2
 8012628:	d100      	bne.n	801262c <memcpy+0xc>
 801262a:	bd10      	pop	{r4, pc}
 801262c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012634:	e7f7      	b.n	8012626 <memcpy+0x6>

08012636 <memset>:
 8012636:	4402      	add	r2, r0
 8012638:	4603      	mov	r3, r0
 801263a:	4293      	cmp	r3, r2
 801263c:	d100      	bne.n	8012640 <memset+0xa>
 801263e:	4770      	bx	lr
 8012640:	f803 1b01 	strb.w	r1, [r3], #1
 8012644:	e7f9      	b.n	801263a <memset+0x4>
	...

08012648 <_free_r>:
 8012648:	b538      	push	{r3, r4, r5, lr}
 801264a:	4605      	mov	r5, r0
 801264c:	2900      	cmp	r1, #0
 801264e:	d045      	beq.n	80126dc <_free_r+0x94>
 8012650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012654:	1f0c      	subs	r4, r1, #4
 8012656:	2b00      	cmp	r3, #0
 8012658:	bfb8      	it	lt
 801265a:	18e4      	addlt	r4, r4, r3
 801265c:	f000 f922 	bl	80128a4 <__malloc_lock>
 8012660:	4a1f      	ldr	r2, [pc, #124]	; (80126e0 <_free_r+0x98>)
 8012662:	6813      	ldr	r3, [r2, #0]
 8012664:	4610      	mov	r0, r2
 8012666:	b933      	cbnz	r3, 8012676 <_free_r+0x2e>
 8012668:	6063      	str	r3, [r4, #4]
 801266a:	6014      	str	r4, [r2, #0]
 801266c:	4628      	mov	r0, r5
 801266e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012672:	f000 b918 	b.w	80128a6 <__malloc_unlock>
 8012676:	42a3      	cmp	r3, r4
 8012678:	d90c      	bls.n	8012694 <_free_r+0x4c>
 801267a:	6821      	ldr	r1, [r4, #0]
 801267c:	1862      	adds	r2, r4, r1
 801267e:	4293      	cmp	r3, r2
 8012680:	bf04      	itt	eq
 8012682:	681a      	ldreq	r2, [r3, #0]
 8012684:	685b      	ldreq	r3, [r3, #4]
 8012686:	6063      	str	r3, [r4, #4]
 8012688:	bf04      	itt	eq
 801268a:	1852      	addeq	r2, r2, r1
 801268c:	6022      	streq	r2, [r4, #0]
 801268e:	6004      	str	r4, [r0, #0]
 8012690:	e7ec      	b.n	801266c <_free_r+0x24>
 8012692:	4613      	mov	r3, r2
 8012694:	685a      	ldr	r2, [r3, #4]
 8012696:	b10a      	cbz	r2, 801269c <_free_r+0x54>
 8012698:	42a2      	cmp	r2, r4
 801269a:	d9fa      	bls.n	8012692 <_free_r+0x4a>
 801269c:	6819      	ldr	r1, [r3, #0]
 801269e:	1858      	adds	r0, r3, r1
 80126a0:	42a0      	cmp	r0, r4
 80126a2:	d10b      	bne.n	80126bc <_free_r+0x74>
 80126a4:	6820      	ldr	r0, [r4, #0]
 80126a6:	4401      	add	r1, r0
 80126a8:	1858      	adds	r0, r3, r1
 80126aa:	4282      	cmp	r2, r0
 80126ac:	6019      	str	r1, [r3, #0]
 80126ae:	d1dd      	bne.n	801266c <_free_r+0x24>
 80126b0:	6810      	ldr	r0, [r2, #0]
 80126b2:	6852      	ldr	r2, [r2, #4]
 80126b4:	605a      	str	r2, [r3, #4]
 80126b6:	4401      	add	r1, r0
 80126b8:	6019      	str	r1, [r3, #0]
 80126ba:	e7d7      	b.n	801266c <_free_r+0x24>
 80126bc:	d902      	bls.n	80126c4 <_free_r+0x7c>
 80126be:	230c      	movs	r3, #12
 80126c0:	602b      	str	r3, [r5, #0]
 80126c2:	e7d3      	b.n	801266c <_free_r+0x24>
 80126c4:	6820      	ldr	r0, [r4, #0]
 80126c6:	1821      	adds	r1, r4, r0
 80126c8:	428a      	cmp	r2, r1
 80126ca:	bf04      	itt	eq
 80126cc:	6811      	ldreq	r1, [r2, #0]
 80126ce:	6852      	ldreq	r2, [r2, #4]
 80126d0:	6062      	str	r2, [r4, #4]
 80126d2:	bf04      	itt	eq
 80126d4:	1809      	addeq	r1, r1, r0
 80126d6:	6021      	streq	r1, [r4, #0]
 80126d8:	605c      	str	r4, [r3, #4]
 80126da:	e7c7      	b.n	801266c <_free_r+0x24>
 80126dc:	bd38      	pop	{r3, r4, r5, pc}
 80126de:	bf00      	nop
 80126e0:	24008860 	.word	0x24008860

080126e4 <_malloc_r>:
 80126e4:	b570      	push	{r4, r5, r6, lr}
 80126e6:	1ccd      	adds	r5, r1, #3
 80126e8:	f025 0503 	bic.w	r5, r5, #3
 80126ec:	3508      	adds	r5, #8
 80126ee:	2d0c      	cmp	r5, #12
 80126f0:	bf38      	it	cc
 80126f2:	250c      	movcc	r5, #12
 80126f4:	2d00      	cmp	r5, #0
 80126f6:	4606      	mov	r6, r0
 80126f8:	db01      	blt.n	80126fe <_malloc_r+0x1a>
 80126fa:	42a9      	cmp	r1, r5
 80126fc:	d903      	bls.n	8012706 <_malloc_r+0x22>
 80126fe:	230c      	movs	r3, #12
 8012700:	6033      	str	r3, [r6, #0]
 8012702:	2000      	movs	r0, #0
 8012704:	bd70      	pop	{r4, r5, r6, pc}
 8012706:	f000 f8cd 	bl	80128a4 <__malloc_lock>
 801270a:	4a21      	ldr	r2, [pc, #132]	; (8012790 <_malloc_r+0xac>)
 801270c:	6814      	ldr	r4, [r2, #0]
 801270e:	4621      	mov	r1, r4
 8012710:	b991      	cbnz	r1, 8012738 <_malloc_r+0x54>
 8012712:	4c20      	ldr	r4, [pc, #128]	; (8012794 <_malloc_r+0xb0>)
 8012714:	6823      	ldr	r3, [r4, #0]
 8012716:	b91b      	cbnz	r3, 8012720 <_malloc_r+0x3c>
 8012718:	4630      	mov	r0, r6
 801271a:	f000 f83d 	bl	8012798 <_sbrk_r>
 801271e:	6020      	str	r0, [r4, #0]
 8012720:	4629      	mov	r1, r5
 8012722:	4630      	mov	r0, r6
 8012724:	f000 f838 	bl	8012798 <_sbrk_r>
 8012728:	1c43      	adds	r3, r0, #1
 801272a:	d124      	bne.n	8012776 <_malloc_r+0x92>
 801272c:	230c      	movs	r3, #12
 801272e:	6033      	str	r3, [r6, #0]
 8012730:	4630      	mov	r0, r6
 8012732:	f000 f8b8 	bl	80128a6 <__malloc_unlock>
 8012736:	e7e4      	b.n	8012702 <_malloc_r+0x1e>
 8012738:	680b      	ldr	r3, [r1, #0]
 801273a:	1b5b      	subs	r3, r3, r5
 801273c:	d418      	bmi.n	8012770 <_malloc_r+0x8c>
 801273e:	2b0b      	cmp	r3, #11
 8012740:	d90f      	bls.n	8012762 <_malloc_r+0x7e>
 8012742:	600b      	str	r3, [r1, #0]
 8012744:	50cd      	str	r5, [r1, r3]
 8012746:	18cc      	adds	r4, r1, r3
 8012748:	4630      	mov	r0, r6
 801274a:	f000 f8ac 	bl	80128a6 <__malloc_unlock>
 801274e:	f104 000b 	add.w	r0, r4, #11
 8012752:	1d23      	adds	r3, r4, #4
 8012754:	f020 0007 	bic.w	r0, r0, #7
 8012758:	1ac3      	subs	r3, r0, r3
 801275a:	d0d3      	beq.n	8012704 <_malloc_r+0x20>
 801275c:	425a      	negs	r2, r3
 801275e:	50e2      	str	r2, [r4, r3]
 8012760:	e7d0      	b.n	8012704 <_malloc_r+0x20>
 8012762:	428c      	cmp	r4, r1
 8012764:	684b      	ldr	r3, [r1, #4]
 8012766:	bf16      	itet	ne
 8012768:	6063      	strne	r3, [r4, #4]
 801276a:	6013      	streq	r3, [r2, #0]
 801276c:	460c      	movne	r4, r1
 801276e:	e7eb      	b.n	8012748 <_malloc_r+0x64>
 8012770:	460c      	mov	r4, r1
 8012772:	6849      	ldr	r1, [r1, #4]
 8012774:	e7cc      	b.n	8012710 <_malloc_r+0x2c>
 8012776:	1cc4      	adds	r4, r0, #3
 8012778:	f024 0403 	bic.w	r4, r4, #3
 801277c:	42a0      	cmp	r0, r4
 801277e:	d005      	beq.n	801278c <_malloc_r+0xa8>
 8012780:	1a21      	subs	r1, r4, r0
 8012782:	4630      	mov	r0, r6
 8012784:	f000 f808 	bl	8012798 <_sbrk_r>
 8012788:	3001      	adds	r0, #1
 801278a:	d0cf      	beq.n	801272c <_malloc_r+0x48>
 801278c:	6025      	str	r5, [r4, #0]
 801278e:	e7db      	b.n	8012748 <_malloc_r+0x64>
 8012790:	24008860 	.word	0x24008860
 8012794:	24008864 	.word	0x24008864

08012798 <_sbrk_r>:
 8012798:	b538      	push	{r3, r4, r5, lr}
 801279a:	4c06      	ldr	r4, [pc, #24]	; (80127b4 <_sbrk_r+0x1c>)
 801279c:	2300      	movs	r3, #0
 801279e:	4605      	mov	r5, r0
 80127a0:	4608      	mov	r0, r1
 80127a2:	6023      	str	r3, [r4, #0]
 80127a4:	f7f1 fad8 	bl	8003d58 <_sbrk>
 80127a8:	1c43      	adds	r3, r0, #1
 80127aa:	d102      	bne.n	80127b2 <_sbrk_r+0x1a>
 80127ac:	6823      	ldr	r3, [r4, #0]
 80127ae:	b103      	cbz	r3, 80127b2 <_sbrk_r+0x1a>
 80127b0:	602b      	str	r3, [r5, #0]
 80127b2:	bd38      	pop	{r3, r4, r5, pc}
 80127b4:	24022764 	.word	0x24022764

080127b8 <sniprintf>:
 80127b8:	b40c      	push	{r2, r3}
 80127ba:	b530      	push	{r4, r5, lr}
 80127bc:	4b17      	ldr	r3, [pc, #92]	; (801281c <sniprintf+0x64>)
 80127be:	1e0c      	subs	r4, r1, #0
 80127c0:	b09d      	sub	sp, #116	; 0x74
 80127c2:	681d      	ldr	r5, [r3, #0]
 80127c4:	da08      	bge.n	80127d8 <sniprintf+0x20>
 80127c6:	238b      	movs	r3, #139	; 0x8b
 80127c8:	602b      	str	r3, [r5, #0]
 80127ca:	f04f 30ff 	mov.w	r0, #4294967295
 80127ce:	b01d      	add	sp, #116	; 0x74
 80127d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80127d4:	b002      	add	sp, #8
 80127d6:	4770      	bx	lr
 80127d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80127dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80127e0:	bf14      	ite	ne
 80127e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80127e6:	4623      	moveq	r3, r4
 80127e8:	9304      	str	r3, [sp, #16]
 80127ea:	9307      	str	r3, [sp, #28]
 80127ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80127f0:	9002      	str	r0, [sp, #8]
 80127f2:	9006      	str	r0, [sp, #24]
 80127f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80127f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80127fa:	ab21      	add	r3, sp, #132	; 0x84
 80127fc:	a902      	add	r1, sp, #8
 80127fe:	4628      	mov	r0, r5
 8012800:	9301      	str	r3, [sp, #4]
 8012802:	f000 f8ab 	bl	801295c <_svfiprintf_r>
 8012806:	1c43      	adds	r3, r0, #1
 8012808:	bfbc      	itt	lt
 801280a:	238b      	movlt	r3, #139	; 0x8b
 801280c:	602b      	strlt	r3, [r5, #0]
 801280e:	2c00      	cmp	r4, #0
 8012810:	d0dd      	beq.n	80127ce <sniprintf+0x16>
 8012812:	9b02      	ldr	r3, [sp, #8]
 8012814:	2200      	movs	r2, #0
 8012816:	701a      	strb	r2, [r3, #0]
 8012818:	e7d9      	b.n	80127ce <sniprintf+0x16>
 801281a:	bf00      	nop
 801281c:	2400018c 	.word	0x2400018c

08012820 <strcpy>:
 8012820:	4603      	mov	r3, r0
 8012822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012826:	f803 2b01 	strb.w	r2, [r3], #1
 801282a:	2a00      	cmp	r2, #0
 801282c:	d1f9      	bne.n	8012822 <strcpy+0x2>
 801282e:	4770      	bx	lr

08012830 <_vsniprintf_r>:
 8012830:	b530      	push	{r4, r5, lr}
 8012832:	1e14      	subs	r4, r2, #0
 8012834:	4605      	mov	r5, r0
 8012836:	b09b      	sub	sp, #108	; 0x6c
 8012838:	4618      	mov	r0, r3
 801283a:	da05      	bge.n	8012848 <_vsniprintf_r+0x18>
 801283c:	238b      	movs	r3, #139	; 0x8b
 801283e:	602b      	str	r3, [r5, #0]
 8012840:	f04f 30ff 	mov.w	r0, #4294967295
 8012844:	b01b      	add	sp, #108	; 0x6c
 8012846:	bd30      	pop	{r4, r5, pc}
 8012848:	f44f 7302 	mov.w	r3, #520	; 0x208
 801284c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012850:	bf14      	ite	ne
 8012852:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012856:	4623      	moveq	r3, r4
 8012858:	9302      	str	r3, [sp, #8]
 801285a:	9305      	str	r3, [sp, #20]
 801285c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012860:	9100      	str	r1, [sp, #0]
 8012862:	9104      	str	r1, [sp, #16]
 8012864:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012868:	4602      	mov	r2, r0
 801286a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801286c:	4669      	mov	r1, sp
 801286e:	4628      	mov	r0, r5
 8012870:	f000 f874 	bl	801295c <_svfiprintf_r>
 8012874:	1c43      	adds	r3, r0, #1
 8012876:	bfbc      	itt	lt
 8012878:	238b      	movlt	r3, #139	; 0x8b
 801287a:	602b      	strlt	r3, [r5, #0]
 801287c:	2c00      	cmp	r4, #0
 801287e:	d0e1      	beq.n	8012844 <_vsniprintf_r+0x14>
 8012880:	9b00      	ldr	r3, [sp, #0]
 8012882:	2200      	movs	r2, #0
 8012884:	701a      	strb	r2, [r3, #0]
 8012886:	e7dd      	b.n	8012844 <_vsniprintf_r+0x14>

08012888 <vsniprintf>:
 8012888:	b507      	push	{r0, r1, r2, lr}
 801288a:	9300      	str	r3, [sp, #0]
 801288c:	4613      	mov	r3, r2
 801288e:	460a      	mov	r2, r1
 8012890:	4601      	mov	r1, r0
 8012892:	4803      	ldr	r0, [pc, #12]	; (80128a0 <vsniprintf+0x18>)
 8012894:	6800      	ldr	r0, [r0, #0]
 8012896:	f7ff ffcb 	bl	8012830 <_vsniprintf_r>
 801289a:	b003      	add	sp, #12
 801289c:	f85d fb04 	ldr.w	pc, [sp], #4
 80128a0:	2400018c 	.word	0x2400018c

080128a4 <__malloc_lock>:
 80128a4:	4770      	bx	lr

080128a6 <__malloc_unlock>:
 80128a6:	4770      	bx	lr

080128a8 <__ssputs_r>:
 80128a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128ac:	688e      	ldr	r6, [r1, #8]
 80128ae:	429e      	cmp	r6, r3
 80128b0:	4682      	mov	sl, r0
 80128b2:	460c      	mov	r4, r1
 80128b4:	4690      	mov	r8, r2
 80128b6:	4699      	mov	r9, r3
 80128b8:	d837      	bhi.n	801292a <__ssputs_r+0x82>
 80128ba:	898a      	ldrh	r2, [r1, #12]
 80128bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80128c0:	d031      	beq.n	8012926 <__ssputs_r+0x7e>
 80128c2:	6825      	ldr	r5, [r4, #0]
 80128c4:	6909      	ldr	r1, [r1, #16]
 80128c6:	1a6f      	subs	r7, r5, r1
 80128c8:	6965      	ldr	r5, [r4, #20]
 80128ca:	2302      	movs	r3, #2
 80128cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80128d4:	f109 0301 	add.w	r3, r9, #1
 80128d8:	443b      	add	r3, r7
 80128da:	429d      	cmp	r5, r3
 80128dc:	bf38      	it	cc
 80128de:	461d      	movcc	r5, r3
 80128e0:	0553      	lsls	r3, r2, #21
 80128e2:	d530      	bpl.n	8012946 <__ssputs_r+0x9e>
 80128e4:	4629      	mov	r1, r5
 80128e6:	f7ff fefd 	bl	80126e4 <_malloc_r>
 80128ea:	4606      	mov	r6, r0
 80128ec:	b950      	cbnz	r0, 8012904 <__ssputs_r+0x5c>
 80128ee:	230c      	movs	r3, #12
 80128f0:	f8ca 3000 	str.w	r3, [sl]
 80128f4:	89a3      	ldrh	r3, [r4, #12]
 80128f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128fa:	81a3      	strh	r3, [r4, #12]
 80128fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012904:	463a      	mov	r2, r7
 8012906:	6921      	ldr	r1, [r4, #16]
 8012908:	f7ff fe8a 	bl	8012620 <memcpy>
 801290c:	89a3      	ldrh	r3, [r4, #12]
 801290e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012916:	81a3      	strh	r3, [r4, #12]
 8012918:	6126      	str	r6, [r4, #16]
 801291a:	6165      	str	r5, [r4, #20]
 801291c:	443e      	add	r6, r7
 801291e:	1bed      	subs	r5, r5, r7
 8012920:	6026      	str	r6, [r4, #0]
 8012922:	60a5      	str	r5, [r4, #8]
 8012924:	464e      	mov	r6, r9
 8012926:	454e      	cmp	r6, r9
 8012928:	d900      	bls.n	801292c <__ssputs_r+0x84>
 801292a:	464e      	mov	r6, r9
 801292c:	4632      	mov	r2, r6
 801292e:	4641      	mov	r1, r8
 8012930:	6820      	ldr	r0, [r4, #0]
 8012932:	f000 fa93 	bl	8012e5c <memmove>
 8012936:	68a3      	ldr	r3, [r4, #8]
 8012938:	1b9b      	subs	r3, r3, r6
 801293a:	60a3      	str	r3, [r4, #8]
 801293c:	6823      	ldr	r3, [r4, #0]
 801293e:	441e      	add	r6, r3
 8012940:	6026      	str	r6, [r4, #0]
 8012942:	2000      	movs	r0, #0
 8012944:	e7dc      	b.n	8012900 <__ssputs_r+0x58>
 8012946:	462a      	mov	r2, r5
 8012948:	f000 faa1 	bl	8012e8e <_realloc_r>
 801294c:	4606      	mov	r6, r0
 801294e:	2800      	cmp	r0, #0
 8012950:	d1e2      	bne.n	8012918 <__ssputs_r+0x70>
 8012952:	6921      	ldr	r1, [r4, #16]
 8012954:	4650      	mov	r0, sl
 8012956:	f7ff fe77 	bl	8012648 <_free_r>
 801295a:	e7c8      	b.n	80128ee <__ssputs_r+0x46>

0801295c <_svfiprintf_r>:
 801295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012960:	461d      	mov	r5, r3
 8012962:	898b      	ldrh	r3, [r1, #12]
 8012964:	061f      	lsls	r7, r3, #24
 8012966:	b09d      	sub	sp, #116	; 0x74
 8012968:	4680      	mov	r8, r0
 801296a:	460c      	mov	r4, r1
 801296c:	4616      	mov	r6, r2
 801296e:	d50f      	bpl.n	8012990 <_svfiprintf_r+0x34>
 8012970:	690b      	ldr	r3, [r1, #16]
 8012972:	b96b      	cbnz	r3, 8012990 <_svfiprintf_r+0x34>
 8012974:	2140      	movs	r1, #64	; 0x40
 8012976:	f7ff feb5 	bl	80126e4 <_malloc_r>
 801297a:	6020      	str	r0, [r4, #0]
 801297c:	6120      	str	r0, [r4, #16]
 801297e:	b928      	cbnz	r0, 801298c <_svfiprintf_r+0x30>
 8012980:	230c      	movs	r3, #12
 8012982:	f8c8 3000 	str.w	r3, [r8]
 8012986:	f04f 30ff 	mov.w	r0, #4294967295
 801298a:	e0c8      	b.n	8012b1e <_svfiprintf_r+0x1c2>
 801298c:	2340      	movs	r3, #64	; 0x40
 801298e:	6163      	str	r3, [r4, #20]
 8012990:	2300      	movs	r3, #0
 8012992:	9309      	str	r3, [sp, #36]	; 0x24
 8012994:	2320      	movs	r3, #32
 8012996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801299a:	2330      	movs	r3, #48	; 0x30
 801299c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80129a0:	9503      	str	r5, [sp, #12]
 80129a2:	f04f 0b01 	mov.w	fp, #1
 80129a6:	4637      	mov	r7, r6
 80129a8:	463d      	mov	r5, r7
 80129aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80129ae:	b10b      	cbz	r3, 80129b4 <_svfiprintf_r+0x58>
 80129b0:	2b25      	cmp	r3, #37	; 0x25
 80129b2:	d13e      	bne.n	8012a32 <_svfiprintf_r+0xd6>
 80129b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80129b8:	d00b      	beq.n	80129d2 <_svfiprintf_r+0x76>
 80129ba:	4653      	mov	r3, sl
 80129bc:	4632      	mov	r2, r6
 80129be:	4621      	mov	r1, r4
 80129c0:	4640      	mov	r0, r8
 80129c2:	f7ff ff71 	bl	80128a8 <__ssputs_r>
 80129c6:	3001      	adds	r0, #1
 80129c8:	f000 80a4 	beq.w	8012b14 <_svfiprintf_r+0x1b8>
 80129cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ce:	4453      	add	r3, sl
 80129d0:	9309      	str	r3, [sp, #36]	; 0x24
 80129d2:	783b      	ldrb	r3, [r7, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	f000 809d 	beq.w	8012b14 <_svfiprintf_r+0x1b8>
 80129da:	2300      	movs	r3, #0
 80129dc:	f04f 32ff 	mov.w	r2, #4294967295
 80129e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129e4:	9304      	str	r3, [sp, #16]
 80129e6:	9307      	str	r3, [sp, #28]
 80129e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129ec:	931a      	str	r3, [sp, #104]	; 0x68
 80129ee:	462f      	mov	r7, r5
 80129f0:	2205      	movs	r2, #5
 80129f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80129f6:	4850      	ldr	r0, [pc, #320]	; (8012b38 <_svfiprintf_r+0x1dc>)
 80129f8:	f7ed fc7a 	bl	80002f0 <memchr>
 80129fc:	9b04      	ldr	r3, [sp, #16]
 80129fe:	b9d0      	cbnz	r0, 8012a36 <_svfiprintf_r+0xda>
 8012a00:	06d9      	lsls	r1, r3, #27
 8012a02:	bf44      	itt	mi
 8012a04:	2220      	movmi	r2, #32
 8012a06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a0a:	071a      	lsls	r2, r3, #28
 8012a0c:	bf44      	itt	mi
 8012a0e:	222b      	movmi	r2, #43	; 0x2b
 8012a10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a14:	782a      	ldrb	r2, [r5, #0]
 8012a16:	2a2a      	cmp	r2, #42	; 0x2a
 8012a18:	d015      	beq.n	8012a46 <_svfiprintf_r+0xea>
 8012a1a:	9a07      	ldr	r2, [sp, #28]
 8012a1c:	462f      	mov	r7, r5
 8012a1e:	2000      	movs	r0, #0
 8012a20:	250a      	movs	r5, #10
 8012a22:	4639      	mov	r1, r7
 8012a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a28:	3b30      	subs	r3, #48	; 0x30
 8012a2a:	2b09      	cmp	r3, #9
 8012a2c:	d94d      	bls.n	8012aca <_svfiprintf_r+0x16e>
 8012a2e:	b1b8      	cbz	r0, 8012a60 <_svfiprintf_r+0x104>
 8012a30:	e00f      	b.n	8012a52 <_svfiprintf_r+0xf6>
 8012a32:	462f      	mov	r7, r5
 8012a34:	e7b8      	b.n	80129a8 <_svfiprintf_r+0x4c>
 8012a36:	4a40      	ldr	r2, [pc, #256]	; (8012b38 <_svfiprintf_r+0x1dc>)
 8012a38:	1a80      	subs	r0, r0, r2
 8012a3a:	fa0b f000 	lsl.w	r0, fp, r0
 8012a3e:	4318      	orrs	r0, r3
 8012a40:	9004      	str	r0, [sp, #16]
 8012a42:	463d      	mov	r5, r7
 8012a44:	e7d3      	b.n	80129ee <_svfiprintf_r+0x92>
 8012a46:	9a03      	ldr	r2, [sp, #12]
 8012a48:	1d11      	adds	r1, r2, #4
 8012a4a:	6812      	ldr	r2, [r2, #0]
 8012a4c:	9103      	str	r1, [sp, #12]
 8012a4e:	2a00      	cmp	r2, #0
 8012a50:	db01      	blt.n	8012a56 <_svfiprintf_r+0xfa>
 8012a52:	9207      	str	r2, [sp, #28]
 8012a54:	e004      	b.n	8012a60 <_svfiprintf_r+0x104>
 8012a56:	4252      	negs	r2, r2
 8012a58:	f043 0302 	orr.w	r3, r3, #2
 8012a5c:	9207      	str	r2, [sp, #28]
 8012a5e:	9304      	str	r3, [sp, #16]
 8012a60:	783b      	ldrb	r3, [r7, #0]
 8012a62:	2b2e      	cmp	r3, #46	; 0x2e
 8012a64:	d10c      	bne.n	8012a80 <_svfiprintf_r+0x124>
 8012a66:	787b      	ldrb	r3, [r7, #1]
 8012a68:	2b2a      	cmp	r3, #42	; 0x2a
 8012a6a:	d133      	bne.n	8012ad4 <_svfiprintf_r+0x178>
 8012a6c:	9b03      	ldr	r3, [sp, #12]
 8012a6e:	1d1a      	adds	r2, r3, #4
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	9203      	str	r2, [sp, #12]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	bfb8      	it	lt
 8012a78:	f04f 33ff 	movlt.w	r3, #4294967295
 8012a7c:	3702      	adds	r7, #2
 8012a7e:	9305      	str	r3, [sp, #20]
 8012a80:	4d2e      	ldr	r5, [pc, #184]	; (8012b3c <_svfiprintf_r+0x1e0>)
 8012a82:	7839      	ldrb	r1, [r7, #0]
 8012a84:	2203      	movs	r2, #3
 8012a86:	4628      	mov	r0, r5
 8012a88:	f7ed fc32 	bl	80002f0 <memchr>
 8012a8c:	b138      	cbz	r0, 8012a9e <_svfiprintf_r+0x142>
 8012a8e:	2340      	movs	r3, #64	; 0x40
 8012a90:	1b40      	subs	r0, r0, r5
 8012a92:	fa03 f000 	lsl.w	r0, r3, r0
 8012a96:	9b04      	ldr	r3, [sp, #16]
 8012a98:	4303      	orrs	r3, r0
 8012a9a:	3701      	adds	r7, #1
 8012a9c:	9304      	str	r3, [sp, #16]
 8012a9e:	7839      	ldrb	r1, [r7, #0]
 8012aa0:	4827      	ldr	r0, [pc, #156]	; (8012b40 <_svfiprintf_r+0x1e4>)
 8012aa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012aa6:	2206      	movs	r2, #6
 8012aa8:	1c7e      	adds	r6, r7, #1
 8012aaa:	f7ed fc21 	bl	80002f0 <memchr>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d038      	beq.n	8012b24 <_svfiprintf_r+0x1c8>
 8012ab2:	4b24      	ldr	r3, [pc, #144]	; (8012b44 <_svfiprintf_r+0x1e8>)
 8012ab4:	bb13      	cbnz	r3, 8012afc <_svfiprintf_r+0x1a0>
 8012ab6:	9b03      	ldr	r3, [sp, #12]
 8012ab8:	3307      	adds	r3, #7
 8012aba:	f023 0307 	bic.w	r3, r3, #7
 8012abe:	3308      	adds	r3, #8
 8012ac0:	9303      	str	r3, [sp, #12]
 8012ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ac4:	444b      	add	r3, r9
 8012ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8012ac8:	e76d      	b.n	80129a6 <_svfiprintf_r+0x4a>
 8012aca:	fb05 3202 	mla	r2, r5, r2, r3
 8012ace:	2001      	movs	r0, #1
 8012ad0:	460f      	mov	r7, r1
 8012ad2:	e7a6      	b.n	8012a22 <_svfiprintf_r+0xc6>
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	3701      	adds	r7, #1
 8012ad8:	9305      	str	r3, [sp, #20]
 8012ada:	4619      	mov	r1, r3
 8012adc:	250a      	movs	r5, #10
 8012ade:	4638      	mov	r0, r7
 8012ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ae4:	3a30      	subs	r2, #48	; 0x30
 8012ae6:	2a09      	cmp	r2, #9
 8012ae8:	d903      	bls.n	8012af2 <_svfiprintf_r+0x196>
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d0c8      	beq.n	8012a80 <_svfiprintf_r+0x124>
 8012aee:	9105      	str	r1, [sp, #20]
 8012af0:	e7c6      	b.n	8012a80 <_svfiprintf_r+0x124>
 8012af2:	fb05 2101 	mla	r1, r5, r1, r2
 8012af6:	2301      	movs	r3, #1
 8012af8:	4607      	mov	r7, r0
 8012afa:	e7f0      	b.n	8012ade <_svfiprintf_r+0x182>
 8012afc:	ab03      	add	r3, sp, #12
 8012afe:	9300      	str	r3, [sp, #0]
 8012b00:	4622      	mov	r2, r4
 8012b02:	4b11      	ldr	r3, [pc, #68]	; (8012b48 <_svfiprintf_r+0x1ec>)
 8012b04:	a904      	add	r1, sp, #16
 8012b06:	4640      	mov	r0, r8
 8012b08:	f3af 8000 	nop.w
 8012b0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012b10:	4681      	mov	r9, r0
 8012b12:	d1d6      	bne.n	8012ac2 <_svfiprintf_r+0x166>
 8012b14:	89a3      	ldrh	r3, [r4, #12]
 8012b16:	065b      	lsls	r3, r3, #25
 8012b18:	f53f af35 	bmi.w	8012986 <_svfiprintf_r+0x2a>
 8012b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b1e:	b01d      	add	sp, #116	; 0x74
 8012b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b24:	ab03      	add	r3, sp, #12
 8012b26:	9300      	str	r3, [sp, #0]
 8012b28:	4622      	mov	r2, r4
 8012b2a:	4b07      	ldr	r3, [pc, #28]	; (8012b48 <_svfiprintf_r+0x1ec>)
 8012b2c:	a904      	add	r1, sp, #16
 8012b2e:	4640      	mov	r0, r8
 8012b30:	f000 f882 	bl	8012c38 <_printf_i>
 8012b34:	e7ea      	b.n	8012b0c <_svfiprintf_r+0x1b0>
 8012b36:	bf00      	nop
 8012b38:	08014c57 	.word	0x08014c57
 8012b3c:	08014c5d 	.word	0x08014c5d
 8012b40:	08014c61 	.word	0x08014c61
 8012b44:	00000000 	.word	0x00000000
 8012b48:	080128a9 	.word	0x080128a9

08012b4c <_printf_common>:
 8012b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b50:	4691      	mov	r9, r2
 8012b52:	461f      	mov	r7, r3
 8012b54:	688a      	ldr	r2, [r1, #8]
 8012b56:	690b      	ldr	r3, [r1, #16]
 8012b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b5c:	4293      	cmp	r3, r2
 8012b5e:	bfb8      	it	lt
 8012b60:	4613      	movlt	r3, r2
 8012b62:	f8c9 3000 	str.w	r3, [r9]
 8012b66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b6a:	4606      	mov	r6, r0
 8012b6c:	460c      	mov	r4, r1
 8012b6e:	b112      	cbz	r2, 8012b76 <_printf_common+0x2a>
 8012b70:	3301      	adds	r3, #1
 8012b72:	f8c9 3000 	str.w	r3, [r9]
 8012b76:	6823      	ldr	r3, [r4, #0]
 8012b78:	0699      	lsls	r1, r3, #26
 8012b7a:	bf42      	ittt	mi
 8012b7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012b80:	3302      	addmi	r3, #2
 8012b82:	f8c9 3000 	strmi.w	r3, [r9]
 8012b86:	6825      	ldr	r5, [r4, #0]
 8012b88:	f015 0506 	ands.w	r5, r5, #6
 8012b8c:	d107      	bne.n	8012b9e <_printf_common+0x52>
 8012b8e:	f104 0a19 	add.w	sl, r4, #25
 8012b92:	68e3      	ldr	r3, [r4, #12]
 8012b94:	f8d9 2000 	ldr.w	r2, [r9]
 8012b98:	1a9b      	subs	r3, r3, r2
 8012b9a:	42ab      	cmp	r3, r5
 8012b9c:	dc28      	bgt.n	8012bf0 <_printf_common+0xa4>
 8012b9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012ba2:	6822      	ldr	r2, [r4, #0]
 8012ba4:	3300      	adds	r3, #0
 8012ba6:	bf18      	it	ne
 8012ba8:	2301      	movne	r3, #1
 8012baa:	0692      	lsls	r2, r2, #26
 8012bac:	d42d      	bmi.n	8012c0a <_printf_common+0xbe>
 8012bae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012bb2:	4639      	mov	r1, r7
 8012bb4:	4630      	mov	r0, r6
 8012bb6:	47c0      	blx	r8
 8012bb8:	3001      	adds	r0, #1
 8012bba:	d020      	beq.n	8012bfe <_printf_common+0xb2>
 8012bbc:	6823      	ldr	r3, [r4, #0]
 8012bbe:	68e5      	ldr	r5, [r4, #12]
 8012bc0:	f8d9 2000 	ldr.w	r2, [r9]
 8012bc4:	f003 0306 	and.w	r3, r3, #6
 8012bc8:	2b04      	cmp	r3, #4
 8012bca:	bf08      	it	eq
 8012bcc:	1aad      	subeq	r5, r5, r2
 8012bce:	68a3      	ldr	r3, [r4, #8]
 8012bd0:	6922      	ldr	r2, [r4, #16]
 8012bd2:	bf0c      	ite	eq
 8012bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012bd8:	2500      	movne	r5, #0
 8012bda:	4293      	cmp	r3, r2
 8012bdc:	bfc4      	itt	gt
 8012bde:	1a9b      	subgt	r3, r3, r2
 8012be0:	18ed      	addgt	r5, r5, r3
 8012be2:	f04f 0900 	mov.w	r9, #0
 8012be6:	341a      	adds	r4, #26
 8012be8:	454d      	cmp	r5, r9
 8012bea:	d11a      	bne.n	8012c22 <_printf_common+0xd6>
 8012bec:	2000      	movs	r0, #0
 8012bee:	e008      	b.n	8012c02 <_printf_common+0xb6>
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	4652      	mov	r2, sl
 8012bf4:	4639      	mov	r1, r7
 8012bf6:	4630      	mov	r0, r6
 8012bf8:	47c0      	blx	r8
 8012bfa:	3001      	adds	r0, #1
 8012bfc:	d103      	bne.n	8012c06 <_printf_common+0xba>
 8012bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8012c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c06:	3501      	adds	r5, #1
 8012c08:	e7c3      	b.n	8012b92 <_printf_common+0x46>
 8012c0a:	18e1      	adds	r1, r4, r3
 8012c0c:	1c5a      	adds	r2, r3, #1
 8012c0e:	2030      	movs	r0, #48	; 0x30
 8012c10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c14:	4422      	add	r2, r4
 8012c16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c1e:	3302      	adds	r3, #2
 8012c20:	e7c5      	b.n	8012bae <_printf_common+0x62>
 8012c22:	2301      	movs	r3, #1
 8012c24:	4622      	mov	r2, r4
 8012c26:	4639      	mov	r1, r7
 8012c28:	4630      	mov	r0, r6
 8012c2a:	47c0      	blx	r8
 8012c2c:	3001      	adds	r0, #1
 8012c2e:	d0e6      	beq.n	8012bfe <_printf_common+0xb2>
 8012c30:	f109 0901 	add.w	r9, r9, #1
 8012c34:	e7d8      	b.n	8012be8 <_printf_common+0x9c>
	...

08012c38 <_printf_i>:
 8012c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012c40:	460c      	mov	r4, r1
 8012c42:	7e09      	ldrb	r1, [r1, #24]
 8012c44:	b085      	sub	sp, #20
 8012c46:	296e      	cmp	r1, #110	; 0x6e
 8012c48:	4617      	mov	r7, r2
 8012c4a:	4606      	mov	r6, r0
 8012c4c:	4698      	mov	r8, r3
 8012c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c50:	f000 80b3 	beq.w	8012dba <_printf_i+0x182>
 8012c54:	d822      	bhi.n	8012c9c <_printf_i+0x64>
 8012c56:	2963      	cmp	r1, #99	; 0x63
 8012c58:	d036      	beq.n	8012cc8 <_printf_i+0x90>
 8012c5a:	d80a      	bhi.n	8012c72 <_printf_i+0x3a>
 8012c5c:	2900      	cmp	r1, #0
 8012c5e:	f000 80b9 	beq.w	8012dd4 <_printf_i+0x19c>
 8012c62:	2958      	cmp	r1, #88	; 0x58
 8012c64:	f000 8083 	beq.w	8012d6e <_printf_i+0x136>
 8012c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012c70:	e032      	b.n	8012cd8 <_printf_i+0xa0>
 8012c72:	2964      	cmp	r1, #100	; 0x64
 8012c74:	d001      	beq.n	8012c7a <_printf_i+0x42>
 8012c76:	2969      	cmp	r1, #105	; 0x69
 8012c78:	d1f6      	bne.n	8012c68 <_printf_i+0x30>
 8012c7a:	6820      	ldr	r0, [r4, #0]
 8012c7c:	6813      	ldr	r3, [r2, #0]
 8012c7e:	0605      	lsls	r5, r0, #24
 8012c80:	f103 0104 	add.w	r1, r3, #4
 8012c84:	d52a      	bpl.n	8012cdc <_printf_i+0xa4>
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	6011      	str	r1, [r2, #0]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	da03      	bge.n	8012c96 <_printf_i+0x5e>
 8012c8e:	222d      	movs	r2, #45	; 0x2d
 8012c90:	425b      	negs	r3, r3
 8012c92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012c96:	486f      	ldr	r0, [pc, #444]	; (8012e54 <_printf_i+0x21c>)
 8012c98:	220a      	movs	r2, #10
 8012c9a:	e039      	b.n	8012d10 <_printf_i+0xd8>
 8012c9c:	2973      	cmp	r1, #115	; 0x73
 8012c9e:	f000 809d 	beq.w	8012ddc <_printf_i+0x1a4>
 8012ca2:	d808      	bhi.n	8012cb6 <_printf_i+0x7e>
 8012ca4:	296f      	cmp	r1, #111	; 0x6f
 8012ca6:	d020      	beq.n	8012cea <_printf_i+0xb2>
 8012ca8:	2970      	cmp	r1, #112	; 0x70
 8012caa:	d1dd      	bne.n	8012c68 <_printf_i+0x30>
 8012cac:	6823      	ldr	r3, [r4, #0]
 8012cae:	f043 0320 	orr.w	r3, r3, #32
 8012cb2:	6023      	str	r3, [r4, #0]
 8012cb4:	e003      	b.n	8012cbe <_printf_i+0x86>
 8012cb6:	2975      	cmp	r1, #117	; 0x75
 8012cb8:	d017      	beq.n	8012cea <_printf_i+0xb2>
 8012cba:	2978      	cmp	r1, #120	; 0x78
 8012cbc:	d1d4      	bne.n	8012c68 <_printf_i+0x30>
 8012cbe:	2378      	movs	r3, #120	; 0x78
 8012cc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012cc4:	4864      	ldr	r0, [pc, #400]	; (8012e58 <_printf_i+0x220>)
 8012cc6:	e055      	b.n	8012d74 <_printf_i+0x13c>
 8012cc8:	6813      	ldr	r3, [r2, #0]
 8012cca:	1d19      	adds	r1, r3, #4
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	6011      	str	r1, [r2, #0]
 8012cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012cd8:	2301      	movs	r3, #1
 8012cda:	e08c      	b.n	8012df6 <_printf_i+0x1be>
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	6011      	str	r1, [r2, #0]
 8012ce0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012ce4:	bf18      	it	ne
 8012ce6:	b21b      	sxthne	r3, r3
 8012ce8:	e7cf      	b.n	8012c8a <_printf_i+0x52>
 8012cea:	6813      	ldr	r3, [r2, #0]
 8012cec:	6825      	ldr	r5, [r4, #0]
 8012cee:	1d18      	adds	r0, r3, #4
 8012cf0:	6010      	str	r0, [r2, #0]
 8012cf2:	0628      	lsls	r0, r5, #24
 8012cf4:	d501      	bpl.n	8012cfa <_printf_i+0xc2>
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	e002      	b.n	8012d00 <_printf_i+0xc8>
 8012cfa:	0668      	lsls	r0, r5, #25
 8012cfc:	d5fb      	bpl.n	8012cf6 <_printf_i+0xbe>
 8012cfe:	881b      	ldrh	r3, [r3, #0]
 8012d00:	4854      	ldr	r0, [pc, #336]	; (8012e54 <_printf_i+0x21c>)
 8012d02:	296f      	cmp	r1, #111	; 0x6f
 8012d04:	bf14      	ite	ne
 8012d06:	220a      	movne	r2, #10
 8012d08:	2208      	moveq	r2, #8
 8012d0a:	2100      	movs	r1, #0
 8012d0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d10:	6865      	ldr	r5, [r4, #4]
 8012d12:	60a5      	str	r5, [r4, #8]
 8012d14:	2d00      	cmp	r5, #0
 8012d16:	f2c0 8095 	blt.w	8012e44 <_printf_i+0x20c>
 8012d1a:	6821      	ldr	r1, [r4, #0]
 8012d1c:	f021 0104 	bic.w	r1, r1, #4
 8012d20:	6021      	str	r1, [r4, #0]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d13d      	bne.n	8012da2 <_printf_i+0x16a>
 8012d26:	2d00      	cmp	r5, #0
 8012d28:	f040 808e 	bne.w	8012e48 <_printf_i+0x210>
 8012d2c:	4665      	mov	r5, ip
 8012d2e:	2a08      	cmp	r2, #8
 8012d30:	d10b      	bne.n	8012d4a <_printf_i+0x112>
 8012d32:	6823      	ldr	r3, [r4, #0]
 8012d34:	07db      	lsls	r3, r3, #31
 8012d36:	d508      	bpl.n	8012d4a <_printf_i+0x112>
 8012d38:	6923      	ldr	r3, [r4, #16]
 8012d3a:	6862      	ldr	r2, [r4, #4]
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	bfde      	ittt	le
 8012d40:	2330      	movle	r3, #48	; 0x30
 8012d42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012d46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012d4a:	ebac 0305 	sub.w	r3, ip, r5
 8012d4e:	6123      	str	r3, [r4, #16]
 8012d50:	f8cd 8000 	str.w	r8, [sp]
 8012d54:	463b      	mov	r3, r7
 8012d56:	aa03      	add	r2, sp, #12
 8012d58:	4621      	mov	r1, r4
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	f7ff fef6 	bl	8012b4c <_printf_common>
 8012d60:	3001      	adds	r0, #1
 8012d62:	d14d      	bne.n	8012e00 <_printf_i+0x1c8>
 8012d64:	f04f 30ff 	mov.w	r0, #4294967295
 8012d68:	b005      	add	sp, #20
 8012d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d6e:	4839      	ldr	r0, [pc, #228]	; (8012e54 <_printf_i+0x21c>)
 8012d70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012d74:	6813      	ldr	r3, [r2, #0]
 8012d76:	6821      	ldr	r1, [r4, #0]
 8012d78:	1d1d      	adds	r5, r3, #4
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	6015      	str	r5, [r2, #0]
 8012d7e:	060a      	lsls	r2, r1, #24
 8012d80:	d50b      	bpl.n	8012d9a <_printf_i+0x162>
 8012d82:	07ca      	lsls	r2, r1, #31
 8012d84:	bf44      	itt	mi
 8012d86:	f041 0120 	orrmi.w	r1, r1, #32
 8012d8a:	6021      	strmi	r1, [r4, #0]
 8012d8c:	b91b      	cbnz	r3, 8012d96 <_printf_i+0x15e>
 8012d8e:	6822      	ldr	r2, [r4, #0]
 8012d90:	f022 0220 	bic.w	r2, r2, #32
 8012d94:	6022      	str	r2, [r4, #0]
 8012d96:	2210      	movs	r2, #16
 8012d98:	e7b7      	b.n	8012d0a <_printf_i+0xd2>
 8012d9a:	064d      	lsls	r5, r1, #25
 8012d9c:	bf48      	it	mi
 8012d9e:	b29b      	uxthmi	r3, r3
 8012da0:	e7ef      	b.n	8012d82 <_printf_i+0x14a>
 8012da2:	4665      	mov	r5, ip
 8012da4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012da8:	fb02 3311 	mls	r3, r2, r1, r3
 8012dac:	5cc3      	ldrb	r3, [r0, r3]
 8012dae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012db2:	460b      	mov	r3, r1
 8012db4:	2900      	cmp	r1, #0
 8012db6:	d1f5      	bne.n	8012da4 <_printf_i+0x16c>
 8012db8:	e7b9      	b.n	8012d2e <_printf_i+0xf6>
 8012dba:	6813      	ldr	r3, [r2, #0]
 8012dbc:	6825      	ldr	r5, [r4, #0]
 8012dbe:	6961      	ldr	r1, [r4, #20]
 8012dc0:	1d18      	adds	r0, r3, #4
 8012dc2:	6010      	str	r0, [r2, #0]
 8012dc4:	0628      	lsls	r0, r5, #24
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	d501      	bpl.n	8012dce <_printf_i+0x196>
 8012dca:	6019      	str	r1, [r3, #0]
 8012dcc:	e002      	b.n	8012dd4 <_printf_i+0x19c>
 8012dce:	066a      	lsls	r2, r5, #25
 8012dd0:	d5fb      	bpl.n	8012dca <_printf_i+0x192>
 8012dd2:	8019      	strh	r1, [r3, #0]
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	6123      	str	r3, [r4, #16]
 8012dd8:	4665      	mov	r5, ip
 8012dda:	e7b9      	b.n	8012d50 <_printf_i+0x118>
 8012ddc:	6813      	ldr	r3, [r2, #0]
 8012dde:	1d19      	adds	r1, r3, #4
 8012de0:	6011      	str	r1, [r2, #0]
 8012de2:	681d      	ldr	r5, [r3, #0]
 8012de4:	6862      	ldr	r2, [r4, #4]
 8012de6:	2100      	movs	r1, #0
 8012de8:	4628      	mov	r0, r5
 8012dea:	f7ed fa81 	bl	80002f0 <memchr>
 8012dee:	b108      	cbz	r0, 8012df4 <_printf_i+0x1bc>
 8012df0:	1b40      	subs	r0, r0, r5
 8012df2:	6060      	str	r0, [r4, #4]
 8012df4:	6863      	ldr	r3, [r4, #4]
 8012df6:	6123      	str	r3, [r4, #16]
 8012df8:	2300      	movs	r3, #0
 8012dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012dfe:	e7a7      	b.n	8012d50 <_printf_i+0x118>
 8012e00:	6923      	ldr	r3, [r4, #16]
 8012e02:	462a      	mov	r2, r5
 8012e04:	4639      	mov	r1, r7
 8012e06:	4630      	mov	r0, r6
 8012e08:	47c0      	blx	r8
 8012e0a:	3001      	adds	r0, #1
 8012e0c:	d0aa      	beq.n	8012d64 <_printf_i+0x12c>
 8012e0e:	6823      	ldr	r3, [r4, #0]
 8012e10:	079b      	lsls	r3, r3, #30
 8012e12:	d413      	bmi.n	8012e3c <_printf_i+0x204>
 8012e14:	68e0      	ldr	r0, [r4, #12]
 8012e16:	9b03      	ldr	r3, [sp, #12]
 8012e18:	4298      	cmp	r0, r3
 8012e1a:	bfb8      	it	lt
 8012e1c:	4618      	movlt	r0, r3
 8012e1e:	e7a3      	b.n	8012d68 <_printf_i+0x130>
 8012e20:	2301      	movs	r3, #1
 8012e22:	464a      	mov	r2, r9
 8012e24:	4639      	mov	r1, r7
 8012e26:	4630      	mov	r0, r6
 8012e28:	47c0      	blx	r8
 8012e2a:	3001      	adds	r0, #1
 8012e2c:	d09a      	beq.n	8012d64 <_printf_i+0x12c>
 8012e2e:	3501      	adds	r5, #1
 8012e30:	68e3      	ldr	r3, [r4, #12]
 8012e32:	9a03      	ldr	r2, [sp, #12]
 8012e34:	1a9b      	subs	r3, r3, r2
 8012e36:	42ab      	cmp	r3, r5
 8012e38:	dcf2      	bgt.n	8012e20 <_printf_i+0x1e8>
 8012e3a:	e7eb      	b.n	8012e14 <_printf_i+0x1dc>
 8012e3c:	2500      	movs	r5, #0
 8012e3e:	f104 0919 	add.w	r9, r4, #25
 8012e42:	e7f5      	b.n	8012e30 <_printf_i+0x1f8>
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d1ac      	bne.n	8012da2 <_printf_i+0x16a>
 8012e48:	7803      	ldrb	r3, [r0, #0]
 8012e4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e52:	e76c      	b.n	8012d2e <_printf_i+0xf6>
 8012e54:	08014c68 	.word	0x08014c68
 8012e58:	08014c79 	.word	0x08014c79

08012e5c <memmove>:
 8012e5c:	4288      	cmp	r0, r1
 8012e5e:	b510      	push	{r4, lr}
 8012e60:	eb01 0302 	add.w	r3, r1, r2
 8012e64:	d807      	bhi.n	8012e76 <memmove+0x1a>
 8012e66:	1e42      	subs	r2, r0, #1
 8012e68:	4299      	cmp	r1, r3
 8012e6a:	d00a      	beq.n	8012e82 <memmove+0x26>
 8012e6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e70:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012e74:	e7f8      	b.n	8012e68 <memmove+0xc>
 8012e76:	4283      	cmp	r3, r0
 8012e78:	d9f5      	bls.n	8012e66 <memmove+0xa>
 8012e7a:	1881      	adds	r1, r0, r2
 8012e7c:	1ad2      	subs	r2, r2, r3
 8012e7e:	42d3      	cmn	r3, r2
 8012e80:	d100      	bne.n	8012e84 <memmove+0x28>
 8012e82:	bd10      	pop	{r4, pc}
 8012e84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012e88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012e8c:	e7f7      	b.n	8012e7e <memmove+0x22>

08012e8e <_realloc_r>:
 8012e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e90:	4607      	mov	r7, r0
 8012e92:	4614      	mov	r4, r2
 8012e94:	460e      	mov	r6, r1
 8012e96:	b921      	cbnz	r1, 8012ea2 <_realloc_r+0x14>
 8012e98:	4611      	mov	r1, r2
 8012e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012e9e:	f7ff bc21 	b.w	80126e4 <_malloc_r>
 8012ea2:	b922      	cbnz	r2, 8012eae <_realloc_r+0x20>
 8012ea4:	f7ff fbd0 	bl	8012648 <_free_r>
 8012ea8:	4625      	mov	r5, r4
 8012eaa:	4628      	mov	r0, r5
 8012eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eae:	f000 f814 	bl	8012eda <_malloc_usable_size_r>
 8012eb2:	42a0      	cmp	r0, r4
 8012eb4:	d20f      	bcs.n	8012ed6 <_realloc_r+0x48>
 8012eb6:	4621      	mov	r1, r4
 8012eb8:	4638      	mov	r0, r7
 8012eba:	f7ff fc13 	bl	80126e4 <_malloc_r>
 8012ebe:	4605      	mov	r5, r0
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	d0f2      	beq.n	8012eaa <_realloc_r+0x1c>
 8012ec4:	4631      	mov	r1, r6
 8012ec6:	4622      	mov	r2, r4
 8012ec8:	f7ff fbaa 	bl	8012620 <memcpy>
 8012ecc:	4631      	mov	r1, r6
 8012ece:	4638      	mov	r0, r7
 8012ed0:	f7ff fbba 	bl	8012648 <_free_r>
 8012ed4:	e7e9      	b.n	8012eaa <_realloc_r+0x1c>
 8012ed6:	4635      	mov	r5, r6
 8012ed8:	e7e7      	b.n	8012eaa <_realloc_r+0x1c>

08012eda <_malloc_usable_size_r>:
 8012eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ede:	1f18      	subs	r0, r3, #4
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	bfbc      	itt	lt
 8012ee4:	580b      	ldrlt	r3, [r1, r0]
 8012ee6:	18c0      	addlt	r0, r0, r3
 8012ee8:	4770      	bx	lr

08012eea <checkint>:
 8012eea:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8012eee:	2b7e      	cmp	r3, #126	; 0x7e
 8012ef0:	dd10      	ble.n	8012f14 <checkint+0x2a>
 8012ef2:	2b96      	cmp	r3, #150	; 0x96
 8012ef4:	dc0c      	bgt.n	8012f10 <checkint+0x26>
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012efc:	fa02 f303 	lsl.w	r3, r2, r3
 8012f00:	1e5a      	subs	r2, r3, #1
 8012f02:	4202      	tst	r2, r0
 8012f04:	d106      	bne.n	8012f14 <checkint+0x2a>
 8012f06:	4203      	tst	r3, r0
 8012f08:	bf0c      	ite	eq
 8012f0a:	2002      	moveq	r0, #2
 8012f0c:	2001      	movne	r0, #1
 8012f0e:	4770      	bx	lr
 8012f10:	2002      	movs	r0, #2
 8012f12:	4770      	bx	lr
 8012f14:	2000      	movs	r0, #0
 8012f16:	4770      	bx	lr

08012f18 <powf>:
 8012f18:	ee10 1a10 	vmov	r1, s0
 8012f1c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8012f20:	ee10 4a90 	vmov	r4, s1
 8012f24:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8012f28:	0062      	lsls	r2, r4, #1
 8012f2a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8012f2e:	eef0 4a60 	vmov.f32	s9, s1
 8012f32:	f102 30ff 	add.w	r0, r2, #4294967295
 8012f36:	4b92      	ldr	r3, [pc, #584]	; (8013180 <powf+0x268>)
 8012f38:	d255      	bcs.n	8012fe6 <powf+0xce>
 8012f3a:	4298      	cmp	r0, r3
 8012f3c:	d855      	bhi.n	8012fea <powf+0xd2>
 8012f3e:	2000      	movs	r0, #0
 8012f40:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8012f44:	4a8f      	ldr	r2, [pc, #572]	; (8013184 <powf+0x26c>)
 8012f46:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 8012f4a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8012f4e:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8012f52:	0ddb      	lsrs	r3, r3, #23
 8012f54:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8012f58:	05db      	lsls	r3, r3, #23
 8012f5a:	ed94 6b00 	vldr	d6, [r4]
 8012f5e:	1ac9      	subs	r1, r1, r3
 8012f60:	ee07 1a90 	vmov	s15, r1
 8012f64:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8012f68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012f6c:	eea6 2b07 	vfma.f64	d2, d6, d7
 8012f70:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8012f74:	ee22 6b02 	vmul.f64	d6, d2, d2
 8012f78:	eea2 7b05 	vfma.f64	d7, d2, d5
 8012f7c:	15db      	asrs	r3, r3, #23
 8012f7e:	ed94 5b02 	vldr	d5, [r4, #8]
 8012f82:	ee00 3a10 	vmov	s0, r3
 8012f86:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8012f8a:	ee30 0b05 	vadd.f64	d0, d0, d5
 8012f8e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8012f92:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8012f96:	eea2 0b05 	vfma.f64	d0, d2, d5
 8012f9a:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8012f9e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8012fa2:	eea6 0b05 	vfma.f64	d0, d6, d5
 8012fa6:	ee26 6b06 	vmul.f64	d6, d6, d6
 8012faa:	eea7 0b06 	vfma.f64	d0, d7, d6
 8012fae:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8012fb2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012fb6:	ee10 3a90 	vmov	r3, s1
 8012fba:	2500      	movs	r5, #0
 8012fbc:	0bda      	lsrs	r2, r3, #15
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	b292      	uxth	r2, r2
 8012fc2:	f248 04be 	movw	r4, #32958	; 0x80be
 8012fc6:	429d      	cmp	r5, r3
 8012fc8:	bf08      	it	eq
 8012fca:	4294      	cmpeq	r4, r2
 8012fcc:	f080 8094 	bcs.w	80130f8 <powf+0x1e0>
 8012fd0:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8013168 <powf+0x250>
 8012fd4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fdc:	dd76      	ble.n	80130cc <powf+0x1b4>
 8012fde:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8012fe2:	f000 be57 	b.w	8013c94 <__math_oflowf>
 8012fe6:	4298      	cmp	r0, r3
 8012fe8:	d92d      	bls.n	8013046 <powf+0x12e>
 8012fea:	b952      	cbnz	r2, 8013002 <powf+0xea>
 8012fec:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8012ff0:	005b      	lsls	r3, r3, #1
 8012ff2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8012ff6:	f240 80ae 	bls.w	8013156 <powf+0x23e>
 8012ffa:	ee30 0a24 	vadd.f32	s0, s0, s9
 8012ffe:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8013002:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8013006:	d105      	bne.n	8013014 <powf+0xfc>
 8013008:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801300c:	0064      	lsls	r4, r4, #1
 801300e:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8013012:	e7f0      	b.n	8012ff6 <powf+0xde>
 8013014:	004b      	lsls	r3, r1, #1
 8013016:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801301a:	d8ee      	bhi.n	8012ffa <powf+0xe2>
 801301c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8013020:	d1eb      	bne.n	8012ffa <powf+0xe2>
 8013022:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8013026:	f000 8096 	beq.w	8013156 <powf+0x23e>
 801302a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801302e:	ea6f 0404 	mvn.w	r4, r4
 8013032:	bf34      	ite	cc
 8013034:	2300      	movcc	r3, #0
 8013036:	2301      	movcs	r3, #1
 8013038:	0fe4      	lsrs	r4, r4, #31
 801303a:	42a3      	cmp	r3, r4
 801303c:	f040 808e 	bne.w	801315c <powf+0x244>
 8013040:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8013044:	e7db      	b.n	8012ffe <powf+0xe6>
 8013046:	004d      	lsls	r5, r1, #1
 8013048:	1e6a      	subs	r2, r5, #1
 801304a:	429a      	cmp	r2, r3
 801304c:	d91b      	bls.n	8013086 <powf+0x16e>
 801304e:	2900      	cmp	r1, #0
 8013050:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013054:	da0e      	bge.n	8013074 <powf+0x15c>
 8013056:	ee10 0a90 	vmov	r0, s1
 801305a:	f7ff ff46 	bl	8012eea <checkint>
 801305e:	2801      	cmp	r0, #1
 8013060:	d108      	bne.n	8013074 <powf+0x15c>
 8013062:	eeb1 0a40 	vneg.f32	s0, s0
 8013066:	b93d      	cbnz	r5, 8013078 <powf+0x160>
 8013068:	2c00      	cmp	r4, #0
 801306a:	dac8      	bge.n	8012ffe <powf+0xe6>
 801306c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013070:	f000 be16 	b.w	8013ca0 <__math_divzerof>
 8013074:	2000      	movs	r0, #0
 8013076:	e7f6      	b.n	8013066 <powf+0x14e>
 8013078:	2c00      	cmp	r4, #0
 801307a:	dac0      	bge.n	8012ffe <powf+0xe6>
 801307c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013080:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013084:	e7bb      	b.n	8012ffe <powf+0xe6>
 8013086:	2900      	cmp	r1, #0
 8013088:	da1e      	bge.n	80130c8 <powf+0x1b0>
 801308a:	ee10 0a90 	vmov	r0, s1
 801308e:	f7ff ff2c 	bl	8012eea <checkint>
 8013092:	b918      	cbnz	r0, 801309c <powf+0x184>
 8013094:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8013098:	f000 be12 	b.w	8013cc0 <__math_invalidf>
 801309c:	2801      	cmp	r0, #1
 801309e:	bf0c      	ite	eq
 80130a0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80130a4:	2000      	movne	r0, #0
 80130a6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80130aa:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80130ae:	f4bf af47 	bcs.w	8012f40 <powf+0x28>
 80130b2:	eddf 0a35 	vldr	s1, [pc, #212]	; 8013188 <powf+0x270>
 80130b6:	ee20 0a20 	vmul.f32	s0, s0, s1
 80130ba:	ee10 3a10 	vmov	r3, s0
 80130be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80130c2:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80130c6:	e73b      	b.n	8012f40 <powf+0x28>
 80130c8:	2000      	movs	r0, #0
 80130ca:	e7ee      	b.n	80130aa <powf+0x192>
 80130cc:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8013170 <powf+0x258>
 80130d0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80130d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130d8:	d803      	bhi.n	80130e2 <powf+0x1ca>
 80130da:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80130de:	f000 bdcd 	b.w	8013c7c <__math_uflowf>
 80130e2:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8013178 <powf+0x260>
 80130e6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80130ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ee:	d503      	bpl.n	80130f8 <powf+0x1e0>
 80130f0:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80130f4:	f000 bdc8 	b.w	8013c88 <__math_may_uflowf>
 80130f8:	4924      	ldr	r1, [pc, #144]	; (801318c <powf+0x274>)
 80130fa:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 80130fe:	ee30 6b07 	vadd.f64	d6, d0, d7
 8013102:	ec55 4b16 	vmov	r4, r5, d6
 8013106:	ee36 7b47 	vsub.f64	d7, d6, d7
 801310a:	f004 021f 	and.w	r2, r4, #31
 801310e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013112:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8013116:	ee30 0b47 	vsub.f64	d0, d0, d7
 801311a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801311e:	e9d2 6700 	ldrd	r6, r7, [r2]
 8013122:	eea0 7b06 	vfma.f64	d7, d0, d6
 8013126:	1824      	adds	r4, r4, r0
 8013128:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801312c:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8013130:	2000      	movs	r0, #0
 8013132:	1982      	adds	r2, r0, r6
 8013134:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8013138:	eb41 0307 	adc.w	r3, r1, r7
 801313c:	eea0 6b05 	vfma.f64	d6, d0, d5
 8013140:	ee20 0b00 	vmul.f64	d0, d0, d0
 8013144:	eea6 7b00 	vfma.f64	d7, d6, d0
 8013148:	ec43 2b16 	vmov	d6, r2, r3
 801314c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8013150:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013154:	e753      	b.n	8012ffe <powf+0xe6>
 8013156:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801315a:	e750      	b.n	8012ffe <powf+0xe6>
 801315c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8013190 <powf+0x278>
 8013160:	e74d      	b.n	8012ffe <powf+0xe6>
 8013162:	bf00      	nop
 8013164:	f3af 8000 	nop.w
 8013168:	ffd1d571 	.word	0xffd1d571
 801316c:	405fffff 	.word	0x405fffff
 8013170:	00000000 	.word	0x00000000
 8013174:	c062c000 	.word	0xc062c000
 8013178:	00000000 	.word	0x00000000
 801317c:	c062a000 	.word	0xc062a000
 8013180:	fefffffe 	.word	0xfefffffe
 8013184:	08014cf0 	.word	0x08014cf0
 8013188:	4b000000 	.word	0x4b000000
 801318c:	08014e68 	.word	0x08014e68
	...

08013198 <pow>:
 8013198:	b570      	push	{r4, r5, r6, lr}
 801319a:	ed2d 8b0a 	vpush	{d8-d12}
 801319e:	eeb0 9b40 	vmov.f64	d9, d0
 80131a2:	eeb0 8b41 	vmov.f64	d8, d1
 80131a6:	4c8c      	ldr	r4, [pc, #560]	; (80133d8 <pow+0x240>)
 80131a8:	b08a      	sub	sp, #40	; 0x28
 80131aa:	f000 f9c1 	bl	8013530 <__ieee754_pow>
 80131ae:	f994 3000 	ldrsb.w	r3, [r4]
 80131b2:	eeb0 ab40 	vmov.f64	d10, d0
 80131b6:	1c5a      	adds	r2, r3, #1
 80131b8:	4626      	mov	r6, r4
 80131ba:	d04b      	beq.n	8013254 <pow+0xbc>
 80131bc:	eeb4 8b48 	vcmp.f64	d8, d8
 80131c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131c4:	d646      	bvs.n	8013254 <pow+0xbc>
 80131c6:	eeb4 9b49 	vcmp.f64	d9, d9
 80131ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ce:	d719      	bvc.n	8013204 <pow+0x6c>
 80131d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80131d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d8:	d13c      	bne.n	8013254 <pow+0xbc>
 80131da:	2201      	movs	r2, #1
 80131dc:	9200      	str	r2, [sp, #0]
 80131de:	497f      	ldr	r1, [pc, #508]	; (80133dc <pow+0x244>)
 80131e0:	4a7f      	ldr	r2, [pc, #508]	; (80133e0 <pow+0x248>)
 80131e2:	9201      	str	r2, [sp, #4]
 80131e4:	2000      	movs	r0, #0
 80131e6:	2200      	movs	r2, #0
 80131e8:	2b02      	cmp	r3, #2
 80131ea:	9208      	str	r2, [sp, #32]
 80131ec:	ed8d 9b02 	vstr	d9, [sp, #8]
 80131f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80131f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80131f8:	d02a      	beq.n	8013250 <pow+0xb8>
 80131fa:	4668      	mov	r0, sp
 80131fc:	f000 fd80 	bl	8013d00 <matherr>
 8013200:	bb00      	cbnz	r0, 8013244 <pow+0xac>
 8013202:	e04e      	b.n	80132a2 <pow+0x10a>
 8013204:	ed9f bb72 	vldr	d11, [pc, #456]	; 80133d0 <pow+0x238>
 8013208:	eeb4 9b4b 	vcmp.f64	d9, d11
 801320c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013210:	eeb0 cb4b 	vmov.f64	d12, d11
 8013214:	d14a      	bne.n	80132ac <pow+0x114>
 8013216:	eeb4 8b4b 	vcmp.f64	d8, d11
 801321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801321e:	d11f      	bne.n	8013260 <pow+0xc8>
 8013220:	2201      	movs	r2, #1
 8013222:	9200      	str	r2, [sp, #0]
 8013224:	4a6e      	ldr	r2, [pc, #440]	; (80133e0 <pow+0x248>)
 8013226:	9201      	str	r2, [sp, #4]
 8013228:	2200      	movs	r2, #0
 801322a:	9208      	str	r2, [sp, #32]
 801322c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8013230:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013234:	ed8d bb06 	vstr	d11, [sp, #24]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d0de      	beq.n	80131fa <pow+0x62>
 801323c:	4b67      	ldr	r3, [pc, #412]	; (80133dc <pow+0x244>)
 801323e:	2200      	movs	r2, #0
 8013240:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013244:	9b08      	ldr	r3, [sp, #32]
 8013246:	b11b      	cbz	r3, 8013250 <pow+0xb8>
 8013248:	f7ff f9b0 	bl	80125ac <__errno>
 801324c:	9b08      	ldr	r3, [sp, #32]
 801324e:	6003      	str	r3, [r0, #0]
 8013250:	ed9d ab06 	vldr	d10, [sp, #24]
 8013254:	eeb0 0b4a 	vmov.f64	d0, d10
 8013258:	b00a      	add	sp, #40	; 0x28
 801325a:	ecbd 8b0a 	vpop	{d8-d12}
 801325e:	bd70      	pop	{r4, r5, r6, pc}
 8013260:	eeb0 0b48 	vmov.f64	d0, d8
 8013264:	f000 fd44 	bl	8013cf0 <finite>
 8013268:	2800      	cmp	r0, #0
 801326a:	d0f3      	beq.n	8013254 <pow+0xbc>
 801326c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8013270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013274:	d5ee      	bpl.n	8013254 <pow+0xbc>
 8013276:	2301      	movs	r3, #1
 8013278:	9300      	str	r3, [sp, #0]
 801327a:	4b59      	ldr	r3, [pc, #356]	; (80133e0 <pow+0x248>)
 801327c:	9301      	str	r3, [sp, #4]
 801327e:	2300      	movs	r3, #0
 8013280:	9308      	str	r3, [sp, #32]
 8013282:	f994 3000 	ldrsb.w	r3, [r4]
 8013286:	ed8d 9b02 	vstr	d9, [sp, #8]
 801328a:	ed8d 8b04 	vstr	d8, [sp, #16]
 801328e:	b913      	cbnz	r3, 8013296 <pow+0xfe>
 8013290:	ed8d bb06 	vstr	d11, [sp, #24]
 8013294:	e7b1      	b.n	80131fa <pow+0x62>
 8013296:	4953      	ldr	r1, [pc, #332]	; (80133e4 <pow+0x24c>)
 8013298:	2000      	movs	r0, #0
 801329a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801329e:	2b02      	cmp	r3, #2
 80132a0:	d1ab      	bne.n	80131fa <pow+0x62>
 80132a2:	f7ff f983 	bl	80125ac <__errno>
 80132a6:	2321      	movs	r3, #33	; 0x21
 80132a8:	6003      	str	r3, [r0, #0]
 80132aa:	e7cb      	b.n	8013244 <pow+0xac>
 80132ac:	f000 fd20 	bl	8013cf0 <finite>
 80132b0:	4605      	mov	r5, r0
 80132b2:	2800      	cmp	r0, #0
 80132b4:	d164      	bne.n	8013380 <pow+0x1e8>
 80132b6:	eeb0 0b49 	vmov.f64	d0, d9
 80132ba:	f000 fd19 	bl	8013cf0 <finite>
 80132be:	2800      	cmp	r0, #0
 80132c0:	d05e      	beq.n	8013380 <pow+0x1e8>
 80132c2:	eeb0 0b48 	vmov.f64	d0, d8
 80132c6:	f000 fd13 	bl	8013cf0 <finite>
 80132ca:	2800      	cmp	r0, #0
 80132cc:	d058      	beq.n	8013380 <pow+0x1e8>
 80132ce:	eeb4 ab4a 	vcmp.f64	d10, d10
 80132d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d6:	f994 3000 	ldrsb.w	r3, [r4]
 80132da:	4a41      	ldr	r2, [pc, #260]	; (80133e0 <pow+0x248>)
 80132dc:	d70e      	bvc.n	80132fc <pow+0x164>
 80132de:	2101      	movs	r1, #1
 80132e0:	e9cd 1200 	strd	r1, r2, [sp]
 80132e4:	9508      	str	r5, [sp, #32]
 80132e6:	ed8d 9b02 	vstr	d9, [sp, #8]
 80132ea:	ed8d 8b04 	vstr	d8, [sp, #16]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d0ce      	beq.n	8013290 <pow+0xf8>
 80132f2:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 80132f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80132fa:	e7d0      	b.n	801329e <pow+0x106>
 80132fc:	2103      	movs	r1, #3
 80132fe:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013302:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013306:	ee28 8b07 	vmul.f64	d8, d8, d7
 801330a:	e9cd 1200 	strd	r1, r2, [sp]
 801330e:	9508      	str	r5, [sp, #32]
 8013310:	ed8d 9b02 	vstr	d9, [sp, #8]
 8013314:	b9fb      	cbnz	r3, 8013356 <pow+0x1be>
 8013316:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801331a:	4b33      	ldr	r3, [pc, #204]	; (80133e8 <pow+0x250>)
 801331c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013324:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013328:	d54b      	bpl.n	80133c2 <pow+0x22a>
 801332a:	eeb0 0b48 	vmov.f64	d0, d8
 801332e:	f000 fcf3 	bl	8013d18 <rint>
 8013332:	eeb4 0b48 	vcmp.f64	d0, d8
 8013336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801333a:	d004      	beq.n	8013346 <pow+0x1ae>
 801333c:	4b2b      	ldr	r3, [pc, #172]	; (80133ec <pow+0x254>)
 801333e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013342:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013346:	f996 3000 	ldrsb.w	r3, [r6]
 801334a:	2b02      	cmp	r3, #2
 801334c:	d139      	bne.n	80133c2 <pow+0x22a>
 801334e:	f7ff f92d 	bl	80125ac <__errno>
 8013352:	2322      	movs	r3, #34	; 0x22
 8013354:	e7a8      	b.n	80132a8 <pow+0x110>
 8013356:	4b26      	ldr	r3, [pc, #152]	; (80133f0 <pow+0x258>)
 8013358:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801335c:	2200      	movs	r2, #0
 801335e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013362:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013366:	d5ee      	bpl.n	8013346 <pow+0x1ae>
 8013368:	eeb0 0b48 	vmov.f64	d0, d8
 801336c:	f000 fcd4 	bl	8013d18 <rint>
 8013370:	eeb4 0b48 	vcmp.f64	d0, d8
 8013374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013378:	d0e5      	beq.n	8013346 <pow+0x1ae>
 801337a:	2200      	movs	r2, #0
 801337c:	4b19      	ldr	r3, [pc, #100]	; (80133e4 <pow+0x24c>)
 801337e:	e7e0      	b.n	8013342 <pow+0x1aa>
 8013380:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8013384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013388:	f47f af64 	bne.w	8013254 <pow+0xbc>
 801338c:	eeb0 0b49 	vmov.f64	d0, d9
 8013390:	f000 fcae 	bl	8013cf0 <finite>
 8013394:	2800      	cmp	r0, #0
 8013396:	f43f af5d 	beq.w	8013254 <pow+0xbc>
 801339a:	eeb0 0b48 	vmov.f64	d0, d8
 801339e:	f000 fca7 	bl	8013cf0 <finite>
 80133a2:	2800      	cmp	r0, #0
 80133a4:	f43f af56 	beq.w	8013254 <pow+0xbc>
 80133a8:	2304      	movs	r3, #4
 80133aa:	9300      	str	r3, [sp, #0]
 80133ac:	4b0c      	ldr	r3, [pc, #48]	; (80133e0 <pow+0x248>)
 80133ae:	9301      	str	r3, [sp, #4]
 80133b0:	2300      	movs	r3, #0
 80133b2:	9308      	str	r3, [sp, #32]
 80133b4:	ed8d 9b02 	vstr	d9, [sp, #8]
 80133b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80133bc:	ed8d cb06 	vstr	d12, [sp, #24]
 80133c0:	e7c1      	b.n	8013346 <pow+0x1ae>
 80133c2:	4668      	mov	r0, sp
 80133c4:	f000 fc9c 	bl	8013d00 <matherr>
 80133c8:	2800      	cmp	r0, #0
 80133ca:	f47f af3b 	bne.w	8013244 <pow+0xac>
 80133ce:	e7be      	b.n	801334e <pow+0x1b6>
	...
 80133d8:	240001f0 	.word	0x240001f0
 80133dc:	3ff00000 	.word	0x3ff00000
 80133e0:	08014e18 	.word	0x08014e18
 80133e4:	fff00000 	.word	0xfff00000
 80133e8:	47efffff 	.word	0x47efffff
 80133ec:	c7efffff 	.word	0xc7efffff
 80133f0:	7ff00000 	.word	0x7ff00000
 80133f4:	00000000 	.word	0x00000000

080133f8 <sqrt>:
 80133f8:	b500      	push	{lr}
 80133fa:	ed2d 8b02 	vpush	{d8}
 80133fe:	eeb0 8b40 	vmov.f64	d8, d0
 8013402:	b08b      	sub	sp, #44	; 0x2c
 8013404:	f000 fc1a 	bl	8013c3c <__ieee754_sqrt>
 8013408:	4b1f      	ldr	r3, [pc, #124]	; (8013488 <sqrt+0x90>)
 801340a:	f993 3000 	ldrsb.w	r3, [r3]
 801340e:	1c5a      	adds	r2, r3, #1
 8013410:	d024      	beq.n	801345c <sqrt+0x64>
 8013412:	eeb4 8b48 	vcmp.f64	d8, d8
 8013416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801341a:	d61f      	bvs.n	801345c <sqrt+0x64>
 801341c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8013480 <sqrt+0x88>
 8013420:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013428:	d518      	bpl.n	801345c <sqrt+0x64>
 801342a:	2201      	movs	r2, #1
 801342c:	9200      	str	r2, [sp, #0]
 801342e:	4a17      	ldr	r2, [pc, #92]	; (801348c <sqrt+0x94>)
 8013430:	9201      	str	r2, [sp, #4]
 8013432:	2200      	movs	r2, #0
 8013434:	9208      	str	r2, [sp, #32]
 8013436:	ed8d 8b04 	vstr	d8, [sp, #16]
 801343a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801343e:	b993      	cbnz	r3, 8013466 <sqrt+0x6e>
 8013440:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013444:	4668      	mov	r0, sp
 8013446:	f000 fc5b 	bl	8013d00 <matherr>
 801344a:	b190      	cbz	r0, 8013472 <sqrt+0x7a>
 801344c:	9b08      	ldr	r3, [sp, #32]
 801344e:	b11b      	cbz	r3, 8013458 <sqrt+0x60>
 8013450:	f7ff f8ac 	bl	80125ac <__errno>
 8013454:	9b08      	ldr	r3, [sp, #32]
 8013456:	6003      	str	r3, [r0, #0]
 8013458:	ed9d 0b06 	vldr	d0, [sp, #24]
 801345c:	b00b      	add	sp, #44	; 0x2c
 801345e:	ecbd 8b02 	vpop	{d8}
 8013462:	f85d fb04 	ldr.w	pc, [sp], #4
 8013466:	2b02      	cmp	r3, #2
 8013468:	ee87 6b07 	vdiv.f64	d6, d7, d7
 801346c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8013470:	d1e8      	bne.n	8013444 <sqrt+0x4c>
 8013472:	f7ff f89b 	bl	80125ac <__errno>
 8013476:	2321      	movs	r3, #33	; 0x21
 8013478:	6003      	str	r3, [r0, #0]
 801347a:	e7e7      	b.n	801344c <sqrt+0x54>
 801347c:	f3af 8000 	nop.w
	...
 8013488:	240001f0 	.word	0x240001f0
 801348c:	08014e1c 	.word	0x08014e1c

08013490 <sqrtf>:
 8013490:	b500      	push	{lr}
 8013492:	ed2d 8b02 	vpush	{d8}
 8013496:	b08b      	sub	sp, #44	; 0x2c
 8013498:	eeb0 8a40 	vmov.f32	s16, s0
 801349c:	f000 fbd1 	bl	8013c42 <__ieee754_sqrtf>
 80134a0:	4b21      	ldr	r3, [pc, #132]	; (8013528 <sqrtf+0x98>)
 80134a2:	f993 3000 	ldrsb.w	r3, [r3]
 80134a6:	1c5a      	adds	r2, r3, #1
 80134a8:	d028      	beq.n	80134fc <sqrtf+0x6c>
 80134aa:	eeb4 8a48 	vcmp.f32	s16, s16
 80134ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134b2:	d623      	bvs.n	80134fc <sqrtf+0x6c>
 80134b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80134b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134bc:	d51e      	bpl.n	80134fc <sqrtf+0x6c>
 80134be:	2201      	movs	r2, #1
 80134c0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80134c4:	9200      	str	r2, [sp, #0]
 80134c6:	4a19      	ldr	r2, [pc, #100]	; (801352c <sqrtf+0x9c>)
 80134c8:	9201      	str	r2, [sp, #4]
 80134ca:	2200      	movs	r2, #0
 80134cc:	9208      	str	r2, [sp, #32]
 80134ce:	ed8d 8b04 	vstr	d8, [sp, #16]
 80134d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80134d6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8013520 <sqrtf+0x90>
 80134da:	b9a3      	cbnz	r3, 8013506 <sqrtf+0x76>
 80134dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80134e0:	4668      	mov	r0, sp
 80134e2:	f000 fc0d 	bl	8013d00 <matherr>
 80134e6:	b1a0      	cbz	r0, 8013512 <sqrtf+0x82>
 80134e8:	9b08      	ldr	r3, [sp, #32]
 80134ea:	b11b      	cbz	r3, 80134f4 <sqrtf+0x64>
 80134ec:	f7ff f85e 	bl	80125ac <__errno>
 80134f0:	9b08      	ldr	r3, [sp, #32]
 80134f2:	6003      	str	r3, [r0, #0]
 80134f4:	ed9d 0b06 	vldr	d0, [sp, #24]
 80134f8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80134fc:	b00b      	add	sp, #44	; 0x2c
 80134fe:	ecbd 8b02 	vpop	{d8}
 8013502:	f85d fb04 	ldr.w	pc, [sp], #4
 8013506:	2b02      	cmp	r3, #2
 8013508:	ee87 6b07 	vdiv.f64	d6, d7, d7
 801350c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8013510:	d1e6      	bne.n	80134e0 <sqrtf+0x50>
 8013512:	f7ff f84b 	bl	80125ac <__errno>
 8013516:	2321      	movs	r3, #33	; 0x21
 8013518:	6003      	str	r3, [r0, #0]
 801351a:	e7e5      	b.n	80134e8 <sqrtf+0x58>
 801351c:	f3af 8000 	nop.w
	...
 8013528:	240001f0 	.word	0x240001f0
 801352c:	08014e21 	.word	0x08014e21

08013530 <__ieee754_pow>:
 8013530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013534:	ec57 6b11 	vmov	r6, r7, d1
 8013538:	ed2d 8b02 	vpush	{d8}
 801353c:	eeb0 8b40 	vmov.f64	d8, d0
 8013540:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013544:	ea58 0306 	orrs.w	r3, r8, r6
 8013548:	b085      	sub	sp, #20
 801354a:	46b9      	mov	r9, r7
 801354c:	ee11 2a10 	vmov	r2, s2
 8013550:	f000 8306 	beq.w	8013b60 <__ieee754_pow+0x630>
 8013554:	ee18 aa90 	vmov	sl, s17
 8013558:	4bb9      	ldr	r3, [pc, #740]	; (8013840 <__ieee754_pow+0x310>)
 801355a:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 801355e:	429c      	cmp	r4, r3
 8013560:	ee10 ba10 	vmov	fp, s0
 8013564:	dc0b      	bgt.n	801357e <__ieee754_pow+0x4e>
 8013566:	d105      	bne.n	8013574 <__ieee754_pow+0x44>
 8013568:	f1bb 0f00 	cmp.w	fp, #0
 801356c:	d107      	bne.n	801357e <__ieee754_pow+0x4e>
 801356e:	45a0      	cmp	r8, r4
 8013570:	dc0d      	bgt.n	801358e <__ieee754_pow+0x5e>
 8013572:	e001      	b.n	8013578 <__ieee754_pow+0x48>
 8013574:	4598      	cmp	r8, r3
 8013576:	dc02      	bgt.n	801357e <__ieee754_pow+0x4e>
 8013578:	4598      	cmp	r8, r3
 801357a:	d110      	bne.n	801359e <__ieee754_pow+0x6e>
 801357c:	b17a      	cbz	r2, 801359e <__ieee754_pow+0x6e>
 801357e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013582:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013586:	ea54 030b 	orrs.w	r3, r4, fp
 801358a:	f000 82e9 	beq.w	8013b60 <__ieee754_pow+0x630>
 801358e:	48ad      	ldr	r0, [pc, #692]	; (8013844 <__ieee754_pow+0x314>)
 8013590:	b005      	add	sp, #20
 8013592:	ecbd 8b02 	vpop	{d8}
 8013596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801359a:	f000 bbb5 	b.w	8013d08 <nan>
 801359e:	f1ba 0f00 	cmp.w	sl, #0
 80135a2:	da4e      	bge.n	8013642 <__ieee754_pow+0x112>
 80135a4:	4ba8      	ldr	r3, [pc, #672]	; (8013848 <__ieee754_pow+0x318>)
 80135a6:	4598      	cmp	r8, r3
 80135a8:	dc49      	bgt.n	801363e <__ieee754_pow+0x10e>
 80135aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80135ae:	4598      	cmp	r8, r3
 80135b0:	dd47      	ble.n	8013642 <__ieee754_pow+0x112>
 80135b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80135b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80135ba:	2b14      	cmp	r3, #20
 80135bc:	dd24      	ble.n	8013608 <__ieee754_pow+0xd8>
 80135be:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80135c2:	fa22 f503 	lsr.w	r5, r2, r3
 80135c6:	fa05 f303 	lsl.w	r3, r5, r3
 80135ca:	4293      	cmp	r3, r2
 80135cc:	d139      	bne.n	8013642 <__ieee754_pow+0x112>
 80135ce:	f005 0501 	and.w	r5, r5, #1
 80135d2:	f1c5 0502 	rsb	r5, r5, #2
 80135d6:	2a00      	cmp	r2, #0
 80135d8:	d15a      	bne.n	8013690 <__ieee754_pow+0x160>
 80135da:	4b99      	ldr	r3, [pc, #612]	; (8013840 <__ieee754_pow+0x310>)
 80135dc:	4598      	cmp	r8, r3
 80135de:	d122      	bne.n	8013626 <__ieee754_pow+0xf6>
 80135e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80135e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80135e8:	ea53 030b 	orrs.w	r3, r3, fp
 80135ec:	f000 82b8 	beq.w	8013b60 <__ieee754_pow+0x630>
 80135f0:	4b96      	ldr	r3, [pc, #600]	; (801384c <__ieee754_pow+0x31c>)
 80135f2:	429c      	cmp	r4, r3
 80135f4:	dd27      	ble.n	8013646 <__ieee754_pow+0x116>
 80135f6:	f1b9 0f00 	cmp.w	r9, #0
 80135fa:	f280 82b4 	bge.w	8013b66 <__ieee754_pow+0x636>
 80135fe:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8013810 <__ieee754_pow+0x2e0>
 8013602:	ed8d 7b00 	vstr	d7, [sp]
 8013606:	e026      	b.n	8013656 <__ieee754_pow+0x126>
 8013608:	2a00      	cmp	r2, #0
 801360a:	d140      	bne.n	801368e <__ieee754_pow+0x15e>
 801360c:	f1c3 0314 	rsb	r3, r3, #20
 8013610:	fa48 f503 	asr.w	r5, r8, r3
 8013614:	fa05 f303 	lsl.w	r3, r5, r3
 8013618:	4543      	cmp	r3, r8
 801361a:	f040 82aa 	bne.w	8013b72 <__ieee754_pow+0x642>
 801361e:	f005 0501 	and.w	r5, r5, #1
 8013622:	f1c5 0502 	rsb	r5, r5, #2
 8013626:	4b8a      	ldr	r3, [pc, #552]	; (8013850 <__ieee754_pow+0x320>)
 8013628:	4598      	cmp	r8, r3
 801362a:	d11b      	bne.n	8013664 <__ieee754_pow+0x134>
 801362c:	f1b9 0f00 	cmp.w	r9, #0
 8013630:	f280 829c 	bge.w	8013b6c <__ieee754_pow+0x63c>
 8013634:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013638:	ee87 7b08 	vdiv.f64	d7, d7, d8
 801363c:	e7e1      	b.n	8013602 <__ieee754_pow+0xd2>
 801363e:	2502      	movs	r5, #2
 8013640:	e7c9      	b.n	80135d6 <__ieee754_pow+0xa6>
 8013642:	2500      	movs	r5, #0
 8013644:	e7c7      	b.n	80135d6 <__ieee754_pow+0xa6>
 8013646:	f1b9 0f00 	cmp.w	r9, #0
 801364a:	dad8      	bge.n	80135fe <__ieee754_pow+0xce>
 801364c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8013650:	4633      	mov	r3, r6
 8013652:	e9cd 3400 	strd	r3, r4, [sp]
 8013656:	ed9d 0b00 	vldr	d0, [sp]
 801365a:	b005      	add	sp, #20
 801365c:	ecbd 8b02 	vpop	{d8}
 8013660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013664:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013668:	d102      	bne.n	8013670 <__ieee754_pow+0x140>
 801366a:	ee28 7b08 	vmul.f64	d7, d8, d8
 801366e:	e7c8      	b.n	8013602 <__ieee754_pow+0xd2>
 8013670:	4b78      	ldr	r3, [pc, #480]	; (8013854 <__ieee754_pow+0x324>)
 8013672:	4599      	cmp	r9, r3
 8013674:	d10c      	bne.n	8013690 <__ieee754_pow+0x160>
 8013676:	f1ba 0f00 	cmp.w	sl, #0
 801367a:	db09      	blt.n	8013690 <__ieee754_pow+0x160>
 801367c:	eeb0 0b48 	vmov.f64	d0, d8
 8013680:	b005      	add	sp, #20
 8013682:	ecbd 8b02 	vpop	{d8}
 8013686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801368a:	f000 bad7 	b.w	8013c3c <__ieee754_sqrt>
 801368e:	2500      	movs	r5, #0
 8013690:	eeb0 0b48 	vmov.f64	d0, d8
 8013694:	f000 fb23 	bl	8013cde <fabs>
 8013698:	ed8d 0b00 	vstr	d0, [sp]
 801369c:	f1bb 0f00 	cmp.w	fp, #0
 80136a0:	d128      	bne.n	80136f4 <__ieee754_pow+0x1c4>
 80136a2:	b124      	cbz	r4, 80136ae <__ieee754_pow+0x17e>
 80136a4:	4b6a      	ldr	r3, [pc, #424]	; (8013850 <__ieee754_pow+0x320>)
 80136a6:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d122      	bne.n	80136f4 <__ieee754_pow+0x1c4>
 80136ae:	f1b9 0f00 	cmp.w	r9, #0
 80136b2:	da07      	bge.n	80136c4 <__ieee754_pow+0x194>
 80136b4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80136b8:	ed9d 6b00 	vldr	d6, [sp]
 80136bc:	ee87 7b06 	vdiv.f64	d7, d7, d6
 80136c0:	ed8d 7b00 	vstr	d7, [sp]
 80136c4:	f1ba 0f00 	cmp.w	sl, #0
 80136c8:	dac5      	bge.n	8013656 <__ieee754_pow+0x126>
 80136ca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80136ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80136d2:	ea54 0305 	orrs.w	r3, r4, r5
 80136d6:	d106      	bne.n	80136e6 <__ieee754_pow+0x1b6>
 80136d8:	ed9d 7b00 	vldr	d7, [sp]
 80136dc:	ee37 7b47 	vsub.f64	d7, d7, d7
 80136e0:	ee87 7b07 	vdiv.f64	d7, d7, d7
 80136e4:	e78d      	b.n	8013602 <__ieee754_pow+0xd2>
 80136e6:	2d01      	cmp	r5, #1
 80136e8:	d1b5      	bne.n	8013656 <__ieee754_pow+0x126>
 80136ea:	ed9d 7b00 	vldr	d7, [sp]
 80136ee:	eeb1 7b47 	vneg.f64	d7, d7
 80136f2:	e786      	b.n	8013602 <__ieee754_pow+0xd2>
 80136f4:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80136f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80136fc:	ea55 030a 	orrs.w	r3, r5, sl
 8013700:	d104      	bne.n	801370c <__ieee754_pow+0x1dc>
 8013702:	ee38 8b48 	vsub.f64	d8, d8, d8
 8013706:	ee88 7b08 	vdiv.f64	d7, d8, d8
 801370a:	e77a      	b.n	8013602 <__ieee754_pow+0xd2>
 801370c:	4b52      	ldr	r3, [pc, #328]	; (8013858 <__ieee754_pow+0x328>)
 801370e:	4598      	cmp	r8, r3
 8013710:	f340 80a8 	ble.w	8013864 <__ieee754_pow+0x334>
 8013714:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013718:	4598      	cmp	r8, r3
 801371a:	dd0b      	ble.n	8013734 <__ieee754_pow+0x204>
 801371c:	4b4b      	ldr	r3, [pc, #300]	; (801384c <__ieee754_pow+0x31c>)
 801371e:	429c      	cmp	r4, r3
 8013720:	dc0e      	bgt.n	8013740 <__ieee754_pow+0x210>
 8013722:	f1b9 0f00 	cmp.w	r9, #0
 8013726:	f6bf af6a 	bge.w	80135fe <__ieee754_pow+0xce>
 801372a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8013818 <__ieee754_pow+0x2e8>
 801372e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8013732:	e766      	b.n	8013602 <__ieee754_pow+0xd2>
 8013734:	4b49      	ldr	r3, [pc, #292]	; (801385c <__ieee754_pow+0x32c>)
 8013736:	429c      	cmp	r4, r3
 8013738:	ddf3      	ble.n	8013722 <__ieee754_pow+0x1f2>
 801373a:	4b45      	ldr	r3, [pc, #276]	; (8013850 <__ieee754_pow+0x320>)
 801373c:	429c      	cmp	r4, r3
 801373e:	dd03      	ble.n	8013748 <__ieee754_pow+0x218>
 8013740:	f1b9 0f00 	cmp.w	r9, #0
 8013744:	dcf1      	bgt.n	801372a <__ieee754_pow+0x1fa>
 8013746:	e75a      	b.n	80135fe <__ieee754_pow+0xce>
 8013748:	ed9d 7b00 	vldr	d7, [sp]
 801374c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013750:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8013820 <__ieee754_pow+0x2f0>
 8013754:	ee37 6b46 	vsub.f64	d6, d7, d6
 8013758:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 801375c:	eeb1 3b46 	vneg.f64	d3, d6
 8013760:	eea3 5b07 	vfma.f64	d5, d3, d7
 8013764:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013768:	eea5 7b46 	vfms.f64	d7, d5, d6
 801376c:	ee26 5b06 	vmul.f64	d5, d6, d6
 8013770:	ee27 5b05 	vmul.f64	d5, d7, d5
 8013774:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8013828 <__ieee754_pow+0x2f8>
 8013778:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801377c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8013830 <__ieee754_pow+0x300>
 8013780:	eea6 7b05 	vfma.f64	d7, d6, d5
 8013784:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8013838 <__ieee754_pow+0x308>
 8013788:	eeb0 4b47 	vmov.f64	d4, d7
 801378c:	eea6 4b05 	vfma.f64	d4, d6, d5
 8013790:	ec53 2b14 	vmov	r2, r3, d4
 8013794:	2200      	movs	r2, #0
 8013796:	ec43 2b14 	vmov	d4, r2, r3
 801379a:	eeb0 6b44 	vmov.f64	d6, d4
 801379e:	eea3 6b05 	vfma.f64	d6, d3, d5
 80137a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80137a6:	3d01      	subs	r5, #1
 80137a8:	ea55 030a 	orrs.w	r3, r5, sl
 80137ac:	f04f 0200 	mov.w	r2, #0
 80137b0:	463b      	mov	r3, r7
 80137b2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80137b6:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80137ba:	ec47 6b15 	vmov	d5, r6, r7
 80137be:	fe06 8b08 	vseleq.f64	d8, d6, d8
 80137c2:	ec47 6b13 	vmov	d3, r6, r7
 80137c6:	ec43 2b16 	vmov	d6, r2, r3
 80137ca:	ee27 7b03 	vmul.f64	d7, d7, d3
 80137ce:	ee35 5b46 	vsub.f64	d5, d5, d6
 80137d2:	4b23      	ldr	r3, [pc, #140]	; (8013860 <__ieee754_pow+0x330>)
 80137d4:	eea5 7b04 	vfma.f64	d7, d5, d4
 80137d8:	ee24 6b06 	vmul.f64	d6, d4, d6
 80137dc:	ee37 5b06 	vadd.f64	d5, d7, d6
 80137e0:	ee15 1a90 	vmov	r1, s11
 80137e4:	4299      	cmp	r1, r3
 80137e6:	ee15 2a10 	vmov	r2, s10
 80137ea:	f340 819b 	ble.w	8013b24 <__ieee754_pow+0x5f4>
 80137ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80137f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80137f6:	4313      	orrs	r3, r2
 80137f8:	f000 810a 	beq.w	8013a10 <__ieee754_pow+0x4e0>
 80137fc:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8013818 <__ieee754_pow+0x2e8>
 8013800:	ee28 8b07 	vmul.f64	d8, d8, d7
 8013804:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013808:	e6fb      	b.n	8013602 <__ieee754_pow+0xd2>
 801380a:	bf00      	nop
 801380c:	f3af 8000 	nop.w
	...
 8013818:	8800759c 	.word	0x8800759c
 801381c:	7e37e43c 	.word	0x7e37e43c
 8013820:	55555555 	.word	0x55555555
 8013824:	3fd55555 	.word	0x3fd55555
 8013828:	652b82fe 	.word	0x652b82fe
 801382c:	3ff71547 	.word	0x3ff71547
 8013830:	f85ddf44 	.word	0xf85ddf44
 8013834:	3e54ae0b 	.word	0x3e54ae0b
 8013838:	60000000 	.word	0x60000000
 801383c:	3ff71547 	.word	0x3ff71547
 8013840:	7ff00000 	.word	0x7ff00000
 8013844:	08014a86 	.word	0x08014a86
 8013848:	433fffff 	.word	0x433fffff
 801384c:	3fefffff 	.word	0x3fefffff
 8013850:	3ff00000 	.word	0x3ff00000
 8013854:	3fe00000 	.word	0x3fe00000
 8013858:	41e00000 	.word	0x41e00000
 801385c:	3feffffe 	.word	0x3feffffe
 8013860:	408fffff 	.word	0x408fffff
 8013864:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013868:	f280 80ce 	bge.w	8013a08 <__ieee754_pow+0x4d8>
 801386c:	ed9d 6b00 	vldr	d6, [sp]
 8013870:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8013b78 <__ieee754_pow+0x648>
 8013874:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013878:	ed8d 7b00 	vstr	d7, [sp]
 801387c:	9c01      	ldr	r4, [sp, #4]
 801387e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8013882:	1521      	asrs	r1, r4, #20
 8013884:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013888:	4419      	add	r1, r3
 801388a:	4be3      	ldr	r3, [pc, #908]	; (8013c18 <__ieee754_pow+0x6e8>)
 801388c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013890:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8013894:	429c      	cmp	r4, r3
 8013896:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 801389a:	dd06      	ble.n	80138aa <__ieee754_pow+0x37a>
 801389c:	4bdf      	ldr	r3, [pc, #892]	; (8013c1c <__ieee754_pow+0x6ec>)
 801389e:	429c      	cmp	r4, r3
 80138a0:	f340 80b4 	ble.w	8013a0c <__ieee754_pow+0x4dc>
 80138a4:	3101      	adds	r1, #1
 80138a6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80138aa:	2400      	movs	r4, #0
 80138ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80138b0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80138b4:	4603      	mov	r3, r0
 80138b6:	ec43 2b17 	vmov	d7, r2, r3
 80138ba:	4bd9      	ldr	r3, [pc, #868]	; (8013c20 <__ieee754_pow+0x6f0>)
 80138bc:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 80138c0:	4463      	add	r3, ip
 80138c2:	ed93 5b00 	vldr	d5, [r3]
 80138c6:	1040      	asrs	r0, r0, #1
 80138c8:	ee37 2b45 	vsub.f64	d2, d7, d5
 80138cc:	ee35 6b07 	vadd.f64	d6, d5, d7
 80138d0:	ee84 1b06 	vdiv.f64	d1, d4, d6
 80138d4:	ee22 6b01 	vmul.f64	d6, d2, d1
 80138d8:	ed8d 6b00 	vstr	d6, [sp]
 80138dc:	e9dd 8900 	ldrd	r8, r9, [sp]
 80138e0:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 80138e4:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 80138e8:	f04f 0800 	mov.w	r8, #0
 80138ec:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 80138f0:	2200      	movs	r2, #0
 80138f2:	ec49 8b14 	vmov	d4, r8, r9
 80138f6:	ec43 2b16 	vmov	d6, r2, r3
 80138fa:	eeb1 3b44 	vneg.f64	d3, d4
 80138fe:	eea3 2b06 	vfma.f64	d2, d3, d6
 8013902:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013906:	ee37 7b46 	vsub.f64	d7, d7, d6
 801390a:	eea3 2b07 	vfma.f64	d2, d3, d7
 801390e:	ed9d 7b00 	vldr	d7, [sp]
 8013912:	ee22 2b01 	vmul.f64	d2, d2, d1
 8013916:	ee27 5b07 	vmul.f64	d5, d7, d7
 801391a:	ee37 6b04 	vadd.f64	d6, d7, d4
 801391e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8013b80 <__ieee754_pow+0x650>
 8013922:	ee25 0b05 	vmul.f64	d0, d5, d5
 8013926:	ee26 6b02 	vmul.f64	d6, d6, d2
 801392a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8013b88 <__ieee754_pow+0x658>
 801392e:	eea5 7b01 	vfma.f64	d7, d5, d1
 8013932:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8013b90 <__ieee754_pow+0x660>
 8013936:	eea7 1b05 	vfma.f64	d1, d7, d5
 801393a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8013b98 <__ieee754_pow+0x668>
 801393e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8013942:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8013ba0 <__ieee754_pow+0x670>
 8013946:	eea7 1b05 	vfma.f64	d1, d7, d5
 801394a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8013ba8 <__ieee754_pow+0x678>
 801394e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8013952:	eea0 6b07 	vfma.f64	d6, d0, d7
 8013956:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 801395a:	eeb0 5b47 	vmov.f64	d5, d7
 801395e:	eea4 5b04 	vfma.f64	d5, d4, d4
 8013962:	ee35 5b06 	vadd.f64	d5, d5, d6
 8013966:	ed8d 5b02 	vstr	d5, [sp, #8]
 801396a:	f8cd 8008 	str.w	r8, [sp, #8]
 801396e:	ed9d 5b02 	vldr	d5, [sp, #8]
 8013972:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013976:	eea3 7b04 	vfma.f64	d7, d3, d4
 801397a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801397e:	ed9d 6b00 	vldr	d6, [sp]
 8013982:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013986:	eea2 7b05 	vfma.f64	d7, d2, d5
 801398a:	eeb0 6b47 	vmov.f64	d6, d7
 801398e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8013992:	ed8d 6b00 	vstr	d6, [sp]
 8013996:	f8cd 8000 	str.w	r8, [sp]
 801399a:	ed9d 2b00 	vldr	d2, [sp]
 801399e:	eeb0 6b42 	vmov.f64	d6, d2
 80139a2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80139a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80139aa:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8013bb0 <__ieee754_pow+0x680>
 80139ae:	4b9d      	ldr	r3, [pc, #628]	; (8013c24 <__ieee754_pow+0x6f4>)
 80139b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80139b4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8013bb8 <__ieee754_pow+0x688>
 80139b8:	4463      	add	r3, ip
 80139ba:	eea2 7b06 	vfma.f64	d7, d2, d6
 80139be:	ed93 6b00 	vldr	d6, [r3]
 80139c2:	4b99      	ldr	r3, [pc, #612]	; (8013c28 <__ieee754_pow+0x6f8>)
 80139c4:	ee37 6b06 	vadd.f64	d6, d7, d6
 80139c8:	449c      	add	ip, r3
 80139ca:	ed9c 1b00 	vldr	d1, [ip]
 80139ce:	eeb0 4b46 	vmov.f64	d4, d6
 80139d2:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8013bc0 <__ieee754_pow+0x690>
 80139d6:	ee07 1a90 	vmov	s15, r1
 80139da:	eea2 4b03 	vfma.f64	d4, d2, d3
 80139de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80139e2:	ee34 4b01 	vadd.f64	d4, d4, d1
 80139e6:	ee34 5b07 	vadd.f64	d5, d4, d7
 80139ea:	ed8d 5b00 	vstr	d5, [sp]
 80139ee:	f8cd 8000 	str.w	r8, [sp]
 80139f2:	ed9d 4b00 	vldr	d4, [sp]
 80139f6:	ee34 7b47 	vsub.f64	d7, d4, d7
 80139fa:	ee37 7b41 	vsub.f64	d7, d7, d1
 80139fe:	eea2 7b43 	vfms.f64	d7, d2, d3
 8013a02:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013a06:	e6ce      	b.n	80137a6 <__ieee754_pow+0x276>
 8013a08:	2300      	movs	r3, #0
 8013a0a:	e73a      	b.n	8013882 <__ieee754_pow+0x352>
 8013a0c:	2401      	movs	r4, #1
 8013a0e:	e74d      	b.n	80138ac <__ieee754_pow+0x37c>
 8013a10:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8013bc8 <__ieee754_pow+0x698>
 8013a14:	ee35 5b46 	vsub.f64	d5, d5, d6
 8013a18:	ee37 4b04 	vadd.f64	d4, d7, d4
 8013a1c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8013a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a24:	f73f aeea 	bgt.w	80137fc <__ieee754_pow+0x2cc>
 8013a28:	4a80      	ldr	r2, [pc, #512]	; (8013c2c <__ieee754_pow+0x6fc>)
 8013a2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013a2e:	4293      	cmp	r3, r2
 8013a30:	f340 808e 	ble.w	8013b50 <__ieee754_pow+0x620>
 8013a34:	151b      	asrs	r3, r3, #20
 8013a36:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 8013a3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013a3e:	4103      	asrs	r3, r0
 8013a40:	440b      	add	r3, r1
 8013a42:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013a46:	487a      	ldr	r0, [pc, #488]	; (8013c30 <__ieee754_pow+0x700>)
 8013a48:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013a4c:	4110      	asrs	r0, r2
 8013a4e:	ea23 0500 	bic.w	r5, r3, r0
 8013a52:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8013a56:	2400      	movs	r4, #0
 8013a58:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8013a5c:	f1c2 0214 	rsb	r2, r2, #20
 8013a60:	ec45 4b15 	vmov	d5, r4, r5
 8013a64:	4110      	asrs	r0, r2
 8013a66:	2900      	cmp	r1, #0
 8013a68:	bfb8      	it	lt
 8013a6a:	4240      	neglt	r0, r0
 8013a6c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013a70:	ee36 5b07 	vadd.f64	d5, d6, d7
 8013a74:	ec53 2b15 	vmov	r2, r3, d5
 8013a78:	2200      	movs	r2, #0
 8013a7a:	ec43 2b15 	vmov	d5, r2, r3
 8013a7e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8013bd0 <__ieee754_pow+0x6a0>
 8013a82:	ee35 6b46 	vsub.f64	d6, d5, d6
 8013a86:	ee37 6b46 	vsub.f64	d6, d7, d6
 8013a8a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8013bd8 <__ieee754_pow+0x6a8>
 8013a8e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8013a92:	eea6 7b04 	vfma.f64	d7, d6, d4
 8013a96:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8013be0 <__ieee754_pow+0x6b0>
 8013a9a:	eeb0 4b47 	vmov.f64	d4, d7
 8013a9e:	eea5 4b06 	vfma.f64	d4, d5, d6
 8013aa2:	eeb0 3b44 	vmov.f64	d3, d4
 8013aa6:	eea5 3b46 	vfms.f64	d3, d5, d6
 8013aaa:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8013be8 <__ieee754_pow+0x6b8>
 8013aae:	ee37 7b43 	vsub.f64	d7, d7, d3
 8013ab2:	ee24 6b04 	vmul.f64	d6, d4, d4
 8013ab6:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8013bf0 <__ieee754_pow+0x6c0>
 8013aba:	eea4 7b07 	vfma.f64	d7, d4, d7
 8013abe:	eea6 3b05 	vfma.f64	d3, d6, d5
 8013ac2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8013bf8 <__ieee754_pow+0x6c8>
 8013ac6:	eea3 5b06 	vfma.f64	d5, d3, d6
 8013aca:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8013c00 <__ieee754_pow+0x6d0>
 8013ace:	eea5 3b06 	vfma.f64	d3, d5, d6
 8013ad2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8013c08 <__ieee754_pow+0x6d8>
 8013ad6:	eea3 5b06 	vfma.f64	d5, d3, d6
 8013ada:	eeb0 3b44 	vmov.f64	d3, d4
 8013ade:	eea5 3b46 	vfms.f64	d3, d5, d6
 8013ae2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8013ae6:	eeb0 6b43 	vmov.f64	d6, d3
 8013aea:	ee24 3b03 	vmul.f64	d3, d4, d3
 8013aee:	ee36 5b45 	vsub.f64	d5, d6, d5
 8013af2:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8013af6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013afa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013afe:	ee37 7b44 	vsub.f64	d7, d7, d4
 8013b02:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013b06:	ed8d 7b00 	vstr	d7, [sp]
 8013b0a:	9901      	ldr	r1, [sp, #4]
 8013b0c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8013b10:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8013b14:	da1e      	bge.n	8013b54 <__ieee754_pow+0x624>
 8013b16:	eeb0 0b47 	vmov.f64	d0, d7
 8013b1a:	f000 f989 	bl	8013e30 <scalbn>
 8013b1e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8013b22:	e56e      	b.n	8013602 <__ieee754_pow+0xd2>
 8013b24:	4b43      	ldr	r3, [pc, #268]	; (8013c34 <__ieee754_pow+0x704>)
 8013b26:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8013b2a:	4298      	cmp	r0, r3
 8013b2c:	f77f af7c 	ble.w	8013a28 <__ieee754_pow+0x4f8>
 8013b30:	4b41      	ldr	r3, [pc, #260]	; (8013c38 <__ieee754_pow+0x708>)
 8013b32:	440b      	add	r3, r1
 8013b34:	4313      	orrs	r3, r2
 8013b36:	d002      	beq.n	8013b3e <__ieee754_pow+0x60e>
 8013b38:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8013c10 <__ieee754_pow+0x6e0>
 8013b3c:	e660      	b.n	8013800 <__ieee754_pow+0x2d0>
 8013b3e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8013b42:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b4a:	f6ff af6d 	blt.w	8013a28 <__ieee754_pow+0x4f8>
 8013b4e:	e7f3      	b.n	8013b38 <__ieee754_pow+0x608>
 8013b50:	2000      	movs	r0, #0
 8013b52:	e78d      	b.n	8013a70 <__ieee754_pow+0x540>
 8013b54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b58:	460b      	mov	r3, r1
 8013b5a:	ec43 2b10 	vmov	d0, r2, r3
 8013b5e:	e7de      	b.n	8013b1e <__ieee754_pow+0x5ee>
 8013b60:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013b64:	e54d      	b.n	8013602 <__ieee754_pow+0xd2>
 8013b66:	e9cd 6700 	strd	r6, r7, [sp]
 8013b6a:	e574      	b.n	8013656 <__ieee754_pow+0x126>
 8013b6c:	ed8d 8b00 	vstr	d8, [sp]
 8013b70:	e571      	b.n	8013656 <__ieee754_pow+0x126>
 8013b72:	4615      	mov	r5, r2
 8013b74:	e557      	b.n	8013626 <__ieee754_pow+0xf6>
 8013b76:	bf00      	nop
 8013b78:	00000000 	.word	0x00000000
 8013b7c:	43400000 	.word	0x43400000
 8013b80:	4a454eef 	.word	0x4a454eef
 8013b84:	3fca7e28 	.word	0x3fca7e28
 8013b88:	93c9db65 	.word	0x93c9db65
 8013b8c:	3fcd864a 	.word	0x3fcd864a
 8013b90:	a91d4101 	.word	0xa91d4101
 8013b94:	3fd17460 	.word	0x3fd17460
 8013b98:	518f264d 	.word	0x518f264d
 8013b9c:	3fd55555 	.word	0x3fd55555
 8013ba0:	db6fabff 	.word	0xdb6fabff
 8013ba4:	3fdb6db6 	.word	0x3fdb6db6
 8013ba8:	33333303 	.word	0x33333303
 8013bac:	3fe33333 	.word	0x3fe33333
 8013bb0:	dc3a03fd 	.word	0xdc3a03fd
 8013bb4:	3feec709 	.word	0x3feec709
 8013bb8:	145b01f5 	.word	0x145b01f5
 8013bbc:	be3e2fe0 	.word	0xbe3e2fe0
 8013bc0:	e0000000 	.word	0xe0000000
 8013bc4:	3feec709 	.word	0x3feec709
 8013bc8:	652b82fe 	.word	0x652b82fe
 8013bcc:	3c971547 	.word	0x3c971547
 8013bd0:	fefa39ef 	.word	0xfefa39ef
 8013bd4:	3fe62e42 	.word	0x3fe62e42
 8013bd8:	0ca86c39 	.word	0x0ca86c39
 8013bdc:	be205c61 	.word	0xbe205c61
 8013be0:	00000000 	.word	0x00000000
 8013be4:	3fe62e43 	.word	0x3fe62e43
 8013be8:	72bea4d0 	.word	0x72bea4d0
 8013bec:	3e663769 	.word	0x3e663769
 8013bf0:	c5d26bf1 	.word	0xc5d26bf1
 8013bf4:	bebbbd41 	.word	0xbebbbd41
 8013bf8:	af25de2c 	.word	0xaf25de2c
 8013bfc:	3f11566a 	.word	0x3f11566a
 8013c00:	16bebd93 	.word	0x16bebd93
 8013c04:	bf66c16c 	.word	0xbf66c16c
 8013c08:	5555553e 	.word	0x5555553e
 8013c0c:	3fc55555 	.word	0x3fc55555
 8013c10:	c2f8f359 	.word	0xc2f8f359
 8013c14:	01a56e1f 	.word	0x01a56e1f
 8013c18:	0003988e 	.word	0x0003988e
 8013c1c:	000bb679 	.word	0x000bb679
 8013c20:	08014e28 	.word	0x08014e28
 8013c24:	08014e48 	.word	0x08014e48
 8013c28:	08014e38 	.word	0x08014e38
 8013c2c:	3fe00000 	.word	0x3fe00000
 8013c30:	000fffff 	.word	0x000fffff
 8013c34:	4090cbff 	.word	0x4090cbff
 8013c38:	3f6f3400 	.word	0x3f6f3400

08013c3c <__ieee754_sqrt>:
 8013c3c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8013c40:	4770      	bx	lr

08013c42 <__ieee754_sqrtf>:
 8013c42:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013c46:	4770      	bx	lr

08013c48 <with_errnof>:
 8013c48:	b510      	push	{r4, lr}
 8013c4a:	ed2d 8b02 	vpush	{d8}
 8013c4e:	eeb0 8a40 	vmov.f32	s16, s0
 8013c52:	4604      	mov	r4, r0
 8013c54:	f7fe fcaa 	bl	80125ac <__errno>
 8013c58:	eeb0 0a48 	vmov.f32	s0, s16
 8013c5c:	ecbd 8b02 	vpop	{d8}
 8013c60:	6004      	str	r4, [r0, #0]
 8013c62:	bd10      	pop	{r4, pc}

08013c64 <xflowf>:
 8013c64:	b130      	cbz	r0, 8013c74 <xflowf+0x10>
 8013c66:	eef1 7a40 	vneg.f32	s15, s0
 8013c6a:	2022      	movs	r0, #34	; 0x22
 8013c6c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013c70:	f7ff bfea 	b.w	8013c48 <with_errnof>
 8013c74:	eef0 7a40 	vmov.f32	s15, s0
 8013c78:	e7f7      	b.n	8013c6a <xflowf+0x6>
	...

08013c7c <__math_uflowf>:
 8013c7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013c84 <__math_uflowf+0x8>
 8013c80:	f7ff bff0 	b.w	8013c64 <xflowf>
 8013c84:	10000000 	.word	0x10000000

08013c88 <__math_may_uflowf>:
 8013c88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013c90 <__math_may_uflowf+0x8>
 8013c8c:	f7ff bfea 	b.w	8013c64 <xflowf>
 8013c90:	1a200000 	.word	0x1a200000

08013c94 <__math_oflowf>:
 8013c94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013c9c <__math_oflowf+0x8>
 8013c98:	f7ff bfe4 	b.w	8013c64 <xflowf>
 8013c9c:	70000000 	.word	0x70000000

08013ca0 <__math_divzerof>:
 8013ca0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013ca4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8013ca8:	2800      	cmp	r0, #0
 8013caa:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8013cae:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013cbc <__math_divzerof+0x1c>
 8013cb2:	2022      	movs	r0, #34	; 0x22
 8013cb4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013cb8:	f7ff bfc6 	b.w	8013c48 <with_errnof>
 8013cbc:	00000000 	.word	0x00000000

08013cc0 <__math_invalidf>:
 8013cc0:	eef0 7a40 	vmov.f32	s15, s0
 8013cc4:	ee30 7a40 	vsub.f32	s14, s0, s0
 8013cc8:	eef4 7a67 	vcmp.f32	s15, s15
 8013ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8013cd4:	d602      	bvs.n	8013cdc <__math_invalidf+0x1c>
 8013cd6:	2021      	movs	r0, #33	; 0x21
 8013cd8:	f7ff bfb6 	b.w	8013c48 <with_errnof>
 8013cdc:	4770      	bx	lr

08013cde <fabs>:
 8013cde:	ec51 0b10 	vmov	r0, r1, d0
 8013ce2:	ee10 2a10 	vmov	r2, s0
 8013ce6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013cea:	ec43 2b10 	vmov	d0, r2, r3
 8013cee:	4770      	bx	lr

08013cf0 <finite>:
 8013cf0:	ee10 3a90 	vmov	r3, s1
 8013cf4:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8013cf8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013cfc:	0fc0      	lsrs	r0, r0, #31
 8013cfe:	4770      	bx	lr

08013d00 <matherr>:
 8013d00:	2000      	movs	r0, #0
 8013d02:	4770      	bx	lr
 8013d04:	0000      	movs	r0, r0
	...

08013d08 <nan>:
 8013d08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013d10 <nan+0x8>
 8013d0c:	4770      	bx	lr
 8013d0e:	bf00      	nop
 8013d10:	00000000 	.word	0x00000000
 8013d14:	7ff80000 	.word	0x7ff80000

08013d18 <rint>:
 8013d18:	b530      	push	{r4, r5, lr}
 8013d1a:	b085      	sub	sp, #20
 8013d1c:	ed8d 0b00 	vstr	d0, [sp]
 8013d20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d24:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8013d28:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 8013d2c:	2813      	cmp	r0, #19
 8013d2e:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8013d32:	dc5a      	bgt.n	8013dea <rint+0xd2>
 8013d34:	2800      	cmp	r0, #0
 8013d36:	da2f      	bge.n	8013d98 <rint+0x80>
 8013d38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013d3c:	4311      	orrs	r1, r2
 8013d3e:	d027      	beq.n	8013d90 <rint+0x78>
 8013d40:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8013d44:	4315      	orrs	r5, r2
 8013d46:	426a      	negs	r2, r5
 8013d48:	432a      	orrs	r2, r5
 8013d4a:	0b12      	lsrs	r2, r2, #12
 8013d4c:	0c5b      	lsrs	r3, r3, #17
 8013d4e:	045b      	lsls	r3, r3, #17
 8013d50:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8013d54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d58:	ea42 0103 	orr.w	r1, r2, r3
 8013d5c:	4b31      	ldr	r3, [pc, #196]	; (8013e24 <rint+0x10c>)
 8013d5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013d62:	ed93 6b00 	vldr	d6, [r3]
 8013d66:	ec41 0b17 	vmov	d7, r0, r1
 8013d6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8013d6e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013d72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013d76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013d7a:	ed8d 7b00 	vstr	d7, [sp]
 8013d7e:	9b01      	ldr	r3, [sp, #4]
 8013d80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d88:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8013d8c:	e9cd 0100 	strd	r0, r1, [sp]
 8013d90:	ed9d 0b00 	vldr	d0, [sp]
 8013d94:	b005      	add	sp, #20
 8013d96:	bd30      	pop	{r4, r5, pc}
 8013d98:	4923      	ldr	r1, [pc, #140]	; (8013e28 <rint+0x110>)
 8013d9a:	4101      	asrs	r1, r0
 8013d9c:	ea03 0501 	and.w	r5, r3, r1
 8013da0:	4315      	orrs	r5, r2
 8013da2:	d0f5      	beq.n	8013d90 <rint+0x78>
 8013da4:	0849      	lsrs	r1, r1, #1
 8013da6:	ea03 0501 	and.w	r5, r3, r1
 8013daa:	432a      	orrs	r2, r5
 8013dac:	d00b      	beq.n	8013dc6 <rint+0xae>
 8013dae:	ea23 0101 	bic.w	r1, r3, r1
 8013db2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013db6:	2813      	cmp	r0, #19
 8013db8:	fa43 f300 	asr.w	r3, r3, r0
 8013dbc:	bf0c      	ite	eq
 8013dbe:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8013dc2:	2200      	movne	r2, #0
 8013dc4:	430b      	orrs	r3, r1
 8013dc6:	4619      	mov	r1, r3
 8013dc8:	4b16      	ldr	r3, [pc, #88]	; (8013e24 <rint+0x10c>)
 8013dca:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013dce:	ed94 6b00 	vldr	d6, [r4]
 8013dd2:	4610      	mov	r0, r2
 8013dd4:	ec41 0b17 	vmov	d7, r0, r1
 8013dd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8013ddc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013de0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013de4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013de8:	e008      	b.n	8013dfc <rint+0xe4>
 8013dea:	2833      	cmp	r0, #51	; 0x33
 8013dec:	dd09      	ble.n	8013e02 <rint+0xea>
 8013dee:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013df2:	d1cd      	bne.n	8013d90 <rint+0x78>
 8013df4:	ed9d 7b00 	vldr	d7, [sp]
 8013df8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013dfc:	ed8d 7b00 	vstr	d7, [sp]
 8013e00:	e7c6      	b.n	8013d90 <rint+0x78>
 8013e02:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 8013e06:	f04f 31ff 	mov.w	r1, #4294967295
 8013e0a:	40c1      	lsrs	r1, r0
 8013e0c:	420a      	tst	r2, r1
 8013e0e:	d0bf      	beq.n	8013d90 <rint+0x78>
 8013e10:	0849      	lsrs	r1, r1, #1
 8013e12:	420a      	tst	r2, r1
 8013e14:	bf1f      	itttt	ne
 8013e16:	ea22 0101 	bicne.w	r1, r2, r1
 8013e1a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8013e1e:	4102      	asrne	r2, r0
 8013e20:	430a      	orrne	r2, r1
 8013e22:	e7d0      	b.n	8013dc6 <rint+0xae>
 8013e24:	08014e58 	.word	0x08014e58
 8013e28:	000fffff 	.word	0x000fffff
 8013e2c:	00000000 	.word	0x00000000

08013e30 <scalbn>:
 8013e30:	b500      	push	{lr}
 8013e32:	ed2d 8b02 	vpush	{d8}
 8013e36:	b083      	sub	sp, #12
 8013e38:	ed8d 0b00 	vstr	d0, [sp]
 8013e3c:	9b01      	ldr	r3, [sp, #4]
 8013e3e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013e42:	b9a2      	cbnz	r2, 8013e6e <scalbn+0x3e>
 8013e44:	9a00      	ldr	r2, [sp, #0]
 8013e46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013e4a:	4313      	orrs	r3, r2
 8013e4c:	d03a      	beq.n	8013ec4 <scalbn+0x94>
 8013e4e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013f08 <scalbn+0xd8>
 8013e52:	4b35      	ldr	r3, [pc, #212]	; (8013f28 <scalbn+0xf8>)
 8013e54:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013e58:	4298      	cmp	r0, r3
 8013e5a:	ed8d 7b00 	vstr	d7, [sp]
 8013e5e:	da11      	bge.n	8013e84 <scalbn+0x54>
 8013e60:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8013f10 <scalbn+0xe0>
 8013e64:	ed9d 6b00 	vldr	d6, [sp]
 8013e68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013e6c:	e007      	b.n	8013e7e <scalbn+0x4e>
 8013e6e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013e72:	428a      	cmp	r2, r1
 8013e74:	d10a      	bne.n	8013e8c <scalbn+0x5c>
 8013e76:	ed9d 7b00 	vldr	d7, [sp]
 8013e7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013e7e:	ed8d 7b00 	vstr	d7, [sp]
 8013e82:	e01f      	b.n	8013ec4 <scalbn+0x94>
 8013e84:	9b01      	ldr	r3, [sp, #4]
 8013e86:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013e8a:	3a36      	subs	r2, #54	; 0x36
 8013e8c:	4402      	add	r2, r0
 8013e8e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013e92:	428a      	cmp	r2, r1
 8013e94:	dd0a      	ble.n	8013eac <scalbn+0x7c>
 8013e96:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8013f18 <scalbn+0xe8>
 8013e9a:	eeb0 0b48 	vmov.f64	d0, d8
 8013e9e:	ed9d 1b00 	vldr	d1, [sp]
 8013ea2:	f000 f843 	bl	8013f2c <copysign>
 8013ea6:	ee20 7b08 	vmul.f64	d7, d0, d8
 8013eaa:	e7e8      	b.n	8013e7e <scalbn+0x4e>
 8013eac:	2a00      	cmp	r2, #0
 8013eae:	dd10      	ble.n	8013ed2 <scalbn+0xa2>
 8013eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013eb4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013eb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013ebc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013ec0:	e9cd 0100 	strd	r0, r1, [sp]
 8013ec4:	ed9d 0b00 	vldr	d0, [sp]
 8013ec8:	b003      	add	sp, #12
 8013eca:	ecbd 8b02 	vpop	{d8}
 8013ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ed2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013ed6:	da06      	bge.n	8013ee6 <scalbn+0xb6>
 8013ed8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013edc:	4298      	cmp	r0, r3
 8013ede:	dcda      	bgt.n	8013e96 <scalbn+0x66>
 8013ee0:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8013f10 <scalbn+0xe0>
 8013ee4:	e7d9      	b.n	8013e9a <scalbn+0x6a>
 8013ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013eea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013eee:	3236      	adds	r2, #54	; 0x36
 8013ef0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013ef4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013ef8:	ec41 0b17 	vmov	d7, r0, r1
 8013efc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8013f20 <scalbn+0xf0>
 8013f00:	e7b2      	b.n	8013e68 <scalbn+0x38>
 8013f02:	bf00      	nop
 8013f04:	f3af 8000 	nop.w
 8013f08:	00000000 	.word	0x00000000
 8013f0c:	43500000 	.word	0x43500000
 8013f10:	c2f8f359 	.word	0xc2f8f359
 8013f14:	01a56e1f 	.word	0x01a56e1f
 8013f18:	8800759c 	.word	0x8800759c
 8013f1c:	7e37e43c 	.word	0x7e37e43c
 8013f20:	00000000 	.word	0x00000000
 8013f24:	3c900000 	.word	0x3c900000
 8013f28:	ffff3cb0 	.word	0xffff3cb0

08013f2c <copysign>:
 8013f2c:	ec51 0b10 	vmov	r0, r1, d0
 8013f30:	ee11 0a90 	vmov	r0, s3
 8013f34:	ee10 2a10 	vmov	r2, s0
 8013f38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013f3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013f40:	ea41 0300 	orr.w	r3, r1, r0
 8013f44:	ec43 2b10 	vmov	d0, r2, r3
 8013f48:	4770      	bx	lr
	...

08013f4c <_init>:
 8013f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f4e:	bf00      	nop
 8013f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f52:	bc08      	pop	{r3}
 8013f54:	469e      	mov	lr, r3
 8013f56:	4770      	bx	lr

08013f58 <_fini>:
 8013f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f5a:	bf00      	nop
 8013f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f5e:	bc08      	pop	{r3}
 8013f60:	469e      	mov	lr, r3
 8013f62:	4770      	bx	lr
