
IMUDummy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007230  08007230  00017230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072b8  080072b8  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  080072b8  080072b8  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072b8  080072b8  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072b8  080072b8  000172b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072bc  080072bc  000172bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  080072c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001188  2000018c  0800744c  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001314  0800744c  00021314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175b9  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030f9  00000000  00000000  00037775  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  0003a870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  0003b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002491a  00000000  00000000  0003c588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f651  00000000  00000000  00060ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce3aa  00000000  00000000  000704f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e89d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d1c  00000000  00000000  0013e918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000018c 	.word	0x2000018c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007218 	.word	0x08007218

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000190 	.word	0x20000190
 80001c8:	08007218 	.word	0x08007218

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fa7e 	bl	80006d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f875 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f933 	bl	8000444 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001de:	f000 f8f3 	bl	80003c8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80001e2:	f006 fa99 	bl	8006718 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t configured = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//UsbPrint("Tx: %x; Rx: %x\n", powermanagmentread[0],  powermanagmentreadrx[0]);

		uint8_t register_sensor_powerMgmt1[2] = { 0 };
 80001ea:	2300      	movs	r3, #0
 80001ec:	80bb      	strh	r3, [r7, #4]
		register_sensor_powerMgmt1[0] = IMU20601_COMMAND_POWER_MANAGMENT1_WRITE;
 80001ee:	236b      	movs	r3, #107	; 0x6b
 80001f0:	713b      	strb	r3, [r7, #4]
		register_sensor_powerMgmt1[1] =
				(reset_conf << 7 | SENS_sleep_EN << 6 | SENS_clk_src << 0);
 80001f2:	2301      	movs	r3, #1
 80001f4:	01db      	lsls	r3, r3, #7
 80001f6:	b25a      	sxtb	r2, r3
 80001f8:	2300      	movs	r3, #0
 80001fa:	019b      	lsls	r3, r3, #6
 80001fc:	b25b      	sxtb	r3, r3
 80001fe:	4313      	orrs	r3, r2
 8000200:	b25a      	sxtb	r2, r3
 8000202:	2301      	movs	r3, #1
 8000204:	b25b      	sxtb	r3, r3
 8000206:	4313      	orrs	r3, r2
 8000208:	b25b      	sxtb	r3, r3
 800020a:	b2db      	uxtb	r3, r3
		register_sensor_powerMgmt1[1] =
 800020c:	717b      	strb	r3, [r7, #5]

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2110      	movs	r1, #16
 8000212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000216:	f000 fdbb 	bl	8000d90 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_sensor_powerMgmt1,
 800021a:	1d39      	adds	r1, r7, #4
 800021c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000220:	2202      	movs	r2, #2
 8000222:	4827      	ldr	r0, [pc, #156]	; (80002c0 <main+0xf4>)
 8000224:	f002 ff02 	bl	800302c <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	2110      	movs	r1, #16
 800022c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000230:	f000 fdae 	bl	8000d90 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000234:	2001      	movs	r0, #1
 8000236:	f000 fabd 	bl	80007b4 <HAL_Delay>

		/* Wake Up Chip */
		register_sensor_powerMgmt1[1] =
				(SENS_sleep_EN << 6 | SENS_clk_src << 0);
 800023a:	2300      	movs	r3, #0
 800023c:	019b      	lsls	r3, r3, #6
 800023e:	b25a      	sxtb	r2, r3
 8000240:	2301      	movs	r3, #1
 8000242:	b25b      	sxtb	r3, r3
 8000244:	4313      	orrs	r3, r2
 8000246:	b25b      	sxtb	r3, r3
 8000248:	b2db      	uxtb	r3, r3
		register_sensor_powerMgmt1[1] =
 800024a:	717b      	strb	r3, [r7, #5]

		/* Write Register */

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2110      	movs	r1, #16
 8000250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000254:	f000 fd9c 	bl	8000d90 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, register_sensor_powerMgmt1,
 8000258:	1d39      	adds	r1, r7, #4
 800025a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800025e:	2202      	movs	r2, #2
 8000260:	4817      	ldr	r0, [pc, #92]	; (80002c0 <main+0xf4>)
 8000262:	f002 fee3 	bl	800302c <HAL_SPI_Transmit>
				IMU20601_COMMAND_LENGTH, IMU20601_SPI_TIMEOUT);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000266:	2201      	movs	r2, #1
 8000268:	2110      	movs	r1, #16
 800026a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026e:	f000 fd8f 	bl	8000d90 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000272:	2001      	movs	r0, #1
 8000274:	f000 fa9e 	bl	80007b4 <HAL_Delay>
		/* Read Register */

		uint8_t tx = 0xEB;
 8000278:	23eb      	movs	r3, #235	; 0xeb
 800027a:	70fb      	strb	r3, [r7, #3]
		volatile uint8_t rx = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	70bb      	strb	r3, [r7, #2]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2110      	movs	r1, #16
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000288:	f000 fd82 	bl	8000d90 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &tx, 1, IMU20601_SPI_TIMEOUT);
 800028c:	1cf9      	adds	r1, r7, #3
 800028e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000292:	2201      	movs	r2, #1
 8000294:	480a      	ldr	r0, [pc, #40]	; (80002c0 <main+0xf4>)
 8000296:	f002 fec9 	bl	800302c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &rx, 1, IMU20601_SPI_TIMEOUT);
 800029a:	1cb9      	adds	r1, r7, #2
 800029c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002a0:	2201      	movs	r2, #1
 80002a2:	4807      	ldr	r0, [pc, #28]	; (80002c0 <main+0xf4>)
 80002a4:	f003 f828 	bl	80032f8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2110      	movs	r1, #16
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f000 fd6e 	bl	8000d90 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f000 fa7d 	bl	80007b4 <HAL_Delay>

//		/* Disable I2C Mode */
		uint8_t register_sensor_control[2] = { 0 };
 80002ba:	2300      	movs	r3, #0
 80002bc:	803b      	strh	r3, [r7, #0]
	{
 80002be:	e794      	b.n	80001ea <main+0x1e>
 80002c0:	200003cc 	.word	0x200003cc

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b0ae      	sub	sp, #184	; 0xb8
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002ce:	2244      	movs	r2, #68	; 0x44
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f006 ff98 	bl	8007208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	463b      	mov	r3, r7
 80002ea:	2260      	movs	r2, #96	; 0x60
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f006 ff8a 	bl	8007208 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f4:	2310      	movs	r3, #16
 80002f6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000304:	2360      	movs	r3, #96	; 0x60
 8000306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	2302      	movs	r3, #2
 800030c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000310:	2301      	movs	r3, #1
 8000312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000316:	2301      	movs	r3, #1
 8000318:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 800031c:	2328      	movs	r3, #40	; 0x28
 800031e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000322:	2307      	movs	r3, #7
 8000324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000328:	2302      	movs	r3, #2
 800032a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800032e:	2302      	movs	r3, #2
 8000330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000338:	4618      	mov	r0, r3
 800033a:	f001 fcff 	bl	8001d3c <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000344:	f000 f8ae 	bl	80004a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034c:	2303      	movs	r3, #3
 800034e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800035c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000360:	2104      	movs	r1, #4
 8000362:	4618      	mov	r0, r3
 8000364:	f002 f8d8 	bl	8002518 <HAL_RCC_ClockConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800036e:	f000 f899 	bl	80004a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000376:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000378:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800037c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800037e:	2301      	movs	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000382:	2301      	movs	r3, #1
 8000384:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000386:	2318      	movs	r3, #24
 8000388:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800038a:	2307      	movs	r3, #7
 800038c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800038e:	2302      	movs	r3, #2
 8000390:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000392:	2302      	movs	r3, #2
 8000394:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000396:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800039a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039c:	463b      	mov	r3, r7
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 fa86 	bl	80028b0 <HAL_RCCEx_PeriphCLKConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0xea>
  {
    Error_Handler();
 80003aa:	f000 f87b 	bl	80004a4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003b2:	f001 fc5d 	bl	8001c70 <HAL_PWREx_ControlVoltageScaling>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80003bc:	f000 f872 	bl	80004a4 <Error_Handler>
  }
}
 80003c0:	bf00      	nop
 80003c2:	37b8      	adds	r7, #184	; 0xb8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_SPI1_Init+0x74>)
 80003ce:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <MX_SPI1_Init+0x78>)
 80003d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <MX_SPI1_Init+0x74>)
 80003d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_SPI1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <MX_SPI1_Init+0x74>)
 80003e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_SPI1_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ee:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_SPI1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_SPI1_Init+0x74>)
 80003f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_SPI1_Init+0x74>)
 80003fe:	2218      	movs	r2, #24
 8000400:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_SPI1_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_SPI1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_SPI1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_SPI1_Init+0x74>)
 8000416:	2207      	movs	r2, #7
 8000418:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_SPI1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_SPI1_Init+0x74>)
 8000422:	2208      	movs	r2, #8
 8000424:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_SPI1_Init+0x74>)
 8000428:	f002 fd76 	bl	8002f18 <HAL_SPI_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 f837 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	200003cc 	.word	0x200003cc
 8000440:	40013000 	.word	0x40013000

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_GPIO_Init+0x5c>)
 800045a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045c:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <MX_GPIO_Init+0x5c>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_GPIO_Init+0x5c>)
 8000466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000468:	f003 0301 	and.w	r3, r3, #1
 800046c:	603b      	str	r3, [r7, #0]
 800046e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	2110      	movs	r1, #16
 8000474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000478:	f000 fc8a 	bl	8000d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800047c:	2310      	movs	r3, #16
 800047e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000480:	2301      	movs	r3, #1
 8000482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4619      	mov	r1, r3
 8000490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000494:	f000 fb02 	bl	8000a9c <HAL_GPIO_Init>

}
 8000498:	bf00      	nop
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40021000 	.word	0x40021000

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
	...

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_MspInit+0x44>)
 80004bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <HAL_MspInit+0x44>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6613      	str	r3, [r2, #96]	; 0x60
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_MspInit+0x44>)
 80004c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_MspInit+0x44>)
 80004d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <HAL_MspInit+0x44>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	6593      	str	r3, [r2, #88]	; 0x58
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_MspInit+0x44>)
 80004e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <HAL_SPI_MspInit+0x8c>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d130      	bne.n	8000580 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <HAL_SPI_MspInit+0x90>)
 8000520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000522:	4a1a      	ldr	r2, [pc, #104]	; (800058c <HAL_SPI_MspInit+0x90>)
 8000524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000528:	6613      	str	r3, [r2, #96]	; 0x60
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <HAL_SPI_MspInit+0x90>)
 800052c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <HAL_SPI_MspInit+0x90>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4a14      	ldr	r2, [pc, #80]	; (800058c <HAL_SPI_MspInit+0x90>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_SPI_MspInit+0x90>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800054e:	23c2      	movs	r3, #194	; 0xc2
 8000550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800055a:	2303      	movs	r3, #3
 800055c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800055e:	2305      	movs	r3, #5
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f000 fa96 	bl	8000a9c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2100      	movs	r1, #0
 8000574:	2023      	movs	r0, #35	; 0x23
 8000576:	f000 fa1a 	bl	80009ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800057a:	2023      	movs	r0, #35	; 0x23
 800057c:	f000 fa33 	bl	80009e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000580:	bf00      	nop
 8000582:	3728      	adds	r7, #40	; 0x28
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40013000 	.word	0x40013000
 800058c:	40021000 	.word	0x40021000

08000590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <HardFault_Handler+0x4>

080005a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <MemManage_Handler+0x4>

080005aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <BusFault_Handler+0x4>

080005b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <UsageFault_Handler+0x4>

080005b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e4:	f000 f8c8 	bl	8000778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <SPI1_IRQHandler+0x10>)
 80005f2:	f003 f9bd 	bl	8003970 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200003cc 	.word	0x200003cc

08000600 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <USB_IRQHandler+0x10>)
 8000606:	f000 fce5 	bl	8000fd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	200010a0 	.word	0x200010a0

08000614 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <SystemInit+0x64>)
 800061a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <SystemInit+0x64>)
 8000620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <SystemInit+0x68>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <SystemInit+0x68>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <SystemInit+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <SystemInit+0x68>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a0f      	ldr	r2, [pc, #60]	; (800067c <SystemInit+0x68>)
 8000640:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000644:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000648:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <SystemInit+0x68>)
 800064c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000650:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <SystemInit+0x68>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <SystemInit+0x68>)
 8000658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800065c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <SystemInit+0x68>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <SystemInit+0x64>)
 8000666:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800066a:	609a      	str	r2, [r3, #8]
#endif
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	40021000 	.word	0x40021000

08000680 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000684:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000686:	e003      	b.n	8000690 <LoopCopyDataInit>

08000688 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800068a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800068c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800068e:	3104      	adds	r1, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000694:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000696:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000698:	d3f6      	bcc.n	8000688 <CopyDataInit>
	ldr	r2, =_sbss
 800069a:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800069c:	e002      	b.n	80006a4 <LoopFillZerobss>

0800069e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800069e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006a0:	f842 3b04 	str.w	r3, [r2], #4

080006a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <LoopForever+0x16>)
	cmp	r2, r3
 80006a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006a8:	d3f9      	bcc.n	800069e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006aa:	f7ff ffb3 	bl	8000614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ae:	f006 fd87 	bl	80071c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006b2:	f7ff fd8b 	bl	80001cc <main>

080006b6 <LoopForever>:

LoopForever:
    b LoopForever
 80006b6:	e7fe      	b.n	80006b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80006bc:	080072c0 	.word	0x080072c0
	ldr	r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006c4:	2000018c 	.word	0x2000018c
	ldr	r2, =_sbss
 80006c8:	2000018c 	.word	0x2000018c
	ldr	r3, = _ebss
 80006cc:	20001314 	.word	0x20001314

080006d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_IRQHandler>

080006d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006d8:	2300      	movs	r3, #0
 80006da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 f95b 	bl	8000998 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f80e 	bl	8000704 <HAL_InitTick>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	e001      	b.n	80006f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006f4:	f7ff fede 	bl	80004b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <HAL_InitTick+0x68>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d022      	beq.n	800075e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_InitTick+0x6c>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <HAL_InitTick+0x68>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000724:	fbb1 f3f3 	udiv	r3, r1, r3
 8000728:	fbb2 f3f3 	udiv	r3, r2, r3
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f968 	bl	8000a02 <HAL_SYSTICK_Config>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10f      	bne.n	8000758 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b0f      	cmp	r3, #15
 800073c:	d809      	bhi.n	8000752 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073e:	2200      	movs	r2, #0
 8000740:	6879      	ldr	r1, [r7, #4]
 8000742:	f04f 30ff 	mov.w	r0, #4294967295
 8000746:	f000 f932 	bl	80009ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <HAL_InitTick+0x70>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	e007      	b.n	8000762 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	73fb      	strb	r3, [r7, #15]
 8000756:	e004      	b.n	8000762 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000758:	2301      	movs	r3, #1
 800075a:	73fb      	strb	r3, [r7, #15]
 800075c:	e001      	b.n	8000762 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000762:	7bfb      	ldrb	r3, [r7, #15]
}
 8000764:	4618      	mov	r0, r3
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000008 	.word	0x20000008
 8000770:	20000000 	.word	0x20000000
 8000774:	20000004 	.word	0x20000004

08000778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x1c>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x20>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4413      	add	r3, r2
 8000786:	4a03      	ldr	r2, [pc, #12]	; (8000794 <HAL_IncTick+0x1c>)
 8000788:	6013      	str	r3, [r2, #0]
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	20000430 	.word	0x20000430
 8000798:	20000008 	.word	0x20000008

0800079c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <HAL_GetTick+0x14>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000430 	.word	0x20000430

080007b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007bc:	f7ff ffee 	bl	800079c <HAL_GetTick>
 80007c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007cc:	d004      	beq.n	80007d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_Delay+0x40>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	4413      	add	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007d8:	bf00      	nop
 80007da:	f7ff ffdf 	bl	800079c <HAL_GetTick>
 80007de:	4602      	mov	r2, r0
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d8f7      	bhi.n	80007da <HAL_Delay+0x26>
  {
  }
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008

080007f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	60d3      	str	r3, [r2, #12]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <__NVIC_GetPriorityGrouping+0x18>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	f003 0307 	and.w	r3, r3, #7
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	db0b      	blt.n	8000886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 021f 	and.w	r2, r3, #31
 8000874:	4907      	ldr	r1, [pc, #28]	; (8000894 <__NVIC_EnableIRQ+0x38>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	095b      	lsrs	r3, r3, #5
 800087c:	2001      	movs	r0, #1
 800087e:	fa00 f202 	lsl.w	r2, r0, r2
 8000882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	; (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	; 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000964:	d301      	bcc.n	800096a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000966:	2301      	movs	r3, #1
 8000968:	e00f      	b.n	800098a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <SysTick_Config+0x40>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000972:	210f      	movs	r1, #15
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f7ff ff8e 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SysTick_Config+0x40>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SysTick_Config+0x40>)
 8000984:	2207      	movs	r2, #7
 8000986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff29 	bl	80007f8 <__NVIC_SetPriorityGrouping>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009c0:	f7ff ff3e 	bl	8000840 <__NVIC_GetPriorityGrouping>
 80009c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	6978      	ldr	r0, [r7, #20]
 80009cc:	f7ff ff8e 	bl	80008ec <NVIC_EncodePriority>
 80009d0:	4602      	mov	r2, r0
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff5d 	bl	8000898 <__NVIC_SetPriority>
}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff31 	bl	800085c <__NVIC_EnableIRQ>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffa2 	bl	8000954 <SysTick_Config>
 8000a10:	4603      	mov	r3, r0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b084      	sub	sp, #16
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d005      	beq.n	8000a3e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2204      	movs	r2, #4
 8000a36:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
 8000a3c:	e029      	b.n	8000a92 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f022 020e 	bic.w	r2, r2, #14
 8000a4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f022 0201 	bic.w	r2, r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f003 021c 	and.w	r2, r3, #28
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a70:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2201      	movs	r2, #1
 8000a76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	4798      	blx	r3
    }
  }
  return status;
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aaa:	e154      	b.n	8000d56 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 8146 	beq.w	8000d50 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x38>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b12      	cmp	r3, #18
 8000ad2:	d123      	bne.n	8000b1c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	08da      	lsrs	r2, r3, #3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3208      	adds	r2, #8
 8000adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	220f      	movs	r2, #15
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	691a      	ldr	r2, [r3, #16]
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	08da      	lsrs	r2, r3, #3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3208      	adds	r2, #8
 8000b16:	6939      	ldr	r1, [r7, #16]
 8000b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	2203      	movs	r2, #3
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0203 	and.w	r2, r3, #3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d00b      	beq.n	8000b70 <HAL_GPIO_Init+0xd4>
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d007      	beq.n	8000b70 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b64:	2b11      	cmp	r3, #17
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2b12      	cmp	r3, #18
 8000b6e:	d130      	bne.n	8000bd2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68da      	ldr	r2, [r3, #12]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	091b      	lsrs	r3, r3, #4
 8000bbc:	f003 0201 	and.w	r2, r3, #1
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	2203      	movs	r2, #3
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 80a0 	beq.w	8000d50 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c10:	4b58      	ldr	r3, [pc, #352]	; (8000d74 <HAL_GPIO_Init+0x2d8>)
 8000c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c14:	4a57      	ldr	r2, [pc, #348]	; (8000d74 <HAL_GPIO_Init+0x2d8>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c1c:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <HAL_GPIO_Init+0x2d8>)
 8000c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c28:	4a53      	ldr	r2, [pc, #332]	; (8000d78 <HAL_GPIO_Init+0x2dc>)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c52:	d019      	beq.n	8000c88 <HAL_GPIO_Init+0x1ec>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a49      	ldr	r2, [pc, #292]	; (8000d7c <HAL_GPIO_Init+0x2e0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d013      	beq.n	8000c84 <HAL_GPIO_Init+0x1e8>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a48      	ldr	r2, [pc, #288]	; (8000d80 <HAL_GPIO_Init+0x2e4>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d00d      	beq.n	8000c80 <HAL_GPIO_Init+0x1e4>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a47      	ldr	r2, [pc, #284]	; (8000d84 <HAL_GPIO_Init+0x2e8>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d007      	beq.n	8000c7c <HAL_GPIO_Init+0x1e0>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a46      	ldr	r2, [pc, #280]	; (8000d88 <HAL_GPIO_Init+0x2ec>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d101      	bne.n	8000c78 <HAL_GPIO_Init+0x1dc>
 8000c74:	2304      	movs	r3, #4
 8000c76:	e008      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c78:	2307      	movs	r3, #7
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e004      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	4093      	lsls	r3, r2
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c9a:	4937      	ldr	r1, [pc, #220]	; (8000d78 <HAL_GPIO_Init+0x2dc>)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ca8:	4b38      	ldr	r3, [pc, #224]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ccc:	4a2f      	ldr	r2, [pc, #188]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cf6:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d20:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f47f aea3 	bne.w	8000aac <HAL_GPIO_Init+0x10>
  }
}
 8000d66:	bf00      	nop
 8000d68:	371c      	adds	r7, #28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48000800 	.word	0x48000800
 8000d84:	48000c00 	.word	0x48000c00
 8000d88:	48001000 	.word	0x48001000
 8000d8c:	40010400 	.word	0x40010400

08000d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000da0:	787b      	ldrb	r3, [r7, #1]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dac:	e002      	b.n	8000db4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dae:	887a      	ldrh	r2, [r7, #2]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	b08b      	sub	sp, #44	; 0x2c
 8000dc4:	af06      	add	r7, sp, #24
 8000dc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e0da      	b.n	8000f88 <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d106      	bne.n	8000dec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f005 fe74 	bl	8006ad4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2203      	movs	r2, #3
 8000df0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 f876 	bl	8003eea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	687e      	ldr	r6, [r7, #4]
 8000e06:	466d      	mov	r5, sp
 8000e08:	f106 0410 	add.w	r4, r6, #16
 8000e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	602b      	str	r3, [r5, #0]
 8000e14:	1d33      	adds	r3, r6, #4
 8000e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e18:	6838      	ldr	r0, [r7, #0]
 8000e1a:	f003 f83d 	bl	8003e98 <USB_CoreInit>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d005      	beq.n	8000e30 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2202      	movs	r2, #2
 8000e28:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e0ab      	b.n	8000f88 <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f003 f874 	bl	8003f24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	e035      	b.n	8000eae <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	015b      	lsls	r3, r3, #5
 8000e48:	4413      	add	r3, r2
 8000e4a:	3329      	adds	r3, #41	; 0x29
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	015b      	lsls	r3, r3, #5
 8000e56:	4413      	add	r3, r2
 8000e58:	3328      	adds	r3, #40	; 0x28
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	b291      	uxth	r1, r2
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	015b      	lsls	r3, r3, #5
 8000e68:	4413      	add	r3, r2
 8000e6a:	3336      	adds	r3, #54	; 0x36
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	015b      	lsls	r3, r3, #5
 8000e76:	4413      	add	r3, r2
 8000e78:	332b      	adds	r3, #43	; 0x2b
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	015b      	lsls	r3, r3, #5
 8000e84:	4413      	add	r3, r2
 8000e86:	3338      	adds	r3, #56	; 0x38
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	015b      	lsls	r3, r3, #5
 8000e92:	4413      	add	r3, r2
 8000e94:	333c      	adds	r3, #60	; 0x3c
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	015b      	lsls	r3, r3, #5
 8000ea2:	4413      	add	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d3c4      	bcc.n	8000e42 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e031      	b.n	8000f22 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	015b      	lsls	r3, r3, #5
 8000ec4:	4413      	add	r3, r2
 8000ec6:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	015b      	lsls	r3, r3, #5
 8000ed4:	4413      	add	r3, r2
 8000ed6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	015b      	lsls	r3, r3, #5
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	015b      	lsls	r3, r3, #5
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	015b      	lsls	r3, r3, #5
 8000f04:	4413      	add	r3, r2
 8000f06:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	330a      	adds	r3, #10
 8000f14:	015b      	lsls	r3, r3, #5
 8000f16:	4413      	add	r3, r2
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d3c8      	bcc.n	8000ebe <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	687e      	ldr	r6, [r7, #4]
 8000f34:	466d      	mov	r5, sp
 8000f36:	f106 0410 	add.w	r4, r6, #16
 8000f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	602b      	str	r3, [r5, #0]
 8000f42:	1d33      	adds	r3, r6, #4
 8000f44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f46:	6838      	ldr	r0, [r7, #0]
 8000f48:	f002 fff9 	bl	8003f3e <USB_DevInit>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2202      	movs	r2, #2
 8000f56:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e014      	b.n	8000f88 <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fe41 	bl	8001bfe <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 f82e 	bl	8004fe2 <USB_DevDisconnect>

  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <HAL_PCD_Start+0x16>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e012      	b.n	8000fcc <HAL_PCD_Start+0x3c>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 fffe 	bl	8004fb4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f002 ff7c 	bl	8003eba <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f004 f813 	bl	800500c <USB_ReadInterrupts>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ff0:	d102      	bne.n	8000ff8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fb3e 	bl	8001674 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 f805 	bl	800500c <USB_ReadInterrupts>
 8001002:	4603      	mov	r3, r0
 8001004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100c:	d112      	bne.n	8001034 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001016:	b29a      	uxth	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001020:	b292      	uxth	r2, r2
 8001022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f005 fdc9 	bl	8006bbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800102c:	2100      	movs	r1, #0
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f929 	bl	8001286 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f003 ffe7 	bl	800500c <USB_ReadInterrupts>
 800103e:	4603      	mov	r3, r0
 8001040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001048:	d10b      	bne.n	8001062 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001052:	b29a      	uxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800105c:	b292      	uxth	r2, r2
 800105e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f003 ffd0 	bl	800500c <USB_ReadInterrupts>
 800106c:	4603      	mov	r3, r0
 800106e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001076:	d10b      	bne.n	8001090 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001080:	b29a      	uxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800108a:	b292      	uxth	r2, r2
 800108c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f003 ffb9 	bl	800500c <USB_ReadInterrupts>
 800109a:	4603      	mov	r3, r0
 800109c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010a4:	d133      	bne.n	800110e <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0204 	bic.w	r2, r2, #4
 80010b8:	b292      	uxth	r2, r2
 80010ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0208 	bic.w	r2, r2, #8
 80010d0:	b292      	uxth	r2, r2
 80010d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d107      	bne.n	80010f0 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80010e8:	2100      	movs	r1, #0
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f006 f814 	bl	8007118 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f005 fd9d 	bl	8006c30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010fe:	b29a      	uxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001108:	b292      	uxth	r2, r2
 800110a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f003 ff7a 	bl	800500c <USB_ReadInterrupts>
 8001118:	4603      	mov	r3, r0
 800111a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800111e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001122:	d131      	bne.n	8001188 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0208 	orr.w	r2, r2, #8
 8001136:	b292      	uxth	r2, r2
 8001138:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001144:	b29a      	uxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800114e:	b292      	uxth	r2, r2
 8001150:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0204 	orr.w	r2, r2, #4
 8001166:	b292      	uxth	r2, r2
 8001168:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f003 ff4b 	bl	800500c <USB_ReadInterrupts>
 8001176:	4603      	mov	r3, r0
 8001178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800117c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001180:	d002      	beq.n	8001188 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f005 fd3a 	bl	8006bfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f003 ff3d 	bl	800500c <USB_ReadInterrupts>
 8001192:	4603      	mov	r3, r0
 8001194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001198:	2b80      	cmp	r3, #128	; 0x80
 800119a:	d13f      	bne.n	800121c <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ae:	b292      	uxth	r2, r2
 80011b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d12b      	bne.n	8001216 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0204 	orr.w	r2, r2, #4
 80011d0:	b292      	uxth	r2, r2
 80011d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011de:	b29a      	uxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 0208 	orr.w	r2, r2, #8
 80011e8:	b292      	uxth	r2, r2
 80011ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80011fe:	b29b      	uxth	r3, r3
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800120c:	2101      	movs	r1, #1
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f005 ff82 	bl	8007118 <HAL_PCDEx_LPM_Callback>
 8001214:	e002      	b.n	800121c <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f005 fcf0 	bl	8006bfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fef3 	bl	800500c <USB_ReadInterrupts>
 8001226:	4603      	mov	r3, r0
 8001228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800122c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001230:	d10e      	bne.n	8001250 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800123a:	b29a      	uxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001244:	b292      	uxth	r2, r2
 8001246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f005 fca9 	bl	8006ba2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fed9 	bl	800500c <USB_ReadInterrupts>
 800125a:	4603      	mov	r3, r0
 800125c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001264:	d10b      	bne.n	800127e <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800126e:	b29a      	uxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001278:	b292      	uxth	r2, r2
 800127a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_PCD_SetAddress+0x1a>
 800129c:	2302      	movs	r3, #2
 800129e:	e013      	b.n	80012c8 <HAL_PCD_SetAddress+0x42>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	78fa      	ldrb	r2, [r7, #3]
 80012ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	78fa      	ldrb	r2, [r7, #3]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 fe67 	bl	8004f8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	4608      	mov	r0, r1
 80012da:	4611      	mov	r1, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	4603      	mov	r3, r0
 80012e0:	70fb      	strb	r3, [r7, #3]
 80012e2:	460b      	mov	r3, r1
 80012e4:	803b      	strh	r3, [r7, #0]
 80012e6:	4613      	mov	r3, r2
 80012e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da0b      	bge.n	800130e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	015b      	lsls	r3, r3, #5
 80012fe:	3328      	adds	r3, #40	; 0x28
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2201      	movs	r2, #1
 800130a:	705a      	strb	r2, [r3, #1]
 800130c:	e00b      	b.n	8001326 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	015b      	lsls	r3, r3, #5
 8001316:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	b2da      	uxtb	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001332:	883a      	ldrh	r2, [r7, #0]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	78ba      	ldrb	r2, [r7, #2]
 800133c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	785b      	ldrb	r3, [r3, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d004      	beq.n	8001350 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b29a      	uxth	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001350:	78bb      	ldrb	r3, [r7, #2]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d102      	bne.n	800135c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <HAL_PCD_EP_Open+0x9a>
 8001366:	2302      	movs	r3, #2
 8001368:	e00e      	b.n	8001388 <HAL_PCD_EP_Open+0xb8>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68f9      	ldr	r1, [r7, #12]
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fe05 	bl	8003f88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001386:	7afb      	ldrb	r3, [r7, #11]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800139c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	da0b      	bge.n	80013bc <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	015b      	lsls	r3, r3, #5
 80013ac:	3328      	adds	r3, #40	; 0x28
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2201      	movs	r2, #1
 80013b8:	705a      	strb	r2, [r3, #1]
 80013ba:	e00b      	b.n	80013d4 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	015b      	lsls	r3, r3, #5
 80013c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_PCD_EP_Close+0x5e>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e00e      	b.n	800140c <HAL_PCD_EP_Close+0x7c>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 f8ad 	bl	800455c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	460b      	mov	r3, r1
 8001422:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001424:	7afb      	ldrb	r3, [r7, #11]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	015b      	lsls	r3, r3, #5
 800142c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2200      	movs	r2, #0
 8001446:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2200      	movs	r2, #0
 800144c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800144e:	7afb      	ldrb	r3, [r7, #11]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	b2da      	uxtb	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800145a:	7afb      	ldrb	r3, [r7, #11]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	2b00      	cmp	r3, #0
 8001462:	d106      	bne.n	8001472 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6979      	ldr	r1, [r7, #20]
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fa0c 	bl	8004888 <USB_EPStartXfer>
 8001470:	e005      	b.n	800147e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6979      	ldr	r1, [r7, #20]
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fa05 	bl	8004888 <USB_EPStartXfer>
  }

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	330a      	adds	r3, #10
 800149e:	015b      	lsls	r3, r3, #5
 80014a0:	4413      	add	r3, r2
 80014a2:	3304      	adds	r3, #4
 80014a4:	681b      	ldr	r3, [r3, #0]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	460b      	mov	r3, r1
 80014c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	015b      	lsls	r3, r3, #5
 80014ca:	3328      	adds	r3, #40	; 0x28
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2200      	movs	r2, #0
 80014e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2201      	movs	r2, #1
 80014e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014ea:	7afb      	ldrb	r3, [r7, #11]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014f6:	7afb      	ldrb	r3, [r7, #11]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6979      	ldr	r1, [r7, #20]
 8001506:	4618      	mov	r0, r3
 8001508:	f003 f9be 	bl	8004888 <USB_EPStartXfer>
 800150c:	e005      	b.n	800151a <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6979      	ldr	r1, [r7, #20]
 8001514:	4618      	mov	r0, r3
 8001516:	f003 f9b7 	bl	8004888 <USB_EPStartXfer>
  }

  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	f003 0207 	and.w	r2, r3, #7
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	d901      	bls.n	8001542 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e046      	b.n	80015d0 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001546:	2b00      	cmp	r3, #0
 8001548:	da0b      	bge.n	8001562 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	3328      	adds	r3, #40	; 0x28
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2201      	movs	r2, #1
 800155e:	705a      	strb	r2, [r3, #1]
 8001560:	e009      	b.n	8001576 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	015b      	lsls	r3, r3, #5
 8001566:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2201      	movs	r2, #1
 800157a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	b2da      	uxtb	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_PCD_EP_SetStall+0x72>
 8001592:	2302      	movs	r3, #2
 8001594:	e01c      	b.n	80015d0 <HAL_PCD_EP_SetStall+0xac>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68f9      	ldr	r1, [r7, #12]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 fc1b 	bl	8004de0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d108      	bne.n	80015c6 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f003 fd33 	bl	800502c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	f003 020f 	and.w	r2, r3, #15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d901      	bls.n	80015f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e03a      	b.n	800166c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da0b      	bge.n	8001616 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	015b      	lsls	r3, r3, #5
 8001606:	3328      	adds	r3, #40	; 0x28
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	705a      	strb	r2, [r3, #1]
 8001614:	e00b      	b.n	800162e <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	015b      	lsls	r3, r3, #5
 800161e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	b2da      	uxtb	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_PCD_EP_ClrStall+0x76>
 800164a:	2302      	movs	r3, #2
 800164c:	e00e      	b.n	800166c <HAL_PCD_EP_ClrStall+0x94>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68f9      	ldr	r1, [r7, #12]
 800165c:	4618      	mov	r0, r3
 800165e:	f003 fc01 	bl	8004e64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800167c:	e26f      	b.n	8001b5e <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001686:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001688:	8afb      	ldrh	r3, [r7, #22]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001692:	7d7b      	ldrb	r3, [r7, #21]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f040 8137 	bne.w	8001908 <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800169a:	8afb      	ldrh	r3, [r7, #22]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d14f      	bne.n	8001744 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016b4:	b29c      	uxth	r4, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80016be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3328      	adds	r3, #40	; 0x28
 80016ca:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4413      	add	r3, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	441a      	add	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001702:	2100      	movs	r1, #0
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f005 fa35 	bl	8006b74 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8223 	beq.w	8001b5e <PCD_EP_ISR_Handler+0x4ea>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f040 821e 	bne.w	8001b5e <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800172e:	b2da      	uxtb	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b292      	uxth	r2, r2
 8001736:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001742:	e20c      	b.n	8001b5e <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800174a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001754:	8a7b      	ldrh	r3, [r7, #18]
 8001756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800175a:	2b00      	cmp	r3, #0
 800175c:	d031      	beq.n	80017c2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001766:	b29b      	uxth	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	4413      	add	r3, r2
 8001778:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001798:	b29b      	uxth	r3, r3
 800179a:	f003 fc94 	bl	80050c6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017aa:	4013      	ands	r3, r2
 80017ac:	b29c      	uxth	r4, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80017b6:	b292      	uxth	r2, r2
 80017b8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f005 f9b0 	bl	8006b20 <HAL_PCD_SetupStageCallback>
 80017c0:	e1cd      	b.n	8001b5e <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f280 81c9 	bge.w	8001b5e <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017d8:	4013      	ands	r3, r2
 80017da:	b29c      	uxth	r4, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80017e4:	b292      	uxth	r2, r2
 80017e6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	4413      	add	r3, r2
 8001802:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d019      	beq.n	800184c <PCD_EP_ISR_Handler+0x1d8>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d015      	beq.n	800184c <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6959      	ldr	r1, [r3, #20]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001830:	b29b      	uxth	r3, r3
 8001832:	f003 fc48 	bl	80050c6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	441a      	add	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001844:	2100      	movs	r1, #0
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f005 f97c 	bl	8006b44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461c      	mov	r4, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800185a:	b29b      	uxth	r3, r3
 800185c:	441c      	add	r4, r3
 800185e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d110      	bne.n	800188e <PCD_EP_ISR_Handler+0x21a>
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001874:	b29a      	uxth	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	801a      	strh	r2, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001886:	b29a      	uxth	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	801a      	strh	r2, [r3, #0]
 800188c:	e026      	b.n	80018dc <PCD_EP_ISR_Handler+0x268>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b3d      	cmp	r3, #61	; 0x3d
 8001894:	d813      	bhi.n	80018be <PCD_EP_ISR_Handler+0x24a>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <PCD_EP_ISR_Handler+0x23c>
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	3301      	adds	r3, #1
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	029b      	lsls	r3, r3, #10
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	801a      	strh	r2, [r3, #0]
 80018bc:	e00e      	b.n	80018dc <PCD_EP_ISR_Handler+0x268>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	029b      	lsls	r3, r3, #10
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ec:	b29c      	uxth	r4, r3
 80018ee:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80018f2:	b29c      	uxth	r4, r3
 80018f4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80018f8:	b29c      	uxth	r4, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b9f      	ldr	r3, [pc, #636]	; (8001b7c <PCD_EP_ISR_Handler+0x508>)
 8001900:	4323      	orrs	r3, r4
 8001902:	b29b      	uxth	r3, r3
 8001904:	8013      	strh	r3, [r2, #0]
 8001906:	e12a      	b.n	8001b5e <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	7d7b      	ldrb	r3, [r7, #21]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001918:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800191c:	2b00      	cmp	r3, #0
 800191e:	f280 80cb 	bge.w	8001ab8 <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	7d7b      	ldrb	r3, [r7, #21]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	b29a      	uxth	r2, r3
 8001932:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001936:	4013      	ands	r3, r2
 8001938:	b29c      	uxth	r4, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	7d7b      	ldrb	r3, [r7, #21]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800194a:	b292      	uxth	r2, r2
 800194c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800194e:	7d7b      	ldrb	r3, [r7, #21]
 8001950:	015b      	lsls	r3, r3, #5
 8001952:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	7b1b      	ldrb	r3, [r3, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11f      	bne.n	80019a4 <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800196c:	b29b      	uxth	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4413      	add	r3, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4413      	add	r3, r2
 800197e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001988:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800198a:	8bfb      	ldrh	r3, [r7, #30]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d06e      	beq.n	8001a6e <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6959      	ldr	r1, [r3, #20]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	88da      	ldrh	r2, [r3, #6]
 800199c:	8bfb      	ldrh	r3, [r7, #30]
 800199e:	f003 fb92 	bl	80050c6 <USB_ReadPMA>
 80019a2:	e064      	b.n	8001a6e <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01f      	beq.n	80019fe <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4413      	add	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019e2:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80019e4:	8bfb      	ldrh	r3, [r7, #30]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d028      	beq.n	8001a3c <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6959      	ldr	r1, [r3, #20]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	891a      	ldrh	r2, [r3, #8]
 80019f6:	8bfb      	ldrh	r3, [r7, #30]
 80019f8:	f003 fb65 	bl	80050c6 <USB_ReadPMA>
 80019fc:	e01e      	b.n	8001a3c <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a22:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001a24:	8bfb      	ldrh	r3, [r7, #30]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6959      	ldr	r1, [r3, #20]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	895a      	ldrh	r2, [r3, #10]
 8001a36:	8bfb      	ldrh	r3, [r7, #30]
 8001a38:	f003 fb45 	bl	80050c6 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a56:	b29c      	uxth	r4, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	441a      	add	r2, r3
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <PCD_EP_ISR_Handler+0x50c>)
 8001a68:	4323      	orrs	r3, r4
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	8bfb      	ldrh	r3, [r7, #30]
 8001a74:	441a      	add	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	8bfb      	ldrh	r3, [r7, #30]
 8001a80:	441a      	add	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d004      	beq.n	8001a98 <PCD_EP_ISR_Handler+0x424>
 8001a8e:	8bfa      	ldrh	r2, [r7, #30]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d206      	bcs.n	8001aa6 <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f005 f850 	bl	8006b44 <HAL_PCD_DataOutStageCallback>
 8001aa4:	e008      	b.n	8001ab8 <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	7819      	ldrb	r1, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fcae 	bl	8001414 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ab8:	8a7b      	ldrh	r3, [r7, #18]
 8001aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d04d      	beq.n	8001b5e <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ac2:	7d7b      	ldrb	r3, [r7, #21]
 8001ac4:	015b      	lsls	r3, r3, #5
 8001ac6:	3328      	adds	r3, #40	; 0x28
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	7d7b      	ldrb	r3, [r7, #21]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae6:	b29c      	uxth	r4, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	7d7b      	ldrb	r3, [r7, #21]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	441a      	add	r2, r3
 8001af4:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	441a      	add	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4619      	mov	r1, r3
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f005 f815 	bl	8006b74 <HAL_PCD_DataInStageCallback>
 8001b4a:	e008      	b.n	8001b5e <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	7819      	ldrb	r1, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fcaa 	bl	80014b2 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f6ff ad87 	blt.w	800167e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd90      	pop	{r4, r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	ffff8080 	.word	0xffff8080
 8001b80:	ffff80c0 	.word	0xffff80c0

08001b84 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	817b      	strh	r3, [r7, #10]
 8001b92:	4613      	mov	r3, r2
 8001b94:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001b96:	897b      	ldrh	r3, [r7, #10]
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba2:	897b      	ldrh	r3, [r7, #10]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	015b      	lsls	r3, r3, #5
 8001baa:	3328      	adds	r3, #40	; 0x28
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e006      	b.n	8001bc2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bb4:	897b      	ldrh	r3, [r7, #10]
 8001bb6:	015b      	lsls	r3, r3, #5
 8001bb8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001bc2:	893b      	ldrh	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d107      	bne.n	8001bd8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	80da      	strh	r2, [r3, #6]
 8001bd6:	e00b      	b.n	8001bf0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <HAL_PWREx_GetVoltageRange+0x18>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40007000 	.word	0x40007000

08001c70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c7e:	d130      	bne.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c80:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c8c:	d038      	beq.n	8001d00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c96:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2232      	movs	r2, #50	; 0x32
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0c9b      	lsrs	r3, r3, #18
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb4:	e002      	b.n	8001cbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc8:	d102      	bne.n	8001cd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f2      	bne.n	8001cb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cdc:	d110      	bne.n	8001d00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e00f      	b.n	8001d02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cee:	d007      	beq.n	8001d00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cf8:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cfe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40007000 	.word	0x40007000
 8001d14:	20000000 	.word	0x20000000
 8001d18:	431bde83 	.word	0x431bde83

08001d1c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2a:	6053      	str	r3, [r2, #4]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40007000 	.word	0x40007000

08001d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e3db      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4e:	4ba4      	ldr	r3, [pc, #656]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d58:	4ba1      	ldr	r3, [pc, #644]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80e1 	beq.w	8001f32 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <HAL_RCC_OscConfig+0x4a>
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	f040 8088 	bne.w	8001e8e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	f040 8084 	bne.w	8001e8e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d86:	4b96      	ldr	r3, [pc, #600]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_RCC_OscConfig+0x62>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e3b3      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1a      	ldr	r2, [r3, #32]
 8001da2:	4b8f      	ldr	r3, [pc, #572]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <HAL_RCC_OscConfig+0x7c>
 8001dae:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db6:	e005      	b.n	8001dc4 <HAL_RCC_OscConfig+0x88>
 8001db8:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d223      	bcs.n	8001e10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fd0f 	bl	80027f0 <RCC_SetFlashLatencyFromMSIRange>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e394      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ddc:	4b80      	ldr	r3, [pc, #512]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a7f      	ldr	r2, [pc, #508]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b7d      	ldr	r3, [pc, #500]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	497a      	ldr	r1, [pc, #488]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dfa:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	4975      	ldr	r1, [pc, #468]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
 8001e0e:	e022      	b.n	8001e56 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e10:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a72      	ldr	r2, [pc, #456]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	496d      	ldr	r1, [pc, #436]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e2e:	4b6c      	ldr	r3, [pc, #432]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	4968      	ldr	r1, [pc, #416]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fcd2 	bl	80027f0 <RCC_SetFlashLatencyFromMSIRange>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e357      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e56:	f000 fc41 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8001e5a:	4601      	mov	r1, r0
 8001e5c:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	4a5f      	ldr	r2, [pc, #380]	; (8001fe4 <HAL_RCC_OscConfig+0x2a8>)
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e72:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e76:	4b5d      	ldr	r3, [pc, #372]	; (8001fec <HAL_RCC_OscConfig+0x2b0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fc42 	bl	8000704 <HAL_InitTick>
 8001e80:	4603      	mov	r3, r0
 8001e82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d052      	beq.n	8001f30 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	e33b      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d032      	beq.n	8001efc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e96:	4b52      	ldr	r3, [pc, #328]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a51      	ldr	r2, [pc, #324]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ea2:	f7fe fc7b 	bl	800079c <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eaa:	f7fe fc77 	bl	800079c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e324      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ebc:	4b48      	ldr	r3, [pc, #288]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec8:	4b45      	ldr	r3, [pc, #276]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a44      	ldr	r2, [pc, #272]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001ece:	f043 0308 	orr.w	r3, r3, #8
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b42      	ldr	r3, [pc, #264]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	493f      	ldr	r1, [pc, #252]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	493a      	ldr	r1, [pc, #232]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
 8001efa:	e01a      	b.n	8001f32 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001efc:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a37      	ldr	r2, [pc, #220]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f08:	f7fe fc48 	bl	800079c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f10:	f7fe fc44 	bl	800079c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e2f1      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1d4>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d074      	beq.n	8002028 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_OscConfig+0x214>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	d10e      	bne.n	8001f68 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d064      	beq.n	8002026 <HAL_RCC_OscConfig+0x2ea>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d160      	bne.n	8002026 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e2ce      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d106      	bne.n	8001f80 <HAL_RCC_OscConfig+0x244>
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e01d      	b.n	8001fbc <HAL_RCC_OscConfig+0x280>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x268>
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0x280>
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <HAL_RCC_OscConfig+0x2a4>)
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01c      	beq.n	8001ffe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fbea 	bl	800079c <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fca:	e011      	b.n	8001ff0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7fe fbe6 	bl	800079c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d90a      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e293      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08007278 	.word	0x08007278
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff0:	4bae      	ldr	r3, [pc, #696]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0e7      	beq.n	8001fcc <HAL_RCC_OscConfig+0x290>
 8001ffc:	e014      	b.n	8002028 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fbcd 	bl	800079c <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002006:	f7fe fbc9 	bl	800079c <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b64      	cmp	r3, #100	; 0x64
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e276      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002018:	4ba4      	ldr	r3, [pc, #656]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0x2ca>
 8002024:	e000      	b.n	8002028 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002026:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d060      	beq.n	80020f6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b04      	cmp	r3, #4
 8002038:	d005      	beq.n	8002046 <HAL_RCC_OscConfig+0x30a>
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2b0c      	cmp	r3, #12
 800203e:	d119      	bne.n	8002074 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d116      	bne.n	8002074 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002046:	4b99      	ldr	r3, [pc, #612]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x322>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e253      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4b93      	ldr	r3, [pc, #588]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	061b      	lsls	r3, r3, #24
 800206c:	498f      	ldr	r1, [pc, #572]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002072:	e040      	b.n	80020f6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d023      	beq.n	80020c4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800207c:	4b8b      	ldr	r3, [pc, #556]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a8a      	ldr	r2, [pc, #552]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe fb88 	bl	800079c <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002090:	f7fe fb84 	bl	800079c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e231      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a2:	4b82      	ldr	r3, [pc, #520]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ae:	4b7f      	ldr	r3, [pc, #508]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	061b      	lsls	r3, r3, #24
 80020bc:	497b      	ldr	r1, [pc, #492]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
 80020c2:	e018      	b.n	80020f6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c4:	4b79      	ldr	r3, [pc, #484]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a78      	ldr	r2, [pc, #480]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 80020ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7fe fb64 	bl	800079c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d8:	f7fe fb60 	bl	800079c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e20d      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ea:	4b70      	ldr	r3, [pc, #448]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d03c      	beq.n	800217c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d01c      	beq.n	8002144 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210a:	4b68      	ldr	r3, [pc, #416]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 800210c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002110:	4a66      	ldr	r2, [pc, #408]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211a:	f7fe fb3f 	bl	800079c <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002122:	f7fe fb3b 	bl	800079c <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e1e8      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002134:	4b5d      	ldr	r3, [pc, #372]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0ef      	beq.n	8002122 <HAL_RCC_OscConfig+0x3e6>
 8002142:	e01b      	b.n	800217c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214a:	4a58      	ldr	r2, [pc, #352]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7fe fb22 	bl	800079c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215c:	f7fe fb1e 	bl	800079c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e1cb      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216e:	4b4f      	ldr	r3, [pc, #316]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ef      	bne.n	800215c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a5 	beq.w	80022d4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10d      	bne.n	80021b6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b44      	ldr	r3, [pc, #272]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	4a43      	ldr	r2, [pc, #268]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6593      	str	r3, [r2, #88]	; 0x58
 80021a6:	4b41      	ldr	r3, [pc, #260]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b2:	2301      	movs	r3, #1
 80021b4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <HAL_RCC_OscConfig+0x574>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c2:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <HAL_RCC_OscConfig+0x574>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_RCC_OscConfig+0x574>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ce:	f7fe fae5 	bl	800079c <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7fe fae1 	bl	800079c <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e18e      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e8:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <HAL_RCC_OscConfig+0x574>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d108      	bne.n	800220e <HAL_RCC_OscConfig+0x4d2>
 80021fc:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	4a2a      	ldr	r2, [pc, #168]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800220c:	e024      	b.n	8002258 <HAL_RCC_OscConfig+0x51c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b05      	cmp	r3, #5
 8002214:	d110      	bne.n	8002238 <HAL_RCC_OscConfig+0x4fc>
 8002216:	4b25      	ldr	r3, [pc, #148]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	4a1f      	ldr	r2, [pc, #124]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002236:	e00f      	b.n	8002258 <HAL_RCC_OscConfig+0x51c>
 8002238:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	4a17      	ldr	r2, [pc, #92]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d016      	beq.n	800228e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002260:	f7fe fa9c 	bl	800079c <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002266:	e00a      	b.n	800227e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7fe fa98 	bl	800079c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	; 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e143      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_OscConfig+0x570>)
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0ed      	beq.n	8002268 <HAL_RCC_OscConfig+0x52c>
 800228c:	e019      	b.n	80022c2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228e:	f7fe fa85 	bl	800079c <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002294:	e00e      	b.n	80022b4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7fe fa81 	bl	800079c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d905      	bls.n	80022b4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e12c      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b4:	4b96      	ldr	r3, [pc, #600]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1e9      	bne.n	8002296 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c2:	7ffb      	ldrb	r3, [r7, #31]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d105      	bne.n	80022d4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c8:	4b91      	ldr	r3, [pc, #580]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	4a90      	ldr	r2, [pc, #576]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 80022ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d03c      	beq.n	800235a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01c      	beq.n	8002322 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022e8:	4b89      	ldr	r3, [pc, #548]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 80022ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022ee:	4a88      	ldr	r2, [pc, #544]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe fa50 	bl	800079c <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002300:	f7fe fa4c 	bl	800079c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0f9      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002312:	4b7f      	ldr	r3, [pc, #508]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 8002314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ef      	beq.n	8002300 <HAL_RCC_OscConfig+0x5c4>
 8002320:	e01b      	b.n	800235a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002322:	4b7b      	ldr	r3, [pc, #492]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 8002324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002328:	4a79      	ldr	r2, [pc, #484]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7fe fa33 	bl	800079c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800233a:	f7fe fa2f 	bl	800079c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0dc      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800234c:	4b70      	ldr	r3, [pc, #448]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 800234e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ef      	bne.n	800233a <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 80d0 	beq.w	8002504 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	f000 808d 	beq.w	8002486 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	2b02      	cmp	r3, #2
 8002372:	d15a      	bne.n	800242a <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b66      	ldr	r3, [pc, #408]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a65      	ldr	r2, [pc, #404]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 800237a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe fa0c 	bl	800079c <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe fa08 	bl	800079c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e0b5      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800239a:	4b5d      	ldr	r3, [pc, #372]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a6:	4b5a      	ldr	r3, [pc, #360]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <HAL_RCC_OscConfig+0x7d8>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023b6:	3a01      	subs	r2, #1
 80023b8:	0112      	lsls	r2, r2, #4
 80023ba:	4311      	orrs	r1, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023c0:	0212      	lsls	r2, r2, #8
 80023c2:	4311      	orrs	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023c8:	0852      	lsrs	r2, r2, #1
 80023ca:	3a01      	subs	r2, #1
 80023cc:	0552      	lsls	r2, r2, #21
 80023ce:	4311      	orrs	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023d4:	0852      	lsrs	r2, r2, #1
 80023d6:	3a01      	subs	r2, #1
 80023d8:	0652      	lsls	r2, r2, #25
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023e0:	06d2      	lsls	r2, r2, #27
 80023e2:	430a      	orrs	r2, r1
 80023e4:	494a      	ldr	r1, [pc, #296]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ea:	4b49      	ldr	r3, [pc, #292]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a48      	ldr	r2, [pc, #288]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 80023f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023f6:	4b46      	ldr	r3, [pc, #280]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4a45      	ldr	r2, [pc, #276]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 80023fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002400:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7fe f9cb 	bl	800079c <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240a:	f7fe f9c7 	bl	800079c <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e074      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241c:	4b3c      	ldr	r3, [pc, #240]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x6ce>
 8002428:	e06c      	b.n	8002504 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242a:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a38      	ldr	r2, [pc, #224]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 8002430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002434:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002442:	4b33      	ldr	r3, [pc, #204]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	4a32      	ldr	r2, [pc, #200]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 8002448:	f023 0303 	bic.w	r3, r3, #3
 800244c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800244e:	4b30      	ldr	r3, [pc, #192]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4a2f      	ldr	r2, [pc, #188]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 8002454:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe f99d 	bl	800079c <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002466:	f7fe f999 	bl	800079c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e046      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x72a>
 8002484:	e03e      	b.n	8002504 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e039      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_RCC_OscConfig+0x7d4>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0203 	and.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d12c      	bne.n	8002500 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	3b01      	subs	r3, #1
 80024b2:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d123      	bne.n	8002500 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d11b      	bne.n	8002500 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d113      	bne.n	8002500 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	3b01      	subs	r3, #1
 80024e6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d109      	bne.n	8002500 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	3b01      	subs	r3, #1
 80024fa:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	019d808c 	.word	0x019d808c

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0c8      	b.n	80026be <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b66      	ldr	r3, [pc, #408]	; (80026c8 <HAL_RCC_ClockConfig+0x1b0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d910      	bls.n	800255c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCC_ClockConfig+0x1b0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 0207 	bic.w	r2, r3, #7
 8002542:	4961      	ldr	r1, [pc, #388]	; (80026c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	4b5f      	ldr	r3, [pc, #380]	; (80026c8 <HAL_RCC_ClockConfig+0x1b0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0b0      	b.n	80026be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d04c      	beq.n	8002602 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d107      	bne.n	8002580 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002570:	4b56      	ldr	r3, [pc, #344]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d121      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e09e      	b.n	80026be <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d107      	bne.n	8002598 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002588:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d115      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e092      	b.n	80026be <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d107      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a0:	4b4a      	ldr	r3, [pc, #296]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e086      	b.n	80026be <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b0:	4b46      	ldr	r3, [pc, #280]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e07e      	b.n	80026be <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025c0:	4b42      	ldr	r3, [pc, #264]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 0203 	bic.w	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	493f      	ldr	r1, [pc, #252]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d2:	f7fe f8e3 	bl	800079c <HAL_GetTick>
 80025d6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025da:	f7fe f8df 	bl	800079c <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e066      	b.n	80026be <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f0:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 020c 	and.w	r2, r3, #12
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	429a      	cmp	r2, r3
 8002600:	d1eb      	bne.n	80025da <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260e:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	492c      	ldr	r1, [pc, #176]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d210      	bcs.n	8002650 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 0207 	bic.w	r2, r3, #7
 8002636:	4924      	ldr	r1, [pc, #144]	; (80026c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e036      	b.n	80026be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4918      	ldr	r1, [pc, #96]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4910      	ldr	r1, [pc, #64]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800268e:	f000 f825 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8002692:	4601      	mov	r1, r0
 8002694:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_RCC_ClockConfig+0x1b4>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	fa21 f303 	lsr.w	r3, r1, r3
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe f826 	bl	8000704 <HAL_InitTick>
 80026b8:	4603      	mov	r3, r0
 80026ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80026bc:	7afb      	ldrb	r3, [r7, #11]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08007278 	.word	0x08007278
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f4:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x34>
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b0c      	cmp	r3, #12
 8002708:	d121      	bne.n	800274e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d11e      	bne.n	800274e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002710:	4b33      	ldr	r3, [pc, #204]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800271c:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800271e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	e005      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800272c:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002738:	4a2a      	ldr	r2, [pc, #168]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002740:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10d      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d102      	bne.n	800275a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002754:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	e004      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d101      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002760:	4b22      	ldr	r3, [pc, #136]	; (80027ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002762:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b0c      	cmp	r3, #12
 8002768:	d133      	bne.n	80027d2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d002      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0xa4>
 800277a:	2b03      	cmp	r3, #3
 800277c:	d003      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0xaa>
 800277e:	e005      	b.n	800278c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002782:	617b      	str	r3, [r7, #20]
      break;
 8002784:	e005      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002786:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002788:	617b      	str	r3, [r7, #20]
      break;
 800278a:	e002      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	617b      	str	r3, [r7, #20]
      break;
 8002790:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	3301      	adds	r3, #1
 800279e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	fb02 f203 	mul.w	r2, r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	0e5b      	lsrs	r3, r3, #25
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	3301      	adds	r3, #1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027d2:	69bb      	ldr	r3, [r7, #24]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3724      	adds	r7, #36	; 0x24
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08007288 	.word	0x08007288
 80027e8:	00f42400 	.word	0x00f42400
 80027ec:	007a1200 	.word	0x007a1200

080027f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027fc:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002808:	f7ff fa24 	bl	8001c54 <HAL_PWREx_GetVoltageRange>
 800280c:	6178      	str	r0, [r7, #20]
 800280e:	e014      	b.n	800283a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281a:	6593      	str	r3, [r2, #88]	; 0x58
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002828:	f7ff fa14 	bl	8001c54 <HAL_PWREx_GetVoltageRange>
 800282c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002840:	d10b      	bne.n	800285a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d919      	bls.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2ba0      	cmp	r3, #160	; 0xa0
 800284c:	d902      	bls.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800284e:	2302      	movs	r3, #2
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	e013      	b.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002854:	2301      	movs	r3, #1
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	e010      	b.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b80      	cmp	r3, #128	; 0x80
 800285e:	d902      	bls.n	8002866 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002860:	2303      	movs	r3, #3
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	e00a      	b.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b80      	cmp	r3, #128	; 0x80
 800286a:	d102      	bne.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800286c:	2302      	movs	r3, #2
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e004      	b.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b70      	cmp	r3, #112	; 0x70
 8002876:	d101      	bne.n	800287c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002878:	2301      	movs	r3, #1
 800287a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 0207 	bic.w	r2, r3, #7
 8002884:	4909      	ldr	r1, [pc, #36]	; (80028ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	429a      	cmp	r2, r3
 8002898:	d001      	beq.n	800289e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40022000 	.word	0x40022000

080028b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028b8:	2300      	movs	r3, #0
 80028ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028bc:	2300      	movs	r3, #0
 80028be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d02f      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028d4:	d005      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80028d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028da:	d015      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80028e0:	e00f      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4a5c      	ldr	r2, [pc, #368]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ee:	e00c      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fa1e 	bl	8002d38 <RCCEx_PLLSAI1_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002900:	e003      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	74fb      	strb	r3, [r7, #19]
      break;
 8002906:	e000      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10b      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002910:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	494e      	ldr	r1, [pc, #312]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002926:	e001      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 809e 	beq.w	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800294e:	2300      	movs	r3, #0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00d      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002954:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	4a3f      	ldr	r2, [pc, #252]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800295a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295e:	6593      	str	r3, [r2, #88]	; 0x58
 8002960:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296c:	2301      	movs	r3, #1
 800296e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002970:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a39      	ldr	r2, [pc, #228]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800297c:	f7fd ff0e 	bl	800079c <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002982:	e009      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002984:	f7fd ff0a 	bl	800079c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d902      	bls.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	74fb      	strb	r3, [r7, #19]
        break;
 8002996:	e005      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ef      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d15a      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029aa:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01e      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d019      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029d2:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	4a1b      	ldr	r2, [pc, #108]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029f2:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d016      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fd feca 	bl	800079c <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7fd fec6 	bl	800079c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d902      	bls.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	74fb      	strb	r3, [r7, #19]
            break;
 8002a22:	e006      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0ec      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002a32:	7cfb      	ldrb	r3, [r7, #19]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	4904      	ldr	r1, [pc, #16]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a4e:	e009      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a50:	7cfb      	ldrb	r3, [r7, #19]
 8002a52:	74bb      	strb	r3, [r7, #18]
 8002a54:	e006      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a64:	7c7b      	ldrb	r3, [r7, #17]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d105      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	4bb2      	ldr	r3, [pc, #712]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	4ab1      	ldr	r2, [pc, #708]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a82:	4bac      	ldr	r3, [pc, #688]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a88:	f023 0203 	bic.w	r2, r3, #3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	49a8      	ldr	r1, [pc, #672]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aa4:	4ba3      	ldr	r3, [pc, #652]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f023 020c 	bic.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	49a0      	ldr	r1, [pc, #640]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ac6:	4b9b      	ldr	r3, [pc, #620]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	4997      	ldr	r1, [pc, #604]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ae8:	4b92      	ldr	r3, [pc, #584]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	498f      	ldr	r1, [pc, #572]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b0a:	4b8a      	ldr	r3, [pc, #552]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	4986      	ldr	r1, [pc, #536]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b2c:	4b81      	ldr	r3, [pc, #516]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	497e      	ldr	r1, [pc, #504]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b4e:	4b79      	ldr	r3, [pc, #484]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	4975      	ldr	r1, [pc, #468]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b70:	4b70      	ldr	r3, [pc, #448]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	496d      	ldr	r1, [pc, #436]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b92:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	4964      	ldr	r1, [pc, #400]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d028      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bb4:	4b5f      	ldr	r3, [pc, #380]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc2:	495c      	ldr	r1, [pc, #368]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd4:	4b57      	ldr	r3, [pc, #348]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a56      	ldr	r2, [pc, #344]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bde:	60d3      	str	r3, [r2, #12]
 8002be0:	e011      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f8a0 	bl	8002d38 <RCCEx_PLLSAI1_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d028      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c12:	4b48      	ldr	r3, [pc, #288]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c20:	4944      	ldr	r1, [pc, #272]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c30:	d106      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c32:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4a3f      	ldr	r2, [pc, #252]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c3c:	60d3      	str	r3, [r2, #12]
 8002c3e:	e011      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f871 	bl	8002d38 <RCCEx_PLLSAI1_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d028      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c70:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7e:	492d      	ldr	r1, [pc, #180]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c90:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c9a:	60d3      	str	r3, [r2, #12]
 8002c9c:	e011      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3304      	adds	r3, #4
 8002cac:	2101      	movs	r1, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f842 	bl	8002d38 <RCCEx_PLLSAI1_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8002cbe:	7cfb      	ldrb	r3, [r7, #19]
 8002cc0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01c      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	4915      	ldr	r1, [pc, #84]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 f81f 	bl	8002d38 <RCCEx_PLLSAI1_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8002d04:	7cfb      	ldrb	r3, [r7, #19]
 8002d06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	4904      	ldr	r1, [pc, #16]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000

08002d38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d46:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d018      	beq.n	8002d84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d52:	4b70      	ldr	r3, [pc, #448]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0203 	and.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d10d      	bne.n	8002d7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
       ||
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d6a:	4b6a      	ldr	r3, [pc, #424]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
       ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d044      	beq.n	8002e08 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	e041      	b.n	8002e08 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d00c      	beq.n	8002da6 <RCCEx_PLLSAI1_Config+0x6e>
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d013      	beq.n	8002db8 <RCCEx_PLLSAI1_Config+0x80>
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d120      	bne.n	8002dd6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d94:	4b5f      	ldr	r3, [pc, #380]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d11d      	bne.n	8002ddc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da4:	e01a      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002da6:	4b5b      	ldr	r3, [pc, #364]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d116      	bne.n	8002de0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db6:	e013      	b.n	8002de0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002db8:	4b56      	ldr	r3, [pc, #344]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10f      	bne.n	8002de4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dc4:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dd4:	e006      	b.n	8002de4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dda:	e004      	b.n	8002de6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ddc:	bf00      	nop
 8002dde:	e002      	b.n	8002de6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002de0:	bf00      	nop
 8002de2:	e000      	b.n	8002de6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002de4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10d      	bne.n	8002e08 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dec:	4b49      	ldr	r3, [pc, #292]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6819      	ldr	r1, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	430b      	orrs	r3, r1
 8002e02:	4944      	ldr	r1, [pc, #272]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d17c      	bne.n	8002f08 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e0e:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a40      	ldr	r2, [pc, #256]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1a:	f7fd fcbf 	bl	800079c <HAL_GetTick>
 8002e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e20:	e009      	b.n	8002e36 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e22:	f7fd fcbb 	bl	800079c <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d902      	bls.n	8002e36 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	73fb      	strb	r3, [r7, #15]
        break;
 8002e34:	e005      	b.n	8002e42 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1ef      	bne.n	8002e22 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d15f      	bne.n	8002f08 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d110      	bne.n	8002e70 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e4e:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6892      	ldr	r2, [r2, #8]
 8002e5e:	0211      	lsls	r1, r2, #8
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68d2      	ldr	r2, [r2, #12]
 8002e64:	06d2      	lsls	r2, r2, #27
 8002e66:	430a      	orrs	r2, r1
 8002e68:	492a      	ldr	r1, [pc, #168]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	610b      	str	r3, [r1, #16]
 8002e6e:	e027      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d112      	bne.n	8002e9c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e76:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6892      	ldr	r2, [r2, #8]
 8002e86:	0211      	lsls	r1, r2, #8
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6912      	ldr	r2, [r2, #16]
 8002e8c:	0852      	lsrs	r2, r2, #1
 8002e8e:	3a01      	subs	r2, #1
 8002e90:	0552      	lsls	r2, r2, #21
 8002e92:	430a      	orrs	r2, r1
 8002e94:	491f      	ldr	r1, [pc, #124]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	610b      	str	r3, [r1, #16]
 8002e9a:	e011      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ea4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6892      	ldr	r2, [r2, #8]
 8002eac:	0211      	lsls	r1, r2, #8
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6952      	ldr	r2, [r2, #20]
 8002eb2:	0852      	lsrs	r2, r2, #1
 8002eb4:	3a01      	subs	r2, #1
 8002eb6:	0652      	lsls	r2, r2, #25
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	4916      	ldr	r1, [pc, #88]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fd fc66 	bl	800079c <HAL_GetTick>
 8002ed0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ed2:	e009      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ed4:	f7fd fc62 	bl	800079c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d902      	bls.n	8002ee8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ee6:	e005      	b.n	8002ef4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ef      	beq.n	8002ed4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	4904      	ldr	r1, [pc, #16]	; (8002f14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e07c      	b.n	8003024 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d106      	bne.n	8002f4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7fd fad9 	bl	80004fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f60:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f6a:	d902      	bls.n	8002f72 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e002      	b.n	8002f78 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f80:	d007      	beq.n	8002f92 <HAL_SPI_Init+0x7a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f8a:	d002      	beq.n	8002f92 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fa2:	d903      	bls.n	8002fac <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30
 8002faa:	e002      	b.n	8002fb2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	ea42 0103 	orr.w	r1, r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	f003 0204 	and.w	r2, r3, #4
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	ea42 0103 	orr.w	r1, r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_SPI_Transmit+0x22>
 800304a:	2302      	movs	r3, #2
 800304c:	e150      	b.n	80032f0 <HAL_SPI_Transmit+0x2c4>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003056:	f7fd fba1 	bl	800079c <HAL_GetTick>
 800305a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800306c:	2302      	movs	r3, #2
 800306e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003070:	e135      	b.n	80032de <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <HAL_SPI_Transmit+0x52>
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003082:	e12c      	b.n	80032de <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2203      	movs	r2, #3
 8003088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	88fa      	ldrh	r2, [r7, #6]
 800309c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	88fa      	ldrh	r2, [r7, #6]
 80030a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ce:	d107      	bne.n	80030e0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d007      	beq.n	80030fe <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003106:	d94b      	bls.n	80031a0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_SPI_Transmit+0xea>
 8003110:	8afb      	ldrh	r3, [r7, #22]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d13e      	bne.n	8003194 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	881a      	ldrh	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	1c9a      	adds	r2, r3, #2
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800313a:	e02b      	b.n	8003194 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d112      	bne.n	8003170 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	881a      	ldrh	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	1c9a      	adds	r2, r3, #2
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800316e:	e011      	b.n	8003194 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003170:	f7fd fb14 	bl	800079c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d803      	bhi.n	8003188 <HAL_SPI_Transmit+0x15c>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d102      	bne.n	800318e <HAL_SPI_Transmit+0x162>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003192:	e0a4      	b.n	80032de <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ce      	bne.n	800313c <HAL_SPI_Transmit+0x110>
 800319e:	e07c      	b.n	800329a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_SPI_Transmit+0x182>
 80031a8:	8afb      	ldrh	r3, [r7, #22]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d170      	bne.n	8003290 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d912      	bls.n	80031de <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	881a      	ldrh	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	1c9a      	adds	r2, r3, #2
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b02      	subs	r3, #2
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031dc:	e058      	b.n	8003290 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	330c      	adds	r3, #12
 80031e8:	7812      	ldrb	r2, [r2, #0]
 80031ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003204:	e044      	b.n	8003290 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b02      	cmp	r3, #2
 8003212:	d12b      	bne.n	800326c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d912      	bls.n	8003244 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	881a      	ldrh	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b02      	subs	r3, #2
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003242:	e025      	b.n	8003290 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	7812      	ldrb	r2, [r2, #0]
 8003250:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	87da      	strh	r2, [r3, #62]	; 0x3e
 800326a:	e011      	b.n	8003290 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800326c:	f7fd fa96 	bl	800079c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d803      	bhi.n	8003284 <HAL_SPI_Transmit+0x258>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d102      	bne.n	800328a <HAL_SPI_Transmit+0x25e>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800328e:	e026      	b.n	80032de <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1b5      	bne.n	8003206 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	6839      	ldr	r1, [r7, #0]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fdb4 	bl	8003e0c <SPI_EndRxTxTransaction>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	e000      	b.n	80032de <HAL_SPI_Transmit+0x2b2>
  }

error:
 80032dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003314:	d112      	bne.n	800333c <HAL_SPI_Receive+0x44>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10e      	bne.n	800333c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2204      	movs	r2, #4
 8003322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f908 	bl	8003548 <HAL_SPI_TransmitReceive>
 8003338:	4603      	mov	r3, r0
 800333a:	e101      	b.n	8003540 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_SPI_Receive+0x52>
 8003346:	2302      	movs	r3, #2
 8003348:	e0fa      	b.n	8003540 <HAL_SPI_Receive+0x248>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003352:	f7fd fa23 	bl	800079c <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d002      	beq.n	800336a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003364:	2302      	movs	r3, #2
 8003366:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003368:	e0e1      	b.n	800352e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_SPI_Receive+0x7e>
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	75fb      	strb	r3, [r7, #23]
    goto error;
 800337a:	e0d8      	b.n	800352e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2204      	movs	r2, #4
 8003380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	88fa      	ldrh	r2, [r7, #6]
 8003394:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033c6:	d908      	bls.n	80033da <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	e007      	b.n	80033ea <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033e8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f2:	d107      	bne.n	8003404 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003402:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d007      	beq.n	8003422 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003420:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800342a:	d867      	bhi.n	80034fc <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800342c:	e030      	b.n	8003490 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d117      	bne.n	800346c <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f103 020c 	add.w	r2, r3, #12
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800346a:	e011      	b.n	8003490 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800346c:	f7fd f996 	bl	800079c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d803      	bhi.n	8003484 <HAL_SPI_Receive+0x18c>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d102      	bne.n	800348a <HAL_SPI_Receive+0x192>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800348e:	e04e      	b.n	800352e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1c8      	bne.n	800342e <HAL_SPI_Receive+0x136>
 800349c:	e034      	b.n	8003508 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d115      	bne.n	80034d8 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	b292      	uxth	r2, r2
 80034b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	1c9a      	adds	r2, r3, #2
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80034d6:	e011      	b.n	80034fc <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034d8:	f7fd f960 	bl	800079c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d803      	bhi.n	80034f0 <HAL_SPI_Receive+0x1f8>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ee:	d102      	bne.n	80034f6 <HAL_SPI_Receive+0x1fe>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80034fa:	e018      	b.n	800352e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1ca      	bne.n	800349e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	6839      	ldr	r1, [r7, #0]
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fc25 	bl	8003d5c <SPI_EndRxTransaction>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
 800352a:	e000      	b.n	800352e <HAL_SPI_Receive+0x236>
  }

error :
 800352c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800353e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003556:	2301      	movs	r3, #1
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_SPI_TransmitReceive+0x26>
 800356a:	2302      	movs	r3, #2
 800356c:	e1fb      	b.n	8003966 <HAL_SPI_TransmitReceive+0x41e>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003576:	f7fd f911 	bl	800079c <HAL_GetTick>
 800357a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003582:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800358a:	887b      	ldrh	r3, [r7, #2]
 800358c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800358e:	887b      	ldrh	r3, [r7, #2]
 8003590:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003592:	7efb      	ldrb	r3, [r7, #27]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d00e      	beq.n	80035b6 <HAL_SPI_TransmitReceive+0x6e>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359e:	d106      	bne.n	80035ae <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <HAL_SPI_TransmitReceive+0x66>
 80035a8:	7efb      	ldrb	r3, [r7, #27]
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d003      	beq.n	80035b6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80035b4:	e1cd      	b.n	8003952 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x80>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x80>
 80035c2:	887b      	ldrh	r3, [r7, #2]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80035ce:	e1c0      	b.n	8003952 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d003      	beq.n	80035e4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2205      	movs	r2, #5
 80035e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	887a      	ldrh	r2, [r7, #2]
 80035f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	887a      	ldrh	r2, [r7, #2]
 800360a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003626:	d802      	bhi.n	800362e <HAL_SPI_TransmitReceive+0xe6>
 8003628:	8a3b      	ldrh	r3, [r7, #16]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d908      	bls.n	8003640 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	e007      	b.n	8003650 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800364e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d007      	beq.n	800366e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003676:	d97c      	bls.n	8003772 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_SPI_TransmitReceive+0x13e>
 8003680:	8a7b      	ldrh	r3, [r7, #18]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d169      	bne.n	800375a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	1c9a      	adds	r2, r3, #2
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036aa:	e056      	b.n	800375a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d11b      	bne.n	80036f2 <HAL_SPI_TransmitReceive+0x1aa>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d016      	beq.n	80036f2 <HAL_SPI_TransmitReceive+0x1aa>
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d113      	bne.n	80036f2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	881a      	ldrh	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	1c9a      	adds	r2, r3, #2
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d11c      	bne.n	800373a <HAL_SPI_TransmitReceive+0x1f2>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d016      	beq.n	800373a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	b292      	uxth	r2, r2
 8003718:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	1c9a      	adds	r2, r3, #2
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003736:	2301      	movs	r3, #1
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800373a:	f7fd f82f 	bl	800079c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003746:	429a      	cmp	r2, r3
 8003748:	d807      	bhi.n	800375a <HAL_SPI_TransmitReceive+0x212>
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d003      	beq.n	800375a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003758:	e0fb      	b.n	8003952 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1a3      	bne.n	80036ac <HAL_SPI_TransmitReceive+0x164>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d19d      	bne.n	80036ac <HAL_SPI_TransmitReceive+0x164>
 8003770:	e0df      	b.n	8003932 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_SPI_TransmitReceive+0x23a>
 800377a:	8a7b      	ldrh	r3, [r7, #18]
 800377c:	2b01      	cmp	r3, #1
 800377e:	f040 80cb 	bne.w	8003918 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	d912      	bls.n	80037b2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	881a      	ldrh	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	1c9a      	adds	r2, r3, #2
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b02      	subs	r3, #2
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037b0:	e0b2      	b.n	8003918 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	330c      	adds	r3, #12
 80037bc:	7812      	ldrb	r2, [r2, #0]
 80037be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037d8:	e09e      	b.n	8003918 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d134      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x30a>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02f      	beq.n	8003852 <HAL_SPI_TransmitReceive+0x30a>
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d12c      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d912      	bls.n	8003828 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	881a      	ldrh	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	1c9a      	adds	r2, r3, #2
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b02      	subs	r3, #2
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003826:	e012      	b.n	800384e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	330c      	adds	r3, #12
 8003832:	7812      	ldrb	r2, [r2, #0]
 8003834:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d148      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x3aa>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d042      	beq.n	80038f2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d923      	bls.n	80038c0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	b292      	uxth	r2, r2
 8003884:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	1c9a      	adds	r2, r3, #2
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b02      	subs	r3, #2
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d81f      	bhi.n	80038ee <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	e016      	b.n	80038ee <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f103 020c 	add.w	r2, r3, #12
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	7812      	ldrb	r2, [r2, #0]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038ee:	2301      	movs	r3, #1
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038f2:	f7fc ff53 	bl	800079c <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038fe:	429a      	cmp	r2, r3
 8003900:	d803      	bhi.n	800390a <HAL_SPI_TransmitReceive+0x3c2>
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d102      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x3c8>
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003916:	e01c      	b.n	8003952 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	f47f af5b 	bne.w	80037da <HAL_SPI_TransmitReceive+0x292>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f af54 	bne.w	80037da <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fa68 	bl	8003e0c <SPI_EndRxTxTransaction>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	661a      	str	r2, [r3, #96]	; 0x60
 800394e:	e000      	b.n	8003952 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003950:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003966:	4618      	mov	r0, r3
 8003968:	3728      	adds	r7, #40	; 0x28
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10f      	bne.n	80039b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	099b      	lsrs	r3, r3, #6
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
    return;
 80039b2:	e0d8      	b.n	8003b66 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_SPI_IRQHandler+0x66>
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	09db      	lsrs	r3, r3, #7
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
    return;
 80039d4:	e0c7      	b.n	8003b66 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10c      	bne.n	80039fc <HAL_SPI_IRQHandler+0x8c>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_SPI_IRQHandler+0x8c>
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80b5 	beq.w	8003b66 <HAL_SPI_IRQHandler+0x1f6>
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80ae 	beq.w	8003b66 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d023      	beq.n	8003a5e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d011      	beq.n	8003a46 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a26:	f043 0204 	orr.w	r2, r3, #4
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	e00b      	b.n	8003a5e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	693b      	ldr	r3, [r7, #16]
        return;
 8003a5c:	e083      	b.n	8003b66 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d014      	beq.n	8003a94 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6e:	f043 0201 	orr.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00c      	beq.n	8003aba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa4:	f043 0208 	orr.w	r2, r3, #8
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d050      	beq.n	8003b64 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ad0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <HAL_SPI_IRQHandler+0x17e>
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d034      	beq.n	8003b58 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0203 	bic.w	r2, r2, #3
 8003afc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d011      	beq.n	8003b2a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	4a18      	ldr	r2, [pc, #96]	; (8003b6c <HAL_SPI_IRQHandler+0x1fc>)
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fc ff81 	bl	8000a1a <HAL_DMA_Abort_IT>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d016      	beq.n	8003b60 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <HAL_SPI_IRQHandler+0x1fc>)
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fc ff6b 	bl	8000a1a <HAL_DMA_Abort_IT>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003b56:	e003      	b.n	8003b60 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f809 	bl	8003b70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003b5e:	e000      	b.n	8003b62 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003b60:	bf00      	nop
    return;
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
  }
}
 8003b66:	3720      	adds	r7, #32
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	08003b85 	.word	0x08003b85

08003b70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f7ff ffe5 	bl	8003b70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ba6:	bf00      	nop
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bbe:	e04c      	b.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d048      	beq.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003bc8:	f7fc fde8 	bl	800079c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d902      	bls.n	8003bde <SPI_WaitFlagStateUntilTimeout+0x30>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d13d      	bne.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf6:	d111      	bne.n	8003c1c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c00:	d004      	beq.n	8003c0c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0a:	d107      	bne.n	8003c1c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c24:	d10f      	bne.n	8003c46 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e00f      	b.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4013      	ands	r3, r2
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d1a3      	bne.n	8003bc0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c90:	e057      	b.n	8003d42 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c98:	d106      	bne.n	8003ca8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d048      	beq.n	8003d42 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003cb0:	f7fc fd74 	bl	800079c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d902      	bls.n	8003cc6 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d13d      	bne.n	8003d42 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cde:	d111      	bne.n	8003d04 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce8:	d004      	beq.n	8003cf4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf2:	d107      	bne.n	8003d04 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0c:	d10f      	bne.n	8003d2e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e008      	b.n	8003d54 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d19f      	bne.n	8003c92 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d70:	d111      	bne.n	8003d96 <SPI_EndRxTransaction+0x3a>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7a:	d004      	beq.n	8003d86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d84:	d107      	bne.n	8003d96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d94:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2180      	movs	r1, #128	; 0x80
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff ff04 	bl	8003bae <SPI_WaitFlagStateUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d007      	beq.n	8003dbc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db0:	f043 0220 	orr.w	r2, r3, #32
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e023      	b.n	8003e04 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc4:	d11d      	bne.n	8003e02 <SPI_EndRxTransaction+0xa6>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dce:	d004      	beq.n	8003dda <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd8:	d113      	bne.n	8003e02 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7ff ff4b 	bl	8003c82 <SPI_WaitFifoStateUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df6:	f043 0220 	orr.w	r2, r3, #32
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e000      	b.n	8003e04 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff ff2c 	bl	8003c82 <SPI_WaitFifoStateUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e34:	f043 0220 	orr.w	r2, r3, #32
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e027      	b.n	8003e90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2200      	movs	r2, #0
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff feaf 	bl	8003bae <SPI_WaitFlagStateUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e014      	b.n	8003e90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f7ff ff05 	bl	8003c82 <SPI_WaitFifoStateUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e000      	b.n	8003e90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e98:	b084      	sub	sp, #16
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	f107 0014 	add.w	r0, r7, #20
 8003ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	b004      	add	sp, #16
 8003eb8:	4770      	bx	lr

08003eba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ec2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003ec6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	89fb      	ldrh	r3, [r7, #14]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ef2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003ef6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	b21a      	sxth	r2, r3
 8003f02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	b21b      	sxth	r3, r3
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	b21b      	sxth	r3, r3
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f3e:	b084      	sub	sp, #16
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	f107 0014 	add.w	r0, r7, #20
 8003f4c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff ffa2 	bl	8003eba <USB_EnableGlobalInt>

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f82:	b004      	add	sp, #16
 8003f84:	4770      	bx	lr
	...

08003f88 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f88:	b490      	push	{r4, r7}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fac:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	78db      	ldrb	r3, [r3, #3]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d819      	bhi.n	8003fea <USB_ActivateEndpoint+0x62>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <USB_ActivateEndpoint+0x34>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003fcd 	.word	0x08003fcd
 8003fc0:	08003fe1 	.word	0x08003fe1
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08003fd7 	.word	0x08003fd7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003fcc:	8abb      	ldrh	r3, [r7, #20]
 8003fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fd2:	82bb      	strh	r3, [r7, #20]
      break;
 8003fd4:	e00d      	b.n	8003ff2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003fd6:	8abb      	ldrh	r3, [r7, #20]
 8003fd8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003fdc:	82bb      	strh	r3, [r7, #20]
      break;
 8003fde:	e008      	b.n	8003ff2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003fe0:	8abb      	ldrh	r3, [r7, #20]
 8003fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fe6:	82bb      	strh	r3, [r7, #20]
      break;
 8003fe8:	e003      	b.n	8003ff2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	75fb      	strb	r3, [r7, #23]
      break;
 8003fee:	e000      	b.n	8003ff2 <USB_ActivateEndpoint+0x6a>
      break;
 8003ff0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	441a      	add	r2, r3
 8003ffc:	8abb      	ldrh	r3, [r7, #20]
 8003ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800400e:	b29b      	uxth	r3, r3
 8004010:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	b21b      	sxth	r3, r3
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	b21a      	sxth	r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	b21b      	sxth	r3, r3
 8004032:	4313      	orrs	r3, r2
 8004034:	b21b      	sxth	r3, r3
 8004036:	b29c      	uxth	r4, r3
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	4b87      	ldr	r3, [pc, #540]	; (8004260 <USB_ActivateEndpoint+0x2d8>)
 8004044:	4323      	orrs	r3, r4
 8004046:	b29b      	uxth	r3, r3
 8004048:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	7b1b      	ldrb	r3, [r3, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f040 810c 	bne.w	800426c <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	785b      	ldrb	r3, [r3, #1]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d067      	beq.n	800412c <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800405c:	687c      	ldr	r4, [r7, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004064:	b29b      	uxth	r3, r3
 8004066:	441c      	add	r4, r3
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4423      	add	r3, r4
 8004070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004074:	461c      	mov	r4, r3
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	88db      	ldrh	r3, [r3, #6]
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	b29b      	uxth	r3, r3
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	b29b      	uxth	r3, r3
 8004082:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29c      	uxth	r4, r3
 8004092:	4623      	mov	r3, r4
 8004094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d014      	beq.n	80040c6 <USB_ActivateEndpoint+0x13e>
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	b29c      	uxth	r4, r3
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	441a      	add	r2, r3
 80040be:	4b69      	ldr	r3, [pc, #420]	; (8004264 <USB_ActivateEndpoint+0x2dc>)
 80040c0:	4323      	orrs	r3, r4
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	78db      	ldrb	r3, [r3, #3]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d018      	beq.n	8004100 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e4:	b29c      	uxth	r4, r3
 80040e6:	f084 0320 	eor.w	r3, r4, #32
 80040ea:	b29c      	uxth	r4, r3
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	4b5a      	ldr	r3, [pc, #360]	; (8004260 <USB_ActivateEndpoint+0x2d8>)
 80040f8:	4323      	orrs	r3, r4
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	8013      	strh	r3, [r2, #0]
 80040fe:	e225      	b.n	800454c <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004116:	b29c      	uxth	r4, r3
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	441a      	add	r2, r3
 8004122:	4b4f      	ldr	r3, [pc, #316]	; (8004260 <USB_ActivateEndpoint+0x2d8>)
 8004124:	4323      	orrs	r3, r4
 8004126:	b29b      	uxth	r3, r3
 8004128:	8013      	strh	r3, [r2, #0]
 800412a:	e20f      	b.n	800454c <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800412c:	687c      	ldr	r4, [r7, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004134:	b29b      	uxth	r3, r3
 8004136:	441c      	add	r4, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4423      	add	r3, r4
 8004140:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004144:	461c      	mov	r4, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	88db      	ldrh	r3, [r3, #6]
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	b29b      	uxth	r3, r3
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	b29b      	uxth	r3, r3
 8004152:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004154:	687c      	ldr	r4, [r7, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415c:	b29b      	uxth	r3, r3
 800415e:	441c      	add	r4, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4423      	add	r3, r4
 8004168:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d110      	bne.n	8004198 <USB_ActivateEndpoint+0x210>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	801a      	strh	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800418c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	e026      	b.n	80041e6 <USB_ActivateEndpoint+0x25e>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	2b3d      	cmp	r3, #61	; 0x3d
 800419e:	d813      	bhi.n	80041c8 <USB_ActivateEndpoint+0x240>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <USB_ActivateEndpoint+0x232>
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	3301      	adds	r3, #1
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	029b      	lsls	r3, r3, #10
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	e00e      	b.n	80041e6 <USB_ActivateEndpoint+0x25e>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	029b      	lsls	r3, r3, #10
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29c      	uxth	r4, r3
 80041f4:	4623      	mov	r3, r4
 80041f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d014      	beq.n	8004228 <USB_ActivateEndpoint+0x2a0>
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	b29c      	uxth	r4, r3
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	4b11      	ldr	r3, [pc, #68]	; (8004268 <USB_ActivateEndpoint+0x2e0>)
 8004222:	4323      	orrs	r3, r4
 8004224:	b29b      	uxth	r3, r3
 8004226:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	b29c      	uxth	r4, r3
 8004240:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004244:	b29c      	uxth	r4, r3
 8004246:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800424a:	b29c      	uxth	r4, r3
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	441a      	add	r2, r3
 8004256:	4b02      	ldr	r3, [pc, #8]	; (8004260 <USB_ActivateEndpoint+0x2d8>)
 8004258:	4323      	orrs	r3, r4
 800425a:	b29b      	uxth	r3, r3
 800425c:	8013      	strh	r3, [r2, #0]
 800425e:	e175      	b.n	800454c <USB_ActivateEndpoint+0x5c4>
 8004260:	ffff8080 	.word	0xffff8080
 8004264:	ffff80c0 	.word	0xffff80c0
 8004268:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	b29c      	uxth	r4, r3
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	441a      	add	r2, r3
 800428e:	4b96      	ldr	r3, [pc, #600]	; (80044e8 <USB_ActivateEndpoint+0x560>)
 8004290:	4323      	orrs	r3, r4
 8004292:	b29b      	uxth	r3, r3
 8004294:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004296:	687c      	ldr	r4, [r7, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429e:	b29b      	uxth	r3, r3
 80042a0:	441c      	add	r4, r3
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4423      	add	r3, r4
 80042aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ae:	461c      	mov	r4, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	891b      	ldrh	r3, [r3, #8]
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	8023      	strh	r3, [r4, #0]
 80042be:	687c      	ldr	r4, [r7, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	441c      	add	r4, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4423      	add	r3, r4
 80042d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042d6:	461c      	mov	r4, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	895b      	ldrh	r3, [r3, #10]
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	b29b      	uxth	r3, r3
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	785b      	ldrb	r3, [r3, #1]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 8088 	bne.w	8004400 <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29c      	uxth	r4, r3
 80042fe:	4623      	mov	r3, r4
 8004300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d014      	beq.n	8004332 <USB_ActivateEndpoint+0x3aa>
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	b29b      	uxth	r3, r3
 8004316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431e:	b29c      	uxth	r4, r3
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	4b70      	ldr	r3, [pc, #448]	; (80044ec <USB_ActivateEndpoint+0x564>)
 800432c:	4323      	orrs	r3, r4
 800432e:	b29b      	uxth	r3, r3
 8004330:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29c      	uxth	r4, r3
 8004340:	4623      	mov	r3, r4
 8004342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d014      	beq.n	8004374 <USB_ActivateEndpoint+0x3ec>
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004360:	b29c      	uxth	r4, r3
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	441a      	add	r2, r3
 800436c:	4b60      	ldr	r3, [pc, #384]	; (80044f0 <USB_ActivateEndpoint+0x568>)
 800436e:	4323      	orrs	r3, r4
 8004370:	b29b      	uxth	r3, r3
 8004372:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	b29c      	uxth	r4, r3
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	4b56      	ldr	r3, [pc, #344]	; (80044f0 <USB_ActivateEndpoint+0x568>)
 8004398:	4323      	orrs	r3, r4
 800439a:	b29b      	uxth	r3, r3
 800439c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b4:	b29c      	uxth	r4, r3
 80043b6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80043ba:	b29c      	uxth	r4, r3
 80043bc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80043c0:	b29c      	uxth	r4, r3
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	441a      	add	r2, r3
 80043cc:	4b49      	ldr	r3, [pc, #292]	; (80044f4 <USB_ActivateEndpoint+0x56c>)
 80043ce:	4323      	orrs	r3, r4
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ea:	b29c      	uxth	r4, r3
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	4b3f      	ldr	r3, [pc, #252]	; (80044f4 <USB_ActivateEndpoint+0x56c>)
 80043f8:	4323      	orrs	r3, r4
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8013      	strh	r3, [r2, #0]
 80043fe:	e0a5      	b.n	800454c <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	b29c      	uxth	r4, r3
 800440e:	4623      	mov	r3, r4
 8004410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d014      	beq.n	8004442 <USB_ActivateEndpoint+0x4ba>
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	b29c      	uxth	r4, r3
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	4b2c      	ldr	r3, [pc, #176]	; (80044ec <USB_ActivateEndpoint+0x564>)
 800443c:	4323      	orrs	r3, r4
 800443e:	b29b      	uxth	r3, r3
 8004440:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b29c      	uxth	r4, r3
 8004450:	4623      	mov	r3, r4
 8004452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d014      	beq.n	8004484 <USB_ActivateEndpoint+0x4fc>
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004470:	b29c      	uxth	r4, r3
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	441a      	add	r2, r3
 800447c:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <USB_ActivateEndpoint+0x568>)
 800447e:	4323      	orrs	r3, r4
 8004480:	b29b      	uxth	r3, r3
 8004482:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	b29b      	uxth	r3, r3
 8004492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	b29c      	uxth	r4, r3
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	441a      	add	r2, r3
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <USB_ActivateEndpoint+0x564>)
 80044a8:	4323      	orrs	r3, r4
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	78db      	ldrb	r3, [r3, #3]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d020      	beq.n	80044f8 <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044cc:	b29c      	uxth	r4, r3
 80044ce:	f084 0320 	eor.w	r3, r4, #32
 80044d2:	b29c      	uxth	r4, r3
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	441a      	add	r2, r3
 80044de:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <USB_ActivateEndpoint+0x56c>)
 80044e0:	4323      	orrs	r3, r4
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	8013      	strh	r3, [r2, #0]
 80044e6:	e01c      	b.n	8004522 <USB_ActivateEndpoint+0x59a>
 80044e8:	ffff8180 	.word	0xffff8180
 80044ec:	ffffc080 	.word	0xffffc080
 80044f0:	ffff80c0 	.word	0xffff80c0
 80044f4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450e:	b29c      	uxth	r4, r3
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <USB_ActivateEndpoint+0x5d0>)
 800451c:	4323      	orrs	r3, r4
 800451e:	b29b      	uxth	r3, r3
 8004520:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	b29b      	uxth	r3, r3
 8004530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004538:	b29c      	uxth	r4, r3
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	441a      	add	r2, r3
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <USB_ActivateEndpoint+0x5d0>)
 8004546:	4323      	orrs	r3, r4
 8004548:	b29b      	uxth	r3, r3
 800454a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800454c:	7dfb      	ldrb	r3, [r7, #23]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bc90      	pop	{r4, r7}
 8004556:	4770      	bx	lr
 8004558:	ffff8080 	.word	0xffff8080

0800455c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800455c:	b490      	push	{r4, r7}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	7b1b      	ldrb	r3, [r3, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d171      	bne.n	8004652 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	785b      	ldrb	r3, [r3, #1]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d036      	beq.n	80045e4 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29c      	uxth	r4, r3
 8004584:	4623      	mov	r3, r4
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d014      	beq.n	80045b8 <USB_DeactivateEndpoint+0x5c>
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a4:	b29c      	uxth	r4, r3
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	4b6b      	ldr	r3, [pc, #428]	; (8004760 <USB_DeactivateEndpoint+0x204>)
 80045b2:	4323      	orrs	r3, r4
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ce:	b29c      	uxth	r4, r3
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	441a      	add	r2, r3
 80045da:	4b62      	ldr	r3, [pc, #392]	; (8004764 <USB_DeactivateEndpoint+0x208>)
 80045dc:	4323      	orrs	r3, r4
 80045de:	b29b      	uxth	r3, r3
 80045e0:	8013      	strh	r3, [r2, #0]
 80045e2:	e144      	b.n	800486e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29c      	uxth	r4, r3
 80045f2:	4623      	mov	r3, r4
 80045f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d014      	beq.n	8004626 <USB_DeactivateEndpoint+0xca>
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004612:	b29c      	uxth	r4, r3
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	4b52      	ldr	r3, [pc, #328]	; (8004768 <USB_DeactivateEndpoint+0x20c>)
 8004620:	4323      	orrs	r3, r4
 8004622:	b29b      	uxth	r3, r3
 8004624:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463c:	b29c      	uxth	r4, r3
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	4b46      	ldr	r3, [pc, #280]	; (8004764 <USB_DeactivateEndpoint+0x208>)
 800464a:	4323      	orrs	r3, r4
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]
 8004650:	e10d      	b.n	800486e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	785b      	ldrb	r3, [r3, #1]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f040 8088 	bne.w	800476c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29c      	uxth	r4, r3
 800466a:	4623      	mov	r3, r4
 800466c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d014      	beq.n	800469e <USB_DeactivateEndpoint+0x142>
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	b29c      	uxth	r4, r3
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	441a      	add	r2, r3
 8004696:	4b34      	ldr	r3, [pc, #208]	; (8004768 <USB_DeactivateEndpoint+0x20c>)
 8004698:	4323      	orrs	r3, r4
 800469a:	b29b      	uxth	r3, r3
 800469c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29c      	uxth	r4, r3
 80046ac:	4623      	mov	r3, r4
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d014      	beq.n	80046e0 <USB_DeactivateEndpoint+0x184>
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046cc:	b29c      	uxth	r4, r3
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	4b21      	ldr	r3, [pc, #132]	; (8004760 <USB_DeactivateEndpoint+0x204>)
 80046da:	4323      	orrs	r3, r4
 80046dc:	b29b      	uxth	r3, r3
 80046de:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	b29c      	uxth	r4, r3
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	441a      	add	r2, r3
 8004702:	4b17      	ldr	r3, [pc, #92]	; (8004760 <USB_DeactivateEndpoint+0x204>)
 8004704:	4323      	orrs	r3, r4
 8004706:	b29b      	uxth	r3, r3
 8004708:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800471c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004720:	b29c      	uxth	r4, r3
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	441a      	add	r2, r3
 800472c:	4b0d      	ldr	r3, [pc, #52]	; (8004764 <USB_DeactivateEndpoint+0x208>)
 800472e:	4323      	orrs	r3, r4
 8004730:	b29b      	uxth	r3, r3
 8004732:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474a:	b29c      	uxth	r4, r3
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	441a      	add	r2, r3
 8004756:	4b03      	ldr	r3, [pc, #12]	; (8004764 <USB_DeactivateEndpoint+0x208>)
 8004758:	4323      	orrs	r3, r4
 800475a:	b29b      	uxth	r3, r3
 800475c:	8013      	strh	r3, [r2, #0]
 800475e:	e086      	b.n	800486e <USB_DeactivateEndpoint+0x312>
 8004760:	ffff80c0 	.word	0xffff80c0
 8004764:	ffff8080 	.word	0xffff8080
 8004768:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29c      	uxth	r4, r3
 800477a:	4623      	mov	r3, r4
 800477c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d014      	beq.n	80047ae <USB_DeactivateEndpoint+0x252>
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	b29c      	uxth	r4, r3
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	441a      	add	r2, r3
 80047a6:	4b35      	ldr	r3, [pc, #212]	; (800487c <USB_DeactivateEndpoint+0x320>)
 80047a8:	4323      	orrs	r3, r4
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b29c      	uxth	r4, r3
 80047bc:	4623      	mov	r3, r4
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d014      	beq.n	80047f0 <USB_DeactivateEndpoint+0x294>
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047dc:	b29c      	uxth	r4, r3
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <USB_DeactivateEndpoint+0x324>)
 80047ea:	4323      	orrs	r3, r4
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004806:	b29c      	uxth	r4, r3
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	441a      	add	r2, r3
 8004812:	4b1a      	ldr	r3, [pc, #104]	; (800487c <USB_DeactivateEndpoint+0x320>)
 8004814:	4323      	orrs	r3, r4
 8004816:	b29b      	uxth	r3, r3
 8004818:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004830:	b29c      	uxth	r4, r3
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	441a      	add	r2, r3
 800483c:	4b11      	ldr	r3, [pc, #68]	; (8004884 <USB_DeactivateEndpoint+0x328>)
 800483e:	4323      	orrs	r3, r4
 8004840:	b29b      	uxth	r3, r3
 8004842:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29b      	uxth	r3, r3
 8004852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485a:	b29c      	uxth	r4, r3
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	441a      	add	r2, r3
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <USB_DeactivateEndpoint+0x328>)
 8004868:	4323      	orrs	r3, r4
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bc90      	pop	{r4, r7}
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	ffffc080 	.word	0xffffc080
 8004880:	ffff80c0 	.word	0xffff80c0
 8004884:	ffff8080 	.word	0xffff8080

08004888 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004888:	b590      	push	{r4, r7, lr}
 800488a:	b095      	sub	sp, #84	; 0x54
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	785b      	ldrb	r3, [r3, #1]
 8004896:	2b01      	cmp	r3, #1
 8004898:	f040 815d 	bne.w	8004b56 <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	699a      	ldr	r2, [r3, #24]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d909      	bls.n	80048bc <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b4:	1ad2      	subs	r2, r2, r3
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	619a      	str	r2, [r3, #24]
 80048ba:	e005      	b.n	80048c8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2200      	movs	r2, #0
 80048c6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	7b1b      	ldrb	r3, [r3, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d11a      	bne.n	8004906 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6959      	ldr	r1, [r3, #20]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	88da      	ldrh	r2, [r3, #6]
 80048d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048da:	b29b      	uxth	r3, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fbb1 	bl	8005044 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80048e2:	687c      	ldr	r4, [r7, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	441c      	add	r4, r3
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4423      	add	r3, r4
 80048f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	801a      	strh	r2, [r3, #0]
 8004904:	e10b      	b.n	8004b1e <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004918:	2b00      	cmp	r3, #0
 800491a:	d062      	beq.n	80049e2 <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800491c:	687c      	ldr	r4, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	785b      	ldrb	r3, [r3, #1]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d144      	bne.n	80049b0 <USB_EPStartXfer+0x128>
 8004926:	687c      	ldr	r4, [r7, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800492e:	b29b      	uxth	r3, r3
 8004930:	441c      	add	r4, r3
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4423      	add	r3, r4
 800493a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004942:	2b00      	cmp	r3, #0
 8004944:	d110      	bne.n	8004968 <USB_EPStartXfer+0xe0>
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800494e:	b29a      	uxth	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	801a      	strh	r2, [r3, #0]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800495c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004960:	b29a      	uxth	r2, r3
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	e037      	b.n	80049d8 <USB_EPStartXfer+0x150>
 8004968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496a:	2b3d      	cmp	r3, #61	; 0x3d
 800496c:	d811      	bhi.n	8004992 <USB_EPStartXfer+0x10a>
 800496e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	647b      	str	r3, [r7, #68]	; 0x44
 8004974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <USB_EPStartXfer+0xfc>
 800497e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004980:	3301      	adds	r3, #1
 8004982:	647b      	str	r3, [r7, #68]	; 0x44
 8004984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004986:	b29b      	uxth	r3, r3
 8004988:	029b      	lsls	r3, r3, #10
 800498a:	b29a      	uxth	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	801a      	strh	r2, [r3, #0]
 8004990:	e022      	b.n	80049d8 <USB_EPStartXfer+0x150>
 8004992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	647b      	str	r3, [r7, #68]	; 0x44
 8004998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800499a:	b29b      	uxth	r3, r3
 800499c:	029b      	lsls	r3, r3, #10
 800499e:	b29b      	uxth	r3, r3
 80049a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	e013      	b.n	80049d8 <USB_EPStartXfer+0x150>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	785b      	ldrb	r3, [r3, #1]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d10f      	bne.n	80049d8 <USB_EPStartXfer+0x150>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049be:	b29b      	uxth	r3, r3
 80049c0:	441c      	add	r4, r3
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4423      	add	r3, r4
 80049ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	895b      	ldrh	r3, [r3, #10]
 80049dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80049e0:	e061      	b.n	8004aa6 <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	785b      	ldrb	r3, [r3, #1]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d144      	bne.n	8004a74 <USB_EPStartXfer+0x1ec>
 80049ea:	687c      	ldr	r4, [r7, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	441c      	add	r4, r3
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4423      	add	r3, r4
 80049fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d110      	bne.n	8004a2c <USB_EPStartXfer+0x1a4>
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	801a      	strh	r2, [r3, #0]
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	801a      	strh	r2, [r3, #0]
 8004a2a:	e038      	b.n	8004a9e <USB_EPStartXfer+0x216>
 8004a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2e:	2b3d      	cmp	r3, #61	; 0x3d
 8004a30:	d811      	bhi.n	8004a56 <USB_EPStartXfer+0x1ce>
 8004a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	643b      	str	r3, [r7, #64]	; 0x40
 8004a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <USB_EPStartXfer+0x1c0>
 8004a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a44:	3301      	adds	r3, #1
 8004a46:	643b      	str	r3, [r7, #64]	; 0x40
 8004a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	029b      	lsls	r3, r3, #10
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	801a      	strh	r2, [r3, #0]
 8004a54:	e023      	b.n	8004a9e <USB_EPStartXfer+0x216>
 8004a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	029b      	lsls	r3, r3, #10
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	801a      	strh	r2, [r3, #0]
 8004a72:	e014      	b.n	8004a9e <USB_EPStartXfer+0x216>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d110      	bne.n	8004a9e <USB_EPStartXfer+0x216>
 8004a7c:	687c      	ldr	r4, [r7, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	441c      	add	r4, r3
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4423      	add	r3, r4
 8004a90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	891b      	ldrh	r3, [r3, #8]
 8004aa2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6959      	ldr	r1, [r3, #20]
 8004aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fac6 	bl	8005044 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d115      	bne.n	8004aec <USB_EPStartXfer+0x264>
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad6:	b29c      	uxth	r4, r3
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	4b99      	ldr	r3, [pc, #612]	; (8004d48 <USB_EPStartXfer+0x4c0>)
 8004ae4:	4323      	orrs	r3, r4
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	8013      	strh	r3, [r2, #0]
 8004aea:	e018      	b.n	8004b1e <USB_EPStartXfer+0x296>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d114      	bne.n	8004b1e <USB_EPStartXfer+0x296>
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	b29c      	uxth	r4, r3
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	4b8d      	ldr	r3, [pc, #564]	; (8004d4c <USB_EPStartXfer+0x4c4>)
 8004b18:	4323      	orrs	r3, r4
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b34:	b29c      	uxth	r4, r3
 8004b36:	f084 0310 	eor.w	r3, r4, #16
 8004b3a:	b29c      	uxth	r4, r3
 8004b3c:	f084 0320 	eor.w	r3, r4, #32
 8004b40:	b29c      	uxth	r4, r3
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	441a      	add	r2, r3
 8004b4c:	4b80      	ldr	r3, [pc, #512]	; (8004d50 <USB_EPStartXfer+0x4c8>)
 8004b4e:	4323      	orrs	r3, r4
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	8013      	strh	r3, [r2, #0]
 8004b54:	e13c      	b.n	8004dd0 <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d909      	bls.n	8004b76 <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	699a      	ldr	r2, [r3, #24]
 8004b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	619a      	str	r2, [r3, #24]
 8004b74:	e005      	b.n	8004b82 <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	7b1b      	ldrb	r3, [r3, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d144      	bne.n	8004c14 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004b8a:	687c      	ldr	r4, [r7, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	441c      	add	r4, r3
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4423      	add	r3, r4
 8004b9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ba2:	623b      	str	r3, [r7, #32]
 8004ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d110      	bne.n	8004bcc <USB_EPStartXfer+0x344>
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	801a      	strh	r2, [r3, #0]
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	801a      	strh	r2, [r3, #0]
 8004bca:	e0e6      	b.n	8004d9a <USB_EPStartXfer+0x512>
 8004bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bce:	2b3d      	cmp	r3, #61	; 0x3d
 8004bd0:	d811      	bhi.n	8004bf6 <USB_EPStartXfer+0x36e>
 8004bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd4:	085b      	lsrs	r3, r3, #1
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <USB_EPStartXfer+0x360>
 8004be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be4:	3301      	adds	r3, #1
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	029b      	lsls	r3, r3, #10
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	801a      	strh	r2, [r3, #0]
 8004bf4:	e0d1      	b.n	8004d9a <USB_EPStartXfer+0x512>
 8004bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	029b      	lsls	r3, r3, #10
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	801a      	strh	r2, [r3, #0]
 8004c12:	e0c2      	b.n	8004d9a <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d144      	bne.n	8004ca6 <USB_EPStartXfer+0x41e>
 8004c1c:	687c      	ldr	r4, [r7, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	441c      	add	r4, r3
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	4423      	add	r3, r4
 8004c30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d110      	bne.n	8004c5e <USB_EPStartXfer+0x3d6>
 8004c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	801a      	strh	r2, [r3, #0]
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	801a      	strh	r2, [r3, #0]
 8004c5c:	e038      	b.n	8004cd0 <USB_EPStartXfer+0x448>
 8004c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c60:	2b3d      	cmp	r3, #61	; 0x3d
 8004c62:	d811      	bhi.n	8004c88 <USB_EPStartXfer+0x400>
 8004c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <USB_EPStartXfer+0x3f2>
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	3301      	adds	r3, #1
 8004c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	029b      	lsls	r3, r3, #10
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	e023      	b.n	8004cd0 <USB_EPStartXfer+0x448>
 8004c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	029b      	lsls	r3, r3, #10
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	801a      	strh	r2, [r3, #0]
 8004ca4:	e014      	b.n	8004cd0 <USB_EPStartXfer+0x448>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d110      	bne.n	8004cd0 <USB_EPStartXfer+0x448>
 8004cae:	687c      	ldr	r4, [r7, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	441c      	add	r4, r3
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4423      	add	r3, r4
 8004cc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8004cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	801a      	strh	r2, [r3, #0]
 8004cd0:	687c      	ldr	r4, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d14b      	bne.n	8004d72 <USB_EPStartXfer+0x4ea>
 8004cda:	687c      	ldr	r4, [r7, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	441c      	add	r4, r3
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4423      	add	r3, r4
 8004cee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d110      	bne.n	8004d1c <USB_EPStartXfer+0x494>
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	801a      	strh	r2, [r3, #0]
 8004d1a:	e03e      	b.n	8004d9a <USB_EPStartXfer+0x512>
 8004d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d1e:	2b3d      	cmp	r3, #61	; 0x3d
 8004d20:	d818      	bhi.n	8004d54 <USB_EPStartXfer+0x4cc>
 8004d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
 8004d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <USB_EPStartXfer+0x4b0>
 8004d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d34:	3301      	adds	r3, #1
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
 8004d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	029b      	lsls	r3, r3, #10
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	801a      	strh	r2, [r3, #0]
 8004d44:	e029      	b.n	8004d9a <USB_EPStartXfer+0x512>
 8004d46:	bf00      	nop
 8004d48:	ffff80c0 	.word	0xffff80c0
 8004d4c:	ffffc080 	.word	0xffffc080
 8004d50:	ffff8080 	.word	0xffff8080
 8004d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	029b      	lsls	r3, r3, #10
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	801a      	strh	r2, [r3, #0]
 8004d70:	e013      	b.n	8004d9a <USB_EPStartXfer+0x512>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	785b      	ldrb	r3, [r3, #1]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d10f      	bne.n	8004d9a <USB_EPStartXfer+0x512>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	441c      	add	r4, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4423      	add	r3, r4
 8004d8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db0:	b29c      	uxth	r4, r3
 8004db2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004db6:	b29c      	uxth	r4, r3
 8004db8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004dbc:	b29c      	uxth	r4, r3
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	441a      	add	r2, r3
 8004dc8:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <USB_EPStartXfer+0x554>)
 8004dca:	4323      	orrs	r3, r4
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3754      	adds	r7, #84	; 0x54
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd90      	pop	{r4, r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	ffff8080 	.word	0xffff8080

08004de0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004de0:	b490      	push	{r4, r7}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	785b      	ldrb	r3, [r3, #1]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d018      	beq.n	8004e24 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e08:	b29c      	uxth	r4, r3
 8004e0a:	f084 0310 	eor.w	r3, r4, #16
 8004e0e:	b29c      	uxth	r4, r3
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	441a      	add	r2, r3
 8004e1a:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <USB_EPSetStall+0x80>)
 8004e1c:	4323      	orrs	r3, r4
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	8013      	strh	r3, [r2, #0]
 8004e22:	e017      	b.n	8004e54 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3a:	b29c      	uxth	r4, r3
 8004e3c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004e40:	b29c      	uxth	r4, r3
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	441a      	add	r2, r3
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <USB_EPSetStall+0x80>)
 8004e4e:	4323      	orrs	r3, r4
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc90      	pop	{r4, r7}
 8004e5e:	4770      	bx	lr
 8004e60:	ffff8080 	.word	0xffff8080

08004e64 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e64:	b490      	push	{r4, r7}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	7b1b      	ldrb	r3, [r3, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d17d      	bne.n	8004f72 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	785b      	ldrb	r3, [r3, #1]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d03d      	beq.n	8004efa <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29c      	uxth	r4, r3
 8004e8c:	4623      	mov	r3, r4
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d014      	beq.n	8004ec0 <USB_EPClearStall+0x5c>
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eac:	b29c      	uxth	r4, r3
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	441a      	add	r2, r3
 8004eb8:	4b31      	ldr	r3, [pc, #196]	; (8004f80 <USB_EPClearStall+0x11c>)
 8004eba:	4323      	orrs	r3, r4
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	78db      	ldrb	r3, [r3, #3]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d054      	beq.n	8004f72 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ede:	b29c      	uxth	r4, r3
 8004ee0:	f084 0320 	eor.w	r3, r4, #32
 8004ee4:	b29c      	uxth	r4, r3
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	441a      	add	r2, r3
 8004ef0:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <USB_EPClearStall+0x120>)
 8004ef2:	4323      	orrs	r3, r4
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	8013      	strh	r3, [r2, #0]
 8004ef8:	e03b      	b.n	8004f72 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29c      	uxth	r4, r3
 8004f08:	4623      	mov	r3, r4
 8004f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d014      	beq.n	8004f3c <USB_EPClearStall+0xd8>
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f28:	b29c      	uxth	r4, r3
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	441a      	add	r2, r3
 8004f34:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <USB_EPClearStall+0x124>)
 8004f36:	4323      	orrs	r3, r4
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	b29c      	uxth	r4, r3
 8004f54:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f58:	b29c      	uxth	r4, r3
 8004f5a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004f5e:	b29c      	uxth	r4, r3
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	441a      	add	r2, r3
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <USB_EPClearStall+0x120>)
 8004f6c:	4323      	orrs	r3, r4
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc90      	pop	{r4, r7}
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	ffff80c0 	.word	0xffff80c0
 8004f84:	ffff8080 	.word	0xffff8080
 8004f88:	ffffc080 	.word	0xffffc080

08004f8c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2280      	movs	r2, #128	; 0x80
 8004fa2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800501a:	b29b      	uxth	r3, r3
 800501c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800501e:	68fb      	ldr	r3, [r7, #12]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005044:	b480      	push	{r7}
 8005046:	b08d      	sub	sp, #52	; 0x34
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	4611      	mov	r1, r2
 8005050:	461a      	mov	r2, r3
 8005052:	460b      	mov	r3, r1
 8005054:	80fb      	strh	r3, [r7, #6]
 8005056:	4613      	mov	r3, r2
 8005058:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800505a:	88bb      	ldrh	r3, [r7, #4]
 800505c:	3301      	adds	r3, #1
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800506a:	88fa      	ldrh	r2, [r7, #6]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800507a:	e01b      	b.n	80050b4 <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	3301      	adds	r3, #1
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	b29b      	uxth	r3, r3
 8005092:	461a      	mov	r2, r3
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	b29a      	uxth	r2, r3
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	3302      	adds	r3, #2
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	3301      	adds	r3, #1
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	3b01      	subs	r3, #1
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e0      	bne.n	800507c <USB_WritePMA+0x38>
  }
}
 80050ba:	bf00      	nop
 80050bc:	3734      	adds	r7, #52	; 0x34
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b08b      	sub	sp, #44	; 0x2c
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	4611      	mov	r1, r2
 80050d2:	461a      	mov	r2, r3
 80050d4:	460b      	mov	r3, r1
 80050d6:	80fb      	strh	r3, [r7, #6]
 80050d8:	4613      	mov	r3, r2
 80050da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80050dc:	88bb      	ldrh	r3, [r7, #4]
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050ec:	88fa      	ldrh	r2, [r7, #6]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050f6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
 80050fc:	e017      	b.n	800512e <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	3302      	adds	r3, #2
 8005108:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	b2da      	uxtb	r2, r3
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	3301      	adds	r3, #1
 8005116:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	0a1b      	lsrs	r3, r3, #8
 800511c:	b2da      	uxtb	r2, r3
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3301      	adds	r3, #1
 8005126:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	3b01      	subs	r3, #1
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e4      	bne.n	80050fe <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005134:	88bb      	ldrh	r3, [r7, #4]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d006      	beq.n	800514e <USB_ReadPMA+0x88>
  {
    temp = *pdwVal;
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	b2da      	uxtb	r2, r3
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	701a      	strb	r2, [r3, #0]
  }
}
 800514e:	bf00      	nop
 8005150:	372c      	adds	r7, #44	; 0x2c
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	7c1b      	ldrb	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d115      	bne.n	800519e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005176:	2202      	movs	r2, #2
 8005178:	2181      	movs	r1, #129	; 0x81
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f001 fe08 	bl	8006d90 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800518a:	2202      	movs	r2, #2
 800518c:	2101      	movs	r1, #1
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f001 fdfe 	bl	8006d90 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800519c:	e012      	b.n	80051c4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800519e:	2340      	movs	r3, #64	; 0x40
 80051a0:	2202      	movs	r2, #2
 80051a2:	2181      	movs	r1, #129	; 0x81
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f001 fdf3 	bl	8006d90 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80051b0:	2340      	movs	r3, #64	; 0x40
 80051b2:	2202      	movs	r2, #2
 80051b4:	2101      	movs	r1, #1
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f001 fdea 	bl	8006d90 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80051c4:	2308      	movs	r3, #8
 80051c6:	2203      	movs	r2, #3
 80051c8:	2182      	movs	r1, #130	; 0x82
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f001 fde0 	bl	8006d90 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80051d6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80051da:	f001 ffd3 	bl	8007184 <USBD_static_malloc>
 80051de:	4602      	mov	r2, r0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
 80051f4:	e026      	b.n	8005244 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80051fc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2200      	movs	r2, #0
 800520c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	7c1b      	ldrb	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d109      	bne.n	8005234 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800522a:	2101      	movs	r1, #1
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f001 ff25 	bl	800707c <USBD_LL_PrepareReceive>
 8005232:	e007      	b.n	8005244 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800523a:	2340      	movs	r3, #64	; 0x40
 800523c:	2101      	movs	r1, #1
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f001 ff1c 	bl	800707c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	460b      	mov	r3, r1
 8005258:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800525e:	2181      	movs	r1, #129	; 0x81
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f001 fdd3 	bl	8006e0c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800526c:	2101      	movs	r1, #1
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f001 fdcc 	bl	8006e0c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800527c:	2182      	movs	r1, #130	; 0x82
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f001 fdc4 	bl	8006e0c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00e      	beq.n	80052b2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80052a4:	4618      	mov	r0, r3
 80052a6:	f001 ff7b 	bl	80071a0 <USBD_static_free>
    pdev->pClassData = NULL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80052cc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d039      	beq.n	800535a <USBD_CDC_Setup+0x9e>
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d17c      	bne.n	80053e4 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	88db      	ldrh	r3, [r3, #6]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d029      	beq.n	8005346 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	b25b      	sxtb	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da11      	bge.n	8005320 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8005308:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	88d2      	ldrh	r2, [r2, #6]
 800530e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005310:	6939      	ldr	r1, [r7, #16]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	88db      	ldrh	r3, [r3, #6]
 8005316:	461a      	mov	r2, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f001 f979 	bl	8006610 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800531e:	e068      	b.n	80053f2 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	785a      	ldrb	r2, [r3, #1]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	88db      	ldrh	r3, [r3, #6]
 800532e:	b2da      	uxtb	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005336:	6939      	ldr	r1, [r7, #16]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	88db      	ldrh	r3, [r3, #6]
 800533c:	461a      	mov	r2, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 f994 	bl	800666c <USBD_CtlPrepareRx>
    break;
 8005344:	e055      	b.n	80053f2 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	7850      	ldrb	r0, [r2, #1]
 8005352:	2200      	movs	r2, #0
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	4798      	blx	r3
    break;
 8005358:	e04b      	b.n	80053f2 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	785b      	ldrb	r3, [r3, #1]
 800535e:	2b0a      	cmp	r3, #10
 8005360:	d017      	beq.n	8005392 <USBD_CDC_Setup+0xd6>
 8005362:	2b0b      	cmp	r3, #11
 8005364:	d029      	beq.n	80053ba <USBD_CDC_Setup+0xfe>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d133      	bne.n	80053d2 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005370:	2b03      	cmp	r3, #3
 8005372:	d107      	bne.n	8005384 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005374:	f107 030c 	add.w	r3, r7, #12
 8005378:	2202      	movs	r2, #2
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f001 f947 	bl	8006610 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005382:	e02e      	b.n	80053e2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f001 f8d7 	bl	800653a <USBD_CtlError>
			  ret = USBD_FAIL;
 800538c:	2302      	movs	r3, #2
 800538e:	75fb      	strb	r3, [r7, #23]
      break;
 8005390:	e027      	b.n	80053e2 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005398:	2b03      	cmp	r3, #3
 800539a:	d107      	bne.n	80053ac <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800539c:	f107 030f 	add.w	r3, r7, #15
 80053a0:	2201      	movs	r2, #1
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f001 f933 	bl	8006610 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80053aa:	e01a      	b.n	80053e2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f001 f8c3 	bl	800653a <USBD_CtlError>
			  ret = USBD_FAIL;
 80053b4:	2302      	movs	r3, #2
 80053b6:	75fb      	strb	r3, [r7, #23]
      break;
 80053b8:	e013      	b.n	80053e2 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d00d      	beq.n	80053e0 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f001 f8b7 	bl	800653a <USBD_CtlError>
			  ret = USBD_FAIL;
 80053cc:	2302      	movs	r3, #2
 80053ce:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80053d0:	e006      	b.n	80053e0 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f001 f8b0 	bl	800653a <USBD_CtlError>
      ret = USBD_FAIL;
 80053da:	2302      	movs	r3, #2
 80053dc:	75fb      	strb	r3, [r7, #23]
      break;
 80053de:	e000      	b.n	80053e2 <USBD_CDC_Setup+0x126>
      break;
 80053e0:	bf00      	nop
    }
    break;
 80053e2:	e006      	b.n	80053f2 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f001 f8a7 	bl	800653a <USBD_CtlError>
    ret = USBD_FAIL;
 80053ec:	2302      	movs	r3, #2
 80053ee:	75fb      	strb	r3, [r7, #23]
    break;
 80053f0:	bf00      	nop
  }

  return ret;
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800540e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005416:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800541e:	2b00      	cmp	r3, #0
 8005420:	d037      	beq.n	8005492 <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	331c      	adds	r3, #28
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d026      	beq.n	8005486 <USBD_CDC_DataIn+0x8a>
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	331c      	adds	r3, #28
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	78fa      	ldrb	r2, [r7, #3]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	0152      	lsls	r2, r2, #5
 8005450:	440a      	add	r2, r1
 8005452:	3238      	adds	r2, #56	; 0x38
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	fbb3 f1f2 	udiv	r1, r3, r2
 800545a:	fb02 f201 	mul.w	r2, r2, r1
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d110      	bne.n	8005486 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005464:	78fa      	ldrb	r2, [r7, #3]
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	331c      	adds	r3, #28
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005478:	78f9      	ldrb	r1, [r7, #3]
 800547a:	2300      	movs	r3, #0
 800547c:	2200      	movs	r2, #0
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 fdc2 	bl	8007008 <USBD_LL_Transmit>
 8005484:	e003      	b.n	800548e <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	e000      	b.n	8005494 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005492:	2302      	movs	r3, #2
  }
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 fe1b 	bl	80070f0 <USBD_LL_GetRxDataSize>
 80054ba:	4602      	mov	r2, r0
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00d      	beq.n	80054e8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80054e0:	4611      	mov	r1, r2
 80054e2:	4798      	blx	r3

    return USBD_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e000      	b.n	80054ea <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80054e8:	2302      	movs	r3, #2
  }
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005500:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005508:	2b00      	cmp	r3, #0
 800550a:	d015      	beq.n	8005538 <USBD_CDC_EP0_RxReady+0x46>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005512:	2bff      	cmp	r3, #255	; 0xff
 8005514:	d010      	beq.n	8005538 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005524:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800552c:	b292      	uxth	r2, r2
 800552e:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	22ff      	movs	r2, #255	; 0xff
 8005534:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2243      	movs	r2, #67	; 0x43
 8005550:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005552:	4b03      	ldr	r3, [pc, #12]	; (8005560 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	20000094 	.word	0x20000094

08005564 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2243      	movs	r2, #67	; 0x43
 8005570:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005572:	4b03      	ldr	r3, [pc, #12]	; (8005580 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	20000050 	.word	0x20000050

08005584 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2243      	movs	r2, #67	; 0x43
 8005590:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005592:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	200000d8 	.word	0x200000d8

080055a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	220a      	movs	r2, #10
 80055b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80055b2:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	2000000c 	.word	0x2000000c

080055c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80055ce:	2302      	movs	r3, #2
 80055d0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b087      	sub	sp, #28
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	4613      	mov	r3, r2
 80055fe:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005606:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005610:	88fa      	ldrh	r2, [r7, #6]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005636:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800565c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005664:	2b00      	cmp	r3, #0
 8005666:	d017      	beq.n	8005698 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	7c1b      	ldrb	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d109      	bne.n	8005684 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800567a:	2101      	movs	r1, #1
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f001 fcfd 	bl	800707c <USBD_LL_PrepareReceive>
 8005682:	e007      	b.n	8005694 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800568a:	2340      	movs	r3, #64	; 0x40
 800568c:	2101      	movs	r1, #1
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f001 fcf4 	bl	800707c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	e000      	b.n	800569a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005698:	2302      	movs	r3, #2
  }
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	4613      	mov	r3, r2
 80056ae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80056b6:	2302      	movs	r3, #2
 80056b8:	e01a      	b.n	80056f0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	79fa      	ldrb	r2, [r7, #7]
 80056e6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f001 fabd 	bl	8006c68 <USBD_LL_Init>

  return USBD_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d006      	beq.n	800571a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	73fb      	strb	r3, [r7, #15]
 8005718:	e001      	b.n	800571e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800571a:	2302      	movs	r3, #2
 800571c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 faf9 	bl	8006d2c <USBD_LL_Start>

  return USBD_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005766:	2302      	movs	r3, #2
 8005768:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00c      	beq.n	800578e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	4611      	mov	r1, r2
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	4798      	blx	r3
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800578e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	78fa      	ldrb	r2, [r7, #3]
 80057ae:	4611      	mov	r1, r2
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	4798      	blx	r3
  return USBD_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057ce:	6839      	ldr	r1, [r7, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fe75 	bl	80064c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80057e4:	461a      	mov	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d00c      	beq.n	8005814 <USBD_LL_SetupStage+0x56>
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d302      	bcc.n	8005804 <USBD_LL_SetupStage+0x46>
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d010      	beq.n	8005824 <USBD_LL_SetupStage+0x66>
 8005802:	e017      	b.n	8005834 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f9c9 	bl	8005ba4 <USBD_StdDevReq>
    break;
 8005812:	e01a      	b.n	800584a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fa2b 	bl	8005c78 <USBD_StdItfReq>
    break;
 8005822:	e012      	b.n	800584a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fa69 	bl	8005d04 <USBD_StdEPReq>
    break;
 8005832:	e00a      	b.n	800584a <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800583a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800583e:	b2db      	uxtb	r3, r3
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f001 fb18 	bl	8006e78 <USBD_LL_StallEP>
    break;
 8005848:	bf00      	nop
  }

  return USBD_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	460b      	mov	r3, r1
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8005862:	7afb      	ldrb	r3, [r7, #11]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d14b      	bne.n	8005900 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800586e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005876:	2b03      	cmp	r3, #3
 8005878:	d134      	bne.n	80058e4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	d919      	bls.n	80058ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800589c:	429a      	cmp	r2, r3
 800589e:	d203      	bcs.n	80058a8 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	e002      	b.n	80058ae <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fef8 	bl	80066a8 <USBD_CtlContinueRx>
 80058b8:	e038      	b.n	800592c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d105      	bne.n	80058dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fef5 	bl	80066cc <USBD_CtlSendStatus>
 80058e2:	e023      	b.n	800592c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d11e      	bne.n	800592c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80058f6:	2100      	movs	r1, #0
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f001 fabd 	bl	8006e78 <USBD_LL_StallEP>
 80058fe:	e015      	b.n	800592c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00d      	beq.n	8005928 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8005912:	2b03      	cmp	r3, #3
 8005914:	d108      	bne.n	8005928 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	7afa      	ldrb	r2, [r7, #11]
 8005920:	4611      	mov	r1, r2
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	4798      	blx	r3
 8005926:	e001      	b.n	800592c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005928:	2302      	movs	r3, #2
 800592a:	e000      	b.n	800592e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b086      	sub	sp, #24
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	460b      	mov	r3, r1
 8005940:	607a      	str	r2, [r7, #4]
 8005942:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8005944:	7afb      	ldrb	r3, [r7, #11]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d17f      	bne.n	8005a4a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3314      	adds	r3, #20
 800594e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005956:	2b02      	cmp	r3, #2
 8005958:	d15c      	bne.n	8005a14 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	429a      	cmp	r2, r3
 8005964:	d915      	bls.n	8005992 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	1ad2      	subs	r2, r2, r3
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	b29b      	uxth	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fe62 	bl	8006648 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005984:	2300      	movs	r3, #0
 8005986:	2200      	movs	r2, #0
 8005988:	2100      	movs	r1, #0
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f001 fb76 	bl	800707c <USBD_LL_PrepareReceive>
 8005990:	e04e      	b.n	8005a30 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	6912      	ldr	r2, [r2, #16]
 800599a:	fbb3 f1f2 	udiv	r1, r3, r2
 800599e:	fb02 f201 	mul.w	r2, r2, r1
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d11c      	bne.n	80059e2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d316      	bcc.n	80059e2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80059be:	429a      	cmp	r2, r3
 80059c0:	d20f      	bcs.n	80059e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80059c2:	2200      	movs	r2, #0
 80059c4:	2100      	movs	r1, #0
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fe3e 	bl	8006648 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80059d4:	2300      	movs	r3, #0
 80059d6:	2200      	movs	r2, #0
 80059d8:	2100      	movs	r1, #0
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f001 fb4e 	bl	800707c <USBD_LL_PrepareReceive>
 80059e0:	e026      	b.n	8005a30 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d105      	bne.n	8005a04 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005a04:	2180      	movs	r1, #128	; 0x80
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f001 fa36 	bl	8006e78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 fe70 	bl	80066f2 <USBD_CtlReceiveStatus>
 8005a12:	e00d      	b.n	8005a30 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d004      	beq.n	8005a28 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d103      	bne.n	8005a30 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f001 fa24 	bl	8006e78 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d11d      	bne.n	8005a76 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f7ff fe82 	bl	8005744 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8005a48:	e015      	b.n	8005a76 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d108      	bne.n	8005a72 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	7afa      	ldrb	r2, [r7, #11]
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	4798      	blx	r3
 8005a70:	e001      	b.n	8005a76 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a72:	2302      	movs	r3, #2
 8005a74:	e000      	b.n	8005a78 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a88:	2340      	movs	r3, #64	; 0x40
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f001 f97e 	bl	8006d90 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2240      	movs	r2, #64	; 0x40
 8005aa0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005aa4:	2340      	movs	r3, #64	; 0x40
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2180      	movs	r1, #128	; 0x80
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f001 f970 	bl	8006d90 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2240      	movs	r2, #64	; 0x40
 8005aba:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d009      	beq.n	8005af8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6852      	ldr	r2, [r2, #4]
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	4611      	mov	r1, r2
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
  }

  return USBD_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	78fa      	ldrb	r2, [r7, #3]
 8005b12:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d10b      	bne.n	8005b98 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d004      	beq.n	8005bc8 <USBD_StdDevReq+0x24>
 8005bbe:	2b40      	cmp	r3, #64	; 0x40
 8005bc0:	d002      	beq.n	8005bc8 <USBD_StdDevReq+0x24>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d008      	beq.n	8005bd8 <USBD_StdDevReq+0x34>
 8005bc6:	e04c      	b.n	8005c62 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	4798      	blx	r3
    break;
 8005bd6:	e049      	b.n	8005c6c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	2b09      	cmp	r3, #9
 8005bde:	d83a      	bhi.n	8005c56 <USBD_StdDevReq+0xb2>
 8005be0:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <USBD_StdDevReq+0x44>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005c39 	.word	0x08005c39
 8005bec:	08005c4d 	.word	0x08005c4d
 8005bf0:	08005c57 	.word	0x08005c57
 8005bf4:	08005c43 	.word	0x08005c43
 8005bf8:	08005c57 	.word	0x08005c57
 8005bfc:	08005c1b 	.word	0x08005c1b
 8005c00:	08005c11 	.word	0x08005c11
 8005c04:	08005c57 	.word	0x08005c57
 8005c08:	08005c2f 	.word	0x08005c2f
 8005c0c:	08005c25 	.word	0x08005c25
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f9d2 	bl	8005fbc <USBD_GetDescriptor>
      break;
 8005c18:	e022      	b.n	8005c60 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fae3 	bl	80061e8 <USBD_SetAddress>
      break;
 8005c22:	e01d      	b.n	8005c60 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fb20 	bl	800626c <USBD_SetConfig>
      break;
 8005c2c:	e018      	b.n	8005c60 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fba9 	bl	8006388 <USBD_GetConfig>
      break;
 8005c36:	e013      	b.n	8005c60 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fbd8 	bl	80063f0 <USBD_GetStatus>
      break;
 8005c40:	e00e      	b.n	8005c60 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fc06 	bl	8006456 <USBD_SetFeature>
      break;
 8005c4a:	e009      	b.n	8005c60 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fc15 	bl	800647e <USBD_ClrFeature>
      break;
 8005c54:	e004      	b.n	8005c60 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fc6e 	bl	800653a <USBD_CtlError>
      break;
 8005c5e:	bf00      	nop
    }
    break;
 8005c60:	e004      	b.n	8005c6c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fc68 	bl	800653a <USBD_CtlError>
    break;
 8005c6a:	bf00      	nop
  }

  return ret;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop

08005c78 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d003      	beq.n	8005c9a <USBD_StdItfReq+0x22>
 8005c92:	2b40      	cmp	r3, #64	; 0x40
 8005c94:	d001      	beq.n	8005c9a <USBD_StdItfReq+0x22>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d12a      	bne.n	8005cf0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d81d      	bhi.n	8005ce2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	889b      	ldrh	r3, [r3, #4]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d813      	bhi.n	8005cd8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	4798      	blx	r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	88db      	ldrh	r3, [r3, #6]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d110      	bne.n	8005cec <USBD_StdItfReq+0x74>
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10d      	bne.n	8005cec <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fcfb 	bl	80066cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005cd6:	e009      	b.n	8005cec <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fc2d 	bl	800653a <USBD_CtlError>
      break;
 8005ce0:	e004      	b.n	8005cec <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fc28 	bl	800653a <USBD_CtlError>
      break;
 8005cea:	e000      	b.n	8005cee <USBD_StdItfReq+0x76>
      break;
 8005cec:	bf00      	nop
    }
    break;
 8005cee:	e004      	b.n	8005cfa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fc21 	bl	800653a <USBD_CtlError>
    break;
 8005cf8:	bf00      	nop
  }

  return USBD_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	889b      	ldrh	r3, [r3, #4]
 8005d16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d004      	beq.n	8005d2e <USBD_StdEPReq+0x2a>
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	d002      	beq.n	8005d2e <USBD_StdEPReq+0x2a>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <USBD_StdEPReq+0x3a>
 8005d2c:	e13b      	b.n	8005fa6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4798      	blx	r3
    break;
 8005d3c:	e138      	b.n	8005fb0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	d10a      	bne.n	8005d60 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	4798      	blx	r3
 8005d58:	4603      	mov	r3, r0
 8005d5a:	73fb      	strb	r3, [r7, #15]

      return ret;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	e128      	b.n	8005fb2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d03e      	beq.n	8005de6 <USBD_StdEPReq+0xe2>
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d002      	beq.n	8005d72 <USBD_StdEPReq+0x6e>
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d070      	beq.n	8005e52 <USBD_StdEPReq+0x14e>
 8005d70:	e113      	b.n	8005f9a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d002      	beq.n	8005d82 <USBD_StdEPReq+0x7e>
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d015      	beq.n	8005dac <USBD_StdEPReq+0xa8>
 8005d80:	e02b      	b.n	8005dda <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00c      	beq.n	8005da2 <USBD_StdEPReq+0x9e>
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	2b80      	cmp	r3, #128	; 0x80
 8005d8c:	d009      	beq.n	8005da2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005d8e:	7bbb      	ldrb	r3, [r7, #14]
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f001 f870 	bl	8006e78 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005d98:	2180      	movs	r1, #128	; 0x80
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 f86c 	bl	8006e78 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005da0:	e020      	b.n	8005de4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fbc8 	bl	800653a <USBD_CtlError>
        break;
 8005daa:	e01b      	b.n	8005de4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	885b      	ldrh	r3, [r3, #2]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10e      	bne.n	8005dd2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005db4:	7bbb      	ldrb	r3, [r7, #14]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <USBD_StdEPReq+0xce>
 8005dba:	7bbb      	ldrb	r3, [r7, #14]
 8005dbc:	2b80      	cmp	r3, #128	; 0x80
 8005dbe:	d008      	beq.n	8005dd2 <USBD_StdEPReq+0xce>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	88db      	ldrh	r3, [r3, #6]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8005dc8:	7bbb      	ldrb	r3, [r7, #14]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f001 f853 	bl	8006e78 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fc7a 	bl	80066cc <USBD_CtlSendStatus>

        break;
 8005dd8:	e004      	b.n	8005de4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fbac 	bl	800653a <USBD_CtlError>
        break;
 8005de2:	bf00      	nop
      }
      break;
 8005de4:	e0de      	b.n	8005fa4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d002      	beq.n	8005df6 <USBD_StdEPReq+0xf2>
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d015      	beq.n	8005e20 <USBD_StdEPReq+0x11c>
 8005df4:	e026      	b.n	8005e44 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00c      	beq.n	8005e16 <USBD_StdEPReq+0x112>
 8005dfc:	7bbb      	ldrb	r3, [r7, #14]
 8005dfe:	2b80      	cmp	r3, #128	; 0x80
 8005e00:	d009      	beq.n	8005e16 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005e02:	7bbb      	ldrb	r3, [r7, #14]
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f001 f836 	bl	8006e78 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005e0c:	2180      	movs	r1, #128	; 0x80
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 f832 	bl	8006e78 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005e14:	e01c      	b.n	8005e50 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fb8e 	bl	800653a <USBD_CtlError>
        break;
 8005e1e:	e017      	b.n	8005e50 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	885b      	ldrh	r3, [r3, #2]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d112      	bne.n	8005e4e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005e32:	7bbb      	ldrb	r3, [r7, #14]
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 f854 	bl	8006ee4 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fc45 	bl	80066cc <USBD_CtlSendStatus>
        }
        break;
 8005e42:	e004      	b.n	8005e4e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fb77 	bl	800653a <USBD_CtlError>
        break;
 8005e4c:	e000      	b.n	8005e50 <USBD_StdEPReq+0x14c>
        break;
 8005e4e:	bf00      	nop
      }
      break;
 8005e50:	e0a8      	b.n	8005fa4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d002      	beq.n	8005e62 <USBD_StdEPReq+0x15e>
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d031      	beq.n	8005ec4 <USBD_StdEPReq+0x1c0>
 8005e60:	e095      	b.n	8005f8e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e62:	7bbb      	ldrb	r3, [r7, #14]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <USBD_StdEPReq+0x174>
 8005e68:	7bbb      	ldrb	r3, [r7, #14]
 8005e6a:	2b80      	cmp	r3, #128	; 0x80
 8005e6c:	d004      	beq.n	8005e78 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fb62 	bl	800653a <USBD_CtlError>
          break;
 8005e76:	e08f      	b.n	8005f98 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	da0b      	bge.n	8005e98 <USBD_StdEPReq+0x194>
 8005e80:	7bbb      	ldrb	r3, [r7, #14]
 8005e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	3310      	adds	r3, #16
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4413      	add	r3, r2
 8005e94:	3304      	adds	r3, #4
 8005e96:	e00a      	b.n	8005eae <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005e98:	7bbb      	ldrb	r3, [r7, #14]
 8005e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	4413      	add	r3, r2
 8005eae:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fba7 	bl	8006610 <USBD_CtlSendData>
          break;
 8005ec2:	e069      	b.n	8005f98 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	da11      	bge.n	8005ef0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	f003 020f 	and.w	r2, r3, #15
 8005ed2:	6879      	ldr	r1, [r7, #4]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	3318      	adds	r3, #24
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d117      	bne.n	8005f16 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fb26 	bl	800653a <USBD_CtlError>
            break;
 8005eee:	e053      	b.n	8005f98 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ef0:	7bbb      	ldrb	r3, [r7, #14]
 8005ef2:	f003 020f 	and.w	r2, r3, #15
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d104      	bne.n	8005f16 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005f0c:	6839      	ldr	r1, [r7, #0]
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fb13 	bl	800653a <USBD_CtlError>
            break;
 8005f14:	e040      	b.n	8005f98 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	da0b      	bge.n	8005f36 <USBD_StdEPReq+0x232>
 8005f1e:	7bbb      	ldrb	r3, [r7, #14]
 8005f20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	3310      	adds	r3, #16
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	4413      	add	r3, r2
 8005f32:	3304      	adds	r3, #4
 8005f34:	e00a      	b.n	8005f4c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005f36:	7bbb      	ldrb	r3, [r7, #14]
 8005f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <USBD_StdEPReq+0x256>
 8005f54:	7bbb      	ldrb	r3, [r7, #14]
 8005f56:	2b80      	cmp	r3, #128	; 0x80
 8005f58:	d103      	bne.n	8005f62 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e00e      	b.n	8005f80 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fff2 	bl	8006f50 <USBD_LL_IsStallEP>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	e002      	b.n	8005f80 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2202      	movs	r2, #2
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fb42 	bl	8006610 <USBD_CtlSendData>
          break;
 8005f8c:	e004      	b.n	8005f98 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fad2 	bl	800653a <USBD_CtlError>
        break;
 8005f96:	bf00      	nop
      }
      break;
 8005f98:	e004      	b.n	8005fa4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 facc 	bl	800653a <USBD_CtlError>
      break;
 8005fa2:	bf00      	nop
    }
    break;
 8005fa4:	e004      	b.n	8005fb0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fac6 	bl	800653a <USBD_CtlError>
    break;
 8005fae:	bf00      	nop
  }

  return ret;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	885b      	ldrh	r3, [r3, #2]
 8005fca:	0a1b      	lsrs	r3, r3, #8
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	2b0e      	cmp	r3, #14
 8005fd2:	f200 80e5 	bhi.w	80061a0 <USBD_GetDescriptor+0x1e4>
 8005fd6:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <USBD_GetDescriptor+0x20>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08006031 	.word	0x08006031
 8005fe0:	08006049 	.word	0x08006049
 8005fe4:	08006089 	.word	0x08006089
 8005fe8:	080061a1 	.word	0x080061a1
 8005fec:	080061a1 	.word	0x080061a1
 8005ff0:	0800614d 	.word	0x0800614d
 8005ff4:	08006173 	.word	0x08006173
 8005ff8:	080061a1 	.word	0x080061a1
 8005ffc:	080061a1 	.word	0x080061a1
 8006000:	080061a1 	.word	0x080061a1
 8006004:	080061a1 	.word	0x080061a1
 8006008:	080061a1 	.word	0x080061a1
 800600c:	080061a1 	.word	0x080061a1
 8006010:	080061a1 	.word	0x080061a1
 8006014:	08006019 	.word	0x08006019
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	7c12      	ldrb	r2, [r2, #16]
 8006024:	f107 010a 	add.w	r1, r7, #10
 8006028:	4610      	mov	r0, r2
 800602a:	4798      	blx	r3
 800602c:	60f8      	str	r0, [r7, #12]
    break;
 800602e:	e0bc      	b.n	80061aa <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	7c12      	ldrb	r2, [r2, #16]
 800603c:	f107 010a 	add.w	r1, r7, #10
 8006040:	4610      	mov	r0, r2
 8006042:	4798      	blx	r3
 8006044:	60f8      	str	r0, [r7, #12]
    break;
 8006046:	e0b0      	b.n	80061aa <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	7c1b      	ldrb	r3, [r3, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10d      	bne.n	800606c <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	f107 020a 	add.w	r2, r7, #10
 800605c:	4610      	mov	r0, r2
 800605e:	4798      	blx	r3
 8006060:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3301      	adds	r3, #1
 8006066:	2202      	movs	r2, #2
 8006068:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800606a:	e09e      	b.n	80061aa <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	f107 020a 	add.w	r2, r7, #10
 8006078:	4610      	mov	r0, r2
 800607a:	4798      	blx	r3
 800607c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3301      	adds	r3, #1
 8006082:	2202      	movs	r2, #2
 8006084:	701a      	strb	r2, [r3, #0]
    break;
 8006086:	e090      	b.n	80061aa <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	885b      	ldrh	r3, [r3, #2]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b05      	cmp	r3, #5
 8006090:	d856      	bhi.n	8006140 <USBD_GetDescriptor+0x184>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <USBD_GetDescriptor+0xdc>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060b1 	.word	0x080060b1
 800609c:	080060c9 	.word	0x080060c9
 80060a0:	080060e1 	.word	0x080060e1
 80060a4:	080060f9 	.word	0x080060f9
 80060a8:	08006111 	.word	0x08006111
 80060ac:	08006129 	.word	0x08006129
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	7c12      	ldrb	r2, [r2, #16]
 80060bc:	f107 010a 	add.w	r1, r7, #10
 80060c0:	4610      	mov	r0, r2
 80060c2:	4798      	blx	r3
 80060c4:	60f8      	str	r0, [r7, #12]
      break;
 80060c6:	e040      	b.n	800614a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	7c12      	ldrb	r2, [r2, #16]
 80060d4:	f107 010a 	add.w	r1, r7, #10
 80060d8:	4610      	mov	r0, r2
 80060da:	4798      	blx	r3
 80060dc:	60f8      	str	r0, [r7, #12]
      break;
 80060de:	e034      	b.n	800614a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	7c12      	ldrb	r2, [r2, #16]
 80060ec:	f107 010a 	add.w	r1, r7, #10
 80060f0:	4610      	mov	r0, r2
 80060f2:	4798      	blx	r3
 80060f4:	60f8      	str	r0, [r7, #12]
      break;
 80060f6:	e028      	b.n	800614a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	7c12      	ldrb	r2, [r2, #16]
 8006104:	f107 010a 	add.w	r1, r7, #10
 8006108:	4610      	mov	r0, r2
 800610a:	4798      	blx	r3
 800610c:	60f8      	str	r0, [r7, #12]
      break;
 800610e:	e01c      	b.n	800614a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	7c12      	ldrb	r2, [r2, #16]
 800611c:	f107 010a 	add.w	r1, r7, #10
 8006120:	4610      	mov	r0, r2
 8006122:	4798      	blx	r3
 8006124:	60f8      	str	r0, [r7, #12]
      break;
 8006126:	e010      	b.n	800614a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	7c12      	ldrb	r2, [r2, #16]
 8006134:	f107 010a 	add.w	r1, r7, #10
 8006138:	4610      	mov	r0, r2
 800613a:	4798      	blx	r3
 800613c:	60f8      	str	r0, [r7, #12]
      break;
 800613e:	e004      	b.n	800614a <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f9f9 	bl	800653a <USBD_CtlError>
      return;
 8006148:	e04b      	b.n	80061e2 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800614a:	e02e      	b.n	80061aa <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	7c1b      	ldrb	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800615a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615c:	f107 020a 	add.w	r2, r7, #10
 8006160:	4610      	mov	r0, r2
 8006162:	4798      	blx	r3
 8006164:	60f8      	str	r0, [r7, #12]
      break;
 8006166:	e020      	b.n	80061aa <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f9e5 	bl	800653a <USBD_CtlError>
      return;
 8006170:	e037      	b.n	80061e2 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	7c1b      	ldrb	r3, [r3, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10d      	bne.n	8006196 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	f107 020a 	add.w	r2, r7, #10
 8006186:	4610      	mov	r0, r2
 8006188:	4798      	blx	r3
 800618a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3301      	adds	r3, #1
 8006190:	2207      	movs	r2, #7
 8006192:	701a      	strb	r2, [r3, #0]
      break;
 8006194:	e009      	b.n	80061aa <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f9ce 	bl	800653a <USBD_CtlError>
      return;
 800619e:	e020      	b.n	80061e2 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f9c9 	bl	800653a <USBD_CtlError>
    return;
 80061a8:	e01b      	b.n	80061e2 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 80061aa:	897b      	ldrh	r3, [r7, #10]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d011      	beq.n	80061d4 <USBD_GetDescriptor+0x218>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	88db      	ldrh	r3, [r3, #6]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00d      	beq.n	80061d4 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	88da      	ldrh	r2, [r3, #6]
 80061bc:	897b      	ldrh	r3, [r7, #10]
 80061be:	4293      	cmp	r3, r2
 80061c0:	bf28      	it	cs
 80061c2:	4613      	movcs	r3, r2
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80061c8:	897b      	ldrh	r3, [r7, #10]
 80061ca:	461a      	mov	r2, r3
 80061cc:	68f9      	ldr	r1, [r7, #12]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fa1e 	bl	8006610 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	88db      	ldrh	r3, [r3, #6]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fa75 	bl	80066cc <USBD_CtlSendStatus>
  }
}
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	889b      	ldrh	r3, [r3, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d130      	bne.n	800625c <USBD_SetAddress+0x74>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	88db      	ldrh	r3, [r3, #6]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d12c      	bne.n	800625c <USBD_SetAddress+0x74>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	885b      	ldrh	r3, [r3, #2]
 8006206:	2b7f      	cmp	r3, #127	; 0x7f
 8006208:	d828      	bhi.n	800625c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	885b      	ldrh	r3, [r3, #2]
 800620e:	b2db      	uxtb	r3, r3
 8006210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006214:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800621c:	2b03      	cmp	r3, #3
 800621e:	d104      	bne.n	800622a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f989 	bl	800653a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006228:	e01c      	b.n	8006264 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	7bfa      	ldrb	r2, [r7, #15]
 800622e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	4619      	mov	r1, r3
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 feb0 	bl	8006f9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fa45 	bl	80066cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d004      	beq.n	8006252 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006250:	e008      	b.n	8006264 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800625a:	e003      	b.n	8006264 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f96b 	bl	800653a <USBD_CtlError>
  }
}
 8006264:	bf00      	nop
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	885b      	ldrh	r3, [r3, #2]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	4b41      	ldr	r3, [pc, #260]	; (8006384 <USBD_SetConfig+0x118>)
 800627e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006280:	4b40      	ldr	r3, [pc, #256]	; (8006384 <USBD_SetConfig+0x118>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d904      	bls.n	8006292 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f955 	bl	800653a <USBD_CtlError>
 8006290:	e075      	b.n	800637e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006298:	2b02      	cmp	r3, #2
 800629a:	d002      	beq.n	80062a2 <USBD_SetConfig+0x36>
 800629c:	2b03      	cmp	r3, #3
 800629e:	d023      	beq.n	80062e8 <USBD_SetConfig+0x7c>
 80062a0:	e062      	b.n	8006368 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80062a2:	4b38      	ldr	r3, [pc, #224]	; (8006384 <USBD_SetConfig+0x118>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01a      	beq.n	80062e0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80062aa:	4b36      	ldr	r3, [pc, #216]	; (8006384 <USBD_SetConfig+0x118>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2203      	movs	r2, #3
 80062b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80062bc:	4b31      	ldr	r3, [pc, #196]	; (8006384 <USBD_SetConfig+0x118>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fa49 	bl	800575a <USBD_SetClassConfig>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d104      	bne.n	80062d8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f932 	bl	800653a <USBD_CtlError>
          return;
 80062d6:	e052      	b.n	800637e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f9f7 	bl	80066cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80062de:	e04e      	b.n	800637e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f9f3 	bl	80066cc <USBD_CtlSendStatus>
      break;
 80062e6:	e04a      	b.n	800637e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80062e8:	4b26      	ldr	r3, [pc, #152]	; (8006384 <USBD_SetConfig+0x118>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d112      	bne.n	8006316 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80062f8:	4b22      	ldr	r3, [pc, #136]	; (8006384 <USBD_SetConfig+0x118>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006302:	4b20      	ldr	r3, [pc, #128]	; (8006384 <USBD_SetConfig+0x118>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fa45 	bl	8005798 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f9dc 	bl	80066cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006314:	e033      	b.n	800637e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006316:	4b1b      	ldr	r3, [pc, #108]	; (8006384 <USBD_SetConfig+0x118>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	d01d      	beq.n	8006360 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	b2db      	uxtb	r3, r3
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff fa33 	bl	8005798 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006332:	4b14      	ldr	r3, [pc, #80]	; (8006384 <USBD_SetConfig+0x118>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800633c:	4b11      	ldr	r3, [pc, #68]	; (8006384 <USBD_SetConfig+0x118>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fa09 	bl	800575a <USBD_SetClassConfig>
 8006348:	4603      	mov	r3, r0
 800634a:	2b02      	cmp	r3, #2
 800634c:	d104      	bne.n	8006358 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f8f2 	bl	800653a <USBD_CtlError>
          return;
 8006356:	e012      	b.n	800637e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f9b7 	bl	80066cc <USBD_CtlSendStatus>
      break;
 800635e:	e00e      	b.n	800637e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f9b3 	bl	80066cc <USBD_CtlSendStatus>
      break;
 8006366:	e00a      	b.n	800637e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f8e5 	bl	800653a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006370:	4b04      	ldr	r3, [pc, #16]	; (8006384 <USBD_SetConfig+0x118>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff fa0e 	bl	8005798 <USBD_ClrClassConfig>
      break;
 800637c:	bf00      	nop
    }
  }
}
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	200001a8 	.word	0x200001a8

08006388 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	88db      	ldrh	r3, [r3, #6]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d004      	beq.n	80063a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800639a:	6839      	ldr	r1, [r7, #0]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f8cc 	bl	800653a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80063a2:	e021      	b.n	80063e8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	db17      	blt.n	80063de <USBD_GetConfig+0x56>
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	dd02      	ble.n	80063b8 <USBD_GetConfig+0x30>
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d00b      	beq.n	80063ce <USBD_GetConfig+0x46>
 80063b6:	e012      	b.n	80063de <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3308      	adds	r3, #8
 80063c2:	2201      	movs	r2, #1
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f922 	bl	8006610 <USBD_CtlSendData>
      break;
 80063cc:	e00c      	b.n	80063e8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3304      	adds	r3, #4
 80063d2:	2201      	movs	r2, #1
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f91a 	bl	8006610 <USBD_CtlSendData>
      break;
 80063dc:	e004      	b.n	80063e8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f8aa 	bl	800653a <USBD_CtlError>
      break;
 80063e6:	bf00      	nop
}
 80063e8:	bf00      	nop
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006400:	3b01      	subs	r3, #1
 8006402:	2b02      	cmp	r3, #2
 8006404:	d81e      	bhi.n	8006444 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	88db      	ldrh	r3, [r3, #6]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d004      	beq.n	8006418 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800640e:	6839      	ldr	r1, [r7, #0]
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f892 	bl	800653a <USBD_CtlError>
      break;
 8006416:	e01a      	b.n	800644e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f043 0202 	orr.w	r2, r3, #2
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	330c      	adds	r3, #12
 8006438:	2202      	movs	r2, #2
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f8e7 	bl	8006610 <USBD_CtlSendData>
    break;
 8006442:	e004      	b.n	800644e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f877 	bl	800653a <USBD_CtlError>
    break;
 800644c:	bf00      	nop
  }
}
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	885b      	ldrh	r3, [r3, #2]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d106      	bne.n	8006476 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f92b 	bl	80066cc <USBD_CtlSendStatus>
  }

}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800648e:	3b01      	subs	r3, #1
 8006490:	2b02      	cmp	r3, #2
 8006492:	d80b      	bhi.n	80064ac <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	885b      	ldrh	r3, [r3, #2]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d10c      	bne.n	80064b6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f911 	bl	80066cc <USBD_CtlSendStatus>
    }
    break;
 80064aa:	e004      	b.n	80064b6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f843 	bl	800653a <USBD_CtlError>
    break;
 80064b4:	e000      	b.n	80064b8 <USBD_ClrFeature+0x3a>
    break;
 80064b6:	bf00      	nop
  }
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781a      	ldrb	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	785a      	ldrb	r2, [r3, #1]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	3302      	adds	r3, #2
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	3303      	adds	r3, #3
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	4413      	add	r3, r2
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	3304      	adds	r3, #4
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	3305      	adds	r3, #5
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	b29b      	uxth	r3, r3
 800650a:	4413      	add	r3, r2
 800650c:	b29a      	uxth	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	3306      	adds	r3, #6
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	b29a      	uxth	r2, r3
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	3307      	adds	r3, #7
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	b29b      	uxth	r3, r3
 8006526:	4413      	add	r3, r2
 8006528:	b29a      	uxth	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	80da      	strh	r2, [r3, #6]

}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006544:	2180      	movs	r1, #128	; 0x80
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fc96 	bl	8006e78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800654c:	2100      	movs	r1, #0
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fc92 	bl	8006e78 <USBD_LL_StallEP>
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d032      	beq.n	80065d8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 f834 	bl	80065e0 <USBD_GetLen>
 8006578:	4603      	mov	r3, r0
 800657a:	3301      	adds	r3, #1
 800657c:	b29b      	uxth	r3, r3
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006586:	7dfb      	ldrb	r3, [r7, #23]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	75fa      	strb	r2, [r7, #23]
 800658c:	461a      	mov	r2, r3
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	4413      	add	r3, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	7812      	ldrb	r2, [r2, #0]
 8006596:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006598:	7dfb      	ldrb	r3, [r7, #23]
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	75fa      	strb	r2, [r7, #23]
 800659e:	461a      	mov	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4413      	add	r3, r2
 80065a4:	2203      	movs	r2, #3
 80065a6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80065a8:	e012      	b.n	80065d0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	60fa      	str	r2, [r7, #12]
 80065b0:	7dfa      	ldrb	r2, [r7, #23]
 80065b2:	1c51      	adds	r1, r2, #1
 80065b4:	75f9      	strb	r1, [r7, #23]
 80065b6:	4611      	mov	r1, r2
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	440a      	add	r2, r1
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	75fa      	strb	r2, [r7, #23]
 80065c6:	461a      	mov	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4413      	add	r3, r2
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e8      	bne.n	80065aa <USBD_GetString+0x4e>
    }
  }
}
 80065d8:	bf00      	nop
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80065ec:	e005      	b.n	80065fa <USBD_GetLen+0x1a>
    {
        len++;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	3301      	adds	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3301      	adds	r3, #1
 80065f8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f5      	bne.n	80065ee <USBD_GetLen+0xe>
    }

    return len;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2202      	movs	r2, #2
 8006622:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006626:	88fa      	ldrh	r2, [r7, #6]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800662c:	88fa      	ldrh	r2, [r7, #6]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	2100      	movs	r1, #0
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 fce5 	bl	8007008 <USBD_LL_Transmit>

  return USBD_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006656:	88fb      	ldrh	r3, [r7, #6]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	2100      	movs	r1, #0
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fcd3 	bl	8007008 <USBD_LL_Transmit>

  return USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	4613      	mov	r3, r2
 8006678:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2203      	movs	r2, #3
 800667e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8006682:	88fa      	ldrh	r2, [r7, #6]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800668a:	88fa      	ldrh	r2, [r7, #6]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	2100      	movs	r1, #0
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 fcef 	bl	800707c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	2100      	movs	r1, #0
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 fcdd 	bl	800707c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2204      	movs	r2, #4
 80066d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80066dc:	2300      	movs	r3, #0
 80066de:	2200      	movs	r2, #0
 80066e0:	2100      	movs	r1, #0
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fc90 	bl	8007008 <USBD_LL_Transmit>

  return USBD_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2205      	movs	r2, #5
 80066fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006702:	2300      	movs	r3, #0
 8006704:	2200      	movs	r2, #0
 8006706:	2100      	movs	r1, #0
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fcb7 	bl	800707c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800671c:	2200      	movs	r2, #0
 800671e:	4912      	ldr	r1, [pc, #72]	; (8006768 <MX_USB_DEVICE_Init+0x50>)
 8006720:	4812      	ldr	r0, [pc, #72]	; (800676c <MX_USB_DEVICE_Init+0x54>)
 8006722:	f7fe ffbe 	bl	80056a2 <USBD_Init>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800672c:	f7f9 feba 	bl	80004a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006730:	490f      	ldr	r1, [pc, #60]	; (8006770 <MX_USB_DEVICE_Init+0x58>)
 8006732:	480e      	ldr	r0, [pc, #56]	; (800676c <MX_USB_DEVICE_Init+0x54>)
 8006734:	f7fe ffe0 	bl	80056f8 <USBD_RegisterClass>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800673e:	f7f9 feb1 	bl	80004a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006742:	490c      	ldr	r1, [pc, #48]	; (8006774 <MX_USB_DEVICE_Init+0x5c>)
 8006744:	4809      	ldr	r0, [pc, #36]	; (800676c <MX_USB_DEVICE_Init+0x54>)
 8006746:	f7fe ff3d 	bl	80055c4 <USBD_CDC_RegisterInterface>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006750:	f7f9 fea8 	bl	80004a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006754:	4805      	ldr	r0, [pc, #20]	; (800676c <MX_USB_DEVICE_Init+0x54>)
 8006756:	f7fe ffe9 	bl	800572c <USBD_Start>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006760:	f7f9 fea0 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006764:	bf00      	nop
 8006766:	bd80      	pop	{r7, pc}
 8006768:	2000012c 	.word	0x2000012c
 800676c:	20000434 	.word	0x20000434
 8006770:	20000018 	.word	0x20000018
 8006774:	2000011c 	.word	0x2000011c

08006778 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800677c:	2200      	movs	r2, #0
 800677e:	4905      	ldr	r1, [pc, #20]	; (8006794 <CDC_Init_FS+0x1c>)
 8006780:	4805      	ldr	r0, [pc, #20]	; (8006798 <CDC_Init_FS+0x20>)
 8006782:	f7fe ff36 	bl	80055f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006786:	4905      	ldr	r1, [pc, #20]	; (800679c <CDC_Init_FS+0x24>)
 8006788:	4803      	ldr	r0, [pc, #12]	; (8006798 <CDC_Init_FS+0x20>)
 800678a:	f7fe ff4c 	bl	8005626 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800678e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006790:	4618      	mov	r0, r3
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20000ab8 	.word	0x20000ab8
 8006798:	20000434 	.word	0x20000434
 800679c:	200006d0 	.word	0x200006d0

080067a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80067a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	4603      	mov	r3, r0
 80067b8:	6039      	str	r1, [r7, #0]
 80067ba:	71fb      	strb	r3, [r7, #7]
 80067bc:	4613      	mov	r3, r2
 80067be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	2b23      	cmp	r3, #35	; 0x23
 80067c4:	d84a      	bhi.n	800685c <CDC_Control_FS+0xac>
 80067c6:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <CDC_Control_FS+0x1c>)
 80067c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067cc:	0800685d 	.word	0x0800685d
 80067d0:	0800685d 	.word	0x0800685d
 80067d4:	0800685d 	.word	0x0800685d
 80067d8:	0800685d 	.word	0x0800685d
 80067dc:	0800685d 	.word	0x0800685d
 80067e0:	0800685d 	.word	0x0800685d
 80067e4:	0800685d 	.word	0x0800685d
 80067e8:	0800685d 	.word	0x0800685d
 80067ec:	0800685d 	.word	0x0800685d
 80067f0:	0800685d 	.word	0x0800685d
 80067f4:	0800685d 	.word	0x0800685d
 80067f8:	0800685d 	.word	0x0800685d
 80067fc:	0800685d 	.word	0x0800685d
 8006800:	0800685d 	.word	0x0800685d
 8006804:	0800685d 	.word	0x0800685d
 8006808:	0800685d 	.word	0x0800685d
 800680c:	0800685d 	.word	0x0800685d
 8006810:	0800685d 	.word	0x0800685d
 8006814:	0800685d 	.word	0x0800685d
 8006818:	0800685d 	.word	0x0800685d
 800681c:	0800685d 	.word	0x0800685d
 8006820:	0800685d 	.word	0x0800685d
 8006824:	0800685d 	.word	0x0800685d
 8006828:	0800685d 	.word	0x0800685d
 800682c:	0800685d 	.word	0x0800685d
 8006830:	0800685d 	.word	0x0800685d
 8006834:	0800685d 	.word	0x0800685d
 8006838:	0800685d 	.word	0x0800685d
 800683c:	0800685d 	.word	0x0800685d
 8006840:	0800685d 	.word	0x0800685d
 8006844:	0800685d 	.word	0x0800685d
 8006848:	0800685d 	.word	0x0800685d
 800684c:	0800685d 	.word	0x0800685d
 8006850:	0800685d 	.word	0x0800685d
 8006854:	0800685d 	.word	0x0800685d
 8006858:	0800685d 	.word	0x0800685d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800685c:	bf00      	nop
  }

  return (USBD_OK);
 800685e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4805      	ldr	r0, [pc, #20]	; (8006890 <CDC_Receive_FS+0x24>)
 800687a:	f7fe fed4 	bl	8005626 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800687e:	4804      	ldr	r0, [pc, #16]	; (8006890 <CDC_Receive_FS+0x24>)
 8006880:	f7fe fee5 	bl	800564e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006884:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000434 	.word	0x20000434

08006894 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	6039      	str	r1, [r7, #0]
 800689e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2212      	movs	r2, #18
 80068a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80068a6:	4b03      	ldr	r3, [pc, #12]	; (80068b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	2000014c 	.word	0x2000014c

080068b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	6039      	str	r1, [r7, #0]
 80068c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2204      	movs	r2, #4
 80068c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80068ca:	4b03      	ldr	r3, [pc, #12]	; (80068d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	2000016c 	.word	0x2000016c

080068dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	6039      	str	r1, [r7, #0]
 80068e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d105      	bne.n	80068fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	4907      	ldr	r1, [pc, #28]	; (8006910 <USBD_FS_ProductStrDescriptor+0x34>)
 80068f2:	4808      	ldr	r0, [pc, #32]	; (8006914 <USBD_FS_ProductStrDescriptor+0x38>)
 80068f4:	f7ff fe32 	bl	800655c <USBD_GetString>
 80068f8:	e004      	b.n	8006904 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	4904      	ldr	r1, [pc, #16]	; (8006910 <USBD_FS_ProductStrDescriptor+0x34>)
 80068fe:	4805      	ldr	r0, [pc, #20]	; (8006914 <USBD_FS_ProductStrDescriptor+0x38>)
 8006900:	f7ff fe2c 	bl	800655c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006904:	4b02      	ldr	r3, [pc, #8]	; (8006910 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20000ea0 	.word	0x20000ea0
 8006914:	08007230 	.word	0x08007230

08006918 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	6039      	str	r1, [r7, #0]
 8006922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	4904      	ldr	r1, [pc, #16]	; (8006938 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006928:	4804      	ldr	r0, [pc, #16]	; (800693c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800692a:	f7ff fe17 	bl	800655c <USBD_GetString>
  return USBD_StrDesc;
 800692e:	4b02      	ldr	r3, [pc, #8]	; (8006938 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000ea0 	.word	0x20000ea0
 800693c:	08007248 	.word	0x08007248

08006940 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	6039      	str	r1, [r7, #0]
 800694a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	221a      	movs	r2, #26
 8006950:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006952:	f000 f855 	bl	8006a00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006956:	4b02      	ldr	r3, [pc, #8]	; (8006960 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20000170 	.word	0x20000170

08006964 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	4603      	mov	r3, r0
 800696c:	6039      	str	r1, [r7, #0]
 800696e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d105      	bne.n	8006982 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	4907      	ldr	r1, [pc, #28]	; (8006998 <USBD_FS_ConfigStrDescriptor+0x34>)
 800697a:	4808      	ldr	r0, [pc, #32]	; (800699c <USBD_FS_ConfigStrDescriptor+0x38>)
 800697c:	f7ff fdee 	bl	800655c <USBD_GetString>
 8006980:	e004      	b.n	800698c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	4904      	ldr	r1, [pc, #16]	; (8006998 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006986:	4805      	ldr	r0, [pc, #20]	; (800699c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006988:	f7ff fde8 	bl	800655c <USBD_GetString>
  }
  return USBD_StrDesc;
 800698c:	4b02      	ldr	r3, [pc, #8]	; (8006998 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20000ea0 	.word	0x20000ea0
 800699c:	0800725c 	.word	0x0800725c

080069a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	6039      	str	r1, [r7, #0]
 80069aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d105      	bne.n	80069be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	4907      	ldr	r1, [pc, #28]	; (80069d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80069b6:	4808      	ldr	r0, [pc, #32]	; (80069d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069b8:	f7ff fdd0 	bl	800655c <USBD_GetString>
 80069bc:	e004      	b.n	80069c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	4904      	ldr	r1, [pc, #16]	; (80069d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80069c2:	4805      	ldr	r0, [pc, #20]	; (80069d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069c4:	f7ff fdca 	bl	800655c <USBD_GetString>
  }
  return USBD_StrDesc;
 80069c8:	4b02      	ldr	r3, [pc, #8]	; (80069d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20000ea0 	.word	0x20000ea0
 80069d8:	08007268 	.word	0x08007268

080069dc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	6039      	str	r1, [r7, #0]
 80069e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	220c      	movs	r2, #12
 80069ec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80069ee:	4b03      	ldr	r3, [pc, #12]	; (80069fc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	20000160 	.word	0x20000160

08006a00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a06:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <Get_SerialNum+0x44>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <Get_SerialNum+0x48>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a12:	4b0e      	ldr	r3, [pc, #56]	; (8006a4c <Get_SerialNum+0x4c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a26:	2208      	movs	r2, #8
 8006a28:	4909      	ldr	r1, [pc, #36]	; (8006a50 <Get_SerialNum+0x50>)
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 f814 	bl	8006a58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a30:	2204      	movs	r2, #4
 8006a32:	4908      	ldr	r1, [pc, #32]	; (8006a54 <Get_SerialNum+0x54>)
 8006a34:	68b8      	ldr	r0, [r7, #8]
 8006a36:	f000 f80f 	bl	8006a58 <IntToUnicode>
  }
}
 8006a3a:	bf00      	nop
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	1fff7590 	.word	0x1fff7590
 8006a48:	1fff7594 	.word	0x1fff7594
 8006a4c:	1fff7598 	.word	0x1fff7598
 8006a50:	20000172 	.word	0x20000172
 8006a54:	20000182 	.word	0x20000182

08006a58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	4613      	mov	r3, r2
 8006a64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	75fb      	strb	r3, [r7, #23]
 8006a6e:	e027      	b.n	8006ac0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	0f1b      	lsrs	r3, r3, #28
 8006a74:	2b09      	cmp	r3, #9
 8006a76:	d80b      	bhi.n	8006a90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	0f1b      	lsrs	r3, r3, #28
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	4619      	mov	r1, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	440b      	add	r3, r1
 8006a88:	3230      	adds	r2, #48	; 0x30
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	e00a      	b.n	8006aa6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	0f1b      	lsrs	r3, r3, #28
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	440b      	add	r3, r1
 8006aa0:	3237      	adds	r2, #55	; 0x37
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	3301      	adds	r3, #1
 8006abe:	75fb      	strb	r3, [r7, #23]
 8006ac0:	7dfa      	ldrb	r2, [r7, #23]
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d3d3      	bcc.n	8006a70 <IntToUnicode+0x18>
  }
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a0d      	ldr	r2, [pc, #52]	; (8006b18 <HAL_PCD_MspInit+0x44>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d113      	bne.n	8006b0e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	; (8006b1c <HAL_PCD_MspInit+0x48>)
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aea:	4a0c      	ldr	r2, [pc, #48]	; (8006b1c <HAL_PCD_MspInit+0x48>)
 8006aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006af0:	6593      	str	r3, [r2, #88]	; 0x58
 8006af2:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <HAL_PCD_MspInit+0x48>)
 8006af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006afe:	2200      	movs	r2, #0
 8006b00:	2100      	movs	r1, #0
 8006b02:	2043      	movs	r0, #67	; 0x43
 8006b04:	f7f9 ff53 	bl	80009ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006b08:	2043      	movs	r0, #67	; 0x43
 8006b0a:	f7f9 ff6c 	bl	80009e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	40006800 	.word	0x40006800
 8006b1c:	40021000 	.word	0x40021000

08006b20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006b34:	4619      	mov	r1, r3
 8006b36:	4610      	mov	r0, r2
 8006b38:	f7fe fe41 	bl	80057be <USBD_LL_SetupStage>
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8006b56:	78fb      	ldrb	r3, [r7, #3]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	015b      	lsls	r3, r3, #5
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	4619      	mov	r1, r3
 8006b68:	f7fe fe74 	bl	8005854 <USBD_LL_DataOutStage>
}
 8006b6c:	bf00      	nop
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	015b      	lsls	r3, r3, #5
 8006b8c:	4413      	add	r3, r2
 8006b8e:	333c      	adds	r3, #60	; 0x3c
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	4619      	mov	r1, r3
 8006b96:	f7fe fece 	bl	8005936 <USBD_LL_DataInStage>
}
 8006b9a:	bf00      	nop
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe ffdc 	bl	8005b6e <USBD_LL_SOF>
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d001      	beq.n	8006bd6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006bd2:	f7f9 fc67 	bl	80004a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006bdc:	7bfa      	ldrb	r2, [r7, #15]
 8006bde:	4611      	mov	r1, r2
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fe ff8e 	bl	8005b02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fe ff47 	bl	8005a80 <USBD_LL_Reset>
}
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
	...

08006bfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fe ff89 	bl	8005b22 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c18:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <HAL_PCD_SuspendCallback+0x30>)
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	4a03      	ldr	r2, [pc, #12]	; (8006c2c <HAL_PCD_SuspendCallback+0x30>)
 8006c1e:	f043 0306 	orr.w	r3, r3, #6
 8006c22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	e000ed00 	.word	0xe000ed00

08006c30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c40:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <HAL_PCD_ResumeCallback+0x34>)
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	4a07      	ldr	r2, [pc, #28]	; (8006c64 <HAL_PCD_ResumeCallback+0x34>)
 8006c46:	f023 0306 	bic.w	r3, r3, #6
 8006c4a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006c4c:	f000 fab2 	bl	80071b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe ff78 	bl	8005b4c <USBD_LL_Resume>
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	e000ed00 	.word	0xe000ed00

08006c68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8006c70:	f7fb f854 	bl	8001d1c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006c74:	4a2b      	ldr	r2, [pc, #172]	; (8006d24 <USBD_LL_Init+0xbc>)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a29      	ldr	r2, [pc, #164]	; (8006d24 <USBD_LL_Init+0xbc>)
 8006c80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8006c84:	4b27      	ldr	r3, [pc, #156]	; (8006d24 <USBD_LL_Init+0xbc>)
 8006c86:	4a28      	ldr	r2, [pc, #160]	; (8006d28 <USBD_LL_Init+0xc0>)
 8006c88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006c8a:	4b26      	ldr	r3, [pc, #152]	; (8006d24 <USBD_LL_Init+0xbc>)
 8006c8c:	2208      	movs	r2, #8
 8006c8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006c90:	4b24      	ldr	r3, [pc, #144]	; (8006d24 <USBD_LL_Init+0xbc>)
 8006c92:	2202      	movs	r2, #2
 8006c94:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c96:	4b23      	ldr	r3, [pc, #140]	; (8006d24 <USBD_LL_Init+0xbc>)
 8006c98:	2202      	movs	r2, #2
 8006c9a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006c9c:	4b21      	ldr	r3, [pc, #132]	; (8006d24 <USBD_LL_Init+0xbc>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006ca2:	4b20      	ldr	r3, [pc, #128]	; (8006d24 <USBD_LL_Init+0xbc>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006ca8:	4b1e      	ldr	r3, [pc, #120]	; (8006d24 <USBD_LL_Init+0xbc>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006cae:	4b1d      	ldr	r3, [pc, #116]	; (8006d24 <USBD_LL_Init+0xbc>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006cb4:	481b      	ldr	r0, [pc, #108]	; (8006d24 <USBD_LL_Init+0xbc>)
 8006cb6:	f7fa f883 	bl	8000dc0 <HAL_PCD_Init>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8006cc0:	f7f9 fbf0 	bl	80004a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006cca:	2318      	movs	r3, #24
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2100      	movs	r1, #0
 8006cd0:	f7fa ff58 	bl	8001b84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006cda:	2358      	movs	r3, #88	; 0x58
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2180      	movs	r1, #128	; 0x80
 8006ce0:	f7fa ff50 	bl	8001b84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006cea:	23c0      	movs	r3, #192	; 0xc0
 8006cec:	2200      	movs	r2, #0
 8006cee:	2181      	movs	r1, #129	; 0x81
 8006cf0:	f7fa ff48 	bl	8001b84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006cfa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2101      	movs	r1, #1
 8006d02:	f7fa ff3f 	bl	8001b84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d10:	2200      	movs	r2, #0
 8006d12:	2182      	movs	r1, #130	; 0x82
 8006d14:	f7fa ff36 	bl	8001b84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200010a0 	.word	0x200010a0
 8006d28:	40006800 	.word	0x40006800

08006d2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fa f924 	bl	8000f90 <HAL_PCD_Start>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d816      	bhi.n	8006d80 <USBD_LL_Start+0x54>
 8006d52:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <USBD_LL_Start+0x2c>)
 8006d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d58:	08006d69 	.word	0x08006d69
 8006d5c:	08006d6f 	.word	0x08006d6f
 8006d60:	08006d75 	.word	0x08006d75
 8006d64:	08006d7b 	.word	0x08006d7b
    case HAL_OK :
      usb_status = USBD_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d6c:	e00b      	b.n	8006d86 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d6e:	2302      	movs	r3, #2
 8006d70:	73fb      	strb	r3, [r7, #15]
    break;
 8006d72:	e008      	b.n	8006d86 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d74:	2301      	movs	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]
    break;
 8006d78:	e005      	b.n	8006d86 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d7e:	e002      	b.n	8006d86 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006d80:	2302      	movs	r3, #2
 8006d82:	73fb      	strb	r3, [r7, #15]
    break;
 8006d84:	bf00      	nop
  }
  return usb_status;
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	4608      	mov	r0, r1
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4603      	mov	r3, r0
 8006da0:	70fb      	strb	r3, [r7, #3]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70bb      	strb	r3, [r7, #2]
 8006da6:	4613      	mov	r3, r2
 8006da8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006db8:	78bb      	ldrb	r3, [r7, #2]
 8006dba:	883a      	ldrh	r2, [r7, #0]
 8006dbc:	78f9      	ldrb	r1, [r7, #3]
 8006dbe:	f7fa fa87 	bl	80012d0 <HAL_PCD_EP_Open>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d817      	bhi.n	8006dfc <USBD_LL_OpenEP+0x6c>
 8006dcc:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <USBD_LL_OpenEP+0x44>)
 8006dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd2:	bf00      	nop
 8006dd4:	08006de5 	.word	0x08006de5
 8006dd8:	08006deb 	.word	0x08006deb
 8006ddc:	08006df1 	.word	0x08006df1
 8006de0:	08006df7 	.word	0x08006df7
    case HAL_OK :
      usb_status = USBD_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73fb      	strb	r3, [r7, #15]
    break;
 8006de8:	e00b      	b.n	8006e02 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006dea:	2302      	movs	r3, #2
 8006dec:	73fb      	strb	r3, [r7, #15]
    break;
 8006dee:	e008      	b.n	8006e02 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006df0:	2301      	movs	r3, #1
 8006df2:	73fb      	strb	r3, [r7, #15]
    break;
 8006df4:	e005      	b.n	8006e02 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006df6:	2302      	movs	r3, #2
 8006df8:	73fb      	strb	r3, [r7, #15]
    break;
 8006dfa:	e002      	b.n	8006e02 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8006e00:	bf00      	nop
  }
  return usb_status;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006e26:	78fa      	ldrb	r2, [r7, #3]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fa fab0 	bl	8001390 <HAL_PCD_EP_Close>
 8006e30:	4603      	mov	r3, r0
 8006e32:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d816      	bhi.n	8006e68 <USBD_LL_CloseEP+0x5c>
 8006e3a:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <USBD_LL_CloseEP+0x34>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006e51 	.word	0x08006e51
 8006e44:	08006e57 	.word	0x08006e57
 8006e48:	08006e5d 	.word	0x08006e5d
 8006e4c:	08006e63 	.word	0x08006e63
    case HAL_OK :
      usb_status = USBD_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]
    break;
 8006e54:	e00b      	b.n	8006e6e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e56:	2302      	movs	r3, #2
 8006e58:	73fb      	strb	r3, [r7, #15]
    break;
 8006e5a:	e008      	b.n	8006e6e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e60:	e005      	b.n	8006e6e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e62:	2302      	movs	r3, #2
 8006e64:	73fb      	strb	r3, [r7, #15]
    break;
 8006e66:	e002      	b.n	8006e6e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e6c:	bf00      	nop
  }
  return usb_status;  
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fa fb44 	bl	8001524 <HAL_PCD_EP_SetStall>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d816      	bhi.n	8006ed4 <USBD_LL_StallEP+0x5c>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <USBD_LL_StallEP+0x34>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ebd 	.word	0x08006ebd
 8006eb0:	08006ec3 	.word	0x08006ec3
 8006eb4:	08006ec9 	.word	0x08006ec9
 8006eb8:	08006ecf 	.word	0x08006ecf
    case HAL_OK :
      usb_status = USBD_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec0:	e00b      	b.n	8006eda <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec6:	e008      	b.n	8006eda <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	73fb      	strb	r3, [r7, #15]
    break;
 8006ecc:	e005      	b.n	8006eda <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ece:	2302      	movs	r3, #2
 8006ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ed2:	e002      	b.n	8006eda <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ed8:	bf00      	nop
  }
  return usb_status;  
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006efe:	78fa      	ldrb	r2, [r7, #3]
 8006f00:	4611      	mov	r1, r2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fa fb68 	bl	80015d8 <HAL_PCD_EP_ClrStall>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d816      	bhi.n	8006f40 <USBD_LL_ClearStallEP+0x5c>
 8006f12:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <USBD_LL_ClearStallEP+0x34>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f29 	.word	0x08006f29
 8006f1c:	08006f2f 	.word	0x08006f2f
 8006f20:	08006f35 	.word	0x08006f35
 8006f24:	08006f3b 	.word	0x08006f3b
    case HAL_OK :
      usb_status = USBD_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f2c:	e00b      	b.n	8006f46 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f2e:	2302      	movs	r3, #2
 8006f30:	73fb      	strb	r3, [r7, #15]
    break;
 8006f32:	e008      	b.n	8006f46 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f34:	2301      	movs	r3, #1
 8006f36:	73fb      	strb	r3, [r7, #15]
    break;
 8006f38:	e005      	b.n	8006f46 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f3e:	e002      	b.n	8006f46 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006f40:	2302      	movs	r3, #2
 8006f42:	73fb      	strb	r3, [r7, #15]
    break;
 8006f44:	bf00      	nop
  }
  return usb_status; 
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006f62:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	da08      	bge.n	8006f7e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	015b      	lsls	r3, r3, #5
 8006f76:	4413      	add	r3, r2
 8006f78:	332a      	adds	r3, #42	; 0x2a
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	e008      	b.n	8006f90 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	015b      	lsls	r3, r3, #5
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006f8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fa f963 	bl	8001286 <HAL_PCD_SetAddress>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d816      	bhi.n	8006ff8 <USBD_LL_SetUSBAddress+0x5c>
 8006fca:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <USBD_LL_SetUSBAddress+0x34>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08006fe1 	.word	0x08006fe1
 8006fd4:	08006fe7 	.word	0x08006fe7
 8006fd8:	08006fed 	.word	0x08006fed
 8006fdc:	08006ff3 	.word	0x08006ff3
    case HAL_OK :
      usb_status = USBD_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8006fe4:	e00b      	b.n	8006ffe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	73fb      	strb	r3, [r7, #15]
    break;
 8006fea:	e008      	b.n	8006ffe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fec:	2301      	movs	r3, #1
 8006fee:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff0:	e005      	b.n	8006ffe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff6:	e002      	b.n	8006ffe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8006ffc:	bf00      	nop
  }
  return usb_status;  
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	607a      	str	r2, [r7, #4]
 8007012:	461a      	mov	r2, r3
 8007014:	460b      	mov	r3, r1
 8007016:	72fb      	strb	r3, [r7, #11]
 8007018:	4613      	mov	r3, r2
 800701a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800702a:	893b      	ldrh	r3, [r7, #8]
 800702c:	7af9      	ldrb	r1, [r7, #11]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	f7fa fa3f 	bl	80014b2 <HAL_PCD_EP_Transmit>
 8007034:	4603      	mov	r3, r0
 8007036:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007038:	7dbb      	ldrb	r3, [r7, #22]
 800703a:	2b03      	cmp	r3, #3
 800703c:	d816      	bhi.n	800706c <USBD_LL_Transmit+0x64>
 800703e:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <USBD_LL_Transmit+0x3c>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007055 	.word	0x08007055
 8007048:	0800705b 	.word	0x0800705b
 800704c:	08007061 	.word	0x08007061
 8007050:	08007067 	.word	0x08007067
    case HAL_OK :
      usb_status = USBD_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	75fb      	strb	r3, [r7, #23]
    break;
 8007058:	e00b      	b.n	8007072 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800705a:	2302      	movs	r3, #2
 800705c:	75fb      	strb	r3, [r7, #23]
    break;
 800705e:	e008      	b.n	8007072 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007060:	2301      	movs	r3, #1
 8007062:	75fb      	strb	r3, [r7, #23]
    break;
 8007064:	e005      	b.n	8007072 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007066:	2302      	movs	r3, #2
 8007068:	75fb      	strb	r3, [r7, #23]
    break;
 800706a:	e002      	b.n	8007072 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800706c:	2302      	movs	r3, #2
 800706e:	75fb      	strb	r3, [r7, #23]
    break;
 8007070:	bf00      	nop
  }
  return usb_status;    
 8007072:	7dfb      	ldrb	r3, [r7, #23]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	461a      	mov	r2, r3
 8007088:	460b      	mov	r3, r1
 800708a:	72fb      	strb	r3, [r7, #11]
 800708c:	4613      	mov	r3, r2
 800708e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800709e:	893b      	ldrh	r3, [r7, #8]
 80070a0:	7af9      	ldrb	r1, [r7, #11]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	f7fa f9b6 	bl	8001414 <HAL_PCD_EP_Receive>
 80070a8:	4603      	mov	r3, r0
 80070aa:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80070ac:	7dbb      	ldrb	r3, [r7, #22]
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d816      	bhi.n	80070e0 <USBD_LL_PrepareReceive+0x64>
 80070b2:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <USBD_LL_PrepareReceive+0x3c>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	080070c9 	.word	0x080070c9
 80070bc:	080070cf 	.word	0x080070cf
 80070c0:	080070d5 	.word	0x080070d5
 80070c4:	080070db 	.word	0x080070db
    case HAL_OK :
      usb_status = USBD_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	75fb      	strb	r3, [r7, #23]
    break;
 80070cc:	e00b      	b.n	80070e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070ce:	2302      	movs	r3, #2
 80070d0:	75fb      	strb	r3, [r7, #23]
    break;
 80070d2:	e008      	b.n	80070e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070d4:	2301      	movs	r3, #1
 80070d6:	75fb      	strb	r3, [r7, #23]
    break;
 80070d8:	e005      	b.n	80070e6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070da:	2302      	movs	r3, #2
 80070dc:	75fb      	strb	r3, [r7, #23]
    break;
 80070de:	e002      	b.n	80070e6 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80070e0:	2302      	movs	r3, #2
 80070e2:	75fb      	strb	r3, [r7, #23]
    break;
 80070e4:	bf00      	nop
  }
  return usb_status; 
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007102:	78fa      	ldrb	r2, [r7, #3]
 8007104:	4611      	mov	r1, r2
 8007106:	4618      	mov	r0, r3
 8007108:	f7fa f9be 	bl	8001488 <HAL_PCD_EP_GetRxCount>
 800710c:	4603      	mov	r3, r0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <HAL_PCDEx_LPM_Callback+0x18>
 800712a:	2b01      	cmp	r3, #1
 800712c:	d013      	beq.n	8007156 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800712e:	e023      	b.n	8007178 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d007      	beq.n	8007148 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007138:	f000 f83c 	bl	80071b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800713c:	4b10      	ldr	r3, [pc, #64]	; (8007180 <HAL_PCDEx_LPM_Callback+0x68>)
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	4a0f      	ldr	r2, [pc, #60]	; (8007180 <HAL_PCDEx_LPM_Callback+0x68>)
 8007142:	f023 0306 	bic.w	r3, r3, #6
 8007146:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fcfc 	bl	8005b4c <USBD_LL_Resume>
    break;
 8007154:	e010      	b.n	8007178 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe fce0 	bl	8005b22 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800716a:	4b05      	ldr	r3, [pc, #20]	; (8007180 <HAL_PCDEx_LPM_Callback+0x68>)
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	4a04      	ldr	r2, [pc, #16]	; (8007180 <HAL_PCDEx_LPM_Callback+0x68>)
 8007170:	f043 0306 	orr.w	r3, r3, #6
 8007174:	6113      	str	r3, [r2, #16]
    break;   
 8007176:	bf00      	nop
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	e000ed00 	.word	0xe000ed00

08007184 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800718c:	4b03      	ldr	r3, [pc, #12]	; (800719c <USBD_static_malloc+0x18>)
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	200001ac 	.word	0x200001ac

080071a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80071b8:	f7f9 f884 	bl	80002c4 <SystemClock_Config>
}
 80071bc:	bf00      	nop
 80071be:	bd80      	pop	{r7, pc}

080071c0 <__libc_init_array>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	4e0d      	ldr	r6, [pc, #52]	; (80071f8 <__libc_init_array+0x38>)
 80071c4:	4c0d      	ldr	r4, [pc, #52]	; (80071fc <__libc_init_array+0x3c>)
 80071c6:	1ba4      	subs	r4, r4, r6
 80071c8:	10a4      	asrs	r4, r4, #2
 80071ca:	2500      	movs	r5, #0
 80071cc:	42a5      	cmp	r5, r4
 80071ce:	d109      	bne.n	80071e4 <__libc_init_array+0x24>
 80071d0:	4e0b      	ldr	r6, [pc, #44]	; (8007200 <__libc_init_array+0x40>)
 80071d2:	4c0c      	ldr	r4, [pc, #48]	; (8007204 <__libc_init_array+0x44>)
 80071d4:	f000 f820 	bl	8007218 <_init>
 80071d8:	1ba4      	subs	r4, r4, r6
 80071da:	10a4      	asrs	r4, r4, #2
 80071dc:	2500      	movs	r5, #0
 80071de:	42a5      	cmp	r5, r4
 80071e0:	d105      	bne.n	80071ee <__libc_init_array+0x2e>
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071e8:	4798      	blx	r3
 80071ea:	3501      	adds	r5, #1
 80071ec:	e7ee      	b.n	80071cc <__libc_init_array+0xc>
 80071ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071f2:	4798      	blx	r3
 80071f4:	3501      	adds	r5, #1
 80071f6:	e7f2      	b.n	80071de <__libc_init_array+0x1e>
 80071f8:	080072b8 	.word	0x080072b8
 80071fc:	080072b8 	.word	0x080072b8
 8007200:	080072b8 	.word	0x080072b8
 8007204:	080072bc 	.word	0x080072bc

08007208 <memset>:
 8007208:	4402      	add	r2, r0
 800720a:	4603      	mov	r3, r0
 800720c:	4293      	cmp	r3, r2
 800720e:	d100      	bne.n	8007212 <memset+0xa>
 8007210:	4770      	bx	lr
 8007212:	f803 1b01 	strb.w	r1, [r3], #1
 8007216:	e7f9      	b.n	800720c <memset+0x4>

08007218 <_init>:
 8007218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721a:	bf00      	nop
 800721c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721e:	bc08      	pop	{r3}
 8007220:	469e      	mov	lr, r3
 8007222:	4770      	bx	lr

08007224 <_fini>:
 8007224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007226:	bf00      	nop
 8007228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722a:	bc08      	pop	{r3}
 800722c:	469e      	mov	lr, r3
 800722e:	4770      	bx	lr
