
sensor_board_rev3_working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d718  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800d8a8  0800d8a8  0001d8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daf8  0800daf8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800daf8  0800daf8  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800daf8  0800daf8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800daf8  0800daf8  0001daf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dafc  0800dafc  0001dafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800db00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cdd8  200001f8  0800dcf8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000cfd0  0800dcf8  0002cfd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032913  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ba3  00000000  00000000  00052b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020a8  00000000  00000000  000586e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e00  00000000  00000000  0005a788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029e84  00000000  00000000  0005c588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002014c  00000000  00000000  0008640c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4327  00000000  00000000  000a6558  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018a87f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000883c  00000000  00000000  0018a8fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d890 	.word	0x0800d890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800d890 	.word	0x0800d890

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2uiz>:
 80009bc:	004a      	lsls	r2, r1, #1
 80009be:	d211      	bcs.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d211      	bcs.n	80009ea <__aeabi_d2uiz+0x2e>
 80009c6:	d50d      	bpl.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d40e      	bmi.n	80009f0 <__aeabi_d2uiz+0x34>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	fa23 f002 	lsr.w	r0, r3, r2
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d102      	bne.n	80009f6 <__aeabi_d2uiz+0x3a>
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	4770      	bx	lr
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	4770      	bx	lr

080009fc <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	461a      	mov	r2, r3
 8000a08:	460b      	mov	r3, r1
 8000a0a:	72fb      	strb	r3, [r7, #11]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8000a10:	7afb      	ldrb	r3, [r7, #11]
 8000a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	889b      	ldrh	r3, [r3, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	4619      	mov	r1, r3
 8000a26:	f002 f803 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6898      	ldr	r0, [r3, #8]
 8000a2e:	f107 010b 	add.w	r1, r7, #11
 8000a32:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a36:	2201      	movs	r2, #1
 8000a38:	f004 feb8 	bl	80057ac <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	6898      	ldr	r0, [r3, #8]
 8000a40:	893a      	ldrh	r2, [r7, #8]
 8000a42:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f005 f816 	bl	8005a78 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	889b      	ldrh	r3, [r3, #4]
 8000a54:	2201      	movs	r2, #1
 8000a56:	4619      	mov	r1, r3
 8000a58:	f001 ffea 	bl	8002a30 <HAL_GPIO_WritePin>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	460b      	mov	r3, r1
 8000a72:	72fb      	strb	r3, [r7, #11]
 8000a74:	4613      	mov	r3, r2
 8000a76:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	889b      	ldrh	r3, [r3, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	f001 ffd4 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6898      	ldr	r0, [r3, #8]
 8000a8c:	f107 010b 	add.w	r1, r7, #11
 8000a90:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000a94:	2201      	movs	r2, #1
 8000a96:	f004 fe89 	bl	80057ac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6898      	ldr	r0, [r3, #8]
 8000a9e:	893a      	ldrh	r2, [r7, #8]
 8000aa0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	f004 fe81 	bl	80057ac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	889b      	ldrh	r3, [r3, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f001 ffbb 	bl	8002a30 <HAL_GPIO_WritePin>
}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b084      	sub	sp, #16
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 8000ace:	2300      	movs	r3, #0
 8000ad0:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 8000ad2:	2381      	movs	r3, #129	; 0x81
 8000ad4:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 8000ad6:	f107 020f 	add.w	r2, r7, #15
 8000ada:	2301      	movs	r3, #1
 8000adc:	216b      	movs	r1, #107	; 0x6b
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffc0 	bl	8000a64 <_icm_write_bytes>
	HAL_Delay(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f001 fb7d 	bl	80021e4 <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 8000aee:	f107 020f 	add.w	r2, r7, #15
 8000af2:	2301      	movs	r3, #1
 8000af4:	216b      	movs	r1, #107	; 0x6b
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ffb4 	bl	8000a64 <_icm_write_bytes>
    HAL_Delay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f001 fb71 	bl	80021e4 <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 8000b02:	f107 020c 	add.w	r2, r7, #12
 8000b06:	2301      	movs	r3, #1
 8000b08:	2175      	movs	r1, #117	; 0x75
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ff76 	bl	80009fc <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8000b10:	7b3b      	ldrb	r3, [r7, #12]
 8000b12:	2bac      	cmp	r3, #172	; 0xac
 8000b14:	d001      	beq.n	8000b1a <icm20601_init+0x58>
 8000b16:	2300      	movs	r3, #0
 8000b18:	e093      	b.n	8000c42 <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 8000b1a:	233f      	movs	r3, #63	; 0x3f
 8000b1c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 8000b1e:	f107 020f 	add.w	r2, r7, #15
 8000b22:	2301      	movs	r3, #1
 8000b24:	216c      	movs	r1, #108	; 0x6c
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff9c 	bl	8000a64 <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8000b30:	f107 020f 	add.w	r2, r7, #15
 8000b34:	2301      	movs	r3, #1
 8000b36:	216a      	movs	r1, #106	; 0x6a
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff93 	bl	8000a64 <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 8000b3e:	2341      	movs	r3, #65	; 0x41
 8000b40:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8000b42:	f107 020f 	add.w	r2, r7, #15
 8000b46:	2301      	movs	r3, #1
 8000b48:	216a      	movs	r1, #106	; 0x6a
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff8a 	bl	8000a64 <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7b1b      	ldrb	r3, [r3, #12]
 8000b54:	2b08      	cmp	r3, #8
 8000b56:	d102      	bne.n	8000b5e <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 8000b58:	2308      	movs	r3, #8
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e002      	b.n	8000b64 <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	7b1b      	ldrb	r3, [r3, #12]
 8000b62:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 8000b64:	f107 020f 	add.w	r2, r7, #15
 8000b68:	2301      	movs	r3, #1
 8000b6a:	211d      	movs	r1, #29
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff79 	bl	8000a64 <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	7b5b      	ldrb	r3, [r3, #13]
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 8000b7c:	f107 020f 	add.w	r2, r7, #15
 8000b80:	2301      	movs	r3, #1
 8000b82:	211c      	movs	r1, #28
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff6d 	bl	8000a64 <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7b9b      	ldrb	r3, [r3, #14]
 8000b8e:	2b08      	cmp	r3, #8
 8000b90:	d119      	bne.n	8000bc6 <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 8000b92:	2300      	movs	r3, #0
 8000b94:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8000b96:	f107 020f 	add.w	r2, r7, #15
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	211a      	movs	r1, #26
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff60 	bl	8000a64 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7bdb      	ldrb	r3, [r3, #15]
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8000bb6:	f107 020f 	add.w	r2, r7, #15
 8000bba:	2301      	movs	r3, #1
 8000bbc:	211b      	movs	r1, #27
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff50 	bl	8000a64 <_icm_write_bytes>
 8000bc4:	e033      	b.n	8000c2e <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7b9b      	ldrb	r3, [r3, #14]
 8000bca:	2b09      	cmp	r3, #9
 8000bcc:	d119      	bne.n	8000c02 <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8000bd2:	f107 020f 	add.w	r2, r7, #15
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	211a      	movs	r1, #26
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff42 	bl	8000a64 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7bdb      	ldrb	r3, [r3, #15]
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8000bf2:	f107 020f 	add.w	r2, r7, #15
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	211b      	movs	r1, #27
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff32 	bl	8000a64 <_icm_write_bytes>
 8000c00:	e015      	b.n	8000c2e <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7b9b      	ldrb	r3, [r3, #14]
 8000c06:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8000c08:	f107 020f 	add.w	r2, r7, #15
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	211a      	movs	r1, #26
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff27 	bl	8000a64 <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7bdb      	ldrb	r3, [r3, #15]
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8000c20:	f107 020f 	add.w	r2, r7, #15
 8000c24:	2301      	movs	r3, #1
 8000c26:	211b      	movs	r1, #27
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff1b 	bl	8000a64 <_icm_write_bytes>
     }


    tmp = 0x00;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 8000c32:	f107 020f 	add.w	r2, r7, #15
 8000c36:	2301      	movs	r3, #1
 8000c38:	216c      	movs	r1, #108	; 0x6c
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ff12 	bl	8000a64 <_icm_write_bytes>


    return 1;
 8000c40:	2301      	movs	r3, #1
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 8000c5e:	f107 0208 	add.w	r2, r7, #8
 8000c62:	2306      	movs	r3, #6
 8000c64:	213b      	movs	r1, #59	; 0x3b
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fec8 	bl	80009fc <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 8000c6c:	7a3b      	ldrb	r3, [r7, #8]
 8000c6e:	b21a      	sxth	r2, r3
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	801a      	strh	r2, [r3, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	801a      	strh	r2, [r3, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c88:	7a7b      	ldrb	r3, [r7, #9]
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 8000c94:	7aba      	ldrb	r2, [r7, #10]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	b212      	sxth	r2, r2
 8000c9c:	801a      	strh	r2, [r3, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca6:	021a      	lsls	r2, r3, #8
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	3302      	adds	r3, #2
 8000cac:	b212      	sxth	r2, r2
 8000cae:	801a      	strh	r2, [r3, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000cb8:	7afb      	ldrb	r3, [r7, #11]
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	b212      	sxth	r2, r2
 8000cc4:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 8000cc6:	7b3a      	ldrb	r2, [r7, #12]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	3304      	adds	r3, #4
 8000ccc:	b212      	sxth	r2, r2
 8000cce:	801a      	strh	r2, [r3, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd8:	021a      	lsls	r2, r3, #8
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	b212      	sxth	r2, r2
 8000ce0:	801a      	strh	r2, [r3, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000cea:	7b7b      	ldrb	r3, [r7, #13]
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	b212      	sxth	r2, r2
 8000cf6:	801a      	strh	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 8000d14:	f107 0208 	add.w	r2, r7, #8
 8000d18:	2306      	movs	r3, #6
 8000d1a:	2143      	movs	r1, #67	; 0x43
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fe6d 	bl	80009fc <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 8000d22:	7a3b      	ldrb	r3, [r7, #8]
 8000d24:	b21a      	sxth	r2, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	801a      	strh	r2, [r3, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	801a      	strh	r2, [r3, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d3e:	7a7b      	ldrb	r3, [r7, #9]
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	4313      	orrs	r3, r2
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 8000d4a:	7aba      	ldrb	r2, [r7, #10]
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	3302      	adds	r3, #2
 8000d50:	b212      	sxth	r2, r2
 8000d52:	801a      	strh	r2, [r3, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	3302      	adds	r3, #2
 8000d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5c:	021a      	lsls	r2, r3, #8
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	3302      	adds	r3, #2
 8000d62:	b212      	sxth	r2, r2
 8000d64:	801a      	strh	r2, [r3, #0]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	3302      	adds	r3, #2
 8000d76:	430a      	orrs	r2, r1
 8000d78:	b212      	sxth	r2, r2
 8000d7a:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 8000d7c:	7b3a      	ldrb	r2, [r7, #12]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	3304      	adds	r3, #4
 8000d82:	b212      	sxth	r2, r2
 8000d84:	801a      	strh	r2, [r3, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d8e:	021a      	lsls	r2, r3, #8
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	3304      	adds	r3, #4
 8000d94:	b212      	sxth	r2, r2
 8000d96:	801a      	strh	r2, [r3, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000da0:	7b7b      	ldrb	r3, [r7, #13]
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	3304      	adds	r3, #4
 8000da8:	430a      	orrs	r2, r1
 8000daa:	b212      	sxth	r2, r2
 8000dac:	801a      	strh	r2, [r3, #0]
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b084      	sub	sp, #16
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 8000dc4:	f107 020c 	add.w	r2, r7, #12
 8000dc8:	2302      	movs	r3, #2
 8000dca:	2141      	movs	r1, #65	; 0x41
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fe15 	bl	80009fc <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 8000dd2:	7b3b      	ldrb	r3, [r7, #12]
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	801a      	strh	r2, [r3, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dee:	7b7b      	ldrb	r3, [r7, #13]
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	801a      	strh	r2, [r3, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	0000      	movs	r0, r0
 8000e04:	0000      	movs	r0, r0
	...

08000e08 <_get_conversion_ticks>:
    dst |= (src_low); \
  } while (0);

// *** Local functions *** //

uint32_t _get_conversion_ticks(struct ms5607_dev * dev){
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	uint32_t time;
	time = (BARO_CONVERSION_TIME_OSR_BASE * (dev->osr+1) * osKernelGetTickFreq()) / 1000;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7a1b      	ldrb	r3, [r3, #8]
 8000e14:	3301      	adds	r3, #1
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fb2c 	bl	8000474 <__aeabi_i2d>
 8000e1c:	a319      	add	r3, pc, #100	; (adr r3, 8000e84 <_get_conversion_ticks+0x7c>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff fb91 	bl	8000548 <__aeabi_dmul>
 8000e26:	4603      	mov	r3, r0
 8000e28:	460c      	mov	r4, r1
 8000e2a:	4625      	mov	r5, r4
 8000e2c:	461c      	mov	r4, r3
 8000e2e:	f008 fb8b 	bl	8009548 <osKernelGetTickFreq>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb0d 	bl	8000454 <__aeabi_ui2d>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4620      	mov	r0, r4
 8000e40:	4629      	mov	r1, r5
 8000e42:	f7ff fb81 	bl	8000548 <__aeabi_dmul>
 8000e46:	4603      	mov	r3, r0
 8000e48:	460c      	mov	r4, r1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	4621      	mov	r1, r4
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <_get_conversion_ticks+0x78>)
 8000e54:	f7ff fca2 	bl	800079c <__aeabi_ddiv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	460c      	mov	r4, r1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	4621      	mov	r1, r4
 8000e60:	f7ff fdac 	bl	80009bc <__aeabi_d2uiz>
 8000e64:	4603      	mov	r3, r0
 8000e66:	60fb      	str	r3, [r7, #12]
	if (time < 1) time = 1;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <_get_conversion_ticks+0x6a>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
	return time;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e7c:	f3af 8000 	nop.w
 8000e80:	408f4000 	.word	0x408f4000
 8000e84:	33333333 	.word	0x33333333
 8000e88:	3fe33333 	.word	0x3fe33333

08000e8c <_ms_read_bytes>:

// Read bytes
void _ms_read_bytes(struct ms5607_dev * dev, uint8_t command, uint8_t *pData, uint16_t size){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af02      	add	r7, sp, #8
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	461a      	mov	r2, r3
 8000e98:	460b      	mov	r3, r1
 8000e9a:	72fb      	strb	r3, [r7, #11]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->i2c_address, &command, 1, BARO_I2C_TIMEOUT);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	6858      	ldr	r0, [r3, #4]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b299      	uxth	r1, r3
 8000eaa:	f107 020b 	add.w	r2, r7, #11
 8000eae:	230a      	movs	r3, #10
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f001 fe64 	bl	8002b80 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->i2c_address, pData, size, BARO_I2C_TIMEOUT);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6858      	ldr	r0, [r3, #4]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b299      	uxth	r1, r3
 8000ec2:	893a      	ldrh	r2, [r7, #8]
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	f001 ff4c 	bl	8002d68 <HAL_I2C_Master_Receive>
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_ms_write_command>:

// Write command
void _ms_write_command(struct ms5607_dev * dev, uint8_t command){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->i2c_address, &command, 1, BARO_I2C_TIMEOUT);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6858      	ldr	r0, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b299      	uxth	r1, r3
 8000eee:	1cfa      	adds	r2, r7, #3
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f001 fe43 	bl	8002b80 <HAL_I2C_Master_Transmit>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_read_calibration>:

void _read_calibration(struct ms5607_dev * dev){
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; i++){
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	e038      	b.n	8000f82 <_read_calibration+0x80>
		uint8_t rec[2] = {0};
 8000f10:	2300      	movs	r3, #0
 8000f12:	813b      	strh	r3, [r7, #8]
		_ms_read_bytes(dev, COMMAND_PROM_READ_BASE+(2*(i+1)), rec, 2);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3351      	adds	r3, #81	; 0x51
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	b2d9      	uxtb	r1, r3
 8000f1e:	f107 0208 	add.w	r2, r7, #8
 8000f22:	2302      	movs	r3, #2
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffb1 	bl	8000e8c <_ms_read_bytes>
		UINT8_TO_UINT16(dev->coefficients[i],rec[0], rec[1]);
 8000f2a:	7a3b      	ldrb	r3, [r7, #8]
 8000f2c:	b299      	uxth	r1, r3
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3304      	adds	r3, #4
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	460a      	mov	r2, r1
 8000f3a:	805a      	strh	r2, [r3, #2]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3304      	adds	r3, #4
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	885b      	ldrh	r3, [r3, #2]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b299      	uxth	r1, r3
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3304      	adds	r3, #4
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	460a      	mov	r2, r1
 8000f58:	805a      	strh	r2, [r3, #2]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	885a      	ldrh	r2, [r3, #2]
 8000f66:	7a7b      	ldrb	r3, [r7, #9]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	b299      	uxth	r1, r3
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3304      	adds	r3, #4
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	460a      	mov	r2, r1
 8000f7a:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < 6; i++){
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	ddc3      	ble.n	8000f10 <_read_calibration+0xe>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <ms5607_init>:

// *** Global functions *** //

void ms5607_init(struct ms5607_dev * dev){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	uint32_t reset_time;
	reset_time = 3 * osKernelGetTickFreq() / 1000;
 8000f98:	f008 fad6 	bl	8009548 <osKernelGetTickFreq>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <ms5607_init+0x3c>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	099b      	lsrs	r3, r3, #6
 8000fac:	60fb      	str	r3, [r7, #12]
	// General Procedure:
	//  1. reset chip
	//  2. Read out calibration

	// Reset chip
	_ms_write_command(dev, COMMAND_RESET);
 8000fae:	211e      	movs	r1, #30
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff91 	bl	8000ed8 <_ms_write_command>
	osDelay(reset_time);
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f008 fb76 	bl	80096a8 <osDelay>

	// Read calibration
	_read_calibration(dev);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffa0 	bl	8000f02 <_read_calibration>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	10624dd3 	.word	0x10624dd3

08000fd0 <ms5607_read_raw_pres_temp>:

void ms5607_read_raw_pres_temp(struct ms5607_dev * dev, int32_t *pressure_raw, int32_t *temperature_raw){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	uint32_t wait_time;
	uint8_t command;
	uint8_t rec[3] = {0};
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	460a      	mov	r2, r1
 8000fe4:	801a      	strh	r2, [r3, #0]
 8000fe6:	460a      	mov	r2, r1
 8000fe8:	709a      	strb	r2, [r3, #2]

	// figure out how many ticks a conversion needs
	wait_time = _get_conversion_ticks(dev);
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f7ff ff0c 	bl	8000e08 <_get_conversion_ticks>
 8000ff0:	6178      	str	r0, [r7, #20]

	// initiate pressure conversion
	command = COMMAND_CONVERT_D1_BASE + (dev->osr *2);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	7a1b      	ldrb	r3, [r3, #8]
 8000ff6:	3320      	adds	r3, #32
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	74fb      	strb	r3, [r7, #19]
	_ms_write_command(dev, command);
 8000ffe:	7cfb      	ldrb	r3, [r7, #19]
 8001000:	4619      	mov	r1, r3
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff ff68 	bl	8000ed8 <_ms_write_command>

	// wait till the conversion is done
	osDelay(wait_time);
 8001008:	6978      	ldr	r0, [r7, #20]
 800100a:	f008 fb4d 	bl	80096a8 <osDelay>

	// read out raw pressure value
	_ms_read_bytes(dev, COMMAND_ADC_READ, rec, 3);
 800100e:	f107 0210 	add.w	r2, r7, #16
 8001012:	2303      	movs	r3, #3
 8001014:	2100      	movs	r1, #0
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff ff38 	bl	8000e8c <_ms_read_bytes>
	*pressure_raw = (rec[0] << 16) | (rec[1] << 8) | rec[2];
 800101c:	7c3b      	ldrb	r3, [r7, #16]
 800101e:	041a      	lsls	r2, r3, #16
 8001020:	7c7b      	ldrb	r3, [r7, #17]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	4313      	orrs	r3, r2
 8001026:	7cba      	ldrb	r2, [r7, #18]
 8001028:	431a      	orrs	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	601a      	str	r2, [r3, #0]

	command = COMMAND_CONVERT_D2_BASE + (dev->osr *2);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	7a1b      	ldrb	r3, [r3, #8]
 8001032:	3328      	adds	r3, #40	; 0x28
 8001034:	b2db      	uxtb	r3, r3
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	74fb      	strb	r3, [r7, #19]
	_ms_write_command(dev, command);
 800103a:	7cfb      	ldrb	r3, [r7, #19]
 800103c:	4619      	mov	r1, r3
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f7ff ff4a 	bl	8000ed8 <_ms_write_command>

	// wait till the conversion is done
	osDelay(wait_time);
 8001044:	6978      	ldr	r0, [r7, #20]
 8001046:	f008 fb2f 	bl	80096a8 <osDelay>

	// read out raw pressure value
	_ms_read_bytes(dev, COMMAND_ADC_READ, rec, 3);
 800104a:	f107 0210 	add.w	r2, r7, #16
 800104e:	2303      	movs	r3, #3
 8001050:	2100      	movs	r1, #0
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f7ff ff1a 	bl	8000e8c <_ms_read_bytes>
	*temperature_raw = (rec[0] << 16) | (rec[1] << 8) | rec[2];
 8001058:	7c3b      	ldrb	r3, [r7, #16]
 800105a:	041a      	lsls	r2, r3, #16
 800105c:	7c7b      	ldrb	r3, [r7, #17]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	4313      	orrs	r3, r2
 8001062:	7cba      	ldrb	r2, [r7, #18]
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	601a      	str	r2, [r3, #0]
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <ms5607_read_pres_temp>:

void ms5607_read_pres_temp(struct ms5607_dev * dev, int32_t *temperature, int32_t *pressure){
 8001072:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	int32_t pressure_raw;
	int32_t temperature_raw;

	ms5607_read_raw_pres_temp(dev, &pressure_raw, &temperature_raw);
 8001080:	f107 0210 	add.w	r2, r7, #16
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f7ff ffa0 	bl	8000fd0 <ms5607_read_raw_pres_temp>

	// Calculate real values with coefficients
	int64_t dT;
	int64_t OFF, SENS;

	dT = temperature_raw - ((uint32_t) dev->coefficients[4] << 8);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8a5b      	ldrh	r3, [r3, #18]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f04f 0400 	mov.w	r4, #0
 80010a0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	/* Temperature in 2000  = 20.00° C */
	*temperature = (int32_t) 2000 + (dT * dev->coefficients[5] >> 23);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8a9b      	ldrh	r3, [r3, #20]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f04f 0400 	mov.w	r4, #0
 80010ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010b0:	fb04 f102 	mul.w	r1, r4, r2
 80010b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010b6:	fb03 f202 	mul.w	r2, r3, r2
 80010ba:	440a      	add	r2, r1
 80010bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010be:	fba1 3403 	umull	r3, r4, r1, r3
 80010c2:	4422      	add	r2, r4
 80010c4:	4614      	mov	r4, r2
 80010c6:	f04f 0100 	mov.w	r1, #0
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	0dd9      	lsrs	r1, r3, #23
 80010d0:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 80010d4:	15e2      	asrs	r2, r4, #23
 80010d6:	460b      	mov	r3, r1
 80010d8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010dc:	461a      	mov	r2, r3
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	601a      	str	r2, [r3, #0]

	OFF = ((int64_t) dev->coefficients[1] << 17) + ((dev->coefficients[3] * dT) >> 6);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	899b      	ldrh	r3, [r3, #12]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	f04f 0400 	mov.w	r4, #0
 80010ec:	ea4f 39d3 	mov.w	r9, r3, lsr #15
 80010f0:	ea4f 4843 	mov.w	r8, r3, lsl #17
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8a1b      	ldrh	r3, [r3, #16]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f04f 0400 	mov.w	r4, #0
 80010fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001100:	fb04 f102 	mul.w	r1, r4, r2
 8001104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001106:	fb03 f202 	mul.w	r2, r3, r2
 800110a:	1888      	adds	r0, r1, r2
 800110c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800110e:	fba2 1203 	umull	r1, r2, r2, r3
 8001112:	1883      	adds	r3, r0, r2
 8001114:	461a      	mov	r2, r3
 8001116:	f04f 0b00 	mov.w	fp, #0
 800111a:	f04f 0c00 	mov.w	ip, #0
 800111e:	ea4f 1b91 	mov.w	fp, r1, lsr #6
 8001122:	ea4b 6b82 	orr.w	fp, fp, r2, lsl #26
 8001126:	ea4f 1ca2 	mov.w	ip, r2, asr #6
 800112a:	eb1b 0308 	adds.w	r3, fp, r8
 800112e:	eb4c 0409 	adc.w	r4, ip, r9
 8001132:	e9c7 3408 	strd	r3, r4, [r7, #32]
	SENS = ((int64_t) dev->coefficients[0] << 16) + ((dev->coefficients[2] * dT) >> 7);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	895b      	ldrh	r3, [r3, #10]
 800113a:	b29b      	uxth	r3, r3
 800113c:	f04f 0400 	mov.w	r4, #0
 8001140:	0c1e      	lsrs	r6, r3, #16
 8001142:	041d      	lsls	r5, r3, #16
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	89db      	ldrh	r3, [r3, #14]
 8001148:	b29b      	uxth	r3, r3
 800114a:	f04f 0400 	mov.w	r4, #0
 800114e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001150:	fb04 f102 	mul.w	r1, r4, r2
 8001154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001156:	fb03 f202 	mul.w	r2, r3, r2
 800115a:	1888      	adds	r0, r1, r2
 800115c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800115e:	fba2 1203 	umull	r1, r2, r2, r3
 8001162:	1883      	adds	r3, r0, r2
 8001164:	461a      	mov	r2, r3
 8001166:	f04f 0800 	mov.w	r8, #0
 800116a:	f04f 0900 	mov.w	r9, #0
 800116e:	ea4f 18d1 	mov.w	r8, r1, lsr #7
 8001172:	ea48 6842 	orr.w	r8, r8, r2, lsl #25
 8001176:	ea4f 19e2 	mov.w	r9, r2, asr #7
 800117a:	eb18 0305 	adds.w	r3, r8, r5
 800117e:	eb49 0406 	adc.w	r4, r9, r6
 8001182:	e9c7 3406 	strd	r3, r4, [r7, #24]
	/* Pressure in 110002 = 1100.02 mbar */
	*pressure = (int32_t) ((((pressure_raw * SENS) >> 21) - OFF) >> 15);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	fb04 f102 	mul.w	r1, r4, r2
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	fb03 f202 	mul.w	r2, r3, r2
 8001198:	1888      	adds	r0, r1, r2
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	fba2 1203 	umull	r1, r2, r2, r3
 80011a0:	1883      	adds	r3, r0, r2
 80011a2:	461a      	mov	r2, r3
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	0d4b      	lsrs	r3, r1, #21
 80011ae:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80011b2:	1554      	asrs	r4, r2, #21
 80011b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80011b8:	1a5b      	subs	r3, r3, r1
 80011ba:	eb64 0402 	sbc.w	r4, r4, r2
 80011be:	461d      	mov	r5, r3
 80011c0:	4626      	mov	r6, r4
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	f04f 0400 	mov.w	r4, #0
 80011ca:	0beb      	lsrs	r3, r5, #15
 80011cc:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80011d0:	13f4      	asrs	r4, r6, #15
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	601a      	str	r2, [r3, #0]
}
 80011d8:	bf00      	nop
 80011da:	3730      	adds	r7, #48	; 0x30
 80011dc:	46bd      	mov	sp, r7
 80011de:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ea:	f000 ffc4 	bl	8002176 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_USB_DEVICE_Init();
 80011ee:	f00b fda5 	bl	800cd3c <MX_USB_DEVICE_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 f881 	bl	80012f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f000 f9dd 	bl	80015b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011fa:	f000 f9bd 	bl	8001578 <MX_DMA_Init>
  MX_I2C1_Init();
 80011fe:	f000 f8ff 	bl	8001400 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001202:	f000 f93d 	bl	8001480 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001206:	f000 f979 	bl	80014fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800120a:	f008 f90b 	bl	8009424 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */

  /* Barometer Mutex */
  const osMutexAttr_t baro_mutex_attr = {
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <main+0xc4>)
 8001210:	f107 0410 	add.w	r4, r7, #16
 8001214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  baro_mutex = osMutexNew(&baro_mutex_attr);
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	4618      	mov	r0, r3
 8001220:	f008 fab0 	bl	8009784 <osMutexNew>
 8001224:	4602      	mov	r2, r0
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <main+0xc8>)
 8001228:	601a      	str	r2, [r3, #0]
  /* IMU Mutex */
  const osMutexAttr_t imu_mutex_attr = {
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <main+0xcc>)
 800122c:	463c      	mov	r4, r7
 800122e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    osMutexPrioInherit,    // attr_bits
    NULL,                                     // memory for control block
    0U                                        // size for control block
  };

  imu_mutex = osMutexNew(&imu_mutex_attr);
 8001234:	463b      	mov	r3, r7
 8001236:	4618      	mov	r0, r3
 8001238:	f008 faa4 	bl	8009784 <osMutexNew>
 800123c:	4602      	mov	r2, r0
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <main+0xd0>)
 8001240:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  preprocess_queue = osMessageQueueNew(PREPROCESS_QUEUE_SIZE, sizeof(imu_data_t), NULL);
 8001242:	2200      	movs	r2, #0
 8001244:	2110      	movs	r1, #16
 8001246:	2020      	movs	r0, #32
 8001248:	f008 fbe4 	bl	8009a14 <osMessageQueueNew>
 800124c:	4602      	mov	r2, r0
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <main+0xd4>)
 8001250:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001252:	4a1a      	ldr	r2, [pc, #104]	; (80012bc <main+0xd8>)
 8001254:	2100      	movs	r1, #0
 8001256:	481a      	ldr	r0, [pc, #104]	; (80012c0 <main+0xdc>)
 8001258:	f008 f980 	bl	800955c <osThreadNew>
 800125c:	4602      	mov	r2, r0
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <main+0xe0>)
 8001260:	601a      	str	r2, [r3, #0]

  /* creation of task_baro_read */
  task_baro_readHandle = osThreadNew(vTaskBaroRead, NULL, &task_baro_read_attributes);
 8001262:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <main+0xe4>)
 8001264:	2100      	movs	r1, #0
 8001266:	4819      	ldr	r0, [pc, #100]	; (80012cc <main+0xe8>)
 8001268:	f008 f978 	bl	800955c <osThreadNew>
 800126c:	4602      	mov	r2, r0
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <main+0xec>)
 8001270:	601a      	str	r2, [r3, #0]

  /* creation of task_imu_read */
  task_imu_readHandle = osThreadNew(vTaskImuRead, NULL, &task_imu_read_attributes);
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <main+0xf0>)
 8001274:	2100      	movs	r1, #0
 8001276:	4818      	ldr	r0, [pc, #96]	; (80012d8 <main+0xf4>)
 8001278:	f008 f970 	bl	800955c <osThreadNew>
 800127c:	4602      	mov	r2, r0
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <main+0xf8>)
 8001280:	601a      	str	r2, [r3, #0]

  /* creation of task_send_to_mb */
  task_send_to_mbHandle = osThreadNew(vTaskSendToMb, NULL, &task_send_to_mb_attributes);
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <main+0xfc>)
 8001284:	2100      	movs	r1, #0
 8001286:	4817      	ldr	r0, [pc, #92]	; (80012e4 <main+0x100>)
 8001288:	f008 f968 	bl	800955c <osThreadNew>
 800128c:	4602      	mov	r2, r0
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <main+0x104>)
 8001290:	601a      	str	r2, [r3, #0]

  /* creation of task_preprocess */
  task_preprocessHandle = osThreadNew(vTaskPreprocess, NULL, &task_preprocess_attributes);
 8001292:	4a16      	ldr	r2, [pc, #88]	; (80012ec <main+0x108>)
 8001294:	2100      	movs	r1, #0
 8001296:	4816      	ldr	r0, [pc, #88]	; (80012f0 <main+0x10c>)
 8001298:	f008 f960 	bl	800955c <osThreadNew>
 800129c:	4602      	mov	r2, r0
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <main+0x110>)
 80012a0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012a2:	f008 f8f3 	bl	800948c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <main+0xc2>
 80012a8:	0800d900 	.word	0x0800d900
 80012ac:	2000c040 	.word	0x2000c040
 80012b0:	0800d91c 	.word	0x0800d91c
 80012b4:	20005f50 	.word	0x20005f50
 80012b8:	20001de0 	.word	0x20001de0
 80012bc:	0800d9fc 	.word	0x0800d9fc
 80012c0:	08001649 	.word	0x08001649
 80012c4:	20001d80 	.word	0x20001d80
 80012c8:	0800da20 	.word	0x0800da20
 80012cc:	08001a79 	.word	0x08001a79
 80012d0:	20009f78 	.word	0x20009f78
 80012d4:	0800da44 	.word	0x0800da44
 80012d8:	08001b29 	.word	0x08001b29
 80012dc:	2000bfe4 	.word	0x2000bfe4
 80012e0:	0800da68 	.word	0x0800da68
 80012e4:	08001f81 	.word	0x08001f81
 80012e8:	20005f74 	.word	0x20005f74
 80012ec:	0800da8c 	.word	0x0800da8c
 80012f0:	08001c39 	.word	0x08001c39
 80012f4:	20009f7c 	.word	0x20009f7c

080012f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0ae      	sub	sp, #184	; 0xb8
 80012fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001302:	2244      	movs	r2, #68	; 0x44
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f00c fab9 	bl	800d87e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2260      	movs	r2, #96	; 0x60
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f00c faab 	bl	800d87e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001328:	2310      	movs	r3, #16
 800132a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800132c:	2301      	movs	r3, #1
 800132e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001338:	2360      	movs	r3, #96	; 0x60
 800133a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001344:	2301      	movs	r3, #1
 8001346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800134a:	2301      	movs	r3, #1
 800134c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001350:	2328      	movs	r3, #40	; 0x28
 8001352:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001356:	2307      	movs	r3, #7
 8001358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800136c:	4618      	mov	r0, r3
 800136e:	f003 f81f 	bl	80043b0 <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001378:	f000 f982 	bl	8001680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2303      	movs	r3, #3
 8001382:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001390:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001394:	2104      	movs	r1, #4
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fc2a 	bl	8004bf0 <HAL_RCC_ClockConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013a2:	f000 f96d 	bl	8001680 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 80013a6:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80013aa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013b4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013b6:	2301      	movs	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013ba:	2301      	movs	r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013be:	2318      	movs	r3, #24
 80013c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013c2:	2307      	movs	r3, #7
 80013c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013c6:	2302      	movs	r3, #2
 80013c8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80013ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013d2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fe2a 	bl	8005030 <HAL_RCCEx_PeriphCLKConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80013e2:	f000 f94d 	bl	8001680 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013ea:	f002 ff7b 	bl	80042e4 <HAL_PWREx_ControlVoltageScaling>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80013f4:	f000 f944 	bl	8001680 <Error_Handler>
  }
}
 80013f8:	bf00      	nop
 80013fa:	37b8      	adds	r7, #184	; 0xb8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <MX_I2C1_Init+0x74>)
 8001406:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <MX_I2C1_Init+0x78>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_I2C1_Init+0x74>)
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <MX_I2C1_Init+0x7c>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <MX_I2C1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_I2C1_Init+0x74>)
 8001418:	2201      	movs	r2, #1
 800141a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_I2C1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_I2C1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_I2C1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143a:	480e      	ldr	r0, [pc, #56]	; (8001474 <MX_I2C1_Init+0x74>)
 800143c:	f001 fb10 	bl	8002a60 <HAL_I2C_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001446:	f000 f91b 	bl	8001680 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800144a:	2100      	movs	r1, #0
 800144c:	4809      	ldr	r0, [pc, #36]	; (8001474 <MX_I2C1_Init+0x74>)
 800144e:	f001 ff61 	bl	8003314 <HAL_I2CEx_ConfigAnalogFilter>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001458:	f000 f912 	bl	8001680 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_I2C1_Init+0x74>)
 8001460:	f001 ffa3 	bl	80033aa <HAL_I2CEx_ConfigDigitalFilter>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 f909 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20001f00 	.word	0x20001f00
 8001478:	40005400 	.word	0x40005400
 800147c:	00702991 	.word	0x00702991

08001480 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_SPI1_Init+0x74>)
 8001486:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <MX_SPI1_Init+0x78>)
 8001488:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_SPI1_Init+0x74>)
 800148c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001490:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_SPI1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_SPI1_Init+0x74>)
 800149a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800149e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014b6:	2218      	movs	r2, #24
 80014b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014ce:	2207      	movs	r2, #7
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014da:	2208      	movs	r2, #8
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_SPI1_Init+0x74>)
 80014e0:	f004 f8da 	bl	8005698 <HAL_SPI_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 f8c9 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000bf80 	.word	0x2000bf80
 80014f8:	40013000 	.word	0x40013000

080014fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_SPI2_Init+0x74>)
 8001502:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <MX_SPI2_Init+0x78>)
 8001504:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_SPI2_Init+0x74>)
 8001508:	f44f 7282 	mov.w	r2, #260	; 0x104
 800150c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_SPI2_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_SPI2_Init+0x74>)
 8001516:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800151a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_SPI2_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_SPI2_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_SPI2_Init+0x74>)
 800152a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800152e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_SPI2_Init+0x74>)
 8001532:	2228      	movs	r2, #40	; 0x28
 8001534:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_SPI2_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_SPI2_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_SPI2_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_SPI2_Init+0x74>)
 800154a:	2207      	movs	r2, #7
 800154c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_SPI2_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_SPI2_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_SPI2_Init+0x74>)
 800155c:	f004 f89c 	bl	8005698 <HAL_SPI_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001566:	f000 f88b 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20001de4 	.word	0x20001de4
 8001574:	40003800 	.word	0x40003800

08001578 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_DMA_Init+0x38>)
 8001580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <MX_DMA_Init+0x38>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6493      	str	r3, [r2, #72]	; 0x48
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_DMA_Init+0x38>)
 800158c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2105      	movs	r1, #5
 800159a:	200f      	movs	r0, #15
 800159c:	f000 fefc 	bl	8002398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015a0:	200f      	movs	r0, #15
 80015a2:	f000 ff15 	bl	80023d0 <HAL_NVIC_EnableIRQ>

}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_GPIO_Init+0x90>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <MX_GPIO_Init+0x90>)
 80015d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_GPIO_Init+0x90>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_GPIO_Init+0x90>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <MX_GPIO_Init+0x90>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_GPIO_Init+0x90>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_GPIO_Init+0x90>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a11      	ldr	r2, [pc, #68]	; (8001644 <MX_GPIO_Init+0x90>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_GPIO_Init+0x90>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2110      	movs	r1, #16
 8001616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161a:	f001 fa09 	bl	8002a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800161e:	2310      	movs	r3, #16
 8001620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001638:	f001 f880 	bl	800273c <HAL_GPIO_Init>

}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000

08001648 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001650:	f00b fb74 	bl	800cd3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001654:	2001      	movs	r0, #1
 8001656:	f008 f827 	bl	80096a8 <osDelay>
 800165a:	e7fb      	b.n	8001654 <StartDefaultTask+0xc>

0800165c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d101      	bne.n	8001672 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800166e:	f000 fd9b 	bl	80021a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40012c00 	.word	0x40012c00

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_MspInit+0x4c>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_MspInit+0x4c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6613      	str	r3, [r2, #96]	; 0x60
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_MspInit+0x4c>)
 80016a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_MspInit+0x4c>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_MspInit+0x4c>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_MspInit+0x4c>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	210f      	movs	r1, #15
 80016ca:	f06f 0001 	mvn.w	r0, #1
 80016ce:	f000 fe63 	bl	8002398 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a18      	ldr	r2, [pc, #96]	; (8001760 <HAL_I2C_MspInit+0x80>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d129      	bne.n	8001756 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_I2C_MspInit+0x84>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_I2C_MspInit+0x84>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_I2C_MspInit+0x84>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800171a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001720:	2312      	movs	r3, #18
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001724:	2301      	movs	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800172c:	2304      	movs	r3, #4
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f000 ffff 	bl	800273c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_I2C_MspInit+0x84>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	4a08      	ldr	r2, [pc, #32]	; (8001764 <HAL_I2C_MspInit+0x84>)
 8001744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001748:	6593      	str	r3, [r2, #88]	; 0x58
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_I2C_MspInit+0x84>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40005400 	.word	0x40005400
 8001764:	40021000 	.word	0x40021000

08001768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	; 0x30
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a48      	ldr	r2, [pc, #288]	; (80018a8 <HAL_SPI_MspInit+0x140>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d129      	bne.n	80017de <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800178a:	4b48      	ldr	r3, [pc, #288]	; (80018ac <HAL_SPI_MspInit+0x144>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178e:	4a47      	ldr	r2, [pc, #284]	; (80018ac <HAL_SPI_MspInit+0x144>)
 8001790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001794:	6613      	str	r3, [r2, #96]	; 0x60
 8001796:	4b45      	ldr	r3, [pc, #276]	; (80018ac <HAL_SPI_MspInit+0x144>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b42      	ldr	r3, [pc, #264]	; (80018ac <HAL_SPI_MspInit+0x144>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a41      	ldr	r2, [pc, #260]	; (80018ac <HAL_SPI_MspInit+0x144>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_SPI_MspInit+0x144>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80017ba:	23c2      	movs	r3, #194	; 0xc2
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ca:	2305      	movs	r3, #5
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f000 ffb0 	bl	800273c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017dc:	e05f      	b.n	800189e <HAL_SPI_MspInit+0x136>
  else if(hspi->Instance==SPI2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a33      	ldr	r2, [pc, #204]	; (80018b0 <HAL_SPI_MspInit+0x148>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d15a      	bne.n	800189e <HAL_SPI_MspInit+0x136>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <HAL_SPI_MspInit+0x144>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	4a2f      	ldr	r2, [pc, #188]	; (80018ac <HAL_SPI_MspInit+0x144>)
 80017ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f2:	6593      	str	r3, [r2, #88]	; 0x58
 80017f4:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_SPI_MspInit+0x144>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_SPI_MspInit+0x144>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	4a29      	ldr	r2, [pc, #164]	; (80018ac <HAL_SPI_MspInit+0x144>)
 8001806:	f043 0302 	orr.w	r3, r3, #2
 800180a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_SPI_MspInit+0x144>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8001818:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800182a:	2305      	movs	r3, #5
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4619      	mov	r1, r3
 8001834:	481f      	ldr	r0, [pc, #124]	; (80018b4 <HAL_SPI_MspInit+0x14c>)
 8001836:	f000 ff81 	bl	800273c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_SPI_MspInit+0x150>)
 800183c:	4a1f      	ldr	r2, [pc, #124]	; (80018bc <HAL_SPI_MspInit+0x154>)
 800183e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_SPI_MspInit+0x150>)
 8001842:	2201      	movs	r2, #1
 8001844:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_SPI_MspInit+0x150>)
 8001848:	2210      	movs	r2, #16
 800184a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_SPI_MspInit+0x150>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_SPI_MspInit+0x150>)
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_SPI_MspInit+0x150>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <HAL_SPI_MspInit+0x150>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_SPI_MspInit+0x150>)
 8001866:	2220      	movs	r2, #32
 8001868:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_SPI_MspInit+0x150>)
 800186c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001870:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001872:	4811      	ldr	r0, [pc, #68]	; (80018b8 <HAL_SPI_MspInit+0x150>)
 8001874:	f000 fdba 	bl	80023ec <HAL_DMA_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_SPI_MspInit+0x11a>
      Error_Handler();
 800187e:	f7ff feff 	bl	8001680 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <HAL_SPI_MspInit+0x150>)
 8001886:	655a      	str	r2, [r3, #84]	; 0x54
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_SPI_MspInit+0x150>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2105      	movs	r1, #5
 8001892:	2024      	movs	r0, #36	; 0x24
 8001894:	f000 fd80 	bl	8002398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001898:	2024      	movs	r0, #36	; 0x24
 800189a:	f000 fd99 	bl	80023d0 <HAL_NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3730      	adds	r7, #48	; 0x30
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40013000 	.word	0x40013000
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40003800 	.word	0x40003800
 80018b4:	48000400 	.word	0x48000400
 80018b8:	2000bfe8 	.word	0x2000bfe8
 80018bc:	40020058 	.word	0x40020058

080018c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80018d0:	2200      	movs	r2, #0
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	2019      	movs	r0, #25
 80018d6:	f000 fd5f 	bl	8002398 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80018da:	2019      	movs	r0, #25
 80018dc:	f000 fd78 	bl	80023d0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_InitTick+0x9c>)
 80018e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e4:	4a1d      	ldr	r2, [pc, #116]	; (800195c <HAL_InitTick+0x9c>)
 80018e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018ea:	6613      	str	r3, [r2, #96]	; 0x60
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_InitTick+0x9c>)
 80018ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018f8:	f107 0210 	add.w	r2, r7, #16
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fb02 	bl	8004f0c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001908:	f003 faea 	bl	8004ee0 <HAL_RCC_GetPCLK2Freq>
 800190c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001910:	4a13      	ldr	r2, [pc, #76]	; (8001960 <HAL_InitTick+0xa0>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	0c9b      	lsrs	r3, r3, #18
 8001918:	3b01      	subs	r3, #1
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_InitTick+0xa4>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <HAL_InitTick+0xa8>)
 8001920:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_InitTick+0xa4>)
 8001924:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001928:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_InitTick+0xa4>)
 800192c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_InitTick+0xa4>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_InitTick+0xa4>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800193c:	4809      	ldr	r0, [pc, #36]	; (8001964 <HAL_InitTick+0xa4>)
 800193e:	f004 fe6b 	bl	8006618 <HAL_TIM_Base_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d104      	bne.n	8001952 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001948:	4806      	ldr	r0, [pc, #24]	; (8001964 <HAL_InitTick+0xa4>)
 800194a:	f004 fe9b 	bl	8006684 <HAL_TIM_Base_Start_IT>
 800194e:	4603      	mov	r3, r0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3730      	adds	r7, #48	; 0x30
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	431bde83 	.word	0x431bde83
 8001964:	2000c044 	.word	0x2000c044
 8001968:	40012c00 	.word	0x40012c00

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <DMA1_Channel5_IRQHandler+0x10>)
 80019a6:	f000 fe1a 	bl	80025de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000bfe8 	.word	0x2000bfe8

080019b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80019ba:	f004 fe8d 	bl	80066d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000c044 	.word	0x2000c044

080019c8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <SPI2_IRQHandler+0x10>)
 80019ce:	f004 fb8f 	bl	80060f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20001de4 	.word	0x20001de4

080019dc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <USB_IRQHandler+0x10>)
 80019e2:	f001 fe38 	bl	8003656 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000cd5c 	.word	0x2000cd5c

080019f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <SystemInit+0x64>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fa:	4a16      	ldr	r2, [pc, #88]	; (8001a54 <SystemInit+0x64>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <SystemInit+0x68>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <SystemInit+0x68>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <SystemInit+0x68>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <SystemInit+0x68>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <SystemInit+0x68>)
 8001a1c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a20:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <SystemInit+0x68>)
 8001a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a2c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <SystemInit+0x68>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <SystemInit+0x68>)
 8001a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <SystemInit+0x68>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SystemInit+0x64>)
 8001a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a46:	609a      	str	r2, [r3, #8]
#endif
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00
 8001a58:	40021000 	.word	0x40021000

08001a5c <UsbPrint>:
#include <stdio.h>
#include <stdarg.h>

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8001a5c:	b40f      	push	{r0, r1, r2, r3}
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	71fb      	strb	r3, [r7, #7]
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
		osMutexRelease(print_mutex);
	}
#endif
	return ret;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	b004      	add	sp, #16
 8001a76:	4770      	bx	lr

08001a78 <vTaskBaroRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskBaroRead(void *argument) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;
	/* actual measurements from sensor */
	int32_t temperature;
	int32_t pressure;

	vInitBaro();
 8001a80:	f000 f838 	bl	8001af4 <vInitBaro>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001a84:	f007 fd38 	bl	80094f8 <osKernelGetTickCount>
 8001a88:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / BARO_SAMPLING_FREQ;
 8001a8a:	f007 fd5d 	bl	8009548 <osKernelGetTickFreq>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <vTaskBaroRead+0x70>)
 8001a92:	fba3 2302 	umull	r2, r3, r3, r2
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	613b      	str	r3, [r7, #16]
	while (1) {
		tick_count += tick_update;
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]
		vReadBaro(&temperature, &pressure);
 8001aa2:	f107 0208 	add.w	r2, r7, #8
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f82b 	bl	8001b08 <vReadBaro>
//				temperature, tick_count);

		//TODO HIE AUE STUFF WO MUES GMACHT WERDE MIT DENE DATE

		/* If the Mutex is acquired we write the data into the right variable */
		if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <vTaskBaroRead+0x74>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f007 fefd 	bl	80098b8 <osMutexAcquire>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10d      	bne.n	8001ae0 <vTaskBaroRead+0x68>
			baro_data_to_mb.temperature = temperature;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <vTaskBaroRead+0x78>)
 8001ac8:	6053      	str	r3, [r2, #4]
			baro_data_to_mb.pressure = pressure;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <vTaskBaroRead+0x78>)
 8001ace:	6013      	str	r3, [r2, #0]
			baro_data_to_mb.ts = tick_count;
 8001ad0:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <vTaskBaroRead+0x78>)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	6093      	str	r3, [r2, #8]
			osMutexRelease(baro_mutex);
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <vTaskBaroRead+0x74>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f007 ff4a 	bl	8009974 <osMutexRelease>
		}

		osDelayUntil(tick_count);
 8001ae0:	6978      	ldr	r0, [r7, #20]
 8001ae2:	f007 fe0f 	bl	8009704 <osDelayUntil>
		tick_count += tick_update;
 8001ae6:	e7d8      	b.n	8001a9a <vTaskBaroRead+0x22>
 8001ae8:	51eb851f 	.word	0x51eb851f
 8001aec:	2000c040 	.word	0x2000c040
 8001af0:	20001d74 	.word	0x20001d74

08001af4 <vInitBaro>:
	}
}

void vInitBaro() {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	ms5607_init(&MS);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <vInitBaro+0x10>)
 8001afa:	f7ff fa49 	bl	8000f90 <ms5607_init>
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000044 	.word	0x20000044

08001b08 <vReadBaro>:

void vReadBaro(int32_t *temperature, int32_t *pressure) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
	ms5607_read_pres_temp(&MS, temperature, pressure);
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4803      	ldr	r0, [pc, #12]	; (8001b24 <vReadBaro+0x1c>)
 8001b18:	f7ff faab 	bl	8001072 <ms5607_read_pres_temp>
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000044 	.word	0x20000044

08001b28 <vTaskImuRead>:
/**
 * @brief Function implementing the task_baro_read thread.
 * @param argument: Not used
 * @retval None
 */
void vTaskImuRead(void *argument) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08e      	sub	sp, #56	; 0x38
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;

	/* initialize data variables */
	int16_t gyroscope_data[3] = { 0 }; /* 0 = x, 1 = y, 2 = z */
 8001b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	809a      	strh	r2, [r3, #4]
	int16_t acceleration[3] = { 0 }; /* 0 = x, 1 = y, 2 = z */
 8001b3a:	f107 0320 	add.w	r3, r7, #32
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	809a      	strh	r2, [r3, #4]
	int16_t temperature;

	/* initialize queue message */
	imu_data_t queue_data = { 0 };
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]


	vInitImu20601();
 8001b52:	f000 f83f 	bl	8001bd4 <vInitImu20601>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8001b56:	f007 fccf 	bl	80094f8 <osKernelGetTickCount>
 8001b5a:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / IMU20601_SAMPLING_FREQ;
 8001b5c:	f007 fcf4 	bl	8009548 <osKernelGetTickFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <vTaskImuRead+0xa4>)
 8001b64:	fba3 2302 	umull	r2, r3, r3, r2
 8001b68:	095b      	lsrs	r3, r3, #5
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
	for (;;) {
		tick_count += tick_update;
 8001b6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b70:	4413      	add	r3, r2
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
		vReadImu20601(gyroscope_data, acceleration, &temperature);
 8001b74:	f107 021e 	add.w	r2, r7, #30
 8001b78:	f107 0120 	add.w	r1, r7, #32
 8001b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 f841 	bl	8001c08 <vReadImu20601>
//				gyroscope_data[0], gyroscope_data[1], gyroscope_data[2],
//				acceleration[0], acceleration[1], acceleration[2], temperature);

		//TODO HIE AUE STUFF WO MUES GMACHT WERDE MIT DENE DATE

		queue_data.gyro_x = gyroscope_data[0];
 8001b86:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001b8a:	81bb      	strh	r3, [r7, #12]
		queue_data.gyro_y = gyroscope_data[1];
 8001b8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b90:	81fb      	strh	r3, [r7, #14]
		queue_data.gyro_z = gyroscope_data[2];
 8001b92:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001b96:	823b      	strh	r3, [r7, #16]
		queue_data.acc_x = acceleration[0];
 8001b98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b9c:	827b      	strh	r3, [r7, #18]
		queue_data.acc_y = acceleration[1];
 8001b9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001ba2:	82bb      	strh	r3, [r7, #20]
		queue_data.acc_z = acceleration[2];
 8001ba4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001ba8:	82fb      	strh	r3, [r7, #22]
		queue_data.ts = osKernelGetTickCount();
 8001baa:	f007 fca5 	bl	80094f8 <osKernelGetTickCount>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	61bb      	str	r3, [r7, #24]

		/* Send Data to Queue */
		osMessageQueuePut(preprocess_queue, &queue_data, 0U, 0U);
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <vTaskImuRead+0xa8>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	f107 010c 	add.w	r1, r7, #12
 8001bba:	2300      	movs	r3, #0
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f007 ffaf 	bl	8009b20 <osMessageQueuePut>

		osDelayUntil(tick_count);
 8001bc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001bc4:	f007 fd9e 	bl	8009704 <osDelayUntil>
		tick_count += tick_update;
 8001bc8:	e7d0      	b.n	8001b6c <vTaskImuRead+0x44>
 8001bca:	bf00      	nop
 8001bcc:	51eb851f 	.word	0x51eb851f
 8001bd0:	20001de0 	.word	0x20001de0

08001bd4 <vInitImu20601>:
	}
}

void vInitImu20601() {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
	osDelayUntil(1000);
 8001bda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bde:	f007 fd91 	bl	8009704 <osDelayUntil>
	uint8_t r = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	71fb      	strb	r3, [r7, #7]
	do {
		r = icm20601_init(&ICM);
 8001be6:	4807      	ldr	r0, [pc, #28]	; (8001c04 <vInitImu20601+0x30>)
 8001be8:	f7fe ff6b 	bl	8000ac2 <icm20601_init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(10);
 8001bf0:	200a      	movs	r0, #10
 8001bf2:	f000 faf7 	bl	80021e4 <HAL_Delay>
	} while(!r);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f4      	beq.n	8001be6 <vInitImu20601+0x12>

}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000005c 	.word	0x2000005c

08001c08 <vReadImu20601>:

void vReadImu20601(int16_t gyroscope_data[], int16_t acceleration[], int16_t *temperature) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
	icm20601_read_accel_raw(&ICM, acceleration);
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	4807      	ldr	r0, [pc, #28]	; (8001c34 <vReadImu20601+0x2c>)
 8001c18:	f7ff f817 	bl	8000c4a <icm20601_read_accel_raw>
	icm20601_read_gyro_raw(&ICM, gyroscope_data);
 8001c1c:	68f9      	ldr	r1, [r7, #12]
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <vReadImu20601+0x2c>)
 8001c20:	f7ff f86e 	bl	8000d00 <icm20601_read_gyro_raw>
	icm20601_read_temp_raw(&ICM, temperature);
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4803      	ldr	r0, [pc, #12]	; (8001c34 <vReadImu20601+0x2c>)
 8001c28:	f7ff f8c5 	bl	8000db6 <icm20601_read_temp_raw>
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000005c 	.word	0x2000005c

08001c38 <vTaskPreprocess>:
 *      Author: Jonas
 */

#include "tasks/task_preprocess.h"

void vTaskPreprocess(void *argument) {
 8001c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3a:	b08f      	sub	sp, #60	; 0x3c
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	/* registers for the Filter */
	int32_t registers[4] = { 0 };
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]

	int32_t filtered_acc_z;
	int32_t raw_acc_z;

	/* Queue data and Status Initialization */
	imu_data_t queue_data = { 0 };
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]

	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 8001c5c:	f007 fc4c 	bl	80094f8 <osKernelGetTickCount>
 8001c60:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / SAMPLING_RATE_PREP;
 8001c62:	f007 fc71 	bl	8009548 <osKernelGetTickFreq>
 8001c66:	4602      	mov	r2, r0
 8001c68:	4bc1      	ldr	r3, [pc, #772]	; (8001f70 <vTaskPreprocess+0x338>)
 8001c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8001c6e:	08db      	lsrs	r3, r3, #3
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30

	/* Infinite loop */
	for (;;) {
		tick_count += tick_update;
 8001c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c76:	4413      	add	r3, r2
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
		if (osMessageQueueGet(preprocess_queue, &queue_data, NULL,
 8001c7a:	4bbe      	ldr	r3, [pc, #760]	; (8001f74 <vTaskPreprocess+0x33c>)
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	f107 0108 	add.w	r1, r7, #8
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	2200      	movs	r2, #0
 8001c88:	f007 ffbe 	bl	8009c08 <osMessageQueueGet>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1ef      	bne.n	8001c72 <vTaskPreprocess+0x3a>
		osWaitForever) == osOK) {
			raw_acc_z = queue_data.acc_z;
 8001c92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
			filtered_acc_z = A0
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001c98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c9a:	f7fe fbeb 	bl	8000474 <__aeabi_i2d>
 8001c9e:	4605      	mov	r5, r0
 8001ca0:	460e      	mov	r6, r1
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fbe5 	bl	8000474 <__aeabi_i2d>
 8001caa:	a4a3      	add	r4, pc, #652	; (adr r4, 8001f38 <vTaskPreprocess+0x300>)
 8001cac:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	f7fe fc48 	bl	8000548 <__aeabi_dmul>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	460c      	mov	r4, r1
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	4631      	mov	r1, r6
 8001cc4:	f7fe fa8a 	bl	80001dc <__adddf3>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	460c      	mov	r4, r1
 8001ccc:	461d      	mov	r5, r3
 8001cce:	4626      	mov	r6, r4
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fbce 	bl	8000474 <__aeabi_i2d>
 8001cd8:	a499      	add	r4, pc, #612	; (adr r4, 8001f40 <vTaskPreprocess+0x308>)
 8001cda:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	f7fe fc31 	bl	8000548 <__aeabi_dmul>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460c      	mov	r4, r1
 8001cea:	461a      	mov	r2, r3
 8001cec:	4623      	mov	r3, r4
 8001cee:	4628      	mov	r0, r5
 8001cf0:	4631      	mov	r1, r6
 8001cf2:	f7fe fa73 	bl	80001dc <__adddf3>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	460c      	mov	r4, r1
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	4626      	mov	r6, r4
							+ B3 * registers[2] + B4 * registers[3]) +
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fbb7 	bl	8000474 <__aeabi_i2d>
 8001d06:	a490      	add	r4, pc, #576	; (adr r4, 8001f48 <vTaskPreprocess+0x310>)
 8001d08:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4623      	mov	r3, r4
 8001d10:	f7fe fc1a 	bl	8000548 <__aeabi_dmul>
 8001d14:	4603      	mov	r3, r0
 8001d16:	460c      	mov	r4, r1
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	4631      	mov	r1, r6
 8001d20:	f7fe fa5c 	bl	80001dc <__adddf3>
 8001d24:	4603      	mov	r3, r0
 8001d26:	460c      	mov	r4, r1
 8001d28:	461d      	mov	r5, r3
 8001d2a:	4626      	mov	r6, r4
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fba0 	bl	8000474 <__aeabi_i2d>
 8001d34:	a486      	add	r4, pc, #536	; (adr r4, 8001f50 <vTaskPreprocess+0x318>)
 8001d36:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4623      	mov	r3, r4
 8001d3e:	f7fe fc03 	bl	8000548 <__aeabi_dmul>
 8001d42:	4603      	mov	r3, r0
 8001d44:	460c      	mov	r4, r1
 8001d46:	461a      	mov	r2, r3
 8001d48:	4623      	mov	r3, r4
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	4631      	mov	r1, r6
 8001d4e:	f7fe fa45 	bl	80001dc <__adddf3>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	4618      	mov	r0, r3
 8001d58:	4621      	mov	r1, r4
					* (raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001d5a:	a47f      	add	r4, pc, #508	; (adr r4, 8001f58 <vTaskPreprocess+0x320>)
 8001d5c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4623      	mov	r3, r4
 8001d64:	f7fe fbf0 	bl	8000548 <__aeabi_dmul>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	461d      	mov	r5, r3
 8001d6e:	4626      	mov	r6, r4
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fb7e 	bl	8000474 <__aeabi_i2d>
 8001d78:	a479      	add	r4, pc, #484	; (adr r4, 8001f60 <vTaskPreprocess+0x328>)
 8001d7a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4623      	mov	r3, r4
 8001d82:	f7fe fbe1 	bl	8000548 <__aeabi_dmul>
 8001d86:	4603      	mov	r3, r0
 8001d88:	460c      	mov	r4, r1
							+ B3 * registers[2] + B4 * registers[3]) +
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4623      	mov	r3, r4
 8001d8e:	4628      	mov	r0, r5
 8001d90:	4631      	mov	r1, r6
 8001d92:	f7fe fa23 	bl	80001dc <__adddf3>
 8001d96:	4603      	mov	r3, r0
 8001d98:	460c      	mov	r4, r1
 8001d9a:	461d      	mov	r5, r3
 8001d9c:	4626      	mov	r6, r4
			A1 * registers[0] + A2 * registers[1] + A3 * registers[2]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fb67 	bl	8000474 <__aeabi_i2d>
 8001da6:	a470      	add	r4, pc, #448	; (adr r4, 8001f68 <vTaskPreprocess+0x330>)
 8001da8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4623      	mov	r3, r4
 8001db0:	f7fe fbca 	bl	8000548 <__aeabi_dmul>
 8001db4:	4603      	mov	r3, r0
 8001db6:	460c      	mov	r4, r1
 8001db8:	461a      	mov	r2, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	4631      	mov	r1, r6
 8001dc0:	f7fe fa0c 	bl	80001dc <__adddf3>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	460c      	mov	r4, r1
 8001dc8:	461d      	mov	r5, r3
 8001dca:	4626      	mov	r6, r4
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fb50 	bl	8000474 <__aeabi_i2d>
 8001dd4:	a462      	add	r4, pc, #392	; (adr r4, 8001f60 <vTaskPreprocess+0x328>)
 8001dd6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4623      	mov	r3, r4
 8001dde:	f7fe fbb3 	bl	8000548 <__aeabi_dmul>
 8001de2:	4603      	mov	r3, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	461a      	mov	r2, r3
 8001de8:	4623      	mov	r3, r4
 8001dea:	4628      	mov	r0, r5
 8001dec:	4631      	mov	r1, r6
 8001dee:	f7fe f9f5 	bl	80001dc <__adddf3>
 8001df2:	4603      	mov	r3, r0
 8001df4:	460c      	mov	r4, r1
 8001df6:	461d      	mov	r5, r3
 8001df8:	4626      	mov	r6, r4
					+ A4 * registers[3];
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fb39 	bl	8000474 <__aeabi_i2d>
 8001e02:	a455      	add	r4, pc, #340	; (adr r4, 8001f58 <vTaskPreprocess+0x320>)
 8001e04:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4623      	mov	r3, r4
 8001e0c:	f7fe fb9c 	bl	8000548 <__aeabi_dmul>
 8001e10:	4603      	mov	r3, r0
 8001e12:	460c      	mov	r4, r1
 8001e14:	461a      	mov	r2, r3
 8001e16:	4623      	mov	r3, r4
 8001e18:	4628      	mov	r0, r5
 8001e1a:	4631      	mov	r1, r6
 8001e1c:	f7fe f9de 	bl	80001dc <__adddf3>
 8001e20:	4603      	mov	r3, r0
 8001e22:	460c      	mov	r4, r1
			filtered_acc_z = A0
 8001e24:	4618      	mov	r0, r3
 8001e26:	4621      	mov	r1, r4
 8001e28:	f7fe fda0 	bl	800096c <__aeabi_d2iz>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
			registers[3] = registers[2];
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
			registers[2] = registers[1];
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	623b      	str	r3, [r7, #32]
			registers[1] = registers[0];
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	61fb      	str	r3, [r7, #28]
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001e3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e3e:	f7fe fb19 	bl	8000474 <__aeabi_i2d>
 8001e42:	4605      	mov	r5, r0
 8001e44:	460e      	mov	r6, r1
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb13 	bl	8000474 <__aeabi_i2d>
 8001e4e:	a43a      	add	r4, pc, #232	; (adr r4, 8001f38 <vTaskPreprocess+0x300>)
 8001e50:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4623      	mov	r3, r4
 8001e58:	f7fe fb76 	bl	8000548 <__aeabi_dmul>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	460c      	mov	r4, r1
 8001e60:	461a      	mov	r2, r3
 8001e62:	4623      	mov	r3, r4
 8001e64:	4628      	mov	r0, r5
 8001e66:	4631      	mov	r1, r6
 8001e68:	f7fe f9b8 	bl	80001dc <__adddf3>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	460c      	mov	r4, r1
 8001e70:	461d      	mov	r5, r3
 8001e72:	4626      	mov	r6, r4
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fafc 	bl	8000474 <__aeabi_i2d>
 8001e7c:	a430      	add	r4, pc, #192	; (adr r4, 8001f40 <vTaskPreprocess+0x308>)
 8001e7e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e82:	461a      	mov	r2, r3
 8001e84:	4623      	mov	r3, r4
 8001e86:	f7fe fb5f 	bl	8000548 <__aeabi_dmul>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4623      	mov	r3, r4
 8001e92:	4628      	mov	r0, r5
 8001e94:	4631      	mov	r1, r6
 8001e96:	f7fe f9a1 	bl	80001dc <__adddf3>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	461d      	mov	r5, r3
 8001ea0:	4626      	mov	r6, r4
					+ B3 * registers[2] + B4 * registers[3];
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fae5 	bl	8000474 <__aeabi_i2d>
 8001eaa:	a427      	add	r4, pc, #156	; (adr r4, 8001f48 <vTaskPreprocess+0x310>)
 8001eac:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	f7fe fb48 	bl	8000548 <__aeabi_dmul>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4623      	mov	r3, r4
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	4631      	mov	r1, r6
 8001ec4:	f7fe f98a 	bl	80001dc <__adddf3>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	460c      	mov	r4, r1
 8001ecc:	461d      	mov	r5, r3
 8001ece:	4626      	mov	r6, r4
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe face 	bl	8000474 <__aeabi_i2d>
 8001ed8:	a41d      	add	r4, pc, #116	; (adr r4, 8001f50 <vTaskPreprocess+0x318>)
 8001eda:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4623      	mov	r3, r4
 8001ee2:	f7fe fb31 	bl	8000548 <__aeabi_dmul>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	460c      	mov	r4, r1
 8001eea:	461a      	mov	r2, r3
 8001eec:	4623      	mov	r3, r4
 8001eee:	4628      	mov	r0, r5
 8001ef0:	4631      	mov	r1, r6
 8001ef2:	f7fe f973 	bl	80001dc <__adddf3>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	460c      	mov	r4, r1
			registers[0] = raw_acc_z + B1 * registers[0] + B2 * registers[1]
 8001efa:	4618      	mov	r0, r3
 8001efc:	4621      	mov	r1, r4
 8001efe:	f7fe fd35 	bl	800096c <__aeabi_d2iz>
 8001f02:	4603      	mov	r3, r0
 8001f04:	61bb      	str	r3, [r7, #24]

			/* Write Result into Motherboard Variable if Mutex is available */
			if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <vTaskPreprocess+0x340>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f007 fcd3 	bl	80098b8 <osMutexAcquire>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f47f aeac 	bne.w	8001c72 <vTaskPreprocess+0x3a>
				imu_data_to_mb = queue_data;
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <vTaskPreprocess+0x344>)
 8001f1c:	461c      	mov	r4, r3
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//				imu_data_to_mb.acc_z = filtered_acc_z; /* Insert filtered data */
				osMutexRelease(imu_mutex);
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <vTaskPreprocess+0x340>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f007 fd21 	bl	8009974 <osMutexRelease>
		tick_count += tick_update;
 8001f32:	e69e      	b.n	8001c72 <vTaskPreprocess+0x3a>
 8001f34:	f3af 8000 	nop.w
 8001f38:	1c708e5c 	.word	0x1c708e5c
 8001f3c:	bfdc71c7 	.word	0xbfdc71c7
 8001f40:	bd4fbd69 	.word	0xbd4fbd69
 8001f44:	bfb2f684 	.word	0xbfb2f684
 8001f48:	80e71b2d 	.word	0x80e71b2d
 8001f4c:	bf76796e 	.word	0xbf76796e
 8001f50:	e17eb593 	.word	0xe17eb593
 8001f54:	bf23fa32 	.word	0xbf23fa32
 8001f58:	3a1a0235 	.word	0x3a1a0235
 8001f5c:	3fee7bb0 	.word	0x3fee7bb0
 8001f60:	3eeef58e 	.word	0x3eeef58e
 8001f64:	400e7bb0 	.word	0x400e7bb0
 8001f68:	2b9381a8 	.word	0x2b9381a8
 8001f6c:	4016dcc4 	.word	0x4016dcc4
 8001f70:	cccccccd 	.word	0xcccccccd
 8001f74:	20001de0 	.word	0x20001de0
 8001f78:	20005f50 	.word	0x20005f50
 8001f7c:	2000c030 	.word	0x2000c030

08001f80 <vTaskSendToMb>:

/* Local Data Variable initialization */
imu_data_t last_imu_data = { 0 };
baro_data_t last_baro_data = { 0 };

void vTaskSendToMb(void *argument) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]



	/* For periodic update */
	uint32_t tick_count, tick_update;
	tick_count = osKernelGetTickCount();
 8001f88:	f007 fab6 	bl	80094f8 <osKernelGetTickCount>
 8001f8c:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / MB_SAMPLING_RATE;
 8001f8e:	f007 fadb 	bl	8009548 <osKernelGetTickFreq>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <vTaskSendToMb+0x40>)
 8001f96:	fba3 2302 	umull	r2, r3, r3, r2
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	60bb      	str	r3, [r7, #8]

	for (;;) {
		tick_count += tick_update;
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

		if(USB_DATA_ENABLE){
			ReadDataUSB();
		}
		else{
			ReadDataSensors();
 8001fa6:	f000 f811 	bl	8001fcc <ReadDataSensors>
		}


		HAL_SPI_Transmit(&hspi2, (uint8_t*) &fullsb_data, sizeof(fullsb_data), HAL_MAX_DELAY);
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	2220      	movs	r2, #32
 8001fb0:	4904      	ldr	r1, [pc, #16]	; (8001fc4 <vTaskSendToMb+0x44>)
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <vTaskSendToMb+0x48>)
 8001fb4:	f003 fbfa 	bl	80057ac <HAL_SPI_Transmit>




		osDelayUntil(tick_count);
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f007 fba3 	bl	8009704 <osDelayUntil>
		tick_count += tick_update;
 8001fbe:	e7ee      	b.n	8001f9e <vTaskSendToMb+0x1e>
 8001fc0:	51eb851f 	.word	0x51eb851f
 8001fc4:	20005f54 	.word	0x20005f54
 8001fc8:	20001de4 	.word	0x20001de4

08001fcc <ReadDataSensors>:
			fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
			fullsb_data.imu.acc_x + fullsb_data.imu.acc_y +  fullsb_data.imu.acc_z;

}

void ReadDataSensors(){
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af04      	add	r7, sp, #16
	/* acquire current Data */
	if (osMutexAcquire(imu_mutex, IMU_MUTEX_TIMEOUT) == osOK) {
 8001fd2:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <ReadDataSensors+0x134>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f007 fc6d 	bl	80098b8 <osMutexAcquire>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10a      	bne.n	8001ffa <ReadDataSensors+0x2e>
		last_imu_data = imu_data_to_mb;
 8001fe4:	4a47      	ldr	r2, [pc, #284]	; (8002104 <ReadDataSensors+0x138>)
 8001fe6:	4b48      	ldr	r3, [pc, #288]	; (8002108 <ReadDataSensors+0x13c>)
 8001fe8:	4614      	mov	r4, r2
 8001fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		osMutexRelease(imu_mutex);
 8001ff0:	4b43      	ldr	r3, [pc, #268]	; (8002100 <ReadDataSensors+0x134>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f007 fcbd 	bl	8009974 <osMutexRelease>
	}

	if (osMutexAcquire(baro_mutex, BARO_MUTEX_TIMEOUT) == osOK) {
 8001ffa:	4b44      	ldr	r3, [pc, #272]	; (800210c <ReadDataSensors+0x140>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f007 fc59 	bl	80098b8 <osMutexAcquire>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <ReadDataSensors+0x54>
		last_baro_data = baro_data_to_mb;
 800200c:	4b40      	ldr	r3, [pc, #256]	; (8002110 <ReadDataSensors+0x144>)
 800200e:	4a41      	ldr	r2, [pc, #260]	; (8002114 <ReadDataSensors+0x148>)
 8002010:	ca07      	ldmia	r2, {r0, r1, r2}
 8002012:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		osMutexRelease(baro_mutex);
 8002016:	4b3d      	ldr	r3, [pc, #244]	; (800210c <ReadDataSensors+0x140>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f007 fcaa 	bl	8009974 <osMutexRelease>
	}

	fullsb_data.baro = last_baro_data;
 8002020:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <ReadDataSensors+0x14c>)
 8002022:	4a3b      	ldr	r2, [pc, #236]	; (8002110 <ReadDataSensors+0x144>)
 8002024:	ca07      	ldmia	r2, {r0, r1, r2}
 8002026:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	fullsb_data.imu = last_imu_data;
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <ReadDataSensors+0x14c>)
 800202c:	4a35      	ldr	r2, [pc, #212]	; (8002104 <ReadDataSensors+0x138>)
 800202e:	f103 040c 	add.w	r4, r3, #12
 8002032:	4613      	mov	r3, r2
 8002034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	fullsb_data.checksum = fullsb_data.baro.pressure + fullsb_data.baro.temperature +
 800203a:	4b37      	ldr	r3, [pc, #220]	; (8002118 <ReadDataSensors+0x14c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b35      	ldr	r3, [pc, #212]	; (8002118 <ReadDataSensors+0x14c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	4413      	add	r3, r2
 8002048:	b2da      	uxtb	r2, r3
			fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
 800204a:	4b33      	ldr	r3, [pc, #204]	; (8002118 <ReadDataSensors+0x14c>)
 800204c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	fullsb_data.checksum = fullsb_data.baro.pressure + fullsb_data.baro.temperature +
 8002050:	b2db      	uxtb	r3, r3
 8002052:	4413      	add	r3, r2
 8002054:	b2da      	uxtb	r2, r3
			fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <ReadDataSensors+0x14c>)
 8002058:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4413      	add	r3, r2
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <ReadDataSensors+0x14c>)
 8002064:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	4413      	add	r3, r2
 800206c:	b2da      	uxtb	r2, r3
			fullsb_data.imu.acc_x + fullsb_data.imu.acc_y +  fullsb_data.imu.acc_z;
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <ReadDataSensors+0x14c>)
 8002070:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			fullsb_data.imu.gyro_x + fullsb_data.imu.gyro_y + fullsb_data.imu.gyro_z +
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4413      	add	r3, r2
 8002078:	b2da      	uxtb	r2, r3
			fullsb_data.imu.acc_x + fullsb_data.imu.acc_y +  fullsb_data.imu.acc_z;
 800207a:	4b27      	ldr	r3, [pc, #156]	; (8002118 <ReadDataSensors+0x14c>)
 800207c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4413      	add	r3, r2
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <ReadDataSensors+0x14c>)
 8002088:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	4413      	add	r3, r2
 8002090:	b2da      	uxtb	r2, r3
	fullsb_data.checksum = fullsb_data.baro.pressure + fullsb_data.baro.temperature +
 8002092:	4b21      	ldr	r3, [pc, #132]	; (8002118 <ReadDataSensors+0x14c>)
 8002094:	771a      	strb	r2, [r3, #28]

	UsbPrint("[DBG] P: %ld; T: %ld; t: %lu; %lu\n", last_baro_data.pressure,
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <ReadDataSensors+0x144>)
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <ReadDataSensors+0x144>)
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <ReadDataSensors+0x144>)
 80020a0:	6898      	ldr	r0, [r3, #8]
			last_baro_data.temperature, last_baro_data.ts, fullsb_data.checksum);
 80020a2:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <ReadDataSensors+0x14c>)
 80020a4:	7f1b      	ldrb	r3, [r3, #28]
	UsbPrint("[DBG] P: %ld; T: %ld; t: %lu; %lu\n", last_baro_data.pressure,
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	4603      	mov	r3, r0
 80020aa:	481c      	ldr	r0, [pc, #112]	; (800211c <ReadDataSensors+0x150>)
 80020ac:	f7ff fcd6 	bl	8001a5c <UsbPrint>

	UsbPrint(
			"[DBG Task Send] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
			last_imu_data.gyro_x, last_imu_data.gyro_y,
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <ReadDataSensors+0x138>)
 80020b2:	f9b3 3000 	ldrsh.w	r3, [r3]
	UsbPrint(
 80020b6:	461c      	mov	r4, r3
			last_imu_data.gyro_x, last_imu_data.gyro_y,
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <ReadDataSensors+0x138>)
 80020ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	UsbPrint(
 80020be:	461d      	mov	r5, r3
			last_imu_data.gyro_z, last_imu_data.acc_x, last_imu_data.acc_y,
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <ReadDataSensors+0x138>)
 80020c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	UsbPrint(
 80020c6:	461e      	mov	r6, r3
			last_imu_data.gyro_z, last_imu_data.acc_x, last_imu_data.acc_y,
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <ReadDataSensors+0x138>)
 80020ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	UsbPrint(
 80020ce:	461a      	mov	r2, r3
			last_imu_data.gyro_z, last_imu_data.acc_x, last_imu_data.acc_y,
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <ReadDataSensors+0x138>)
 80020d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	UsbPrint(
 80020d6:	4619      	mov	r1, r3
			last_imu_data.acc_z, last_imu_data.ts);
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <ReadDataSensors+0x138>)
 80020da:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	UsbPrint(
 80020de:	4618      	mov	r0, r3
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <ReadDataSensors+0x138>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	9303      	str	r3, [sp, #12]
 80020e6:	9002      	str	r0, [sp, #8]
 80020e8:	9101      	str	r1, [sp, #4]
 80020ea:	9200      	str	r2, [sp, #0]
 80020ec:	4633      	mov	r3, r6
 80020ee:	462a      	mov	r2, r5
 80020f0:	4621      	mov	r1, r4
 80020f2:	480b      	ldr	r0, [pc, #44]	; (8002120 <ReadDataSensors+0x154>)
 80020f4:	f7ff fcb2 	bl	8001a5c <UsbPrint>
}
 80020f8:	bf00      	nop
 80020fa:	3704      	adds	r7, #4
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002100:	20005f50 	.word	0x20005f50
 8002104:	20000214 	.word	0x20000214
 8002108:	2000c030 	.word	0x2000c030
 800210c:	2000c040 	.word	0x2000c040
 8002110:	20000224 	.word	0x20000224
 8002114:	20001d74 	.word	0x20001d74
 8002118:	20005f54 	.word	0x20005f54
 800211c:	0800d92c 	.word	0x0800d92c
 8002120:	0800d950 	.word	0x0800d950

08002124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800215c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002128:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800212a:	e003      	b.n	8002134 <LoopCopyDataInit>

0800212c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800212e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002130:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002132:	3104      	adds	r1, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002134:	480b      	ldr	r0, [pc, #44]	; (8002164 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002138:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800213a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800213c:	d3f6      	bcc.n	800212c <CopyDataInit>
	ldr	r2, =_sbss
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002140:	e002      	b.n	8002148 <LoopFillZerobss>

08002142 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002142:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002144:	f842 3b04 	str.w	r3, [r2], #4

08002148 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <LoopForever+0x16>)
	cmp	r2, r3
 800214a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800214c:	d3f9      	bcc.n	8002142 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800214e:	f7ff fc4f 	bl	80019f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002152:	f00b fb65 	bl	800d820 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002156:	f7ff f845 	bl	80011e4 <main>

0800215a <LoopForever>:

LoopForever:
    b LoopForever
 800215a:	e7fe      	b.n	800215a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800215c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002160:	0800db00 	.word	0x0800db00
	ldr	r0, =_sdata
 8002164:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002168:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 800216c:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8002170:	2000cfd0 	.word	0x2000cfd0

08002174 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002174:	e7fe      	b.n	8002174 <ADC1_IRQHandler>

08002176 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002180:	2003      	movs	r0, #3
 8002182:	f000 f8fe 	bl	8002382 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002186:	2000      	movs	r0, #0
 8002188:	f7ff fb9a 	bl	80018c0 <HAL_InitTick>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	71fb      	strb	r3, [r7, #7]
 8002196:	e001      	b.n	800219c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002198:	f7ff fa7a 	bl	8001690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800219c:	79fb      	ldrb	r3, [r7, #7]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_IncTick+0x1c>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_IncTick+0x20>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4413      	add	r3, r2
 80021b6:	4a03      	ldr	r2, [pc, #12]	; (80021c4 <HAL_IncTick+0x1c>)
 80021b8:	6013      	str	r3, [r2, #0]
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	2000c084 	.word	0x2000c084
 80021c8:	20000070 	.word	0x20000070

080021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_GetTick+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	2000c084 	.word	0x2000c084

080021e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff ffee 	bl	80021cc <HAL_GetTick>
 80021f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d004      	beq.n	8002208 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_Delay+0x40>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4413      	add	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002208:	bf00      	nop
 800220a:	f7ff ffdf 	bl	80021cc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	429a      	cmp	r2, r3
 8002218:	d8f7      	bhi.n	800220a <HAL_Delay+0x26>
  {
  }
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000070 	.word	0x20000070

08002228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002244:	4013      	ands	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225a:	4a04      	ldr	r2, [pc, #16]	; (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60d3      	str	r3, [r2, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <__NVIC_GetPriorityGrouping+0x18>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	f003 0307 	and.w	r3, r3, #7
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	db0b      	blt.n	80022b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4907      	ldr	r1, [pc, #28]	; (80022c4 <__NVIC_EnableIRQ+0x38>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2001      	movs	r0, #1
 80022ae:	fa00 f202 	lsl.w	r2, r0, r2
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	db0a      	blt.n	80022f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	490c      	ldr	r1, [pc, #48]	; (8002314 <__NVIC_SetPriority+0x4c>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	0112      	lsls	r2, r2, #4
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	440b      	add	r3, r1
 80022ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f0:	e00a      	b.n	8002308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4908      	ldr	r1, [pc, #32]	; (8002318 <__NVIC_SetPriority+0x50>)
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	3b04      	subs	r3, #4
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	440b      	add	r3, r1
 8002306:	761a      	strb	r2, [r3, #24]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000e100 	.word	0xe000e100
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f1c3 0307 	rsb	r3, r3, #7
 8002336:	2b04      	cmp	r3, #4
 8002338:	bf28      	it	cs
 800233a:	2304      	movcs	r3, #4
 800233c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3304      	adds	r3, #4
 8002342:	2b06      	cmp	r3, #6
 8002344:	d902      	bls.n	800234c <NVIC_EncodePriority+0x30>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3b03      	subs	r3, #3
 800234a:	e000      	b.n	800234e <NVIC_EncodePriority+0x32>
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	f04f 32ff 	mov.w	r2, #4294967295
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	401a      	ands	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002364:	f04f 31ff 	mov.w	r1, #4294967295
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43d9      	mvns	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	4313      	orrs	r3, r2
         );
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ff4c 	bl	8002228 <__NVIC_SetPriorityGrouping>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023aa:	f7ff ff61 	bl	8002270 <__NVIC_GetPriorityGrouping>
 80023ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	6978      	ldr	r0, [r7, #20]
 80023b6:	f7ff ffb1 	bl	800231c <NVIC_EncodePriority>
 80023ba:	4602      	mov	r2, r0
 80023bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff80 	bl	80022c8 <__NVIC_SetPriority>
}
 80023c8:	bf00      	nop
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff54 	bl	800228c <__NVIC_EnableIRQ>
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e098      	b.n	8002530 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	4b4d      	ldr	r3, [pc, #308]	; (800253c <HAL_DMA_Init+0x150>)
 8002406:	429a      	cmp	r2, r3
 8002408:	d80f      	bhi.n	800242a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <HAL_DMA_Init+0x154>)
 8002412:	4413      	add	r3, r2
 8002414:	4a4b      	ldr	r2, [pc, #300]	; (8002544 <HAL_DMA_Init+0x158>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	009a      	lsls	r2, r3, #2
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a48      	ldr	r2, [pc, #288]	; (8002548 <HAL_DMA_Init+0x15c>)
 8002426:	641a      	str	r2, [r3, #64]	; 0x40
 8002428:	e00e      	b.n	8002448 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	4b46      	ldr	r3, [pc, #280]	; (800254c <HAL_DMA_Init+0x160>)
 8002432:	4413      	add	r3, r2
 8002434:	4a43      	ldr	r2, [pc, #268]	; (8002544 <HAL_DMA_Init+0x158>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	009a      	lsls	r2, r3, #2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a42      	ldr	r2, [pc, #264]	; (8002550 <HAL_DMA_Init+0x164>)
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800245e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002462:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800246c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002478:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002484:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024a2:	d039      	beq.n	8002518 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	4a27      	ldr	r2, [pc, #156]	; (8002548 <HAL_DMA_Init+0x15c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d11a      	bne.n	80024e4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024ae:	4b29      	ldr	r3, [pc, #164]	; (8002554 <HAL_DMA_Init+0x168>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f003 031c 	and.w	r3, r3, #28
 80024ba:	210f      	movs	r1, #15
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	4924      	ldr	r1, [pc, #144]	; (8002554 <HAL_DMA_Init+0x168>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_DMA_Init+0x168>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	f003 031c 	and.w	r3, r3, #28
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	491d      	ldr	r1, [pc, #116]	; (8002554 <HAL_DMA_Init+0x168>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]
 80024e2:	e019      	b.n	8002518 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024e4:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_DMA_Init+0x16c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	f003 031c 	and.w	r3, r3, #28
 80024f0:	210f      	movs	r1, #15
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	4917      	ldr	r1, [pc, #92]	; (8002558 <HAL_DMA_Init+0x16c>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <HAL_DMA_Init+0x16c>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f003 031c 	and.w	r3, r3, #28
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	4911      	ldr	r1, [pc, #68]	; (8002558 <HAL_DMA_Init+0x16c>)
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40020407 	.word	0x40020407
 8002540:	bffdfff8 	.word	0xbffdfff8
 8002544:	cccccccd 	.word	0xcccccccd
 8002548:	40020000 	.word	0x40020000
 800254c:	bffdfbf8 	.word	0xbffdfbf8
 8002550:	40020400 	.word	0x40020400
 8002554:	400200a8 	.word	0x400200a8
 8002558:	400204a8 	.word	0x400204a8

0800255c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d005      	beq.n	8002580 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2204      	movs	r2, #4
 8002578:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	e029      	b.n	80025d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 020e 	bic.w	r2, r2, #14
 800258e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a4:	f003 021c 	and.w	r2, r3, #28
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f202 	lsl.w	r2, r1, r2
 80025b2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
    }
  }
  return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f003 031c 	and.w	r3, r3, #28
 80025fe:	2204      	movs	r2, #4
 8002600:	409a      	lsls	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d026      	beq.n	8002658 <HAL_DMA_IRQHandler+0x7a>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d021      	beq.n	8002658 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d107      	bne.n	8002632 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0204 	bic.w	r2, r2, #4
 8002630:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f003 021c 	and.w	r2, r3, #28
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2104      	movs	r1, #4
 8002640:	fa01 f202 	lsl.w	r2, r1, r2
 8002644:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	2b00      	cmp	r3, #0
 800264c:	d071      	beq.n	8002732 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002656:	e06c      	b.n	8002732 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f003 031c 	and.w	r3, r3, #28
 8002660:	2202      	movs	r2, #2
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02e      	beq.n	80026ca <HAL_DMA_IRQHandler+0xec>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d029      	beq.n	80026ca <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 020a 	bic.w	r2, r2, #10
 8002692:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	f003 021c 	and.w	r2, r3, #28
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	2102      	movs	r1, #2
 80026aa:	fa01 f202 	lsl.w	r2, r1, r2
 80026ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d038      	beq.n	8002732 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026c8:	e033      	b.n	8002732 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f003 031c 	and.w	r3, r3, #28
 80026d2:	2208      	movs	r2, #8
 80026d4:	409a      	lsls	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d02a      	beq.n	8002734 <HAL_DMA_IRQHandler+0x156>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d025      	beq.n	8002734 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 020e 	bic.w	r2, r2, #14
 80026f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	f003 021c 	and.w	r2, r3, #28
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002732:	bf00      	nop
 8002734:	bf00      	nop
}
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274a:	e154      	b.n	80029f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	2101      	movs	r1, #1
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8146 	beq.w	80029f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d00b      	beq.n	8002784 <HAL_GPIO_Init+0x48>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d007      	beq.n	8002784 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002778:	2b11      	cmp	r3, #17
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b12      	cmp	r3, #18
 8002782:	d130      	bne.n	80027e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	2203      	movs	r2, #3
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ba:	2201      	movs	r2, #1
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4013      	ands	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 0201 	and.w	r2, r3, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0xea>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b12      	cmp	r3, #18
 8002824:	d123      	bne.n	800286e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	08da      	lsrs	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3208      	adds	r2, #8
 800282e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	220f      	movs	r2, #15
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	08da      	lsrs	r2, r3, #3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3208      	adds	r2, #8
 8002868:	6939      	ldr	r1, [r7, #16]
 800286a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0203 	and.w	r2, r3, #3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80a0 	beq.w	80029f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b0:	4b58      	ldr	r3, [pc, #352]	; (8002a14 <HAL_GPIO_Init+0x2d8>)
 80028b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b4:	4a57      	ldr	r2, [pc, #348]	; (8002a14 <HAL_GPIO_Init+0x2d8>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6613      	str	r3, [r2, #96]	; 0x60
 80028bc:	4b55      	ldr	r3, [pc, #340]	; (8002a14 <HAL_GPIO_Init+0x2d8>)
 80028be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028c8:	4a53      	ldr	r2, [pc, #332]	; (8002a18 <HAL_GPIO_Init+0x2dc>)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	220f      	movs	r2, #15
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028f2:	d019      	beq.n	8002928 <HAL_GPIO_Init+0x1ec>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a49      	ldr	r2, [pc, #292]	; (8002a1c <HAL_GPIO_Init+0x2e0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <HAL_GPIO_Init+0x1e8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a48      	ldr	r2, [pc, #288]	; (8002a20 <HAL_GPIO_Init+0x2e4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00d      	beq.n	8002920 <HAL_GPIO_Init+0x1e4>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a47      	ldr	r2, [pc, #284]	; (8002a24 <HAL_GPIO_Init+0x2e8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <HAL_GPIO_Init+0x1e0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a46      	ldr	r2, [pc, #280]	; (8002a28 <HAL_GPIO_Init+0x2ec>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_GPIO_Init+0x1dc>
 8002914:	2304      	movs	r3, #4
 8002916:	e008      	b.n	800292a <HAL_GPIO_Init+0x1ee>
 8002918:	2307      	movs	r3, #7
 800291a:	e006      	b.n	800292a <HAL_GPIO_Init+0x1ee>
 800291c:	2303      	movs	r3, #3
 800291e:	e004      	b.n	800292a <HAL_GPIO_Init+0x1ee>
 8002920:	2302      	movs	r3, #2
 8002922:	e002      	b.n	800292a <HAL_GPIO_Init+0x1ee>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_GPIO_Init+0x1ee>
 8002928:	2300      	movs	r3, #0
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	f002 0203 	and.w	r2, r2, #3
 8002930:	0092      	lsls	r2, r2, #2
 8002932:	4093      	lsls	r3, r2
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800293a:	4937      	ldr	r1, [pc, #220]	; (8002a18 <HAL_GPIO_Init+0x2dc>)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	3302      	adds	r3, #2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002948:	4b38      	ldr	r3, [pc, #224]	; (8002a2c <HAL_GPIO_Init+0x2f0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	43db      	mvns	r3, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800296c:	4a2f      	ldr	r2, [pc, #188]	; (8002a2c <HAL_GPIO_Init+0x2f0>)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002972:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <HAL_GPIO_Init+0x2f0>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002996:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <HAL_GPIO_Init+0x2f0>)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <HAL_GPIO_Init+0x2f0>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029c0:	4a1a      	ldr	r2, [pc, #104]	; (8002a2c <HAL_GPIO_Init+0x2f0>)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029c6:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_GPIO_Init+0x2f0>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ea:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <HAL_GPIO_Init+0x2f0>)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	3301      	adds	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f47f aea3 	bne.w	800274c <HAL_GPIO_Init+0x10>
  }
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	48000400 	.word	0x48000400
 8002a20:	48000800 	.word	0x48000800
 8002a24:	48000c00 	.word	0x48000c00
 8002a28:	48001000 	.word	0x48001000
 8002a2c:	40010400 	.word	0x40010400

08002a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a40:	787b      	ldrb	r3, [r7, #1]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a4c:	e002      	b.n	8002a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e081      	b.n	8002b76 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe fe2a 	bl	80016e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	; 0x24
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ab0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ac0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d107      	bne.n	8002ada <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	e006      	b.n	8002ae8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ae6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d104      	bne.n	8002afa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002af8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	ea42 0103 	orr.w	r1, r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	021a      	lsls	r2, r3, #8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69d9      	ldr	r1, [r3, #28]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1a      	ldr	r2, [r3, #32]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	817b      	strh	r3, [r7, #10]
 8002b90:	4613      	mov	r3, r2
 8002b92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	f040 80da 	bne.w	8002d56 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_I2C_Master_Transmit+0x30>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e0d3      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x1d8>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bb8:	f7ff fb08 	bl	80021cc <HAL_GetTick>
 8002bbc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2319      	movs	r3, #25
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f9e6 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0be      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2221      	movs	r2, #33	; 0x21
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2210      	movs	r2, #16
 8002be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	893a      	ldrh	r2, [r7, #8]
 8002bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2bff      	cmp	r3, #255	; 0xff
 8002c0a:	d90e      	bls.n	8002c2a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	22ff      	movs	r2, #255	; 0xff
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	8979      	ldrh	r1, [r7, #10]
 8002c1a:	4b51      	ldr	r3, [pc, #324]	; (8002d60 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fb48 	bl	80032b8 <I2C_TransferConfig>
 8002c28:	e06c      	b.n	8002d04 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	8979      	ldrh	r1, [r7, #10]
 8002c3c:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fb37 	bl	80032b8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c4a:	e05b      	b.n	8002d04 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	6a39      	ldr	r1, [r7, #32]
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f9e3 	bl	800301c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e07b      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d034      	beq.n	8002d04 <HAL_I2C_Master_Transmit+0x184>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d130      	bne.n	8002d04 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f975 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e04d      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2bff      	cmp	r3, #255	; 0xff
 8002cc4:	d90e      	bls.n	8002ce4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	22ff      	movs	r2, #255	; 0xff
 8002cca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	8979      	ldrh	r1, [r7, #10]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 faeb 	bl	80032b8 <I2C_TransferConfig>
 8002ce2:	e00f      	b.n	8002d04 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	8979      	ldrh	r1, [r7, #10]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fada 	bl	80032b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d19e      	bne.n	8002c4c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	6a39      	ldr	r1, [r7, #32]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f9c2 	bl	800309c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e01a      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2220      	movs	r2, #32
 8002d28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d36:	400b      	ands	r3, r1
 8002d38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
  }
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	80002000 	.word	0x80002000
 8002d64:	fe00e800 	.word	0xfe00e800

08002d68 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	461a      	mov	r2, r3
 8002d74:	460b      	mov	r3, r1
 8002d76:	817b      	strh	r3, [r7, #10]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	f040 80db 	bne.w	8002f40 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_I2C_Master_Receive+0x30>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e0d4      	b.n	8002f42 <HAL_I2C_Master_Receive+0x1da>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002da0:	f7ff fa14 	bl	80021cc <HAL_GetTick>
 8002da4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2319      	movs	r3, #25
 8002dac:	2201      	movs	r2, #1
 8002dae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f8f2 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0bf      	b.n	8002f42 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2222      	movs	r2, #34	; 0x22
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2210      	movs	r2, #16
 8002dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	893a      	ldrh	r2, [r7, #8]
 8002de2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2bff      	cmp	r3, #255	; 0xff
 8002df2:	d90e      	bls.n	8002e12 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	22ff      	movs	r2, #255	; 0xff
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	8979      	ldrh	r1, [r7, #10]
 8002e02:	4b52      	ldr	r3, [pc, #328]	; (8002f4c <HAL_I2C_Master_Receive+0x1e4>)
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fa54 	bl	80032b8 <I2C_TransferConfig>
 8002e10:	e06d      	b.n	8002eee <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	8979      	ldrh	r1, [r7, #10]
 8002e24:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <HAL_I2C_Master_Receive+0x1e4>)
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fa43 	bl	80032b8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002e32:	e05c      	b.n	8002eee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	6a39      	ldr	r1, [r7, #32]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f96b 	bl	8003114 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e07c      	b.n	8002f42 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d034      	beq.n	8002eee <HAL_I2C_Master_Receive+0x186>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d130      	bne.n	8002eee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2200      	movs	r2, #0
 8002e94:	2180      	movs	r1, #128	; 0x80
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f880 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e04d      	b.n	8002f42 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2bff      	cmp	r3, #255	; 0xff
 8002eae:	d90e      	bls.n	8002ece <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	22ff      	movs	r2, #255	; 0xff
 8002eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	8979      	ldrh	r1, [r7, #10]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f9f6 	bl	80032b8 <I2C_TransferConfig>
 8002ecc:	e00f      	b.n	8002eee <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	8979      	ldrh	r1, [r7, #10]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f9e5 	bl	80032b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d19d      	bne.n	8002e34 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	6a39      	ldr	r1, [r7, #32]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f8cd 	bl	800309c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e01a      	b.n	8002f42 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2220      	movs	r2, #32
 8002f12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <HAL_I2C_Master_Receive+0x1e8>)
 8002f20:	400b      	ands	r3, r1
 8002f22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	80002400 	.word	0x80002400
 8002f50:	fe00e800 	.word	0xfe00e800

08002f54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d103      	bne.n	8002f72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d007      	beq.n	8002f90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	619a      	str	r2, [r3, #24]
  }
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fac:	e022      	b.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d01e      	beq.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7ff f909 	bl	80021cc <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d113      	bne.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e00f      	b.n	8003014 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	429a      	cmp	r2, r3
 8003010:	d0cd      	beq.n	8002fae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003028:	e02c      	b.n	8003084 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f8dc 	bl	80031ec <I2C_IsAcknowledgeFailed>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e02a      	b.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d01e      	beq.n	8003084 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003046:	f7ff f8c1 	bl	80021cc <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d113      	bne.n	8003084 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	f043 0220 	orr.w	r2, r3, #32
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d1cb      	bne.n	800302a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030a8:	e028      	b.n	80030fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f89c 	bl	80031ec <I2C_IsAcknowledgeFailed>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e026      	b.n	800310c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7ff f885 	bl	80021cc <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d113      	bne.n	80030fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e007      	b.n	800310c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b20      	cmp	r3, #32
 8003108:	d1cf      	bne.n	80030aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003120:	e055      	b.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f860 	bl	80031ec <I2C_IsAcknowledgeFailed>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e053      	b.n	80031de <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b20      	cmp	r3, #32
 8003142:	d129      	bne.n	8003198 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b04      	cmp	r3, #4
 8003150:	d105      	bne.n	800315e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e03f      	b.n	80031de <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2220      	movs	r2, #32
 8003164:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003172:	400b      	ands	r3, r1
 8003174:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e022      	b.n	80031de <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003198:	f7ff f818 	bl	80021cc <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d302      	bcc.n	80031ae <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f043 0220 	orr.w	r2, r3, #32
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e007      	b.n	80031de <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d1a2      	bne.n	8003122 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	fe00e800 	.word	0xfe00e800

080031ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b10      	cmp	r3, #16
 8003204:	d151      	bne.n	80032aa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003206:	e022      	b.n	800324e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320e:	d01e      	beq.n	800324e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003210:	f7fe ffdc 	bl	80021cc <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	429a      	cmp	r2, r3
 800321e:	d302      	bcc.n	8003226 <I2C_IsAcknowledgeFailed+0x3a>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d113      	bne.n	800324e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f043 0220 	orr.w	r2, r3, #32
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e02e      	b.n	80032ac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b20      	cmp	r3, #32
 800325a:	d1d5      	bne.n	8003208 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2210      	movs	r2, #16
 8003262:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2220      	movs	r2, #32
 800326a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff fe71 	bl	8002f54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <I2C_IsAcknowledgeFailed+0xc8>)
 800327e:	400b      	ands	r3, r1
 8003280:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	fe00e800 	.word	0xfe00e800

080032b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	817b      	strh	r3, [r7, #10]
 80032c6:	4613      	mov	r3, r2
 80032c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	0d5b      	lsrs	r3, r3, #21
 80032d4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <I2C_TransferConfig+0x58>)
 80032da:	430b      	orrs	r3, r1
 80032dc:	43db      	mvns	r3, r3
 80032de:	ea02 0103 	and.w	r1, r2, r3
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032e8:	7a7b      	ldrb	r3, [r7, #9]
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	431a      	orrs	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	03ff63ff 	.word	0x03ff63ff

08003314 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b20      	cmp	r3, #32
 8003328:	d138      	bne.n	800339c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003334:	2302      	movs	r3, #2
 8003336:	e032      	b.n	800339e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2224      	movs	r2, #36	; 0x24
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003366:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6819      	ldr	r1, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	e000      	b.n	800339e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
  }
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d139      	bne.n	8003434 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e033      	b.n	8003436 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2224      	movs	r2, #36	; 0x24
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003442:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003444:	b08b      	sub	sp, #44	; 0x2c
 8003446:	af06      	add	r7, sp, #24
 8003448:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0da      	b.n	800360a <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d106      	bne.n	800346e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f009 fe63 	bl	800d134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2203      	movs	r2, #3
 8003472:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f003 fb20 	bl	8006ac0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	687e      	ldr	r6, [r7, #4]
 8003488:	466d      	mov	r5, sp
 800348a:	f106 0410 	add.w	r4, r6, #16
 800348e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	602b      	str	r3, [r5, #0]
 8003496:	1d33      	adds	r3, r6, #4
 8003498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800349a:	6838      	ldr	r0, [r7, #0]
 800349c:	f003 fae6 	bl	8006a6c <USB_CoreInit>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e0ab      	b.n	800360a <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f003 fb1c 	bl	8006af6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	e035      	b.n	8003530 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	015b      	lsls	r3, r3, #5
 80034ca:	4413      	add	r3, r2
 80034cc:	3329      	adds	r3, #41	; 0x29
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	015b      	lsls	r3, r3, #5
 80034d8:	4413      	add	r3, r2
 80034da:	3328      	adds	r3, #40	; 0x28
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	b291      	uxth	r1, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	015b      	lsls	r3, r3, #5
 80034ea:	4413      	add	r3, r2
 80034ec:	3336      	adds	r3, #54	; 0x36
 80034ee:	460a      	mov	r2, r1
 80034f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	015b      	lsls	r3, r3, #5
 80034f8:	4413      	add	r3, r2
 80034fa:	332b      	adds	r3, #43	; 0x2b
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	015b      	lsls	r3, r3, #5
 8003506:	4413      	add	r3, r2
 8003508:	3338      	adds	r3, #56	; 0x38
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	015b      	lsls	r3, r3, #5
 8003514:	4413      	add	r3, r2
 8003516:	333c      	adds	r3, #60	; 0x3c
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	3302      	adds	r3, #2
 8003522:	015b      	lsls	r3, r3, #5
 8003524:	4413      	add	r3, r2
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	3301      	adds	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	429a      	cmp	r2, r3
 8003538:	d3c4      	bcc.n	80034c4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	e031      	b.n	80035a4 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	015b      	lsls	r3, r3, #5
 8003546:	4413      	add	r3, r2
 8003548:	f203 1329 	addw	r3, r3, #297	; 0x129
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	015b      	lsls	r3, r3, #5
 8003556:	4413      	add	r3, r2
 8003558:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	015b      	lsls	r3, r3, #5
 8003566:	4413      	add	r3, r2
 8003568:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	015b      	lsls	r3, r3, #5
 8003576:	4413      	add	r3, r2
 8003578:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	015b      	lsls	r3, r3, #5
 8003586:	4413      	add	r3, r2
 8003588:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	330a      	adds	r3, #10
 8003596:	015b      	lsls	r3, r3, #5
 8003598:	4413      	add	r3, r2
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	3301      	adds	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d3c8      	bcc.n	8003540 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	687e      	ldr	r6, [r7, #4]
 80035b6:	466d      	mov	r5, sp
 80035b8:	f106 0410 	add.w	r4, r6, #16
 80035bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	602b      	str	r3, [r5, #0]
 80035c4:	1d33      	adds	r3, r6, #4
 80035c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c8:	6838      	ldr	r0, [r7, #0]
 80035ca:	f003 faa1 	bl	8006b10 <USB_DevInit>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e014      	b.n	800360a <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d102      	bne.n	80035fe <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fe3a 	bl	8004272 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f004 fae7 	bl	8007bd6 <USB_DevDisconnect>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003612 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_PCD_Start+0x16>
 8003624:	2302      	movs	r3, #2
 8003626:	e012      	b.n	800364e <HAL_PCD_Start+0x3c>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f004 fab7 	bl	8007ba8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f003 fa25 	bl	8006a8e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f004 facc 	bl	8007c00 <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800366e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003672:	d102      	bne.n	800367a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fb33 	bl	8003ce0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f004 fabe 	bl	8007c00 <USB_ReadInterrupts>
 8003684:	4603      	mov	r3, r0
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368e:	d112      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003698:	b29a      	uxth	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a2:	b292      	uxth	r2, r2
 80036a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f009 fdb8 	bl	800d21e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036ae:	2100      	movs	r1, #0
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f91e 	bl	80038f2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f004 faa0 	bl	8007c00 <USB_ReadInterrupts>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ca:	d10b      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036de:	b292      	uxth	r2, r2
 80036e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 fa89 	bl	8007c00 <USB_ReadInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f8:	d10b      	bne.n	8003712 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003702:	b29a      	uxth	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800370c:	b292      	uxth	r2, r2
 800370e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f004 fa72 	bl	8007c00 <USB_ReadInterrupts>
 800371c:	4603      	mov	r3, r0
 800371e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003726:	d133      	bne.n	8003790 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003730:	b29a      	uxth	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0204 	bic.w	r2, r2, #4
 800373a:	b292      	uxth	r2, r2
 800373c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003748:	b29a      	uxth	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0208 	bic.w	r2, r2, #8
 8003752:	b292      	uxth	r2, r2
 8003754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800375e:	2b01      	cmp	r3, #1
 8003760:	d107      	bne.n	8003772 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800376a:	2100      	movs	r1, #0
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f00a f803 	bl	800d778 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f009 fd8c 	bl	800d290 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003780:	b29a      	uxth	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800378a:	b292      	uxth	r2, r2
 800378c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f004 fa33 	bl	8007c00 <USB_ReadInterrupts>
 800379a:	4603      	mov	r3, r0
 800379c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a4:	d126      	bne.n	80037f4 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0208 	orr.w	r2, r2, #8
 80037b8:	b292      	uxth	r2, r2
 80037ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d0:	b292      	uxth	r2, r2
 80037d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037de:	b29a      	uxth	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0204 	orr.w	r2, r2, #4
 80037e8:	b292      	uxth	r2, r2
 80037ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f009 fd34 	bl	800d25c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 fa01 	bl	8007c00 <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003804:	2b80      	cmp	r3, #128	; 0x80
 8003806:	d13f      	bne.n	8003888 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003810:	b29a      	uxth	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800381a:	b292      	uxth	r2, r2
 800381c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003826:	2b00      	cmp	r3, #0
 8003828:	d12b      	bne.n	8003882 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0204 	orr.w	r2, r2, #4
 800383c:	b292      	uxth	r2, r2
 800383e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0208 	orr.w	r2, r2, #8
 8003854:	b292      	uxth	r2, r2
 8003856:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800386a:	b29b      	uxth	r3, r3
 800386c:	089b      	lsrs	r3, r3, #2
 800386e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003878:	2101      	movs	r1, #1
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f009 ff7c 	bl	800d778 <HAL_PCDEx_LPM_Callback>
 8003880:	e002      	b.n	8003888 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f009 fcea 	bl	800d25c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f004 f9b7 	bl	8007c00 <USB_ReadInterrupts>
 8003892:	4603      	mov	r3, r0
 8003894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800389c:	d10e      	bne.n	80038bc <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038b0:	b292      	uxth	r2, r2
 80038b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f009 fca3 	bl	800d202 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f004 f99d 	bl	8007c00 <USB_ReadInterrupts>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d0:	d10b      	bne.n	80038ea <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e4:	b292      	uxth	r2, r2
 80038e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_PCD_SetAddress+0x1a>
 8003908:	2302      	movs	r3, #2
 800390a:	e013      	b.n	8003934 <HAL_PCD_SetAddress+0x42>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f004 f92b 	bl	8007b80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	4608      	mov	r0, r1
 8003946:	4611      	mov	r1, r2
 8003948:	461a      	mov	r2, r3
 800394a:	4603      	mov	r3, r0
 800394c:	70fb      	strb	r3, [r7, #3]
 800394e:	460b      	mov	r3, r1
 8003950:	803b      	strh	r3, [r7, #0]
 8003952:	4613      	mov	r3, r2
 8003954:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800395a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800395e:	2b00      	cmp	r3, #0
 8003960:	da0b      	bge.n	800397a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	015b      	lsls	r3, r3, #5
 800396a:	3328      	adds	r3, #40	; 0x28
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	705a      	strb	r2, [r3, #1]
 8003978:	e00b      	b.n	8003992 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	015b      	lsls	r3, r3, #5
 8003982:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800399e:	883a      	ldrh	r2, [r7, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	78ba      	ldrb	r2, [r7, #2]
 80039a8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	785b      	ldrb	r3, [r3, #1]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d004      	beq.n	80039bc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039bc:	78bb      	ldrb	r3, [r7, #2]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d102      	bne.n	80039c8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_PCD_EP_Open+0x9a>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e00e      	b.n	80039f4 <HAL_PCD_EP_Open+0xb8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f003 f8b7 	bl	8006b58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80039f2:	7afb      	ldrb	r3, [r7, #11]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da0b      	bge.n	8003a28 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	015b      	lsls	r3, r3, #5
 8003a18:	3328      	adds	r3, #40	; 0x28
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	705a      	strb	r2, [r3, #1]
 8003a26:	e00b      	b.n	8003a40 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	015b      	lsls	r3, r3, #5
 8003a30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_PCD_EP_Close+0x5e>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e00e      	b.n	8003a78 <HAL_PCD_EP_Close+0x7c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 fb65 	bl	8007138 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a90:	7afb      	ldrb	r3, [r7, #11]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	015b      	lsls	r3, r3, #5
 8003a98:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6979      	ldr	r1, [r7, #20]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f003 fcc4 	bl	8007464 <USB_EPStartXfer>
 8003adc:	e005      	b.n	8003aea <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6979      	ldr	r1, [r7, #20]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f003 fcbd 	bl	8007464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	330a      	adds	r3, #10
 8003b0a:	015b      	lsls	r3, r3, #5
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3304      	adds	r3, #4
 8003b10:	681b      	ldr	r3, [r3, #0]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b086      	sub	sp, #24
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2e:	7afb      	ldrb	r3, [r7, #11]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	015b      	lsls	r3, r3, #5
 8003b36:	3328      	adds	r3, #40	; 0x28
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2201      	movs	r2, #1
 8003b54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b56:	7afb      	ldrb	r3, [r7, #11]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d106      	bne.n	8003b7a <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6979      	ldr	r1, [r7, #20]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f003 fc76 	bl	8007464 <USB_EPStartXfer>
 8003b78:	e005      	b.n	8003b86 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6979      	ldr	r1, [r7, #20]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 fc6f 	bl	8007464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	f003 0207 	and.w	r2, r3, #7
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d901      	bls.n	8003bae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e046      	b.n	8003c3c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	da0b      	bge.n	8003bce <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	015b      	lsls	r3, r3, #5
 8003bbe:	3328      	adds	r3, #40	; 0x28
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	705a      	strb	r2, [r3, #1]
 8003bcc:	e009      	b.n	8003be2 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	015b      	lsls	r3, r3, #5
 8003bd2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_PCD_EP_SetStall+0x72>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e01c      	b.n	8003c3c <HAL_PCD_EP_SetStall+0xac>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68f9      	ldr	r1, [r7, #12]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f003 fedf 	bl	80079d4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d108      	bne.n	8003c32 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f003 fff7 	bl	8007c20 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	f003 020f 	and.w	r2, r3, #15
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d901      	bls.n	8003c62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e03a      	b.n	8003cd8 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	da0b      	bge.n	8003c82 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	015b      	lsls	r3, r3, #5
 8003c72:	3328      	adds	r3, #40	; 0x28
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	4413      	add	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	705a      	strb	r2, [r3, #1]
 8003c80:	e00b      	b.n	8003c9a <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	015b      	lsls	r3, r3, #5
 8003c8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_PCD_EP_ClrStall+0x76>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e00e      	b.n	8003cd8 <HAL_PCD_EP_ClrStall+0x94>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 fec5 	bl	8007a58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003ce0:	b590      	push	{r4, r7, lr}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ce8:	e274      	b.n	80041d4 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cf2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003cf4:	8afb      	ldrh	r3, [r7, #22]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003cfe:	7d7b      	ldrb	r3, [r7, #21]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 813c 	bne.w	8003f7e <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d06:	8afb      	ldrh	r3, [r7, #22]
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d14f      	bne.n	8003db0 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d20:	b29c      	uxth	r4, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3328      	adds	r3, #40	; 0x28
 8003d36:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	441a      	add	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d6e:	2100      	movs	r1, #0
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f009 fa2f 	bl	800d1d4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8228 	beq.w	80041d4 <PCD_EP_ISR_Handler+0x4f4>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f040 8223 	bne.w	80041d4 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b292      	uxth	r2, r2
 8003da2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003dae:	e211      	b.n	80041d4 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003db6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003dc0:	8a7b      	ldrh	r3, [r7, #18]
 8003dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d031      	beq.n	8003e2e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4413      	add	r3, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f003 ff58 	bl	8007cba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e16:	4013      	ands	r3, r2
 8003e18:	b29c      	uxth	r4, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003e22:	b292      	uxth	r2, r2
 8003e24:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f009 f9aa 	bl	800d180 <HAL_PCD_SetupStageCallback>
 8003e2c:	e1d2      	b.n	80041d4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f280 81ce 	bge.w	80041d4 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e44:	4013      	ands	r3, r2
 8003e46:	b29c      	uxth	r4, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003e50:	b292      	uxth	r2, r2
 8003e52:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d019      	beq.n	8003eb8 <PCD_EP_ISR_Handler+0x1d8>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d015      	beq.n	8003eb8 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6959      	ldr	r1, [r3, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f003 ff0c 	bl	8007cba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	441a      	add	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f009 f976 	bl	800d1a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461c      	mov	r4, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	441c      	add	r4, r3
 8003eca:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003ece:	461c      	mov	r4, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10e      	bne.n	8003ef6 <PCD_EP_ISR_Handler+0x216>
 8003ed8:	8823      	ldrh	r3, [r4, #0]
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	8023      	strh	r3, [r4, #0]
 8003ee4:	8823      	ldrh	r3, [r4, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	8023      	strh	r3, [r4, #0]
 8003ef4:	e02d      	b.n	8003f52 <PCD_EP_ISR_Handler+0x272>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b3e      	cmp	r3, #62	; 0x3e
 8003efc:	d812      	bhi.n	8003f24 <PCD_EP_ISR_Handler+0x244>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <PCD_EP_ISR_Handler+0x238>
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	3301      	adds	r3, #1
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	029b      	lsls	r3, r3, #10
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	8023      	strh	r3, [r4, #0]
 8003f22:	e016      	b.n	8003f52 <PCD_EP_ISR_Handler+0x272>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <PCD_EP_ISR_Handler+0x25e>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	029b      	lsls	r3, r3, #10
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f62:	b29c      	uxth	r4, r3
 8003f64:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003f68:	b29c      	uxth	r4, r3
 8003f6a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003f6e:	b29c      	uxth	r4, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b9e      	ldr	r3, [pc, #632]	; (80041f0 <PCD_EP_ISR_Handler+0x510>)
 8003f76:	4323      	orrs	r3, r4
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	8013      	strh	r3, [r2, #0]
 8003f7c:	e12a      	b.n	80041d4 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	7d7b      	ldrb	r3, [r7, #21]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f280 80cb 	bge.w	800412e <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	7d7b      	ldrb	r3, [r7, #21]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003fac:	4013      	ands	r3, r2
 8003fae:	b29c      	uxth	r4, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	7d7b      	ldrb	r3, [r7, #21]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003fc0:	b292      	uxth	r2, r2
 8003fc2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003fc4:	7d7b      	ldrb	r3, [r7, #21]
 8003fc6:	015b      	lsls	r3, r3, #5
 8003fc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4413      	add	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	7b1b      	ldrb	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11f      	bne.n	800401a <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4413      	add	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ffe:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004000:	8bfb      	ldrh	r3, [r7, #30]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d06e      	beq.n	80040e4 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6959      	ldr	r1, [r3, #20]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	88da      	ldrh	r2, [r3, #6]
 8004012:	8bfb      	ldrh	r3, [r7, #30]
 8004014:	f003 fe51 	bl	8007cba <USB_ReadPMA>
 8004018:	e064      	b.n	80040e4 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004034:	b29c      	uxth	r4, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	441a      	add	r2, r3
 8004044:	4b6b      	ldr	r3, [pc, #428]	; (80041f4 <PCD_EP_ISR_Handler+0x514>)
 8004046:	4323      	orrs	r3, r4
 8004048:	b29b      	uxth	r3, r3
 800404a:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29b      	uxth	r3, r3
 800405e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01f      	beq.n	80040a6 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	4413      	add	r3, r2
 8004080:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800408a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800408c:	8bfb      	ldrh	r3, [r7, #30]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d028      	beq.n	80040e4 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6959      	ldr	r1, [r3, #20]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	891a      	ldrh	r2, [r3, #8]
 800409e:	8bfb      	ldrh	r3, [r7, #30]
 80040a0:	f003 fe0b 	bl	8007cba <USB_ReadPMA>
 80040a4:	e01e      	b.n	80040e4 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ca:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80040cc:	8bfb      	ldrh	r3, [r7, #30]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6959      	ldr	r1, [r3, #20]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	895a      	ldrh	r2, [r3, #10]
 80040de:	8bfb      	ldrh	r3, [r7, #30]
 80040e0:	f003 fdeb 	bl	8007cba <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	8bfb      	ldrh	r3, [r7, #30]
 80040ea:	441a      	add	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	8bfb      	ldrh	r3, [r7, #30]
 80040f6:	441a      	add	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <PCD_EP_ISR_Handler+0x42e>
 8004104:	8bfa      	ldrh	r2, [r7, #30]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	429a      	cmp	r2, r3
 800410c:	d206      	bcs.n	800411c <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f009 f845 	bl	800d1a4 <HAL_PCD_DataOutStageCallback>
 800411a:	e008      	b.n	800412e <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	7819      	ldrb	r1, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff fca9 	bl	8003a80 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800412e:	8a7b      	ldrh	r3, [r7, #18]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d04d      	beq.n	80041d4 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004138:	7d7b      	ldrb	r3, [r7, #21]
 800413a:	015b      	lsls	r3, r3, #5
 800413c:	3328      	adds	r3, #40	; 0x28
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	7d7b      	ldrb	r3, [r7, #21]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415c:	b29c      	uxth	r4, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	7d7b      	ldrb	r3, [r7, #21]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	441a      	add	r2, r3
 800416a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800416e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004172:	b29b      	uxth	r3, r3
 8004174:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417e:	b29b      	uxth	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	4413      	add	r3, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	4413      	add	r3, r2
 8004190:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	441a      	add	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d106      	bne.n	80041c2 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	4619      	mov	r1, r3
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f009 f80a 	bl	800d1d4 <HAL_PCD_DataInStageCallback>
 80041c0:	e008      	b.n	80041d4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	7819      	ldrb	r1, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	695a      	ldr	r2, [r3, #20]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff fca5 	bl	8003b1e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041dc:	b29b      	uxth	r3, r3
 80041de:	b21b      	sxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f6ff ad82 	blt.w	8003cea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3724      	adds	r7, #36	; 0x24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd90      	pop	{r4, r7, pc}
 80041f0:	ffff8080 	.word	0xffff8080
 80041f4:	ffff80c0 	.word	0xffff80c0

080041f8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	817b      	strh	r3, [r7, #10]
 8004206:	4613      	mov	r3, r2
 8004208:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800420a:	897b      	ldrh	r3, [r7, #10]
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004216:	897b      	ldrh	r3, [r7, #10]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	015b      	lsls	r3, r3, #5
 800421e:	3328      	adds	r3, #40	; 0x28
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	e006      	b.n	8004236 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004228:	897b      	ldrh	r3, [r7, #10]
 800422a:	015b      	lsls	r3, r3, #5
 800422c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004236:	893b      	ldrh	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d107      	bne.n	800424c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2200      	movs	r2, #0
 8004240:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	b29a      	uxth	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	80da      	strh	r2, [r3, #6]
 800424a:	e00b      	b.n	8004264 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2201      	movs	r2, #1
 8004250:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	b29a      	uxth	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	b29a      	uxth	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004296:	b29b      	uxth	r3, r3
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f043 0302 	orr.w	r3, r3, #2
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40007000 	.word	0x40007000

080042e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f2:	d130      	bne.n	8004356 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042f4:	4b23      	ldr	r3, [pc, #140]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004300:	d038      	beq.n	8004374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004302:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800430a:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800430c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004310:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2232      	movs	r2, #50	; 0x32
 8004318:	fb02 f303 	mul.w	r3, r2, r3
 800431c:	4a1b      	ldr	r2, [pc, #108]	; (800438c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	0c9b      	lsrs	r3, r3, #18
 8004324:	3301      	adds	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004328:	e002      	b.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3b01      	subs	r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004330:	4b14      	ldr	r3, [pc, #80]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433c:	d102      	bne.n	8004344 <HAL_PWREx_ControlVoltageScaling+0x60>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f2      	bne.n	800432a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004350:	d110      	bne.n	8004374 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e00f      	b.n	8004376 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800435e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004362:	d007      	beq.n	8004374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800436c:	4a05      	ldr	r2, [pc, #20]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800436e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004372:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40007000 	.word	0x40007000
 8004388:	20000040 	.word	0x20000040
 800438c:	431bde83 	.word	0x431bde83

08004390 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_PWREx_EnableVddUSB+0x1c>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a04      	ldr	r2, [pc, #16]	; (80043ac <HAL_PWREx_EnableVddUSB+0x1c>)
 800439a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800439e:	6053      	str	r3, [r2, #4]
}
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40007000 	.word	0x40007000

080043b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f000 bc11 	b.w	8004be6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c4:	4ba0      	ldr	r3, [pc, #640]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 030c 	and.w	r3, r3, #12
 80043cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ce:	4b9e      	ldr	r3, [pc, #632]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80e4 	beq.w	80045ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <HAL_RCC_OscConfig+0x4c>
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b0c      	cmp	r3, #12
 80043f0:	f040 808b 	bne.w	800450a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	f040 8087 	bne.w	800450a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043fc:	4b92      	ldr	r3, [pc, #584]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_RCC_OscConfig+0x64>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e3e8      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	4b8b      	ldr	r3, [pc, #556]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d004      	beq.n	800442e <HAL_RCC_OscConfig+0x7e>
 8004424:	4b88      	ldr	r3, [pc, #544]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800442c:	e005      	b.n	800443a <HAL_RCC_OscConfig+0x8a>
 800442e:	4b86      	ldr	r3, [pc, #536]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004434:	091b      	lsrs	r3, r3, #4
 8004436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443a:	4293      	cmp	r3, r2
 800443c:	d223      	bcs.n	8004486 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fd94 	bl	8004f70 <RCC_SetFlashLatencyFromMSIRange>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e3c9      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004452:	4b7d      	ldr	r3, [pc, #500]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a7c      	ldr	r2, [pc, #496]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004458:	f043 0308 	orr.w	r3, r3, #8
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	4b7a      	ldr	r3, [pc, #488]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	4977      	ldr	r1, [pc, #476]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004470:	4b75      	ldr	r3, [pc, #468]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	4972      	ldr	r1, [pc, #456]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
 8004484:	e025      	b.n	80044d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004486:	4b70      	ldr	r3, [pc, #448]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a6f      	ldr	r2, [pc, #444]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800448c:	f043 0308 	orr.w	r3, r3, #8
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b6d      	ldr	r3, [pc, #436]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	496a      	ldr	r1, [pc, #424]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a4:	4b68      	ldr	r3, [pc, #416]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	4965      	ldr	r1, [pc, #404]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fd54 	bl	8004f70 <RCC_SetFlashLatencyFromMSIRange>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e389      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044d2:	f000 fc6f 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 80044d6:	4601      	mov	r1, r0
 80044d8:	4b5b      	ldr	r3, [pc, #364]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	4a5a      	ldr	r2, [pc, #360]	; (800464c <HAL_RCC_OscConfig+0x29c>)
 80044e4:	5cd3      	ldrb	r3, [r2, r3]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	fa21 f303 	lsr.w	r3, r1, r3
 80044ee:	4a58      	ldr	r2, [pc, #352]	; (8004650 <HAL_RCC_OscConfig+0x2a0>)
 80044f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044f2:	4b58      	ldr	r3, [pc, #352]	; (8004654 <HAL_RCC_OscConfig+0x2a4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fd f9e2 	bl	80018c0 <HAL_InitTick>
 80044fc:	4603      	mov	r3, r0
 80044fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d052      	beq.n	80045ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	e36d      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d032      	beq.n	8004578 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004512:	4b4d      	ldr	r3, [pc, #308]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a4c      	ldr	r2, [pc, #304]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800451e:	f7fd fe55 	bl	80021cc <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004526:	f7fd fe51 	bl	80021cc <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e356      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004538:	4b43      	ldr	r3, [pc, #268]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004544:	4b40      	ldr	r3, [pc, #256]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a3f      	ldr	r2, [pc, #252]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800454a:	f043 0308 	orr.w	r3, r3, #8
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b3d      	ldr	r3, [pc, #244]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	493a      	ldr	r1, [pc, #232]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004562:	4b39      	ldr	r3, [pc, #228]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	4935      	ldr	r1, [pc, #212]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]
 8004576:	e01a      	b.n	80045ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004578:	4b33      	ldr	r3, [pc, #204]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a32      	ldr	r2, [pc, #200]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004584:	f7fd fe22 	bl	80021cc <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800458c:	f7fd fe1e 	bl	80021cc <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e323      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800459e:	4b2a      	ldr	r3, [pc, #168]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x1dc>
 80045aa:	e000      	b.n	80045ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d073      	beq.n	80046a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d005      	beq.n	80045cc <HAL_RCC_OscConfig+0x21c>
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b0c      	cmp	r3, #12
 80045c4:	d10e      	bne.n	80045e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d10b      	bne.n	80045e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045cc:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d063      	beq.n	80046a0 <HAL_RCC_OscConfig+0x2f0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d15f      	bne.n	80046a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e300      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ec:	d106      	bne.n	80045fc <HAL_RCC_OscConfig+0x24c>
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a15      	ldr	r2, [pc, #84]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e01d      	b.n	8004638 <HAL_RCC_OscConfig+0x288>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004604:	d10c      	bne.n	8004620 <HAL_RCC_OscConfig+0x270>
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a0f      	ldr	r2, [pc, #60]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800460c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a0c      	ldr	r2, [pc, #48]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	e00b      	b.n	8004638 <HAL_RCC_OscConfig+0x288>
 8004620:	4b09      	ldr	r3, [pc, #36]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a08      	ldr	r2, [pc, #32]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a05      	ldr	r2, [pc, #20]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01b      	beq.n	8004678 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fd fdc4 	bl	80021cc <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004646:	e010      	b.n	800466a <HAL_RCC_OscConfig+0x2ba>
 8004648:	40021000 	.word	0x40021000
 800464c:	0800dab0 	.word	0x0800dab0
 8004650:	20000040 	.word	0x20000040
 8004654:	2000006c 	.word	0x2000006c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7fd fdb8 	bl	80021cc <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e2bd      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800466a:	4baf      	ldr	r3, [pc, #700]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x2a8>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fd fda8 	bl	80021cc <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7fd fda4 	bl	80021cc <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e2a9      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004692:	4ba5      	ldr	r3, [pc, #660]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x2d0>
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d060      	beq.n	8004770 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_OscConfig+0x310>
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d119      	bne.n	80046ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d116      	bne.n	80046ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c0:	4b99      	ldr	r3, [pc, #612]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_OscConfig+0x328>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e286      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d8:	4b93      	ldr	r3, [pc, #588]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	061b      	lsls	r3, r3, #24
 80046e6:	4990      	ldr	r1, [pc, #576]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ec:	e040      	b.n	8004770 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d023      	beq.n	800473e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f6:	4b8c      	ldr	r3, [pc, #560]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a8b      	ldr	r2, [pc, #556]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80046fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004702:	f7fd fd63 	bl	80021cc <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470a:	f7fd fd5f 	bl	80021cc <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e264      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800471c:	4b82      	ldr	r3, [pc, #520]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004728:	4b7f      	ldr	r3, [pc, #508]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	497c      	ldr	r1, [pc, #496]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004738:	4313      	orrs	r3, r2
 800473a:	604b      	str	r3, [r1, #4]
 800473c:	e018      	b.n	8004770 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800473e:	4b7a      	ldr	r3, [pc, #488]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a79      	ldr	r2, [pc, #484]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd fd3f 	bl	80021cc <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004752:	f7fd fd3b 	bl	80021cc <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e240      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004764:	4b70      	ldr	r3, [pc, #448]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1f0      	bne.n	8004752 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d03c      	beq.n	80047f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01c      	beq.n	80047be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004784:	4b68      	ldr	r3, [pc, #416]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478a:	4a67      	ldr	r2, [pc, #412]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7fd fd1a 	bl	80021cc <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479c:	f7fd fd16 	bl	80021cc <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e21b      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ae:	4b5e      	ldr	r3, [pc, #376]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80047b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0ef      	beq.n	800479c <HAL_RCC_OscConfig+0x3ec>
 80047bc:	e01b      	b.n	80047f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047be:	4b5a      	ldr	r3, [pc, #360]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80047c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c4:	4a58      	ldr	r2, [pc, #352]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ce:	f7fd fcfd 	bl	80021cc <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d6:	f7fd fcf9 	bl	80021cc <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e1fe      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047e8:	4b4f      	ldr	r3, [pc, #316]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80047ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ef      	bne.n	80047d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80a6 	beq.w	8004950 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004808:	4b47      	ldr	r3, [pc, #284]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10d      	bne.n	8004830 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004814:	4b44      	ldr	r3, [pc, #272]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	4a43      	ldr	r2, [pc, #268]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800481a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481e:	6593      	str	r3, [r2, #88]	; 0x58
 8004820:	4b41      	ldr	r3, [pc, #260]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482c:	2301      	movs	r3, #1
 800482e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004830:	4b3e      	ldr	r3, [pc, #248]	; (800492c <HAL_RCC_OscConfig+0x57c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004838:	2b00      	cmp	r3, #0
 800483a:	d118      	bne.n	800486e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800483c:	4b3b      	ldr	r3, [pc, #236]	; (800492c <HAL_RCC_OscConfig+0x57c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a3a      	ldr	r2, [pc, #232]	; (800492c <HAL_RCC_OscConfig+0x57c>)
 8004842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004846:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004848:	f7fd fcc0 	bl	80021cc <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004850:	f7fd fcbc 	bl	80021cc <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e1c1      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004862:	4b32      	ldr	r3, [pc, #200]	; (800492c <HAL_RCC_OscConfig+0x57c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d108      	bne.n	8004888 <HAL_RCC_OscConfig+0x4d8>
 8004876:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487c:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004886:	e024      	b.n	80048d2 <HAL_RCC_OscConfig+0x522>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b05      	cmp	r3, #5
 800488e:	d110      	bne.n	80048b2 <HAL_RCC_OscConfig+0x502>
 8004890:	4b25      	ldr	r3, [pc, #148]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	4a24      	ldr	r2, [pc, #144]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004898:	f043 0304 	orr.w	r3, r3, #4
 800489c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048a0:	4b21      	ldr	r3, [pc, #132]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	4a20      	ldr	r2, [pc, #128]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048b0:	e00f      	b.n	80048d2 <HAL_RCC_OscConfig+0x522>
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b8:	4a1b      	ldr	r2, [pc, #108]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048c2:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	4a17      	ldr	r2, [pc, #92]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048ca:	f023 0304 	bic.w	r3, r3, #4
 80048ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048da:	f7fd fc77 	bl	80021cc <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e0:	e00a      	b.n	80048f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fd fc73 	bl	80021cc <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e176      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0ed      	beq.n	80048e2 <HAL_RCC_OscConfig+0x532>
 8004906:	e01a      	b.n	800493e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004908:	f7fd fc60 	bl	80021cc <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800490e:	e00f      	b.n	8004930 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7fd fc5c 	bl	80021cc <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	; 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d906      	bls.n	8004930 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e15f      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004930:	4baa      	ldr	r3, [pc, #680]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e8      	bne.n	8004910 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800493e:	7ffb      	ldrb	r3, [r7, #31]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d105      	bne.n	8004950 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004944:	4ba5      	ldr	r3, [pc, #660]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	4aa4      	ldr	r2, [pc, #656]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 800494a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d03c      	beq.n	80049d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01c      	beq.n	800499e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004964:	4b9d      	ldr	r3, [pc, #628]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004966:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800496a:	4a9c      	ldr	r2, [pc, #624]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fd fc2a 	bl	80021cc <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800497c:	f7fd fc26 	bl	80021cc <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e12b      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800498e:	4b93      	ldr	r3, [pc, #588]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0ef      	beq.n	800497c <HAL_RCC_OscConfig+0x5cc>
 800499c:	e01b      	b.n	80049d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800499e:	4b8f      	ldr	r3, [pc, #572]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 80049a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049a4:	4a8d      	ldr	r2, [pc, #564]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ae:	f7fd fc0d 	bl	80021cc <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049b6:	f7fd fc09 	bl	80021cc <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e10e      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049c8:	4b84      	ldr	r3, [pc, #528]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 80049ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1ef      	bne.n	80049b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 8102 	beq.w	8004be4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	f040 80c5 	bne.w	8004b74 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049ea:	4b7c      	ldr	r3, [pc, #496]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f003 0203 	and.w	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d12c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d123      	bne.n	8004a58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d11b      	bne.n	8004a58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d113      	bne.n	8004a58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d109      	bne.n	8004a58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	3b01      	subs	r3, #1
 8004a52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d067      	beq.n	8004b28 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2b0c      	cmp	r3, #12
 8004a5c:	d062      	beq.n	8004b24 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a5e:	4b5f      	ldr	r3, [pc, #380]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e0bb      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a6e:	4b5b      	ldr	r3, [pc, #364]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a5a      	ldr	r2, [pc, #360]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004a74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a7a:	f7fd fba7 	bl	80021cc <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a82:	f7fd fba3 	bl	80021cc <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e0a8      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a94:	4b51      	ldr	r3, [pc, #324]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f0      	bne.n	8004a82 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aa0:	4b4e      	ldr	r3, [pc, #312]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	4b4e      	ldr	r3, [pc, #312]	; (8004be0 <HAL_RCC_OscConfig+0x830>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ab0:	3a01      	subs	r2, #1
 8004ab2:	0112      	lsls	r2, r2, #4
 8004ab4:	4311      	orrs	r1, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004aba:	0212      	lsls	r2, r2, #8
 8004abc:	4311      	orrs	r1, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ac2:	0852      	lsrs	r2, r2, #1
 8004ac4:	3a01      	subs	r2, #1
 8004ac6:	0552      	lsls	r2, r2, #21
 8004ac8:	4311      	orrs	r1, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ace:	0852      	lsrs	r2, r2, #1
 8004ad0:	3a01      	subs	r2, #1
 8004ad2:	0652      	lsls	r2, r2, #25
 8004ad4:	4311      	orrs	r1, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ada:	06d2      	lsls	r2, r2, #27
 8004adc:	430a      	orrs	r2, r1
 8004ade:	493f      	ldr	r1, [pc, #252]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ae4:	4b3d      	ldr	r3, [pc, #244]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a3c      	ldr	r2, [pc, #240]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004af0:	4b3a      	ldr	r3, [pc, #232]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4a39      	ldr	r2, [pc, #228]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004afa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004afc:	f7fd fb66 	bl	80021cc <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b04:	f7fd fb62 	bl	80021cc <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e067      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b16:	4b31      	ldr	r3, [pc, #196]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b22:	e05f      	b.n	8004be4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e05e      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b28:	4b2c      	ldr	r3, [pc, #176]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d157      	bne.n	8004be4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b34:	4b29      	ldr	r3, [pc, #164]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a28      	ldr	r2, [pc, #160]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b40:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b4c:	f7fd fb3e 	bl	80021cc <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fd fb3a 	bl	80021cc <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e03f      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b66:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x7a4>
 8004b72:	e037      	b.n	8004be4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d02d      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7a:	4b18      	ldr	r3, [pc, #96]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b84:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b92:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	4a11      	ldr	r2, [pc, #68]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004b98:	f023 0303 	bic.w	r3, r3, #3
 8004b9c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004ba4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bae:	f7fd fb0d 	bl	80021cc <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb6:	f7fd fb09 	bl	80021cc <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e00e      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <HAL_RCC_OscConfig+0x82c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f0      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x806>
 8004bd4:	e006      	b.n	8004be4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e005      	b.n	8004be6 <HAL_RCC_OscConfig+0x836>
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop

08004bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0c8      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c04:	4b66      	ldr	r3, [pc, #408]	; (8004da0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d910      	bls.n	8004c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b63      	ldr	r3, [pc, #396]	; (8004da0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 0207 	bic.w	r2, r3, #7
 8004c1a:	4961      	ldr	r1, [pc, #388]	; (8004da0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b5f      	ldr	r3, [pc, #380]	; (8004da0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0b0      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d04c      	beq.n	8004cda <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d107      	bne.n	8004c58 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c48:	4b56      	ldr	r3, [pc, #344]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d121      	bne.n	8004c98 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e09e      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c60:	4b50      	ldr	r3, [pc, #320]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d115      	bne.n	8004c98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e092      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d107      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c78:	4b4a      	ldr	r3, [pc, #296]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d109      	bne.n	8004c98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e086      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c88:	4b46      	ldr	r3, [pc, #280]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e07e      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c98:	4b42      	ldr	r3, [pc, #264]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f023 0203 	bic.w	r2, r3, #3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	493f      	ldr	r1, [pc, #252]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004caa:	f7fd fa8f 	bl	80021cc <HAL_GetTick>
 8004cae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb0:	e00a      	b.n	8004cc8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb2:	f7fd fa8b 	bl	80021cc <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e066      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc8:	4b36      	ldr	r3, [pc, #216]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 020c 	and.w	r2, r3, #12
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d1eb      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d008      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce6:	4b2f      	ldr	r3, [pc, #188]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	492c      	ldr	r1, [pc, #176]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <HAL_RCC_ClockConfig+0x1b0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d210      	bcs.n	8004d28 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b26      	ldr	r3, [pc, #152]	; (8004da0 <HAL_RCC_ClockConfig+0x1b0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 0207 	bic.w	r2, r3, #7
 8004d0e:	4924      	ldr	r1, [pc, #144]	; (8004da0 <HAL_RCC_ClockConfig+0x1b0>)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b22      	ldr	r3, [pc, #136]	; (8004da0 <HAL_RCC_ClockConfig+0x1b0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e036      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d34:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4918      	ldr	r1, [pc, #96]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d009      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d52:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4910      	ldr	r1, [pc, #64]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d66:	f000 f825 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <HAL_RCC_ClockConfig+0x1b4>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	4a0c      	ldr	r2, [pc, #48]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d78:	5cd3      	ldrb	r3, [r2, r3]
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	fa21 f303 	lsr.w	r3, r1, r3
 8004d82:	4a0a      	ldr	r2, [pc, #40]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fc fd98 	bl	80018c0 <HAL_InitTick>
 8004d90:	4603      	mov	r3, r0
 8004d92:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d94:	7afb      	ldrb	r3, [r7, #11]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40022000 	.word	0x40022000
 8004da4:	40021000 	.word	0x40021000
 8004da8:	0800dab0 	.word	0x0800dab0
 8004dac:	20000040 	.word	0x20000040
 8004db0:	2000006c 	.word	0x2000006c

08004db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b089      	sub	sp, #36	; 0x24
 8004db8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dc2:	4b3d      	ldr	r3, [pc, #244]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dcc:	4b3a      	ldr	r3, [pc, #232]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d121      	bne.n	8004e26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d11e      	bne.n	8004e26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004de8:	4b33      	ldr	r3, [pc, #204]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d107      	bne.n	8004e04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004df4:	4b30      	ldr	r3, [pc, #192]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	e005      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e04:	4b2c      	ldr	r3, [pc, #176]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e10:	4a2a      	ldr	r2, [pc, #168]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10d      	bne.n	8004e3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d102      	bne.n	8004e32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e2c:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	e004      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d101      	bne.n	8004e3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e38:	4b22      	ldr	r3, [pc, #136]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b0c      	cmp	r3, #12
 8004e40:	d133      	bne.n	8004eaa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e42:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d002      	beq.n	8004e58 <HAL_RCC_GetSysClockFreq+0xa4>
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d003      	beq.n	8004e5e <HAL_RCC_GetSysClockFreq+0xaa>
 8004e56:	e005      	b.n	8004e64 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e58:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e5a:	617b      	str	r3, [r7, #20]
      break;
 8004e5c:	e005      	b.n	8004e6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e5e:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e60:	617b      	str	r3, [r7, #20]
      break;
 8004e62:	e002      	b.n	8004e6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	617b      	str	r3, [r7, #20]
      break;
 8004e68:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e6a:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	091b      	lsrs	r3, r3, #4
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	3301      	adds	r3, #1
 8004e76:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e78:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	fb02 f203 	mul.w	r2, r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e90:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	0e5b      	lsrs	r3, r3, #25
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3724      	adds	r7, #36	; 0x24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	0800dac8 	.word	0x0800dac8
 8004ec0:	00f42400 	.word	0x00f42400
 8004ec4:	007a1200 	.word	0x007a1200

08004ec8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <HAL_RCC_GetHCLKFreq+0x14>)
 8004ece:	681b      	ldr	r3, [r3, #0]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000040 	.word	0x20000040

08004ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ee4:	f7ff fff0 	bl	8004ec8 <HAL_RCC_GetHCLKFreq>
 8004ee8:	4601      	mov	r1, r0
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	0adb      	lsrs	r3, r3, #11
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ef6:	5cd3      	ldrb	r3, [r2, r3]
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40021000 	.word	0x40021000
 8004f08:	0800dac0 	.word	0x0800dac0

08004f0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	220f      	movs	r2, #15
 8004f1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f1c:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <HAL_RCC_GetClockConfig+0x5c>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 0203 	and.w	r2, r3, #3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f28:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <HAL_RCC_GetClockConfig+0x5c>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <HAL_RCC_GetClockConfig+0x5c>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f40:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <HAL_RCC_GetClockConfig+0x5c>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	08db      	lsrs	r3, r3, #3
 8004f46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <HAL_RCC_GetClockConfig+0x60>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0207 	and.w	r2, r3, #7
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	601a      	str	r2, [r3, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40022000 	.word	0x40022000

08004f70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f7c:	4b2a      	ldr	r3, [pc, #168]	; (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f88:	f7ff f99e 	bl	80042c8 <HAL_PWREx_GetVoltageRange>
 8004f8c:	6178      	str	r0, [r7, #20]
 8004f8e:	e014      	b.n	8004fba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f90:	4b25      	ldr	r3, [pc, #148]	; (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	4a24      	ldr	r2, [pc, #144]	; (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f9c:	4b22      	ldr	r3, [pc, #136]	; (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fa8:	f7ff f98e 	bl	80042c8 <HAL_PWREx_GetVoltageRange>
 8004fac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fae:	4b1e      	ldr	r3, [pc, #120]	; (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb2:	4a1d      	ldr	r2, [pc, #116]	; (8005028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc0:	d10b      	bne.n	8004fda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b80      	cmp	r3, #128	; 0x80
 8004fc6:	d919      	bls.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2ba0      	cmp	r3, #160	; 0xa0
 8004fcc:	d902      	bls.n	8004fd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fce:	2302      	movs	r3, #2
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	e013      	b.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	e010      	b.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b80      	cmp	r3, #128	; 0x80
 8004fde:	d902      	bls.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	e00a      	b.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b80      	cmp	r3, #128	; 0x80
 8004fea:	d102      	bne.n	8004ff2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fec:	2302      	movs	r3, #2
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	e004      	b.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b70      	cmp	r3, #112	; 0x70
 8004ff6:	d101      	bne.n	8004ffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	; (800502c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f023 0207 	bic.w	r2, r3, #7
 8005004:	4909      	ldr	r1, [pc, #36]	; (800502c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800500c:	4b07      	ldr	r3, [pc, #28]	; (800502c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	429a      	cmp	r2, r3
 8005018:	d001      	beq.n	800501e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000
 800502c:	40022000 	.word	0x40022000

08005030 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005038:	2300      	movs	r3, #0
 800503a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800503c:	2300      	movs	r3, #0
 800503e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005048:	2b00      	cmp	r3, #0
 800504a:	d02f      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005054:	d005      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005056:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800505a:	d015      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005060:	e00f      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005062:	4b5d      	ldr	r3, [pc, #372]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	4a5c      	ldr	r2, [pc, #368]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800506e:	e00c      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3304      	adds	r3, #4
 8005074:	2100      	movs	r1, #0
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fa1e 	bl	80054b8 <RCCEx_PLLSAI1_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005080:	e003      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	74fb      	strb	r3, [r7, #19]
      break;
 8005086:	e000      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8005088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10b      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005090:	4b51      	ldr	r3, [pc, #324]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	494e      	ldr	r1, [pc, #312]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050a6:	e001      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	7cfb      	ldrb	r3, [r7, #19]
 80050aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 809e 	beq.w	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ba:	2300      	movs	r3, #0
 80050bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050be:	4b46      	ldr	r3, [pc, #280]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00d      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d4:	4b40      	ldr	r3, [pc, #256]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d8:	4a3f      	ldr	r2, [pc, #252]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050de:	6593      	str	r3, [r2, #88]	; 0x58
 80050e0:	4b3d      	ldr	r3, [pc, #244]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ec:	2301      	movs	r3, #1
 80050ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050f0:	4b3a      	ldr	r3, [pc, #232]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a39      	ldr	r2, [pc, #228]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050fc:	f7fd f866 	bl	80021cc <HAL_GetTick>
 8005100:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005102:	e009      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005104:	f7fd f862 	bl	80021cc <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d902      	bls.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	74fb      	strb	r3, [r7, #19]
        break;
 8005116:	e005      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005118:	4b30      	ldr	r3, [pc, #192]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0ef      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d15a      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800512a:	4b2b      	ldr	r3, [pc, #172]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005134:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01e      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	429a      	cmp	r2, r3
 8005144:	d019      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005146:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005150:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005152:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005158:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800515a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005162:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800516a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005172:	4a19      	ldr	r2, [pc, #100]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d016      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fd f822 	bl	80021cc <HAL_GetTick>
 8005188:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800518a:	e00b      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800518c:	f7fd f81e 	bl	80021cc <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	f241 3288 	movw	r2, #5000	; 0x1388
 800519a:	4293      	cmp	r3, r2
 800519c:	d902      	bls.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	74fb      	strb	r3, [r7, #19]
            break;
 80051a2:	e006      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ec      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80051b2:	7cfb      	ldrb	r3, [r7, #19]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10b      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051b8:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c6:	4904      	ldr	r1, [pc, #16]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051ce:	e009      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051d0:	7cfb      	ldrb	r3, [r7, #19]
 80051d2:	74bb      	strb	r3, [r7, #18]
 80051d4:	e006      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80051d6:	bf00      	nop
 80051d8:	40021000 	.word	0x40021000
 80051dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051e4:	7c7b      	ldrb	r3, [r7, #17]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d105      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ea:	4bb2      	ldr	r3, [pc, #712]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	4ab1      	ldr	r2, [pc, #708]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005202:	4bac      	ldr	r3, [pc, #688]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005208:	f023 0203 	bic.w	r2, r3, #3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	49a8      	ldr	r1, [pc, #672]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005224:	4ba3      	ldr	r3, [pc, #652]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f023 020c 	bic.w	r2, r3, #12
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	49a0      	ldr	r1, [pc, #640]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005246:	4b9b      	ldr	r3, [pc, #620]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	4997      	ldr	r1, [pc, #604]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005268:	4b92      	ldr	r3, [pc, #584]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	498f      	ldr	r1, [pc, #572]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800528a:	4b8a      	ldr	r3, [pc, #552]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005298:	4986      	ldr	r1, [pc, #536]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052ac:	4b81      	ldr	r3, [pc, #516]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	497e      	ldr	r1, [pc, #504]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ce:	4b79      	ldr	r3, [pc, #484]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	4975      	ldr	r1, [pc, #468]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052f0:	4b70      	ldr	r3, [pc, #448]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fe:	496d      	ldr	r1, [pc, #436]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005312:	4b68      	ldr	r3, [pc, #416]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005318:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	4964      	ldr	r1, [pc, #400]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d028      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005334:	4b5f      	ldr	r3, [pc, #380]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005342:	495c      	ldr	r1, [pc, #368]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005352:	d106      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005354:	4b57      	ldr	r3, [pc, #348]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4a56      	ldr	r2, [pc, #344]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800535a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800535e:	60d3      	str	r3, [r2, #12]
 8005360:	e011      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005366:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800536a:	d10c      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	2101      	movs	r1, #1
 8005372:	4618      	mov	r0, r3
 8005374:	f000 f8a0 	bl	80054b8 <RCCEx_PLLSAI1_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800537c:	7cfb      	ldrb	r3, [r7, #19]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8005382:	7cfb      	ldrb	r3, [r7, #19]
 8005384:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d028      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005392:	4b48      	ldr	r3, [pc, #288]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a0:	4944      	ldr	r1, [pc, #272]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b0:	d106      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b2:	4b40      	ldr	r3, [pc, #256]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	4a3f      	ldr	r2, [pc, #252]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053bc:	60d3      	str	r3, [r2, #12]
 80053be:	e011      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053c8:	d10c      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3304      	adds	r3, #4
 80053ce:	2101      	movs	r1, #1
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f871 	bl	80054b8 <RCCEx_PLLSAI1_Config>
 80053d6:	4603      	mov	r3, r0
 80053d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053da:	7cfb      	ldrb	r3, [r7, #19]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80053e0:	7cfb      	ldrb	r3, [r7, #19]
 80053e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d028      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053f0:	4b30      	ldr	r3, [pc, #192]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fe:	492d      	ldr	r1, [pc, #180]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800540e:	d106      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005410:	4b28      	ldr	r3, [pc, #160]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4a27      	ldr	r2, [pc, #156]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800541a:	60d3      	str	r3, [r2, #12]
 800541c:	e011      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005426:	d10c      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	2101      	movs	r1, #1
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f842 	bl	80054b8 <RCCEx_PLLSAI1_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005438:	7cfb      	ldrb	r3, [r7, #19]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01c      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800544e:	4b19      	ldr	r3, [pc, #100]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005454:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	4915      	ldr	r1, [pc, #84]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800546c:	d10c      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3304      	adds	r3, #4
 8005472:	2102      	movs	r1, #2
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f81f 	bl	80054b8 <RCCEx_PLLSAI1_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800547e:	7cfb      	ldrb	r3, [r7, #19]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8005484:	7cfb      	ldrb	r3, [r7, #19]
 8005486:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005494:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	4904      	ldr	r1, [pc, #16]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40021000 	.word	0x40021000

080054b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054c6:	4b73      	ldr	r3, [pc, #460]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d018      	beq.n	8005504 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054d2:	4b70      	ldr	r3, [pc, #448]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0203 	and.w	r2, r3, #3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d10d      	bne.n	80054fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
       ||
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054ea:	4b6a      	ldr	r3, [pc, #424]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	091b      	lsrs	r3, r3, #4
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
       ||
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d044      	beq.n	8005588 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	73fb      	strb	r3, [r7, #15]
 8005502:	e041      	b.n	8005588 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b02      	cmp	r3, #2
 800550a:	d00c      	beq.n	8005526 <RCCEx_PLLSAI1_Config+0x6e>
 800550c:	2b03      	cmp	r3, #3
 800550e:	d013      	beq.n	8005538 <RCCEx_PLLSAI1_Config+0x80>
 8005510:	2b01      	cmp	r3, #1
 8005512:	d120      	bne.n	8005556 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005514:	4b5f      	ldr	r3, [pc, #380]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d11d      	bne.n	800555c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005524:	e01a      	b.n	800555c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005526:	4b5b      	ldr	r3, [pc, #364]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552e:	2b00      	cmp	r3, #0
 8005530:	d116      	bne.n	8005560 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005536:	e013      	b.n	8005560 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005538:	4b56      	ldr	r3, [pc, #344]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10f      	bne.n	8005564 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005544:	4b53      	ldr	r3, [pc, #332]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d109      	bne.n	8005564 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005554:	e006      	b.n	8005564 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	73fb      	strb	r3, [r7, #15]
      break;
 800555a:	e004      	b.n	8005566 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800555c:	bf00      	nop
 800555e:	e002      	b.n	8005566 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005560:	bf00      	nop
 8005562:	e000      	b.n	8005566 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005564:	bf00      	nop
    }

    if(status == HAL_OK)
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10d      	bne.n	8005588 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800556c:	4b49      	ldr	r3, [pc, #292]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6819      	ldr	r1, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	3b01      	subs	r3, #1
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	430b      	orrs	r3, r1
 8005582:	4944      	ldr	r1, [pc, #272]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005584:	4313      	orrs	r3, r2
 8005586:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d17c      	bne.n	8005688 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800558e:	4b41      	ldr	r3, [pc, #260]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a40      	ldr	r2, [pc, #256]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005594:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559a:	f7fc fe17 	bl	80021cc <HAL_GetTick>
 800559e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055a0:	e009      	b.n	80055b6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055a2:	f7fc fe13 	bl	80021cc <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d902      	bls.n	80055b6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	73fb      	strb	r3, [r7, #15]
        break;
 80055b4:	e005      	b.n	80055c2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055b6:	4b37      	ldr	r3, [pc, #220]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1ef      	bne.n	80055a2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d15f      	bne.n	8005688 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d110      	bne.n	80055f0 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ce:	4b31      	ldr	r3, [pc, #196]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80055d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6892      	ldr	r2, [r2, #8]
 80055de:	0211      	lsls	r1, r2, #8
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68d2      	ldr	r2, [r2, #12]
 80055e4:	06d2      	lsls	r2, r2, #27
 80055e6:	430a      	orrs	r2, r1
 80055e8:	492a      	ldr	r1, [pc, #168]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	610b      	str	r3, [r1, #16]
 80055ee:	e027      	b.n	8005640 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d112      	bne.n	800561c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055f6:	4b27      	ldr	r3, [pc, #156]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6892      	ldr	r2, [r2, #8]
 8005606:	0211      	lsls	r1, r2, #8
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6912      	ldr	r2, [r2, #16]
 800560c:	0852      	lsrs	r2, r2, #1
 800560e:	3a01      	subs	r2, #1
 8005610:	0552      	lsls	r2, r2, #21
 8005612:	430a      	orrs	r2, r1
 8005614:	491f      	ldr	r1, [pc, #124]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005616:	4313      	orrs	r3, r2
 8005618:	610b      	str	r3, [r1, #16]
 800561a:	e011      	b.n	8005640 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800561c:	4b1d      	ldr	r3, [pc, #116]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005624:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6892      	ldr	r2, [r2, #8]
 800562c:	0211      	lsls	r1, r2, #8
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6952      	ldr	r2, [r2, #20]
 8005632:	0852      	lsrs	r2, r2, #1
 8005634:	3a01      	subs	r2, #1
 8005636:	0652      	lsls	r2, r2, #25
 8005638:	430a      	orrs	r2, r1
 800563a:	4916      	ldr	r1, [pc, #88]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005640:	4b14      	ldr	r3, [pc, #80]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a13      	ldr	r2, [pc, #76]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800564a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564c:	f7fc fdbe 	bl	80021cc <HAL_GetTick>
 8005650:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005652:	e009      	b.n	8005668 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005654:	f7fc fdba 	bl	80021cc <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d902      	bls.n	8005668 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	73fb      	strb	r3, [r7, #15]
          break;
 8005666:	e005      	b.n	8005674 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ef      	beq.n	8005654 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	4904      	ldr	r1, [pc, #16]	; (8005694 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005684:	4313      	orrs	r3, r2
 8005686:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40021000 	.word	0x40021000

08005698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e07c      	b.n	80057a4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d106      	bne.n	80056ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7fc f84f 	bl	8001768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056ea:	d902      	bls.n	80056f2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e002      	b.n	80056f8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005700:	d007      	beq.n	8005712 <HAL_SPI_Init+0x7a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800570a:	d002      	beq.n	8005712 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10b      	bne.n	8005732 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005722:	d903      	bls.n	800572c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	631a      	str	r2, [r3, #48]	; 0x30
 800572a:	e002      	b.n	8005732 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005750:	431a      	orrs	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	ea42 0103 	orr.w	r1, r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	0c1b      	lsrs	r3, r3, #16
 8005772:	f003 0204 	and.w	r2, r3, #4
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	ea42 0103 	orr.w	r1, r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	430a      	orrs	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	4613      	mov	r3, r2
 80057ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_SPI_Transmit+0x22>
 80057ca:	2302      	movs	r3, #2
 80057cc:	e150      	b.n	8005a70 <HAL_SPI_Transmit+0x2c4>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057d6:	f7fc fcf9 	bl	80021cc <HAL_GetTick>
 80057da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d002      	beq.n	80057f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
 80057ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057f0:	e135      	b.n	8005a5e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <HAL_SPI_Transmit+0x52>
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005802:	e12c      	b.n	8005a5e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2203      	movs	r2, #3
 8005808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	88fa      	ldrh	r2, [r7, #6]
 8005822:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584e:	d107      	bne.n	8005860 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800585e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	d007      	beq.n	800587e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800587c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005886:	d94b      	bls.n	8005920 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <HAL_SPI_Transmit+0xea>
 8005890:	8afb      	ldrh	r3, [r7, #22]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d13e      	bne.n	8005914 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	881a      	ldrh	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	1c9a      	adds	r2, r3, #2
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058ba:	e02b      	b.n	8005914 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d112      	bne.n	80058f0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	881a      	ldrh	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	1c9a      	adds	r2, r3, #2
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ee:	e011      	b.n	8005914 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058f0:	f7fc fc6c 	bl	80021cc <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d803      	bhi.n	8005908 <HAL_SPI_Transmit+0x15c>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d102      	bne.n	800590e <HAL_SPI_Transmit+0x162>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005912:	e0a4      	b.n	8005a5e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1ce      	bne.n	80058bc <HAL_SPI_Transmit+0x110>
 800591e:	e07c      	b.n	8005a1a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_SPI_Transmit+0x182>
 8005928:	8afb      	ldrh	r3, [r7, #22]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d170      	bne.n	8005a10 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	d912      	bls.n	800595e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	881a      	ldrh	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	1c9a      	adds	r2, r3, #2
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b02      	subs	r3, #2
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800595c:	e058      	b.n	8005a10 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	330c      	adds	r3, #12
 8005968:	7812      	ldrb	r2, [r2, #0]
 800596a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005984:	e044      	b.n	8005a10 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b02      	cmp	r3, #2
 8005992:	d12b      	bne.n	80059ec <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b01      	cmp	r3, #1
 800599c:	d912      	bls.n	80059c4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	881a      	ldrh	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	1c9a      	adds	r2, r3, #2
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b02      	subs	r3, #2
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059c2:	e025      	b.n	8005a10 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	330c      	adds	r3, #12
 80059ce:	7812      	ldrb	r2, [r2, #0]
 80059d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059ea:	e011      	b.n	8005a10 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ec:	f7fc fbee 	bl	80021cc <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d803      	bhi.n	8005a04 <HAL_SPI_Transmit+0x258>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d102      	bne.n	8005a0a <HAL_SPI_Transmit+0x25e>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d102      	bne.n	8005a10 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a0e:	e026      	b.n	8005a5e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1b5      	bne.n	8005986 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 fdb4 	bl	800658c <SPI_EndRxTxTransaction>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10a      	bne.n	8005a4e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	77fb      	strb	r3, [r7, #31]
 8005a5a:	e000      	b.n	8005a5e <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005a5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3720      	adds	r7, #32
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a94:	d112      	bne.n	8005abc <HAL_SPI_Receive+0x44>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10e      	bne.n	8005abc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2204      	movs	r2, #4
 8005aa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005aa6:	88fa      	ldrh	r2, [r7, #6]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	4613      	mov	r3, r2
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f908 	bl	8005cc8 <HAL_SPI_TransmitReceive>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	e101      	b.n	8005cc0 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_SPI_Receive+0x52>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e0fa      	b.n	8005cc0 <HAL_SPI_Receive+0x248>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ad2:	f7fc fb7b 	bl	80021cc <HAL_GetTick>
 8005ad6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d002      	beq.n	8005aea <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ae8:	e0e1      	b.n	8005cae <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <HAL_SPI_Receive+0x7e>
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d102      	bne.n	8005afc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005afa:	e0d8      	b.n	8005cae <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2204      	movs	r2, #4
 8005b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	88fa      	ldrh	r2, [r7, #6]
 8005b14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	88fa      	ldrh	r2, [r7, #6]
 8005b1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b46:	d908      	bls.n	8005b5a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b56:	605a      	str	r2, [r3, #4]
 8005b58:	e007      	b.n	8005b6a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b68:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b72:	d107      	bne.n	8005b84 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b82:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d007      	beq.n	8005ba2 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ba0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005baa:	d867      	bhi.n	8005c7c <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bac:	e030      	b.n	8005c10 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d117      	bne.n	8005bec <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f103 020c 	add.w	r2, r3, #12
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	7812      	ldrb	r2, [r2, #0]
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005bea:	e011      	b.n	8005c10 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bec:	f7fc faee 	bl	80021cc <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d803      	bhi.n	8005c04 <HAL_SPI_Receive+0x18c>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c02:	d102      	bne.n	8005c0a <HAL_SPI_Receive+0x192>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d102      	bne.n	8005c10 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c0e:	e04e      	b.n	8005cae <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1c8      	bne.n	8005bae <HAL_SPI_Receive+0x136>
 8005c1c:	e034      	b.n	8005c88 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d115      	bne.n	8005c58 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	b292      	uxth	r2, r2
 8005c38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	1c9a      	adds	r2, r3, #2
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c56:	e011      	b.n	8005c7c <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c58:	f7fc fab8 	bl	80021cc <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d803      	bhi.n	8005c70 <HAL_SPI_Receive+0x1f8>
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	d102      	bne.n	8005c76 <HAL_SPI_Receive+0x1fe>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c7a:	e018      	b.n	8005cae <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1ca      	bne.n	8005c1e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	6839      	ldr	r1, [r7, #0]
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fc25 	bl	80064dc <SPI_EndRxTransaction>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	75fb      	strb	r3, [r7, #23]
 8005caa:	e000      	b.n	8005cae <HAL_SPI_Receive+0x236>
  }

error :
 8005cac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08a      	sub	sp, #40	; 0x28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <HAL_SPI_TransmitReceive+0x26>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e1fb      	b.n	80060e6 <HAL_SPI_TransmitReceive+0x41e>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cf6:	f7fc fa69 	bl	80021cc <HAL_GetTick>
 8005cfa:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d02:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005d0a:	887b      	ldrh	r3, [r7, #2]
 8005d0c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005d0e:	887b      	ldrh	r3, [r7, #2]
 8005d10:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d12:	7efb      	ldrb	r3, [r7, #27]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d00e      	beq.n	8005d36 <HAL_SPI_TransmitReceive+0x6e>
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d1e:	d106      	bne.n	8005d2e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <HAL_SPI_TransmitReceive+0x66>
 8005d28:	7efb      	ldrb	r3, [r7, #27]
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d003      	beq.n	8005d36 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005d2e:	2302      	movs	r3, #2
 8005d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d34:	e1cd      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <HAL_SPI_TransmitReceive+0x80>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_SPI_TransmitReceive+0x80>
 8005d42:	887b      	ldrh	r3, [r7, #2]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d103      	bne.n	8005d50 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d4e:	e1c0      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d003      	beq.n	8005d64 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2205      	movs	r2, #5
 8005d60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	887a      	ldrh	r2, [r7, #2]
 8005d74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	887a      	ldrh	r2, [r7, #2]
 8005d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	887a      	ldrh	r2, [r7, #2]
 8005d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	887a      	ldrh	r2, [r7, #2]
 8005d90:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005da6:	d802      	bhi.n	8005dae <HAL_SPI_TransmitReceive+0xe6>
 8005da8:	8a3b      	ldrh	r3, [r7, #16]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d908      	bls.n	8005dc0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	e007      	b.n	8005dd0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dda:	2b40      	cmp	r3, #64	; 0x40
 8005ddc:	d007      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005df6:	d97c      	bls.n	8005ef2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x13e>
 8005e00:	8a7b      	ldrh	r3, [r7, #18]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d169      	bne.n	8005eda <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	881a      	ldrh	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	1c9a      	adds	r2, r3, #2
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e2a:	e056      	b.n	8005eda <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d11b      	bne.n	8005e72 <HAL_SPI_TransmitReceive+0x1aa>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d016      	beq.n	8005e72 <HAL_SPI_TransmitReceive+0x1aa>
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d113      	bne.n	8005e72 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	881a      	ldrh	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	1c9a      	adds	r2, r3, #2
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d11c      	bne.n	8005eba <HAL_SPI_TransmitReceive+0x1f2>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d016      	beq.n	8005eba <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	b292      	uxth	r2, r2
 8005e98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	1c9a      	adds	r2, r3, #2
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005eba:	f7fc f987 	bl	80021cc <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d807      	bhi.n	8005eda <HAL_SPI_TransmitReceive+0x212>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed0:	d003      	beq.n	8005eda <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ed8:	e0fb      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1a3      	bne.n	8005e2c <HAL_SPI_TransmitReceive+0x164>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d19d      	bne.n	8005e2c <HAL_SPI_TransmitReceive+0x164>
 8005ef0:	e0df      	b.n	80060b2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_SPI_TransmitReceive+0x23a>
 8005efa:	8a7b      	ldrh	r3, [r7, #18]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	f040 80cb 	bne.w	8006098 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d912      	bls.n	8005f32 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	881a      	ldrh	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	1c9a      	adds	r2, r3, #2
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	3b02      	subs	r3, #2
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f30:	e0b2      	b.n	8006098 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f58:	e09e      	b.n	8006098 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d134      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x30a>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d02f      	beq.n	8005fd2 <HAL_SPI_TransmitReceive+0x30a>
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d12c      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d912      	bls.n	8005fa8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	881a      	ldrh	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	1c9a      	adds	r2, r3, #2
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b02      	subs	r3, #2
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fa6:	e012      	b.n	8005fce <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	7812      	ldrb	r2, [r2, #0]
 8005fb4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d148      	bne.n	8006072 <HAL_SPI_TransmitReceive+0x3aa>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d042      	beq.n	8006072 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d923      	bls.n	8006040 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	b292      	uxth	r2, r2
 8006004:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	1c9a      	adds	r2, r3, #2
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b02      	subs	r3, #2
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b01      	cmp	r3, #1
 800602c:	d81f      	bhi.n	800606e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	e016      	b.n	800606e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f103 020c 	add.w	r2, r3, #12
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	7812      	ldrb	r2, [r2, #0]
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800606e:	2301      	movs	r3, #1
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006072:	f7fc f8ab 	bl	80021cc <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800607e:	429a      	cmp	r2, r3
 8006080:	d803      	bhi.n	800608a <HAL_SPI_TransmitReceive+0x3c2>
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d102      	bne.n	8006090 <HAL_SPI_TransmitReceive+0x3c8>
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	2b00      	cmp	r3, #0
 800608e:	d103      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006096:	e01c      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f47f af5b 	bne.w	8005f5a <HAL_SPI_TransmitReceive+0x292>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f47f af54 	bne.w	8005f5a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060b2:	69fa      	ldr	r2, [r7, #28]
 80060b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fa68 	bl	800658c <SPI_EndRxTxTransaction>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d006      	beq.n	80060d0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	661a      	str	r2, [r3, #96]	; 0x60
 80060ce:	e000      	b.n	80060d2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80060d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3728      	adds	r7, #40	; 0x28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	099b      	lsrs	r3, r3, #6
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10f      	bne.n	8006134 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	099b      	lsrs	r3, r3, #6
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	4798      	blx	r3
    return;
 8006132:	e0d8      	b.n	80062e6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <HAL_SPI_IRQHandler+0x66>
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	09db      	lsrs	r3, r3, #7
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
    return;
 8006154:	e0c7      	b.n	80062e6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10c      	bne.n	800617c <HAL_SPI_IRQHandler+0x8c>
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	099b      	lsrs	r3, r3, #6
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <HAL_SPI_IRQHandler+0x8c>
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	0a1b      	lsrs	r3, r3, #8
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 80b5 	beq.w	80062e6 <HAL_SPI_IRQHandler+0x1f6>
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80ae 	beq.w	80062e6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	099b      	lsrs	r3, r3, #6
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d023      	beq.n	80061de <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d011      	beq.n	80061c6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a6:	f043 0204 	orr.w	r2, r3, #4
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ae:	2300      	movs	r3, #0
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	e00b      	b.n	80061de <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	693b      	ldr	r3, [r7, #16]
        return;
 80061dc:	e083      	b.n	80062e6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d014      	beq.n	8006214 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ee:	f043 0201 	orr.w	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	0a1b      	lsrs	r3, r3, #8
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00c      	beq.n	800623a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006224:	f043 0208 	orr.w	r2, r3, #8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800622c:	2300      	movs	r3, #0
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	60bb      	str	r3, [r7, #8]
 8006238:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623e:	2b00      	cmp	r3, #0
 8006240:	d050      	beq.n	80062e4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006250:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d104      	bne.n	800626e <HAL_SPI_IRQHandler+0x17e>
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d034      	beq.n	80062d8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0203 	bic.w	r2, r2, #3
 800627c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006282:	2b00      	cmp	r3, #0
 8006284:	d011      	beq.n	80062aa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	4a18      	ldr	r2, [pc, #96]	; (80062ec <HAL_SPI_IRQHandler+0x1fc>)
 800628c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006292:	4618      	mov	r0, r3
 8006294:	f7fc f962 	bl	800255c <HAL_DMA_Abort_IT>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d016      	beq.n	80062e0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b6:	4a0d      	ldr	r2, [pc, #52]	; (80062ec <HAL_SPI_IRQHandler+0x1fc>)
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fc f94c 	bl	800255c <HAL_DMA_Abort_IT>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80062d6:	e003      	b.n	80062e0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f809 	bl	80062f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80062de:	e000      	b.n	80062e2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80062e0:	bf00      	nop
    return;
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
  }
}
 80062e6:	3720      	adds	r7, #32
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	08006305 	.word	0x08006305

080062f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006310:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff ffe5 	bl	80062f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	603b      	str	r3, [r7, #0]
 800633a:	4613      	mov	r3, r2
 800633c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800633e:	e04c      	b.n	80063da <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006346:	d048      	beq.n	80063da <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006348:	f7fb ff40 	bl	80021cc <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d902      	bls.n	800635e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d13d      	bne.n	80063da <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800636c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006376:	d111      	bne.n	800639c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006380:	d004      	beq.n	800638c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800638a:	d107      	bne.n	800639c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800639a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a4:	d10f      	bne.n	80063c6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e00f      	b.n	80063fa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4013      	ands	r3, r2
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	bf0c      	ite	eq
 80063ea:	2301      	moveq	r3, #1
 80063ec:	2300      	movne	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d1a3      	bne.n	8006340 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006410:	e057      	b.n	80064c2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006418:	d106      	bne.n	8006428 <SPI_WaitFifoStateUntilTimeout+0x26>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d103      	bne.n	8006428 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642e:	d048      	beq.n	80064c2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006430:	f7fb fecc 	bl	80021cc <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d902      	bls.n	8006446 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d13d      	bne.n	80064c2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006454:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800645e:	d111      	bne.n	8006484 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006468:	d004      	beq.n	8006474 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006472:	d107      	bne.n	8006484 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006482:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648c:	d10f      	bne.n	80064ae <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e008      	b.n	80064d4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4013      	ands	r3, r2
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d19f      	bne.n	8006412 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064f0:	d111      	bne.n	8006516 <SPI_EndRxTransaction+0x3a>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064fa:	d004      	beq.n	8006506 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006504:	d107      	bne.n	8006516 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006514:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2200      	movs	r2, #0
 800651e:	2180      	movs	r1, #128	; 0x80
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7ff ff04 	bl	800632e <SPI_WaitFlagStateUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d007      	beq.n	800653c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006530:	f043 0220 	orr.w	r2, r3, #32
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e023      	b.n	8006584 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006544:	d11d      	bne.n	8006582 <SPI_EndRxTransaction+0xa6>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654e:	d004      	beq.n	800655a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006558:	d113      	bne.n	8006582 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2200      	movs	r2, #0
 8006562:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff ff4b 	bl	8006402 <SPI_WaitFifoStateUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006576:	f043 0220 	orr.w	r2, r3, #32
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e000      	b.n	8006584 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2200      	movs	r2, #0
 80065a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f7ff ff2c 	bl	8006402 <SPI_WaitFifoStateUntilTimeout>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b4:	f043 0220 	orr.w	r2, r3, #32
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e027      	b.n	8006610 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2200      	movs	r2, #0
 80065c8:	2180      	movs	r1, #128	; 0x80
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f7ff feaf 	bl	800632e <SPI_WaitFlagStateUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065da:	f043 0220 	orr.w	r2, r3, #32
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e014      	b.n	8006610 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff ff05 	bl	8006402 <SPI_WaitFifoStateUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d007      	beq.n	800660e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006602:	f043 0220 	orr.w	r2, r3, #32
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e000      	b.n	8006610 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e01d      	b.n	8006666 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f815 	bl	800666e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f000 f986 	bl	8006968 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0201 	orr.w	r2, r2, #1
 800669a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <HAL_TIM_Base_Start_IT+0x50>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b06      	cmp	r3, #6
 80066ac:	d00b      	beq.n	80066c6 <HAL_TIM_Base_Start_IT+0x42>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b4:	d007      	beq.n	80066c6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0201 	orr.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	00010007 	.word	0x00010007

080066d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d122      	bne.n	8006734 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d11b      	bne.n	8006734 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0202 	mvn.w	r2, #2
 8006704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f905 	bl	800692a <HAL_TIM_IC_CaptureCallback>
 8006720:	e005      	b.n	800672e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f8f7 	bl	8006916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f908 	bl	800693e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b04      	cmp	r3, #4
 8006740:	d122      	bne.n	8006788 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b04      	cmp	r3, #4
 800674e:	d11b      	bne.n	8006788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0204 	mvn.w	r2, #4
 8006758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f8db 	bl	800692a <HAL_TIM_IC_CaptureCallback>
 8006774:	e005      	b.n	8006782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f8cd 	bl	8006916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f8de 	bl	800693e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b08      	cmp	r3, #8
 8006794:	d122      	bne.n	80067dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d11b      	bne.n	80067dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0208 	mvn.w	r2, #8
 80067ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2204      	movs	r2, #4
 80067b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f8b1 	bl	800692a <HAL_TIM_IC_CaptureCallback>
 80067c8:	e005      	b.n	80067d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f8a3 	bl	8006916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f8b4 	bl	800693e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b10      	cmp	r3, #16
 80067e8:	d122      	bne.n	8006830 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b10      	cmp	r3, #16
 80067f6:	d11b      	bne.n	8006830 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0210 	mvn.w	r2, #16
 8006800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2208      	movs	r2, #8
 8006806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f887 	bl	800692a <HAL_TIM_IC_CaptureCallback>
 800681c:	e005      	b.n	800682a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f879 	bl	8006916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f88a 	bl	800693e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b01      	cmp	r3, #1
 800683c:	d10e      	bne.n	800685c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b01      	cmp	r3, #1
 800684a:	d107      	bne.n	800685c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f06f 0201 	mvn.w	r2, #1
 8006854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fa ff00 	bl	800165c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006866:	2b80      	cmp	r3, #128	; 0x80
 8006868:	d10e      	bne.n	8006888 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006874:	2b80      	cmp	r3, #128	; 0x80
 8006876:	d107      	bne.n	8006888 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f8de 	bl	8006a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006896:	d10e      	bne.n	80068b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a2:	2b80      	cmp	r3, #128	; 0x80
 80068a4:	d107      	bne.n	80068b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f8d1 	bl	8006a58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c0:	2b40      	cmp	r3, #64	; 0x40
 80068c2:	d10e      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ce:	2b40      	cmp	r3, #64	; 0x40
 80068d0:	d107      	bne.n	80068e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f838 	bl	8006952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f003 0320 	and.w	r3, r3, #32
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d10e      	bne.n	800690e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d107      	bne.n	800690e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f06f 0220 	mvn.w	r2, #32
 8006906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f891 	bl	8006a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
	...

08006968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a2a      	ldr	r2, [pc, #168]	; (8006a24 <TIM_Base_SetConfig+0xbc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d003      	beq.n	8006988 <TIM_Base_SetConfig+0x20>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006986:	d108      	bne.n	800699a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a21      	ldr	r2, [pc, #132]	; (8006a24 <TIM_Base_SetConfig+0xbc>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00b      	beq.n	80069ba <TIM_Base_SetConfig+0x52>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a8:	d007      	beq.n	80069ba <TIM_Base_SetConfig+0x52>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a1e      	ldr	r2, [pc, #120]	; (8006a28 <TIM_Base_SetConfig+0xc0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d003      	beq.n	80069ba <TIM_Base_SetConfig+0x52>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a1d      	ldr	r2, [pc, #116]	; (8006a2c <TIM_Base_SetConfig+0xc4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d108      	bne.n	80069cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a0c      	ldr	r2, [pc, #48]	; (8006a24 <TIM_Base_SetConfig+0xbc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d007      	beq.n	8006a08 <TIM_Base_SetConfig+0xa0>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a0b      	ldr	r2, [pc, #44]	; (8006a28 <TIM_Base_SetConfig+0xc0>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d003      	beq.n	8006a08 <TIM_Base_SetConfig+0xa0>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a0a      	ldr	r2, [pc, #40]	; (8006a2c <TIM_Base_SetConfig+0xc4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d103      	bne.n	8006a10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	615a      	str	r2, [r3, #20]
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40014000 	.word	0x40014000
 8006a2c:	40014400 	.word	0x40014400

08006a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	f107 0014 	add.w	r0, r7, #20
 8006a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	b004      	add	sp, #16
 8006a8c:	4770      	bx	lr

08006a8e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b085      	sub	sp, #20
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a96:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006a9a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ac8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006acc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	43db      	mvns	r3, r3
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	4013      	ands	r3, r2
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b10:	b084      	sub	sp, #16
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	f107 0014 	add.w	r0, r7, #20
 8006b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff ffa3 	bl	8006a8e <USB_EnableGlobalInt>

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b54:	b004      	add	sp, #16
 8006b56:	4770      	bx	lr

08006b58 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b58:	b490      	push	{r4, r7}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	78db      	ldrb	r3, [r3, #3]
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d819      	bhi.n	8006bba <USB_ActivateEndpoint+0x62>
 8006b86:	a201      	add	r2, pc, #4	; (adr r2, 8006b8c <USB_ActivateEndpoint+0x34>)
 8006b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8c:	08006b9d 	.word	0x08006b9d
 8006b90:	08006bb1 	.word	0x08006bb1
 8006b94:	08006bc1 	.word	0x08006bc1
 8006b98:	08006ba7 	.word	0x08006ba7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006b9c:	89bb      	ldrh	r3, [r7, #12]
 8006b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ba2:	81bb      	strh	r3, [r7, #12]
      break;
 8006ba4:	e00d      	b.n	8006bc2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006ba6:	89bb      	ldrh	r3, [r7, #12]
 8006ba8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006bac:	81bb      	strh	r3, [r7, #12]
      break;
 8006bae:	e008      	b.n	8006bc2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006bb0:	89bb      	ldrh	r3, [r7, #12]
 8006bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bb6:	81bb      	strh	r3, [r7, #12]
      break;
 8006bb8:	e003      	b.n	8006bc2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8006bbe:	e000      	b.n	8006bc2 <USB_ActivateEndpoint+0x6a>
      break;
 8006bc0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	89bb      	ldrh	r3, [r7, #12]
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	b21b      	sxth	r3, r3
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	b21a      	sxth	r2, r3
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	b21b      	sxth	r3, r3
 8006c02:	4313      	orrs	r3, r2
 8006c04:	b21b      	sxth	r3, r3
 8006c06:	b29c      	uxth	r4, r3
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	441a      	add	r2, r3
 8006c12:	4b8a      	ldr	r3, [pc, #552]	; (8006e3c <USB_ActivateEndpoint+0x2e4>)
 8006c14:	4323      	orrs	r3, r4
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	7b1b      	ldrb	r3, [r3, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f040 8112 	bne.w	8006e48 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d067      	beq.n	8006cfc <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c2c:	687c      	ldr	r4, [r7, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	441c      	add	r4, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	4423      	add	r3, r4
 8006c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c44:	461c      	mov	r4, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	88db      	ldrh	r3, [r3, #6]
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29c      	uxth	r4, r3
 8006c62:	4623      	mov	r3, r4
 8006c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d014      	beq.n	8006c96 <USB_ActivateEndpoint+0x13e>
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c82:	b29c      	uxth	r4, r3
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	441a      	add	r2, r3
 8006c8e:	4b6c      	ldr	r3, [pc, #432]	; (8006e40 <USB_ActivateEndpoint+0x2e8>)
 8006c90:	4323      	orrs	r3, r4
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	78db      	ldrb	r3, [r3, #3]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d018      	beq.n	8006cd0 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb4:	b29c      	uxth	r4, r3
 8006cb6:	f084 0320 	eor.w	r3, r4, #32
 8006cba:	b29c      	uxth	r4, r3
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	441a      	add	r2, r3
 8006cc6:	4b5d      	ldr	r3, [pc, #372]	; (8006e3c <USB_ActivateEndpoint+0x2e4>)
 8006cc8:	4323      	orrs	r3, r4
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	8013      	strh	r3, [r2, #0]
 8006cce:	e22b      	b.n	8007128 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ce6:	b29c      	uxth	r4, r3
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	441a      	add	r2, r3
 8006cf2:	4b52      	ldr	r3, [pc, #328]	; (8006e3c <USB_ActivateEndpoint+0x2e4>)
 8006cf4:	4323      	orrs	r3, r4
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	8013      	strh	r3, [r2, #0]
 8006cfa:	e215      	b.n	8007128 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006cfc:	687c      	ldr	r4, [r7, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	441c      	add	r4, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	4423      	add	r3, r4
 8006d10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d14:	461c      	mov	r4, r3
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	88db      	ldrh	r3, [r3, #6]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006d24:	687c      	ldr	r4, [r7, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	441c      	add	r4, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	4423      	add	r3, r4
 8006d38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d3c:	461c      	mov	r4, r3
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10e      	bne.n	8006d64 <USB_ActivateEndpoint+0x20c>
 8006d46:	8823      	ldrh	r3, [r4, #0]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	8023      	strh	r3, [r4, #0]
 8006d52:	8823      	ldrh	r3, [r4, #0]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	8023      	strh	r3, [r4, #0]
 8006d62:	e02d      	b.n	8006dc0 <USB_ActivateEndpoint+0x268>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b3e      	cmp	r3, #62	; 0x3e
 8006d6a:	d812      	bhi.n	8006d92 <USB_ActivateEndpoint+0x23a>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	085b      	lsrs	r3, r3, #1
 8006d72:	60bb      	str	r3, [r7, #8]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <USB_ActivateEndpoint+0x22e>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	3301      	adds	r3, #1
 8006d84:	60bb      	str	r3, [r7, #8]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	029b      	lsls	r3, r3, #10
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	8023      	strh	r3, [r4, #0]
 8006d90:	e016      	b.n	8006dc0 <USB_ActivateEndpoint+0x268>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	60bb      	str	r3, [r7, #8]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 031f 	and.w	r3, r3, #31
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <USB_ActivateEndpoint+0x254>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	60bb      	str	r3, [r7, #8]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	029b      	lsls	r3, r3, #10
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	b29c      	uxth	r4, r3
 8006dce:	4623      	mov	r3, r4
 8006dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d014      	beq.n	8006e02 <USB_ActivateEndpoint+0x2aa>
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dee:	b29c      	uxth	r4, r3
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <USB_ActivateEndpoint+0x2ec>)
 8006dfc:	4323      	orrs	r3, r4
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e18:	b29c      	uxth	r4, r3
 8006e1a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006e1e:	b29c      	uxth	r4, r3
 8006e20:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006e24:	b29c      	uxth	r4, r3
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	441a      	add	r2, r3
 8006e30:	4b02      	ldr	r3, [pc, #8]	; (8006e3c <USB_ActivateEndpoint+0x2e4>)
 8006e32:	4323      	orrs	r3, r4
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	8013      	strh	r3, [r2, #0]
 8006e38:	e176      	b.n	8007128 <USB_ActivateEndpoint+0x5d0>
 8006e3a:	bf00      	nop
 8006e3c:	ffff8080 	.word	0xffff8080
 8006e40:	ffff80c0 	.word	0xffff80c0
 8006e44:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5e:	b29c      	uxth	r4, r3
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	441a      	add	r2, r3
 8006e6a:	4b96      	ldr	r3, [pc, #600]	; (80070c4 <USB_ActivateEndpoint+0x56c>)
 8006e6c:	4323      	orrs	r3, r4
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e72:	687c      	ldr	r4, [r7, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	441c      	add	r4, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	4423      	add	r3, r4
 8006e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e8a:	461c      	mov	r4, r3
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	891b      	ldrh	r3, [r3, #8]
 8006e90:	085b      	lsrs	r3, r3, #1
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	8023      	strh	r3, [r4, #0]
 8006e9a:	687c      	ldr	r4, [r7, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	441c      	add	r4, r3
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	4423      	add	r3, r4
 8006eae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eb2:	461c      	mov	r4, r3
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	895b      	ldrh	r3, [r3, #10]
 8006eb8:	085b      	lsrs	r3, r3, #1
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	785b      	ldrb	r3, [r3, #1]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f040 8088 	bne.w	8006fdc <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29c      	uxth	r4, r3
 8006eda:	4623      	mov	r3, r4
 8006edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d014      	beq.n	8006f0e <USB_ActivateEndpoint+0x3b6>
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efa:	b29c      	uxth	r4, r3
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	441a      	add	r2, r3
 8006f06:	4b70      	ldr	r3, [pc, #448]	; (80070c8 <USB_ActivateEndpoint+0x570>)
 8006f08:	4323      	orrs	r3, r4
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29c      	uxth	r4, r3
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d014      	beq.n	8006f50 <USB_ActivateEndpoint+0x3f8>
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3c:	b29c      	uxth	r4, r3
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	441a      	add	r2, r3
 8006f48:	4b60      	ldr	r3, [pc, #384]	; (80070cc <USB_ActivateEndpoint+0x574>)
 8006f4a:	4323      	orrs	r3, r4
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f66:	b29c      	uxth	r4, r3
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	441a      	add	r2, r3
 8006f72:	4b56      	ldr	r3, [pc, #344]	; (80070cc <USB_ActivateEndpoint+0x574>)
 8006f74:	4323      	orrs	r3, r4
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f90:	b29c      	uxth	r4, r3
 8006f92:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006f96:	b29c      	uxth	r4, r3
 8006f98:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006f9c:	b29c      	uxth	r4, r3
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	4b49      	ldr	r3, [pc, #292]	; (80070d0 <USB_ActivateEndpoint+0x578>)
 8006faa:	4323      	orrs	r3, r4
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc6:	b29c      	uxth	r4, r3
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	441a      	add	r2, r3
 8006fd2:	4b3f      	ldr	r3, [pc, #252]	; (80070d0 <USB_ActivateEndpoint+0x578>)
 8006fd4:	4323      	orrs	r3, r4
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	8013      	strh	r3, [r2, #0]
 8006fda:	e0a5      	b.n	8007128 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29c      	uxth	r4, r3
 8006fea:	4623      	mov	r3, r4
 8006fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d014      	beq.n	800701e <USB_ActivateEndpoint+0x4c6>
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700a:	b29c      	uxth	r4, r3
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	441a      	add	r2, r3
 8007016:	4b2c      	ldr	r3, [pc, #176]	; (80070c8 <USB_ActivateEndpoint+0x570>)
 8007018:	4323      	orrs	r3, r4
 800701a:	b29b      	uxth	r3, r3
 800701c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29c      	uxth	r4, r3
 800702c:	4623      	mov	r3, r4
 800702e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	d014      	beq.n	8007060 <USB_ActivateEndpoint+0x508>
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704c:	b29c      	uxth	r4, r3
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	441a      	add	r2, r3
 8007058:	4b1c      	ldr	r3, [pc, #112]	; (80070cc <USB_ActivateEndpoint+0x574>)
 800705a:	4323      	orrs	r3, r4
 800705c:	b29b      	uxth	r3, r3
 800705e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007076:	b29c      	uxth	r4, r3
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	441a      	add	r2, r3
 8007082:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <USB_ActivateEndpoint+0x570>)
 8007084:	4323      	orrs	r3, r4
 8007086:	b29b      	uxth	r3, r3
 8007088:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	78db      	ldrb	r3, [r3, #3]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d020      	beq.n	80070d4 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a8:	b29c      	uxth	r4, r3
 80070aa:	f084 0320 	eor.w	r3, r4, #32
 80070ae:	b29c      	uxth	r4, r3
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <USB_ActivateEndpoint+0x578>)
 80070bc:	4323      	orrs	r3, r4
 80070be:	b29b      	uxth	r3, r3
 80070c0:	8013      	strh	r3, [r2, #0]
 80070c2:	e01c      	b.n	80070fe <USB_ActivateEndpoint+0x5a6>
 80070c4:	ffff8180 	.word	0xffff8180
 80070c8:	ffffc080 	.word	0xffffc080
 80070cc:	ffff80c0 	.word	0xffff80c0
 80070d0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ea:	b29c      	uxth	r4, r3
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	441a      	add	r2, r3
 80070f6:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <USB_ActivateEndpoint+0x5dc>)
 80070f8:	4323      	orrs	r3, r4
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007114:	b29c      	uxth	r4, r3
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	441a      	add	r2, r3
 8007120:	4b04      	ldr	r3, [pc, #16]	; (8007134 <USB_ActivateEndpoint+0x5dc>)
 8007122:	4323      	orrs	r3, r4
 8007124:	b29b      	uxth	r3, r3
 8007126:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bc90      	pop	{r4, r7}
 8007132:	4770      	bx	lr
 8007134:	ffff8080 	.word	0xffff8080

08007138 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007138:	b490      	push	{r4, r7}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	7b1b      	ldrb	r3, [r3, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d171      	bne.n	800722e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d036      	beq.n	80071c0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b29c      	uxth	r4, r3
 8007160:	4623      	mov	r3, r4
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d014      	beq.n	8007194 <USB_DeactivateEndpoint+0x5c>
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	b29b      	uxth	r3, r3
 8007178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007180:	b29c      	uxth	r4, r3
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	441a      	add	r2, r3
 800718c:	4b6b      	ldr	r3, [pc, #428]	; (800733c <USB_DeactivateEndpoint+0x204>)
 800718e:	4323      	orrs	r3, r4
 8007190:	b29b      	uxth	r3, r3
 8007192:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071aa:	b29c      	uxth	r4, r3
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	441a      	add	r2, r3
 80071b6:	4b62      	ldr	r3, [pc, #392]	; (8007340 <USB_DeactivateEndpoint+0x208>)
 80071b8:	4323      	orrs	r3, r4
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	8013      	strh	r3, [r2, #0]
 80071be:	e144      	b.n	800744a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b29c      	uxth	r4, r3
 80071ce:	4623      	mov	r3, r4
 80071d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d014      	beq.n	8007202 <USB_DeactivateEndpoint+0xca>
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ee:	b29c      	uxth	r4, r3
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	441a      	add	r2, r3
 80071fa:	4b52      	ldr	r3, [pc, #328]	; (8007344 <USB_DeactivateEndpoint+0x20c>)
 80071fc:	4323      	orrs	r3, r4
 80071fe:	b29b      	uxth	r3, r3
 8007200:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007218:	b29c      	uxth	r4, r3
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	441a      	add	r2, r3
 8007224:	4b46      	ldr	r3, [pc, #280]	; (8007340 <USB_DeactivateEndpoint+0x208>)
 8007226:	4323      	orrs	r3, r4
 8007228:	b29b      	uxth	r3, r3
 800722a:	8013      	strh	r3, [r2, #0]
 800722c:	e10d      	b.n	800744a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f040 8088 	bne.w	8007348 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29c      	uxth	r4, r3
 8007246:	4623      	mov	r3, r4
 8007248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d014      	beq.n	800727a <USB_DeactivateEndpoint+0x142>
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007266:	b29c      	uxth	r4, r3
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	441a      	add	r2, r3
 8007272:	4b34      	ldr	r3, [pc, #208]	; (8007344 <USB_DeactivateEndpoint+0x20c>)
 8007274:	4323      	orrs	r3, r4
 8007276:	b29b      	uxth	r3, r3
 8007278:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	b29c      	uxth	r4, r3
 8007288:	4623      	mov	r3, r4
 800728a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728e:	2b00      	cmp	r3, #0
 8007290:	d014      	beq.n	80072bc <USB_DeactivateEndpoint+0x184>
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a8:	b29c      	uxth	r4, r3
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	441a      	add	r2, r3
 80072b4:	4b21      	ldr	r3, [pc, #132]	; (800733c <USB_DeactivateEndpoint+0x204>)
 80072b6:	4323      	orrs	r3, r4
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d2:	b29c      	uxth	r4, r3
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	441a      	add	r2, r3
 80072de:	4b17      	ldr	r3, [pc, #92]	; (800733c <USB_DeactivateEndpoint+0x204>)
 80072e0:	4323      	orrs	r3, r4
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fc:	b29c      	uxth	r4, r3
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	441a      	add	r2, r3
 8007308:	4b0d      	ldr	r3, [pc, #52]	; (8007340 <USB_DeactivateEndpoint+0x208>)
 800730a:	4323      	orrs	r3, r4
 800730c:	b29b      	uxth	r3, r3
 800730e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007326:	b29c      	uxth	r4, r3
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	441a      	add	r2, r3
 8007332:	4b03      	ldr	r3, [pc, #12]	; (8007340 <USB_DeactivateEndpoint+0x208>)
 8007334:	4323      	orrs	r3, r4
 8007336:	b29b      	uxth	r3, r3
 8007338:	8013      	strh	r3, [r2, #0]
 800733a:	e086      	b.n	800744a <USB_DeactivateEndpoint+0x312>
 800733c:	ffff80c0 	.word	0xffff80c0
 8007340:	ffff8080 	.word	0xffff8080
 8007344:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29c      	uxth	r4, r3
 8007356:	4623      	mov	r3, r4
 8007358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d014      	beq.n	800738a <USB_DeactivateEndpoint+0x252>
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29b      	uxth	r3, r3
 800736e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007376:	b29c      	uxth	r4, r3
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	441a      	add	r2, r3
 8007382:	4b35      	ldr	r3, [pc, #212]	; (8007458 <USB_DeactivateEndpoint+0x320>)
 8007384:	4323      	orrs	r3, r4
 8007386:	b29b      	uxth	r3, r3
 8007388:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29c      	uxth	r4, r3
 8007398:	4623      	mov	r3, r4
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d014      	beq.n	80073cc <USB_DeactivateEndpoint+0x294>
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b8:	b29c      	uxth	r4, r3
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	441a      	add	r2, r3
 80073c4:	4b25      	ldr	r3, [pc, #148]	; (800745c <USB_DeactivateEndpoint+0x324>)
 80073c6:	4323      	orrs	r3, r4
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e2:	b29c      	uxth	r4, r3
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	441a      	add	r2, r3
 80073ee:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <USB_DeactivateEndpoint+0x320>)
 80073f0:	4323      	orrs	r3, r4
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29b      	uxth	r3, r3
 8007404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800740c:	b29c      	uxth	r4, r3
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	441a      	add	r2, r3
 8007418:	4b11      	ldr	r3, [pc, #68]	; (8007460 <USB_DeactivateEndpoint+0x328>)
 800741a:	4323      	orrs	r3, r4
 800741c:	b29b      	uxth	r3, r3
 800741e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29b      	uxth	r3, r3
 800742e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	b29c      	uxth	r4, r3
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	441a      	add	r2, r3
 8007442:	4b07      	ldr	r3, [pc, #28]	; (8007460 <USB_DeactivateEndpoint+0x328>)
 8007444:	4323      	orrs	r3, r4
 8007446:	b29b      	uxth	r3, r3
 8007448:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bc90      	pop	{r4, r7}
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	ffffc080 	.word	0xffffc080
 800745c:	ffff80c0 	.word	0xffff80c0
 8007460:	ffff8080 	.word	0xffff8080

08007464 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007464:	b590      	push	{r4, r7, lr}
 8007466:	b08d      	sub	sp, #52	; 0x34
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	785b      	ldrb	r3, [r3, #1]
 8007472:	2b01      	cmp	r3, #1
 8007474:	f040 8160 	bne.w	8007738 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	699a      	ldr	r2, [r3, #24]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	429a      	cmp	r2, r3
 8007482:	d909      	bls.n	8007498 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007490:	1ad2      	subs	r2, r2, r3
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	619a      	str	r2, [r3, #24]
 8007496:	e005      	b.n	80074a4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2200      	movs	r2, #0
 80074a2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	7b1b      	ldrb	r3, [r3, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d119      	bne.n	80074e0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	6959      	ldr	r1, [r3, #20]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	88da      	ldrh	r2, [r3, #6]
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fbbd 	bl	8007c38 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074be:	687c      	ldr	r4, [r7, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	441c      	add	r4, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	4423      	add	r3, r4
 80074d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074d6:	461c      	mov	r4, r3
 80074d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074da:	b29b      	uxth	r3, r3
 80074dc:	8023      	strh	r3, [r4, #0]
 80074de:	e10f      	b.n	8007700 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d065      	beq.n	80075c2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074f6:	687c      	ldr	r4, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	785b      	ldrb	r3, [r3, #1]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d148      	bne.n	8007592 <USB_EPStartXfer+0x12e>
 8007500:	687c      	ldr	r4, [r7, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007508:	b29b      	uxth	r3, r3
 800750a:	441c      	add	r4, r3
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	4423      	add	r3, r4
 8007514:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007518:	461c      	mov	r4, r3
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10e      	bne.n	800753e <USB_EPStartXfer+0xda>
 8007520:	8823      	ldrh	r3, [r4, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007528:	b29b      	uxth	r3, r3
 800752a:	8023      	strh	r3, [r4, #0]
 800752c:	8823      	ldrh	r3, [r4, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007538:	b29b      	uxth	r3, r3
 800753a:	8023      	strh	r3, [r4, #0]
 800753c:	e03d      	b.n	80075ba <USB_EPStartXfer+0x156>
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	2b3e      	cmp	r3, #62	; 0x3e
 8007542:	d810      	bhi.n	8007566 <USB_EPStartXfer+0x102>
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	085b      	lsrs	r3, r3, #1
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <USB_EPStartXfer+0xf6>
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	3301      	adds	r3, #1
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	b29b      	uxth	r3, r3
 800755e:	029b      	lsls	r3, r3, #10
 8007560:	b29b      	uxth	r3, r3
 8007562:	8023      	strh	r3, [r4, #0]
 8007564:	e029      	b.n	80075ba <USB_EPStartXfer+0x156>
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	095b      	lsrs	r3, r3, #5
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	2b00      	cmp	r3, #0
 8007574:	d102      	bne.n	800757c <USB_EPStartXfer+0x118>
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	3b01      	subs	r3, #1
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	b29b      	uxth	r3, r3
 8007580:	029b      	lsls	r3, r3, #10
 8007582:	b29b      	uxth	r3, r3
 8007584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800758c:	b29b      	uxth	r3, r3
 800758e:	8023      	strh	r3, [r4, #0]
 8007590:	e013      	b.n	80075ba <USB_EPStartXfer+0x156>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d10f      	bne.n	80075ba <USB_EPStartXfer+0x156>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	441c      	add	r4, r3
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	00db      	lsls	r3, r3, #3
 80075aa:	4423      	add	r3, r4
 80075ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	895b      	ldrh	r3, [r3, #10]
 80075be:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80075c0:	e063      	b.n	800768a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	785b      	ldrb	r3, [r3, #1]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d148      	bne.n	800765c <USB_EPStartXfer+0x1f8>
 80075ca:	687c      	ldr	r4, [r7, #4]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	441c      	add	r4, r3
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	4423      	add	r3, r4
 80075de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075e2:	461c      	mov	r4, r3
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10e      	bne.n	8007608 <USB_EPStartXfer+0x1a4>
 80075ea:	8823      	ldrh	r3, [r4, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	8023      	strh	r3, [r4, #0]
 80075f6:	8823      	ldrh	r3, [r4, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007602:	b29b      	uxth	r3, r3
 8007604:	8023      	strh	r3, [r4, #0]
 8007606:	e03d      	b.n	8007684 <USB_EPStartXfer+0x220>
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	2b3e      	cmp	r3, #62	; 0x3e
 800760c:	d810      	bhi.n	8007630 <USB_EPStartXfer+0x1cc>
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	085b      	lsrs	r3, r3, #1
 8007612:	623b      	str	r3, [r7, #32]
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <USB_EPStartXfer+0x1c0>
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	3301      	adds	r3, #1
 8007622:	623b      	str	r3, [r7, #32]
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	b29b      	uxth	r3, r3
 8007628:	029b      	lsls	r3, r3, #10
 800762a:	b29b      	uxth	r3, r3
 800762c:	8023      	strh	r3, [r4, #0]
 800762e:	e029      	b.n	8007684 <USB_EPStartXfer+0x220>
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	623b      	str	r3, [r7, #32]
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	f003 031f 	and.w	r3, r3, #31
 800763c:	2b00      	cmp	r3, #0
 800763e:	d102      	bne.n	8007646 <USB_EPStartXfer+0x1e2>
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	3b01      	subs	r3, #1
 8007644:	623b      	str	r3, [r7, #32]
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	b29b      	uxth	r3, r3
 800764a:	029b      	lsls	r3, r3, #10
 800764c:	b29b      	uxth	r3, r3
 800764e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007656:	b29b      	uxth	r3, r3
 8007658:	8023      	strh	r3, [r4, #0]
 800765a:	e013      	b.n	8007684 <USB_EPStartXfer+0x220>
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d10f      	bne.n	8007684 <USB_EPStartXfer+0x220>
 8007664:	687c      	ldr	r4, [r7, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766c:	b29b      	uxth	r3, r3
 800766e:	441c      	add	r4, r3
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	00db      	lsls	r3, r3, #3
 8007676:	4423      	add	r3, r4
 8007678:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800767c:	461c      	mov	r4, r3
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	b29b      	uxth	r3, r3
 8007682:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	891b      	ldrh	r3, [r3, #8]
 8007688:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	6959      	ldr	r1, [r3, #20]
 800768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007690:	b29b      	uxth	r3, r3
 8007692:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 facf 	bl	8007c38 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	785b      	ldrb	r3, [r3, #1]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d115      	bne.n	80076ce <USB_EPStartXfer+0x26a>
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b8:	b29c      	uxth	r4, r3
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	441a      	add	r2, r3
 80076c4:	4b9a      	ldr	r3, [pc, #616]	; (8007930 <USB_EPStartXfer+0x4cc>)
 80076c6:	4323      	orrs	r3, r4
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	8013      	strh	r3, [r2, #0]
 80076cc:	e018      	b.n	8007700 <USB_EPStartXfer+0x29c>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	785b      	ldrb	r3, [r3, #1]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d114      	bne.n	8007700 <USB_EPStartXfer+0x29c>
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ec:	b29c      	uxth	r4, r3
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	441a      	add	r2, r3
 80076f8:	4b8e      	ldr	r3, [pc, #568]	; (8007934 <USB_EPStartXfer+0x4d0>)
 80076fa:	4323      	orrs	r3, r4
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	b29b      	uxth	r3, r3
 800770e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007716:	b29c      	uxth	r4, r3
 8007718:	f084 0310 	eor.w	r3, r4, #16
 800771c:	b29c      	uxth	r4, r3
 800771e:	f084 0320 	eor.w	r3, r4, #32
 8007722:	b29c      	uxth	r4, r3
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	4b82      	ldr	r3, [pc, #520]	; (8007938 <USB_EPStartXfer+0x4d4>)
 8007730:	4323      	orrs	r3, r4
 8007732:	b29b      	uxth	r3, r3
 8007734:	8013      	strh	r3, [r2, #0]
 8007736:	e146      	b.n	80079c6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	699a      	ldr	r2, [r3, #24]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d909      	bls.n	8007758 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	1ad2      	subs	r2, r2, r3
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	619a      	str	r2, [r3, #24]
 8007756:	e005      	b.n	8007764 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2200      	movs	r2, #0
 8007762:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	7b1b      	ldrb	r3, [r3, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d148      	bne.n	80077fe <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800776c:	687c      	ldr	r4, [r7, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007774:	b29b      	uxth	r3, r3
 8007776:	441c      	add	r4, r3
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	00db      	lsls	r3, r3, #3
 800777e:	4423      	add	r3, r4
 8007780:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007784:	461c      	mov	r4, r3
 8007786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10e      	bne.n	80077aa <USB_EPStartXfer+0x346>
 800778c:	8823      	ldrh	r3, [r4, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007794:	b29b      	uxth	r3, r3
 8007796:	8023      	strh	r3, [r4, #0]
 8007798:	8823      	ldrh	r3, [r4, #0]
 800779a:	b29b      	uxth	r3, r3
 800779c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	8023      	strh	r3, [r4, #0]
 80077a8:	e0f2      	b.n	8007990 <USB_EPStartXfer+0x52c>
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	2b3e      	cmp	r3, #62	; 0x3e
 80077ae:	d810      	bhi.n	80077d2 <USB_EPStartXfer+0x36e>
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	61fb      	str	r3, [r7, #28]
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <USB_EPStartXfer+0x362>
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	3301      	adds	r3, #1
 80077c4:	61fb      	str	r3, [r7, #28]
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	029b      	lsls	r3, r3, #10
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	8023      	strh	r3, [r4, #0]
 80077d0:	e0de      	b.n	8007990 <USB_EPStartXfer+0x52c>
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	095b      	lsrs	r3, r3, #5
 80077d6:	61fb      	str	r3, [r7, #28]
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	f003 031f 	and.w	r3, r3, #31
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d102      	bne.n	80077e8 <USB_EPStartXfer+0x384>
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	61fb      	str	r3, [r7, #28]
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	029b      	lsls	r3, r3, #10
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	8023      	strh	r3, [r4, #0]
 80077fc:	e0c8      	b.n	8007990 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	785b      	ldrb	r3, [r3, #1]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d148      	bne.n	8007898 <USB_EPStartXfer+0x434>
 8007806:	687c      	ldr	r4, [r7, #4]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800780e:	b29b      	uxth	r3, r3
 8007810:	441c      	add	r4, r3
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	00db      	lsls	r3, r3, #3
 8007818:	4423      	add	r3, r4
 800781a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800781e:	461c      	mov	r4, r3
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10e      	bne.n	8007844 <USB_EPStartXfer+0x3e0>
 8007826:	8823      	ldrh	r3, [r4, #0]
 8007828:	b29b      	uxth	r3, r3
 800782a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800782e:	b29b      	uxth	r3, r3
 8007830:	8023      	strh	r3, [r4, #0]
 8007832:	8823      	ldrh	r3, [r4, #0]
 8007834:	b29b      	uxth	r3, r3
 8007836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800783a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800783e:	b29b      	uxth	r3, r3
 8007840:	8023      	strh	r3, [r4, #0]
 8007842:	e03d      	b.n	80078c0 <USB_EPStartXfer+0x45c>
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	2b3e      	cmp	r3, #62	; 0x3e
 8007848:	d810      	bhi.n	800786c <USB_EPStartXfer+0x408>
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	085b      	lsrs	r3, r3, #1
 800784e:	61bb      	str	r3, [r7, #24]
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <USB_EPStartXfer+0x3fc>
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	3301      	adds	r3, #1
 800785e:	61bb      	str	r3, [r7, #24]
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	b29b      	uxth	r3, r3
 8007864:	029b      	lsls	r3, r3, #10
 8007866:	b29b      	uxth	r3, r3
 8007868:	8023      	strh	r3, [r4, #0]
 800786a:	e029      	b.n	80078c0 <USB_EPStartXfer+0x45c>
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	61bb      	str	r3, [r7, #24]
 8007872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	2b00      	cmp	r3, #0
 800787a:	d102      	bne.n	8007882 <USB_EPStartXfer+0x41e>
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	3b01      	subs	r3, #1
 8007880:	61bb      	str	r3, [r7, #24]
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	b29b      	uxth	r3, r3
 8007886:	029b      	lsls	r3, r3, #10
 8007888:	b29b      	uxth	r3, r3
 800788a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800788e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007892:	b29b      	uxth	r3, r3
 8007894:	8023      	strh	r3, [r4, #0]
 8007896:	e013      	b.n	80078c0 <USB_EPStartXfer+0x45c>
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d10f      	bne.n	80078c0 <USB_EPStartXfer+0x45c>
 80078a0:	687c      	ldr	r4, [r7, #4]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	441c      	add	r4, r3
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	4423      	add	r3, r4
 80078b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078b8:	461c      	mov	r4, r3
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	b29b      	uxth	r3, r3
 80078be:	8023      	strh	r3, [r4, #0]
 80078c0:	687c      	ldr	r4, [r7, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d14e      	bne.n	8007968 <USB_EPStartXfer+0x504>
 80078ca:	687c      	ldr	r4, [r7, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	441c      	add	r4, r3
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	4423      	add	r3, r4
 80078de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078e2:	461c      	mov	r4, r3
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10e      	bne.n	8007908 <USB_EPStartXfer+0x4a4>
 80078ea:	8823      	ldrh	r3, [r4, #0]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8023      	strh	r3, [r4, #0]
 80078f6:	8823      	ldrh	r3, [r4, #0]
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007902:	b29b      	uxth	r3, r3
 8007904:	8023      	strh	r3, [r4, #0]
 8007906:	e043      	b.n	8007990 <USB_EPStartXfer+0x52c>
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	2b3e      	cmp	r3, #62	; 0x3e
 800790c:	d816      	bhi.n	800793c <USB_EPStartXfer+0x4d8>
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	085b      	lsrs	r3, r3, #1
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <USB_EPStartXfer+0x4c0>
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	3301      	adds	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	b29b      	uxth	r3, r3
 8007928:	029b      	lsls	r3, r3, #10
 800792a:	b29b      	uxth	r3, r3
 800792c:	8023      	strh	r3, [r4, #0]
 800792e:	e02f      	b.n	8007990 <USB_EPStartXfer+0x52c>
 8007930:	ffff80c0 	.word	0xffff80c0
 8007934:	ffffc080 	.word	0xffffc080
 8007938:	ffff8080 	.word	0xffff8080
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	f003 031f 	and.w	r3, r3, #31
 8007948:	2b00      	cmp	r3, #0
 800794a:	d102      	bne.n	8007952 <USB_EPStartXfer+0x4ee>
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	3b01      	subs	r3, #1
 8007950:	617b      	str	r3, [r7, #20]
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	b29b      	uxth	r3, r3
 8007956:	029b      	lsls	r3, r3, #10
 8007958:	b29b      	uxth	r3, r3
 800795a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800795e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007962:	b29b      	uxth	r3, r3
 8007964:	8023      	strh	r3, [r4, #0]
 8007966:	e013      	b.n	8007990 <USB_EPStartXfer+0x52c>
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d10f      	bne.n	8007990 <USB_EPStartXfer+0x52c>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007976:	b29b      	uxth	r3, r3
 8007978:	441c      	add	r4, r3
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	4423      	add	r3, r4
 8007982:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	b29a      	uxth	r2, r3
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b29b      	uxth	r3, r3
 800799e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a6:	b29c      	uxth	r4, r3
 80079a8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80079ac:	b29c      	uxth	r4, r3
 80079ae:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80079b2:	b29c      	uxth	r4, r3
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	441a      	add	r2, r3
 80079be:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <USB_EPStartXfer+0x56c>)
 80079c0:	4323      	orrs	r3, r4
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3734      	adds	r7, #52	; 0x34
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd90      	pop	{r4, r7, pc}
 80079d0:	ffff8080 	.word	0xffff8080

080079d4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079d4:	b490      	push	{r4, r7}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	785b      	ldrb	r3, [r3, #1]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d018      	beq.n	8007a18 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079fc:	b29c      	uxth	r4, r3
 80079fe:	f084 0310 	eor.w	r3, r4, #16
 8007a02:	b29c      	uxth	r4, r3
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	441a      	add	r2, r3
 8007a0e:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <USB_EPSetStall+0x80>)
 8007a10:	4323      	orrs	r3, r4
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	8013      	strh	r3, [r2, #0]
 8007a16:	e017      	b.n	8007a48 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2e:	b29c      	uxth	r4, r3
 8007a30:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007a34:	b29c      	uxth	r4, r3
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	441a      	add	r2, r3
 8007a40:	4b04      	ldr	r3, [pc, #16]	; (8007a54 <USB_EPSetStall+0x80>)
 8007a42:	4323      	orrs	r3, r4
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bc90      	pop	{r4, r7}
 8007a52:	4770      	bx	lr
 8007a54:	ffff8080 	.word	0xffff8080

08007a58 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a58:	b490      	push	{r4, r7}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	7b1b      	ldrb	r3, [r3, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d17d      	bne.n	8007b66 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	785b      	ldrb	r3, [r3, #1]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d03d      	beq.n	8007aee <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	b29c      	uxth	r4, r3
 8007a80:	4623      	mov	r3, r4
 8007a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d014      	beq.n	8007ab4 <USB_EPClearStall+0x5c>
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa0:	b29c      	uxth	r4, r3
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	441a      	add	r2, r3
 8007aac:	4b31      	ldr	r3, [pc, #196]	; (8007b74 <USB_EPClearStall+0x11c>)
 8007aae:	4323      	orrs	r3, r4
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	78db      	ldrb	r3, [r3, #3]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d054      	beq.n	8007b66 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad2:	b29c      	uxth	r4, r3
 8007ad4:	f084 0320 	eor.w	r3, r4, #32
 8007ad8:	b29c      	uxth	r4, r3
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	441a      	add	r2, r3
 8007ae4:	4b24      	ldr	r3, [pc, #144]	; (8007b78 <USB_EPClearStall+0x120>)
 8007ae6:	4323      	orrs	r3, r4
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	8013      	strh	r3, [r2, #0]
 8007aec:	e03b      	b.n	8007b66 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29c      	uxth	r4, r3
 8007afc:	4623      	mov	r3, r4
 8007afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d014      	beq.n	8007b30 <USB_EPClearStall+0xd8>
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1c:	b29c      	uxth	r4, r3
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	441a      	add	r2, r3
 8007b28:	4b14      	ldr	r3, [pc, #80]	; (8007b7c <USB_EPClearStall+0x124>)
 8007b2a:	4323      	orrs	r3, r4
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b46:	b29c      	uxth	r4, r3
 8007b48:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007b4c:	b29c      	uxth	r4, r3
 8007b4e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007b52:	b29c      	uxth	r4, r3
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	441a      	add	r2, r3
 8007b5e:	4b06      	ldr	r3, [pc, #24]	; (8007b78 <USB_EPClearStall+0x120>)
 8007b60:	4323      	orrs	r3, r4
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bc90      	pop	{r4, r7}
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	ffff80c0 	.word	0xffff80c0
 8007b78:	ffff8080 	.word	0xffff8080
 8007b7c:	ffffc080 	.word	0xffffc080

08007b80 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d103      	bne.n	8007b9a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2280      	movs	r2, #128	; 0x80
 8007b96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c12:	68fb      	ldr	r3, [r7, #12]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b08d      	sub	sp, #52	; 0x34
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4611      	mov	r1, r2
 8007c44:	461a      	mov	r2, r3
 8007c46:	460b      	mov	r3, r1
 8007c48:	80fb      	strh	r3, [r7, #6]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c4e:	88bb      	ldrh	r3, [r7, #4]
 8007c50:	3301      	adds	r3, #1
 8007c52:	085b      	lsrs	r3, r3, #1
 8007c54:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c5e:	88fa      	ldrh	r2, [r7, #6]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c68:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c6e:	e01b      	b.n	8007ca8 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	3301      	adds	r3, #1
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	021b      	lsls	r3, r3, #8
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	461a      	mov	r2, r3
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c98:	3302      	adds	r3, #2
 8007c9a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e0      	bne.n	8007c70 <USB_WritePMA+0x38>
  }
}
 8007cae:	bf00      	nop
 8007cb0:	3734      	adds	r7, #52	; 0x34
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b08b      	sub	sp, #44	; 0x2c
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	460b      	mov	r3, r1
 8007cca:	80fb      	strh	r3, [r7, #6]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007cd0:	88bb      	ldrh	r3, [r7, #4]
 8007cd2:	085b      	lsrs	r3, r3, #1
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ce0:	88fa      	ldrh	r2, [r7, #6]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cea:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf0:	e018      	b.n	8007d24 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	3302      	adds	r3, #2
 8007cfe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	0a1b      	lsrs	r3, r3, #8
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	3b01      	subs	r3, #1
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e3      	bne.n	8007cf2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007d2a:	88bb      	ldrh	r3, [r7, #4]
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d007      	beq.n	8007d46 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	701a      	strb	r2, [r3, #0]
  }
}
 8007d46:	bf00      	nop
 8007d48:	372c      	adds	r7, #44	; 0x2c
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7c1b      	ldrb	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d115      	bne.n	8007d96 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d6e:	2202      	movs	r2, #2
 8007d70:	2181      	movs	r1, #129	; 0x81
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f005 fb3c 	bl	800d3f0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d82:	2202      	movs	r2, #2
 8007d84:	2101      	movs	r1, #1
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f005 fb32 	bl	800d3f0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007d94:	e012      	b.n	8007dbc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d96:	2340      	movs	r3, #64	; 0x40
 8007d98:	2202      	movs	r2, #2
 8007d9a:	2181      	movs	r1, #129	; 0x81
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f005 fb27 	bl	800d3f0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007da8:	2340      	movs	r3, #64	; 0x40
 8007daa:	2202      	movs	r2, #2
 8007dac:	2101      	movs	r1, #1
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f005 fb1e 	bl	800d3f0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	2182      	movs	r1, #130	; 0x82
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f005 fb14 	bl	800d3f0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007dce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007dd2:	f005 fd07 	bl	800d7e4 <USBD_static_malloc>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d102      	bne.n	8007dee <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007de8:	2301      	movs	r3, #1
 8007dea:	73fb      	strb	r3, [r7, #15]
 8007dec:	e026      	b.n	8007e3c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	7c1b      	ldrb	r3, [r3, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d109      	bne.n	8007e2c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e22:	2101      	movs	r1, #1
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f005 fc59 	bl	800d6dc <USBD_LL_PrepareReceive>
 8007e2a:	e007      	b.n	8007e3c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e32:	2340      	movs	r3, #64	; 0x40
 8007e34:	2101      	movs	r1, #1
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f005 fc50 	bl	800d6dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e56:	2181      	movs	r1, #129	; 0x81
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f005 fb07 	bl	800d46c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e64:	2101      	movs	r1, #1
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f005 fb00 	bl	800d46c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e74:	2182      	movs	r1, #130	; 0x82
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f005 faf8 	bl	800d46c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00e      	beq.n	8007eaa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f005 fcaf 	bl	800d800 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d039      	beq.n	8007f52 <USBD_CDC_Setup+0x9e>
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d17c      	bne.n	8007fdc <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	88db      	ldrh	r3, [r3, #6]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d029      	beq.n	8007f3e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	b25b      	sxtb	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	da11      	bge.n	8007f18 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007f00:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	88d2      	ldrh	r2, [r2, #6]
 8007f06:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f08:	6939      	ldr	r1, [r7, #16]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	88db      	ldrh	r3, [r3, #6]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 f9fb 	bl	800930c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007f16:	e068      	b.n	8007fea <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	785a      	ldrb	r2, [r3, #1]
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	88db      	ldrh	r3, [r3, #6]
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f2e:	6939      	ldr	r1, [r7, #16]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	88db      	ldrh	r3, [r3, #6]
 8007f34:	461a      	mov	r2, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 fa16 	bl	8009368 <USBD_CtlPrepareRx>
      break;
 8007f3c:	e055      	b.n	8007fea <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	7850      	ldrb	r0, [r2, #1]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	4798      	blx	r3
      break;
 8007f50:	e04b      	b.n	8007fea <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	2b0a      	cmp	r3, #10
 8007f58:	d017      	beq.n	8007f8a <USBD_CDC_Setup+0xd6>
 8007f5a:	2b0b      	cmp	r3, #11
 8007f5c:	d029      	beq.n	8007fb2 <USBD_CDC_Setup+0xfe>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d133      	bne.n	8007fca <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d107      	bne.n	8007f7c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007f6c:	f107 030c 	add.w	r3, r7, #12
 8007f70:	2202      	movs	r2, #2
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 f9c9 	bl	800930c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f7a:	e02e      	b.n	8007fda <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 f959 	bl	8009236 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f84:	2302      	movs	r3, #2
 8007f86:	75fb      	strb	r3, [r7, #23]
          break;
 8007f88:	e027      	b.n	8007fda <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d107      	bne.n	8007fa4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f94:	f107 030f 	add.w	r3, r7, #15
 8007f98:	2201      	movs	r2, #1
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 f9b5 	bl	800930c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fa2:	e01a      	b.n	8007fda <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 f945 	bl	8009236 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fac:	2302      	movs	r3, #2
 8007fae:	75fb      	strb	r3, [r7, #23]
          break;
 8007fb0:	e013      	b.n	8007fda <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d00d      	beq.n	8007fd8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 f939 	bl	8009236 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007fc8:	e006      	b.n	8007fd8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 f932 	bl	8009236 <USBD_CtlError>
          ret = USBD_FAIL;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8007fd6:	e000      	b.n	8007fda <USBD_CDC_Setup+0x126>
          break;
 8007fd8:	bf00      	nop
      }
      break;
 8007fda:	e006      	b.n	8007fea <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 f929 	bl	8009236 <USBD_CtlError>
      ret = USBD_FAIL;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe8:	bf00      	nop
  }

  return ret;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008006:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800800e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d037      	beq.n	800808a <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800801a:	78fa      	ldrb	r2, [r7, #3]
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	440b      	add	r3, r1
 8008028:	331c      	adds	r3, #28
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d026      	beq.n	800807e <USBD_CDC_DataIn+0x8a>
 8008030:	78fa      	ldrb	r2, [r7, #3]
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	331c      	adds	r3, #28
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	78fa      	ldrb	r2, [r7, #3]
 8008044:	68b9      	ldr	r1, [r7, #8]
 8008046:	0152      	lsls	r2, r2, #5
 8008048:	440a      	add	r2, r1
 800804a:	3238      	adds	r2, #56	; 0x38
 800804c:	6812      	ldr	r2, [r2, #0]
 800804e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008052:	fb02 f201 	mul.w	r2, r2, r1
 8008056:	1a9b      	subs	r3, r3, r2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d110      	bne.n	800807e <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800805c:	78fa      	ldrb	r2, [r7, #3]
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	440b      	add	r3, r1
 800806a:	331c      	adds	r3, #28
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008070:	78f9      	ldrb	r1, [r7, #3]
 8008072:	2300      	movs	r3, #0
 8008074:	2200      	movs	r2, #0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f005 faf6 	bl	800d668 <USBD_LL_Transmit>
 800807c:	e003      	b.n	8008086 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	e000      	b.n	800808c <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800808a:	2302      	movs	r3, #2
  }
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f005 fb4f 	bl	800d750 <USBD_LL_GetRxDataSize>
 80080b2:	4602      	mov	r2, r0
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00d      	beq.n	80080e0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080d8:	4611      	mov	r1, r2
 80080da:	4798      	blx	r3

    return USBD_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	e000      	b.n	80080e2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80080e0:	2302      	movs	r3, #2
  }
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008100:	2b00      	cmp	r3, #0
 8008102:	d015      	beq.n	8008130 <USBD_CDC_EP0_RxReady+0x46>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800810a:	2bff      	cmp	r3, #255	; 0xff
 800810c:	d010      	beq.n	8008130 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800811c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008124:	b292      	uxth	r2, r2
 8008126:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	22ff      	movs	r2, #255	; 0xff
 800812c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2243      	movs	r2, #67	; 0x43
 8008148:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800814a:	4b03      	ldr	r3, [pc, #12]	; (8008158 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800814c:	4618      	mov	r0, r3
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	200000fc 	.word	0x200000fc

0800815c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2243      	movs	r2, #67	; 0x43
 8008168:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800816a:	4b03      	ldr	r3, [pc, #12]	; (8008178 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	200000b8 	.word	0x200000b8

0800817c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2243      	movs	r2, #67	; 0x43
 8008188:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800818a:	4b03      	ldr	r3, [pc, #12]	; (8008198 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	20000140 	.word	0x20000140

0800819c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	220a      	movs	r2, #10
 80081a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80081aa:	4b03      	ldr	r3, [pc, #12]	; (80081b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	20000074 	.word	0x20000074

080081bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80081c6:	2302      	movs	r3, #2
 80081c8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d005      	beq.n	80081dc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b087      	sub	sp, #28
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	4613      	mov	r3, r2
 80081f6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fe:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008208:	88fa      	ldrh	r2, [r7, #6]
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	371c      	adds	r7, #28
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800821e:	b480      	push	{r7}
 8008220:	b085      	sub	sp, #20
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008254:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825c:	2b00      	cmp	r3, #0
 800825e:	d017      	beq.n	8008290 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	7c1b      	ldrb	r3, [r3, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d109      	bne.n	800827c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800826e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008272:	2101      	movs	r1, #1
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f005 fa31 	bl	800d6dc <USBD_LL_PrepareReceive>
 800827a:	e007      	b.n	800828c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008282:	2340      	movs	r3, #64	; 0x40
 8008284:	2101      	movs	r1, #1
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f005 fa28 	bl	800d6dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	e000      	b.n	8008292 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008290:	2302      	movs	r3, #2
  }
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	4613      	mov	r3, r2
 80082a6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80082ae:	2302      	movs	r3, #2
 80082b0:	e01a      	b.n	80082e8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	79fa      	ldrb	r2, [r7, #7]
 80082de:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f004 fff1 	bl	800d2c8 <USBD_LL_Init>

  return USBD_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d006      	beq.n	8008312 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	73fb      	strb	r3, [r7, #15]
 8008310:	e001      	b.n	8008316 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008312:	2302      	movs	r3, #2
 8008314:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008316:	7bfb      	ldrb	r3, [r7, #15]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f005 f82d 	bl	800d38c <USBD_LL_Start>

  return USBD_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800835e:	2302      	movs	r3, #2
 8008360:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00c      	beq.n	8008386 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	78fa      	ldrb	r2, [r7, #3]
 8008376:	4611      	mov	r1, r2
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	4798      	blx	r3
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008386:	7bfb      	ldrb	r3, [r7, #15]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	78fa      	ldrb	r2, [r7, #3]
 80083a6:	4611      	mov	r1, r2
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	4798      	blx	r3

  return USBD_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b082      	sub	sp, #8
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 fef7 	bl	80091bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80083dc:	461a      	mov	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80083ea:	f003 031f 	and.w	r3, r3, #31
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d00c      	beq.n	800840c <USBD_LL_SetupStage+0x56>
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d302      	bcc.n	80083fc <USBD_LL_SetupStage+0x46>
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d010      	beq.n	800841c <USBD_LL_SetupStage+0x66>
 80083fa:	e017      	b.n	800842c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f9cd 	bl	80087a4 <USBD_StdDevReq>
      break;
 800840a:	e01a      	b.n	8008442 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fa2f 	bl	8008878 <USBD_StdItfReq>
      break;
 800841a:	e012      	b.n	8008442 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fa6d 	bl	8008904 <USBD_StdEPReq>
      break;
 800842a:	e00a      	b.n	8008442 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008432:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008436:	b2db      	uxtb	r3, r3
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f005 f84c 	bl	800d4d8 <USBD_LL_StallEP>
      break;
 8008440:	bf00      	nop
  }

  return USBD_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	460b      	mov	r3, r1
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800845a:	7afb      	ldrb	r3, [r7, #11]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d14b      	bne.n	80084f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008466:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800846e:	2b03      	cmp	r3, #3
 8008470:	d134      	bne.n	80084dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	429a      	cmp	r2, r3
 800847c:	d919      	bls.n	80084b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	1ad2      	subs	r2, r2, r3
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008494:	429a      	cmp	r2, r3
 8008496:	d203      	bcs.n	80084a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800849c:	b29b      	uxth	r3, r3
 800849e:	e002      	b.n	80084a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	461a      	mov	r2, r3
 80084a8:	6879      	ldr	r1, [r7, #4]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 ff7a 	bl	80093a4 <USBD_CtlContinueRx>
 80084b0:	e038      	b.n	8008524 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d105      	bne.n	80084d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 ff77 	bl	80093c8 <USBD_CtlSendStatus>
 80084da:	e023      	b.n	8008524 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	d11e      	bne.n	8008524 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80084ee:	2100      	movs	r1, #0
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f004 fff1 	bl	800d4d8 <USBD_LL_StallEP>
 80084f6:	e015      	b.n	8008524 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00d      	beq.n	8008520 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800850a:	2b03      	cmp	r3, #3
 800850c:	d108      	bne.n	8008520 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	7afa      	ldrb	r2, [r7, #11]
 8008518:	4611      	mov	r1, r2
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	4798      	blx	r3
 800851e:	e001      	b.n	8008524 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008520:	2302      	movs	r3, #2
 8008522:	e000      	b.n	8008526 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b086      	sub	sp, #24
 8008532:	af00      	add	r7, sp, #0
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	460b      	mov	r3, r1
 8008538:	607a      	str	r2, [r7, #4]
 800853a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800853c:	7afb      	ldrb	r3, [r7, #11]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d17f      	bne.n	8008642 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3314      	adds	r3, #20
 8008546:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800854e:	2b02      	cmp	r3, #2
 8008550:	d15c      	bne.n	800860c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	429a      	cmp	r2, r3
 800855c:	d915      	bls.n	800858a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	b29b      	uxth	r3, r3
 8008572:	461a      	mov	r2, r3
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 fee4 	bl	8009344 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800857c:	2300      	movs	r3, #0
 800857e:	2200      	movs	r2, #0
 8008580:	2100      	movs	r1, #0
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f005 f8aa 	bl	800d6dc <USBD_LL_PrepareReceive>
 8008588:	e04e      	b.n	8008628 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	6912      	ldr	r2, [r2, #16]
 8008592:	fbb3 f1f2 	udiv	r1, r3, r2
 8008596:	fb02 f201 	mul.w	r2, r2, r1
 800859a:	1a9b      	subs	r3, r3, r2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d11c      	bne.n	80085da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d316      	bcc.n	80085da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d20f      	bcs.n	80085da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085ba:	2200      	movs	r2, #0
 80085bc:	2100      	movs	r1, #0
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 fec0 	bl	8009344 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085cc:	2300      	movs	r3, #0
 80085ce:	2200      	movs	r2, #0
 80085d0:	2100      	movs	r1, #0
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f005 f882 	bl	800d6dc <USBD_LL_PrepareReceive>
 80085d8:	e026      	b.n	8008628 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00a      	beq.n	80085fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d105      	bne.n	80085fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80085fc:	2180      	movs	r1, #128	; 0x80
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f004 ff6a 	bl	800d4d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 fef2 	bl	80093ee <USBD_CtlReceiveStatus>
 800860a:	e00d      	b.n	8008628 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008612:	2b04      	cmp	r3, #4
 8008614:	d004      	beq.n	8008620 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800861c:	2b00      	cmp	r3, #0
 800861e:	d103      	bne.n	8008628 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008620:	2180      	movs	r1, #128	; 0x80
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f004 ff58 	bl	800d4d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800862e:	2b01      	cmp	r3, #1
 8008630:	d11d      	bne.n	800866e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7ff fe82 	bl	800833c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008640:	e015      	b.n	800866e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00d      	beq.n	800866a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008654:	2b03      	cmp	r3, #3
 8008656:	d108      	bne.n	800866a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	7afa      	ldrb	r2, [r7, #11]
 8008662:	4611      	mov	r1, r2
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	4798      	blx	r3
 8008668:	e001      	b.n	800866e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800866a:	2302      	movs	r3, #2
 800866c:	e000      	b.n	8008670 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008680:	2340      	movs	r3, #64	; 0x40
 8008682:	2200      	movs	r2, #0
 8008684:	2100      	movs	r1, #0
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f004 feb2 	bl	800d3f0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2240      	movs	r2, #64	; 0x40
 8008698:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800869c:	2340      	movs	r3, #64	; 0x40
 800869e:	2200      	movs	r2, #0
 80086a0:	2180      	movs	r1, #128	; 0x80
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f004 fea4 	bl	800d3f0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2240      	movs	r2, #64	; 0x40
 80086b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d009      	beq.n	80086f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6852      	ldr	r2, [r2, #4]
 80086e8:	b2d2      	uxtb	r2, r2
 80086ea:	4611      	mov	r1, r2
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	4798      	blx	r3
  }

  return USBD_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	78fa      	ldrb	r2, [r7, #3]
 800870a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2204      	movs	r2, #4
 8008732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008752:	2b04      	cmp	r3, #4
 8008754:	d105      	bne.n	8008762 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800877e:	2b03      	cmp	r3, #3
 8008780:	d10b      	bne.n	800879a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d005      	beq.n	800879a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	d004      	beq.n	80087c8 <USBD_StdDevReq+0x24>
 80087be:	2b40      	cmp	r3, #64	; 0x40
 80087c0:	d002      	beq.n	80087c8 <USBD_StdDevReq+0x24>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d008      	beq.n	80087d8 <USBD_StdDevReq+0x34>
 80087c6:	e04c      	b.n	8008862 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	4798      	blx	r3
      break;
 80087d6:	e049      	b.n	800886c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	785b      	ldrb	r3, [r3, #1]
 80087dc:	2b09      	cmp	r3, #9
 80087de:	d83a      	bhi.n	8008856 <USBD_StdDevReq+0xb2>
 80087e0:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <USBD_StdDevReq+0x44>)
 80087e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e6:	bf00      	nop
 80087e8:	08008839 	.word	0x08008839
 80087ec:	0800884d 	.word	0x0800884d
 80087f0:	08008857 	.word	0x08008857
 80087f4:	08008843 	.word	0x08008843
 80087f8:	08008857 	.word	0x08008857
 80087fc:	0800881b 	.word	0x0800881b
 8008800:	08008811 	.word	0x08008811
 8008804:	08008857 	.word	0x08008857
 8008808:	0800882f 	.word	0x0800882f
 800880c:	08008825 	.word	0x08008825
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f9d4 	bl	8008bc0 <USBD_GetDescriptor>
          break;
 8008818:	e022      	b.n	8008860 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fb61 	bl	8008ee4 <USBD_SetAddress>
          break;
 8008822:	e01d      	b.n	8008860 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fb9e 	bl	8008f68 <USBD_SetConfig>
          break;
 800882c:	e018      	b.n	8008860 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fc27 	bl	8009084 <USBD_GetConfig>
          break;
 8008836:	e013      	b.n	8008860 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fc56 	bl	80090ec <USBD_GetStatus>
          break;
 8008840:	e00e      	b.n	8008860 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fc84 	bl	8009152 <USBD_SetFeature>
          break;
 800884a:	e009      	b.n	8008860 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fc93 	bl	800917a <USBD_ClrFeature>
          break;
 8008854:	e004      	b.n	8008860 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fcec 	bl	8009236 <USBD_CtlError>
          break;
 800885e:	bf00      	nop
      }
      break;
 8008860:	e004      	b.n	800886c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fce6 	bl	8009236 <USBD_CtlError>
      break;
 800886a:	bf00      	nop
  }

  return ret;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop

08008878 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800888e:	2b20      	cmp	r3, #32
 8008890:	d003      	beq.n	800889a <USBD_StdItfReq+0x22>
 8008892:	2b40      	cmp	r3, #64	; 0x40
 8008894:	d001      	beq.n	800889a <USBD_StdItfReq+0x22>
 8008896:	2b00      	cmp	r3, #0
 8008898:	d12a      	bne.n	80088f0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a0:	3b01      	subs	r3, #1
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d81d      	bhi.n	80088e2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	889b      	ldrh	r3, [r3, #4]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d813      	bhi.n	80088d8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	4798      	blx	r3
 80088be:	4603      	mov	r3, r0
 80088c0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	88db      	ldrh	r3, [r3, #6]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d110      	bne.n	80088ec <USBD_StdItfReq+0x74>
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10d      	bne.n	80088ec <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fd79 	bl	80093c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088d6:	e009      	b.n	80088ec <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fcab 	bl	8009236 <USBD_CtlError>
          break;
 80088e0:	e004      	b.n	80088ec <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fca6 	bl	8009236 <USBD_CtlError>
          break;
 80088ea:	e000      	b.n	80088ee <USBD_StdItfReq+0x76>
          break;
 80088ec:	bf00      	nop
      }
      break;
 80088ee:	e004      	b.n	80088fa <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fc9f 	bl	8009236 <USBD_CtlError>
      break;
 80088f8:	bf00      	nop
  }

  return USBD_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	889b      	ldrh	r3, [r3, #4]
 8008916:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008920:	2b20      	cmp	r3, #32
 8008922:	d004      	beq.n	800892e <USBD_StdEPReq+0x2a>
 8008924:	2b40      	cmp	r3, #64	; 0x40
 8008926:	d002      	beq.n	800892e <USBD_StdEPReq+0x2a>
 8008928:	2b00      	cmp	r3, #0
 800892a:	d008      	beq.n	800893e <USBD_StdEPReq+0x3a>
 800892c:	e13d      	b.n	8008baa <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3
      break;
 800893c:	e13a      	b.n	8008bb4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008946:	2b20      	cmp	r3, #32
 8008948:	d10a      	bne.n	8008960 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	e12a      	b.n	8008bb6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	785b      	ldrb	r3, [r3, #1]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d03e      	beq.n	80089e6 <USBD_StdEPReq+0xe2>
 8008968:	2b03      	cmp	r3, #3
 800896a:	d002      	beq.n	8008972 <USBD_StdEPReq+0x6e>
 800896c:	2b00      	cmp	r3, #0
 800896e:	d070      	beq.n	8008a52 <USBD_StdEPReq+0x14e>
 8008970:	e115      	b.n	8008b9e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008978:	2b02      	cmp	r3, #2
 800897a:	d002      	beq.n	8008982 <USBD_StdEPReq+0x7e>
 800897c:	2b03      	cmp	r3, #3
 800897e:	d015      	beq.n	80089ac <USBD_StdEPReq+0xa8>
 8008980:	e02b      	b.n	80089da <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00c      	beq.n	80089a2 <USBD_StdEPReq+0x9e>
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	2b80      	cmp	r3, #128	; 0x80
 800898c:	d009      	beq.n	80089a2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f004 fda0 	bl	800d4d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008998:	2180      	movs	r1, #128	; 0x80
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f004 fd9c 	bl	800d4d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089a0:	e020      	b.n	80089e4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fc46 	bl	8009236 <USBD_CtlError>
              break;
 80089aa:	e01b      	b.n	80089e4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	885b      	ldrh	r3, [r3, #2]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10e      	bne.n	80089d2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00b      	beq.n	80089d2 <USBD_StdEPReq+0xce>
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b80      	cmp	r3, #128	; 0x80
 80089be:	d008      	beq.n	80089d2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	88db      	ldrh	r3, [r3, #6]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f004 fd83 	bl	800d4d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fcf8 	bl	80093c8 <USBD_CtlSendStatus>

              break;
 80089d8:	e004      	b.n	80089e4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fc2a 	bl	8009236 <USBD_CtlError>
              break;
 80089e2:	bf00      	nop
          }
          break;
 80089e4:	e0e0      	b.n	8008ba8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d002      	beq.n	80089f6 <USBD_StdEPReq+0xf2>
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d015      	beq.n	8008a20 <USBD_StdEPReq+0x11c>
 80089f4:	e026      	b.n	8008a44 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00c      	beq.n	8008a16 <USBD_StdEPReq+0x112>
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	2b80      	cmp	r3, #128	; 0x80
 8008a00:	d009      	beq.n	8008a16 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f004 fd66 	bl	800d4d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a0c:	2180      	movs	r1, #128	; 0x80
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f004 fd62 	bl	800d4d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a14:	e01c      	b.n	8008a50 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fc0c 	bl	8009236 <USBD_CtlError>
              break;
 8008a1e:	e017      	b.n	8008a50 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	885b      	ldrh	r3, [r3, #2]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d112      	bne.n	8008a4e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d004      	beq.n	8008a3c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f004 fd84 	bl	800d544 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fcc3 	bl	80093c8 <USBD_CtlSendStatus>
              }
              break;
 8008a42:	e004      	b.n	8008a4e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fbf5 	bl	8009236 <USBD_CtlError>
              break;
 8008a4c:	e000      	b.n	8008a50 <USBD_StdEPReq+0x14c>
              break;
 8008a4e:	bf00      	nop
          }
          break;
 8008a50:	e0aa      	b.n	8008ba8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d002      	beq.n	8008a62 <USBD_StdEPReq+0x15e>
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d032      	beq.n	8008ac6 <USBD_StdEPReq+0x1c2>
 8008a60:	e097      	b.n	8008b92 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d007      	beq.n	8008a78 <USBD_StdEPReq+0x174>
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b80      	cmp	r3, #128	; 0x80
 8008a6c:	d004      	beq.n	8008a78 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fbe0 	bl	8009236 <USBD_CtlError>
                break;
 8008a76:	e091      	b.n	8008b9c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	da0b      	bge.n	8008a98 <USBD_StdEPReq+0x194>
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	3310      	adds	r3, #16
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	4413      	add	r3, r2
 8008a94:	3304      	adds	r3, #4
 8008a96:	e00b      	b.n	8008ab0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	4413      	add	r3, r2
 8008aae:	3304      	adds	r3, #4
 8008ab0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2202      	movs	r2, #2
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fc24 	bl	800930c <USBD_CtlSendData>
              break;
 8008ac4:	e06a      	b.n	8008b9c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	da11      	bge.n	8008af2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	f003 020f 	and.w	r2, r3, #15
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	440b      	add	r3, r1
 8008ae0:	3318      	adds	r3, #24
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d117      	bne.n	8008b18 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fba3 	bl	8009236 <USBD_CtlError>
                  break;
 8008af0:	e054      	b.n	8008b9c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	f003 020f 	and.w	r2, r3, #15
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	4613      	mov	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	440b      	add	r3, r1
 8008b04:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d104      	bne.n	8008b18 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fb90 	bl	8009236 <USBD_CtlError>
                  break;
 8008b16:	e041      	b.n	8008b9c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	da0b      	bge.n	8008b38 <USBD_StdEPReq+0x234>
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	3310      	adds	r3, #16
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	4413      	add	r3, r2
 8008b34:	3304      	adds	r3, #4
 8008b36:	e00b      	b.n	8008b50 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b3e:	4613      	mov	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	3304      	adds	r3, #4
 8008b50:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <USBD_StdEPReq+0x25a>
 8008b58:	7bbb      	ldrb	r3, [r7, #14]
 8008b5a:	2b80      	cmp	r3, #128	; 0x80
 8008b5c:	d103      	bne.n	8008b66 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	e00e      	b.n	8008b84 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f004 fd20 	bl	800d5b0 <USBD_LL_IsStallEP>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	e002      	b.n	8008b84 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2202      	movs	r2, #2
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fbbe 	bl	800930c <USBD_CtlSendData>
              break;
 8008b90:	e004      	b.n	8008b9c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fb4e 	bl	8009236 <USBD_CtlError>
              break;
 8008b9a:	bf00      	nop
          }
          break;
 8008b9c:	e004      	b.n	8008ba8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fb48 	bl	8009236 <USBD_CtlError>
          break;
 8008ba6:	bf00      	nop
      }
      break;
 8008ba8:	e004      	b.n	8008bb4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fb42 	bl	8009236 <USBD_CtlError>
      break;
 8008bb2:	bf00      	nop
  }

  return ret;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	885b      	ldrh	r3, [r3, #2]
 8008bda:	0a1b      	lsrs	r3, r3, #8
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	3b01      	subs	r3, #1
 8008be0:	2b0e      	cmp	r3, #14
 8008be2:	f200 8152 	bhi.w	8008e8a <USBD_GetDescriptor+0x2ca>
 8008be6:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <USBD_GetDescriptor+0x2c>)
 8008be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bec:	08008c5d 	.word	0x08008c5d
 8008bf0:	08008c75 	.word	0x08008c75
 8008bf4:	08008cb5 	.word	0x08008cb5
 8008bf8:	08008e8b 	.word	0x08008e8b
 8008bfc:	08008e8b 	.word	0x08008e8b
 8008c00:	08008e2b 	.word	0x08008e2b
 8008c04:	08008e57 	.word	0x08008e57
 8008c08:	08008e8b 	.word	0x08008e8b
 8008c0c:	08008e8b 	.word	0x08008e8b
 8008c10:	08008e8b 	.word	0x08008e8b
 8008c14:	08008e8b 	.word	0x08008e8b
 8008c18:	08008e8b 	.word	0x08008e8b
 8008c1c:	08008e8b 	.word	0x08008e8b
 8008c20:	08008e8b 	.word	0x08008e8b
 8008c24:	08008c29 	.word	0x08008c29
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c2e:	69db      	ldr	r3, [r3, #28]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	7c12      	ldrb	r2, [r2, #16]
 8008c40:	f107 0108 	add.w	r1, r7, #8
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c4a:	e126      	b.n	8008e9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 faf1 	bl	8009236 <USBD_CtlError>
        err++;
 8008c54:	7afb      	ldrb	r3, [r7, #11]
 8008c56:	3301      	adds	r3, #1
 8008c58:	72fb      	strb	r3, [r7, #11]
      break;
 8008c5a:	e11e      	b.n	8008e9a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	7c12      	ldrb	r2, [r2, #16]
 8008c68:	f107 0108 	add.w	r1, r7, #8
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4798      	blx	r3
 8008c70:	60f8      	str	r0, [r7, #12]
      break;
 8008c72:	e112      	b.n	8008e9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	7c1b      	ldrb	r3, [r3, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10d      	bne.n	8008c98 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c84:	f107 0208 	add.w	r2, r7, #8
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4798      	blx	r3
 8008c8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3301      	adds	r3, #1
 8008c92:	2202      	movs	r2, #2
 8008c94:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c96:	e100      	b.n	8008e9a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	f107 0208 	add.w	r2, r7, #8
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4798      	blx	r3
 8008ca8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3301      	adds	r3, #1
 8008cae:	2202      	movs	r2, #2
 8008cb0:	701a      	strb	r2, [r3, #0]
      break;
 8008cb2:	e0f2      	b.n	8008e9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	885b      	ldrh	r3, [r3, #2]
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b05      	cmp	r3, #5
 8008cbc:	f200 80ac 	bhi.w	8008e18 <USBD_GetDescriptor+0x258>
 8008cc0:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <USBD_GetDescriptor+0x108>)
 8008cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc6:	bf00      	nop
 8008cc8:	08008ce1 	.word	0x08008ce1
 8008ccc:	08008d15 	.word	0x08008d15
 8008cd0:	08008d49 	.word	0x08008d49
 8008cd4:	08008d7d 	.word	0x08008d7d
 8008cd8:	08008db1 	.word	0x08008db1
 8008cdc:	08008de5 	.word	0x08008de5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00b      	beq.n	8008d04 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	7c12      	ldrb	r2, [r2, #16]
 8008cf8:	f107 0108 	add.w	r1, r7, #8
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4798      	blx	r3
 8008d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d02:	e091      	b.n	8008e28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fa95 	bl	8009236 <USBD_CtlError>
            err++;
 8008d0c:	7afb      	ldrb	r3, [r7, #11]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	72fb      	strb	r3, [r7, #11]
          break;
 8008d12:	e089      	b.n	8008e28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00b      	beq.n	8008d38 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	7c12      	ldrb	r2, [r2, #16]
 8008d2c:	f107 0108 	add.w	r1, r7, #8
 8008d30:	4610      	mov	r0, r2
 8008d32:	4798      	blx	r3
 8008d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d36:	e077      	b.n	8008e28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa7b 	bl	8009236 <USBD_CtlError>
            err++;
 8008d40:	7afb      	ldrb	r3, [r7, #11]
 8008d42:	3301      	adds	r3, #1
 8008d44:	72fb      	strb	r3, [r7, #11]
          break;
 8008d46:	e06f      	b.n	8008e28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	7c12      	ldrb	r2, [r2, #16]
 8008d60:	f107 0108 	add.w	r1, r7, #8
 8008d64:	4610      	mov	r0, r2
 8008d66:	4798      	blx	r3
 8008d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d6a:	e05d      	b.n	8008e28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fa61 	bl	8009236 <USBD_CtlError>
            err++;
 8008d74:	7afb      	ldrb	r3, [r7, #11]
 8008d76:	3301      	adds	r3, #1
 8008d78:	72fb      	strb	r3, [r7, #11]
          break;
 8008d7a:	e055      	b.n	8008e28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00b      	beq.n	8008da0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	7c12      	ldrb	r2, [r2, #16]
 8008d94:	f107 0108 	add.w	r1, r7, #8
 8008d98:	4610      	mov	r0, r2
 8008d9a:	4798      	blx	r3
 8008d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d9e:	e043      	b.n	8008e28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fa47 	bl	8009236 <USBD_CtlError>
            err++;
 8008da8:	7afb      	ldrb	r3, [r7, #11]
 8008daa:	3301      	adds	r3, #1
 8008dac:	72fb      	strb	r3, [r7, #11]
          break;
 8008dae:	e03b      	b.n	8008e28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00b      	beq.n	8008dd4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	7c12      	ldrb	r2, [r2, #16]
 8008dc8:	f107 0108 	add.w	r1, r7, #8
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
 8008dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dd2:	e029      	b.n	8008e28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa2d 	bl	8009236 <USBD_CtlError>
            err++;
 8008ddc:	7afb      	ldrb	r3, [r7, #11]
 8008dde:	3301      	adds	r3, #1
 8008de0:	72fb      	strb	r3, [r7, #11]
          break;
 8008de2:	e021      	b.n	8008e28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00b      	beq.n	8008e08 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	7c12      	ldrb	r2, [r2, #16]
 8008dfc:	f107 0108 	add.w	r1, r7, #8
 8008e00:	4610      	mov	r0, r2
 8008e02:	4798      	blx	r3
 8008e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e06:	e00f      	b.n	8008e28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa13 	bl	8009236 <USBD_CtlError>
            err++;
 8008e10:	7afb      	ldrb	r3, [r7, #11]
 8008e12:	3301      	adds	r3, #1
 8008e14:	72fb      	strb	r3, [r7, #11]
          break;
 8008e16:	e007      	b.n	8008e28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa0b 	bl	8009236 <USBD_CtlError>
          err++;
 8008e20:	7afb      	ldrb	r3, [r7, #11]
 8008e22:	3301      	adds	r3, #1
 8008e24:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008e26:	e038      	b.n	8008e9a <USBD_GetDescriptor+0x2da>
 8008e28:	e037      	b.n	8008e9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	7c1b      	ldrb	r3, [r3, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d109      	bne.n	8008e46 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3a:	f107 0208 	add.w	r2, r7, #8
 8008e3e:	4610      	mov	r0, r2
 8008e40:	4798      	blx	r3
 8008e42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e44:	e029      	b.n	8008e9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f9f4 	bl	8009236 <USBD_CtlError>
        err++;
 8008e4e:	7afb      	ldrb	r3, [r7, #11]
 8008e50:	3301      	adds	r3, #1
 8008e52:	72fb      	strb	r3, [r7, #11]
      break;
 8008e54:	e021      	b.n	8008e9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	7c1b      	ldrb	r3, [r3, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10d      	bne.n	8008e7a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e66:	f107 0208 	add.w	r2, r7, #8
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	4798      	blx	r3
 8008e6e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3301      	adds	r3, #1
 8008e74:	2207      	movs	r2, #7
 8008e76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e78:	e00f      	b.n	8008e9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f9da 	bl	8009236 <USBD_CtlError>
        err++;
 8008e82:	7afb      	ldrb	r3, [r7, #11]
 8008e84:	3301      	adds	r3, #1
 8008e86:	72fb      	strb	r3, [r7, #11]
      break;
 8008e88:	e007      	b.n	8008e9a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f9d2 	bl	8009236 <USBD_CtlError>
      err++;
 8008e92:	7afb      	ldrb	r3, [r7, #11]
 8008e94:	3301      	adds	r3, #1
 8008e96:	72fb      	strb	r3, [r7, #11]
      break;
 8008e98:	bf00      	nop
  }

  if (err != 0U)
 8008e9a:	7afb      	ldrb	r3, [r7, #11]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d11c      	bne.n	8008eda <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ea0:	893b      	ldrh	r3, [r7, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d011      	beq.n	8008eca <USBD_GetDescriptor+0x30a>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	88db      	ldrh	r3, [r3, #6]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00d      	beq.n	8008eca <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	88da      	ldrh	r2, [r3, #6]
 8008eb2:	893b      	ldrh	r3, [r7, #8]
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	bf28      	it	cs
 8008eb8:	4613      	movcs	r3, r2
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ebe:	893b      	ldrh	r3, [r7, #8]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	68f9      	ldr	r1, [r7, #12]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fa21 	bl	800930c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	88db      	ldrh	r3, [r3, #6]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d104      	bne.n	8008edc <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa78 	bl	80093c8 <USBD_CtlSendStatus>
 8008ed8:	e000      	b.n	8008edc <USBD_GetDescriptor+0x31c>
    return;
 8008eda:	bf00      	nop
    }
  }
}
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop

08008ee4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	889b      	ldrh	r3, [r3, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d130      	bne.n	8008f58 <USBD_SetAddress+0x74>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	88db      	ldrh	r3, [r3, #6]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d12c      	bne.n	8008f58 <USBD_SetAddress+0x74>
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	885b      	ldrh	r3, [r3, #2]
 8008f02:	2b7f      	cmp	r3, #127	; 0x7f
 8008f04:	d828      	bhi.n	8008f58 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	885b      	ldrh	r3, [r3, #2]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d104      	bne.n	8008f26 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f989 	bl	8009236 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f24:	e01c      	b.n	8008f60 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	7bfa      	ldrb	r2, [r7, #15]
 8008f2a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f004 fb62 	bl	800d5fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fa45 	bl	80093c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d004      	beq.n	8008f4e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4c:	e008      	b.n	8008f60 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f56:	e003      	b.n	8008f60 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f96b 	bl	8009236 <USBD_CtlError>
  }
}
 8008f60:	bf00      	nop
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	885b      	ldrh	r3, [r3, #2]
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	4b41      	ldr	r3, [pc, #260]	; (8009080 <USBD_SetConfig+0x118>)
 8008f7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f7c:	4b40      	ldr	r3, [pc, #256]	; (8009080 <USBD_SetConfig+0x118>)
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d904      	bls.n	8008f8e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f955 	bl	8009236 <USBD_CtlError>
 8008f8c:	e075      	b.n	800907a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d002      	beq.n	8008f9e <USBD_SetConfig+0x36>
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d023      	beq.n	8008fe4 <USBD_SetConfig+0x7c>
 8008f9c:	e062      	b.n	8009064 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008f9e:	4b38      	ldr	r3, [pc, #224]	; (8009080 <USBD_SetConfig+0x118>)
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01a      	beq.n	8008fdc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008fa6:	4b36      	ldr	r3, [pc, #216]	; (8009080 <USBD_SetConfig+0x118>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2203      	movs	r2, #3
 8008fb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008fb8:	4b31      	ldr	r3, [pc, #196]	; (8009080 <USBD_SetConfig+0x118>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff f9c7 	bl	8008352 <USBD_SetClassConfig>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d104      	bne.n	8008fd4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f932 	bl	8009236 <USBD_CtlError>
            return;
 8008fd2:	e052      	b.n	800907a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f9f7 	bl	80093c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008fda:	e04e      	b.n	800907a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f9f3 	bl	80093c8 <USBD_CtlSendStatus>
        break;
 8008fe2:	e04a      	b.n	800907a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008fe4:	4b26      	ldr	r3, [pc, #152]	; (8009080 <USBD_SetConfig+0x118>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d112      	bne.n	8009012 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2202      	movs	r2, #2
 8008ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008ff4:	4b22      	ldr	r3, [pc, #136]	; (8009080 <USBD_SetConfig+0x118>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008ffe:	4b20      	ldr	r3, [pc, #128]	; (8009080 <USBD_SetConfig+0x118>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff f9c3 	bl	8008390 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f9dc 	bl	80093c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009010:	e033      	b.n	800907a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009012:	4b1b      	ldr	r3, [pc, #108]	; (8009080 <USBD_SetConfig+0x118>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	429a      	cmp	r2, r3
 800901e:	d01d      	beq.n	800905c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff f9b1 	bl	8008390 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800902e:	4b14      	ldr	r3, [pc, #80]	; (8009080 <USBD_SetConfig+0x118>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	461a      	mov	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009038:	4b11      	ldr	r3, [pc, #68]	; (8009080 <USBD_SetConfig+0x118>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff f987 	bl	8008352 <USBD_SetClassConfig>
 8009044:	4603      	mov	r3, r0
 8009046:	2b02      	cmp	r3, #2
 8009048:	d104      	bne.n	8009054 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f8f2 	bl	8009236 <USBD_CtlError>
            return;
 8009052:	e012      	b.n	800907a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f9b7 	bl	80093c8 <USBD_CtlSendStatus>
        break;
 800905a:	e00e      	b.n	800907a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f9b3 	bl	80093c8 <USBD_CtlSendStatus>
        break;
 8009062:	e00a      	b.n	800907a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f8e5 	bl	8009236 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800906c:	4b04      	ldr	r3, [pc, #16]	; (8009080 <USBD_SetConfig+0x118>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7ff f98c 	bl	8008390 <USBD_ClrClassConfig>
        break;
 8009078:	bf00      	nop
    }
  }
}
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	20000230 	.word	0x20000230

08009084 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	88db      	ldrh	r3, [r3, #6]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d004      	beq.n	80090a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f8cc 	bl	8009236 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800909e:	e021      	b.n	80090e4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	db17      	blt.n	80090da <USBD_GetConfig+0x56>
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	dd02      	ble.n	80090b4 <USBD_GetConfig+0x30>
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d00b      	beq.n	80090ca <USBD_GetConfig+0x46>
 80090b2:	e012      	b.n	80090da <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3308      	adds	r3, #8
 80090be:	2201      	movs	r2, #1
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f922 	bl	800930c <USBD_CtlSendData>
        break;
 80090c8:	e00c      	b.n	80090e4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3304      	adds	r3, #4
 80090ce:	2201      	movs	r2, #1
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f91a 	bl	800930c <USBD_CtlSendData>
        break;
 80090d8:	e004      	b.n	80090e4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f8aa 	bl	8009236 <USBD_CtlError>
        break;
 80090e2:	bf00      	nop
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fc:	3b01      	subs	r3, #1
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d81e      	bhi.n	8009140 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	88db      	ldrh	r3, [r3, #6]
 8009106:	2b02      	cmp	r3, #2
 8009108:	d004      	beq.n	8009114 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f892 	bl	8009236 <USBD_CtlError>
        break;
 8009112:	e01a      	b.n	800914a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009120:	2b00      	cmp	r3, #0
 8009122:	d005      	beq.n	8009130 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f043 0202 	orr.w	r2, r3, #2
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	330c      	adds	r3, #12
 8009134:	2202      	movs	r2, #2
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f8e7 	bl	800930c <USBD_CtlSendData>
      break;
 800913e:	e004      	b.n	800914a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f877 	bl	8009236 <USBD_CtlError>
      break;
 8009148:	bf00      	nop
  }
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	885b      	ldrh	r3, [r3, #2]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d106      	bne.n	8009172 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f92b 	bl	80093c8 <USBD_CtlSendStatus>
  }
}
 8009172:	bf00      	nop
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800918a:	3b01      	subs	r3, #1
 800918c:	2b02      	cmp	r3, #2
 800918e:	d80b      	bhi.n	80091a8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	885b      	ldrh	r3, [r3, #2]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d10c      	bne.n	80091b2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f911 	bl	80093c8 <USBD_CtlSendStatus>
      }
      break;
 80091a6:	e004      	b.n	80091b2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f843 	bl	8009236 <USBD_CtlError>
      break;
 80091b0:	e000      	b.n	80091b4 <USBD_ClrFeature+0x3a>
      break;
 80091b2:	bf00      	nop
  }
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781a      	ldrb	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	785a      	ldrb	r2, [r3, #1]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	3302      	adds	r3, #2
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	b29a      	uxth	r2, r3
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	3303      	adds	r3, #3
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	021b      	lsls	r3, r3, #8
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	4413      	add	r3, r2
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	3304      	adds	r3, #4
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	3305      	adds	r3, #5
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	b29b      	uxth	r3, r3
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	b29b      	uxth	r3, r3
 8009206:	4413      	add	r3, r2
 8009208:	b29a      	uxth	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	3306      	adds	r3, #6
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	b29a      	uxth	r2, r3
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	3307      	adds	r3, #7
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	021b      	lsls	r3, r3, #8
 8009220:	b29b      	uxth	r3, r3
 8009222:	4413      	add	r3, r2
 8009224:	b29a      	uxth	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	80da      	strh	r2, [r3, #6]

}
 800922a:	bf00      	nop
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b082      	sub	sp, #8
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009240:	2180      	movs	r1, #128	; 0x80
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f004 f948 	bl	800d4d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009248:	2100      	movs	r1, #0
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f004 f944 	bl	800d4d8 <USBD_LL_StallEP>
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d032      	beq.n	80092d4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f000 f834 	bl	80092dc <USBD_GetLen>
 8009274:	4603      	mov	r3, r0
 8009276:	3301      	adds	r3, #1
 8009278:	b29b      	uxth	r3, r3
 800927a:	005b      	lsls	r3, r3, #1
 800927c:	b29a      	uxth	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	1c5a      	adds	r2, r3, #1
 8009286:	75fa      	strb	r2, [r7, #23]
 8009288:	461a      	mov	r2, r3
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	4413      	add	r3, r2
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	7812      	ldrb	r2, [r2, #0]
 8009292:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009294:	7dfb      	ldrb	r3, [r7, #23]
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	75fa      	strb	r2, [r7, #23]
 800929a:	461a      	mov	r2, r3
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	4413      	add	r3, r2
 80092a0:	2203      	movs	r2, #3
 80092a2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80092a4:	e012      	b.n	80092cc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	60fa      	str	r2, [r7, #12]
 80092ac:	7dfa      	ldrb	r2, [r7, #23]
 80092ae:	1c51      	adds	r1, r2, #1
 80092b0:	75f9      	strb	r1, [r7, #23]
 80092b2:	4611      	mov	r1, r2
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	440a      	add	r2, r1
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	75fa      	strb	r2, [r7, #23]
 80092c2:	461a      	mov	r2, r3
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	4413      	add	r3, r2
 80092c8:	2200      	movs	r2, #0
 80092ca:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e8      	bne.n	80092a6 <USBD_GetString+0x4e>
    }
  }
}
 80092d4:	bf00      	nop
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80092e8:	e005      	b.n	80092f6 <USBD_GetLen+0x1a>
  {
    len++;
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	3301      	adds	r3, #1
 80092ee:	73fb      	strb	r3, [r7, #15]
    buf++;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3301      	adds	r3, #1
 80092f4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1f5      	bne.n	80092ea <USBD_GetLen+0xe>
  }

  return len;
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	4613      	mov	r3, r2
 8009318:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2202      	movs	r2, #2
 800931e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009322:	88fa      	ldrh	r2, [r7, #6]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009328:	88fa      	ldrh	r2, [r7, #6]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800932e:	88fb      	ldrh	r3, [r7, #6]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	2100      	movs	r1, #0
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f004 f997 	bl	800d668 <USBD_LL_Transmit>

  return USBD_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	4613      	mov	r3, r2
 8009350:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009352:	88fb      	ldrh	r3, [r7, #6]
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	2100      	movs	r1, #0
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f004 f985 	bl	800d668 <USBD_LL_Transmit>

  return USBD_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2203      	movs	r2, #3
 800937a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800937e:	88fa      	ldrh	r2, [r7, #6]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009386:	88fa      	ldrh	r2, [r7, #6]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800938e:	88fb      	ldrh	r3, [r7, #6]
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	2100      	movs	r1, #0
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f004 f9a1 	bl	800d6dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	4613      	mov	r3, r2
 80093b0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093b2:	88fb      	ldrh	r3, [r7, #6]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	2100      	movs	r1, #0
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f004 f98f 	bl	800d6dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2204      	movs	r2, #4
 80093d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80093d8:	2300      	movs	r3, #0
 80093da:	2200      	movs	r2, #0
 80093dc:	2100      	movs	r1, #0
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f004 f942 	bl	800d668 <USBD_LL_Transmit>

  return USBD_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2205      	movs	r2, #5
 80093fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093fe:	2300      	movs	r3, #0
 8009400:	2200      	movs	r2, #0
 8009402:	2100      	movs	r1, #0
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f004 f969 	bl	800d6dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009414:	b480      	push	{r7}
 8009416:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009418:	bf00      	nop
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
	...

08009424 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800942a:	f3ef 8305 	mrs	r3, IPSR
 800942e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009430:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10f      	bne.n	8009456 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009436:	f3ef 8310 	mrs	r3, PRIMASK
 800943a:	607b      	str	r3, [r7, #4]
  return(result);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d105      	bne.n	800944e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009442:	f3ef 8311 	mrs	r3, BASEPRI
 8009446:	603b      	str	r3, [r7, #0]
  return(result);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d007      	beq.n	800945e <osKernelInitialize+0x3a>
 800944e:	4b0e      	ldr	r3, [pc, #56]	; (8009488 <osKernelInitialize+0x64>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b02      	cmp	r3, #2
 8009454:	d103      	bne.n	800945e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009456:	f06f 0305 	mvn.w	r3, #5
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	e00c      	b.n	8009478 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800945e:	4b0a      	ldr	r3, [pc, #40]	; (8009488 <osKernelInitialize+0x64>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d105      	bne.n	8009472 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009466:	4b08      	ldr	r3, [pc, #32]	; (8009488 <osKernelInitialize+0x64>)
 8009468:	2201      	movs	r2, #1
 800946a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	e002      	b.n	8009478 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009472:	f04f 33ff 	mov.w	r3, #4294967295
 8009476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009478:	68fb      	ldr	r3, [r7, #12]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	20000234 	.word	0x20000234

0800948c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009492:	f3ef 8305 	mrs	r3, IPSR
 8009496:	60bb      	str	r3, [r7, #8]
  return(result);
 8009498:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10f      	bne.n	80094be <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800949e:	f3ef 8310 	mrs	r3, PRIMASK
 80094a2:	607b      	str	r3, [r7, #4]
  return(result);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d105      	bne.n	80094b6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094aa:	f3ef 8311 	mrs	r3, BASEPRI
 80094ae:	603b      	str	r3, [r7, #0]
  return(result);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d007      	beq.n	80094c6 <osKernelStart+0x3a>
 80094b6:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <osKernelStart+0x68>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d103      	bne.n	80094c6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80094be:	f06f 0305 	mvn.w	r3, #5
 80094c2:	60fb      	str	r3, [r7, #12]
 80094c4:	e010      	b.n	80094e8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80094c6:	4b0b      	ldr	r3, [pc, #44]	; (80094f4 <osKernelStart+0x68>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d109      	bne.n	80094e2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80094ce:	f7ff ffa1 	bl	8009414 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80094d2:	4b08      	ldr	r3, [pc, #32]	; (80094f4 <osKernelStart+0x68>)
 80094d4:	2202      	movs	r2, #2
 80094d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80094d8:	f001 fea2 	bl	800b220 <vTaskStartScheduler>
      stat = osOK;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	e002      	b.n	80094e8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80094e2:	f04f 33ff 	mov.w	r3, #4294967295
 80094e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80094e8:	68fb      	ldr	r3, [r7, #12]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20000234 	.word	0x20000234

080094f8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094fe:	f3ef 8305 	mrs	r3, IPSR
 8009502:	60bb      	str	r3, [r7, #8]
  return(result);
 8009504:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10f      	bne.n	800952a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800950a:	f3ef 8310 	mrs	r3, PRIMASK
 800950e:	607b      	str	r3, [r7, #4]
  return(result);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d105      	bne.n	8009522 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009516:	f3ef 8311 	mrs	r3, BASEPRI
 800951a:	603b      	str	r3, [r7, #0]
  return(result);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d007      	beq.n	8009532 <osKernelGetTickCount+0x3a>
 8009522:	4b08      	ldr	r3, [pc, #32]	; (8009544 <osKernelGetTickCount+0x4c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b02      	cmp	r3, #2
 8009528:	d103      	bne.n	8009532 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800952a:	f001 ff97 	bl	800b45c <xTaskGetTickCountFromISR>
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	e002      	b.n	8009538 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8009532:	f001 ff83 	bl	800b43c <xTaskGetTickCount>
 8009536:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8009538:	68fb      	ldr	r3, [r7, #12]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20000234 	.word	0x20000234

08009548 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8009548:	b480      	push	{r7}
 800954a:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800954c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8009550:	4618      	mov	r0, r3
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
	...

0800955c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800955c:	b580      	push	{r7, lr}
 800955e:	b090      	sub	sp, #64	; 0x40
 8009560:	af04      	add	r7, sp, #16
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009568:	2300      	movs	r3, #0
 800956a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800956c:	f3ef 8305 	mrs	r3, IPSR
 8009570:	61fb      	str	r3, [r7, #28]
  return(result);
 8009572:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009574:	2b00      	cmp	r3, #0
 8009576:	f040 808f 	bne.w	8009698 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800957a:	f3ef 8310 	mrs	r3, PRIMASK
 800957e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d105      	bne.n	8009592 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009586:	f3ef 8311 	mrs	r3, BASEPRI
 800958a:	617b      	str	r3, [r7, #20]
  return(result);
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d003      	beq.n	800959a <osThreadNew+0x3e>
 8009592:	4b44      	ldr	r3, [pc, #272]	; (80096a4 <osThreadNew+0x148>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d07e      	beq.n	8009698 <osThreadNew+0x13c>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d07b      	beq.n	8009698 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80095a0:	2380      	movs	r3, #128	; 0x80
 80095a2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80095a4:	2318      	movs	r3, #24
 80095a6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80095a8:	2300      	movs	r3, #0
 80095aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80095ac:	f04f 33ff 	mov.w	r3, #4294967295
 80095b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d045      	beq.n	8009644 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <osThreadNew+0x6a>
        name = attr->name;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d008      	beq.n	80095ec <osThreadNew+0x90>
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	2b38      	cmp	r3, #56	; 0x38
 80095de:	d805      	bhi.n	80095ec <osThreadNew+0x90>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <osThreadNew+0x94>
        return (NULL);
 80095ec:	2300      	movs	r3, #0
 80095ee:	e054      	b.n	800969a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	089b      	lsrs	r3, r3, #2
 80095fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00e      	beq.n	8009626 <osThreadNew+0xca>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	2b5b      	cmp	r3, #91	; 0x5b
 800960e:	d90a      	bls.n	8009626 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009614:	2b00      	cmp	r3, #0
 8009616:	d006      	beq.n	8009626 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <osThreadNew+0xca>
        mem = 1;
 8009620:	2301      	movs	r3, #1
 8009622:	623b      	str	r3, [r7, #32]
 8009624:	e010      	b.n	8009648 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10c      	bne.n	8009648 <osThreadNew+0xec>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d108      	bne.n	8009648 <osThreadNew+0xec>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d104      	bne.n	8009648 <osThreadNew+0xec>
          mem = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	623b      	str	r3, [r7, #32]
 8009642:	e001      	b.n	8009648 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d110      	bne.n	8009670 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009656:	9202      	str	r2, [sp, #8]
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f001 fb8f 	bl	800ad88 <xTaskCreateStatic>
 800966a:	4603      	mov	r3, r0
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	e013      	b.n	8009698 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d110      	bne.n	8009698 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	b29a      	uxth	r2, r3
 800967a:	f107 0310 	add.w	r3, r7, #16
 800967e:	9301      	str	r3, [sp, #4]
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f001 fbd7 	bl	800ae3c <xTaskCreate>
 800968e:	4603      	mov	r3, r0
 8009690:	2b01      	cmp	r3, #1
 8009692:	d001      	beq.n	8009698 <osThreadNew+0x13c>
          hTask = NULL;
 8009694:	2300      	movs	r3, #0
 8009696:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009698:	693b      	ldr	r3, [r7, #16]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3730      	adds	r7, #48	; 0x30
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20000234 	.word	0x20000234

080096a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096b0:	f3ef 8305 	mrs	r3, IPSR
 80096b4:	613b      	str	r3, [r7, #16]
  return(result);
 80096b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10f      	bne.n	80096dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096bc:	f3ef 8310 	mrs	r3, PRIMASK
 80096c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d105      	bne.n	80096d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096c8:	f3ef 8311 	mrs	r3, BASEPRI
 80096cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d007      	beq.n	80096e4 <osDelay+0x3c>
 80096d4:	4b0a      	ldr	r3, [pc, #40]	; (8009700 <osDelay+0x58>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d103      	bne.n	80096e4 <osDelay+0x3c>
    stat = osErrorISR;
 80096dc:	f06f 0305 	mvn.w	r3, #5
 80096e0:	617b      	str	r3, [r7, #20]
 80096e2:	e007      	b.n	80096f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d002      	beq.n	80096f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f001 fd62 	bl	800b1b8 <vTaskDelay>
    }
  }

  return (stat);
 80096f4:	697b      	ldr	r3, [r7, #20]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	20000234 	.word	0x20000234

08009704 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009704:	b580      	push	{r7, lr}
 8009706:	b088      	sub	sp, #32
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800970c:	f3ef 8305 	mrs	r3, IPSR
 8009710:	617b      	str	r3, [r7, #20]
  return(result);
 8009712:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10f      	bne.n	8009738 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009718:	f3ef 8310 	mrs	r3, PRIMASK
 800971c:	613b      	str	r3, [r7, #16]
  return(result);
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d105      	bne.n	8009730 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009724:	f3ef 8311 	mrs	r3, BASEPRI
 8009728:	60fb      	str	r3, [r7, #12]
  return(result);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d007      	beq.n	8009740 <osDelayUntil+0x3c>
 8009730:	4b13      	ldr	r3, [pc, #76]	; (8009780 <osDelayUntil+0x7c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b02      	cmp	r3, #2
 8009736:	d103      	bne.n	8009740 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8009738:	f06f 0305 	mvn.w	r3, #5
 800973c:	61fb      	str	r3, [r7, #28]
 800973e:	e019      	b.n	8009774 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8009740:	2300      	movs	r3, #0
 8009742:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8009744:	f001 fe7a 	bl	800b43c <xTaskGetTickCount>
 8009748:	4603      	mov	r3, r0
 800974a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d009      	beq.n	800976e <osDelayUntil+0x6a>
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	2b00      	cmp	r3, #0
 800975e:	db06      	blt.n	800976e <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8009760:	f107 0308 	add.w	r3, r7, #8
 8009764:	69b9      	ldr	r1, [r7, #24]
 8009766:	4618      	mov	r0, r3
 8009768:	f001 fcac 	bl	800b0c4 <vTaskDelayUntil>
 800976c:	e002      	b.n	8009774 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800976e:	f06f 0303 	mvn.w	r3, #3
 8009772:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8009774:	69fb      	ldr	r3, [r7, #28]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3720      	adds	r7, #32
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20000234 	.word	0x20000234

08009784 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009784:	b580      	push	{r7, lr}
 8009786:	b08a      	sub	sp, #40	; 0x28
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800978c:	2300      	movs	r3, #0
 800978e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009790:	f3ef 8305 	mrs	r3, IPSR
 8009794:	613b      	str	r3, [r7, #16]
  return(result);
 8009796:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009798:	2b00      	cmp	r3, #0
 800979a:	f040 8085 	bne.w	80098a8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800979e:	f3ef 8310 	mrs	r3, PRIMASK
 80097a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d105      	bne.n	80097b6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097aa:	f3ef 8311 	mrs	r3, BASEPRI
 80097ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d003      	beq.n	80097be <osMutexNew+0x3a>
 80097b6:	4b3f      	ldr	r3, [pc, #252]	; (80098b4 <osMutexNew+0x130>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d074      	beq.n	80098a8 <osMutexNew+0x124>
    if (attr != NULL) {
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <osMutexNew+0x48>
      type = attr->attr_bits;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	623b      	str	r3, [r7, #32]
 80097ca:	e001      	b.n	80097d0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <osMutexNew+0x5c>
      rmtx = 1U;
 80097da:	2301      	movs	r3, #1
 80097dc:	61fb      	str	r3, [r7, #28]
 80097de:	e001      	b.n	80097e4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	f003 0308 	and.w	r3, r3, #8
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d15c      	bne.n	80098a8 <osMutexNew+0x124>
      mem = -1;
 80097ee:	f04f 33ff 	mov.w	r3, #4294967295
 80097f2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d015      	beq.n	8009826 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d006      	beq.n	8009810 <osMutexNew+0x8c>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	2b4f      	cmp	r3, #79	; 0x4f
 8009808:	d902      	bls.n	8009810 <osMutexNew+0x8c>
          mem = 1;
 800980a:	2301      	movs	r3, #1
 800980c:	61bb      	str	r3, [r7, #24]
 800980e:	e00c      	b.n	800982a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d108      	bne.n	800982a <osMutexNew+0xa6>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d104      	bne.n	800982a <osMutexNew+0xa6>
            mem = 0;
 8009820:	2300      	movs	r3, #0
 8009822:	61bb      	str	r3, [r7, #24]
 8009824:	e001      	b.n	800982a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d112      	bne.n	8009856 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d007      	beq.n	8009846 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	4619      	mov	r1, r3
 800983c:	2004      	movs	r0, #4
 800983e:	f000 fcac 	bl	800a19a <xQueueCreateMutexStatic>
 8009842:	6278      	str	r0, [r7, #36]	; 0x24
 8009844:	e016      	b.n	8009874 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	4619      	mov	r1, r3
 800984c:	2001      	movs	r0, #1
 800984e:	f000 fca4 	bl	800a19a <xQueueCreateMutexStatic>
 8009852:	6278      	str	r0, [r7, #36]	; 0x24
 8009854:	e00e      	b.n	8009874 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10b      	bne.n	8009874 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d004      	beq.n	800986c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009862:	2004      	movs	r0, #4
 8009864:	f000 fc81 	bl	800a16a <xQueueCreateMutex>
 8009868:	6278      	str	r0, [r7, #36]	; 0x24
 800986a:	e003      	b.n	8009874 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800986c:	2001      	movs	r0, #1
 800986e:	f000 fc7c 	bl	800a16a <xQueueCreateMutex>
 8009872:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00c      	beq.n	8009894 <osMutexNew+0x110>
        if (attr != NULL) {
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d003      	beq.n	8009888 <osMutexNew+0x104>
          name = attr->name;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	617b      	str	r3, [r7, #20]
 8009886:	e001      	b.n	800988c <osMutexNew+0x108>
        } else {
          name = NULL;
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800988c:	6979      	ldr	r1, [r7, #20]
 800988e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009890:	f001 fa1e 	bl	800acd0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	2b00      	cmp	r3, #0
 8009898:	d006      	beq.n	80098a8 <osMutexNew+0x124>
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	f043 0301 	orr.w	r3, r3, #1
 80098a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3728      	adds	r7, #40	; 0x28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20000234 	.word	0x20000234

080098b8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b088      	sub	sp, #32
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f023 0301 	bic.w	r3, r3, #1
 80098c8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098d6:	f3ef 8305 	mrs	r3, IPSR
 80098da:	613b      	str	r3, [r7, #16]
  return(result);
 80098dc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10f      	bne.n	8009902 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098e2:	f3ef 8310 	mrs	r3, PRIMASK
 80098e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d105      	bne.n	80098fa <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80098ee:	f3ef 8311 	mrs	r3, BASEPRI
 80098f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d007      	beq.n	800990a <osMutexAcquire+0x52>
 80098fa:	4b1d      	ldr	r3, [pc, #116]	; (8009970 <osMutexAcquire+0xb8>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d103      	bne.n	800990a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009902:	f06f 0305 	mvn.w	r3, #5
 8009906:	61fb      	str	r3, [r7, #28]
 8009908:	e02c      	b.n	8009964 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d103      	bne.n	8009918 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009910:	f06f 0303 	mvn.w	r3, #3
 8009914:	61fb      	str	r3, [r7, #28]
 8009916:	e025      	b.n	8009964 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d011      	beq.n	8009942 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	69b8      	ldr	r0, [r7, #24]
 8009922:	f000 fc88 	bl	800a236 <xQueueTakeMutexRecursive>
 8009926:	4603      	mov	r3, r0
 8009928:	2b01      	cmp	r3, #1
 800992a:	d01b      	beq.n	8009964 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009932:	f06f 0301 	mvn.w	r3, #1
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	e014      	b.n	8009964 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800993a:	f06f 0302 	mvn.w	r3, #2
 800993e:	61fb      	str	r3, [r7, #28]
 8009940:	e010      	b.n	8009964 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	69b8      	ldr	r0, [r7, #24]
 8009946:	f000 ff15 	bl	800a774 <xQueueSemaphoreTake>
 800994a:	4603      	mov	r3, r0
 800994c:	2b01      	cmp	r3, #1
 800994e:	d009      	beq.n	8009964 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009956:	f06f 0301 	mvn.w	r3, #1
 800995a:	61fb      	str	r3, [r7, #28]
 800995c:	e002      	b.n	8009964 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800995e:	f06f 0302 	mvn.w	r3, #2
 8009962:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009964:	69fb      	ldr	r3, [r7, #28]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3720      	adds	r7, #32
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20000234 	.word	0x20000234

08009974 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009974:	b580      	push	{r7, lr}
 8009976:	b088      	sub	sp, #32
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f023 0301 	bic.w	r3, r3, #1
 8009982:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800998c:	2300      	movs	r3, #0
 800998e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009990:	f3ef 8305 	mrs	r3, IPSR
 8009994:	613b      	str	r3, [r7, #16]
  return(result);
 8009996:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10f      	bne.n	80099bc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800999c:	f3ef 8310 	mrs	r3, PRIMASK
 80099a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d105      	bne.n	80099b4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099a8:	f3ef 8311 	mrs	r3, BASEPRI
 80099ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d007      	beq.n	80099c4 <osMutexRelease+0x50>
 80099b4:	4b16      	ldr	r3, [pc, #88]	; (8009a10 <osMutexRelease+0x9c>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d103      	bne.n	80099c4 <osMutexRelease+0x50>
    stat = osErrorISR;
 80099bc:	f06f 0305 	mvn.w	r3, #5
 80099c0:	61fb      	str	r3, [r7, #28]
 80099c2:	e01f      	b.n	8009a04 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d103      	bne.n	80099d2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80099ca:	f06f 0303 	mvn.w	r3, #3
 80099ce:	61fb      	str	r3, [r7, #28]
 80099d0:	e018      	b.n	8009a04 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d009      	beq.n	80099ec <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80099d8:	69b8      	ldr	r0, [r7, #24]
 80099da:	f000 fbf9 	bl	800a1d0 <xQueueGiveMutexRecursive>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d00f      	beq.n	8009a04 <osMutexRelease+0x90>
        stat = osErrorResource;
 80099e4:	f06f 0302 	mvn.w	r3, #2
 80099e8:	61fb      	str	r3, [r7, #28]
 80099ea:	e00b      	b.n	8009a04 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80099ec:	2300      	movs	r3, #0
 80099ee:	2200      	movs	r2, #0
 80099f0:	2100      	movs	r1, #0
 80099f2:	69b8      	ldr	r0, [r7, #24]
 80099f4:	f000 fc54 	bl	800a2a0 <xQueueGenericSend>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d002      	beq.n	8009a04 <osMutexRelease+0x90>
        stat = osErrorResource;
 80099fe:	f06f 0302 	mvn.w	r3, #2
 8009a02:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009a04:	69fb      	ldr	r3, [r7, #28]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3720      	adds	r7, #32
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20000234 	.word	0x20000234

08009a14 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08c      	sub	sp, #48	; 0x30
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009a20:	2300      	movs	r3, #0
 8009a22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a24:	f3ef 8305 	mrs	r3, IPSR
 8009a28:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a2a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d170      	bne.n	8009b12 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a30:	f3ef 8310 	mrs	r3, PRIMASK
 8009a34:	617b      	str	r3, [r7, #20]
  return(result);
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d105      	bne.n	8009a48 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a3c:	f3ef 8311 	mrs	r3, BASEPRI
 8009a40:	613b      	str	r3, [r7, #16]
  return(result);
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d003      	beq.n	8009a50 <osMessageQueueNew+0x3c>
 8009a48:	4b34      	ldr	r3, [pc, #208]	; (8009b1c <osMessageQueueNew+0x108>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d060      	beq.n	8009b12 <osMessageQueueNew+0xfe>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d05d      	beq.n	8009b12 <osMessageQueueNew+0xfe>
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d05a      	beq.n	8009b12 <osMessageQueueNew+0xfe>
    mem = -1;
 8009a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a60:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d029      	beq.n	8009abc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d012      	beq.n	8009a96 <osMessageQueueNew+0x82>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	2b4f      	cmp	r3, #79	; 0x4f
 8009a76:	d90e      	bls.n	8009a96 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00a      	beq.n	8009a96 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	695a      	ldr	r2, [r3, #20]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	68b9      	ldr	r1, [r7, #8]
 8009a88:	fb01 f303 	mul.w	r3, r1, r3
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d302      	bcc.n	8009a96 <osMessageQueueNew+0x82>
        mem = 1;
 8009a90:	2301      	movs	r3, #1
 8009a92:	623b      	str	r3, [r7, #32]
 8009a94:	e014      	b.n	8009ac0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d110      	bne.n	8009ac0 <osMessageQueueNew+0xac>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10c      	bne.n	8009ac0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d108      	bne.n	8009ac0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d104      	bne.n	8009ac0 <osMessageQueueNew+0xac>
          mem = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	623b      	str	r3, [r7, #32]
 8009aba:	e001      	b.n	8009ac0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d10c      	bne.n	8009ae0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691a      	ldr	r2, [r3, #16]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6899      	ldr	r1, [r3, #8]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	68b9      	ldr	r1, [r7, #8]
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f000 fa58 	bl	8009f8c <xQueueGenericCreateStatic>
 8009adc:	6278      	str	r0, [r7, #36]	; 0x24
 8009ade:	e008      	b.n	8009af2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d105      	bne.n	8009af2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	68b9      	ldr	r1, [r7, #8]
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 fac1 	bl	800a072 <xQueueGenericCreate>
 8009af0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00c      	beq.n	8009b12 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <osMessageQueueNew+0xf2>
        name = attr->name;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	61fb      	str	r3, [r7, #28]
 8009b04:	e001      	b.n	8009b0a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009b0a:	69f9      	ldr	r1, [r7, #28]
 8009b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b0e:	f001 f8df 	bl	800acd0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3728      	adds	r7, #40	; 0x28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	20000234 	.word	0x20000234

08009b20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08a      	sub	sp, #40	; 0x28
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	603b      	str	r3, [r7, #0]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b38:	f3ef 8305 	mrs	r3, IPSR
 8009b3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8009b3e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10f      	bne.n	8009b64 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b44:	f3ef 8310 	mrs	r3, PRIMASK
 8009b48:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d105      	bne.n	8009b5c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b50:	f3ef 8311 	mrs	r3, BASEPRI
 8009b54:	617b      	str	r3, [r7, #20]
  return(result);
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d02c      	beq.n	8009bb6 <osMessageQueuePut+0x96>
 8009b5c:	4b28      	ldr	r3, [pc, #160]	; (8009c00 <osMessageQueuePut+0xe0>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d128      	bne.n	8009bb6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d005      	beq.n	8009b76 <osMessageQueuePut+0x56>
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <osMessageQueuePut+0x56>
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009b76:	f06f 0303 	mvn.w	r3, #3
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b7c:	e039      	b.n	8009bf2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009b82:	f107 0210 	add.w	r2, r7, #16
 8009b86:	2300      	movs	r3, #0
 8009b88:	68b9      	ldr	r1, [r7, #8]
 8009b8a:	6a38      	ldr	r0, [r7, #32]
 8009b8c:	f000 fc82 	bl	800a494 <xQueueGenericSendFromISR>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d003      	beq.n	8009b9e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009b96:	f06f 0302 	mvn.w	r3, #2
 8009b9a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b9c:	e029      	b.n	8009bf2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d026      	beq.n	8009bf2 <osMessageQueuePut+0xd2>
 8009ba4:	4b17      	ldr	r3, [pc, #92]	; (8009c04 <osMessageQueuePut+0xe4>)
 8009ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009baa:	601a      	str	r2, [r3, #0]
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bb4:	e01d      	b.n	8009bf2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <osMessageQueuePut+0xa2>
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d103      	bne.n	8009bca <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009bc2:	f06f 0303 	mvn.w	r3, #3
 8009bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8009bc8:	e014      	b.n	8009bf4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009bca:	2300      	movs	r3, #0
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	68b9      	ldr	r1, [r7, #8]
 8009bd0:	6a38      	ldr	r0, [r7, #32]
 8009bd2:	f000 fb65 	bl	800a2a0 <xQueueGenericSend>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d00b      	beq.n	8009bf4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d003      	beq.n	8009bea <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009be2:	f06f 0301 	mvn.w	r3, #1
 8009be6:	627b      	str	r3, [r7, #36]	; 0x24
 8009be8:	e004      	b.n	8009bf4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009bea:	f06f 0302 	mvn.w	r3, #2
 8009bee:	627b      	str	r3, [r7, #36]	; 0x24
 8009bf0:	e000      	b.n	8009bf4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bf2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3728      	adds	r7, #40	; 0x28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	20000234 	.word	0x20000234
 8009c04:	e000ed04 	.word	0xe000ed04

08009c08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b08a      	sub	sp, #40	; 0x28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c1e:	f3ef 8305 	mrs	r3, IPSR
 8009c22:	61fb      	str	r3, [r7, #28]
  return(result);
 8009c24:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10f      	bne.n	8009c4a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d105      	bne.n	8009c42 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c36:	f3ef 8311 	mrs	r3, BASEPRI
 8009c3a:	617b      	str	r3, [r7, #20]
  return(result);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d02c      	beq.n	8009c9c <osMessageQueueGet+0x94>
 8009c42:	4b28      	ldr	r3, [pc, #160]	; (8009ce4 <osMessageQueueGet+0xdc>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	d128      	bne.n	8009c9c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d005      	beq.n	8009c5c <osMessageQueueGet+0x54>
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <osMessageQueueGet+0x54>
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009c5c:	f06f 0303 	mvn.w	r3, #3
 8009c60:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c62:	e038      	b.n	8009cd6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009c64:	2300      	movs	r3, #0
 8009c66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009c68:	f107 0310 	add.w	r3, r7, #16
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	6a38      	ldr	r0, [r7, #32]
 8009c72:	f000 fe87 	bl	800a984 <xQueueReceiveFromISR>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d003      	beq.n	8009c84 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009c7c:	f06f 0302 	mvn.w	r3, #2
 8009c80:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c82:	e028      	b.n	8009cd6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d025      	beq.n	8009cd6 <osMessageQueueGet+0xce>
 8009c8a:	4b17      	ldr	r3, [pc, #92]	; (8009ce8 <osMessageQueueGet+0xe0>)
 8009c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c9a:	e01c      	b.n	8009cd6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <osMessageQueueGet+0xa0>
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d103      	bne.n	8009cb0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009ca8:	f06f 0303 	mvn.w	r3, #3
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
 8009cae:	e013      	b.n	8009cd8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	68b9      	ldr	r1, [r7, #8]
 8009cb4:	6a38      	ldr	r0, [r7, #32]
 8009cb6:	f000 fc81 	bl	800a5bc <xQueueReceive>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d00b      	beq.n	8009cd8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009cc6:	f06f 0301 	mvn.w	r3, #1
 8009cca:	627b      	str	r3, [r7, #36]	; 0x24
 8009ccc:	e004      	b.n	8009cd8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009cce:	f06f 0302 	mvn.w	r3, #2
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8009cd4:	e000      	b.n	8009cd8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cd6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3728      	adds	r7, #40	; 0x28
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000234 	.word	0x20000234
 8009ce8:	e000ed04 	.word	0xe000ed04

08009cec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	4a07      	ldr	r2, [pc, #28]	; (8009d18 <vApplicationGetIdleTaskMemory+0x2c>)
 8009cfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	4a06      	ldr	r2, [pc, #24]	; (8009d1c <vApplicationGetIdleTaskMemory+0x30>)
 8009d02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2280      	movs	r2, #128	; 0x80
 8009d08:	601a      	str	r2, [r3, #0]
}
 8009d0a:	bf00      	nop
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	20000238 	.word	0x20000238
 8009d1c:	20000294 	.word	0x20000294

08009d20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4a07      	ldr	r2, [pc, #28]	; (8009d4c <vApplicationGetTimerTaskMemory+0x2c>)
 8009d30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	4a06      	ldr	r2, [pc, #24]	; (8009d50 <vApplicationGetTimerTaskMemory+0x30>)
 8009d36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d3e:	601a      	str	r2, [r3, #0]
}
 8009d40:	bf00      	nop
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr
 8009d4c:	20000494 	.word	0x20000494
 8009d50:	200004f0 	.word	0x200004f0

08009d54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f103 0208 	add.w	r2, r3, #8
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f103 0208 	add.w	r2, r3, #8
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f103 0208 	add.w	r2, r3, #8
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dae:	b480      	push	{r7}
 8009db0:	b085      	sub	sp, #20
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	689a      	ldr	r2, [r3, #8]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	601a      	str	r2, [r3, #0]
}
 8009dea:	bf00      	nop
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009df6:	b480      	push	{r7}
 8009df8:	b085      	sub	sp, #20
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0c:	d103      	bne.n	8009e16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	e00c      	b.n	8009e30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	3308      	adds	r3, #8
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	e002      	b.n	8009e24 <vListInsert+0x2e>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d2f6      	bcs.n	8009e1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	601a      	str	r2, [r3, #0]
}
 8009e5c:	bf00      	nop
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	6892      	ldr	r2, [r2, #8]
 8009e7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	6852      	ldr	r2, [r2, #4]
 8009e88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d103      	bne.n	8009e9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	1e5a      	subs	r2, r3, #1
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d109      	bne.n	8009ee4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	60bb      	str	r3, [r7, #8]
 8009ee2:	e7fe      	b.n	8009ee2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009ee4:	f002 fc3a 	bl	800c75c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef0:	68f9      	ldr	r1, [r7, #12]
 8009ef2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ef4:	fb01 f303 	mul.w	r3, r1, r3
 8009ef8:	441a      	add	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f14:	3b01      	subs	r3, #1
 8009f16:	68f9      	ldr	r1, [r7, #12]
 8009f18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f1a:	fb01 f303 	mul.w	r3, r1, r3
 8009f1e:	441a      	add	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	22ff      	movs	r2, #255	; 0xff
 8009f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	22ff      	movs	r2, #255	; 0xff
 8009f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d114      	bne.n	8009f64 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d01a      	beq.n	8009f78 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3310      	adds	r3, #16
 8009f46:	4618      	mov	r0, r3
 8009f48:	f001 fbfc 	bl	800b744 <xTaskRemoveFromEventList>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d012      	beq.n	8009f78 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f52:	4b0d      	ldr	r3, [pc, #52]	; (8009f88 <xQueueGenericReset+0xcc>)
 8009f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f58:	601a      	str	r2, [r3, #0]
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	e009      	b.n	8009f78 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	3310      	adds	r3, #16
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7ff fef3 	bl	8009d54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3324      	adds	r3, #36	; 0x24
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff feee 	bl	8009d54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f78:	f002 fc1e 	bl	800c7b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f7c:	2301      	movs	r3, #1
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08e      	sub	sp, #56	; 0x38
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
 8009f98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <xQueueGenericCreateStatic+0x28>
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fb2:	e7fe      	b.n	8009fb2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d109      	bne.n	8009fce <xQueueGenericCreateStatic+0x42>
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	627b      	str	r3, [r7, #36]	; 0x24
 8009fcc:	e7fe      	b.n	8009fcc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <xQueueGenericCreateStatic+0x4e>
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <xQueueGenericCreateStatic+0x52>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e000      	b.n	8009fe0 <xQueueGenericCreateStatic+0x54>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d109      	bne.n	8009ff8 <xQueueGenericCreateStatic+0x6c>
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	623b      	str	r3, [r7, #32]
 8009ff6:	e7fe      	b.n	8009ff6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d102      	bne.n	800a004 <xQueueGenericCreateStatic+0x78>
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <xQueueGenericCreateStatic+0x7c>
 800a004:	2301      	movs	r3, #1
 800a006:	e000      	b.n	800a00a <xQueueGenericCreateStatic+0x7e>
 800a008:	2300      	movs	r3, #0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d109      	bne.n	800a022 <xQueueGenericCreateStatic+0x96>
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	61fb      	str	r3, [r7, #28]
 800a020:	e7fe      	b.n	800a020 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a022:	2350      	movs	r3, #80	; 0x50
 800a024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2b50      	cmp	r3, #80	; 0x50
 800a02a:	d009      	beq.n	800a040 <xQueueGenericCreateStatic+0xb4>
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	61bb      	str	r3, [r7, #24]
 800a03e:	e7fe      	b.n	800a03e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a040:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00d      	beq.n	800a068 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a054:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	4613      	mov	r3, r2
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	68b9      	ldr	r1, [r7, #8]
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 f844 	bl	800a0f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3730      	adds	r7, #48	; 0x30
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a072:	b580      	push	{r7, lr}
 800a074:	b08a      	sub	sp, #40	; 0x28
 800a076:	af02      	add	r7, sp, #8
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	60b9      	str	r1, [r7, #8]
 800a07c:	4613      	mov	r3, r2
 800a07e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d109      	bne.n	800a09a <xQueueGenericCreate+0x28>
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	613b      	str	r3, [r7, #16]
 800a098:	e7fe      	b.n	800a098 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d102      	bne.n	800a0a6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61fb      	str	r3, [r7, #28]
 800a0a4:	e004      	b.n	800a0b0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	fb02 f303 	mul.w	r3, r2, r3
 800a0ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	3350      	adds	r3, #80	; 0x50
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f002 fc6b 	bl	800c990 <pvPortMalloc>
 800a0ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d011      	beq.n	800a0e6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	3350      	adds	r3, #80	; 0x50
 800a0ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0d4:	79fa      	ldrb	r2, [r7, #7]
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	68b9      	ldr	r1, [r7, #8]
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 f805 	bl	800a0f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0e6:	69bb      	ldr	r3, [r7, #24]
	}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3720      	adds	r7, #32
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
 800a0fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d103      	bne.n	800a10c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	69ba      	ldr	r2, [r7, #24]
 800a108:	601a      	str	r2, [r3, #0]
 800a10a:	e002      	b.n	800a112 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a11e:	2101      	movs	r1, #1
 800a120:	69b8      	ldr	r0, [r7, #24]
 800a122:	f7ff fecb 	bl	8009ebc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	78fa      	ldrb	r2, [r7, #3]
 800a12a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a12e:	bf00      	nop
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a136:	b580      	push	{r7, lr}
 800a138:	b082      	sub	sp, #8
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00e      	beq.n	800a162 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a156:	2300      	movs	r3, #0
 800a158:	2200      	movs	r2, #0
 800a15a:	2100      	movs	r1, #0
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f89f 	bl	800a2a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a162:	bf00      	nop
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b086      	sub	sp, #24
 800a16e:	af00      	add	r7, sp, #0
 800a170:	4603      	mov	r3, r0
 800a172:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a174:	2301      	movs	r3, #1
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	2300      	movs	r3, #0
 800a17a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a17c:	79fb      	ldrb	r3, [r7, #7]
 800a17e:	461a      	mov	r2, r3
 800a180:	6939      	ldr	r1, [r7, #16]
 800a182:	6978      	ldr	r0, [r7, #20]
 800a184:	f7ff ff75 	bl	800a072 <xQueueGenericCreate>
 800a188:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f7ff ffd3 	bl	800a136 <prvInitialiseMutex>

		return xNewQueue;
 800a190:	68fb      	ldr	r3, [r7, #12]
	}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b088      	sub	sp, #32
 800a19e:	af02      	add	r7, sp, #8
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	6039      	str	r1, [r7, #0]
 800a1a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	617b      	str	r3, [r7, #20]
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	6939      	ldr	r1, [r7, #16]
 800a1b8:	6978      	ldr	r0, [r7, #20]
 800a1ba:	f7ff fee7 	bl	8009f8c <xQueueGenericCreateStatic>
 800a1be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f7ff ffb8 	bl	800a136 <prvInitialiseMutex>

		return xNewQueue;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
	}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a1d0:	b590      	push	{r4, r7, lr}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d109      	bne.n	800a1f6 <xQueueGiveMutexRecursive+0x26>
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	60fb      	str	r3, [r7, #12]
 800a1f4:	e7fe      	b.n	800a1f4 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	689c      	ldr	r4, [r3, #8]
 800a1fa:	f001 fc59 	bl	800bab0 <xTaskGetCurrentTaskHandle>
 800a1fe:	4603      	mov	r3, r0
 800a200:	429c      	cmp	r4, r3
 800a202:	d111      	bne.n	800a228 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	1e5a      	subs	r2, r3, #1
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d105      	bne.n	800a222 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a216:	2300      	movs	r3, #0
 800a218:	2200      	movs	r2, #0
 800a21a:	2100      	movs	r1, #0
 800a21c:	6938      	ldr	r0, [r7, #16]
 800a21e:	f000 f83f 	bl	800a2a0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a222:	2301      	movs	r3, #1
 800a224:	617b      	str	r3, [r7, #20]
 800a226:	e001      	b.n	800a22c <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a228:	2300      	movs	r3, #0
 800a22a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a22c:	697b      	ldr	r3, [r7, #20]
	}
 800a22e:	4618      	mov	r0, r3
 800a230:	371c      	adds	r7, #28
 800a232:	46bd      	mov	sp, r7
 800a234:	bd90      	pop	{r4, r7, pc}

0800a236 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a236:	b590      	push	{r4, r7, lr}
 800a238:	b087      	sub	sp, #28
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d109      	bne.n	800a25e <xQueueTakeMutexRecursive+0x28>
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	e7fe      	b.n	800a25c <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	689c      	ldr	r4, [r3, #8]
 800a262:	f001 fc25 	bl	800bab0 <xTaskGetCurrentTaskHandle>
 800a266:	4603      	mov	r3, r0
 800a268:	429c      	cmp	r4, r3
 800a26a:	d107      	bne.n	800a27c <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a276:	2301      	movs	r3, #1
 800a278:	617b      	str	r3, [r7, #20]
 800a27a:	e00c      	b.n	800a296 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6938      	ldr	r0, [r7, #16]
 800a280:	f000 fa78 	bl	800a774 <xQueueSemaphoreTake>
 800a284:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d004      	beq.n	800a296 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	1c5a      	adds	r2, r3, #1
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a296:	697b      	ldr	r3, [r7, #20]
	}
 800a298:	4618      	mov	r0, r3
 800a29a:	371c      	adds	r7, #28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd90      	pop	{r4, r7, pc}

0800a2a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b08e      	sub	sp, #56	; 0x38
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
 800a2ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d109      	bne.n	800a2d0 <xQueueGenericSend+0x30>
 800a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2ce:	e7fe      	b.n	800a2ce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d103      	bne.n	800a2de <xQueueGenericSend+0x3e>
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <xQueueGenericSend+0x42>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e000      	b.n	800a2e4 <xQueueGenericSend+0x44>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d109      	bne.n	800a2fc <xQueueGenericSend+0x5c>
 800a2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a2fa:	e7fe      	b.n	800a2fa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d103      	bne.n	800a30a <xQueueGenericSend+0x6a>
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a306:	2b01      	cmp	r3, #1
 800a308:	d101      	bne.n	800a30e <xQueueGenericSend+0x6e>
 800a30a:	2301      	movs	r3, #1
 800a30c:	e000      	b.n	800a310 <xQueueGenericSend+0x70>
 800a30e:	2300      	movs	r3, #0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d109      	bne.n	800a328 <xQueueGenericSend+0x88>
 800a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	623b      	str	r3, [r7, #32]
 800a326:	e7fe      	b.n	800a326 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a328:	f001 fbd2 	bl	800bad0 <xTaskGetSchedulerState>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d102      	bne.n	800a338 <xQueueGenericSend+0x98>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d101      	bne.n	800a33c <xQueueGenericSend+0x9c>
 800a338:	2301      	movs	r3, #1
 800a33a:	e000      	b.n	800a33e <xQueueGenericSend+0x9e>
 800a33c:	2300      	movs	r3, #0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d109      	bne.n	800a356 <xQueueGenericSend+0xb6>
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	61fb      	str	r3, [r7, #28]
 800a354:	e7fe      	b.n	800a354 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a356:	f002 fa01 	bl	800c75c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a362:	429a      	cmp	r2, r3
 800a364:	d302      	bcc.n	800a36c <xQueueGenericSend+0xcc>
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d129      	bne.n	800a3c0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a36c:	683a      	ldr	r2, [r7, #0]
 800a36e:	68b9      	ldr	r1, [r7, #8]
 800a370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a372:	f000 fb9c 	bl	800aaae <prvCopyDataToQueue>
 800a376:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d010      	beq.n	800a3a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	3324      	adds	r3, #36	; 0x24
 800a384:	4618      	mov	r0, r3
 800a386:	f001 f9dd 	bl	800b744 <xTaskRemoveFromEventList>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d013      	beq.n	800a3b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a390:	4b3f      	ldr	r3, [pc, #252]	; (800a490 <xQueueGenericSend+0x1f0>)
 800a392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a396:	601a      	str	r2, [r3, #0]
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	e00a      	b.n	800a3b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d007      	beq.n	800a3b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3a8:	4b39      	ldr	r3, [pc, #228]	; (800a490 <xQueueGenericSend+0x1f0>)
 800a3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3b8:	f002 f9fe 	bl	800c7b8 <vPortExitCritical>
				return pdPASS;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e063      	b.n	800a488 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d103      	bne.n	800a3ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3c6:	f002 f9f7 	bl	800c7b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	e05c      	b.n	800a488 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d106      	bne.n	800a3e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3d4:	f107 0314 	add.w	r3, r7, #20
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f001 fa15 	bl	800b808 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3e2:	f002 f9e9 	bl	800c7b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3e6:	f000 ff7f 	bl	800b2e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3ea:	f002 f9b7 	bl	800c75c <vPortEnterCritical>
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3f4:	b25b      	sxtb	r3, r3
 800a3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fa:	d103      	bne.n	800a404 <xQueueGenericSend+0x164>
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a40a:	b25b      	sxtb	r3, r3
 800a40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a410:	d103      	bne.n	800a41a <xQueueGenericSend+0x17a>
 800a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a414:	2200      	movs	r2, #0
 800a416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a41a:	f002 f9cd 	bl	800c7b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a41e:	1d3a      	adds	r2, r7, #4
 800a420:	f107 0314 	add.w	r3, r7, #20
 800a424:	4611      	mov	r1, r2
 800a426:	4618      	mov	r0, r3
 800a428:	f001 fa04 	bl	800b834 <xTaskCheckForTimeOut>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d124      	bne.n	800a47c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a434:	f000 fc33 	bl	800ac9e <prvIsQueueFull>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d018      	beq.n	800a470 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a440:	3310      	adds	r3, #16
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	4611      	mov	r1, r2
 800a446:	4618      	mov	r0, r3
 800a448:	f001 f92e 	bl	800b6a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a44c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a44e:	f000 fbbe 	bl	800abce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a452:	f000 ff57 	bl	800b304 <xTaskResumeAll>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f47f af7c 	bne.w	800a356 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a45e:	4b0c      	ldr	r3, [pc, #48]	; (800a490 <xQueueGenericSend+0x1f0>)
 800a460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	e772      	b.n	800a356 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a472:	f000 fbac 	bl	800abce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a476:	f000 ff45 	bl	800b304 <xTaskResumeAll>
 800a47a:	e76c      	b.n	800a356 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a47e:	f000 fba6 	bl	800abce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a482:	f000 ff3f 	bl	800b304 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a486:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3738      	adds	r7, #56	; 0x38
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	e000ed04 	.word	0xe000ed04

0800a494 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08e      	sub	sp, #56	; 0x38
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
 800a4a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d109      	bne.n	800a4c0 <xQueueGenericSendFromISR+0x2c>
 800a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a4be:	e7fe      	b.n	800a4be <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d103      	bne.n	800a4ce <xQueueGenericSendFromISR+0x3a>
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d101      	bne.n	800a4d2 <xQueueGenericSendFromISR+0x3e>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e000      	b.n	800a4d4 <xQueueGenericSendFromISR+0x40>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d109      	bne.n	800a4ec <xQueueGenericSendFromISR+0x58>
 800a4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4dc:	f383 8811 	msr	BASEPRI, r3
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	623b      	str	r3, [r7, #32]
 800a4ea:	e7fe      	b.n	800a4ea <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d103      	bne.n	800a4fa <xQueueGenericSendFromISR+0x66>
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d101      	bne.n	800a4fe <xQueueGenericSendFromISR+0x6a>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e000      	b.n	800a500 <xQueueGenericSendFromISR+0x6c>
 800a4fe:	2300      	movs	r3, #0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d109      	bne.n	800a518 <xQueueGenericSendFromISR+0x84>
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	61fb      	str	r3, [r7, #28]
 800a516:	e7fe      	b.n	800a516 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a518:	f002 f9fc 	bl	800c914 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a51c:	f3ef 8211 	mrs	r2, BASEPRI
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	61ba      	str	r2, [r7, #24]
 800a532:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a534:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a536:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a540:	429a      	cmp	r2, r3
 800a542:	d302      	bcc.n	800a54a <xQueueGenericSendFromISR+0xb6>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2b02      	cmp	r3, #2
 800a548:	d12c      	bne.n	800a5a4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a554:	683a      	ldr	r2, [r7, #0]
 800a556:	68b9      	ldr	r1, [r7, #8]
 800a558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a55a:	f000 faa8 	bl	800aaae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a55e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a566:	d112      	bne.n	800a58e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d016      	beq.n	800a59e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a572:	3324      	adds	r3, #36	; 0x24
 800a574:	4618      	mov	r0, r3
 800a576:	f001 f8e5 	bl	800b744 <xTaskRemoveFromEventList>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00e      	beq.n	800a59e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00b      	beq.n	800a59e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	e007      	b.n	800a59e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a58e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a592:	3301      	adds	r3, #1
 800a594:	b2db      	uxtb	r3, r3
 800a596:	b25a      	sxtb	r2, r3
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a5a2:	e001      	b.n	800a5a8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5aa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3738      	adds	r7, #56	; 0x38
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08c      	sub	sp, #48	; 0x30
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d109      	bne.n	800a5ea <xQueueReceive+0x2e>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	623b      	str	r3, [r7, #32]
 800a5e8:	e7fe      	b.n	800a5e8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d103      	bne.n	800a5f8 <xQueueReceive+0x3c>
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <xQueueReceive+0x40>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e000      	b.n	800a5fe <xQueueReceive+0x42>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d109      	bne.n	800a616 <xQueueReceive+0x5a>
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	61fb      	str	r3, [r7, #28]
 800a614:	e7fe      	b.n	800a614 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a616:	f001 fa5b 	bl	800bad0 <xTaskGetSchedulerState>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d102      	bne.n	800a626 <xQueueReceive+0x6a>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <xQueueReceive+0x6e>
 800a626:	2301      	movs	r3, #1
 800a628:	e000      	b.n	800a62c <xQueueReceive+0x70>
 800a62a:	2300      	movs	r3, #0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d109      	bne.n	800a644 <xQueueReceive+0x88>
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	61bb      	str	r3, [r7, #24]
 800a642:	e7fe      	b.n	800a642 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a644:	f002 f88a 	bl	800c75c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	2b00      	cmp	r3, #0
 800a652:	d01f      	beq.n	800a694 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a654:	68b9      	ldr	r1, [r7, #8]
 800a656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a658:	f000 fa93 	bl	800ab82 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	1e5a      	subs	r2, r3, #1
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00f      	beq.n	800a68c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	3310      	adds	r3, #16
 800a670:	4618      	mov	r0, r3
 800a672:	f001 f867 	bl	800b744 <xTaskRemoveFromEventList>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d007      	beq.n	800a68c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a67c:	4b3c      	ldr	r3, [pc, #240]	; (800a770 <xQueueReceive+0x1b4>)
 800a67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a68c:	f002 f894 	bl	800c7b8 <vPortExitCritical>
				return pdPASS;
 800a690:	2301      	movs	r3, #1
 800a692:	e069      	b.n	800a768 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d103      	bne.n	800a6a2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a69a:	f002 f88d 	bl	800c7b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e062      	b.n	800a768 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d106      	bne.n	800a6b6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6a8:	f107 0310 	add.w	r3, r7, #16
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f001 f8ab 	bl	800b808 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6b6:	f002 f87f 	bl	800c7b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6ba:	f000 fe15 	bl	800b2e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6be:	f002 f84d 	bl	800c75c <vPortEnterCritical>
 800a6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6c8:	b25b      	sxtb	r3, r3
 800a6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ce:	d103      	bne.n	800a6d8 <xQueueReceive+0x11c>
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6de:	b25b      	sxtb	r3, r3
 800a6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e4:	d103      	bne.n	800a6ee <xQueueReceive+0x132>
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6ee:	f002 f863 	bl	800c7b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6f2:	1d3a      	adds	r2, r7, #4
 800a6f4:	f107 0310 	add.w	r3, r7, #16
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f001 f89a 	bl	800b834 <xTaskCheckForTimeOut>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d123      	bne.n	800a74e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a708:	f000 fab3 	bl	800ac72 <prvIsQueueEmpty>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d017      	beq.n	800a742 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	3324      	adds	r3, #36	; 0x24
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	4611      	mov	r1, r2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 ffc4 	bl	800b6a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a722:	f000 fa54 	bl	800abce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a726:	f000 fded 	bl	800b304 <xTaskResumeAll>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d189      	bne.n	800a644 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a730:	4b0f      	ldr	r3, [pc, #60]	; (800a770 <xQueueReceive+0x1b4>)
 800a732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	e780      	b.n	800a644 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a744:	f000 fa43 	bl	800abce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a748:	f000 fddc 	bl	800b304 <xTaskResumeAll>
 800a74c:	e77a      	b.n	800a644 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a74e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a750:	f000 fa3d 	bl	800abce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a754:	f000 fdd6 	bl	800b304 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a75a:	f000 fa8a 	bl	800ac72 <prvIsQueueEmpty>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	f43f af6f 	beq.w	800a644 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a766:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3730      	adds	r7, #48	; 0x30
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	e000ed04 	.word	0xe000ed04

0800a774 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b08e      	sub	sp, #56	; 0x38
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a77e:	2300      	movs	r3, #0
 800a780:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a786:	2300      	movs	r3, #0
 800a788:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d109      	bne.n	800a7a4 <xQueueSemaphoreTake+0x30>
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	623b      	str	r3, [r7, #32]
 800a7a2:	e7fe      	b.n	800a7a2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d009      	beq.n	800a7c0 <xQueueSemaphoreTake+0x4c>
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	61fb      	str	r3, [r7, #28]
 800a7be:	e7fe      	b.n	800a7be <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7c0:	f001 f986 	bl	800bad0 <xTaskGetSchedulerState>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d102      	bne.n	800a7d0 <xQueueSemaphoreTake+0x5c>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <xQueueSemaphoreTake+0x60>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e000      	b.n	800a7d6 <xQueueSemaphoreTake+0x62>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d109      	bne.n	800a7ee <xQueueSemaphoreTake+0x7a>
 800a7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7de:	f383 8811 	msr	BASEPRI, r3
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	61bb      	str	r3, [r7, #24]
 800a7ec:	e7fe      	b.n	800a7ec <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7ee:	f001 ffb5 	bl	800c75c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d024      	beq.n	800a848 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a800:	1e5a      	subs	r2, r3, #1
 800a802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a804:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d104      	bne.n	800a818 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a80e:	f001 fad1 	bl	800bdb4 <pvTaskIncrementMutexHeldCount>
 800a812:	4602      	mov	r2, r0
 800a814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a816:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00f      	beq.n	800a840 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a822:	3310      	adds	r3, #16
 800a824:	4618      	mov	r0, r3
 800a826:	f000 ff8d 	bl	800b744 <xTaskRemoveFromEventList>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d007      	beq.n	800a840 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a830:	4b53      	ldr	r3, [pc, #332]	; (800a980 <xQueueSemaphoreTake+0x20c>)
 800a832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a836:	601a      	str	r2, [r3, #0]
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a840:	f001 ffba 	bl	800c7b8 <vPortExitCritical>
				return pdPASS;
 800a844:	2301      	movs	r3, #1
 800a846:	e096      	b.n	800a976 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d110      	bne.n	800a870 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	2b00      	cmp	r3, #0
 800a852:	d009      	beq.n	800a868 <xQueueSemaphoreTake+0xf4>
 800a854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	617b      	str	r3, [r7, #20]
 800a866:	e7fe      	b.n	800a866 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a868:	f001 ffa6 	bl	800c7b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a86c:	2300      	movs	r3, #0
 800a86e:	e082      	b.n	800a976 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a872:	2b00      	cmp	r3, #0
 800a874:	d106      	bne.n	800a884 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a876:	f107 030c 	add.w	r3, r7, #12
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 ffc4 	bl	800b808 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a880:	2301      	movs	r3, #1
 800a882:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a884:	f001 ff98 	bl	800c7b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a888:	f000 fd2e 	bl	800b2e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a88c:	f001 ff66 	bl	800c75c <vPortEnterCritical>
 800a890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a896:	b25b      	sxtb	r3, r3
 800a898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89c:	d103      	bne.n	800a8a6 <xQueueSemaphoreTake+0x132>
 800a89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8ac:	b25b      	sxtb	r3, r3
 800a8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b2:	d103      	bne.n	800a8bc <xQueueSemaphoreTake+0x148>
 800a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8bc:	f001 ff7c 	bl	800c7b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8c0:	463a      	mov	r2, r7
 800a8c2:	f107 030c 	add.w	r3, r7, #12
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 ffb3 	bl	800b834 <xTaskCheckForTimeOut>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d132      	bne.n	800a93a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8d6:	f000 f9cc 	bl	800ac72 <prvIsQueueEmpty>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d026      	beq.n	800a92e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d109      	bne.n	800a8fc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800a8e8:	f001 ff38 	bl	800c75c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f001 f90b 	bl	800bb0c <xTaskPriorityInherit>
 800a8f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a8f8:	f001 ff5e 	bl	800c7b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fe:	3324      	adds	r3, #36	; 0x24
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	4611      	mov	r1, r2
 800a904:	4618      	mov	r0, r3
 800a906:	f000 fecf 	bl	800b6a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a90a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a90c:	f000 f95f 	bl	800abce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a910:	f000 fcf8 	bl	800b304 <xTaskResumeAll>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	f47f af69 	bne.w	800a7ee <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800a91c:	4b18      	ldr	r3, [pc, #96]	; (800a980 <xQueueSemaphoreTake+0x20c>)
 800a91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	e75f      	b.n	800a7ee <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a92e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a930:	f000 f94d 	bl	800abce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a934:	f000 fce6 	bl	800b304 <xTaskResumeAll>
 800a938:	e759      	b.n	800a7ee <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a93a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a93c:	f000 f947 	bl	800abce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a940:	f000 fce0 	bl	800b304 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a944:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a946:	f000 f994 	bl	800ac72 <prvIsQueueEmpty>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f43f af4e 	beq.w	800a7ee <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00d      	beq.n	800a974 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800a958:	f001 ff00 	bl	800c75c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a95c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a95e:	f000 f88e 	bl	800aa7e <prvGetDisinheritPriorityAfterTimeout>
 800a962:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a96a:	4618      	mov	r0, r3
 800a96c:	f001 f9a2 	bl	800bcb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a970:	f001 ff22 	bl	800c7b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a974:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a976:	4618      	mov	r0, r3
 800a978:	3738      	adds	r7, #56	; 0x38
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	e000ed04 	.word	0xe000ed04

0800a984 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b08e      	sub	sp, #56	; 0x38
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a996:	2b00      	cmp	r3, #0
 800a998:	d109      	bne.n	800a9ae <xQueueReceiveFromISR+0x2a>
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	623b      	str	r3, [r7, #32]
 800a9ac:	e7fe      	b.n	800a9ac <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d103      	bne.n	800a9bc <xQueueReceiveFromISR+0x38>
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d101      	bne.n	800a9c0 <xQueueReceiveFromISR+0x3c>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e000      	b.n	800a9c2 <xQueueReceiveFromISR+0x3e>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d109      	bne.n	800a9da <xQueueReceiveFromISR+0x56>
 800a9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	61fb      	str	r3, [r7, #28]
 800a9d8:	e7fe      	b.n	800a9d8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9da:	f001 ff9b 	bl	800c914 <vPortValidateInterruptPriority>
	__asm volatile
 800a9de:	f3ef 8211 	mrs	r2, BASEPRI
 800a9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	61ba      	str	r2, [r7, #24]
 800a9f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a9f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d02f      	beq.n	800aa66 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa10:	68b9      	ldr	r1, [r7, #8]
 800aa12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa14:	f000 f8b5 	bl	800ab82 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	1e5a      	subs	r2, r3, #1
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aa20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa28:	d112      	bne.n	800aa50 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d016      	beq.n	800aa60 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	3310      	adds	r3, #16
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 fe84 	bl	800b744 <xTaskRemoveFromEventList>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00e      	beq.n	800aa60 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00b      	beq.n	800aa60 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	601a      	str	r2, [r3, #0]
 800aa4e:	e007      	b.n	800aa60 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aa50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa54:	3301      	adds	r3, #1
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	b25a      	sxtb	r2, r3
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aa60:	2301      	movs	r3, #1
 800aa62:	637b      	str	r3, [r7, #52]	; 0x34
 800aa64:	e001      	b.n	800aa6a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800aa66:	2300      	movs	r3, #0
 800aa68:	637b      	str	r3, [r7, #52]	; 0x34
 800aa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3738      	adds	r7, #56	; 0x38
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aa7e:	b480      	push	{r7}
 800aa80:	b085      	sub	sp, #20
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d006      	beq.n	800aa9c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	e001      	b.n	800aaa0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
	}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b086      	sub	sp, #24
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	60f8      	str	r0, [r7, #12]
 800aab6:	60b9      	str	r1, [r7, #8]
 800aab8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aaba:	2300      	movs	r3, #0
 800aabc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10d      	bne.n	800aae8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d14d      	bne.n	800ab70 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	4618      	mov	r0, r3
 800aada:	f001 f87f 	bl	800bbdc <xTaskPriorityDisinherit>
 800aade:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	609a      	str	r2, [r3, #8]
 800aae6:	e043      	b.n	800ab70 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d119      	bne.n	800ab22 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6858      	ldr	r0, [r3, #4]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	68b9      	ldr	r1, [r7, #8]
 800aafa:	f002 feb5 	bl	800d868 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab06:	441a      	add	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	685a      	ldr	r2, [r3, #4]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d32b      	bcc.n	800ab70 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	605a      	str	r2, [r3, #4]
 800ab20:	e026      	b.n	800ab70 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	68d8      	ldr	r0, [r3, #12]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	68b9      	ldr	r1, [r7, #8]
 800ab2e:	f002 fe9b 	bl	800d868 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	68da      	ldr	r2, [r3, #12]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3a:	425b      	negs	r3, r3
 800ab3c:	441a      	add	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	68da      	ldr	r2, [r3, #12]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d207      	bcs.n	800ab5e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	689a      	ldr	r2, [r3, #8]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab56:	425b      	negs	r3, r3
 800ab58:	441a      	add	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d105      	bne.n	800ab70 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d002      	beq.n	800ab70 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab78:	697b      	ldr	r3, [r7, #20]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3718      	adds	r7, #24
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b082      	sub	sp, #8
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d018      	beq.n	800abc6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68da      	ldr	r2, [r3, #12]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9c:	441a      	add	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68da      	ldr	r2, [r3, #12]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d303      	bcc.n	800abb6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68d9      	ldr	r1, [r3, #12]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbe:	461a      	mov	r2, r3
 800abc0:	6838      	ldr	r0, [r7, #0]
 800abc2:	f002 fe51 	bl	800d868 <memcpy>
	}
}
 800abc6:	bf00      	nop
 800abc8:	3708      	adds	r7, #8
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800abd6:	f001 fdc1 	bl	800c75c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abe0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abe2:	e011      	b.n	800ac08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d012      	beq.n	800ac12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	3324      	adds	r3, #36	; 0x24
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fda7 	bl	800b744 <xTaskRemoveFromEventList>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abfc:	f000 fe7a 	bl	800b8f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dce9      	bgt.n	800abe4 <prvUnlockQueue+0x16>
 800ac10:	e000      	b.n	800ac14 <prvUnlockQueue+0x46>
					break;
 800ac12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	22ff      	movs	r2, #255	; 0xff
 800ac18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ac1c:	f001 fdcc 	bl	800c7b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac20:	f001 fd9c 	bl	800c75c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac2c:	e011      	b.n	800ac52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d012      	beq.n	800ac5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3310      	adds	r3, #16
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fd82 	bl	800b744 <xTaskRemoveFromEventList>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac46:	f000 fe55 	bl	800b8f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dce9      	bgt.n	800ac2e <prvUnlockQueue+0x60>
 800ac5a:	e000      	b.n	800ac5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	22ff      	movs	r2, #255	; 0xff
 800ac62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac66:	f001 fda7 	bl	800c7b8 <vPortExitCritical>
}
 800ac6a:	bf00      	nop
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b084      	sub	sp, #16
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac7a:	f001 fd6f 	bl	800c75c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d102      	bne.n	800ac8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac86:	2301      	movs	r3, #1
 800ac88:	60fb      	str	r3, [r7, #12]
 800ac8a:	e001      	b.n	800ac90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac90:	f001 fd92 	bl	800c7b8 <vPortExitCritical>

	return xReturn;
 800ac94:	68fb      	ldr	r3, [r7, #12]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aca6:	f001 fd59 	bl	800c75c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d102      	bne.n	800acbc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800acb6:	2301      	movs	r3, #1
 800acb8:	60fb      	str	r3, [r7, #12]
 800acba:	e001      	b.n	800acc0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800acbc:	2300      	movs	r3, #0
 800acbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acc0:	f001 fd7a 	bl	800c7b8 <vPortExitCritical>

	return xReturn;
 800acc4:	68fb      	ldr	r3, [r7, #12]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
	...

0800acd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acda:	2300      	movs	r3, #0
 800acdc:	60fb      	str	r3, [r7, #12]
 800acde:	e014      	b.n	800ad0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ace0:	4a0e      	ldr	r2, [pc, #56]	; (800ad1c <vQueueAddToRegistry+0x4c>)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10b      	bne.n	800ad04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800acec:	490b      	ldr	r1, [pc, #44]	; (800ad1c <vQueueAddToRegistry+0x4c>)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800acf6:	4a09      	ldr	r2, [pc, #36]	; (800ad1c <vQueueAddToRegistry+0x4c>)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	00db      	lsls	r3, r3, #3
 800acfc:	4413      	add	r3, r2
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad02:	e005      	b.n	800ad10 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	3301      	adds	r3, #1
 800ad08:	60fb      	str	r3, [r7, #12]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b07      	cmp	r3, #7
 800ad0e:	d9e7      	bls.n	800ace0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad10:	bf00      	nop
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	2000c088 	.word	0x2000c088

0800ad20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b086      	sub	sp, #24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad30:	f001 fd14 	bl	800c75c <vPortEnterCritical>
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad3a:	b25b      	sxtb	r3, r3
 800ad3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad40:	d103      	bne.n	800ad4a <vQueueWaitForMessageRestricted+0x2a>
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad50:	b25b      	sxtb	r3, r3
 800ad52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad56:	d103      	bne.n	800ad60 <vQueueWaitForMessageRestricted+0x40>
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad60:	f001 fd2a 	bl	800c7b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d106      	bne.n	800ad7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	3324      	adds	r3, #36	; 0x24
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f000 fcbb 	bl	800b6f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad7a:	6978      	ldr	r0, [r7, #20]
 800ad7c:	f7ff ff27 	bl	800abce <prvUnlockQueue>
	}
 800ad80:	bf00      	nop
 800ad82:	3718      	adds	r7, #24
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b08e      	sub	sp, #56	; 0x38
 800ad8c:	af04      	add	r7, sp, #16
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d109      	bne.n	800adb0 <xTaskCreateStatic+0x28>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	623b      	str	r3, [r7, #32]
 800adae:	e7fe      	b.n	800adae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800adb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d109      	bne.n	800adca <xTaskCreateStatic+0x42>
 800adb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	61fb      	str	r3, [r7, #28]
 800adc8:	e7fe      	b.n	800adc8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adca:	235c      	movs	r3, #92	; 0x5c
 800adcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	2b5c      	cmp	r3, #92	; 0x5c
 800add2:	d009      	beq.n	800ade8 <xTaskCreateStatic+0x60>
 800add4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	61bb      	str	r3, [r7, #24]
 800ade6:	e7fe      	b.n	800ade6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ade8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800adea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adec:	2b00      	cmp	r3, #0
 800adee:	d01e      	beq.n	800ae2e <xTaskCreateStatic+0xa6>
 800adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d01b      	beq.n	800ae2e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adfe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	2202      	movs	r2, #2
 800ae04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae08:	2300      	movs	r3, #0
 800ae0a:	9303      	str	r3, [sp, #12]
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0e:	9302      	str	r3, [sp, #8]
 800ae10:	f107 0314 	add.w	r3, r7, #20
 800ae14:	9301      	str	r3, [sp, #4]
 800ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae18:	9300      	str	r3, [sp, #0]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	68b9      	ldr	r1, [r7, #8]
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f000 f850 	bl	800aec6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae28:	f000 f8dc 	bl	800afe4 <prvAddNewTaskToReadyList>
 800ae2c:	e001      	b.n	800ae32 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae32:	697b      	ldr	r3, [r7, #20]
	}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3728      	adds	r7, #40	; 0x28
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08c      	sub	sp, #48	; 0x30
 800ae40:	af04      	add	r7, sp, #16
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	603b      	str	r3, [r7, #0]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae4c:	88fb      	ldrh	r3, [r7, #6]
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4618      	mov	r0, r3
 800ae52:	f001 fd9d 	bl	800c990 <pvPortMalloc>
 800ae56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00e      	beq.n	800ae7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae5e:	205c      	movs	r0, #92	; 0x5c
 800ae60:	f001 fd96 	bl	800c990 <pvPortMalloc>
 800ae64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d003      	beq.n	800ae74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	631a      	str	r2, [r3, #48]	; 0x30
 800ae72:	e005      	b.n	800ae80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae74:	6978      	ldr	r0, [r7, #20]
 800ae76:	f001 fe4d 	bl	800cb14 <vPortFree>
 800ae7a:	e001      	b.n	800ae80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d017      	beq.n	800aeb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae8e:	88fa      	ldrh	r2, [r7, #6]
 800ae90:	2300      	movs	r3, #0
 800ae92:	9303      	str	r3, [sp, #12]
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	9302      	str	r3, [sp, #8]
 800ae98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9a:	9301      	str	r3, [sp, #4]
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	68b9      	ldr	r1, [r7, #8]
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f000 f80e 	bl	800aec6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aeaa:	69f8      	ldr	r0, [r7, #28]
 800aeac:	f000 f89a 	bl	800afe4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	61bb      	str	r3, [r7, #24]
 800aeb4:	e002      	b.n	800aebc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aeb6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aebc:	69bb      	ldr	r3, [r7, #24]
	}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3720      	adds	r7, #32
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b088      	sub	sp, #32
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	60b9      	str	r1, [r7, #8]
 800aed0:	607a      	str	r2, [r7, #4]
 800aed2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	461a      	mov	r2, r3
 800aede:	21a5      	movs	r1, #165	; 0xa5
 800aee0:	f002 fccd 	bl	800d87e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aeee:	3b01      	subs	r3, #1
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4413      	add	r3, r2
 800aef4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	f023 0307 	bic.w	r3, r3, #7
 800aefc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	f003 0307 	and.w	r3, r3, #7
 800af04:	2b00      	cmp	r3, #0
 800af06:	d009      	beq.n	800af1c <prvInitialiseNewTask+0x56>
 800af08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	617b      	str	r3, [r7, #20]
 800af1a:	e7fe      	b.n	800af1a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d01f      	beq.n	800af62 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af22:	2300      	movs	r3, #0
 800af24:	61fb      	str	r3, [r7, #28]
 800af26:	e012      	b.n	800af4e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	4413      	add	r3, r2
 800af2e:	7819      	ldrb	r1, [r3, #0]
 800af30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	4413      	add	r3, r2
 800af36:	3334      	adds	r3, #52	; 0x34
 800af38:	460a      	mov	r2, r1
 800af3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	4413      	add	r3, r2
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d006      	beq.n	800af56 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	3301      	adds	r3, #1
 800af4c:	61fb      	str	r3, [r7, #28]
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	2b0f      	cmp	r3, #15
 800af52:	d9e9      	bls.n	800af28 <prvInitialiseNewTask+0x62>
 800af54:	e000      	b.n	800af58 <prvInitialiseNewTask+0x92>
			{
				break;
 800af56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af60:	e003      	b.n	800af6a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6c:	2b37      	cmp	r3, #55	; 0x37
 800af6e:	d901      	bls.n	800af74 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af70:	2337      	movs	r3, #55	; 0x37
 800af72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af82:	2200      	movs	r2, #0
 800af84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	3304      	adds	r3, #4
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fe ff02 	bl	8009d94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	3318      	adds	r3, #24
 800af94:	4618      	mov	r0, r3
 800af96:	f7fe fefd 	bl	8009d94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	2200      	movs	r2, #0
 800afb4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	68f9      	ldr	r1, [r7, #12]
 800afc2:	69b8      	ldr	r0, [r7, #24]
 800afc4:	f001 faa4 	bl	800c510 <pxPortInitialiseStack>
 800afc8:	4602      	mov	r2, r0
 800afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afda:	bf00      	nop
 800afdc:	3720      	adds	r7, #32
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800afec:	f001 fbb6 	bl	800c75c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aff0:	4b2d      	ldr	r3, [pc, #180]	; (800b0a8 <prvAddNewTaskToReadyList+0xc4>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3301      	adds	r3, #1
 800aff6:	4a2c      	ldr	r2, [pc, #176]	; (800b0a8 <prvAddNewTaskToReadyList+0xc4>)
 800aff8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800affa:	4b2c      	ldr	r3, [pc, #176]	; (800b0ac <prvAddNewTaskToReadyList+0xc8>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d109      	bne.n	800b016 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b002:	4a2a      	ldr	r2, [pc, #168]	; (800b0ac <prvAddNewTaskToReadyList+0xc8>)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b008:	4b27      	ldr	r3, [pc, #156]	; (800b0a8 <prvAddNewTaskToReadyList+0xc4>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d110      	bne.n	800b032 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b010:	f000 fc94 	bl	800b93c <prvInitialiseTaskLists>
 800b014:	e00d      	b.n	800b032 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b016:	4b26      	ldr	r3, [pc, #152]	; (800b0b0 <prvAddNewTaskToReadyList+0xcc>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d109      	bne.n	800b032 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b01e:	4b23      	ldr	r3, [pc, #140]	; (800b0ac <prvAddNewTaskToReadyList+0xc8>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b028:	429a      	cmp	r2, r3
 800b02a:	d802      	bhi.n	800b032 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b02c:	4a1f      	ldr	r2, [pc, #124]	; (800b0ac <prvAddNewTaskToReadyList+0xc8>)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b032:	4b20      	ldr	r3, [pc, #128]	; (800b0b4 <prvAddNewTaskToReadyList+0xd0>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	3301      	adds	r3, #1
 800b038:	4a1e      	ldr	r2, [pc, #120]	; (800b0b4 <prvAddNewTaskToReadyList+0xd0>)
 800b03a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b03c:	4b1d      	ldr	r3, [pc, #116]	; (800b0b4 <prvAddNewTaskToReadyList+0xd0>)
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b048:	4b1b      	ldr	r3, [pc, #108]	; (800b0b8 <prvAddNewTaskToReadyList+0xd4>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d903      	bls.n	800b058 <prvAddNewTaskToReadyList+0x74>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b054:	4a18      	ldr	r2, [pc, #96]	; (800b0b8 <prvAddNewTaskToReadyList+0xd4>)
 800b056:	6013      	str	r3, [r2, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05c:	4613      	mov	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4a15      	ldr	r2, [pc, #84]	; (800b0bc <prvAddNewTaskToReadyList+0xd8>)
 800b066:	441a      	add	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	3304      	adds	r3, #4
 800b06c:	4619      	mov	r1, r3
 800b06e:	4610      	mov	r0, r2
 800b070:	f7fe fe9d 	bl	8009dae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b074:	f001 fba0 	bl	800c7b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b078:	4b0d      	ldr	r3, [pc, #52]	; (800b0b0 <prvAddNewTaskToReadyList+0xcc>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00e      	beq.n	800b09e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b080:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <prvAddNewTaskToReadyList+0xc8>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d207      	bcs.n	800b09e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b08e:	4b0c      	ldr	r3, [pc, #48]	; (800b0c0 <prvAddNewTaskToReadyList+0xdc>)
 800b090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b09e:	bf00      	nop
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20000dc4 	.word	0x20000dc4
 800b0ac:	200008f0 	.word	0x200008f0
 800b0b0:	20000dd0 	.word	0x20000dd0
 800b0b4:	20000de0 	.word	0x20000de0
 800b0b8:	20000dcc 	.word	0x20000dcc
 800b0bc:	200008f4 	.word	0x200008f4
 800b0c0:	e000ed04 	.word	0xe000ed04

0800b0c4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08a      	sub	sp, #40	; 0x28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d109      	bne.n	800b0ec <vTaskDelayUntil+0x28>
 800b0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0dc:	f383 8811 	msr	BASEPRI, r3
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	617b      	str	r3, [r7, #20]
 800b0ea:	e7fe      	b.n	800b0ea <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d109      	bne.n	800b106 <vTaskDelayUntil+0x42>
 800b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	613b      	str	r3, [r7, #16]
 800b104:	e7fe      	b.n	800b104 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800b106:	4b29      	ldr	r3, [pc, #164]	; (800b1ac <vTaskDelayUntil+0xe8>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d009      	beq.n	800b122 <vTaskDelayUntil+0x5e>
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	60fb      	str	r3, [r7, #12]
 800b120:	e7fe      	b.n	800b120 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800b122:	f000 f8e1 	bl	800b2e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b126:	4b22      	ldr	r3, [pc, #136]	; (800b1b0 <vTaskDelayUntil+0xec>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	4413      	add	r3, r2
 800b134:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6a3a      	ldr	r2, [r7, #32]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d20b      	bcs.n	800b158 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	69fa      	ldr	r2, [r7, #28]
 800b146:	429a      	cmp	r2, r3
 800b148:	d211      	bcs.n	800b16e <vTaskDelayUntil+0xaa>
 800b14a:	69fa      	ldr	r2, [r7, #28]
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d90d      	bls.n	800b16e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800b152:	2301      	movs	r3, #1
 800b154:	627b      	str	r3, [r7, #36]	; 0x24
 800b156:	e00a      	b.n	800b16e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	69fa      	ldr	r2, [r7, #28]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d303      	bcc.n	800b16a <vTaskDelayUntil+0xa6>
 800b162:	69fa      	ldr	r2, [r7, #28]
 800b164:	6a3b      	ldr	r3, [r7, #32]
 800b166:	429a      	cmp	r2, r3
 800b168:	d901      	bls.n	800b16e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800b16a:	2301      	movs	r3, #1
 800b16c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	69fa      	ldr	r2, [r7, #28]
 800b172:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	2b00      	cmp	r3, #0
 800b178:	d006      	beq.n	800b188 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b17a:	69fa      	ldr	r2, [r7, #28]
 800b17c:	6a3b      	ldr	r3, [r7, #32]
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	2100      	movs	r1, #0
 800b182:	4618      	mov	r0, r3
 800b184:	f000 fe2a 	bl	800bddc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b188:	f000 f8bc 	bl	800b304 <xTaskResumeAll>
 800b18c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d107      	bne.n	800b1a4 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800b194:	4b07      	ldr	r3, [pc, #28]	; (800b1b4 <vTaskDelayUntil+0xf0>)
 800b196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b19a:	601a      	str	r2, [r3, #0]
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1a4:	bf00      	nop
 800b1a6:	3728      	adds	r7, #40	; 0x28
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	20000dec 	.word	0x20000dec
 800b1b0:	20000dc8 	.word	0x20000dc8
 800b1b4:	e000ed04 	.word	0xe000ed04

0800b1b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d016      	beq.n	800b1f8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b1ca:	4b13      	ldr	r3, [pc, #76]	; (800b218 <vTaskDelay+0x60>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d009      	beq.n	800b1e6 <vTaskDelay+0x2e>
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	60bb      	str	r3, [r7, #8]
 800b1e4:	e7fe      	b.n	800b1e4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b1e6:	f000 f87f 	bl	800b2e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fdf5 	bl	800bddc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1f2:	f000 f887 	bl	800b304 <xTaskResumeAll>
 800b1f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d107      	bne.n	800b20e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b1fe:	4b07      	ldr	r3, [pc, #28]	; (800b21c <vTaskDelay+0x64>)
 800b200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b204:	601a      	str	r2, [r3, #0]
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b20e:	bf00      	nop
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20000dec 	.word	0x20000dec
 800b21c:	e000ed04 	.word	0xe000ed04

0800b220 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b08a      	sub	sp, #40	; 0x28
 800b224:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b226:	2300      	movs	r3, #0
 800b228:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b22a:	2300      	movs	r3, #0
 800b22c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b22e:	463a      	mov	r2, r7
 800b230:	1d39      	adds	r1, r7, #4
 800b232:	f107 0308 	add.w	r3, r7, #8
 800b236:	4618      	mov	r0, r3
 800b238:	f7fe fd58 	bl	8009cec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	9202      	str	r2, [sp, #8]
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	2300      	movs	r3, #0
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	2300      	movs	r3, #0
 800b24c:	460a      	mov	r2, r1
 800b24e:	4920      	ldr	r1, [pc, #128]	; (800b2d0 <vTaskStartScheduler+0xb0>)
 800b250:	4820      	ldr	r0, [pc, #128]	; (800b2d4 <vTaskStartScheduler+0xb4>)
 800b252:	f7ff fd99 	bl	800ad88 <xTaskCreateStatic>
 800b256:	4602      	mov	r2, r0
 800b258:	4b1f      	ldr	r3, [pc, #124]	; (800b2d8 <vTaskStartScheduler+0xb8>)
 800b25a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b25c:	4b1e      	ldr	r3, [pc, #120]	; (800b2d8 <vTaskStartScheduler+0xb8>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b264:	2301      	movs	r3, #1
 800b266:	617b      	str	r3, [r7, #20]
 800b268:	e001      	b.n	800b26e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d102      	bne.n	800b27a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b274:	f000 fe06 	bl	800be84 <xTimerCreateTimerTask>
 800b278:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d115      	bne.n	800b2ac <vTaskStartScheduler+0x8c>
 800b280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b284:	f383 8811 	msr	BASEPRI, r3
 800b288:	f3bf 8f6f 	isb	sy
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b292:	4b12      	ldr	r3, [pc, #72]	; (800b2dc <vTaskStartScheduler+0xbc>)
 800b294:	f04f 32ff 	mov.w	r2, #4294967295
 800b298:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b29a:	4b11      	ldr	r3, [pc, #68]	; (800b2e0 <vTaskStartScheduler+0xc0>)
 800b29c:	2201      	movs	r2, #1
 800b29e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2a0:	4b10      	ldr	r3, [pc, #64]	; (800b2e4 <vTaskStartScheduler+0xc4>)
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2a6:	f001 f9bb 	bl	800c620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2aa:	e00d      	b.n	800b2c8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b2:	d109      	bne.n	800b2c8 <vTaskStartScheduler+0xa8>
 800b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	60fb      	str	r3, [r7, #12]
 800b2c6:	e7fe      	b.n	800b2c6 <vTaskStartScheduler+0xa6>
}
 800b2c8:	bf00      	nop
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	0800d99c 	.word	0x0800d99c
 800b2d4:	0800b90d 	.word	0x0800b90d
 800b2d8:	20000de8 	.word	0x20000de8
 800b2dc:	20000de4 	.word	0x20000de4
 800b2e0:	20000dd0 	.word	0x20000dd0
 800b2e4:	20000dc8 	.word	0x20000dc8

0800b2e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b2ec:	4b04      	ldr	r3, [pc, #16]	; (800b300 <vTaskSuspendAll+0x18>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	4a03      	ldr	r2, [pc, #12]	; (800b300 <vTaskSuspendAll+0x18>)
 800b2f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b2f6:	bf00      	nop
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr
 800b300:	20000dec 	.word	0x20000dec

0800b304 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b30e:	2300      	movs	r3, #0
 800b310:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b312:	4b41      	ldr	r3, [pc, #260]	; (800b418 <xTaskResumeAll+0x114>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d109      	bne.n	800b32e <xTaskResumeAll+0x2a>
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	603b      	str	r3, [r7, #0]
 800b32c:	e7fe      	b.n	800b32c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b32e:	f001 fa15 	bl	800c75c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b332:	4b39      	ldr	r3, [pc, #228]	; (800b418 <xTaskResumeAll+0x114>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3b01      	subs	r3, #1
 800b338:	4a37      	ldr	r2, [pc, #220]	; (800b418 <xTaskResumeAll+0x114>)
 800b33a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b33c:	4b36      	ldr	r3, [pc, #216]	; (800b418 <xTaskResumeAll+0x114>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d162      	bne.n	800b40a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b344:	4b35      	ldr	r3, [pc, #212]	; (800b41c <xTaskResumeAll+0x118>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d05e      	beq.n	800b40a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b34c:	e02f      	b.n	800b3ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b34e:	4b34      	ldr	r3, [pc, #208]	; (800b420 <xTaskResumeAll+0x11c>)
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	3318      	adds	r3, #24
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fd84 	bl	8009e68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	3304      	adds	r3, #4
 800b364:	4618      	mov	r0, r3
 800b366:	f7fe fd7f 	bl	8009e68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b36e:	4b2d      	ldr	r3, [pc, #180]	; (800b424 <xTaskResumeAll+0x120>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	429a      	cmp	r2, r3
 800b374:	d903      	bls.n	800b37e <xTaskResumeAll+0x7a>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37a:	4a2a      	ldr	r2, [pc, #168]	; (800b424 <xTaskResumeAll+0x120>)
 800b37c:	6013      	str	r3, [r2, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b382:	4613      	mov	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4413      	add	r3, r2
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4a27      	ldr	r2, [pc, #156]	; (800b428 <xTaskResumeAll+0x124>)
 800b38c:	441a      	add	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3304      	adds	r3, #4
 800b392:	4619      	mov	r1, r3
 800b394:	4610      	mov	r0, r2
 800b396:	f7fe fd0a 	bl	8009dae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39e:	4b23      	ldr	r3, [pc, #140]	; (800b42c <xTaskResumeAll+0x128>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d302      	bcc.n	800b3ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b3a8:	4b21      	ldr	r3, [pc, #132]	; (800b430 <xTaskResumeAll+0x12c>)
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3ae:	4b1c      	ldr	r3, [pc, #112]	; (800b420 <xTaskResumeAll+0x11c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1cb      	bne.n	800b34e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3bc:	f000 fb58 	bl	800ba70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b3c0:	4b1c      	ldr	r3, [pc, #112]	; (800b434 <xTaskResumeAll+0x130>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d010      	beq.n	800b3ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b3cc:	f000 f858 	bl	800b480 <xTaskIncrementTick>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b3d6:	4b16      	ldr	r3, [pc, #88]	; (800b430 <xTaskResumeAll+0x12c>)
 800b3d8:	2201      	movs	r2, #1
 800b3da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1f1      	bne.n	800b3cc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b3e8:	4b12      	ldr	r3, [pc, #72]	; (800b434 <xTaskResumeAll+0x130>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3ee:	4b10      	ldr	r3, [pc, #64]	; (800b430 <xTaskResumeAll+0x12c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d009      	beq.n	800b40a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3fa:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <xTaskResumeAll+0x134>)
 800b3fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b400:	601a      	str	r2, [r3, #0]
 800b402:	f3bf 8f4f 	dsb	sy
 800b406:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b40a:	f001 f9d5 	bl	800c7b8 <vPortExitCritical>

	return xAlreadyYielded;
 800b40e:	68bb      	ldr	r3, [r7, #8]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	20000dec 	.word	0x20000dec
 800b41c:	20000dc4 	.word	0x20000dc4
 800b420:	20000d84 	.word	0x20000d84
 800b424:	20000dcc 	.word	0x20000dcc
 800b428:	200008f4 	.word	0x200008f4
 800b42c:	200008f0 	.word	0x200008f0
 800b430:	20000dd8 	.word	0x20000dd8
 800b434:	20000dd4 	.word	0x20000dd4
 800b438:	e000ed04 	.word	0xe000ed04

0800b43c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b442:	4b05      	ldr	r3, [pc, #20]	; (800b458 <xTaskGetTickCount+0x1c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b448:	687b      	ldr	r3, [r7, #4]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	370c      	adds	r7, #12
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	20000dc8 	.word	0x20000dc8

0800b45c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b462:	f001 fa57 	bl	800c914 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b466:	2300      	movs	r3, #0
 800b468:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b46a:	4b04      	ldr	r3, [pc, #16]	; (800b47c <xTaskGetTickCountFromISR+0x20>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b470:	683b      	ldr	r3, [r7, #0]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	20000dc8 	.word	0x20000dc8

0800b480 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b486:	2300      	movs	r3, #0
 800b488:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b48a:	4b4e      	ldr	r3, [pc, #312]	; (800b5c4 <xTaskIncrementTick+0x144>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f040 8088 	bne.w	800b5a4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b494:	4b4c      	ldr	r3, [pc, #304]	; (800b5c8 <xTaskIncrementTick+0x148>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	3301      	adds	r3, #1
 800b49a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b49c:	4a4a      	ldr	r2, [pc, #296]	; (800b5c8 <xTaskIncrementTick+0x148>)
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d11f      	bne.n	800b4e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b4a8:	4b48      	ldr	r3, [pc, #288]	; (800b5cc <xTaskIncrementTick+0x14c>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d009      	beq.n	800b4c6 <xTaskIncrementTick+0x46>
 800b4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	603b      	str	r3, [r7, #0]
 800b4c4:	e7fe      	b.n	800b4c4 <xTaskIncrementTick+0x44>
 800b4c6:	4b41      	ldr	r3, [pc, #260]	; (800b5cc <xTaskIncrementTick+0x14c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	4b40      	ldr	r3, [pc, #256]	; (800b5d0 <xTaskIncrementTick+0x150>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a3e      	ldr	r2, [pc, #248]	; (800b5cc <xTaskIncrementTick+0x14c>)
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	4a3e      	ldr	r2, [pc, #248]	; (800b5d0 <xTaskIncrementTick+0x150>)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6013      	str	r3, [r2, #0]
 800b4da:	4b3e      	ldr	r3, [pc, #248]	; (800b5d4 <xTaskIncrementTick+0x154>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	4a3c      	ldr	r2, [pc, #240]	; (800b5d4 <xTaskIncrementTick+0x154>)
 800b4e2:	6013      	str	r3, [r2, #0]
 800b4e4:	f000 fac4 	bl	800ba70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b4e8:	4b3b      	ldr	r3, [pc, #236]	; (800b5d8 <xTaskIncrementTick+0x158>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d349      	bcc.n	800b586 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4f2:	4b36      	ldr	r3, [pc, #216]	; (800b5cc <xTaskIncrementTick+0x14c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d104      	bne.n	800b506 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4fc:	4b36      	ldr	r3, [pc, #216]	; (800b5d8 <xTaskIncrementTick+0x158>)
 800b4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b502:	601a      	str	r2, [r3, #0]
					break;
 800b504:	e03f      	b.n	800b586 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b506:	4b31      	ldr	r3, [pc, #196]	; (800b5cc <xTaskIncrementTick+0x14c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d203      	bcs.n	800b526 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b51e:	4a2e      	ldr	r2, [pc, #184]	; (800b5d8 <xTaskIncrementTick+0x158>)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b524:	e02f      	b.n	800b586 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	3304      	adds	r3, #4
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fe fc9c 	bl	8009e68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b534:	2b00      	cmp	r3, #0
 800b536:	d004      	beq.n	800b542 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	3318      	adds	r3, #24
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fe fc93 	bl	8009e68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b546:	4b25      	ldr	r3, [pc, #148]	; (800b5dc <xTaskIncrementTick+0x15c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d903      	bls.n	800b556 <xTaskIncrementTick+0xd6>
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b552:	4a22      	ldr	r2, [pc, #136]	; (800b5dc <xTaskIncrementTick+0x15c>)
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55a:	4613      	mov	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4a1f      	ldr	r2, [pc, #124]	; (800b5e0 <xTaskIncrementTick+0x160>)
 800b564:	441a      	add	r2, r3
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	3304      	adds	r3, #4
 800b56a:	4619      	mov	r1, r3
 800b56c:	4610      	mov	r0, r2
 800b56e:	f7fe fc1e 	bl	8009dae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b576:	4b1b      	ldr	r3, [pc, #108]	; (800b5e4 <xTaskIncrementTick+0x164>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d3b8      	bcc.n	800b4f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b580:	2301      	movs	r3, #1
 800b582:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b584:	e7b5      	b.n	800b4f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b586:	4b17      	ldr	r3, [pc, #92]	; (800b5e4 <xTaskIncrementTick+0x164>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b58c:	4914      	ldr	r1, [pc, #80]	; (800b5e0 <xTaskIncrementTick+0x160>)
 800b58e:	4613      	mov	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	4413      	add	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	440b      	add	r3, r1
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d907      	bls.n	800b5ae <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	617b      	str	r3, [r7, #20]
 800b5a2:	e004      	b.n	800b5ae <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b5a4:	4b10      	ldr	r3, [pc, #64]	; (800b5e8 <xTaskIncrementTick+0x168>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	4a0f      	ldr	r2, [pc, #60]	; (800b5e8 <xTaskIncrementTick+0x168>)
 800b5ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b5ae:	4b0f      	ldr	r3, [pc, #60]	; (800b5ec <xTaskIncrementTick+0x16c>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d001      	beq.n	800b5ba <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b5ba:	697b      	ldr	r3, [r7, #20]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3718      	adds	r7, #24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	20000dec 	.word	0x20000dec
 800b5c8:	20000dc8 	.word	0x20000dc8
 800b5cc:	20000d7c 	.word	0x20000d7c
 800b5d0:	20000d80 	.word	0x20000d80
 800b5d4:	20000ddc 	.word	0x20000ddc
 800b5d8:	20000de4 	.word	0x20000de4
 800b5dc:	20000dcc 	.word	0x20000dcc
 800b5e0:	200008f4 	.word	0x200008f4
 800b5e4:	200008f0 	.word	0x200008f0
 800b5e8:	20000dd4 	.word	0x20000dd4
 800b5ec:	20000dd8 	.word	0x20000dd8

0800b5f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b5f6:	4b27      	ldr	r3, [pc, #156]	; (800b694 <vTaskSwitchContext+0xa4>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d003      	beq.n	800b606 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b5fe:	4b26      	ldr	r3, [pc, #152]	; (800b698 <vTaskSwitchContext+0xa8>)
 800b600:	2201      	movs	r2, #1
 800b602:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b604:	e040      	b.n	800b688 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b606:	4b24      	ldr	r3, [pc, #144]	; (800b698 <vTaskSwitchContext+0xa8>)
 800b608:	2200      	movs	r2, #0
 800b60a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b60c:	4b23      	ldr	r3, [pc, #140]	; (800b69c <vTaskSwitchContext+0xac>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	60fb      	str	r3, [r7, #12]
 800b612:	e00f      	b.n	800b634 <vTaskSwitchContext+0x44>
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d109      	bne.n	800b62e <vTaskSwitchContext+0x3e>
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	607b      	str	r3, [r7, #4]
 800b62c:	e7fe      	b.n	800b62c <vTaskSwitchContext+0x3c>
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3b01      	subs	r3, #1
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	491a      	ldr	r1, [pc, #104]	; (800b6a0 <vTaskSwitchContext+0xb0>)
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	4613      	mov	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4413      	add	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	440b      	add	r3, r1
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d0e5      	beq.n	800b614 <vTaskSwitchContext+0x24>
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	4613      	mov	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4413      	add	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4a13      	ldr	r2, [pc, #76]	; (800b6a0 <vTaskSwitchContext+0xb0>)
 800b654:	4413      	add	r3, r2
 800b656:	60bb      	str	r3, [r7, #8]
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	605a      	str	r2, [r3, #4]
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	3308      	adds	r3, #8
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d104      	bne.n	800b678 <vTaskSwitchContext+0x88>
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	605a      	str	r2, [r3, #4]
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	4a09      	ldr	r2, [pc, #36]	; (800b6a4 <vTaskSwitchContext+0xb4>)
 800b680:	6013      	str	r3, [r2, #0]
 800b682:	4a06      	ldr	r2, [pc, #24]	; (800b69c <vTaskSwitchContext+0xac>)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6013      	str	r3, [r2, #0]
}
 800b688:	bf00      	nop
 800b68a:	3714      	adds	r7, #20
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	20000dec 	.word	0x20000dec
 800b698:	20000dd8 	.word	0x20000dd8
 800b69c:	20000dcc 	.word	0x20000dcc
 800b6a0:	200008f4 	.word	0x200008f4
 800b6a4:	200008f0 	.word	0x200008f0

0800b6a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d109      	bne.n	800b6cc <vTaskPlaceOnEventList+0x24>
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	60fb      	str	r3, [r7, #12]
 800b6ca:	e7fe      	b.n	800b6ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6cc:	4b07      	ldr	r3, [pc, #28]	; (800b6ec <vTaskPlaceOnEventList+0x44>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	3318      	adds	r3, #24
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7fe fb8e 	bl	8009df6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b6da:	2101      	movs	r1, #1
 800b6dc:	6838      	ldr	r0, [r7, #0]
 800b6de:	f000 fb7d 	bl	800bddc <prvAddCurrentTaskToDelayedList>
}
 800b6e2:	bf00      	nop
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	200008f0 	.word	0x200008f0

0800b6f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d109      	bne.n	800b716 <vTaskPlaceOnEventListRestricted+0x26>
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	617b      	str	r3, [r7, #20]
 800b714:	e7fe      	b.n	800b714 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b716:	4b0a      	ldr	r3, [pc, #40]	; (800b740 <vTaskPlaceOnEventListRestricted+0x50>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3318      	adds	r3, #24
 800b71c:	4619      	mov	r1, r3
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f7fe fb45 	bl	8009dae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d002      	beq.n	800b730 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800b72a:	f04f 33ff 	mov.w	r3, #4294967295
 800b72e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b730:	6879      	ldr	r1, [r7, #4]
 800b732:	68b8      	ldr	r0, [r7, #8]
 800b734:	f000 fb52 	bl	800bddc <prvAddCurrentTaskToDelayedList>
	}
 800b738:	bf00      	nop
 800b73a:	3718      	adds	r7, #24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	200008f0 	.word	0x200008f0

0800b744 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b086      	sub	sp, #24
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d109      	bne.n	800b76e <xTaskRemoveFromEventList+0x2a>
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	e7fe      	b.n	800b76c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	3318      	adds	r3, #24
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe fb78 	bl	8009e68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b778:	4b1d      	ldr	r3, [pc, #116]	; (800b7f0 <xTaskRemoveFromEventList+0xac>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d11d      	bne.n	800b7bc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	3304      	adds	r3, #4
 800b784:	4618      	mov	r0, r3
 800b786:	f7fe fb6f 	bl	8009e68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78e:	4b19      	ldr	r3, [pc, #100]	; (800b7f4 <xTaskRemoveFromEventList+0xb0>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	429a      	cmp	r2, r3
 800b794:	d903      	bls.n	800b79e <xTaskRemoveFromEventList+0x5a>
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79a:	4a16      	ldr	r2, [pc, #88]	; (800b7f4 <xTaskRemoveFromEventList+0xb0>)
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	4a13      	ldr	r2, [pc, #76]	; (800b7f8 <xTaskRemoveFromEventList+0xb4>)
 800b7ac:	441a      	add	r2, r3
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	4610      	mov	r0, r2
 800b7b6:	f7fe fafa 	bl	8009dae <vListInsertEnd>
 800b7ba:	e005      	b.n	800b7c8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	3318      	adds	r3, #24
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	480e      	ldr	r0, [pc, #56]	; (800b7fc <xTaskRemoveFromEventList+0xb8>)
 800b7c4:	f7fe faf3 	bl	8009dae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7cc:	4b0c      	ldr	r3, [pc, #48]	; (800b800 <xTaskRemoveFromEventList+0xbc>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d905      	bls.n	800b7e2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b7da:	4b0a      	ldr	r3, [pc, #40]	; (800b804 <xTaskRemoveFromEventList+0xc0>)
 800b7dc:	2201      	movs	r2, #1
 800b7de:	601a      	str	r2, [r3, #0]
 800b7e0:	e001      	b.n	800b7e6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b7e6:	697b      	ldr	r3, [r7, #20]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3718      	adds	r7, #24
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	20000dec 	.word	0x20000dec
 800b7f4:	20000dcc 	.word	0x20000dcc
 800b7f8:	200008f4 	.word	0x200008f4
 800b7fc:	20000d84 	.word	0x20000d84
 800b800:	200008f0 	.word	0x200008f0
 800b804:	20000dd8 	.word	0x20000dd8

0800b808 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b810:	4b06      	ldr	r3, [pc, #24]	; (800b82c <vTaskInternalSetTimeOutState+0x24>)
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b818:	4b05      	ldr	r3, [pc, #20]	; (800b830 <vTaskInternalSetTimeOutState+0x28>)
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	605a      	str	r2, [r3, #4]
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	20000ddc 	.word	0x20000ddc
 800b830:	20000dc8 	.word	0x20000dc8

0800b834 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b088      	sub	sp, #32
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d109      	bne.n	800b858 <xTaskCheckForTimeOut+0x24>
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	613b      	str	r3, [r7, #16]
 800b856:	e7fe      	b.n	800b856 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d109      	bne.n	800b872 <xTaskCheckForTimeOut+0x3e>
 800b85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	60fb      	str	r3, [r7, #12]
 800b870:	e7fe      	b.n	800b870 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b872:	f000 ff73 	bl	800c75c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b876:	4b1d      	ldr	r3, [pc, #116]	; (800b8ec <xTaskCheckForTimeOut+0xb8>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	69ba      	ldr	r2, [r7, #24]
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b88e:	d102      	bne.n	800b896 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b890:	2300      	movs	r3, #0
 800b892:	61fb      	str	r3, [r7, #28]
 800b894:	e023      	b.n	800b8de <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	4b15      	ldr	r3, [pc, #84]	; (800b8f0 <xTaskCheckForTimeOut+0xbc>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d007      	beq.n	800b8b2 <xTaskCheckForTimeOut+0x7e>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	69ba      	ldr	r2, [r7, #24]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d302      	bcc.n	800b8b2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	61fb      	str	r3, [r7, #28]
 800b8b0:	e015      	b.n	800b8de <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d20b      	bcs.n	800b8d4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	1ad2      	subs	r2, r2, r3
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f7ff ff9d 	bl	800b808 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	61fb      	str	r3, [r7, #28]
 800b8d2:	e004      	b.n	800b8de <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b8de:	f000 ff6b 	bl	800c7b8 <vPortExitCritical>

	return xReturn;
 800b8e2:	69fb      	ldr	r3, [r7, #28]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3720      	adds	r7, #32
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	20000dc8 	.word	0x20000dc8
 800b8f0:	20000ddc 	.word	0x20000ddc

0800b8f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b8f8:	4b03      	ldr	r3, [pc, #12]	; (800b908 <vTaskMissedYield+0x14>)
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	601a      	str	r2, [r3, #0]
}
 800b8fe:	bf00      	nop
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	20000dd8 	.word	0x20000dd8

0800b90c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b914:	f000 f852 	bl	800b9bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b918:	4b06      	ldr	r3, [pc, #24]	; (800b934 <prvIdleTask+0x28>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d9f9      	bls.n	800b914 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b920:	4b05      	ldr	r3, [pc, #20]	; (800b938 <prvIdleTask+0x2c>)
 800b922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b926:	601a      	str	r2, [r3, #0]
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b930:	e7f0      	b.n	800b914 <prvIdleTask+0x8>
 800b932:	bf00      	nop
 800b934:	200008f4 	.word	0x200008f4
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b942:	2300      	movs	r3, #0
 800b944:	607b      	str	r3, [r7, #4]
 800b946:	e00c      	b.n	800b962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	4613      	mov	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	4413      	add	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4a12      	ldr	r2, [pc, #72]	; (800b99c <prvInitialiseTaskLists+0x60>)
 800b954:	4413      	add	r3, r2
 800b956:	4618      	mov	r0, r3
 800b958:	f7fe f9fc 	bl	8009d54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3301      	adds	r3, #1
 800b960:	607b      	str	r3, [r7, #4]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b37      	cmp	r3, #55	; 0x37
 800b966:	d9ef      	bls.n	800b948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b968:	480d      	ldr	r0, [pc, #52]	; (800b9a0 <prvInitialiseTaskLists+0x64>)
 800b96a:	f7fe f9f3 	bl	8009d54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b96e:	480d      	ldr	r0, [pc, #52]	; (800b9a4 <prvInitialiseTaskLists+0x68>)
 800b970:	f7fe f9f0 	bl	8009d54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b974:	480c      	ldr	r0, [pc, #48]	; (800b9a8 <prvInitialiseTaskLists+0x6c>)
 800b976:	f7fe f9ed 	bl	8009d54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b97a:	480c      	ldr	r0, [pc, #48]	; (800b9ac <prvInitialiseTaskLists+0x70>)
 800b97c:	f7fe f9ea 	bl	8009d54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b980:	480b      	ldr	r0, [pc, #44]	; (800b9b0 <prvInitialiseTaskLists+0x74>)
 800b982:	f7fe f9e7 	bl	8009d54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b986:	4b0b      	ldr	r3, [pc, #44]	; (800b9b4 <prvInitialiseTaskLists+0x78>)
 800b988:	4a05      	ldr	r2, [pc, #20]	; (800b9a0 <prvInitialiseTaskLists+0x64>)
 800b98a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b98c:	4b0a      	ldr	r3, [pc, #40]	; (800b9b8 <prvInitialiseTaskLists+0x7c>)
 800b98e:	4a05      	ldr	r2, [pc, #20]	; (800b9a4 <prvInitialiseTaskLists+0x68>)
 800b990:	601a      	str	r2, [r3, #0]
}
 800b992:	bf00      	nop
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	200008f4 	.word	0x200008f4
 800b9a0:	20000d54 	.word	0x20000d54
 800b9a4:	20000d68 	.word	0x20000d68
 800b9a8:	20000d84 	.word	0x20000d84
 800b9ac:	20000d98 	.word	0x20000d98
 800b9b0:	20000db0 	.word	0x20000db0
 800b9b4:	20000d7c 	.word	0x20000d7c
 800b9b8:	20000d80 	.word	0x20000d80

0800b9bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9c2:	e019      	b.n	800b9f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b9c4:	f000 feca 	bl	800c75c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ba08 <prvCheckTasksWaitingTermination+0x4c>)
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe fa47 	bl	8009e68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b9da:	4b0c      	ldr	r3, [pc, #48]	; (800ba0c <prvCheckTasksWaitingTermination+0x50>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	4a0a      	ldr	r2, [pc, #40]	; (800ba0c <prvCheckTasksWaitingTermination+0x50>)
 800b9e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b9e4:	4b0a      	ldr	r3, [pc, #40]	; (800ba10 <prvCheckTasksWaitingTermination+0x54>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	4a09      	ldr	r2, [pc, #36]	; (800ba10 <prvCheckTasksWaitingTermination+0x54>)
 800b9ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b9ee:	f000 fee3 	bl	800c7b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f80e 	bl	800ba14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9f8:	4b05      	ldr	r3, [pc, #20]	; (800ba10 <prvCheckTasksWaitingTermination+0x54>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d1e1      	bne.n	800b9c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba00:	bf00      	nop
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	20000d98 	.word	0x20000d98
 800ba0c:	20000dc4 	.word	0x20000dc4
 800ba10:	20000dac 	.word	0x20000dac

0800ba14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d108      	bne.n	800ba38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f001 f872 	bl	800cb14 <vPortFree>
				vPortFree( pxTCB );
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f001 f86f 	bl	800cb14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba36:	e017      	b.n	800ba68 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d103      	bne.n	800ba4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f001 f866 	bl	800cb14 <vPortFree>
	}
 800ba48:	e00e      	b.n	800ba68 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d009      	beq.n	800ba68 <prvDeleteTCB+0x54>
 800ba54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba58:	f383 8811 	msr	BASEPRI, r3
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	60fb      	str	r3, [r7, #12]
 800ba66:	e7fe      	b.n	800ba66 <prvDeleteTCB+0x52>
	}
 800ba68:	bf00      	nop
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba76:	4b0c      	ldr	r3, [pc, #48]	; (800baa8 <prvResetNextTaskUnblockTime+0x38>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d104      	bne.n	800ba8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba80:	4b0a      	ldr	r3, [pc, #40]	; (800baac <prvResetNextTaskUnblockTime+0x3c>)
 800ba82:	f04f 32ff 	mov.w	r2, #4294967295
 800ba86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba88:	e008      	b.n	800ba9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba8a:	4b07      	ldr	r3, [pc, #28]	; (800baa8 <prvResetNextTaskUnblockTime+0x38>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	4a04      	ldr	r2, [pc, #16]	; (800baac <prvResetNextTaskUnblockTime+0x3c>)
 800ba9a:	6013      	str	r3, [r2, #0]
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	20000d7c 	.word	0x20000d7c
 800baac:	20000de4 	.word	0x20000de4

0800bab0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bab6:	4b05      	ldr	r3, [pc, #20]	; (800bacc <xTaskGetCurrentTaskHandle+0x1c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	607b      	str	r3, [r7, #4]

		return xReturn;
 800babc:	687b      	ldr	r3, [r7, #4]
	}
 800babe:	4618      	mov	r0, r3
 800bac0:	370c      	adds	r7, #12
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	200008f0 	.word	0x200008f0

0800bad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bad6:	4b0b      	ldr	r3, [pc, #44]	; (800bb04 <xTaskGetSchedulerState+0x34>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d102      	bne.n	800bae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bade:	2301      	movs	r3, #1
 800bae0:	607b      	str	r3, [r7, #4]
 800bae2:	e008      	b.n	800baf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bae4:	4b08      	ldr	r3, [pc, #32]	; (800bb08 <xTaskGetSchedulerState+0x38>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d102      	bne.n	800baf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800baec:	2302      	movs	r3, #2
 800baee:	607b      	str	r3, [r7, #4]
 800baf0:	e001      	b.n	800baf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800baf2:	2300      	movs	r3, #0
 800baf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800baf6:	687b      	ldr	r3, [r7, #4]
	}
 800baf8:	4618      	mov	r0, r3
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr
 800bb04:	20000dd0 	.word	0x20000dd0
 800bb08:	20000dec 	.word	0x20000dec

0800bb0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d051      	beq.n	800bbc6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb26:	4b2a      	ldr	r3, [pc, #168]	; (800bbd0 <xTaskPriorityInherit+0xc4>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d241      	bcs.n	800bbb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	db06      	blt.n	800bb46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb38:	4b25      	ldr	r3, [pc, #148]	; (800bbd0 <xTaskPriorityInherit+0xc4>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	6959      	ldr	r1, [r3, #20]
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4e:	4613      	mov	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4a1f      	ldr	r2, [pc, #124]	; (800bbd4 <xTaskPriorityInherit+0xc8>)
 800bb58:	4413      	add	r3, r2
 800bb5a:	4299      	cmp	r1, r3
 800bb5c:	d122      	bne.n	800bba4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	3304      	adds	r3, #4
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fe f980 	bl	8009e68 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb68:	4b19      	ldr	r3, [pc, #100]	; (800bbd0 <xTaskPriorityInherit+0xc4>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb76:	4b18      	ldr	r3, [pc, #96]	; (800bbd8 <xTaskPriorityInherit+0xcc>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d903      	bls.n	800bb86 <xTaskPriorityInherit+0x7a>
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb82:	4a15      	ldr	r2, [pc, #84]	; (800bbd8 <xTaskPriorityInherit+0xcc>)
 800bb84:	6013      	str	r3, [r2, #0]
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4413      	add	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4a10      	ldr	r2, [pc, #64]	; (800bbd4 <xTaskPriorityInherit+0xc8>)
 800bb94:	441a      	add	r2, r3
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	f7fe f906 	bl	8009dae <vListInsertEnd>
 800bba2:	e004      	b.n	800bbae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bba4:	4b0a      	ldr	r3, [pc, #40]	; (800bbd0 <xTaskPriorityInherit+0xc4>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	e008      	b.n	800bbc6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbb8:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <xTaskPriorityInherit+0xc4>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d201      	bcs.n	800bbc6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
	}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	200008f0 	.word	0x200008f0
 800bbd4:	200008f4 	.word	0x200008f4
 800bbd8:	20000dcc 	.word	0x20000dcc

0800bbdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d054      	beq.n	800bc9c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbf2:	4b2d      	ldr	r3, [pc, #180]	; (800bca8 <xTaskPriorityDisinherit+0xcc>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d009      	beq.n	800bc10 <xTaskPriorityDisinherit+0x34>
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	60fb      	str	r3, [r7, #12]
 800bc0e:	e7fe      	b.n	800bc0e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d109      	bne.n	800bc2c <xTaskPriorityDisinherit+0x50>
 800bc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	60bb      	str	r3, [r7, #8]
 800bc2a:	e7fe      	b.n	800bc2a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc30:	1e5a      	subs	r2, r3, #1
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d02c      	beq.n	800bc9c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d128      	bne.n	800bc9c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fe f90a 	bl	8009e68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc6c:	4b0f      	ldr	r3, [pc, #60]	; (800bcac <xTaskPriorityDisinherit+0xd0>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d903      	bls.n	800bc7c <xTaskPriorityDisinherit+0xa0>
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc78:	4a0c      	ldr	r2, [pc, #48]	; (800bcac <xTaskPriorityDisinherit+0xd0>)
 800bc7a:	6013      	str	r3, [r2, #0]
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc80:	4613      	mov	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4a09      	ldr	r2, [pc, #36]	; (800bcb0 <xTaskPriorityDisinherit+0xd4>)
 800bc8a:	441a      	add	r2, r3
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	3304      	adds	r3, #4
 800bc90:	4619      	mov	r1, r3
 800bc92:	4610      	mov	r0, r2
 800bc94:	f7fe f88b 	bl	8009dae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc9c:	697b      	ldr	r3, [r7, #20]
	}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	200008f0 	.word	0x200008f0
 800bcac:	20000dcc 	.word	0x20000dcc
 800bcb0:	200008f4 	.word	0x200008f4

0800bcb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b088      	sub	sp, #32
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d068      	beq.n	800bd9e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d109      	bne.n	800bce8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	60fb      	str	r3, [r7, #12]
 800bce6:	e7fe      	b.n	800bce6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d902      	bls.n	800bcf8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	61fb      	str	r3, [r7, #28]
 800bcf6:	e002      	b.n	800bcfe <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcfc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd02:	69fa      	ldr	r2, [r7, #28]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d04a      	beq.n	800bd9e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d145      	bne.n	800bd9e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bd12:	4b25      	ldr	r3, [pc, #148]	; (800bda8 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	69ba      	ldr	r2, [r7, #24]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d109      	bne.n	800bd30 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800bd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	60bb      	str	r3, [r7, #8]
 800bd2e:	e7fe      	b.n	800bd2e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd34:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	69fa      	ldr	r2, [r7, #28]
 800bd3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	699b      	ldr	r3, [r3, #24]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	db04      	blt.n	800bd4e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	6959      	ldr	r1, [r3, #20]
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	4613      	mov	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	4413      	add	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4a13      	ldr	r2, [pc, #76]	; (800bdac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bd5e:	4413      	add	r3, r2
 800bd60:	4299      	cmp	r1, r3
 800bd62:	d11c      	bne.n	800bd9e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	3304      	adds	r3, #4
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7fe f87d 	bl	8009e68 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd72:	4b0f      	ldr	r3, [pc, #60]	; (800bdb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d903      	bls.n	800bd82 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7e:	4a0c      	ldr	r2, [pc, #48]	; (800bdb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bd80:	6013      	str	r3, [r2, #0]
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd86:	4613      	mov	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4a07      	ldr	r2, [pc, #28]	; (800bdac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bd90:	441a      	add	r2, r3
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	3304      	adds	r3, #4
 800bd96:	4619      	mov	r1, r3
 800bd98:	4610      	mov	r0, r2
 800bd9a:	f7fe f808 	bl	8009dae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd9e:	bf00      	nop
 800bda0:	3720      	adds	r7, #32
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	200008f0 	.word	0x200008f0
 800bdac:	200008f4 	.word	0x200008f4
 800bdb0:	20000dcc 	.word	0x20000dcc

0800bdb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bdb4:	b480      	push	{r7}
 800bdb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bdb8:	4b07      	ldr	r3, [pc, #28]	; (800bdd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d004      	beq.n	800bdca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bdc0:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bdc6:	3201      	adds	r2, #1
 800bdc8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bdca:	4b03      	ldr	r3, [pc, #12]	; (800bdd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
	}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr
 800bdd8:	200008f0 	.word	0x200008f0

0800bddc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bde6:	4b21      	ldr	r3, [pc, #132]	; (800be6c <prvAddCurrentTaskToDelayedList+0x90>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdec:	4b20      	ldr	r3, [pc, #128]	; (800be70 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fe f838 	bl	8009e68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfe:	d10a      	bne.n	800be16 <prvAddCurrentTaskToDelayedList+0x3a>
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d007      	beq.n	800be16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be06:	4b1a      	ldr	r3, [pc, #104]	; (800be70 <prvAddCurrentTaskToDelayedList+0x94>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3304      	adds	r3, #4
 800be0c:	4619      	mov	r1, r3
 800be0e:	4819      	ldr	r0, [pc, #100]	; (800be74 <prvAddCurrentTaskToDelayedList+0x98>)
 800be10:	f7fd ffcd 	bl	8009dae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be14:	e026      	b.n	800be64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4413      	add	r3, r2
 800be1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be1e:	4b14      	ldr	r3, [pc, #80]	; (800be70 <prvAddCurrentTaskToDelayedList+0x94>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be26:	68ba      	ldr	r2, [r7, #8]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d209      	bcs.n	800be42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be2e:	4b12      	ldr	r3, [pc, #72]	; (800be78 <prvAddCurrentTaskToDelayedList+0x9c>)
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <prvAddCurrentTaskToDelayedList+0x94>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	3304      	adds	r3, #4
 800be38:	4619      	mov	r1, r3
 800be3a:	4610      	mov	r0, r2
 800be3c:	f7fd ffdb 	bl	8009df6 <vListInsert>
}
 800be40:	e010      	b.n	800be64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be42:	4b0e      	ldr	r3, [pc, #56]	; (800be7c <prvAddCurrentTaskToDelayedList+0xa0>)
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <prvAddCurrentTaskToDelayedList+0x94>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	3304      	adds	r3, #4
 800be4c:	4619      	mov	r1, r3
 800be4e:	4610      	mov	r0, r2
 800be50:	f7fd ffd1 	bl	8009df6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be54:	4b0a      	ldr	r3, [pc, #40]	; (800be80 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68ba      	ldr	r2, [r7, #8]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d202      	bcs.n	800be64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be5e:	4a08      	ldr	r2, [pc, #32]	; (800be80 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	6013      	str	r3, [r2, #0]
}
 800be64:	bf00      	nop
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	20000dc8 	.word	0x20000dc8
 800be70:	200008f0 	.word	0x200008f0
 800be74:	20000db0 	.word	0x20000db0
 800be78:	20000d80 	.word	0x20000d80
 800be7c:	20000d7c 	.word	0x20000d7c
 800be80:	20000de4 	.word	0x20000de4

0800be84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b08a      	sub	sp, #40	; 0x28
 800be88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be8a:	2300      	movs	r3, #0
 800be8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be8e:	f000 faff 	bl	800c490 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be92:	4b1c      	ldr	r3, [pc, #112]	; (800bf04 <xTimerCreateTimerTask+0x80>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d021      	beq.n	800bede <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be9a:	2300      	movs	r3, #0
 800be9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be9e:	2300      	movs	r3, #0
 800bea0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bea2:	1d3a      	adds	r2, r7, #4
 800bea4:	f107 0108 	add.w	r1, r7, #8
 800bea8:	f107 030c 	add.w	r3, r7, #12
 800beac:	4618      	mov	r0, r3
 800beae:	f7fd ff37 	bl	8009d20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800beb2:	6879      	ldr	r1, [r7, #4]
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	9202      	str	r2, [sp, #8]
 800beba:	9301      	str	r3, [sp, #4]
 800bebc:	2302      	movs	r3, #2
 800bebe:	9300      	str	r3, [sp, #0]
 800bec0:	2300      	movs	r3, #0
 800bec2:	460a      	mov	r2, r1
 800bec4:	4910      	ldr	r1, [pc, #64]	; (800bf08 <xTimerCreateTimerTask+0x84>)
 800bec6:	4811      	ldr	r0, [pc, #68]	; (800bf0c <xTimerCreateTimerTask+0x88>)
 800bec8:	f7fe ff5e 	bl	800ad88 <xTaskCreateStatic>
 800becc:	4602      	mov	r2, r0
 800bece:	4b10      	ldr	r3, [pc, #64]	; (800bf10 <xTimerCreateTimerTask+0x8c>)
 800bed0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bed2:	4b0f      	ldr	r3, [pc, #60]	; (800bf10 <xTimerCreateTimerTask+0x8c>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800beda:	2301      	movs	r3, #1
 800bedc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d109      	bne.n	800bef8 <xTimerCreateTimerTask+0x74>
 800bee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	613b      	str	r3, [r7, #16]
 800bef6:	e7fe      	b.n	800bef6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800bef8:	697b      	ldr	r3, [r7, #20]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3718      	adds	r7, #24
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	20000e20 	.word	0x20000e20
 800bf08:	0800d9a4 	.word	0x0800d9a4
 800bf0c:	0800c045 	.word	0x0800c045
 800bf10:	20000e24 	.word	0x20000e24

0800bf14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b08a      	sub	sp, #40	; 0x28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
 800bf20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d109      	bne.n	800bf40 <xTimerGenericCommand+0x2c>
 800bf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf30:	f383 8811 	msr	BASEPRI, r3
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	623b      	str	r3, [r7, #32]
 800bf3e:	e7fe      	b.n	800bf3e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bf40:	4b19      	ldr	r3, [pc, #100]	; (800bfa8 <xTimerGenericCommand+0x94>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d02a      	beq.n	800bf9e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2b05      	cmp	r3, #5
 800bf58:	dc18      	bgt.n	800bf8c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf5a:	f7ff fdb9 	bl	800bad0 <xTaskGetSchedulerState>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d109      	bne.n	800bf78 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf64:	4b10      	ldr	r3, [pc, #64]	; (800bfa8 <xTimerGenericCommand+0x94>)
 800bf66:	6818      	ldr	r0, [r3, #0]
 800bf68:	f107 0110 	add.w	r1, r7, #16
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf70:	f7fe f996 	bl	800a2a0 <xQueueGenericSend>
 800bf74:	6278      	str	r0, [r7, #36]	; 0x24
 800bf76:	e012      	b.n	800bf9e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf78:	4b0b      	ldr	r3, [pc, #44]	; (800bfa8 <xTimerGenericCommand+0x94>)
 800bf7a:	6818      	ldr	r0, [r3, #0]
 800bf7c:	f107 0110 	add.w	r1, r7, #16
 800bf80:	2300      	movs	r3, #0
 800bf82:	2200      	movs	r2, #0
 800bf84:	f7fe f98c 	bl	800a2a0 <xQueueGenericSend>
 800bf88:	6278      	str	r0, [r7, #36]	; 0x24
 800bf8a:	e008      	b.n	800bf9e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf8c:	4b06      	ldr	r3, [pc, #24]	; (800bfa8 <xTimerGenericCommand+0x94>)
 800bf8e:	6818      	ldr	r0, [r3, #0]
 800bf90:	f107 0110 	add.w	r1, r7, #16
 800bf94:	2300      	movs	r3, #0
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	f7fe fa7c 	bl	800a494 <xQueueGenericSendFromISR>
 800bf9c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3728      	adds	r7, #40	; 0x28
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	20000e20 	.word	0x20000e20

0800bfac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b088      	sub	sp, #32
 800bfb0:	af02      	add	r7, sp, #8
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfb6:	4b22      	ldr	r3, [pc, #136]	; (800c040 <prvProcessExpiredTimer+0x94>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fd ff4f 	bl	8009e68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfd0:	f003 0304 	and.w	r3, r3, #4
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d021      	beq.n	800c01c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	699a      	ldr	r2, [r3, #24]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	18d1      	adds	r1, r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	6978      	ldr	r0, [r7, #20]
 800bfe6:	f000 f8d1 	bl	800c18c <prvInsertTimerInActiveList>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d01e      	beq.n	800c02e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bff0:	2300      	movs	r3, #0
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	2300      	movs	r3, #0
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	2100      	movs	r1, #0
 800bffa:	6978      	ldr	r0, [r7, #20]
 800bffc:	f7ff ff8a 	bl	800bf14 <xTimerGenericCommand>
 800c000:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d112      	bne.n	800c02e <prvProcessExpiredTimer+0x82>
 800c008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	60fb      	str	r3, [r7, #12]
 800c01a:	e7fe      	b.n	800c01a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c022:	f023 0301 	bic.w	r3, r3, #1
 800c026:	b2da      	uxtb	r2, r3
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	6a1b      	ldr	r3, [r3, #32]
 800c032:	6978      	ldr	r0, [r7, #20]
 800c034:	4798      	blx	r3
}
 800c036:	bf00      	nop
 800c038:	3718      	adds	r7, #24
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	20000e18 	.word	0x20000e18

0800c044 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c04c:	f107 0308 	add.w	r3, r7, #8
 800c050:	4618      	mov	r0, r3
 800c052:	f000 f857 	bl	800c104 <prvGetNextExpireTime>
 800c056:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	4619      	mov	r1, r3
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f000 f803 	bl	800c068 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c062:	f000 f8d5 	bl	800c210 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c066:	e7f1      	b.n	800c04c <prvTimerTask+0x8>

0800c068 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c072:	f7ff f939 	bl	800b2e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c076:	f107 0308 	add.w	r3, r7, #8
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 f866 	bl	800c14c <prvSampleTimeNow>
 800c080:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d130      	bne.n	800c0ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10a      	bne.n	800c0a4 <prvProcessTimerOrBlockTask+0x3c>
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	429a      	cmp	r2, r3
 800c094:	d806      	bhi.n	800c0a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c096:	f7ff f935 	bl	800b304 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c09a:	68f9      	ldr	r1, [r7, #12]
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f7ff ff85 	bl	800bfac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c0a2:	e024      	b.n	800c0ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d008      	beq.n	800c0bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c0aa:	4b13      	ldr	r3, [pc, #76]	; (800c0f8 <prvProcessTimerOrBlockTask+0x90>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <prvProcessTimerOrBlockTask+0x50>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e000      	b.n	800c0ba <prvProcessTimerOrBlockTask+0x52>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c0bc:	4b0f      	ldr	r3, [pc, #60]	; (800c0fc <prvProcessTimerOrBlockTask+0x94>)
 800c0be:	6818      	ldr	r0, [r3, #0]
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	1ad3      	subs	r3, r2, r3
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	f7fe fe29 	bl	800ad20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c0ce:	f7ff f919 	bl	800b304 <xTaskResumeAll>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10a      	bne.n	800c0ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c0d8:	4b09      	ldr	r3, [pc, #36]	; (800c100 <prvProcessTimerOrBlockTask+0x98>)
 800c0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0de:	601a      	str	r2, [r3, #0]
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	f3bf 8f6f 	isb	sy
}
 800c0e8:	e001      	b.n	800c0ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c0ea:	f7ff f90b 	bl	800b304 <xTaskResumeAll>
}
 800c0ee:	bf00      	nop
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20000e1c 	.word	0x20000e1c
 800c0fc:	20000e20 	.word	0x20000e20
 800c100:	e000ed04 	.word	0xe000ed04

0800c104 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c10c:	4b0e      	ldr	r3, [pc, #56]	; (800c148 <prvGetNextExpireTime+0x44>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d101      	bne.n	800c11a <prvGetNextExpireTime+0x16>
 800c116:	2201      	movs	r2, #1
 800c118:	e000      	b.n	800c11c <prvGetNextExpireTime+0x18>
 800c11a:	2200      	movs	r2, #0
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d105      	bne.n	800c134 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c128:	4b07      	ldr	r3, [pc, #28]	; (800c148 <prvGetNextExpireTime+0x44>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	e001      	b.n	800c138 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c134:	2300      	movs	r3, #0
 800c136:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c138:	68fb      	ldr	r3, [r7, #12]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3714      	adds	r7, #20
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	20000e18 	.word	0x20000e18

0800c14c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c154:	f7ff f972 	bl	800b43c <xTaskGetTickCount>
 800c158:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c15a:	4b0b      	ldr	r3, [pc, #44]	; (800c188 <prvSampleTimeNow+0x3c>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	429a      	cmp	r2, r3
 800c162:	d205      	bcs.n	800c170 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c164:	f000 f930 	bl	800c3c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	601a      	str	r2, [r3, #0]
 800c16e:	e002      	b.n	800c176 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c176:	4a04      	ldr	r2, [pc, #16]	; (800c188 <prvSampleTimeNow+0x3c>)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c17c:	68fb      	ldr	r3, [r7, #12]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	20000e28 	.word	0x20000e28

0800c18c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
 800c198:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c19a:	2300      	movs	r3, #0
 800c19c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d812      	bhi.n	800c1d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	1ad2      	subs	r2, r2, r3
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d302      	bcc.n	800c1c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	617b      	str	r3, [r7, #20]
 800c1c4:	e01b      	b.n	800c1fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c1c6:	4b10      	ldr	r3, [pc, #64]	; (800c208 <prvInsertTimerInActiveList+0x7c>)
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	f7fd fe10 	bl	8009df6 <vListInsert>
 800c1d6:	e012      	b.n	800c1fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d206      	bcs.n	800c1ee <prvInsertTimerInActiveList+0x62>
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d302      	bcc.n	800c1ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	617b      	str	r3, [r7, #20]
 800c1ec:	e007      	b.n	800c1fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1ee:	4b07      	ldr	r3, [pc, #28]	; (800c20c <prvInsertTimerInActiveList+0x80>)
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	f7fd fdfc 	bl	8009df6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c1fe:	697b      	ldr	r3, [r7, #20]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3718      	adds	r7, #24
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	20000e1c 	.word	0x20000e1c
 800c20c:	20000e18 	.word	0x20000e18

0800c210 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b08e      	sub	sp, #56	; 0x38
 800c214:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c216:	e0c6      	b.n	800c3a6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	da17      	bge.n	800c24e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c21e:	1d3b      	adds	r3, r7, #4
 800c220:	3304      	adds	r3, #4
 800c222:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c226:	2b00      	cmp	r3, #0
 800c228:	d109      	bne.n	800c23e <prvProcessReceivedCommands+0x2e>
 800c22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22e:	f383 8811 	msr	BASEPRI, r3
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	61fb      	str	r3, [r7, #28]
 800c23c:	e7fe      	b.n	800c23c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c244:	6850      	ldr	r0, [r2, #4]
 800c246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c248:	6892      	ldr	r2, [r2, #8]
 800c24a:	4611      	mov	r1, r2
 800c24c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	f2c0 80a7 	blt.w	800c3a4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25c:	695b      	ldr	r3, [r3, #20]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d004      	beq.n	800c26c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	3304      	adds	r3, #4
 800c266:	4618      	mov	r0, r3
 800c268:	f7fd fdfe 	bl	8009e68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c26c:	463b      	mov	r3, r7
 800c26e:	4618      	mov	r0, r3
 800c270:	f7ff ff6c 	bl	800c14c <prvSampleTimeNow>
 800c274:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b09      	cmp	r3, #9
 800c27a:	f200 8094 	bhi.w	800c3a6 <prvProcessReceivedCommands+0x196>
 800c27e:	a201      	add	r2, pc, #4	; (adr r2, 800c284 <prvProcessReceivedCommands+0x74>)
 800c280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c284:	0800c2ad 	.word	0x0800c2ad
 800c288:	0800c2ad 	.word	0x0800c2ad
 800c28c:	0800c2ad 	.word	0x0800c2ad
 800c290:	0800c31f 	.word	0x0800c31f
 800c294:	0800c333 	.word	0x0800c333
 800c298:	0800c37b 	.word	0x0800c37b
 800c29c:	0800c2ad 	.word	0x0800c2ad
 800c2a0:	0800c2ad 	.word	0x0800c2ad
 800c2a4:	0800c31f 	.word	0x0800c31f
 800c2a8:	0800c333 	.word	0x0800c333
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2b2:	f043 0301 	orr.w	r3, r3, #1
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c2be:	68ba      	ldr	r2, [r7, #8]
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	699b      	ldr	r3, [r3, #24]
 800c2c4:	18d1      	adds	r1, r2, r3
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2cc:	f7ff ff5e 	bl	800c18c <prvInsertTimerInActiveList>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d067      	beq.n	800c3a6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d8:	6a1b      	ldr	r3, [r3, #32]
 800c2da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2e4:	f003 0304 	and.w	r3, r3, #4
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d05c      	beq.n	800c3a6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	441a      	add	r2, r3
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2fe:	f7ff fe09 	bl	800bf14 <xTimerGenericCommand>
 800c302:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c304:	6a3b      	ldr	r3, [r7, #32]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d14d      	bne.n	800c3a6 <prvProcessReceivedCommands+0x196>
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	61bb      	str	r3, [r7, #24]
 800c31c:	e7fe      	b.n	800c31c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c324:	f023 0301 	bic.w	r3, r3, #1
 800c328:	b2da      	uxtb	r2, r3
 800c32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c330:	e039      	b.n	800c3a6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c338:	f043 0301 	orr.w	r3, r3, #1
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c340:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c348:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34c:	699b      	ldr	r3, [r3, #24]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d109      	bne.n	800c366 <prvProcessReceivedCommands+0x156>
 800c352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c356:	f383 8811 	msr	BASEPRI, r3
 800c35a:	f3bf 8f6f 	isb	sy
 800c35e:	f3bf 8f4f 	dsb	sy
 800c362:	617b      	str	r3, [r7, #20]
 800c364:	e7fe      	b.n	800c364 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c368:	699a      	ldr	r2, [r3, #24]
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	18d1      	adds	r1, r2, r3
 800c36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c374:	f7ff ff0a 	bl	800c18c <prvInsertTimerInActiveList>
					break;
 800c378:	e015      	b.n	800c3a6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c380:	f003 0302 	and.w	r3, r3, #2
 800c384:	2b00      	cmp	r3, #0
 800c386:	d103      	bne.n	800c390 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800c388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c38a:	f000 fbc3 	bl	800cb14 <vPortFree>
 800c38e:	e00a      	b.n	800c3a6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c396:	f023 0301 	bic.w	r3, r3, #1
 800c39a:	b2da      	uxtb	r2, r3
 800c39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c3a2:	e000      	b.n	800c3a6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c3a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3a6:	4b07      	ldr	r3, [pc, #28]	; (800c3c4 <prvProcessReceivedCommands+0x1b4>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	1d39      	adds	r1, r7, #4
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fe f904 	bl	800a5bc <xQueueReceive>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f47f af2e 	bne.w	800c218 <prvProcessReceivedCommands+0x8>
	}
}
 800c3bc:	bf00      	nop
 800c3be:	3730      	adds	r7, #48	; 0x30
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	20000e20 	.word	0x20000e20

0800c3c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b088      	sub	sp, #32
 800c3cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3ce:	e047      	b.n	800c460 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3d0:	4b2d      	ldr	r3, [pc, #180]	; (800c488 <prvSwitchTimerLists+0xc0>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3da:	4b2b      	ldr	r3, [pc, #172]	; (800c488 <prvSwitchTimerLists+0xc0>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fd fd3d 	bl	8009e68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6a1b      	ldr	r3, [r3, #32]
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3fc:	f003 0304 	and.w	r3, r3, #4
 800c400:	2b00      	cmp	r3, #0
 800c402:	d02d      	beq.n	800c460 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	699b      	ldr	r3, [r3, #24]
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	4413      	add	r3, r2
 800c40c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c40e:	68ba      	ldr	r2, [r7, #8]
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	429a      	cmp	r2, r3
 800c414:	d90e      	bls.n	800c434 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c422:	4b19      	ldr	r3, [pc, #100]	; (800c488 <prvSwitchTimerLists+0xc0>)
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3304      	adds	r3, #4
 800c42a:	4619      	mov	r1, r3
 800c42c:	4610      	mov	r0, r2
 800c42e:	f7fd fce2 	bl	8009df6 <vListInsert>
 800c432:	e015      	b.n	800c460 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c434:	2300      	movs	r3, #0
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	2300      	movs	r3, #0
 800c43a:	693a      	ldr	r2, [r7, #16]
 800c43c:	2100      	movs	r1, #0
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	f7ff fd68 	bl	800bf14 <xTimerGenericCommand>
 800c444:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d109      	bne.n	800c460 <prvSwitchTimerLists+0x98>
 800c44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	603b      	str	r3, [r7, #0]
 800c45e:	e7fe      	b.n	800c45e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c460:	4b09      	ldr	r3, [pc, #36]	; (800c488 <prvSwitchTimerLists+0xc0>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1b2      	bne.n	800c3d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c46a:	4b07      	ldr	r3, [pc, #28]	; (800c488 <prvSwitchTimerLists+0xc0>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c470:	4b06      	ldr	r3, [pc, #24]	; (800c48c <prvSwitchTimerLists+0xc4>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a04      	ldr	r2, [pc, #16]	; (800c488 <prvSwitchTimerLists+0xc0>)
 800c476:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c478:	4a04      	ldr	r2, [pc, #16]	; (800c48c <prvSwitchTimerLists+0xc4>)
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	6013      	str	r3, [r2, #0]
}
 800c47e:	bf00      	nop
 800c480:	3718      	adds	r7, #24
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	20000e18 	.word	0x20000e18
 800c48c:	20000e1c 	.word	0x20000e1c

0800c490 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c496:	f000 f961 	bl	800c75c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c49a:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <prvCheckForValidListAndQueue+0x60>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d120      	bne.n	800c4e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c4a2:	4814      	ldr	r0, [pc, #80]	; (800c4f4 <prvCheckForValidListAndQueue+0x64>)
 800c4a4:	f7fd fc56 	bl	8009d54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c4a8:	4813      	ldr	r0, [pc, #76]	; (800c4f8 <prvCheckForValidListAndQueue+0x68>)
 800c4aa:	f7fd fc53 	bl	8009d54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c4ae:	4b13      	ldr	r3, [pc, #76]	; (800c4fc <prvCheckForValidListAndQueue+0x6c>)
 800c4b0:	4a10      	ldr	r2, [pc, #64]	; (800c4f4 <prvCheckForValidListAndQueue+0x64>)
 800c4b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c4b4:	4b12      	ldr	r3, [pc, #72]	; (800c500 <prvCheckForValidListAndQueue+0x70>)
 800c4b6:	4a10      	ldr	r2, [pc, #64]	; (800c4f8 <prvCheckForValidListAndQueue+0x68>)
 800c4b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	9300      	str	r3, [sp, #0]
 800c4be:	4b11      	ldr	r3, [pc, #68]	; (800c504 <prvCheckForValidListAndQueue+0x74>)
 800c4c0:	4a11      	ldr	r2, [pc, #68]	; (800c508 <prvCheckForValidListAndQueue+0x78>)
 800c4c2:	2110      	movs	r1, #16
 800c4c4:	200a      	movs	r0, #10
 800c4c6:	f7fd fd61 	bl	8009f8c <xQueueGenericCreateStatic>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	4b08      	ldr	r3, [pc, #32]	; (800c4f0 <prvCheckForValidListAndQueue+0x60>)
 800c4ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c4d0:	4b07      	ldr	r3, [pc, #28]	; (800c4f0 <prvCheckForValidListAndQueue+0x60>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d005      	beq.n	800c4e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c4d8:	4b05      	ldr	r3, [pc, #20]	; (800c4f0 <prvCheckForValidListAndQueue+0x60>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	490b      	ldr	r1, [pc, #44]	; (800c50c <prvCheckForValidListAndQueue+0x7c>)
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fe fbf6 	bl	800acd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4e4:	f000 f968 	bl	800c7b8 <vPortExitCritical>
}
 800c4e8:	bf00      	nop
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	20000e20 	.word	0x20000e20
 800c4f4:	20000df0 	.word	0x20000df0
 800c4f8:	20000e04 	.word	0x20000e04
 800c4fc:	20000e18 	.word	0x20000e18
 800c500:	20000e1c 	.word	0x20000e1c
 800c504:	20000ecc 	.word	0x20000ecc
 800c508:	20000e2c 	.word	0x20000e2c
 800c50c:	0800d9ac 	.word	0x0800d9ac

0800c510 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	3b04      	subs	r3, #4
 800c520:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	3b04      	subs	r3, #4
 800c52e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f023 0201 	bic.w	r2, r3, #1
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3b04      	subs	r3, #4
 800c53e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c540:	4a0c      	ldr	r2, [pc, #48]	; (800c574 <pxPortInitialiseStack+0x64>)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	3b14      	subs	r3, #20
 800c54a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	3b04      	subs	r3, #4
 800c556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f06f 0202 	mvn.w	r2, #2
 800c55e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3b20      	subs	r3, #32
 800c564:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c566:	68fb      	ldr	r3, [r7, #12]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr
 800c574:	0800c579 	.word	0x0800c579

0800c578 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c582:	4b11      	ldr	r3, [pc, #68]	; (800c5c8 <prvTaskExitError+0x50>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58a:	d009      	beq.n	800c5a0 <prvTaskExitError+0x28>
 800c58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	60fb      	str	r3, [r7, #12]
 800c59e:	e7fe      	b.n	800c59e <prvTaskExitError+0x26>
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c5b2:	bf00      	nop
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d0fc      	beq.n	800c5b4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c5ba:	bf00      	nop
 800c5bc:	3714      	adds	r7, #20
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	20000184 	.word	0x20000184
 800c5cc:	00000000 	.word	0x00000000

0800c5d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c5d0:	4b07      	ldr	r3, [pc, #28]	; (800c5f0 <pxCurrentTCBConst2>)
 800c5d2:	6819      	ldr	r1, [r3, #0]
 800c5d4:	6808      	ldr	r0, [r1, #0]
 800c5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5da:	f380 8809 	msr	PSP, r0
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f04f 0000 	mov.w	r0, #0
 800c5e6:	f380 8811 	msr	BASEPRI, r0
 800c5ea:	4770      	bx	lr
 800c5ec:	f3af 8000 	nop.w

0800c5f0 <pxCurrentTCBConst2>:
 800c5f0:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c5f4:	bf00      	nop
 800c5f6:	bf00      	nop

0800c5f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c5f8:	4808      	ldr	r0, [pc, #32]	; (800c61c <prvPortStartFirstTask+0x24>)
 800c5fa:	6800      	ldr	r0, [r0, #0]
 800c5fc:	6800      	ldr	r0, [r0, #0]
 800c5fe:	f380 8808 	msr	MSP, r0
 800c602:	f04f 0000 	mov.w	r0, #0
 800c606:	f380 8814 	msr	CONTROL, r0
 800c60a:	b662      	cpsie	i
 800c60c:	b661      	cpsie	f
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	df00      	svc	0
 800c618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c61a:	bf00      	nop
 800c61c:	e000ed08 	.word	0xe000ed08

0800c620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c626:	4b44      	ldr	r3, [pc, #272]	; (800c738 <xPortStartScheduler+0x118>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a44      	ldr	r2, [pc, #272]	; (800c73c <xPortStartScheduler+0x11c>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d109      	bne.n	800c644 <xPortStartScheduler+0x24>
 800c630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	613b      	str	r3, [r7, #16]
 800c642:	e7fe      	b.n	800c642 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c644:	4b3c      	ldr	r3, [pc, #240]	; (800c738 <xPortStartScheduler+0x118>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a3d      	ldr	r2, [pc, #244]	; (800c740 <xPortStartScheduler+0x120>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d109      	bne.n	800c662 <xPortStartScheduler+0x42>
 800c64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	60fb      	str	r3, [r7, #12]
 800c660:	e7fe      	b.n	800c660 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c662:	4b38      	ldr	r3, [pc, #224]	; (800c744 <xPortStartScheduler+0x124>)
 800c664:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	22ff      	movs	r2, #255	; 0xff
 800c672:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c67c:	78fb      	ldrb	r3, [r7, #3]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c684:	b2da      	uxtb	r2, r3
 800c686:	4b30      	ldr	r3, [pc, #192]	; (800c748 <xPortStartScheduler+0x128>)
 800c688:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c68a:	4b30      	ldr	r3, [pc, #192]	; (800c74c <xPortStartScheduler+0x12c>)
 800c68c:	2207      	movs	r2, #7
 800c68e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c690:	e009      	b.n	800c6a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c692:	4b2e      	ldr	r3, [pc, #184]	; (800c74c <xPortStartScheduler+0x12c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3b01      	subs	r3, #1
 800c698:	4a2c      	ldr	r2, [pc, #176]	; (800c74c <xPortStartScheduler+0x12c>)
 800c69a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c69c:	78fb      	ldrb	r3, [r7, #3]
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	005b      	lsls	r3, r3, #1
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6a6:	78fb      	ldrb	r3, [r7, #3]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ae:	2b80      	cmp	r3, #128	; 0x80
 800c6b0:	d0ef      	beq.n	800c692 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c6b2:	4b26      	ldr	r3, [pc, #152]	; (800c74c <xPortStartScheduler+0x12c>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f1c3 0307 	rsb	r3, r3, #7
 800c6ba:	2b04      	cmp	r3, #4
 800c6bc:	d009      	beq.n	800c6d2 <xPortStartScheduler+0xb2>
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	60bb      	str	r3, [r7, #8]
 800c6d0:	e7fe      	b.n	800c6d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c6d2:	4b1e      	ldr	r3, [pc, #120]	; (800c74c <xPortStartScheduler+0x12c>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	021b      	lsls	r3, r3, #8
 800c6d8:	4a1c      	ldr	r2, [pc, #112]	; (800c74c <xPortStartScheduler+0x12c>)
 800c6da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c6dc:	4b1b      	ldr	r3, [pc, #108]	; (800c74c <xPortStartScheduler+0x12c>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c6e4:	4a19      	ldr	r2, [pc, #100]	; (800c74c <xPortStartScheduler+0x12c>)
 800c6e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c6f0:	4b17      	ldr	r3, [pc, #92]	; (800c750 <xPortStartScheduler+0x130>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a16      	ldr	r2, [pc, #88]	; (800c750 <xPortStartScheduler+0x130>)
 800c6f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c6fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c6fc:	4b14      	ldr	r3, [pc, #80]	; (800c750 <xPortStartScheduler+0x130>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a13      	ldr	r2, [pc, #76]	; (800c750 <xPortStartScheduler+0x130>)
 800c702:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c706:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c708:	f000 f8d6 	bl	800c8b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c70c:	4b11      	ldr	r3, [pc, #68]	; (800c754 <xPortStartScheduler+0x134>)
 800c70e:	2200      	movs	r2, #0
 800c710:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c712:	f000 f8f5 	bl	800c900 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c716:	4b10      	ldr	r3, [pc, #64]	; (800c758 <xPortStartScheduler+0x138>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a0f      	ldr	r2, [pc, #60]	; (800c758 <xPortStartScheduler+0x138>)
 800c71c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c720:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c722:	f7ff ff69 	bl	800c5f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c726:	f7fe ff63 	bl	800b5f0 <vTaskSwitchContext>
	prvTaskExitError();
 800c72a:	f7ff ff25 	bl	800c578 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3718      	adds	r7, #24
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	e000ed00 	.word	0xe000ed00
 800c73c:	410fc271 	.word	0x410fc271
 800c740:	410fc270 	.word	0x410fc270
 800c744:	e000e400 	.word	0xe000e400
 800c748:	20000f1c 	.word	0x20000f1c
 800c74c:	20000f20 	.word	0x20000f20
 800c750:	e000ed20 	.word	0xe000ed20
 800c754:	20000184 	.word	0x20000184
 800c758:	e000ef34 	.word	0xe000ef34

0800c75c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c774:	4b0e      	ldr	r3, [pc, #56]	; (800c7b0 <vPortEnterCritical+0x54>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	3301      	adds	r3, #1
 800c77a:	4a0d      	ldr	r2, [pc, #52]	; (800c7b0 <vPortEnterCritical+0x54>)
 800c77c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c77e:	4b0c      	ldr	r3, [pc, #48]	; (800c7b0 <vPortEnterCritical+0x54>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d10e      	bne.n	800c7a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c786:	4b0b      	ldr	r3, [pc, #44]	; (800c7b4 <vPortEnterCritical+0x58>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d009      	beq.n	800c7a4 <vPortEnterCritical+0x48>
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	603b      	str	r3, [r7, #0]
 800c7a2:	e7fe      	b.n	800c7a2 <vPortEnterCritical+0x46>
	}
}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr
 800c7b0:	20000184 	.word	0x20000184
 800c7b4:	e000ed04 	.word	0xe000ed04

0800c7b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c7be:	4b11      	ldr	r3, [pc, #68]	; (800c804 <vPortExitCritical+0x4c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d109      	bne.n	800c7da <vPortExitCritical+0x22>
 800c7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	607b      	str	r3, [r7, #4]
 800c7d8:	e7fe      	b.n	800c7d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c7da:	4b0a      	ldr	r3, [pc, #40]	; (800c804 <vPortExitCritical+0x4c>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	4a08      	ldr	r2, [pc, #32]	; (800c804 <vPortExitCritical+0x4c>)
 800c7e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c7e4:	4b07      	ldr	r3, [pc, #28]	; (800c804 <vPortExitCritical+0x4c>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d104      	bne.n	800c7f6 <vPortExitCritical+0x3e>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c7f6:	bf00      	nop
 800c7f8:	370c      	adds	r7, #12
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	20000184 	.word	0x20000184
	...

0800c810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c810:	f3ef 8009 	mrs	r0, PSP
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	4b15      	ldr	r3, [pc, #84]	; (800c870 <pxCurrentTCBConst>)
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	f01e 0f10 	tst.w	lr, #16
 800c820:	bf08      	it	eq
 800c822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82a:	6010      	str	r0, [r2, #0]
 800c82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c830:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c834:	f380 8811 	msr	BASEPRI, r0
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f7fe fed6 	bl	800b5f0 <vTaskSwitchContext>
 800c844:	f04f 0000 	mov.w	r0, #0
 800c848:	f380 8811 	msr	BASEPRI, r0
 800c84c:	bc09      	pop	{r0, r3}
 800c84e:	6819      	ldr	r1, [r3, #0]
 800c850:	6808      	ldr	r0, [r1, #0]
 800c852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c856:	f01e 0f10 	tst.w	lr, #16
 800c85a:	bf08      	it	eq
 800c85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c860:	f380 8809 	msr	PSP, r0
 800c864:	f3bf 8f6f 	isb	sy
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	f3af 8000 	nop.w

0800c870 <pxCurrentTCBConst>:
 800c870:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c874:	bf00      	nop
 800c876:	bf00      	nop

0800c878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
	__asm volatile
 800c87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c882:	f383 8811 	msr	BASEPRI, r3
 800c886:	f3bf 8f6f 	isb	sy
 800c88a:	f3bf 8f4f 	dsb	sy
 800c88e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c890:	f7fe fdf6 	bl	800b480 <xTaskIncrementTick>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d003      	beq.n	800c8a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c89a:	4b06      	ldr	r3, [pc, #24]	; (800c8b4 <SysTick_Handler+0x3c>)
 800c89c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8a0:	601a      	str	r2, [r3, #0]
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c8ac:	bf00      	nop
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	e000ed04 	.word	0xe000ed04

0800c8b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8bc:	4b0b      	ldr	r3, [pc, #44]	; (800c8ec <vPortSetupTimerInterrupt+0x34>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8c2:	4b0b      	ldr	r3, [pc, #44]	; (800c8f0 <vPortSetupTimerInterrupt+0x38>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8c8:	4b0a      	ldr	r3, [pc, #40]	; (800c8f4 <vPortSetupTimerInterrupt+0x3c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a0a      	ldr	r2, [pc, #40]	; (800c8f8 <vPortSetupTimerInterrupt+0x40>)
 800c8ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c8d2:	099b      	lsrs	r3, r3, #6
 800c8d4:	4a09      	ldr	r2, [pc, #36]	; (800c8fc <vPortSetupTimerInterrupt+0x44>)
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c8da:	4b04      	ldr	r3, [pc, #16]	; (800c8ec <vPortSetupTimerInterrupt+0x34>)
 800c8dc:	2207      	movs	r2, #7
 800c8de:	601a      	str	r2, [r3, #0]
}
 800c8e0:	bf00      	nop
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	e000e010 	.word	0xe000e010
 800c8f0:	e000e018 	.word	0xe000e018
 800c8f4:	20000040 	.word	0x20000040
 800c8f8:	10624dd3 	.word	0x10624dd3
 800c8fc:	e000e014 	.word	0xe000e014

0800c900 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c900:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c910 <vPortEnableVFP+0x10>
 800c904:	6801      	ldr	r1, [r0, #0]
 800c906:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c90a:	6001      	str	r1, [r0, #0]
 800c90c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c90e:	bf00      	nop
 800c910:	e000ed88 	.word	0xe000ed88

0800c914 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c91a:	f3ef 8305 	mrs	r3, IPSR
 800c91e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2b0f      	cmp	r3, #15
 800c924:	d913      	bls.n	800c94e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c926:	4a16      	ldr	r2, [pc, #88]	; (800c980 <vPortValidateInterruptPriority+0x6c>)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	4413      	add	r3, r2
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c930:	4b14      	ldr	r3, [pc, #80]	; (800c984 <vPortValidateInterruptPriority+0x70>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	7afa      	ldrb	r2, [r7, #11]
 800c936:	429a      	cmp	r2, r3
 800c938:	d209      	bcs.n	800c94e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93e:	f383 8811 	msr	BASEPRI, r3
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	f3bf 8f4f 	dsb	sy
 800c94a:	607b      	str	r3, [r7, #4]
 800c94c:	e7fe      	b.n	800c94c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c94e:	4b0e      	ldr	r3, [pc, #56]	; (800c988 <vPortValidateInterruptPriority+0x74>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c956:	4b0d      	ldr	r3, [pc, #52]	; (800c98c <vPortValidateInterruptPriority+0x78>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d909      	bls.n	800c972 <vPortValidateInterruptPriority+0x5e>
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	603b      	str	r3, [r7, #0]
 800c970:	e7fe      	b.n	800c970 <vPortValidateInterruptPriority+0x5c>
	}
 800c972:	bf00      	nop
 800c974:	3714      	adds	r7, #20
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	e000e3f0 	.word	0xe000e3f0
 800c984:	20000f1c 	.word	0x20000f1c
 800c988:	e000ed0c 	.word	0xe000ed0c
 800c98c:	20000f20 	.word	0x20000f20

0800c990 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b08a      	sub	sp, #40	; 0x28
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c998:	2300      	movs	r3, #0
 800c99a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c99c:	f7fe fca4 	bl	800b2e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c9a0:	4b57      	ldr	r3, [pc, #348]	; (800cb00 <pvPortMalloc+0x170>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c9a8:	f000 f90c 	bl	800cbc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c9ac:	4b55      	ldr	r3, [pc, #340]	; (800cb04 <pvPortMalloc+0x174>)
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f040 808c 	bne.w	800cad2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d01c      	beq.n	800c9fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c9c0:	2208      	movs	r2, #8
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f003 0307 	and.w	r3, r3, #7
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d013      	beq.n	800c9fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f023 0307 	bic.w	r3, r3, #7
 800c9d8:	3308      	adds	r3, #8
 800c9da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f003 0307 	and.w	r3, r3, #7
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d009      	beq.n	800c9fa <pvPortMalloc+0x6a>
 800c9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ea:	f383 8811 	msr	BASEPRI, r3
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f3bf 8f4f 	dsb	sy
 800c9f6:	617b      	str	r3, [r7, #20]
 800c9f8:	e7fe      	b.n	800c9f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d068      	beq.n	800cad2 <pvPortMalloc+0x142>
 800ca00:	4b41      	ldr	r3, [pc, #260]	; (800cb08 <pvPortMalloc+0x178>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d863      	bhi.n	800cad2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca0a:	4b40      	ldr	r3, [pc, #256]	; (800cb0c <pvPortMalloc+0x17c>)
 800ca0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca0e:	4b3f      	ldr	r3, [pc, #252]	; (800cb0c <pvPortMalloc+0x17c>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca14:	e004      	b.n	800ca20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ca16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d903      	bls.n	800ca32 <pvPortMalloc+0xa2>
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1f1      	bne.n	800ca16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca32:	4b33      	ldr	r3, [pc, #204]	; (800cb00 <pvPortMalloc+0x170>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d04a      	beq.n	800cad2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2208      	movs	r2, #8
 800ca42:	4413      	add	r3, r2
 800ca44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	6a3b      	ldr	r3, [r7, #32]
 800ca4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	685a      	ldr	r2, [r3, #4]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	1ad2      	subs	r2, r2, r3
 800ca56:	2308      	movs	r3, #8
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d91e      	bls.n	800ca9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4413      	add	r3, r2
 800ca64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	f003 0307 	and.w	r3, r3, #7
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d009      	beq.n	800ca84 <pvPortMalloc+0xf4>
 800ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	613b      	str	r3, [r7, #16]
 800ca82:	e7fe      	b.n	800ca82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	1ad2      	subs	r2, r2, r3
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca96:	69b8      	ldr	r0, [r7, #24]
 800ca98:	f000 f8f6 	bl	800cc88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca9c:	4b1a      	ldr	r3, [pc, #104]	; (800cb08 <pvPortMalloc+0x178>)
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	4a18      	ldr	r2, [pc, #96]	; (800cb08 <pvPortMalloc+0x178>)
 800caa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800caaa:	4b17      	ldr	r3, [pc, #92]	; (800cb08 <pvPortMalloc+0x178>)
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	4b18      	ldr	r3, [pc, #96]	; (800cb10 <pvPortMalloc+0x180>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d203      	bcs.n	800cabe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cab6:	4b14      	ldr	r3, [pc, #80]	; (800cb08 <pvPortMalloc+0x178>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a15      	ldr	r2, [pc, #84]	; (800cb10 <pvPortMalloc+0x180>)
 800cabc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac0:	685a      	ldr	r2, [r3, #4]
 800cac2:	4b10      	ldr	r3, [pc, #64]	; (800cb04 <pvPortMalloc+0x174>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	431a      	orrs	r2, r3
 800cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	2200      	movs	r2, #0
 800cad0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cad2:	f7fe fc17 	bl	800b304 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	f003 0307 	and.w	r3, r3, #7
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d009      	beq.n	800caf4 <pvPortMalloc+0x164>
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	e7fe      	b.n	800caf2 <pvPortMalloc+0x162>
	return pvReturn;
 800caf4:	69fb      	ldr	r3, [r7, #28]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3728      	adds	r7, #40	; 0x28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	20001ae4 	.word	0x20001ae4
 800cb04:	20001af0 	.word	0x20001af0
 800cb08:	20001ae8 	.word	0x20001ae8
 800cb0c:	20001adc 	.word	0x20001adc
 800cb10:	20001aec 	.word	0x20001aec

0800cb14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d046      	beq.n	800cbb4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb26:	2308      	movs	r3, #8
 800cb28:	425b      	negs	r3, r3
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	685a      	ldr	r2, [r3, #4]
 800cb38:	4b20      	ldr	r3, [pc, #128]	; (800cbbc <vPortFree+0xa8>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4013      	ands	r3, r2
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d109      	bne.n	800cb56 <vPortFree+0x42>
 800cb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	e7fe      	b.n	800cb54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d009      	beq.n	800cb72 <vPortFree+0x5e>
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	60bb      	str	r3, [r7, #8]
 800cb70:	e7fe      	b.n	800cb70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	685a      	ldr	r2, [r3, #4]
 800cb76:	4b11      	ldr	r3, [pc, #68]	; (800cbbc <vPortFree+0xa8>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4013      	ands	r3, r2
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d019      	beq.n	800cbb4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d115      	bne.n	800cbb4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	4b0b      	ldr	r3, [pc, #44]	; (800cbbc <vPortFree+0xa8>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	43db      	mvns	r3, r3
 800cb92:	401a      	ands	r2, r3
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb98:	f7fe fba6 	bl	800b2e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	685a      	ldr	r2, [r3, #4]
 800cba0:	4b07      	ldr	r3, [pc, #28]	; (800cbc0 <vPortFree+0xac>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4413      	add	r3, r2
 800cba6:	4a06      	ldr	r2, [pc, #24]	; (800cbc0 <vPortFree+0xac>)
 800cba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cbaa:	6938      	ldr	r0, [r7, #16]
 800cbac:	f000 f86c 	bl	800cc88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cbb0:	f7fe fba8 	bl	800b304 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cbb4:	bf00      	nop
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	20001af0 	.word	0x20001af0
 800cbc0:	20001ae8 	.word	0x20001ae8

0800cbc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cbce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbd0:	4b27      	ldr	r3, [pc, #156]	; (800cc70 <prvHeapInit+0xac>)
 800cbd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f003 0307 	and.w	r3, r3, #7
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00c      	beq.n	800cbf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	3307      	adds	r3, #7
 800cbe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f023 0307 	bic.w	r3, r3, #7
 800cbea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	4a1f      	ldr	r2, [pc, #124]	; (800cc70 <prvHeapInit+0xac>)
 800cbf4:	4413      	add	r3, r2
 800cbf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cbfc:	4a1d      	ldr	r2, [pc, #116]	; (800cc74 <prvHeapInit+0xb0>)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc02:	4b1c      	ldr	r3, [pc, #112]	; (800cc74 <prvHeapInit+0xb0>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc10:	2208      	movs	r2, #8
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	1a9b      	subs	r3, r3, r2
 800cc16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f023 0307 	bic.w	r3, r3, #7
 800cc1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	4a15      	ldr	r2, [pc, #84]	; (800cc78 <prvHeapInit+0xb4>)
 800cc24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc26:	4b14      	ldr	r3, [pc, #80]	; (800cc78 <prvHeapInit+0xb4>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc2e:	4b12      	ldr	r3, [pc, #72]	; (800cc78 <prvHeapInit+0xb4>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	1ad2      	subs	r2, r2, r3
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc44:	4b0c      	ldr	r3, [pc, #48]	; (800cc78 <prvHeapInit+0xb4>)
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	4a0a      	ldr	r2, [pc, #40]	; (800cc7c <prvHeapInit+0xb8>)
 800cc52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	4a09      	ldr	r2, [pc, #36]	; (800cc80 <prvHeapInit+0xbc>)
 800cc5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc5c:	4b09      	ldr	r3, [pc, #36]	; (800cc84 <prvHeapInit+0xc0>)
 800cc5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc62:	601a      	str	r2, [r3, #0]
}
 800cc64:	bf00      	nop
 800cc66:	3714      	adds	r7, #20
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr
 800cc70:	20000f24 	.word	0x20000f24
 800cc74:	20001adc 	.word	0x20001adc
 800cc78:	20001ae4 	.word	0x20001ae4
 800cc7c:	20001aec 	.word	0x20001aec
 800cc80:	20001ae8 	.word	0x20001ae8
 800cc84:	20001af0 	.word	0x20001af0

0800cc88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc90:	4b28      	ldr	r3, [pc, #160]	; (800cd34 <prvInsertBlockIntoFreeList+0xac>)
 800cc92:	60fb      	str	r3, [r7, #12]
 800cc94:	e002      	b.n	800cc9c <prvInsertBlockIntoFreeList+0x14>
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	60fb      	str	r3, [r7, #12]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d8f7      	bhi.n	800cc96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d108      	bne.n	800ccca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	685a      	ldr	r2, [r3, #4]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	441a      	add	r2, r3
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	68ba      	ldr	r2, [r7, #8]
 800ccd4:	441a      	add	r2, r3
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d118      	bne.n	800cd10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <prvInsertBlockIntoFreeList+0xb0>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d00d      	beq.n	800cd06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	685a      	ldr	r2, [r3, #4]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	441a      	add	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	601a      	str	r2, [r3, #0]
 800cd04:	e008      	b.n	800cd18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd06:	4b0c      	ldr	r3, [pc, #48]	; (800cd38 <prvInsertBlockIntoFreeList+0xb0>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	601a      	str	r2, [r3, #0]
 800cd0e:	e003      	b.n	800cd18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d002      	beq.n	800cd26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd26:	bf00      	nop
 800cd28:	3714      	adds	r7, #20
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr
 800cd32:	bf00      	nop
 800cd34:	20001adc 	.word	0x20001adc
 800cd38:	20001ae4 	.word	0x20001ae4

0800cd3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cd40:	2200      	movs	r2, #0
 800cd42:	4912      	ldr	r1, [pc, #72]	; (800cd8c <MX_USB_DEVICE_Init+0x50>)
 800cd44:	4812      	ldr	r0, [pc, #72]	; (800cd90 <MX_USB_DEVICE_Init+0x54>)
 800cd46:	f7fb faa8 	bl	800829a <USBD_Init>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d001      	beq.n	800cd54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cd50:	f7f4 fc96 	bl	8001680 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cd54:	490f      	ldr	r1, [pc, #60]	; (800cd94 <MX_USB_DEVICE_Init+0x58>)
 800cd56:	480e      	ldr	r0, [pc, #56]	; (800cd90 <MX_USB_DEVICE_Init+0x54>)
 800cd58:	f7fb faca 	bl	80082f0 <USBD_RegisterClass>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d001      	beq.n	800cd66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cd62:	f7f4 fc8d 	bl	8001680 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cd66:	490c      	ldr	r1, [pc, #48]	; (800cd98 <MX_USB_DEVICE_Init+0x5c>)
 800cd68:	4809      	ldr	r0, [pc, #36]	; (800cd90 <MX_USB_DEVICE_Init+0x54>)
 800cd6a:	f7fb fa27 	bl	80081bc <USBD_CDC_RegisterInterface>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d001      	beq.n	800cd78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cd74:	f7f4 fc84 	bl	8001680 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cd78:	4805      	ldr	r0, [pc, #20]	; (800cd90 <MX_USB_DEVICE_Init+0x54>)
 800cd7a:	f7fb fad3 	bl	8008324 <USBD_Start>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d001      	beq.n	800cd88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cd84:	f7f4 fc7c 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cd88:	bf00      	nop
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	20000198 	.word	0x20000198
 800cd90:	2000c0c8 	.word	0x2000c0c8
 800cd94:	20000080 	.word	0x20000080
 800cd98:	20000188 	.word	0x20000188

0800cd9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cda0:	2200      	movs	r2, #0
 800cda2:	4905      	ldr	r1, [pc, #20]	; (800cdb8 <CDC_Init_FS+0x1c>)
 800cda4:	4805      	ldr	r0, [pc, #20]	; (800cdbc <CDC_Init_FS+0x20>)
 800cda6:	f7fb fa20 	bl	80081ea <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cdaa:	4905      	ldr	r1, [pc, #20]	; (800cdc0 <CDC_Init_FS+0x24>)
 800cdac:	4803      	ldr	r0, [pc, #12]	; (800cdbc <CDC_Init_FS+0x20>)
 800cdae:	f7fb fa36 	bl	800821e <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800cdb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	2000c774 	.word	0x2000c774
 800cdbc:	2000c0c8 	.word	0x2000c0c8
 800cdc0:	2000c38c 	.word	0x2000c38c

0800cdc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800cdc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	4603      	mov	r3, r0
 800cddc:	6039      	str	r1, [r7, #0]
 800cdde:	71fb      	strb	r3, [r7, #7]
 800cde0:	4613      	mov	r3, r2
 800cde2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch(cmd)
 800cde4:	79fb      	ldrb	r3, [r7, #7]
 800cde6:	2b23      	cmp	r3, #35	; 0x23
 800cde8:	d84a      	bhi.n	800ce80 <CDC_Control_FS+0xac>
 800cdea:	a201      	add	r2, pc, #4	; (adr r2, 800cdf0 <CDC_Control_FS+0x1c>)
 800cdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf0:	0800ce81 	.word	0x0800ce81
 800cdf4:	0800ce81 	.word	0x0800ce81
 800cdf8:	0800ce81 	.word	0x0800ce81
 800cdfc:	0800ce81 	.word	0x0800ce81
 800ce00:	0800ce81 	.word	0x0800ce81
 800ce04:	0800ce81 	.word	0x0800ce81
 800ce08:	0800ce81 	.word	0x0800ce81
 800ce0c:	0800ce81 	.word	0x0800ce81
 800ce10:	0800ce81 	.word	0x0800ce81
 800ce14:	0800ce81 	.word	0x0800ce81
 800ce18:	0800ce81 	.word	0x0800ce81
 800ce1c:	0800ce81 	.word	0x0800ce81
 800ce20:	0800ce81 	.word	0x0800ce81
 800ce24:	0800ce81 	.word	0x0800ce81
 800ce28:	0800ce81 	.word	0x0800ce81
 800ce2c:	0800ce81 	.word	0x0800ce81
 800ce30:	0800ce81 	.word	0x0800ce81
 800ce34:	0800ce81 	.word	0x0800ce81
 800ce38:	0800ce81 	.word	0x0800ce81
 800ce3c:	0800ce81 	.word	0x0800ce81
 800ce40:	0800ce81 	.word	0x0800ce81
 800ce44:	0800ce81 	.word	0x0800ce81
 800ce48:	0800ce81 	.word	0x0800ce81
 800ce4c:	0800ce81 	.word	0x0800ce81
 800ce50:	0800ce81 	.word	0x0800ce81
 800ce54:	0800ce81 	.word	0x0800ce81
 800ce58:	0800ce81 	.word	0x0800ce81
 800ce5c:	0800ce81 	.word	0x0800ce81
 800ce60:	0800ce81 	.word	0x0800ce81
 800ce64:	0800ce81 	.word	0x0800ce81
 800ce68:	0800ce81 	.word	0x0800ce81
 800ce6c:	0800ce81 	.word	0x0800ce81
 800ce70:	0800ce81 	.word	0x0800ce81
 800ce74:	0800ce81 	.word	0x0800ce81
 800ce78:	0800ce81 	.word	0x0800ce81
 800ce7c:	0800ce81 	.word	0x0800ce81
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800ce80:	bf00      	nop
	}

	return (USBD_OK);
 800ce82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	370c      	adds	r7, #12
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(counter == 0){
 800ce9a:	4b13      	ldr	r3, [pc, #76]	; (800cee8 <CDC_Receive_FS+0x58>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d106      	bne.n	800ceb2 <CDC_Receive_FS+0x22>

		//		if(osMutexAcquire(usb_data_mutex, 10) == osOK){
		memcpy(&usb_data_buffer[0], Buf, *Len);
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	461a      	mov	r2, r3
 800ceaa:	6879      	ldr	r1, [r7, #4]
 800ceac:	480f      	ldr	r0, [pc, #60]	; (800ceec <CDC_Receive_FS+0x5c>)
 800ceae:	f000 fcdb 	bl	800d868 <memcpy>

		/* Send Data to Queue */


	}
	++counter;
 800ceb2:	4b0d      	ldr	r3, [pc, #52]	; (800cee8 <CDC_Receive_FS+0x58>)
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	3301      	adds	r3, #1
 800ceba:	b2da      	uxtb	r2, r3
 800cebc:	4b0a      	ldr	r3, [pc, #40]	; (800cee8 <CDC_Receive_FS+0x58>)
 800cebe:	701a      	strb	r2, [r3, #0]
	if (counter == 4){
 800cec0:	4b09      	ldr	r3, [pc, #36]	; (800cee8 <CDC_Receive_FS+0x58>)
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	2b04      	cmp	r3, #4
 800cec8:	d102      	bne.n	800ced0 <CDC_Receive_FS+0x40>
		counter = 0;
 800ceca:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <CDC_Receive_FS+0x58>)
 800cecc:	2200      	movs	r2, #0
 800cece:	701a      	strb	r2, [r3, #0]
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ced0:	6879      	ldr	r1, [r7, #4]
 800ced2:	4807      	ldr	r0, [pc, #28]	; (800cef0 <CDC_Receive_FS+0x60>)
 800ced4:	f7fb f9a3 	bl	800821e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ced8:	4805      	ldr	r0, [pc, #20]	; (800cef0 <CDC_Receive_FS+0x60>)
 800ceda:	f7fb f9b4 	bl	8008246 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 800cede:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	20001af4 	.word	0x20001af4
 800ceec:	20000000 	.word	0x20000000
 800cef0:	2000c0c8 	.word	0x2000c0c8

0800cef4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	4603      	mov	r3, r0
 800cefc:	6039      	str	r1, [r7, #0]
 800cefe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	2212      	movs	r2, #18
 800cf04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cf06:	4b03      	ldr	r3, [pc, #12]	; (800cf14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr
 800cf14:	200001b8 	.word	0x200001b8

0800cf18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	4603      	mov	r3, r0
 800cf20:	6039      	str	r1, [r7, #0]
 800cf22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	2204      	movs	r2, #4
 800cf28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cf2a:	4b03      	ldr	r3, [pc, #12]	; (800cf38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr
 800cf38:	200001d8 	.word	0x200001d8

0800cf3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	4603      	mov	r3, r0
 800cf44:	6039      	str	r1, [r7, #0]
 800cf46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf48:	79fb      	ldrb	r3, [r7, #7]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d105      	bne.n	800cf5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	4907      	ldr	r1, [pc, #28]	; (800cf70 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf52:	4808      	ldr	r0, [pc, #32]	; (800cf74 <USBD_FS_ProductStrDescriptor+0x38>)
 800cf54:	f7fc f980 	bl	8009258 <USBD_GetString>
 800cf58:	e004      	b.n	800cf64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	4904      	ldr	r1, [pc, #16]	; (800cf70 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf5e:	4805      	ldr	r0, [pc, #20]	; (800cf74 <USBD_FS_ProductStrDescriptor+0x38>)
 800cf60:	f7fc f97a 	bl	8009258 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf64:	4b02      	ldr	r3, [pc, #8]	; (800cf70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3708      	adds	r7, #8
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	2000cb5c 	.word	0x2000cb5c
 800cf74:	0800d9b4 	.word	0x0800d9b4

0800cf78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	4603      	mov	r3, r0
 800cf80:	6039      	str	r1, [r7, #0]
 800cf82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf84:	683a      	ldr	r2, [r7, #0]
 800cf86:	4904      	ldr	r1, [pc, #16]	; (800cf98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cf88:	4804      	ldr	r0, [pc, #16]	; (800cf9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cf8a:	f7fc f965 	bl	8009258 <USBD_GetString>
  return USBD_StrDesc;
 800cf8e:	4b02      	ldr	r3, [pc, #8]	; (800cf98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	2000cb5c 	.word	0x2000cb5c
 800cf9c:	0800d9cc 	.word	0x0800d9cc

0800cfa0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	6039      	str	r1, [r7, #0]
 800cfaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	221a      	movs	r2, #26
 800cfb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cfb2:	f000 f855 	bl	800d060 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cfb6:	4b02      	ldr	r3, [pc, #8]	; (800cfc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	200001dc 	.word	0x200001dc

0800cfc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	4603      	mov	r3, r0
 800cfcc:	6039      	str	r1, [r7, #0]
 800cfce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cfd0:	79fb      	ldrb	r3, [r7, #7]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d105      	bne.n	800cfe2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfd6:	683a      	ldr	r2, [r7, #0]
 800cfd8:	4907      	ldr	r1, [pc, #28]	; (800cff8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cfda:	4808      	ldr	r0, [pc, #32]	; (800cffc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cfdc:	f7fc f93c 	bl	8009258 <USBD_GetString>
 800cfe0:	e004      	b.n	800cfec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfe2:	683a      	ldr	r2, [r7, #0]
 800cfe4:	4904      	ldr	r1, [pc, #16]	; (800cff8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cfe6:	4805      	ldr	r0, [pc, #20]	; (800cffc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cfe8:	f7fc f936 	bl	8009258 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfec:	4b02      	ldr	r3, [pc, #8]	; (800cff8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3708      	adds	r7, #8
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	2000cb5c 	.word	0x2000cb5c
 800cffc:	0800d9e0 	.word	0x0800d9e0

0800d000 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	4603      	mov	r3, r0
 800d008:	6039      	str	r1, [r7, #0]
 800d00a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d00c:	79fb      	ldrb	r3, [r7, #7]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d105      	bne.n	800d01e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d012:	683a      	ldr	r2, [r7, #0]
 800d014:	4907      	ldr	r1, [pc, #28]	; (800d034 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d016:	4808      	ldr	r0, [pc, #32]	; (800d038 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d018:	f7fc f91e 	bl	8009258 <USBD_GetString>
 800d01c:	e004      	b.n	800d028 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	4904      	ldr	r1, [pc, #16]	; (800d034 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d022:	4805      	ldr	r0, [pc, #20]	; (800d038 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d024:	f7fc f918 	bl	8009258 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d028:	4b02      	ldr	r3, [pc, #8]	; (800d034 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	2000cb5c 	.word	0x2000cb5c
 800d038:	0800d9ec 	.word	0x0800d9ec

0800d03c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	4603      	mov	r3, r0
 800d044:	6039      	str	r1, [r7, #0]
 800d046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	220c      	movs	r2, #12
 800d04c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d04e:	4b03      	ldr	r3, [pc, #12]	; (800d05c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d050:	4618      	mov	r0, r3
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	200001cc 	.word	0x200001cc

0800d060 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d066:	4b0f      	ldr	r3, [pc, #60]	; (800d0a4 <Get_SerialNum+0x44>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d06c:	4b0e      	ldr	r3, [pc, #56]	; (800d0a8 <Get_SerialNum+0x48>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d072:	4b0e      	ldr	r3, [pc, #56]	; (800d0ac <Get_SerialNum+0x4c>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4413      	add	r3, r2
 800d07e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d009      	beq.n	800d09a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d086:	2208      	movs	r2, #8
 800d088:	4909      	ldr	r1, [pc, #36]	; (800d0b0 <Get_SerialNum+0x50>)
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f000 f814 	bl	800d0b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d090:	2204      	movs	r2, #4
 800d092:	4908      	ldr	r1, [pc, #32]	; (800d0b4 <Get_SerialNum+0x54>)
 800d094:	68b8      	ldr	r0, [r7, #8]
 800d096:	f000 f80f 	bl	800d0b8 <IntToUnicode>
  }
}
 800d09a:	bf00      	nop
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	1fff7590 	.word	0x1fff7590
 800d0a8:	1fff7594 	.word	0x1fff7594
 800d0ac:	1fff7598 	.word	0x1fff7598
 800d0b0:	200001de 	.word	0x200001de
 800d0b4:	200001ee 	.word	0x200001ee

0800d0b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b087      	sub	sp, #28
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	75fb      	strb	r3, [r7, #23]
 800d0ce:	e027      	b.n	800d120 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	0f1b      	lsrs	r3, r3, #28
 800d0d4:	2b09      	cmp	r3, #9
 800d0d6:	d80b      	bhi.n	800d0f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	0f1b      	lsrs	r3, r3, #28
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	7dfb      	ldrb	r3, [r7, #23]
 800d0e0:	005b      	lsls	r3, r3, #1
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	440b      	add	r3, r1
 800d0e8:	3230      	adds	r2, #48	; 0x30
 800d0ea:	b2d2      	uxtb	r2, r2
 800d0ec:	701a      	strb	r2, [r3, #0]
 800d0ee:	e00a      	b.n	800d106 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	0f1b      	lsrs	r3, r3, #28
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	7dfb      	ldrb	r3, [r7, #23]
 800d0f8:	005b      	lsls	r3, r3, #1
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	440b      	add	r3, r1
 800d100:	3237      	adds	r2, #55	; 0x37
 800d102:	b2d2      	uxtb	r2, r2
 800d104:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	011b      	lsls	r3, r3, #4
 800d10a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d10c:	7dfb      	ldrb	r3, [r7, #23]
 800d10e:	005b      	lsls	r3, r3, #1
 800d110:	3301      	adds	r3, #1
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	4413      	add	r3, r2
 800d116:	2200      	movs	r2, #0
 800d118:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d11a:	7dfb      	ldrb	r3, [r7, #23]
 800d11c:	3301      	adds	r3, #1
 800d11e:	75fb      	strb	r3, [r7, #23]
 800d120:	7dfa      	ldrb	r2, [r7, #23]
 800d122:	79fb      	ldrb	r3, [r7, #7]
 800d124:	429a      	cmp	r2, r3
 800d126:	d3d3      	bcc.n	800d0d0 <IntToUnicode+0x18>
  }
}
 800d128:	bf00      	nop
 800d12a:	371c      	adds	r7, #28
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a0d      	ldr	r2, [pc, #52]	; (800d178 <HAL_PCD_MspInit+0x44>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d113      	bne.n	800d16e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d146:	4b0d      	ldr	r3, [pc, #52]	; (800d17c <HAL_PCD_MspInit+0x48>)
 800d148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d14a:	4a0c      	ldr	r2, [pc, #48]	; (800d17c <HAL_PCD_MspInit+0x48>)
 800d14c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d150:	6593      	str	r3, [r2, #88]	; 0x58
 800d152:	4b0a      	ldr	r3, [pc, #40]	; (800d17c <HAL_PCD_MspInit+0x48>)
 800d154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d156:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d15a:	60fb      	str	r3, [r7, #12]
 800d15c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 5, 0);
 800d15e:	2200      	movs	r2, #0
 800d160:	2105      	movs	r1, #5
 800d162:	2043      	movs	r0, #67	; 0x43
 800d164:	f7f5 f918 	bl	8002398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d168:	2043      	movs	r0, #67	; 0x43
 800d16a:	f7f5 f931 	bl	80023d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d16e:	bf00      	nop
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	40006800 	.word	0x40006800
 800d17c:	40021000 	.word	0x40021000

0800d180 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800d194:	4619      	mov	r1, r3
 800d196:	4610      	mov	r0, r2
 800d198:	f7fb f90d 	bl	80083b6 <USBD_LL_SetupStage>
}
 800d19c:	bf00      	nop
 800d19e:	3708      	adds	r7, #8
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800d1b6:	78fb      	ldrb	r3, [r7, #3]
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	015b      	lsls	r3, r3, #5
 800d1bc:	4413      	add	r3, r2
 800d1be:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	78fb      	ldrb	r3, [r7, #3]
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	f7fb f940 	bl	800844c <USBD_LL_DataOutStage>
}
 800d1cc:	bf00      	nop
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	460b      	mov	r3, r1
 800d1de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800d1e6:	78fb      	ldrb	r3, [r7, #3]
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	015b      	lsls	r3, r3, #5
 800d1ec:	4413      	add	r3, r2
 800d1ee:	333c      	adds	r3, #60	; 0x3c
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	78fb      	ldrb	r3, [r7, #3]
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	f7fb f99a 	bl	800852e <USBD_LL_DataInStage>
}
 800d1fa:	bf00      	nop
 800d1fc:	3708      	adds	r7, #8
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d210:	4618      	mov	r0, r3
 800d212:	f7fb faad 	bl	8008770 <USBD_LL_SOF>
}
 800d216:	bf00      	nop
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d21e:	b580      	push	{r7, lr}
 800d220:	b084      	sub	sp, #16
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d226:	2301      	movs	r3, #1
 800d228:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d001      	beq.n	800d236 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d232:	f7f4 fa25 	bl	8001680 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d23c:	7bfa      	ldrb	r2, [r7, #15]
 800d23e:	4611      	mov	r1, r2
 800d240:	4618      	mov	r0, r3
 800d242:	f7fb fa5a 	bl	80086fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7fb fa13 	bl	8008678 <USBD_LL_Reset>
}
 800d252:	bf00      	nop
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
	...

0800d25c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fb fa55 	bl	800871a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	699b      	ldr	r3, [r3, #24]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d005      	beq.n	800d284 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d278:	4b04      	ldr	r3, [pc, #16]	; (800d28c <HAL_PCD_SuspendCallback+0x30>)
 800d27a:	691b      	ldr	r3, [r3, #16]
 800d27c:	4a03      	ldr	r2, [pc, #12]	; (800d28c <HAL_PCD_SuspendCallback+0x30>)
 800d27e:	f043 0306 	orr.w	r3, r3, #6
 800d282:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d284:	bf00      	nop
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	e000ed00 	.word	0xe000ed00

0800d290 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	699b      	ldr	r3, [r3, #24]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d007      	beq.n	800d2b0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d2a0:	4b08      	ldr	r3, [pc, #32]	; (800d2c4 <HAL_PCD_ResumeCallback+0x34>)
 800d2a2:	691b      	ldr	r3, [r3, #16]
 800d2a4:	4a07      	ldr	r2, [pc, #28]	; (800d2c4 <HAL_PCD_ResumeCallback+0x34>)
 800d2a6:	f023 0306 	bic.w	r3, r3, #6
 800d2aa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d2ac:	f000 fab2 	bl	800d814 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fb fa44 	bl	8008744 <USBD_LL_Resume>
}
 800d2bc:	bf00      	nop
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	e000ed00 	.word	0xe000ed00

0800d2c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d2d0:	f7f7 f85e 	bl	8004390 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d2d4:	4a2b      	ldr	r2, [pc, #172]	; (800d384 <USBD_LL_Init+0xbc>)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a29      	ldr	r2, [pc, #164]	; (800d384 <USBD_LL_Init+0xbc>)
 800d2e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d2e4:	4b27      	ldr	r3, [pc, #156]	; (800d384 <USBD_LL_Init+0xbc>)
 800d2e6:	4a28      	ldr	r2, [pc, #160]	; (800d388 <USBD_LL_Init+0xc0>)
 800d2e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d2ea:	4b26      	ldr	r3, [pc, #152]	; (800d384 <USBD_LL_Init+0xbc>)
 800d2ec:	2208      	movs	r2, #8
 800d2ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d2f0:	4b24      	ldr	r3, [pc, #144]	; (800d384 <USBD_LL_Init+0xbc>)
 800d2f2:	2202      	movs	r2, #2
 800d2f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d2f6:	4b23      	ldr	r3, [pc, #140]	; (800d384 <USBD_LL_Init+0xbc>)
 800d2f8:	2202      	movs	r2, #2
 800d2fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d2fc:	4b21      	ldr	r3, [pc, #132]	; (800d384 <USBD_LL_Init+0xbc>)
 800d2fe:	2200      	movs	r2, #0
 800d300:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d302:	4b20      	ldr	r3, [pc, #128]	; (800d384 <USBD_LL_Init+0xbc>)
 800d304:	2200      	movs	r2, #0
 800d306:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d308:	4b1e      	ldr	r3, [pc, #120]	; (800d384 <USBD_LL_Init+0xbc>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d30e:	4b1d      	ldr	r3, [pc, #116]	; (800d384 <USBD_LL_Init+0xbc>)
 800d310:	2200      	movs	r2, #0
 800d312:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d314:	481b      	ldr	r0, [pc, #108]	; (800d384 <USBD_LL_Init+0xbc>)
 800d316:	f7f6 f894 	bl	8003442 <HAL_PCD_Init>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d001      	beq.n	800d324 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d320:	f7f4 f9ae 	bl	8001680 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d32a:	2318      	movs	r3, #24
 800d32c:	2200      	movs	r2, #0
 800d32e:	2100      	movs	r1, #0
 800d330:	f7f6 ff62 	bl	80041f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d33a:	2358      	movs	r3, #88	; 0x58
 800d33c:	2200      	movs	r2, #0
 800d33e:	2180      	movs	r1, #128	; 0x80
 800d340:	f7f6 ff5a 	bl	80041f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d34a:	23c0      	movs	r3, #192	; 0xc0
 800d34c:	2200      	movs	r2, #0
 800d34e:	2181      	movs	r1, #129	; 0x81
 800d350:	f7f6 ff52 	bl	80041f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d35a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d35e:	2200      	movs	r2, #0
 800d360:	2101      	movs	r1, #1
 800d362:	f7f6 ff49 	bl	80041f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d36c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d370:	2200      	movs	r2, #0
 800d372:	2182      	movs	r1, #130	; 0x82
 800d374:	f7f6 ff40 	bl	80041f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3708      	adds	r7, #8
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	2000cd5c 	.word	0x2000cd5c
 800d388:	40006800 	.word	0x40006800

0800d38c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d394:	2300      	movs	r3, #0
 800d396:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d398:	2300      	movs	r3, #0
 800d39a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7f6 f935 	bl	8003612 <HAL_PCD_Start>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d3ac:	7bbb      	ldrb	r3, [r7, #14]
 800d3ae:	2b03      	cmp	r3, #3
 800d3b0:	d816      	bhi.n	800d3e0 <USBD_LL_Start+0x54>
 800d3b2:	a201      	add	r2, pc, #4	; (adr r2, 800d3b8 <USBD_LL_Start+0x2c>)
 800d3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b8:	0800d3c9 	.word	0x0800d3c9
 800d3bc:	0800d3cf 	.word	0x0800d3cf
 800d3c0:	0800d3d5 	.word	0x0800d3d5
 800d3c4:	0800d3db 	.word	0x0800d3db
    case HAL_OK :
      usb_status = USBD_OK;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d3cc:	e00b      	b.n	800d3e6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3ce:	2302      	movs	r3, #2
 800d3d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3d2:	e008      	b.n	800d3e6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3d8:	e005      	b.n	800d3e6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3da:	2302      	movs	r3, #2
 800d3dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d3de:	e002      	b.n	800d3e6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d3e0:	2302      	movs	r3, #2
 800d3e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3e4:	bf00      	nop
  }
  return usb_status;
 800d3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3710      	adds	r7, #16
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	4608      	mov	r0, r1
 800d3fa:	4611      	mov	r1, r2
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	4603      	mov	r3, r0
 800d400:	70fb      	strb	r3, [r7, #3]
 800d402:	460b      	mov	r3, r1
 800d404:	70bb      	strb	r3, [r7, #2]
 800d406:	4613      	mov	r3, r2
 800d408:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d40a:	2300      	movs	r3, #0
 800d40c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d40e:	2300      	movs	r3, #0
 800d410:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d418:	78bb      	ldrb	r3, [r7, #2]
 800d41a:	883a      	ldrh	r2, [r7, #0]
 800d41c:	78f9      	ldrb	r1, [r7, #3]
 800d41e:	f7f6 fa8d 	bl	800393c <HAL_PCD_EP_Open>
 800d422:	4603      	mov	r3, r0
 800d424:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d426:	7bbb      	ldrb	r3, [r7, #14]
 800d428:	2b03      	cmp	r3, #3
 800d42a:	d817      	bhi.n	800d45c <USBD_LL_OpenEP+0x6c>
 800d42c:	a201      	add	r2, pc, #4	; (adr r2, 800d434 <USBD_LL_OpenEP+0x44>)
 800d42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d432:	bf00      	nop
 800d434:	0800d445 	.word	0x0800d445
 800d438:	0800d44b 	.word	0x0800d44b
 800d43c:	0800d451 	.word	0x0800d451
 800d440:	0800d457 	.word	0x0800d457
    case HAL_OK :
      usb_status = USBD_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	73fb      	strb	r3, [r7, #15]
    break;
 800d448:	e00b      	b.n	800d462 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d44a:	2302      	movs	r3, #2
 800d44c:	73fb      	strb	r3, [r7, #15]
    break;
 800d44e:	e008      	b.n	800d462 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d450:	2301      	movs	r3, #1
 800d452:	73fb      	strb	r3, [r7, #15]
    break;
 800d454:	e005      	b.n	800d462 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d456:	2302      	movs	r3, #2
 800d458:	73fb      	strb	r3, [r7, #15]
    break;
 800d45a:	e002      	b.n	800d462 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d45c:	2302      	movs	r3, #2
 800d45e:	73fb      	strb	r3, [r7, #15]
    break;
 800d460:	bf00      	nop
  }
  return usb_status;
 800d462:	7bfb      	ldrb	r3, [r7, #15]
}
 800d464:	4618      	mov	r0, r3
 800d466:	3710      	adds	r7, #16
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	460b      	mov	r3, r1
 800d476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d478:	2300      	movs	r3, #0
 800d47a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d47c:	2300      	movs	r3, #0
 800d47e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d486:	78fa      	ldrb	r2, [r7, #3]
 800d488:	4611      	mov	r1, r2
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7f6 fab6 	bl	80039fc <HAL_PCD_EP_Close>
 800d490:	4603      	mov	r3, r0
 800d492:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800d494:	7bbb      	ldrb	r3, [r7, #14]
 800d496:	2b03      	cmp	r3, #3
 800d498:	d816      	bhi.n	800d4c8 <USBD_LL_CloseEP+0x5c>
 800d49a:	a201      	add	r2, pc, #4	; (adr r2, 800d4a0 <USBD_LL_CloseEP+0x34>)
 800d49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a0:	0800d4b1 	.word	0x0800d4b1
 800d4a4:	0800d4b7 	.word	0x0800d4b7
 800d4a8:	0800d4bd 	.word	0x0800d4bd
 800d4ac:	0800d4c3 	.word	0x0800d4c3
    case HAL_OK :
      usb_status = USBD_OK;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4b4:	e00b      	b.n	800d4ce <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4b6:	2302      	movs	r3, #2
 800d4b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ba:	e008      	b.n	800d4ce <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	73fb      	strb	r3, [r7, #15]
    break;
 800d4c0:	e005      	b.n	800d4ce <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4c2:	2302      	movs	r3, #2
 800d4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d4c6:	e002      	b.n	800d4ce <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d4cc:	bf00      	nop
  }
  return usb_status;  
 800d4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3710      	adds	r7, #16
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d4f2:	78fa      	ldrb	r2, [r7, #3]
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7f6 fb4a 	bl	8003b90 <HAL_PCD_EP_SetStall>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d500:	7bbb      	ldrb	r3, [r7, #14]
 800d502:	2b03      	cmp	r3, #3
 800d504:	d816      	bhi.n	800d534 <USBD_LL_StallEP+0x5c>
 800d506:	a201      	add	r2, pc, #4	; (adr r2, 800d50c <USBD_LL_StallEP+0x34>)
 800d508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d50c:	0800d51d 	.word	0x0800d51d
 800d510:	0800d523 	.word	0x0800d523
 800d514:	0800d529 	.word	0x0800d529
 800d518:	0800d52f 	.word	0x0800d52f
    case HAL_OK :
      usb_status = USBD_OK;
 800d51c:	2300      	movs	r3, #0
 800d51e:	73fb      	strb	r3, [r7, #15]
    break;
 800d520:	e00b      	b.n	800d53a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d522:	2302      	movs	r3, #2
 800d524:	73fb      	strb	r3, [r7, #15]
    break;
 800d526:	e008      	b.n	800d53a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d528:	2301      	movs	r3, #1
 800d52a:	73fb      	strb	r3, [r7, #15]
    break;
 800d52c:	e005      	b.n	800d53a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d52e:	2302      	movs	r3, #2
 800d530:	73fb      	strb	r3, [r7, #15]
    break;
 800d532:	e002      	b.n	800d53a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d534:	2302      	movs	r3, #2
 800d536:	73fb      	strb	r3, [r7, #15]
    break;
 800d538:	bf00      	nop
  }
  return usb_status;  
 800d53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	460b      	mov	r3, r1
 800d54e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d550:	2300      	movs	r3, #0
 800d552:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d554:	2300      	movs	r3, #0
 800d556:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d55e:	78fa      	ldrb	r2, [r7, #3]
 800d560:	4611      	mov	r1, r2
 800d562:	4618      	mov	r0, r3
 800d564:	f7f6 fb6e 	bl	8003c44 <HAL_PCD_EP_ClrStall>
 800d568:	4603      	mov	r3, r0
 800d56a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d56c:	7bbb      	ldrb	r3, [r7, #14]
 800d56e:	2b03      	cmp	r3, #3
 800d570:	d816      	bhi.n	800d5a0 <USBD_LL_ClearStallEP+0x5c>
 800d572:	a201      	add	r2, pc, #4	; (adr r2, 800d578 <USBD_LL_ClearStallEP+0x34>)
 800d574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d578:	0800d589 	.word	0x0800d589
 800d57c:	0800d58f 	.word	0x0800d58f
 800d580:	0800d595 	.word	0x0800d595
 800d584:	0800d59b 	.word	0x0800d59b
    case HAL_OK :
      usb_status = USBD_OK;
 800d588:	2300      	movs	r3, #0
 800d58a:	73fb      	strb	r3, [r7, #15]
    break;
 800d58c:	e00b      	b.n	800d5a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d58e:	2302      	movs	r3, #2
 800d590:	73fb      	strb	r3, [r7, #15]
    break;
 800d592:	e008      	b.n	800d5a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d594:	2301      	movs	r3, #1
 800d596:	73fb      	strb	r3, [r7, #15]
    break;
 800d598:	e005      	b.n	800d5a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d59a:	2302      	movs	r3, #2
 800d59c:	73fb      	strb	r3, [r7, #15]
    break;
 800d59e:	e002      	b.n	800d5a6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5a4:	bf00      	nop
  }
  return usb_status; 
 800d5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5c2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d5c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	da08      	bge.n	800d5de <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d5cc:	78fb      	ldrb	r3, [r7, #3]
 800d5ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	015b      	lsls	r3, r3, #5
 800d5d6:	4413      	add	r3, r2
 800d5d8:	332a      	adds	r3, #42	; 0x2a
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	e008      	b.n	800d5f0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d5de:	78fb      	ldrb	r3, [r7, #3]
 800d5e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	015b      	lsls	r3, r3, #5
 800d5e8:	4413      	add	r3, r2
 800d5ea:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800d5ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3714      	adds	r7, #20
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	460b      	mov	r3, r1
 800d606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d608:	2300      	movs	r3, #0
 800d60a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d616:	78fa      	ldrb	r2, [r7, #3]
 800d618:	4611      	mov	r1, r2
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7f6 f969 	bl	80038f2 <HAL_PCD_SetAddress>
 800d620:	4603      	mov	r3, r0
 800d622:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800d624:	7bbb      	ldrb	r3, [r7, #14]
 800d626:	2b03      	cmp	r3, #3
 800d628:	d816      	bhi.n	800d658 <USBD_LL_SetUSBAddress+0x5c>
 800d62a:	a201      	add	r2, pc, #4	; (adr r2, 800d630 <USBD_LL_SetUSBAddress+0x34>)
 800d62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d630:	0800d641 	.word	0x0800d641
 800d634:	0800d647 	.word	0x0800d647
 800d638:	0800d64d 	.word	0x0800d64d
 800d63c:	0800d653 	.word	0x0800d653
    case HAL_OK :
      usb_status = USBD_OK;
 800d640:	2300      	movs	r3, #0
 800d642:	73fb      	strb	r3, [r7, #15]
    break;
 800d644:	e00b      	b.n	800d65e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d646:	2302      	movs	r3, #2
 800d648:	73fb      	strb	r3, [r7, #15]
    break;
 800d64a:	e008      	b.n	800d65e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d64c:	2301      	movs	r3, #1
 800d64e:	73fb      	strb	r3, [r7, #15]
    break;
 800d650:	e005      	b.n	800d65e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d652:	2302      	movs	r3, #2
 800d654:	73fb      	strb	r3, [r7, #15]
    break;
 800d656:	e002      	b.n	800d65e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d658:	2302      	movs	r3, #2
 800d65a:	73fb      	strb	r3, [r7, #15]
    break;
 800d65c:	bf00      	nop
  }
  return usb_status;  
 800d65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b086      	sub	sp, #24
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	607a      	str	r2, [r7, #4]
 800d672:	461a      	mov	r2, r3
 800d674:	460b      	mov	r3, r1
 800d676:	72fb      	strb	r3, [r7, #11]
 800d678:	4613      	mov	r3, r2
 800d67a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d67c:	2300      	movs	r3, #0
 800d67e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d680:	2300      	movs	r3, #0
 800d682:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d68a:	893b      	ldrh	r3, [r7, #8]
 800d68c:	7af9      	ldrb	r1, [r7, #11]
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	f7f6 fa45 	bl	8003b1e <HAL_PCD_EP_Transmit>
 800d694:	4603      	mov	r3, r0
 800d696:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800d698:	7dbb      	ldrb	r3, [r7, #22]
 800d69a:	2b03      	cmp	r3, #3
 800d69c:	d816      	bhi.n	800d6cc <USBD_LL_Transmit+0x64>
 800d69e:	a201      	add	r2, pc, #4	; (adr r2, 800d6a4 <USBD_LL_Transmit+0x3c>)
 800d6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a4:	0800d6b5 	.word	0x0800d6b5
 800d6a8:	0800d6bb 	.word	0x0800d6bb
 800d6ac:	0800d6c1 	.word	0x0800d6c1
 800d6b0:	0800d6c7 	.word	0x0800d6c7
    case HAL_OK :
      usb_status = USBD_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	75fb      	strb	r3, [r7, #23]
    break;
 800d6b8:	e00b      	b.n	800d6d2 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6ba:	2302      	movs	r3, #2
 800d6bc:	75fb      	strb	r3, [r7, #23]
    break;
 800d6be:	e008      	b.n	800d6d2 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	75fb      	strb	r3, [r7, #23]
    break;
 800d6c4:	e005      	b.n	800d6d2 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6c6:	2302      	movs	r3, #2
 800d6c8:	75fb      	strb	r3, [r7, #23]
    break;
 800d6ca:	e002      	b.n	800d6d2 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800d6cc:	2302      	movs	r3, #2
 800d6ce:	75fb      	strb	r3, [r7, #23]
    break;
 800d6d0:	bf00      	nop
  }
  return usb_status;    
 800d6d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3718      	adds	r7, #24
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b086      	sub	sp, #24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	607a      	str	r2, [r7, #4]
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	72fb      	strb	r3, [r7, #11]
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d6fe:	893b      	ldrh	r3, [r7, #8]
 800d700:	7af9      	ldrb	r1, [r7, #11]
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	f7f6 f9bc 	bl	8003a80 <HAL_PCD_EP_Receive>
 800d708:	4603      	mov	r3, r0
 800d70a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800d70c:	7dbb      	ldrb	r3, [r7, #22]
 800d70e:	2b03      	cmp	r3, #3
 800d710:	d816      	bhi.n	800d740 <USBD_LL_PrepareReceive+0x64>
 800d712:	a201      	add	r2, pc, #4	; (adr r2, 800d718 <USBD_LL_PrepareReceive+0x3c>)
 800d714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d718:	0800d729 	.word	0x0800d729
 800d71c:	0800d72f 	.word	0x0800d72f
 800d720:	0800d735 	.word	0x0800d735
 800d724:	0800d73b 	.word	0x0800d73b
    case HAL_OK :
      usb_status = USBD_OK;
 800d728:	2300      	movs	r3, #0
 800d72a:	75fb      	strb	r3, [r7, #23]
    break;
 800d72c:	e00b      	b.n	800d746 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d72e:	2302      	movs	r3, #2
 800d730:	75fb      	strb	r3, [r7, #23]
    break;
 800d732:	e008      	b.n	800d746 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d734:	2301      	movs	r3, #1
 800d736:	75fb      	strb	r3, [r7, #23]
    break;
 800d738:	e005      	b.n	800d746 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d73a:	2302      	movs	r3, #2
 800d73c:	75fb      	strb	r3, [r7, #23]
    break;
 800d73e:	e002      	b.n	800d746 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800d740:	2302      	movs	r3, #2
 800d742:	75fb      	strb	r3, [r7, #23]
    break;
 800d744:	bf00      	nop
  }
  return usb_status; 
 800d746:	7dfb      	ldrb	r3, [r7, #23]
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3718      	adds	r7, #24
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	460b      	mov	r3, r1
 800d75a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d762:	78fa      	ldrb	r2, [r7, #3]
 800d764:	4611      	mov	r1, r2
 800d766:	4618      	mov	r0, r3
 800d768:	f7f6 f9c4 	bl	8003af4 <HAL_PCD_EP_GetRxCount>
 800d76c:	4603      	mov	r3, r0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3708      	adds	r7, #8
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	460b      	mov	r3, r1
 800d782:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d784:	78fb      	ldrb	r3, [r7, #3]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d002      	beq.n	800d790 <HAL_PCDEx_LPM_Callback+0x18>
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d013      	beq.n	800d7b6 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800d78e:	e023      	b.n	800d7d8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d007      	beq.n	800d7a8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d798:	f000 f83c 	bl	800d814 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d79c:	4b10      	ldr	r3, [pc, #64]	; (800d7e0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d79e:	691b      	ldr	r3, [r3, #16]
 800d7a0:	4a0f      	ldr	r2, [pc, #60]	; (800d7e0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d7a2:	f023 0306 	bic.w	r3, r3, #6
 800d7a6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fa ffc8 	bl	8008744 <USBD_LL_Resume>
    break;
 800d7b4:	e010      	b.n	800d7d8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7fa ffac 	bl	800871a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	699b      	ldr	r3, [r3, #24]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d005      	beq.n	800d7d6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7ca:	4b05      	ldr	r3, [pc, #20]	; (800d7e0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	4a04      	ldr	r2, [pc, #16]	; (800d7e0 <HAL_PCDEx_LPM_Callback+0x68>)
 800d7d0:	f043 0306 	orr.w	r3, r3, #6
 800d7d4:	6113      	str	r3, [r2, #16]
    break;   
 800d7d6:	bf00      	nop
}
 800d7d8:	bf00      	nop
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	e000ed00 	.word	0xe000ed00

0800d7e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d7ec:	4b03      	ldr	r3, [pc, #12]	; (800d7fc <USBD_static_malloc+0x18>)
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	370c      	adds	r7, #12
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	20001af8 	.word	0x20001af8

0800d800 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]

}
 800d808:	bf00      	nop
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d818:	f7f3 fd6e 	bl	80012f8 <SystemClock_Config>
}
 800d81c:	bf00      	nop
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <__libc_init_array>:
 800d820:	b570      	push	{r4, r5, r6, lr}
 800d822:	4e0d      	ldr	r6, [pc, #52]	; (800d858 <__libc_init_array+0x38>)
 800d824:	4c0d      	ldr	r4, [pc, #52]	; (800d85c <__libc_init_array+0x3c>)
 800d826:	1ba4      	subs	r4, r4, r6
 800d828:	10a4      	asrs	r4, r4, #2
 800d82a:	2500      	movs	r5, #0
 800d82c:	42a5      	cmp	r5, r4
 800d82e:	d109      	bne.n	800d844 <__libc_init_array+0x24>
 800d830:	4e0b      	ldr	r6, [pc, #44]	; (800d860 <__libc_init_array+0x40>)
 800d832:	4c0c      	ldr	r4, [pc, #48]	; (800d864 <__libc_init_array+0x44>)
 800d834:	f000 f82c 	bl	800d890 <_init>
 800d838:	1ba4      	subs	r4, r4, r6
 800d83a:	10a4      	asrs	r4, r4, #2
 800d83c:	2500      	movs	r5, #0
 800d83e:	42a5      	cmp	r5, r4
 800d840:	d105      	bne.n	800d84e <__libc_init_array+0x2e>
 800d842:	bd70      	pop	{r4, r5, r6, pc}
 800d844:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d848:	4798      	blx	r3
 800d84a:	3501      	adds	r5, #1
 800d84c:	e7ee      	b.n	800d82c <__libc_init_array+0xc>
 800d84e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d852:	4798      	blx	r3
 800d854:	3501      	adds	r5, #1
 800d856:	e7f2      	b.n	800d83e <__libc_init_array+0x1e>
 800d858:	0800daf8 	.word	0x0800daf8
 800d85c:	0800daf8 	.word	0x0800daf8
 800d860:	0800daf8 	.word	0x0800daf8
 800d864:	0800dafc 	.word	0x0800dafc

0800d868 <memcpy>:
 800d868:	b510      	push	{r4, lr}
 800d86a:	1e43      	subs	r3, r0, #1
 800d86c:	440a      	add	r2, r1
 800d86e:	4291      	cmp	r1, r2
 800d870:	d100      	bne.n	800d874 <memcpy+0xc>
 800d872:	bd10      	pop	{r4, pc}
 800d874:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d87c:	e7f7      	b.n	800d86e <memcpy+0x6>

0800d87e <memset>:
 800d87e:	4402      	add	r2, r0
 800d880:	4603      	mov	r3, r0
 800d882:	4293      	cmp	r3, r2
 800d884:	d100      	bne.n	800d888 <memset+0xa>
 800d886:	4770      	bx	lr
 800d888:	f803 1b01 	strb.w	r1, [r3], #1
 800d88c:	e7f9      	b.n	800d882 <memset+0x4>
	...

0800d890 <_init>:
 800d890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d892:	bf00      	nop
 800d894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d896:	bc08      	pop	{r3}
 800d898:	469e      	mov	lr, r3
 800d89a:	4770      	bx	lr

0800d89c <_fini>:
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	bf00      	nop
 800d8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8a2:	bc08      	pop	{r3}
 800d8a4:	469e      	mov	lr, r3
 800d8a6:	4770      	bx	lr
